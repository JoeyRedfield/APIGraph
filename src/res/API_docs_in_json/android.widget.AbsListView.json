{"Functions": {"hasTextFilter()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the ListView currently has a text filter.", "history": "Added in API level 1", "FullName": "public boolean hasTextFilter ()"}, "requestDisallowInterceptTouchEvent(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the child does not want the parent to intercept touch events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child does not want this parent and its ancestors to intercept touch events with @B_android#view#ViewGroup#onInterceptTouchEvent_E@. This parent should pass this call onto its parents. This parent must obey this request for the duration of the touch (that is, only clear the flag after this parent has received an up or a cancel.", "history": "Added in API level 1", "FullName": "public void requestDisallowInterceptTouchEvent (boolean disallowIntercept)"}, "setCacheColorHint(int)": {"Returns": [], "Parameters": [["int", "int: The background color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via @B_android#view#View#setBackgroundDrawable_E@).", "history": "Added in API level 1", "FullName": "public void setCacheColorHint (int color)"}, "performItemClick(android.view.View,int,long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "Added in API level 1", "FullName": "public boolean performItemClick (View view, int position, long id)"}, "onCancelPendingInputEvents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called as the result of a call to @B_android#view#View#cancelPendingInputEvents_E@ on this view or a parent view. This method is responsible for removing any pending high-level input events that were posted to the event queue to run later. Custom view classes that post their own deferred high-level events via @B_android#view#View#post_E@, @B_android#view#View#postDelayed_E@ or @B_android#os#Handler_E@ should override this method, call super.onCancelPendingInputEvents() and remove those callbacks as appropriate.", "history": "Added in API level 19", "FullName": "public void onCancelPendingInputEvents ()"}, "isFastScrollAlwaysVisible()": {"Returns": [["boolean", "true if the fast scroller will always show"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setFastScrollAlwaysVisible_E@"], "Permissions": [], "Description": "Returns true if the fast scroller is set to always show on this view.", "history": "Added in API level 11", "FullName": "public boolean isFastScrollAlwaysVisible ()"}, "getTopFadingEdgeStrength()": {"Returns": [["float", "the intensity of the top fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the top faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 1", "FullName": "protected float getTopFadingEdgeStrength ()"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void requestLayout ()"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "smoothScrollToPosition(int,int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."], ["int", "int: Do not scroll if it would move this adapter position out of view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed, but it will stop early if scrolling further would scroll boundPosition out of view.", "history": "Added in API level 8", "FullName": "public void smoothScrollToPosition (int position, int boundPosition)"}, "onInterceptHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the view group would like to intercept the hover event and prevent its children from receiving it."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event that describes the hover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept hover events before they are handled by child views. This method is called before dispatching a hover event to a child of the view group or to the view group's own @B_android#view#View#onHoverEvent_E@ to allow the view group a chance to intercept the hover event. This method can also be used to watch all pointer motions that occur within the bounds of the view group even when the pointer is hovering over a child of the view group rather than over the view group itself. The view group can prevent its children from receiving hover events by implementing this method and returning true to indicate that it would like to intercept hover events. The view group must continuously return true from @B_android#view#ViewGroup#onInterceptHoverEvent_E@ for as long as it wishes to continue intercepting hover events from its children. Interception preserves the invariant that at most one view can be hovered at a time by transferring hover focus from the currently hovered child to the view group or vice-versa as needed. If this method returns true and a child is already hovered, then the child view will first receive a hover exit event and then the view group itself will receive a hover enter event in @B_android#view#View#onHoverEvent_E@. Likewise, if this method had previously returned true to intercept hover events and instead returns false while the pointer is hovering within the bounds of one of a child, then the view group will first receive a hover exit event in @B_android#view#View#onHoverEvent_E@ and then the hovered child will receive a hover enter event. The default implementation handles mouse hover on the scroll bars.", "history": "Added in API level 14", "FullName": "public boolean onInterceptHoverEvent (MotionEvent event)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean gainFocus, int direction, Rect previouslyFocusedRect)"}, "reclaimViews(java.util.List<android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: A list into which to put the reclaimed views"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move all views (excluding headers and footers) held by this AbsListView into the supplied List. This includes views displayed on the screen as well as views stored in AbsListView's internal view recycler.", "history": "Added in API level 1", "FullName": "public void reclaimViews (List<View> views)"}, "getListPaddingRight()": {"Returns": [["int", "The right list padding."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getPaddingRight_E@", "@B_android#widget#AbsListView#getSelector_E@"], "Permissions": [], "Description": "List padding is the maximum of the normal view's padding and the padding of the selector.", "history": "Added in API level 1", "FullName": "public int getListPaddingRight ()"}, "smoothScrollBy(int,int)": {"Returns": [], "Parameters": [["int", "int: Distance to scroll in pixels."], ["int", "int: Duration of the scroll animation in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll by distance pixels over duration milliseconds.", "history": "Added in API level 8", "FullName": "public void smoothScrollBy (int distance, int duration)"}, "setSmoothScrollbarEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether or not to enable smooth scrollbar."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setSmoothScrollbarEnabled_E@"], "Permissions": [], "Description": "When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items. This however assumes that all list items have the same height. If you use a list in which items have different heights, the scrollbar will change appearance as the user scrolls through the list. To avoid this issue, you need to disable this property. When smooth scrollbar is disabled, the position and size of the scrollbar thumb is based solely on the number of items in the adapter and the position of the visible items inside the adapter. This provides a stable scrollbar as the user navigates through a list of items with varying heights.", "history": "Added in API level 3", "FullName": "public void setSmoothScrollbarEnabled (boolean enabled)"}, "showContextMenuForChild(android.view.View)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: the source view where the context menu was first invoked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for the specified view or its ancestors. In most cases, a subclass does not need to override this. However, if the subclass is added directly to the window manager (for example, @B_android#view#ViewManager#addView_E@) then it should override this and show the context menu.", "history": "Added in API level 1", "FullName": "public boolean showContextMenuForChild (View originalView)"}, "setFriction(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of friction applied to flings. The default value is @B_android#view#ViewConfiguration#getScrollFriction_E@.", "history": "Added in API level 11", "FullName": "public void setFriction (float friction)"}, "getListPaddingTop()": {"Returns": [["int", "The top list padding."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getPaddingTop_E@", "@B_android#widget#AbsListView#getSelector_E@"], "Permissions": [], "Description": "List padding is the maximum of the normal view's padding and the padding of the selector.", "history": "Added in API level 1", "FullName": "public int getListPaddingTop ()"}, "isFastScrollEnabled()": {"Returns": [["boolean", "true if fast scroll is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setFastScrollEnabled_E@"], "Permissions": [], "Description": "Returns true if the fast scroller is enabled.", "history": "Added in API level 3", "FullName": "public boolean isFastScrollEnabled ()"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "onCreateInputConnection(android.view.inputmethod.EditorInfo)": {"Returns": [["@B_android#view#inputmethod#InputConnection_E@", "no returns description in source"]], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Fill in with attribute information about the connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an InputConnection for editing of the filter text.", "history": "Added in API level 3", "FullName": "public InputConnection onCreateInputConnection (EditorInfo outAttrs)"}, "setTopEdgeEffectColor(int)": {"Returns": [], "Parameters": [["int", "int: The color for the top edge effect."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setBottomEdgeEffectColor_E@", "@B_android#widget#AbsListView#setEdgeEffectColor_E@", "@B_android#widget#AbsListView#getTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#getBottomEdgeEffectColor_E@"], "Permissions": [], "Description": "Sets the top edge effect color.", "history": "Added in API level 29", "FullName": "public void setTopEdgeEffectColor (int color)"}, "getTranscriptMode()": {"Returns": [["int", "@B_android#widget#AbsListView#TRANSCRIPT_MODE_DISABLED_E@, @B_android#widget#AbsListView#TRANSCRIPT_MODE_NORMAL_E@ or @B_android#widget#AbsListView#TRANSCRIPT_MODE_ALWAYS_SCROLL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current transcript mode.", "history": "Added in API level 1", "FullName": "public int getTranscriptMode ()"}, "onGlobalLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method to be invoked when the global layout state or the visibility of views within the view tree changes", "history": "Added in API level 1", "FullName": "public void onGlobalLayout ()"}, "dispatchDrawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatches drawable hotspot changes to child views that meet at least one of the following criteria: Returns false from both @B_android#view#View#isClickable_E@ and @B_android#view#View#isLongClickable_E@ Requests duplication of parent state via @B_android#view#View#setDuplicateParentStateEnabled_E@", "history": "added in API level 22", "FullName": "public void dispatchDrawableHotspotChanged (float x, float y)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "setScrollingCacheEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable the scroll cache, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#isScrollingCacheEnabled_E@", "@B_android#view#View#setDrawingCacheEnabled_E@"], "Permissions": [], "Description": "Enables or disables the children's drawing cache during a scroll. By default, the drawing cache is enabled but this will use more memory. When the scrolling cache is enabled, the caches are kept after the first scrolling. You can manually clear the cache by calling @B_android#view#ViewGroup#setChildrenDrawingCacheEnabled_E@.", "history": "Added in API level 1", "FullName": "public void setScrollingCacheEnabled (boolean enabled)"}, "isStackFromBottom()": {"Returns": [["boolean", "true if the content is stacked from the bottom edge, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the content of this view is pinned to, or stacked from, the bottom edge.", "history": "Added in API level 1", "FullName": "public boolean isStackFromBottom ()"}, "beforeTextChanged(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For our text watcher that is associated with the text filter. Does nothing.", "history": "Added in API level 1", "FullName": "public void beforeTextChanged (CharSequence s, int start, int count, int after)"}, "setSelector(int)": {"Returns": [], "Parameters": [["int", "int: A Drawable resource to use as the selection highlight."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a Drawable that should be used to highlight the currently selected item.", "history": "Added in API level 1", "FullName": "public void setSelector (int resID)"}, "getContextMenuInfo()": {"Returns": [["@B_android#view#ContextMenu#ContextMenuInfo_E@", "Extra information about the item for which the context menu should be shown. This information will vary across different subclasses of View."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Views should implement this if they have extra information to associate with the context menu. The return result is supplied as a parameter to the @B_android#view#View#OnCreateContextMenuListener#onCreateContextMenu_E@ callback.", "history": "Added in API level 1", "FullName": "protected ContextMenu.ContextMenuInfo getContextMenuInfo ()"}, "isPaddingOffsetRequired()": {"Returns": [["boolean", "True if padding offset must be applied, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. Padding offsets are added to the fading edges to extend the length of the fade so that it covers pixels drawn inside the padding. Subclasses of this class should override this method if they need to draw content inside the padding.", "history": "Added in API level 2", "FullName": "protected boolean isPaddingOffsetRequired ()"}, "setStackFromBottom(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to pin the view's content to the bottom edge, false to pin the view's content to the top edge"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When stack from bottom is set to true, the list fills its content starting from the bottom of the view.", "history": "Added in API level 1", "FullName": "public void setStackFromBottom (boolean stackFromBottom)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event being processed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle generic motion events. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The @B_android#view#MotionEvent#getSource_E@ of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ are delivered to the view under the pointer. All other generic motion events are delivered to the focused view.", "history": "Added in API level 12", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "getListPaddingLeft()": {"Returns": [["int", "The left list padding."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getPaddingLeft_E@", "@B_android#widget#AbsListView#getSelector_E@"], "Permissions": [], "Description": "List padding is the maximum of the normal view's padding and the padding of the selector.", "history": "Added in API level 1", "FullName": "public int getListPaddingLeft ()"}, "getFocusedRect(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to fill in, in this view's coordinates."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. By default, the rectangle is the @B_android#view#View#getDrawingRect_E@) of the view. However, if your view maintains some idea of internal selection, such as a cursor, or a selected row or column, you should override this method and fill in a more specific rectangle.", "history": "Added in API level 1", "FullName": "public void getFocusedRect (Rect r)"}, "isScrollingCacheEnabled()": {"Returns": [["boolean", "true if the scrolling cache is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setScrollingCacheEnabled_E@", "@B_android#view#View#setDrawingCacheEnabled_E@"], "Permissions": [], "Description": "Indicates whether the children's drawing cache is used during a scroll. By default, the drawing cache is enabled but this will consume more memory.", "history": "Added in API level 1", "FullName": "public boolean isScrollingCacheEnabled ()"}, "onCreateDrawableState(int)": {"Returns": [["", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 1", "FullName": "protected int[] onCreateDrawableState (int extraSpace)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1", "FullName": "protected ViewGroup.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)"}, "AbsListView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsListView (Context context, AttributeSet attrs, int defStyleAttr)"}, "isItemChecked(int)": {"Returns": [["boolean", "The item's checked state or false if choice mode is invalid"]], "Parameters": [["int", "int: The item whose checked state to return"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setChoiceMode_E@"], "Permissions": [], "Description": "Returns the checked state of the specified position. The result is only valid if the choice mode has been set to @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@ or @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_E@.", "history": "Added in API level 11", "FullName": "public boolean isItemChecked (int position)"}, "deferNotifyDataSetChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not connected yet.", "history": "Added in API level 14", "FullName": "public void deferNotifyDataSetChanged ()"}, "AbsListView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsListView (Context context)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setSelectionFromTop(int,int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected."], ["int", "int: The distance from the top edge of the ListView (plus padding) that the item will be positioned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selected item and positions the selection y pixels from the top edge of the ListView. (If in touch mode, the item will not be selected but it will still be positioned appropriately.)", "history": "Added in API level 21", "FullName": "public void setSelectionFromTop (int position, int y)"}, "onRemoteAdapterConnected()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when the adapter connects to the RemoteViewsService.", "history": "Added in API level 11", "FullName": "public boolean onRemoteAdapterConnected ()"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "getCheckedItemCount()": {"Returns": [["int", "The number of items currently selected"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#getCheckedItemPosition_E@", "@B_android#widget#AbsListView#getCheckedItemPositions_E@", "@B_android#widget#AbsListView#getCheckedItemIds_E@"], "Permissions": [], "Description": "Returns the number of items currently selected. This will only be valid if the choice mode is not @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@ (default). To determine the specific items that are currently selected, use one of the getChecked* methods.", "history": "Added in API level 11", "FullName": "public int getCheckedItemCount ()"}, "smoothScrollToPositionFromTop(int,int,int)": {"Returns": [], "Parameters": [["int", "int: Position to scroll to"], ["int", "int: Desired distance in pixels of position from the top of the view when scrolling is finished"], ["int", "int: Number of milliseconds to use for the scroll"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed offset pixels below the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible. The scroll will take duration milliseconds to complete.", "history": "Added in API level 11", "FullName": "public void smoothScrollToPositionFromTop (int position, int offset, int duration)"}, "layoutChildren()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must override this method to layout their children.", "history": "Added in API level 1", "FullName": "protected void layoutChildren ()"}, "getTopPaddingOffset()": {"Returns": [["int", "The top padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the top fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getTopPaddingOffset ()"}, "setFilterText(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The text to use for the filter."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setTextFilterEnabled_E@"], "Permissions": [], "Description": "Sets the initial value for the text filter.", "history": "Added in API level 1", "FullName": "public void setFilterText (String filterText)"}, "setSelectionFromTop(int, int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected."], ["int", "int: The distance from the top edge of the ListView (plus padding) that the item will be positioned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selected item and positions the selection y pixels from the top edge of the ListView. (If in touch mode, the item will not be selected but it will still be positioned appropriately.)", "history": "added in API level 1", "FullName": "public void setSelectionFromTop (int position, int y)"}, "computeVerticalScrollOffset()": {"Returns": [["int", "the vertical offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollOffset ()"}, "scrollListBy(int)": {"Returns": [], "Parameters": [["int", "int: the amount of pixels to scroll by vertically"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#canScrollList_E@"], "Permissions": [], "Description": "Scrolls the list items within the view by a specified number of pixels. The actual amount of scroll is capped by the list content viewport height which is the list height minus top and bottom paddings minus one pixel.", "history": "Added in API level 19", "FullName": "public void scrollListBy (int y)"}, "setDrawSelectorOnTop(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the selector will be drawn on the item it is highlighting. The default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether the selection highlight drawable should be drawn on top of the item or behind it.", "history": "Added in API level 1", "FullName": "public void setDrawSelectorOnTop (boolean onTop)"}, "isTextFilterEnabled()": {"Returns": [["boolean", "true if type filtering is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setTextFilterEnabled_E@", "@B_android#widget#Filterable_E@"], "Permissions": [], "Description": "Indicates whether type filtering is enabled for this view", "history": "Added in API level 1", "FullName": "public boolean isTextFilterEnabled ()"}, "setAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter: The adapter to use to create this view's content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides the data and the views to represent the data in this widget.", "history": "Added in API level 11", "FullName": "public void setAdapter (ListAdapter adapter)"}, "setSelector(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setSelector (Drawable sel)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setTranscriptMode(int)": {"Returns": [], "Parameters": [["int", "int: the transcript mode to set"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView_E@"], "Permissions": [], "Description": "Puts the list or grid into transcript mode. In this mode the list or grid will always scroll to the bottom to show new items.", "history": "Added in API level 1", "FullName": "public void setTranscriptMode (int mode)"}, "showContextMenu(float,float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "Added in API level 24", "FullName": "public boolean showContextMenu (float x, float y)"}, "getLeftPaddingOffset()": {"Returns": [["int", "The left padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the left fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getLeftPaddingOffset ()"}, "smoothScrollToPosition(int, int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."], ["int", "int: Do not scroll if it would move this adapter position out of view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed, but it will stop early if scrolling further would scroll boundPosition out of view.", "history": "added in API level 8", "FullName": "public void smoothScrollToPosition (int position, int boundPosition)"}, "getCheckedItemPositions()": {"Returns": [["@B_android#util#SparseBooleanArray_E@", "A SparseBooleanArray which will return true for each call to get(int position) where position is a checked position in the list and false otherwise, or null if the choice mode is set to @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of checked items in the list. The result is only valid if the choice mode has not been set to @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@.", "history": "Added in API level 11", "FullName": "public SparseBooleanArray getCheckedItemPositions ()"}, "setFastScrollEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable fast scrolling, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#SectionIndexer_E@", "@B_android#widget#AbsListView#isFastScrollEnabled_E@"], "Permissions": [], "Description": "Specifies whether fast scrolling is enabled or disabled. When fast scrolling is enabled, the user can quickly scroll through lists by dragging the fast scroll thumb. If the adapter backing this list implements @B_android#widget#SectionIndexer_E@, the fast scroller will display section header previews as the user scrolls. Additionally, the user will be able to quickly jump between sections by tapping along the length of the scroll bar.", "history": "Added in API level 3", "FullName": "public void setFastScrollEnabled (boolean enabled)"}, "pointToPosition(int, int)": {"Returns": [["int", "The position of the item which contains the specified point, or @B_android#widget#AdapterView#INVALID_POSITION_E@ if the point does not intersect an item."]], "Parameters": [["int", "int: X in local coordinate"], ["int", "int: Y in local coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Maps a point to a position in the list.", "history": "added in API level 1", "FullName": "public int pointToPosition (int x, int y)"}, "clearChoices()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear any choices previously set", "history": "Added in API level 11", "FullName": "public void clearChoices ()"}, "computeVerticalScrollExtent()": {"Returns": [["int", "the vertical extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollOffset_E@. The default extent is the drawing height of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollExtent ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "sendAccessibilityEvent(int)": {"Returns": [], "Parameters": [["int", "The type of the event to send, as defined by several types from @B_android#view#accessibility#AccessibilityEvent_E@, such as @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_CLICKED_E@ or @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect. The default implementation calls @B_android#view#View#onInitializeAccessibilityEvent_E@ first to populate information about the event source (this View), then calls @B_android#view#View#dispatchPopulateAccessibilityEvent_E@ to populate the text content of the event source including its descendants, and last calls @B_android#view#ViewParent#requestSendAccessibilityEvent_E@ on its parent to resuest sending of the event to interested parties. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#sendAccessibilityEvent_E@ is responsible for handling this call.", "history": "Added in API level 4", "FullName": "public void sendAccessibilityEvent (int eventType)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "invalidateViews()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes all the views to be rebuilt and redrawn.", "history": "Added in API level 1", "FullName": "public void invalidateViews ()"}, "focusSearch(int)": {"Returns": [["", "The nearest focusable in the specified direction, or null if none can be found."]], "Parameters": [["int", "One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the nearest view in the specified direction that can take focus. This does not actually give focus to that view.", "history": "Since: API Level 1", "FullName": "public View focusSearch (int direction)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "onNestedScroll(android.view.View,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The descendent view controlling the nested scroll"], ["int", "int: Horizontal scroll distance in pixels already consumed by target"], ["int", "int: Vertical scroll distance in pixels already consumed by target"], ["int", "int: Horizontal scroll distance in pixels not consumed by target"], ["int", "int: Vertical scroll distance in pixels not consumed by target"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "React to a nested scroll in progress. This method will be called when the ViewParent's current nested scrolling child view dispatches a nested scroll event. To receive calls to this method the ViewParent must have previously returned true for a call to @B_android#view#ViewParent#onStartNestedScroll_E@. Both the consumed and unconsumed portions of the scroll distance are reported to the ViewParent. An implementation may choose to use the consumed portion to match or chase scroll position of multiple child elements, for example. The unconsumed portion may be used to allow continuous dragging of multiple scrolling or draggable elements, such as scrolling a list within a vertical drawer where the drawer begins dragging once the edge of inner scrolling content is reached.", "history": "Added in API level 21", "FullName": "public void onNestedScroll (View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)"}, "getBottomEdgeEffectColor()": {"Returns": [["int", "The bottom edge effect color."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setEdgeEffectColor_E@", "@B_android#widget#AbsListView#setTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#setBottomEdgeEffectColor_E@", "@B_android#widget#AbsListView#getTopEdgeEffectColor_E@"], "Permissions": [], "Description": "Returns the bottom edge effect color.", "history": "Added in API level 29", "FullName": "public int getBottomEdgeEffectColor ()"}, "getBottomFadingEdgeStrength()": {"Returns": [["float", "the intensity of the bottom fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the bottom faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 1", "FullName": "protected float getBottomFadingEdgeStrength ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "Added in API level 1", "FullName": "public boolean onInterceptTouchEvent (MotionEvent ev)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "onRemoteAdapterDisconnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when the adapter disconnects from the RemoteViewsService.", "history": "Added in API level 11", "FullName": "public void onRemoteAdapterDisconnected ()"}, "setFastScrollStyle(int)": {"Returns": [], "Parameters": [["int", "int: style resource containing fast scroller properties"]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#FastScroll_E@"], "Permissions": [], "Description": "Specifies the style of the fast scroller decorations.", "history": "Added in API level 21", "FullName": "public void setFastScrollStyle (int styleResId)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "AbsListView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AbsListView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onFilterComplete(int)": {"Returns": [], "Parameters": [["int", "int: the number of values computed by the filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the end of a filtering operation.", "history": "Added in API level 1", "FullName": "public void onFilterComplete (int count)"}, "showContextMenu(float, float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "added in API level 24", "FullName": "public boolean showContextMenu (float x, float y)"}, "onTextChanged(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For our text watcher that is associated with the text filter. Performs the actual filtering as the text changes, and takes care of hiding and showing the popup displaying the currently entered filter text.", "history": "Added in API level 1", "FullName": "public void onTextChanged (CharSequence s, int start, int before, int count)"}, "getSolidColor()": {"Returns": [["int", "The known solid color background for this view, or 0 if the color may vary"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. Returning a non-zero color enables the view system to optimize the drawing of the fading edges. If you do return a non-zero color, the alpha should be set to 0xFF.", "history": "Added in API level 1", "FullName": "public int getSolidColor ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View representing the list item."], ["int", "int: Position of the list item within the adapter."], ["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: Node info to populate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes an @B_android#view#accessibility#AccessibilityNodeInfo_E@ with information about a particular item in the list.", "history": "Added in API level 19", "FullName": "public void onInitializeAccessibilityNodeInfoForItem (View view, int position, AccessibilityNodeInfo info)"}, "getBottomPaddingOffset()": {"Returns": [["int", "The bottom padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the bottom fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getBottomPaddingOffset ()"}, "getSelector()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable used to display the selector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the selector @B_android#graphics#drawable#Drawable_E@ that is used to draw the selection in the list.", "history": "Added in API level 1", "FullName": "public Drawable getSelector ()"}, "addTouchables(java.util.ArrayList<android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#ArrayList_E@", "ArrayList: Touchable views found so far"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.", "history": "Added in API level 1", "FullName": "public void addTouchables (ArrayList<View> views)"}, "getCacheColorHint()": {"Returns": [["int", "The cache color hint"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background", "history": "Added in API level 1", "FullName": "public int getCacheColorHint ()"}, "isDrawSelectorOnTop()": {"Returns": [["boolean", "true if selector is drawn on top, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the selection highlight drawable should be drawn on top of the item or behind it.", "history": "Added in API level 29", "FullName": "public boolean isDrawSelectorOnTop ()"}, "pointToPosition(int,int)": {"Returns": [["int", "The position of the item which contains the specified point, or @B_android#widget#AdapterView#INVALID_POSITION_E@ if the point does not intersect an item."]], "Parameters": [["int", "int: X in local coordinate"], ["int", "int: Y in local coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Maps a point to a position in the list.", "history": "Added in API level 1", "FullName": "public int pointToPosition (int x, int y)"}, "getTextFilter()": {"Returns": [["@B_java#lang#CharSequence_E@", "the list's text filter or null if filtering isn't enabled"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list's text filter, if available.", "history": "Added in API level 3", "FullName": "public CharSequence getTextFilter ()"}, "onStartNestedScroll(android.view.View,android.view.View,int)": {"Returns": [["boolean", "true if this ViewParent accepts the nested scroll operation"]], "Parameters": [["@B_android#view#View_E@", "View: Direct child of this ViewParent containing target"], ["@B_android#view#View_E@", "View: View that initiated the nested scroll"], ["int", "int: Flags consisting of @B_android#view#View#SCROLL_AXIS_HORIZONTAL_E@, @B_android#view#View#SCROLL_AXIS_VERTICAL_E@ or both"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate. This method will be called in response to a descendant view invoking @B_android#view#View#startNestedScroll_E@. Each parent up the view hierarchy will be given an opportunity to respond and claim the nested scrolling operation by returning true. This method may be overridden by ViewParent implementations to indicate when the view is willing to support a nested scrolling operation that is about to begin. If it returns true, this ViewParent will become the target view's nested scrolling parent for the duration of the scroll operation in progress. When the nested scroll is finished this ViewParent will receive a call to @B_android#view#ViewParent#onStopNestedScroll_E@.", "history": "Added in API level 21", "FullName": "public boolean onStartNestedScroll (View child, View target, int nestedScrollAxes)"}, "onNestedScrollAccepted(android.view.View,android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Direct child of this ViewParent containing target"], ["@B_android#view#View_E@", "View: View that initiated the nested scroll"], ["int", "int: Flags consisting of @B_android#view#View#SCROLL_AXIS_HORIZONTAL_E@, @B_android#view#View#SCROLL_AXIS_VERTICAL_E@ or both"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "React to the successful claiming of a nested scroll operation. This method will be called after @B_android#view#ViewParent#onStartNestedScroll_E@ returns true. It offers an opportunity for the view and its superclasses to perform initial configuration for the nested scroll. Implementations of this method should always call their superclass's implementation of this method if one is present.", "history": "Added in API level 21", "FullName": "public void onNestedScrollAccepted (View child, View target, int axes)"}, "smoothScrollBy(int, int)": {"Returns": [], "Parameters": [["int", "int: Distance to scroll in pixels."], ["int", "int: Duration of the scroll animation in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll by distance pixels over duration milliseconds.", "history": "added in API level 8", "FullName": "public void smoothScrollBy (int distance, int duration)"}, "smoothScrollToPositionFromTop(int,int)": {"Returns": [], "Parameters": [["int", "int: Position to scroll to"], ["int", "int: Desired distance in pixels of position from the top of the view when scrolling is finished"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed offset pixels below the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible.", "history": "Added in API level 11", "FullName": "public void smoothScrollToPositionFromTop (int position, int offset)"}, "onNestedFling(android.view.View,float,float,boolean)": {"Returns": [["boolean", "true if this parent consumed or otherwise reacted to the fling"]], "Parameters": [["@B_android#view#View_E@", "View: View that initiated the nested scroll"], ["float", "float: Horizontal velocity in pixels per second"], ["float", "float: Vertical velocity in pixels per second"], ["boolean", "boolean: true if the child consumed the fling, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request a fling from a nested scroll. This method signifies that a nested scrolling child has detected suitable conditions for a fling. Generally this means that a touch scroll has ended with a @B_android#view#VelocityTracker_E@ in the direction of scrolling that meets or exceeds the @B_android#view#ViewConfiguration#getScaledMinimumFlingVelocity_E@ along a scrollable axis. If a nested scrolling child view would normally fling but it is at the edge of its own content, it can use this method to delegate the fling to its nested scrolling parent instead. The parent may optionally consume the fling or observe a child fling.", "history": "Added in API level 21", "FullName": "public boolean onNestedFling (View target, float velocityX, float velocityY, boolean consumed)"}, "isSmoothScrollbarEnabled()": {"Returns": [["boolean", "True if smooth scrollbar is enabled is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setSmoothScrollbarEnabled_E@"], "Permissions": [], "Description": "Returns the current state of the fast scroll feature.", "history": "Added in API level 3", "FullName": "public boolean isSmoothScrollbarEnabled ()"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call. The default implementation will delegate @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_FORWARD_E@ to nested scrolling parents if @B_android#view#View#isNestedScrollingEnabled_E@ on this view.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "onResolvePointerIcon(android.view.MotionEvent,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent from a mouse"], ["int", "int: The index of the pointer for which to retrieve the @B_android#view#PointerIcon_E@. This will be between 0 and @B_android#view#MotionEvent#getPointerCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews).", "history": "Added in API level 24", "FullName": "public PointerIcon onResolvePointerIcon (MotionEvent event, int pointerIndex)"}, "smoothScrollToPositionFromTop(int, int)": {"Returns": [], "Parameters": [["int", "int: Position to scroll to"], ["int", "int: Desired distance in pixels of position from the top of the view when scrolling is finished"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed offset pixels below the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible.", "history": "added in API level 11", "FullName": "public void smoothScrollToPositionFromTop (int position, int offset)"}, "showContextMenuForChild(android.view.View,float,float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: the source view where the context menu was first invoked"], ["float", "float: the X coordinate in pixels relative to the original view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the original view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate. In most cases, a subclass does not need to override this. However, if the subclass is added directly to the window manager (for example, @B_android#view#ViewManager#addView_E@) then it should override this and show the context menu. If a subclass overrides this method it should also override @B_android#view#ViewParent#showContextMenuForChild_E@.", "history": "Added in API level 24", "FullName": "public boolean showContextMenuForChild (View originalView, float x, float y)"}, "getChoiceMode()": {"Returns": [["int", "The current choice mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setChoiceMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getChoiceMode ()"}, "setOnScrollListener(android.widget.AbsListView.OnScrollListener)": {"Returns": [], "Parameters": [["@B_android#widget#AbsListView#OnScrollListener_E@", "AbsListView.OnScrollListener: the scroll listener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the listener that will receive notifications every time the list scrolls.", "history": "Added in API level 1", "FullName": "public void setOnScrollListener (AbsListView.OnScrollListener l)"}, "setItemChecked(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The item whose checked state is to be checked"], ["boolean", "boolean: The new checked state for the item"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the checked state of the specified position. The is only valid if the choice mode has been set to @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@ or @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_E@.", "history": "Added in API level 11", "FullName": "public void setItemChecked (int position, boolean value)"}, "onTouchModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view hierarchy is now in touch mode, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method to be invoked when the touch mode changes.", "history": "Added in API level 1", "FullName": "public void onTouchModeChanged (boolean isInTouchMode)"}, "setBottomEdgeEffectColor(int)": {"Returns": [], "Parameters": [["int", "int: The color for the bottom edge effect."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#setEdgeEffectColor_E@", "@B_android#widget#AbsListView#getTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#getBottomEdgeEffectColor_E@"], "Permissions": [], "Description": "Sets the bottom edge effect color.", "history": "Added in API level 29", "FullName": "public void setBottomEdgeEffectColor (int color)"}, "computeVerticalScrollRange()": {"Returns": [["int", "the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollExtent_E@ and @B_android#view#View#computeVerticalScrollOffset_E@.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollRange ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses should NOT override this method but @B_android#widget#AbsListView#layoutChildren_E@ instead.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "setVerticalScrollbarPosition(int)": {"Returns": [], "Parameters": [["int", "int: Where the vertical scroll bar should be positioned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the position of the vertical scroll bar. Should be one of @B_android#view#View#SCROLLBAR_POSITION_DEFAULT_E@, @B_android#view#View#SCROLLBAR_POSITION_LEFT_E@ or @B_android#view#View#SCROLLBAR_POSITION_RIGHT_E@.", "history": "Added in API level 11", "FullName": "public void setVerticalScrollbarPosition (int position)"}, "onOverScrolled(int,int,boolean,boolean)": {"Returns": [], "Parameters": [["int", "int: New X scroll value in pixels"], ["int", "int: New Y scroll value in pixels"], ["boolean", "boolean: True if scrollX was clamped to an over-scroll boundary"], ["boolean", "boolean: True if scrollY was clamped to an over-scroll boundary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#overScrollBy_E@ to respond to the results of an over-scroll operation.", "history": "Added in API level 9", "FullName": "protected void onOverScrolled (int scrollX, int scrollY, boolean clampedX, boolean clampedY)"}, "pointToRowId(int, int)": {"Returns": [["long", "The rowId of the item which contains the specified point, or @B_android#widget#AdapterView#INVALID_ROW_ID_E@ if the point does not intersect an item."]], "Parameters": [["int", "int: X in local coordinate"], ["int", "int: Y in local coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Maps a point to a the rowId of the item which intersects that point.", "history": "added in API level 1", "FullName": "public long pointToRowId (int x, int y)"}, "setVelocityScale(float)": {"Returns": [], "Parameters": [["float", "float: The scale factor to multiply the velocity by."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a scale factor for the fling velocity. The initial scale factor is 1.0.", "history": "Added in API level 11", "FullName": "public void setVelocityScale (float scale)"}, "smoothScrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed.", "history": "Added in API level 8", "FullName": "public void smoothScrollToPosition (int position)"}, "handleDataChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void handleDataChanged ()"}, "getVerticalScrollbarWidth()": {"Returns": [["int", "The width in pixels of the vertical scrollbar or 0 if there is no vertical scrollbar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the width of the vertical scrollbar.", "history": "Added in API level 1", "FullName": "public int getVerticalScrollbarWidth ()"}, "focusSearch(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "The view that currently has focus"], ["int", "One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT, or 0 for not applicable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the nearest view in the specified direction that wants to take focus.", "history": "Since: API Level 1", "FullName": "public View focusSearch (View focused, int direction)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "Added in API level 1", "FullName": "public void onWindowFocusChanged (boolean hasWindowFocus)"}, "dispatchDrawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatches drawable hotspot changes to child views that meet at least one of the following criteria: Returns false from both @B_android#view#View#isClickable_E@ and @B_android#view#View#isLongClickable_E@ Requests duplication of parent state via @B_android#view#View#setDuplicateParentStateEnabled_E@", "history": "Added in API level 22", "FullName": "public void dispatchDrawableHotspotChanged (float x, float y)"}, "smoothScrollToPositionFromTop(int, int, int)": {"Returns": [], "Parameters": [["int", "int: Position to scroll to"], ["int", "int: Desired distance in pixels of position from the top of the view when scrolling is finished"], ["int", "int: Number of milliseconds to use for the scroll"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed offset pixels below the top edge of the view. If this is impossible, (e.g. the offset would scroll the first or last item beyond the boundaries of the list) it will get as close as possible. The scroll will take duration milliseconds to complete.", "history": "added in API level 11", "FullName": "public void smoothScrollToPositionFromTop (int position, int offset, int duration)"}, "getSelectedView()": {"Returns": [["@B_android#view#View_E@", "The view corresponding to the currently selected item, or null if nothing is selected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public View getSelectedView ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "afterTextChanged(android.text.Editable)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For our text watcher that is associated with the text filter. Does nothing.", "history": "Added in API level 1", "FullName": "public void afterTextChanged (Editable s)"}, "setScrollBarStyle(int)": {"Returns": [], "Parameters": [["int", "int: the style of the scrollbars. Should be one of SCROLLBARS_INSIDE_OVERLAY, SCROLLBARS_INSIDE_INSET, SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET. Value is @B_android#view#View#SCROLLBARS_INSIDE_OVERLAY_E@, @B_android#view#View#SCROLLBARS_INSIDE_INSET_E@, @B_android#view#View#SCROLLBARS_OUTSIDE_OVERLAY_E@, or @B_android#view#View#SCROLLBARS_OUTSIDE_INSET_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the style of the scrollbars. The scrollbars can be overlaid or inset. When inset, they add to the padding of the view. And the scrollbars can be drawn inside the padding area or on the edge of the view. For example, if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable, you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to appear at the edge of the view, ignoring the padding, then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.", "history": "Added in API level 1", "FullName": "public void setScrollBarStyle (int style)"}, "setScrollIndicators(android.view.View,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setScrollIndicators (View up, View down)"}, "onOverScrolled(int, int, boolean, boolean)": {"Returns": [], "Parameters": [["int", "int: New X scroll value in pixels"], ["int", "int: New Y scroll value in pixels"], ["boolean", "boolean: True if scrollX was clamped to an over-scroll boundary"], ["boolean", "boolean: True if scrollY was clamped to an over-scroll boundary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#overScrollBy_E@ to respond to the results of an over-scroll operation.", "history": "added in API level 9", "FullName": "protected void onOverScrolled (int scrollX, int scrollY, boolean clampedX, boolean clampedY)"}, "setItemChecked(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The item whose checked state is to be checked"], ["boolean", "boolean: The new checked state for the item"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the checked state of the specified position. The is only valid if the choice mode has been set to @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@ or @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_E@.", "history": "added in API level 1", "FullName": "public void setItemChecked (int position, boolean value)"}, "setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)": {"Returns": [], "Parameters": [["@B_android#widget#AbsListView#MultiChoiceModeListener_E@", "AbsListView.MultiChoiceModeListener: Listener that will manage the selection mode"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setChoiceMode_E@"], "Permissions": [], "Description": "Set a @B_android#widget#AbsListView#MultiChoiceModeListener_E@ that will manage the lifecycle of the selection @B_android#view#ActionMode_E@. Only used when the choice mode is set to @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_MODAL_E@.", "history": "Added in API level 11", "FullName": "public void setMultiChoiceModeListener (AbsListView.MultiChoiceModeListener listener)"}, "canScrollList(int)": {"Returns": [["boolean", "true if the list can be scrolled in the specified direction, false otherwise."]], "Parameters": [["int", "int: Negative to check scrolling up, positive to check scrolling down."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#scrollListBy_E@"], "Permissions": [], "Description": "Check if the items in the list can be scrolled in a certain direction.", "history": "Added in API level 19", "FullName": "public boolean canScrollList (int direction)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#AbsListView#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public AbsListView.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getCheckedItemPosition()": {"Returns": [["int", "The position of the currently checked item or @B_android#widget#AdapterView#INVALID_POSITION_E@ if nothing is selected"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setChoiceMode_E@"], "Permissions": [], "Description": "Returns the currently checked item. The result is only valid if the choice mode has been set to @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@.", "history": "Added in API level 11", "FullName": "public int getCheckedItemPosition ()"}, "setChoiceMode(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@, @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@, or @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines the choice behavior for the List. By default, Lists do not have any choice behavior (@B_android#widget#AbsListView#CHOICE_MODE_NONE_E@). By setting the choiceMode to @B_android#widget#AbsListView#CHOICE_MODE_SINGLE_E@, the List allows up to one item to be in a chosen state. By setting the choiceMode to @B_android#widget#AbsListView#CHOICE_MODE_MULTIPLE_E@, the list allows any number of items to be chosen.", "history": "Added in API level 11", "FullName": "public void setChoiceMode (int choiceMode)"}, "isInFilterMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean isInFilterMode ()"}, "getListPaddingBottom()": {"Returns": [["int", "The bottom list padding."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getPaddingBottom_E@", "@B_android#widget#AbsListView#getSelector_E@"], "Permissions": [], "Description": "List padding is the maximum of the normal view's padding and the padding of the selector.", "history": "Added in API level 1", "FullName": "public int getListPaddingBottom ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#AbsListView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "pointToRowId(int,int)": {"Returns": [["long", "The rowId of the item which contains the specified point, or @B_android#widget#AdapterView#INVALID_ROW_ID_E@ if the point does not intersect an item."]], "Parameters": [["int", "int: X in local coordinate"], ["int", "int: Y in local coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Maps a point to a the rowId of the item which intersects that point.", "history": "Added in API level 1", "FullName": "public long pointToRowId (int x, int y)"}, "setEdgeEffectColor(int)": {"Returns": [], "Parameters": [["int", "int: The color for the edge effects."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#setBottomEdgeEffectColor_E@", "@B_android#widget#AbsListView#getTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#getBottomEdgeEffectColor_E@"], "Permissions": [], "Description": "Sets the edge effect color for both top and bottom edge effects.", "history": "Added in API level 29", "FullName": "public void setEdgeEffectColor (int color)"}, "dispatchSetPressed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The new pressed state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch setPressed to all of this View's children.", "history": "Added in API level 1", "FullName": "protected void dispatchSetPressed (boolean pressed)"}, "clearTextFilter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the text filter.", "history": "Added in API level 1", "FullName": "public void clearTextFilter ()"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public boolean verifyDrawable (Drawable dr)"}, "getTopEdgeEffectColor()": {"Returns": [["int", "The top edge effect color."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setEdgeEffectColor_E@", "@B_android#widget#AbsListView#setTopEdgeEffectColor_E@", "@B_android#widget#AbsListView#setBottomEdgeEffectColor_E@", "@B_android#widget#AbsListView#getBottomEdgeEffectColor_E@"], "Permissions": [], "Description": "Returns the top edge effect color.", "history": "Added in API level 29", "FullName": "public int getTopEdgeEffectColor ()"}, "getCheckedItemIds()": {"Returns": [["long[]", "A new array which contains the id of each checked item in the list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of checked items ids. The result is only valid if the choice mode has not been set to @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@ and the adapter has stable IDs. (@B_android#widget#Adapter#hasStableIds_E@ == true)", "history": "Added in API level 11", "FullName": "public long[] getCheckedItemIds ()"}, "setRecyclerListener(android.widget.AbsListView.RecyclerListener)": {"Returns": [], "Parameters": [["@B_android#widget#AbsListView#RecyclerListener_E@", "AbsListView.RecyclerListener: The recycler listener to be notified of views set aside in the recycler."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#RecyclerListener_E@"], "Permissions": [], "Description": "Sets the recycler listener to be notified whenever a View is set aside in the recycler for later reuse. This listener can be used to free resources associated to the View.", "history": "Added in API level 1", "FullName": "public void setRecyclerListener (AbsListView.RecyclerListener listener)"}, "setOverScrollMode(int)": {"Returns": [], "Parameters": [["int", "int: The new over-scroll mode for this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the over-scroll mode for this view. Valid over-scroll modes are @B_android#view#View#OVER_SCROLL_ALWAYS_E@ (default), @B_android#view#View#OVER_SCROLL_IF_CONTENT_SCROLLS_E@ (allow over-scrolling only if the view content is larger than the container), or @B_android#view#View#OVER_SCROLL_NEVER_E@. Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.", "history": "added in API level 9", "FullName": "public void setOverScrollMode (int mode)"}, "onDisplayHint(int)": {"Returns": [], "Parameters": [["int", "int: A hint about whether or not this view is displayed: @B_android#view#View#VISIBLE_E@ or @B_android#view#View#INVISIBLE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gives this view a hint about whether is displayed or not. For instance, when a View moves out of the screen, it might receives a display hint indicating the view is not displayed. Applications should not rely on this hint as there is no guarantee that they will receive one.", "history": "Added in API level 8", "FullName": "protected void onDisplayHint (int hint)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "getRightPaddingOffset()": {"Returns": [["int", "The right padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the right fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getRightPaddingOffset ()"}, "checkInputConnectionProxy(android.view.View)": {"Returns": [["boolean", "Return true to allow the call, false to reject."]], "Parameters": [["@B_android#view#View_E@", "View: The View that is making the InputMethodManager call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For filtering we proxy an input connection to an internal text editor, and this allows the proxying to happen.", "history": "Added in API level 3", "FullName": "public boolean checkInputConnectionProxy (View view)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses should NOT override this method but @B_android#widget#AbsListView#layoutChildren_E@ instead.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "performItemClick(android.view.View, int, long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "added in API level 1", "FullName": "public boolean performItemClick (View view, int position, long id)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setTextFilterEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable type filtering, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#Filterable_E@"], "Permissions": [], "Description": "Enables or disables the type filter window. If enabled, typing when this view has focus will filter the children to match the users input. Note that the @B_android#widget#Adapter_E@ used by this view must implement the @B_android#widget#Filterable_E@ interface.", "history": "Added in API level 1", "FullName": "public void setTextFilterEnabled (boolean textFilterEnabled)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "Added in API level 1", "FullName": "protected ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "fling(int)": {"Returns": [], "Parameters": [["int", "int: Vertical velocity in pixels per second. Note that this is velocity of content, not velocity of a touch that initiated the fling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiate a fling with the given velocity. Applications can use this method to manually initiate a fling as if the user initiated it via touch interaction.", "history": "Added in API level 21", "FullName": "public void fling (int velocityY)"}, "AbsListView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsListView (Context context, AttributeSet attrs)"}, "setFastScrollAlwaysVisible(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the fast scroller should always be displayed, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsListView#setScrollBarStyle_E@", "@B_android#widget#AbsListView#setFastScrollEnabled_E@"], "Permissions": [], "Description": "Set whether or not the fast scroller should always be shown in place of the standard scroll bars. This will enable fast scrolling if it is not already enabled. Fast scrollers shown in this way will not fade out and will be a permanent fixture within the list. This is best combined with an inset scroll bar style to ensure the scroll bar does not overlap content.", "history": "Added in API level 11", "FullName": "public void setFastScrollAlwaysVisible (boolean alwaysShow)"}, "setRemoteViewsAdapter(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent used to identify the RemoteViewsService for the adapter to connect to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent.", "history": "Added in API level 11", "FullName": "public void setRemoteViewsAdapter (Intent intent)"}, "showContextMenu()": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view.", "history": "Added in API level 1", "FullName": "public boolean showContextMenu ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@"], "ClassName": "android.widget.AbsListView", "ClassDesc": "Base class that can be used to implement virtualized lists of items. A list does not have a spatial definition here. For instance, subclasses of this class can display the content of the list in a grid, in a carousel, as stack, etc."}