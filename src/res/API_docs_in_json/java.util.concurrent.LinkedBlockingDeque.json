{"Functions": {"getFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque. This method differs from @B_java#util#Deque#peekFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E getFirst ()"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public boolean removeLastOccurrence (Object o)"}, "pollLast(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the tail of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 9", "FullName": "public E pollLast (long timeout, TimeUnit unit)"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in reverse order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head). The returned iterator is", "history": "Added in API level 9", "FullName": "public Iterator<E> descendingIterator ()"}, "pollLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E pollLast ()"}, "remainingCapacity()": {"Returns": [["int", "the remaining capacity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking. This is always equal to the initial capacity of this deque less the current size of this deque. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.", "history": "Added in API level 9", "FullName": "public int remainingCapacity ()"}, "LinkedBlockingDeque(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a LinkedBlockingDeque with a capacity of @B_java#lang#Integer#MAX_VALUE_E@, initially containing the elements of the given collection, added in traversal order of the collection's iterator.", "history": "Added in API level 9", "FullName": "public LinkedBlockingDeque (Collection<? extends E> c)"}, "getLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque. This method differs from @B_java#util#Deque#peekLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E getLast ()"}, "offerLast(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public boolean offerLast (E e, long timeout, TimeUnit unit)"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this deque is full"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method @B_java#util#concurrent#LinkedBlockingDeque#offer_E@. This method is equivalent to @B_java#util#concurrent#LinkedBlockingDeque#addLast_E@.", "history": "Added in API level 9", "FullName": "public boolean add (E e)"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 9", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "poll()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public E poll ()"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 9", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "pollFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E pollFirst ()"}, "offerLast(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#addLast_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public boolean offerLast (E e)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque, in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this deque. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 9", "FullName": "public Object[] toArray ()"}, "offerFirst(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#addFirst_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public boolean offerFirst (E e)"}, "pollLast(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the tail of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 9", "FullName": "public E pollLast (long timeout, TimeUnit unit)"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this deque is full"], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#concurrent#BlockingDeque#offerFirst_E@.", "history": "Added in API level 9", "FullName": "public void addFirst (E e)"}, "LinkedBlockingDeque()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a LinkedBlockingDeque with a capacity of @B_java#lang#Integer#MAX_VALUE_E@.", "history": "Added in API level 9", "FullName": "public LinkedBlockingDeque ()"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 9", "FullName": "public int drainTo (Collection<? super E> c)"}, "peek()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#peekFirst_E@.", "history": "Added in API level 9", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this deque changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to @B_java#util#concurrent#LinkedBlockingDeque#removeFirstOccurrence_E@.", "history": "Added in API level 9", "FullName": "public boolean remove (Object o)"}, "offerLast(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "added in API level 9", "FullName": "public boolean offerLast (E e, long timeout, TimeUnit unit)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 9", "FullName": "public String toString ()"}, "offerFirst(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public boolean offerFirst (E e, long timeout, TimeUnit unit)"}, "take()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#takeFirst_E@.", "history": "Added in API level 9", "FullName": "public E take ()"}, "takeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.", "history": "Added in API level 9", "FullName": "public E takeFirst ()"}, "removeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque. This method differs from @B_java#util#Deque#pollFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E removeFirst ()"}, "size()": {"Returns": [["int", "the number of elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this deque.", "history": "Added in API level 9", "FullName": "public int size ()"}, "peekFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E peekFirst ()"}, "drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 9", "FullName": "public int drainTo (Collection<? super E> c)"}, "pollFirst(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 9", "FullName": "public E pollFirst (long timeout, TimeUnit unit)"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#putLast_E@.", "history": "Added in API level 9", "FullName": "public void put (E e)"}, "putLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public void putLast (E e)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#add_E@ method, which can fail to insert an element only by throwing an exception. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public boolean offer (E e)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically removes all of the elements from this deque. The deque will be empty after this call returns.", "history": "Added in API level 9", "FullName": "public void clear ()"}, "takeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available.", "history": "Added in API level 9", "FullName": "public E takeLast ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this deque. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is", "history": "Added in API level 9", "FullName": "public Iterator<E> iterator ()"}, "pollFirst(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 9", "FullName": "public E pollFirst (long timeout, TimeUnit unit)"}, "offerFirst(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "added in API level 9", "FullName": "public boolean offerFirst (E e, long timeout, TimeUnit unit)"}, "removeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque. This method differs from @B_java#util#Deque#pollLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E removeLast ()"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this deque is full"], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public void addLast (E e)"}, "peekLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E peekLast ()"}, "pop()": {"Returns": [["E", "the element at the front of this deque (which is the top of the stack represented by this deque)"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public E pop ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this deque"]], "Parameters": [["T[]", "T: the array into which the elements of the deque are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the @B_java#util#concurrent#LinkedBlockingDeque#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 9", "FullName": "public T[] toArray (T[] a)"}, "remove()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque. This method differs from @B_java#util#concurrent#LinkedBlockingDeque#poll_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#concurrent#LinkedBlockingDeque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public E remove ()"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this deque is full"], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#addFirst_E@.", "history": "Added in API level 9", "FullName": "public void push (E e)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this deque contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this deque"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e).", "history": "Added in API level 9", "FullName": "public boolean contains (Object o)"}, "putFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public void putFirst (E e)"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public boolean removeFirstOccurrence (Object o)"}, "LinkedBlockingDeque(int)": {"Returns": [], "Parameters": [["int", "int: the capacity of this deque"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if capacity is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a LinkedBlockingDeque with the given (fixed) capacity.", "history": "Added in API level 9", "FullName": "public LinkedBlockingDeque (int capacity)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "added in API level 9", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "element()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from @B_java#util#concurrent#LinkedBlockingDeque#peek_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#concurrent#LinkedBlockingDeque#getFirst_E@.", "history": "Added in API level 9", "FullName": "public E element ()"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#pollFirst_E@.", "history": "added in API level 9", "FullName": "public E poll (long timeout, TimeUnit unit)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.LinkedBlockingDeque<E>", "ClassDesc": "An optionally-bounded The optional capacity bound constructor argument serves as a way to prevent excessive expansion. The capacity, if unspecified, is equal to @B_java#lang#Integer#MAX_VALUE_E@. Linked nodes are dynamically created upon each insertion unless this would bring the deque above capacity. Most operations run in constant time (ignoring time spent blocking). Exceptions include @B_java#util#concurrent#LinkedBlockingDeque#remove_E@, @B_java#util#concurrent#LinkedBlockingDeque#removeFirstOccurrence_E@, @B_java#util#concurrent#LinkedBlockingDeque#removeLastOccurrence_E@, @B_java#util#concurrent#LinkedBlockingDeque#contains_E@, @B_java#util#concurrent#LinkedBlockingDeque#iterator_E@, and the bulk operations, all of which run in linear time. This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces."}