{"Functions": {"getDateTimeInstance(int,int,java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style."], ["int", "int: the given time formatting style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date/time formatter with the given formatting styles for the given locale.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, Locale aLocale)"}, "getCalendar()": {"Returns": [["@B_java#util#Calendar_E@", "the calendar associated with this date/time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the calendar associated with this date/time formatter.", "history": "Added in API level 1", "FullName": "public Calendar getCalendar ()"}, "getTimeInstance(int, java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time formatter with the given formatting style for the given locale.", "history": "added in API level 1", "FullName": "public static final DateFormat getTimeInstance (int style, Locale aLocale)"}, "getTimeInstance()": {"Returns": [["@B_java#text#DateFormat_E@", "a time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the time formatter with the default formatting style for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getTimeInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getTimeInstance ()"}, "getDateTimeInstance(int, int, java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style."], ["int", "int: the given time formatting style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date/time formatter with the given formatting styles for the given locale.", "history": "added in API level 1", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, Locale aLocale)"}, "getDateInstance(int)": {"Returns": [["@B_java#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the date formatter with the given formatting style for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getDateInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateInstance (int style)"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date, or null if the input could not be parsed"]], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039900000L). By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling @B_java#text#DateFormat#setLenient_E@. This parsing operation uses the @B_java#text#DateFormat#calendar_E@ to produce a Date. As a result, the calendar's date-time fields and the TimeZone value may have been overwritten, depending on subclass implementations. Any TimeZone value that has previously been set by a call to @B_java#text#DateFormat#setTimeZone_E@ may need to be restored for further operations.", "history": "added in API level 1", "FullName": "public abstract Date parse (String source, ParsePosition pos)"}, "parse(java.lang.String)": {"Returns": [["@B_java#util#Date_E@", "A Date parsed from the string."]], "Parameters": [["@B_java#lang#String_E@", "String: A String whose beginning should be parsed."]], "Throws": [["@B_java#text#ParseException_E@", "if the beginning of the specified string cannot be parsed."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from the beginning of the given string to produce a date. The method may not use the entire text of the given string. See the @B_java#text#DateFormat#parse_E@ method for more information on date parsing.", "history": "Added in API level 1", "FullName": "public Date parse (String source)"}, "getNumberFormat()": {"Returns": [["@B_java#text#NumberFormat_E@", "the number formatter which this date/time formatter uses."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number formatter which this date/time formatter uses to format and parse a time.", "history": "Added in API level 1", "FullName": "public NumberFormat getNumberFormat ()"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the string buffer passed in as toAppendTo, with formatted text appended."]], "Parameters": [["@B_java#lang#Object_E@", "Object: must be a Number or a Date."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the string buffer for the returning time string."], ["@B_java#text#FieldPosition_E@", "FieldPosition: keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text \"1996.07.10 AD at 15:08:56 PDT\", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'."]], "Throws": [], "SeeAlso": ["@B_java#text#Format_E@"], "Permissions": [], "Description": "Overrides Format. Formats a time object into a time string. Examples of time objects are a time value expressed in milliseconds and a Date object.", "history": "Added in API level 1", "FullName": "public final StringBuffer format (Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)"}, "setTimeZone(java.util.TimeZone)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the given new time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone for the calendar of this DateFormat object. This method is equivalent to the following call. The TimeZone set by this method is overwritten by a @B_java#text#DateFormat#setCalendar_E@ call. The TimeZone set by this method may be overwritten as a result of a call to the parse method.", "history": "Added in API level 1", "FullName": "public void setTimeZone (TimeZone zone)"}, "getDateInstance(int,java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date formatter with the given formatting style for the given locale.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateInstance (int style, Locale aLocale)"}, "getDateTimeInstance()": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the date/time formatter with the default formatting style for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getDateTimeInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateTimeInstance ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "format(java.util.Date)": {"Returns": [["@B_java#lang#String_E@", "the formatted time string."]], "Parameters": [["@B_java#util#Date_E@", "Date: the time value to be formatted into a time string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a Date into a date/time string.", "history": "Added in API level 1", "FullName": "public final String format (Date date)"}, "setCalendar(java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#util#Calendar_E@", "Calendar: the new Calendar to be used by the date format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the calendar to be used by this date format. Initially, the default calendar for the specified or default locale is used. Any @B_java#util#TimeZone_E@ and newCalendar's values.", "history": "Added in API level 1", "FullName": "public void setCalendar (Calendar newCalendar)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides hashCode", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getInstance()": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a default date/time formatter that uses the SHORT style for both the date and the time.", "history": "Added in API level 1", "FullName": "public static final DateFormat getInstance ()"}, "getTimeInstance(int,java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time formatter with the given formatting style for the given locale.", "history": "Added in API level 1", "FullName": "public static final DateFormat getTimeInstance (int style, Locale aLocale)"}, "getTimeZone()": {"Returns": [["@B_java#util#TimeZone_E@", "the time zone associated with the calendar of DateFormat."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time zone. This method is equivalent to the following call.", "history": "Added in API level 1", "FullName": "public TimeZone getTimeZone ()"}, "setNumberFormat(java.text.NumberFormat)": {"Returns": [], "Parameters": [["@B_java#text#NumberFormat_E@", "NumberFormat: the given new NumberFormat."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows you to set the number formatter.", "history": "Added in API level 1", "FullName": "public void setNumberFormat (NumberFormat newNumberFormat)"}, "getDateInstance()": {"Returns": [["@B_java#text#DateFormat_E@", "a date formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the date formatter with the default formatting style for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getDateInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateInstance ()"}, "getDateTimeInstance(int,int)": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. For example, SHORT for \"M/d/yy\" in the US locale."], ["int", "int: the given time formatting style. For example, SHORT for \"h:mm a\" in the US locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the date/time formatter with the given date and time formatting styles for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getDateTimeInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle)"}, "setLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: when true, parsing is lenient"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setLenient_E@"], "Permissions": [], "Description": "Specify whether or not date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. With strict parsing, inputs must match this object's format. This method is equivalent to the following call. This leniency value is overwritten by a call to @B_java#text#DateFormat#setCalendar_E@.", "history": "Added in API level 1", "FullName": "public void setLenient (boolean lenient)"}, "format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the string buffer passed in as toAppendTo, with formatted text appended."]], "Parameters": [["@B_java#util#Date_E@", "Date: a Date to be formatted into a date/time string."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the string buffer for the returning date/time string."], ["@B_java#text#FieldPosition_E@", "FieldPosition: keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text \"1996.07.10 AD at 15:08:56 PDT\", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a Date into a date/time string.", "history": "Added in API level 1", "FullName": "public abstract StringBuffer format (Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)"}, "getTimeInstance(int)": {"Returns": [["@B_java#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the time formatter with the given formatting style for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getTimeInstance_E@.", "history": "Added in API level 1", "FullName": "public static final DateFormat getTimeInstance (int style)"}, "getDateTimeInstance(int, int)": {"Returns": [["@B_java#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. For example, SHORT for \"M/d/yy\" in the US locale."], ["int", "int: the given time formatting style. For example, SHORT for \"h:mm a\" in the US locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the date/time formatter with the given date and time formatting styles for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#DateFormat#getDateTimeInstance_E@.", "history": "added in API level 1", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle)"}, "getDateInstance(int, java.util.Locale)": {"Returns": [["@B_java#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date formatter with the given formatting style for the given locale.", "history": "added in API level 1", "FullName": "public static final DateFormat getDateInstance (int style, Locale aLocale)"}, "parseObject(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Object_E@", "A Date parsed from the string. In case of error, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: A String, part of which should be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the @B_java#text#DateFormat#parse_E@ method for more information on date parsing.", "history": "Added in API level 1", "FullName": "public Object parseObject (String source, ParsePosition pos)"}, "isLenient()": {"Returns": [["boolean", "true if the @B_java#text#DateFormat#calendar_E@ is lenient; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#isLenient_E@"], "Permissions": [], "Description": "Tell whether date/time parsing is to be lenient. This method is equivalent to the following call.", "history": "Added in API level 1", "FullName": "public boolean isLenient ()"}, "DateFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new date format.", "history": "Added in API level 1", "FullName": "protected DateFormat ()"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date, or null if the input could not be parsed"]], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039900000L). By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling @B_java#text#DateFormat#setLenient_E@. This parsing operation uses the @B_java#text#DateFormat#calendar_E@ to produce a Date. As a result, the calendar's date-time fields and the TimeZone value may have been overwritten, depending on subclass implementations. Any TimeZone value that has previously been set by a call to @B_java#text#DateFormat#setTimeZone_E@ may need to be restored for further operations.", "history": "Added in API level 1", "FullName": "public abstract Date parse (String source, ParsePosition pos)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of locales for which localized DateFormat instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances.", "history": "Added in API level 1", "FullName": "public static Locale[] getAvailableLocales ()"}}, "Inheritance": ["@B_java#text#Format_E@"], "ClassName": "java.text.DateFormat", "ClassDesc": "DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as @B_java#text#SimpleDateFormat_E@, allows for formatting (i.e., date \u2192 text), parsing (text \u2192 date), and normalization. The date is represented as a Date object or as the milliseconds since January 1, 1970, 00:00:00 GMT. DateFormat provides many class methods for obtaining default date/time formatters based on the default or a given locale and a number of formatting styles. The formatting styles include @B_java#text#DateFormat#FULL_E@, @B_java#text#DateFormat#LONG_E@, @B_java#text#DateFormat#MEDIUM_E@, and @B_java#text#DateFormat#SHORT_E@. More detail and examples of using these styles are provided in the method descriptions. DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. To format a date for the current Locale, use one of the static factory methods: If you are formatting multiple dates, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. To format a date for a different Locale, specify it in the call to @B_java#text#DateFormat#getDateInstance_E@. You can use a DateFormat to parse also. Use getDateInstance to get the normal date format for that country. There are other static factory methods available. Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from @B_java#text#DateFormat#SHORT_E@ to @B_java#text#DateFormat#MEDIUM_E@ to @B_java#text#DateFormat#LONG_E@ to @B_java#text#DateFormat#FULL_E@. The exact result depends on the locale, but generally: @B_java#text#DateFormat#SHORT_E@ is completely numeric, such as 12.13.52 or 3:30pm @B_java#text#DateFormat#MEDIUM_E@ is longer, such as Jan 12, 1952 @B_java#text#DateFormat#LONG_E@ is longer, such as January 12, 1952 or 3:30:32pm @B_java#text#DateFormat#FULL_E@ is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a @B_java#text#SimpleDateFormat_E@. This will work for the majority of countries; just remember to put it in a try block in case you encounter an unusual one. You can also use forms of the parse and format methods with @B_java#text#ParsePosition_E@ and @B_java#text#FieldPosition_E@ to allow you to progressively parse through pieces of a string. align any particular field, or find out where it is for selection on the screen. Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally."}