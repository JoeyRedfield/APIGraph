{"Functions": {"getElevationDegrees(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the elevation of the satellite at the specified index.", "history": "Added in API level 24", "FullName": "public float getElevationDegrees (int satIndex)"}, "hasAlmanacData(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether the satellite at the specified index has almanac data.", "history": "Added in API level 24", "FullName": "public boolean hasAlmanacData (int satIndex)"}, "getSatelliteCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total number of satellites in satellite list.", "history": "Added in API level 24", "FullName": "public int getSatelliteCount ()"}, "getAzimuthDegrees(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the azimuth the satellite at the specified index.", "history": "Added in API level 24", "FullName": "public float getAzimuthDegrees (int satIndex)"}, "getCn0DbHz(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the carrier-to-noise density at the antenna of the satellite at the specified index in dB-Hz.", "history": "Added in API level 24", "FullName": "public float getCn0DbHz (int satIndex)"}, "hasEphemerisData(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether the satellite at the specified index has ephemeris data.", "history": "Added in API level 24", "FullName": "public boolean hasEphemerisData (int satIndex)"}, "getCarrierFrequencyHz(int)": {"Returns": [["float", "the carrier frequency of the signal tracked in Hz."]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the carrier frequency of the signal tracked. For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz, L5 = 1176.45 MHz, varying GLO channels, etc. If the field is not set, it is the primary common use central frequency, e.g. L1 = 1575.45 MHz for GPS. For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two measurements will be reported for this same satellite, in one all the values related to L1 will be filled, and in the other all of the values related to L5 will be filled. The value is only available if @B_android#location#GnssStatus#hasCarrierFrequencyHz_E@ is true.", "history": "Added in API level 26", "FullName": "public float getCarrierFrequencyHz (int satIndex)"}, "usedInFix(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether the satellite at the specified index was used in the calculation of the most recent position fix.", "history": "Added in API level 24", "FullName": "public boolean usedInFix (int satIndex)"}, "getConstellationType(int)": {"Returns": [["int", "Value is @B_android#location#GnssStatus#CONSTELLATION_UNKNOWN_E@, @B_android#location#GnssStatus#CONSTELLATION_GPS_E@, @B_android#location#GnssStatus#CONSTELLATION_SBAS_E@, @B_android#location#GnssStatus#CONSTELLATION_GLONASS_E@, @B_android#location#GnssStatus#CONSTELLATION_QZSS_E@, @B_android#location#GnssStatus#CONSTELLATION_BEIDOU_E@, @B_android#location#GnssStatus#CONSTELLATION_GALILEO_E@, or @B_android#location#GnssStatus#CONSTELLATION_IRNSS_E@"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the constellation type of the satellite at the specified index.", "history": "Added in API level 24", "FullName": "public int getConstellationType (int satIndex)"}, "hasCarrierFrequencyHz(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether a valid @B_android#location#GnssStatus#getCarrierFrequencyHz_E@ is available.", "history": "Added in API level 26", "FullName": "public boolean hasCarrierFrequencyHz (int satIndex)"}, "getSvid(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: the index of the satellite in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the identification number for the satellite at the specific index. This svid is pseudo-random number for most constellations. It is FCN & OSN number for Glonass. The distinction is made by looking at constellation field @B_android#location#GnssStatus#getConstellationType_E@ Expected values are in the range of: GPS: 1-32 SBAS: 120-151, 183-192 GLONASS: One of: OSN, or FCN+100 1-24 as the orbital slot number (OSN) (preferred, if known) 93-106 as the frequency channel number (FCN) (-7 to +6) plus 100. i.e. encode FCN of -7 as 93, 0 as 100, and +6 as 106 QZSS: 193-200 Galileo: 1-36 Beidou: 1-37", "history": "Added in API level 24", "FullName": "public int getSvid (int satIndex)"}}, "Inheritance": [], "ClassName": "android.location.GnssStatus", "ClassDesc": "This class represents the current state of the GNSS engine. This class is used in conjunction with the @B_android#location#GnssStatus#Callback_E@."}