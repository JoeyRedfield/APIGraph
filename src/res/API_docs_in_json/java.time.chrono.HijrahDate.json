{"Functions": {"plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public HijrahDate plus (long amountToAdd, TemporalUnit unit)"}, "of(int, int, int)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the date in Hijrah calendar system, not null"]], "Parameters": [["int", "int: the Hijrah proleptic-year"], ["int", "int: the Hijrah month-of-year, from 1 to 12"], ["int", "int: the Hijrah day-of-month, from 1 to 30"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields. This returns a HijrahDate with the specified fields. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static HijrahDate of (int prolepticYear, int month, int dayOfMonth)"}, "lengthOfMonth()": {"Returns": [["int", "the length of the month in days"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the month represented by this date. This returns the length of the month in days. Month lengths in the Hijrah calendar system vary between 29 and 30 days.", "history": "Added in API level 26", "FullName": "public int lengthOfMonth ()"}, "getChronology()": {"Returns": [["@B_java#time#chrono#HijrahChronology_E@", "the Hijrah chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this date, which is the Hijrah calendar system. The Chronology represents the calendar system in use. The era and other fields in @B_java#time#temporal#ChronoField_E@ are defined by the chronology.", "history": "Added in API level 26", "FullName": "public HijrahChronology getChronology ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "added in API level 26", "FullName": "public String toString ()"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the current date, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the current date cannot be obtained"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using", "history": "Added in API level 26", "FullName": "public static HijrahDate now (Clock clock)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field as a long. This queries the date-time for the value of the specified field. The returned value may be outside the valid range of values for the field. If the date-time cannot return the value, because the field is unsupported or for some other reason, an exception will be thrown.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "until(java.time.chrono.ChronoLocalDate)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the end date, exclusive, which may be in any chronology, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the period between this date and another date as a ChronoPeriod. This calculates the period between two dates. All supplied chronologies calculate the period using years, months and days, however the ChronoPeriod API allows the period to be represented using other units. The start and end points are this and the specified date. The result will be negative if the end is before the start. The negative sign will be the same in each of year, month and day. The calculation is performed using the chronology of this date. If necessary, the input date will be converted to match. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ChronoPeriod until (ChronoLocalDate endDate)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date and the Chronologies are equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date to another date, including the chronology. Compares this HijrahDate with another ensuring that the date is the same. Only objects of type HijrahDate are compared, other types return false. To compare the dates of two TemporalAccessor instances, including dates in two different chronologies, use @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public HijrahDate with (TemporalField field, long newValue)"}, "now()": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the current date using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static HijrahDate now ()"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public HijrahDate with (TemporalField field, long newValue)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. The value of this temporal object is used to enhance the accuracy of the returned range. If the date-time cannot return the range, because the field is unsupported or for some other reason, an exception will be thrown. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the date in Hijrah calendar system, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a HijrahDate"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object. This obtains a date in the Hijrah calendar system based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of HijrahDate. The conversion typically uses the @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ field, which is standardized across calendar systems. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, HijrahDate::from.", "history": "Added in API level 26", "FullName": "public static HijrahDate from (TemporalAccessor temporal)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public HijrahDate minus (long amountToSubtract, TemporalUnit unit)"}, "isLeapYear()": {"Returns": [["boolean", "true if this date is in a leap year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, according to the Hijrah calendar system rules.", "history": "Added in API level 26", "FullName": "public boolean isLeapYear ()"}, "atTime(java.time.LocalTime)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the local time to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a ChronoLocalDateTime. This returns a ChronoLocalDateTime formed from this date at the specified time. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<HijrahDate> atTime (LocalTime localTime)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public HijrahDate minus (long amountToSubtract, TemporalUnit unit)"}, "hashCode()": {"Returns": [["int", "a suitable hash code based only on the Chronology and the date"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount subtracted. This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public HijrahDate minus (TemporalAmount amount)"}, "of(int,int,int)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the date in Hijrah calendar system, not null"]], "Parameters": [["int", "int: the Hijrah proleptic-year"], ["int", "int: the Hijrah month-of-year, from 1 to 12"], ["int", "int: the Hijrah day-of-month, from 1 to 30"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields. This returns a HijrahDate with the specified fields. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static HijrahDate of (int prolepticYear, int month, int dayOfMonth)"}, "toEpochDay()": {"Returns": [["long", "the Epoch Day equivalent to this date"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date to the Epoch Day. The @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion. This default implementation queries the EPOCH_DAY field.", "history": "Added in API level 26", "FullName": "public long toEpochDay ()"}, "withVariant(java.time.chrono.HijrahChronology)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "a HijrahDate with the requested HijrahChronology, non-null"]], "Parameters": [["@B_java#time#chrono#HijrahChronology_E@", "HijrahChronology: the new HijrahChonology, non-null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a HijrahDate with the Chronology requested. The year, month, and day are checked against the new requested HijrahChronology. If the chronology has a shorter month length for the month, the day is reduced to be the last day of the month.", "history": "Added in API level 26", "FullName": "public HijrahDate withVariant (HijrahChronology chronology)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public HijrahDate plus (long amountToAdd, TemporalUnit unit)"}, "lengthOfYear()": {"Returns": [["int", "the length of the year in days"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the year represented by this date. This returns the length of the year in days. A Hijrah calendar system year is typically shorter than that of the ISO calendar system.", "history": "Added in API level 26", "FullName": "public int lengthOfYear ()"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount added. This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public HijrahDate plus (TemporalAmount amount)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "the current date using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static HijrahDate now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#chrono#HijrahDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment. For example, if the adjuster requires an ISO chronology"], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted object of the same type as this object with the adjustment made. This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. Some example code indicating how and why this method is used:", "history": "Added in API level 26", "FullName": "public HijrahDate with (TemporalAdjuster adjuster)"}, "getEra()": {"Returns": [["@B_java#time#chrono#HijrahEra_E@", "the era applicable at this date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the era applicable at this date. The Hijrah calendar system has one era, 'AH', defined by @B_java#time#chrono#HijrahEra_E@.", "history": "Added in API level 26", "FullName": "public HijrahEra getEra ()"}}, "Inheritance": [], "ClassName": "java.time.chrono.HijrahDate", "ClassDesc": "A date in the Hijrah calendar system. This date operates using one of several variants of the The Hijrah calendar has a different total of days in a year than Gregorian calendar, and the length of each month is based on the period of a complete revolution of the moon around the earth (as between successive new moons). Refer to the @B_java#time#chrono#HijrahChronology_E@ for details of supported variants. Each HijrahDate is created bound to a particular HijrahChronology, The same chronology is propagated to each HijrahDate computed from the date. To use a different Hijrah variant, its HijrahChronology can be used to create new HijrahDate instances. Alternatively, the @B_java#time#chrono#HijrahDate#withVariant_E@ method can be used to convert to a new HijrahChronology."}