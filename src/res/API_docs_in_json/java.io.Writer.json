{"Functions": {"append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#io#Writer_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public Writer append (CharSequence csq, int start, int end)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#io#Writer_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public Writer append (CharSequence csq, int start, int end)"}, "Writer(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: Object to synchronize on"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character-stream writer whose critical sections will synchronize on the given object.", "history": "Added in API level 1", "FullName": "protected Writer (Object lock)"}, "write(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Array of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters.", "history": "Added in API level 1", "FullName": "public abstract void write (char[] cbuf, int off, int len)"}, "write(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, or len is negative, or off+len is negative or greater than the length of the given string"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "added in API level 1", "FullName": "public void write (String str, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream, flushing it first. Once the stream has been closed, further write() or flush() invocations will cause an IOException to be thrown. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: int specifying a character to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a single character. The character to be written is contained in the 16 low-order bits of the given integer value; the 16 high-order bits are ignored. Subclasses that intend to support efficient single-character output should override this method.", "history": "Added in API level 1", "FullName": "public void write (int c)"}, "write(char[])": {"Returns": [], "Parameters": [["char[]", "char: Array of characters to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an array of characters.", "history": "Added in API level 1", "FullName": "public void write (char[] cbuf)"}, "write(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Array of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters.", "history": "added in API level 1", "FullName": "public abstract void write (char[] cbuf, int off, int len)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_java#io#Writer_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this writer."]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character sequence to this writer. An invocation of this method of the form Depending on the specification of", "history": "Added in API level 1", "FullName": "public Writer append (CharSequence csq)"}, "write(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, or len is negative, or off+len is negative or greater than the length of the given string"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "Added in API level 1", "FullName": "public void write (String str, int off, int len)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes the stream. If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination. Then, if that destination is another character or byte stream, flush it. Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams. If the intended destination of this stream is an abstraction provided by the underlying operating system, for example a file, then flushing the stream guarantees only that bytes previously written to the stream are passed to the operating system for writing; it does not guarantee that they are actually written to a physical device such as a disk drive.", "history": "Added in API level 1", "FullName": "public abstract void flush ()"}, "Writer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character-stream writer whose critical sections will synchronize on the writer itself.", "history": "Added in API level 1", "FullName": "protected Writer ()"}, "append(char)": {"Returns": [["@B_java#io#Writer_E@", "This writer"]], "Parameters": [["char", "char: The 16-bit character to append"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character to this writer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public Writer append (char c)"}, "write(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: String to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a string.", "history": "Added in API level 1", "FullName": "public void write (String str)"}}, "Inheritance": [], "ClassName": "java.io.Writer", "ClassDesc": "Abstract class for writing to character streams. The only methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both."}