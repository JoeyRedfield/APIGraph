{"Functions": {"notifyDirectoryChange(android.content.ContentResolver)": {"Returns": [], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the system of a change in the list of directories handled by a particular directory provider. The Contacts provider will turn around and send a query to the directory provider for the full list of directories, which will replace the previous list.", "history": "Added in API level 11", "FullName": "public static void notifyDirectoryChange (ContentResolver resolver)"}, "isEnterpriseDirectoryId(long)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return TRUE if a directory ID is from the contacts provider on the enterprise profile.", "history": "Added in API level 24", "FullName": "public static boolean isEnterpriseDirectoryId (long directoryId)"}, "isRemoteDirectoryId(long)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return TRUE if it is a remote stored directory.", "history": "Added in API level 24", "FullName": "public static boolean isRemoteDirectoryId (long directoryId)"}}, "Inheritance": [], "ClassName": "android.provider.ContactsContract.Directory", "ClassDesc": "A Directory represents a contacts corpus, e.g. Local contacts, Google Apps Global Address List or Corporate Global Address List. A Directory is implemented as a content provider with its unique authority and the same API as the main Contacts Provider. However, there is no expectation that every directory provider will implement this Contract in its entirety. If a directory provider does not have an implementation for a specific request, it should throw an UnsupportedOperationException. The most important use case for Directories is search. A Directory provider is expected to support at least @B_android#provider#ContactsContract#Contacts#CONTENT_FILTER_URI_E@. If a Directory provider wants to participate in email and phone lookup functionalities, it should also implement @B_android#provider#ContactsContract#CommonDataKinds#Email#CONTENT_FILTER_URI_E@ and @B_android#provider#ContactsContract#CommonDataKinds#Phone#CONTENT_FILTER_URI_E@. A directory provider should return NULL for every projection field it does not recognize, rather than throwing an exception. This way it will not be broken if ContactsContract is extended with new fields in the future. The client interacts with a directory via Contacts Provider by supplying an optional directory= query parameter. When the Contacts Provider receives the request, it transforms the URI and forwards the request to the corresponding directory content provider. The URI is transformed in the following fashion: The URI authority is replaced with the corresponding @B_android#provider#ContactsContract#Directory#DIRECTORY_AUTHORITY_E@. The accountName= and accountType= parameters are added or replaced using the corresponding @B_android#provider#ContactsContract#Directory#ACCOUNT_TYPE_E@ and @B_android#provider#ContactsContract#Directory#ACCOUNT_NAME_E@ values. Clients should send directory requests to Contacts Provider and let it forward them to the respective providers rather than constructing directory provider URIs by themselves. This level of indirection allows Contacts Provider to implement additional system-level features and optimizations. Access to Contacts Provider is protected by the READ_CONTACTS permission, but access to the directory provider is protected by BIND_DIRECTORY_SEARCH. This permission was introduced at the API level 17, for previous platform versions the provider should perform the following check to make sure the call is coming from the ContactsProvider: The Directory table is read-only and is maintained by the Contacts Provider automatically. It always has at least these two rows: The local directory. It has @B_android#provider#BaseColumns#_ID_E@ = @B_android#provider#ContactsContract#Directory#DEFAULT_E@. This directory can be used to access locally stored contacts. The same can be achieved by omitting the directory= parameter altogether. The local invisible contacts. The corresponding directory ID is @B_android#provider#ContactsContract#Directory#LOCAL_INVISIBLE_E@. Custom Directories are discovered by the Contacts Provider following this procedure: It finds all installed content providers with meta data identifying them as directory providers in AndroidManifest.xml: <meta-data android:name=\"android.content.ContactDirectory\" android:value=\"true\" /> This tag should be placed inside the corresponding content provider declaration. Then Contacts Provider sends a @B_android#provider#ContactsContract#Directory#CONTENT_URI_E@ query to each of the directory authorities. A directory provider must implement this query and return a list of directories. Each directory returned by the provider must have a unique combination for the @B_android#provider#ContactsContract#Directory#ACCOUNT_NAME_E@ and @B_android#provider#ContactsContract#Directory#ACCOUNT_TYPE_E@ columns (nulls are allowed). Since directory IDs are assigned automatically, the _ID field will not be part of the query projection. Contacts Provider compiles directory lists received from all directory providers into one, assigns each individual directory a globally unique ID and stores all directory records in the Directory table. Contacts Provider automatically interrogates newly installed or replaced packages. Thus simply installing a package containing a directory provider is sufficient to have that provider registered. A package supplying a directory provider does not have to contain launchable activities. Every row in the Directory table is automatically associated with the corresponding package (apk). If the package is later uninstalled, all corresponding directory rows are automatically removed from the Contacts Provider. When the list of directories handled by a directory provider changes (for instance when the user adds a new Directory account), the directory provider should call @B_android#provider#ContactsContract#Directory#notifyDirectoryChange_E@ to notify the Contacts Provider of the change. In response, the Contacts Provider will requery the directory provider to obtain the new list of directories. A directory row can be optionally associated with an existing account (see @B_android#accounts#AccountManager_E@). If the account is later removed, the corresponding directory rows are automatically removed from the Contacts Provider."}