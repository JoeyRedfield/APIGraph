{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object, including the DNS hostname in this SNIHostName object. The exact details of the representation are unspecified and subject to change, but the following may be regarded as typical: Please NOTE that the exact details of the representation are unspecified and subject to change.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "SNIHostName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the hostname of this server name"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if hostname is null"], ["@B_java#lang#IllegalArgumentException_E@", "if hostname is illegal"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an SNIHostName using the specified hostname. Note that per @B_java#nio#charset#StandardCharsets#US_ASCII_E@-compliant. In this method, hostname can be a user-friendly Internationalized Domain Name (IDN). @B_java#net#IDN#toASCII_E@ is used to enforce the restrictions on ASCII characters in hostnames (see hostname into ASCII Compatible Encoding (ACE), as: The hostname argument is illegal if it: hostname is empty, hostname ends with a trailing dot, hostname is not a valid Internationalized Domain Name (IDN) compliant with the RFC 3490 specification.", "history": "Added in API level 24", "FullName": "public SNIHostName (String hostname)"}, "getAsciiName()": {"Returns": [["@B_java#lang#String_E@", "the @B_java#nio#charset#StandardCharsets#US_ASCII_E@-compliant hostname of this SNIHostName object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#nio#charset#StandardCharsets#US_ASCII_E@-compliant hostname of this SNIHostName object. Note that, per", "history": "Added in API level 24", "FullName": "public String getAsciiName ()"}, "createSNIMatcher(java.lang.String)": {"Returns": [["@B_javax#net#ssl#SNIMatcher_E@", "a SNIMatcher object for SNIHostNames"]], "Parameters": [["@B_java#lang#String_E@", "String: the regular expression pattern representing the hostname(s) to match"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if regex is null"], ["@B_java#util#regex#PatternSyntaxException_E@", "if the regular expression's syntax is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_javax#net#ssl#SNIMatcher_E@ object for SNIHostNames. This method can be used by a server to verify the acceptable SNIHostNames. For example,", "history": "Added in API level 24", "FullName": "public static SNIMatcher createSNIMatcher (String regex)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, the other is considered equal to this instance"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the other server name object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this server name to the specified object. Per", "history": "Added in API level 24", "FullName": "public boolean equals (Object other)"}, "SNIHostName(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the encoded hostname of this server name"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if encoded is null"], ["@B_java#lang#IllegalArgumentException_E@", "if encoded is illegal"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an SNIHostName using the specified encoded value. This method is normally used to parse the encoded name value in a requested SNI extension. Per @B_java#nio#charset#StandardCharsets#US_ASCII_E@-compliant. However, in the previous version of the SNI extension ( encoded argument can be @B_java#nio#charset#StandardCharsets#UTF_8_E@, as well as @B_java#nio#charset#StandardCharsets#US_ASCII_E@. @B_java#net#IDN#toASCII_E@ is used to translate the encoded argument into ASCII Compatible Encoding (ACE) hostname. It is strongly recommended that this constructor is only used to parse the encoded name value in a requested SNI extension. Otherwise, to comply with @B_java#nio#charset#StandardCharsets#US_ASCII_E@-compliant charset and enforce the restrictions on ASCII characters in hostnames (see encoded argument, or use @B_javax#net#ssl#SNIHostName#SNIHostName_E@ instead. The encoded argument is illegal if it: encoded is empty, encoded ends with a trailing dot, encoded is not encoded in @B_java#nio#charset#StandardCharsets#US_ASCII_E@ or @B_java#nio#charset#StandardCharsets#UTF_8_E@-compliant charset, encoded is not a valid Internationalized Domain Name (IDN) compliant with the RFC 3490 specification. Note that the encoded byte array is cloned to protect against subsequent modification.", "history": "Added in API level 24", "FullName": "public SNIHostName (byte[] encoded)"}, "hashCode()": {"Returns": [["int", "a hash code value for this SNIHostName."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this SNIHostName. The hash code value is generated using the case-insensitive hostname of this SNIHostName.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_javax#net#ssl#SNIServerName_E@"], "ClassName": "javax.net.ssl.SNIHostName", "ClassDesc": "Instances of this class represent a server name of type @B_javax#net#ssl#StandardConstants#SNI_HOST_NAME_E@ in a Server Name Indication (SNI) extension. As described in section 3, \"Server Name Indication\", of Note that SNIHostName objects are immutable."}