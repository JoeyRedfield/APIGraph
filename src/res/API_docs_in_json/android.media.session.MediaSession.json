{"Functions": {"setPlaybackToRemote(android.media.VolumeProvider)": {"Returns": [], "Parameters": [["@B_android#media#VolumeProvider_E@", "VolumeProvider: The provider that will handle volume changes. May not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configure this session to use remote volume handling. This must be called to receive volume button events, otherwise the system will adjust the appropriate stream volume for this session. If @B_android#media#session#MediaSession#setPlaybackToLocal_E@ was previously called the system will stop handling volume changes for this session and pass them to the volume provider instead.", "history": "Added in API level 21", "FullName": "public void setPlaybackToRemote (VolumeProvider volumeProvider)"}, "MediaSession(android.content.Context,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use to create the session. This value must never be null."], ["@B_java#lang#String_E@", "String: A short name for debugging purposes. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: A bundle for additional information about this session. Controllers can get this information by calling @B_android#media#session#MediaController#getSessionInfo_E@. An @B_java#lang#IllegalArgumentException_E@ will be thrown if this contains any non-framework Parcelable objects. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new session. The session will automatically be registered with the system but will not be published until @B_android#media#session#MediaSession#setActive_E@ is called. You must call @B_android#media#session#MediaSession#release_E@ when finished with the session. The sessionInfo can include additional unchanging information about this session. For example, it can include the version of the application, or the list of the custom commands that this session supports.", "history": "Added in API level 29", "FullName": "public MediaSession (Context context, String tag, Bundle sessionInfo)"}, "setQueue(java.util.List<android.media.session.MediaSession.QueueItem>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: A list of items in the play queue. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the list of items in the play queue. It is an ordered list and should contain the current item, and previous or upcoming items if they exist. Specify null if there is no current play queue. The queue should be of reasonable size. If the play queue is unbounded within your app, it is better to send a reasonable amount in a sliding window instead.", "history": "Added in API level 21", "FullName": "public void setQueue (List<MediaSession.QueueItem> queue)"}, "setCallback(android.media.session.MediaSession.Callback)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaSession#Callback_E@", "MediaSession.Callback: The callback object This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the callback to receive updates for the MediaSession. This includes media button events and transport controls. The caller's thread will be used to post updates. Set the callback to null to stop receiving updates.", "history": "Added in API level 21", "FullName": "public void setCallback (MediaSession.Callback callback)"}, "MediaSession(android.content.Context,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use to create the session. This value must never be null."], ["@B_java#lang#String_E@", "String: A short name for debugging purposes. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new session. The session will automatically be registered with the system but will not be published until @B_android#media#session#MediaSession#setActive_E@ is called. You must call @B_android#media#session#MediaSession#release_E@ when finished with the session.", "history": "Added in API level 21", "FullName": "public MediaSession (Context context, String tag)"}, "setSessionActivity(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: The intent to launch to show UI for this Session. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an intent for launching UI for this Session. This can be used as a quick link to an ongoing media screen. The intent should be for an activity that may be started using @B_android#app#Activity#startActivity_E@.", "history": "Added in API level 21", "FullName": "public void setSessionActivity (PendingIntent pi)"}, "setRatingType(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#media#Rating#RATING_NONE_E@, @B_android#media#Rating#RATING_HEART_E@, @B_android#media#Rating#RATING_THUMB_UP_DOWN_E@, @B_android#media#Rating#RATING_3_STARS_E@, @B_android#media#Rating#RATING_4_STARS_E@, @B_android#media#Rating#RATING_5_STARS_E@, or @B_android#media#Rating#RATING_PERCENTAGE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the style of rating used by this session. Apps trying to set the rating should use this style. Must be one of the following: @B_android#media#Rating#RATING_NONE_E@ @B_android#media#Rating#RATING_3_STARS_E@ @B_android#media#Rating#RATING_4_STARS_E@ @B_android#media#Rating#RATING_5_STARS_E@ @B_android#media#Rating#RATING_HEART_E@ @B_android#media#Rating#RATING_PERCENTAGE_E@ @B_android#media#Rating#RATING_THUMB_UP_DOWN_E@", "history": "Added in API level 22", "FullName": "public void setRatingType (int type)"}, "setCallback(android.media.session.MediaSession.Callback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaSession#Callback_E@", "MediaSession.Callback: The callback to receive updates on. This value may be null."], ["@B_android#os#Handler_E@", "Handler: The handler that events should be posted on. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the callback to receive updates for the MediaSession. This includes media button events and transport controls. Set the callback to null to stop receiving updates.", "history": "Added in API level 21", "FullName": "public void setCallback (MediaSession.Callback callback, Handler handler)"}, "setMetadata(android.media.MediaMetadata)": {"Returns": [], "Parameters": [["@B_android#media#MediaMetadata_E@", "MediaMetadata: The new metadata This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#media#MediaMetadata#Builder#putBitmap_E@"], "Permissions": [], "Description": "Update the current metadata. New metadata can be created using @B_android#media#MediaMetadata#Builder_E@. This operation may take time proportional to the size of the bitmap to replace large bitmaps with a scaled down copy.", "history": "Added in API level 21", "FullName": "public void setMetadata (MediaMetadata metadata)"}, "getSessionToken()": {"Returns": [["@B_android#media#session#MediaSession#Token_E@", "A token that can be used to create a MediaController for this session This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a token object that can be used by apps to create a @B_android#media#session#MediaController_E@ for interacting with this session. The owner of the session is responsible for deciding how to distribute these tokens.", "history": "Added in API level 21", "FullName": "public MediaSession.Token getSessionToken ()"}, "getCurrentControllerInfo()": {"Returns": [["@B_android#media#session#MediaSessionManager#RemoteUserInfo_E@", "This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If this method is called outside of @B_android#media#session#MediaSession#Callback_E@ methods."]], "SeeAlso": ["@B_android#media#session#MediaSessionManager#isTrustedForMediaControl_E@"], "Permissions": [], "Description": "Gets the controller information who sent the current request. Note: This is only valid while in a request callback, such as @B_android#media#session#MediaSession#Callback#onPlay_E@.", "history": "Added in API level 28", "FullName": "public MediaSessionManager.RemoteUserInfo getCurrentControllerInfo ()"}, "setMediaButtonReceiver(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: The @B_android#app#PendingIntent_E@ to send the media button event to. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a pending intent for your media button receiver to allow restarting playback after the session has been stopped. If your app is started in this way an @B_android#content#Intent#ACTION_MEDIA_BUTTON_E@ intent will be sent via the pending intent.", "history": "Added in API level 21", "FullName": "public void setMediaButtonReceiver (PendingIntent mbr)"}, "sendSessionEvent(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the event to send This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Any extras included with the event This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a proprietary event to all MediaControllers listening to this Session. It's up to the Controller/Session owner to determine the meaning of any events.", "history": "Added in API level 21", "FullName": "public void sendSessionEvent (String event, Bundle extras)"}, "setPlaybackState(android.media.session.PlaybackState)": {"Returns": [], "Parameters": [["@B_android#media#session#PlaybackState_E@", "PlaybackState: The current state of playback This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the current playback state.", "history": "Added in API level 21", "FullName": "public void setPlaybackState (PlaybackState state)"}, "setQueueTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The title of the play queue. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of the play queue. The UI should display this title along with the play queue itself. e.g. \"Play Queue\", \"Now Playing\", or an album name.", "history": "Added in API level 21", "FullName": "public void setQueueTitle (CharSequence title)"}, "setPlaybackToLocal(android.media.AudioAttributes)": {"Returns": [], "Parameters": [["@B_android#media#AudioAttributes_E@", "AudioAttributes: The @B_android#media#AudioAttributes_E@ for this session's audio."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the attributes for this session's audio. This will affect the system's volume handling for this session. If @B_android#media#session#MediaSession#setPlaybackToRemote_E@ was previously called it will stop receiving volume commands and the system will begin sending volume changes to the appropriate stream. By default sessions use attributes for media.", "history": "Added in API level 21", "FullName": "public void setPlaybackToLocal (AudioAttributes attributes)"}, "setActive(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether this session is active or not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set if this session is currently active and ready to receive commands. If set to false your session's controller may not be discoverable. You must set the session to active before it can start receiving media button events or transport commands.", "history": "Added in API level 21", "FullName": "public void setActive (boolean active)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This must be called when an app has finished performing playback. If playback is expected to start again shortly the session can be left open, but it must be released if your activity or service is being destroyed.", "history": "Added in API level 21", "FullName": "public void release ()"}, "getController()": {"Returns": [["@B_android#media#session#MediaController_E@", "A controller for this session. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a controller for this session. This is a convenience method to avoid having to cache your own controller in process.", "history": "Added in API level 21", "FullName": "public MediaController getController ()"}, "setExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The extras associated with the @B_android#media#session#MediaSession_E@. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set some extras that can be associated with the @B_android#media#session#MediaSession_E@. No assumptions should be made as to how a @B_android#media#session#MediaController_E@ will handle these extras. Keys should be fully qualified (e.g. com.example.MY_EXTRA) to avoid conflicts.", "history": "Added in API level 21", "FullName": "public void setExtras (Bundle extras)"}, "setFlags(int)": {"Returns": [], "Parameters": [["int", "int: The flags to set for this session. Value is either 0 or a combination of @B_android#media#session#MediaSession#FLAG_HANDLES_MEDIA_BUTTONS_E@, @B_android#media#session#MediaSession#FLAG_HANDLES_TRANSPORT_CONTROLS_E@, and android.media.session.MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set any flags for the session.", "history": "Added in API level 21", "FullName": "public void setFlags (int flags)"}, "isActive()": {"Returns": [["boolean", "True if the session is active, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current active state of this session.", "history": "Added in API level 21", "FullName": "public boolean isActive ()"}}, "Inheritance": [], "ClassName": "android.media.session.MediaSession", "ClassDesc": "Allows interaction with media controllers, volume keys, media buttons, and transport controls. A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. Once a session is created the owner of the session may pass its @B_android#media#session#MediaSession#getSessionToken_E@ to other processes to allow them to create a @B_android#media#session#MediaController_E@ to interact with the session. To receive commands, media keys, and other events a @B_android#media#session#MediaSession#Callback_E@ must be set with @B_android#media#session#MediaSession#setCallback_E@ and @B_android#media#session#MediaSession#setActive_E@ must be called. When an app is finished performing playback it must call @B_android#media#session#MediaSession#release_E@ to clean up the session and notify any controllers. MediaSession objects are thread safe."}