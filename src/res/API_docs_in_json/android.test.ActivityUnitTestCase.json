{"Functions": {"tearDown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Make sure all resources are cleaned up and garbage collected before moving on to the next test. Subclasses that override this method should make sure they call super.tearDown() at the end of the overriding method.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void tearDown ()"}, "setApplication(android.app.Application)": {"Returns": [], "Parameters": [["@B_android#app#Application_E@", "Application: The Application object that will be injected into the Activity under test."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the application for use during the test. You must call this function before calling @B_android#test#ActivityUnitTestCase#startActivity_E@. If your test does not call this method,", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void setApplication (Application application)"}, "getStartedActivityRequest()": {"Returns": [["int", "The request code provided in the start call, or -1 if no start call was made."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will return the launch request code if your Activity under test calls @B_android#app#Activity#startActivityForResult_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public int getStartedActivityRequest ()"}, "startActivity(android.content.Intent,android.os.Bundle,java.lang.Object)": {"Returns": [["T", "Returns the Activity that was created"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent as if supplied to @B_android#content#Context#startActivity_E@."], ["@B_android#os#Bundle_E@", "Bundle: The instance state, if you are simulating this part of the life cycle. Typically null."], ["@B_java#lang#Object_E@", "Object: This Object will be available to the Activity if it calls @B_android#app#Activity#getLastNonConfigurationInstance_E@. Typically null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start the activity under test, in the same way as if it was started by @B_android#content#Context#startActivity_E@, providing the arguments it supplied. When you use this method to start the activity, it will automatically be stopped by @B_android#test#ActivityUnitTestCase#tearDown_E@. This method will call onCreate(), but if you wish to further exercise Activity life cycle methods, you must call them yourself from your test case.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected T startActivity (Intent intent, Bundle savedInstanceState, Object lastNonConfigurationInstance)"}, "setActivityContext(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If you wish to inject a Mock, Isolated, or otherwise altered context, you can do so here. You must call this function before calling @B_android#test#ActivityUnitTestCase#startActivity_E@. If you wish to obtain a real Context, as a building block, use getInstrumentation().getTargetContext().", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void setActivityContext (Context activityContext)"}, "getStartedActivityIntent()": {"Returns": [["@B_android#content#Intent_E@", "The Intent provided in the start call, or null if no start call was made."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will return the launch intent if your Activity under test calls @B_android#app#Activity#startActivity_E@ or @B_android#app#Activity#startActivityForResult_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public Intent getStartedActivityIntent ()"}, "getRequestedOrientation()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will return the value if your Activity under test calls @B_android#app#Activity#setRequestedOrientation_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public int getRequestedOrientation ()"}, "getFinishedActivityRequest()": {"Returns": [["int", "The request code provided in the start call, or -1 if no finish call was made."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will return the request code if the Activity under test called @B_android#app#Activity#finishActivity_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public int getFinishedActivityRequest ()"}, "isFinishCalled()": {"Returns": [["boolean", "Returns true if one of the listed finish methods was called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will notify you if the Activity under test called @B_android#app#Activity#finish_E@, @B_android#app#Activity#finishFromChild_E@, or @B_android#app#Activity#finishActivity_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public boolean isFinishCalled ()"}, "setUp()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets up the fixture, for example, open a network connection. This method is called before a test is executed.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void setUp ()"}, "ActivityUnitTestCase(java.lang.Class<T>)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ActivityUnitTestCase (Class<T> activityClass)"}, "getActivity()": {"Returns": [["T", "Returns the activity under test."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public T getActivity ()"}}, "Inheritance": ["@B_junit#framework#Assert_E@", "@B_junit#framework#TestCase_E@", "@B_android#test#InstrumentationTestCase_E@", "@B_android#test#ActivityTestCase_E@"], "ClassName": "@B_android#app#Activity_E@", "ClassDesc": "Write This class provides isolated testing of a single activity. The activity under test will be created with minimal connection to the system infrastructure, and you can inject mocked or wrappered versions of many of Activity's dependencies. Most of the work is handled automatically here by @B_android#test#ActivityUnitTestCase#setUp_E@ and @B_android#test#ActivityUnitTestCase#tearDown_E@. If you prefer a functional test, see @B_android#test#ActivityInstrumentationTestCase_E@. It must be noted that, as a true unit test, your Activity will not be running in the normal system and will not participate in the normal interactions with other Activities. The following methods should not be called in this configuration - most of them will throw exceptions: @B_android#app#Activity#createPendingResult_E@ @B_android#app#Activity#startActivityIfNeeded_E@ @B_android#app#Activity#startActivityFromChild_E@ @B_android#app#Activity#startNextMatchingActivity_E@ @B_android#app#Activity#getCallingActivity_E@ @B_android#app#Activity#getCallingPackage_E@ @B_android#app#Activity#createPendingResult_E@ @B_android#app#Activity#getTaskId_E@ @B_android#app#Activity#isTaskRoot_E@ @B_android#app#Activity#moveTaskToBack_E@ The following methods may be called but will not do anything. For test purposes, you can use the methods @B_android#test#ActivityUnitTestCase#getStartedActivityIntent_E@ and @B_android#test#ActivityUnitTestCase#getStartedActivityRequest_E@ to inspect the parameters that they were called with. @B_android#app#Activity#startActivity_E@ @B_android#app#Activity#startActivityForResult_E@ The following methods may be called but will not do anything. For test purposes, you can use the methods @B_android#test#ActivityUnitTestCase#isFinishCalled_E@ and @B_android#test#ActivityUnitTestCase#getFinishedActivityRequest_E@ to inspect the parameters that they were called with. @B_android#app#Activity#finish_E@ @B_android#app#Activity#finishFromChild_E@ @B_android#app#Activity#finishActivity_E@"}