{"Functions": {"Signer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the identity name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a signer with the specified identity name.", "history": "Added in API level 1", "FullName": "public Signer (String name)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string of information about the signer."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string of information about the signer.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public String toString ()"}, "getPrivateKey()": {"Returns": [["@B_java#security#PrivateKey_E@", "this signer's private key, or null if the private key has not yet been set."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow returning the private key."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Returns this signer's private key. First, if there is a security manager, its checkSecurityAccess method is called with \"getSignerPrivateKey\" as its argument to see if it's ok to return the private key.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public PrivateKey getPrivateKey ()"}, "Signer(java.lang.String,java.security.IdentityScope)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the identity name."], ["@B_java#security#IdentityScope_E@", "IdentityScope: the scope of the identity."]], "Throws": [["@B_java#security#KeyManagementException_E@", "if there is already an identity with the same name in the scope."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a signer with the specified identity name and scope.", "history": "Added in API level 1", "FullName": "public Signer (String name, IdentityScope scope)"}, "setKeyPair(java.security.KeyPair)": {"Returns": [], "Parameters": [["@B_java#security#KeyPair_E@", "KeyPair: an initialized key pair."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the key pair is not properly initialized."], ["@B_java#security#KeyException_E@", "if the key pair cannot be set for any other reason."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow setting the key pair."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Sets the key pair (public key and private key) for this signer. First, if there is a security manager, its checkSecurityAccess method is called with \"setSignerKeyPair\" as its argument to see if it's ok to set the key pair.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public final void setKeyPair (KeyPair pair)"}, "Signer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a signer. This constructor should only be used for serialization.", "history": "Added in API level 1", "FullName": "protected Signer ()"}}, "Inheritance": ["@B_java#security#Identity_E@"], "ClassName": "java.security.Signer", "ClassDesc": "This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal. This class is used to represent an Identity that can also digitally sign data. The management of a signer's private keys is an important and sensitive issue that should be handled by subclasses as appropriate to their intended use."}