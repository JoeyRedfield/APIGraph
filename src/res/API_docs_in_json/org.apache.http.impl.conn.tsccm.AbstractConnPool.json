{"Functions": {"shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shuts down this pool and all associated resources. Overriding methods MUST call the implementation here!", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "AbstractConnPool()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new connection pool.", "history": "Added in API level 1", "FullName": "protected AbstractConnPool ()"}, "handleLostEntry(org.apache.http.conn.routing.HttpRoute)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route of the pool entry that was lost"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles cleaning up for a lost pool entry with the given route. A lost pool entry corresponds to a connection that was garbage collected instead of being properly released.", "history": "Added in API level 1", "FullName": "protected abstract void handleLostEntry (HttpRoute route)"}, "deleteClosedConnections()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes all entries for closed connections.", "history": "Added in API level 1", "FullName": "public abstract void deleteClosedConnections ()"}, "requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new @B_org#apache#http#impl#conn#tsccm#PoolEntryRequest_E@, from which a @B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@ can be obtained, or the request can be aborted.", "history": "Added in API level 1", "FullName": "public abstract PoolEntryRequest requestPoolEntry (HttpRoute route, Object state)"}, "getEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object, long, java.util.concurrent.TimeUnit)": {"Returns": [["", "pool entry holding a connection for the route"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route for which to get the connection"], ["long", "the timeout, 0 or negative for no timeout"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit for the timeout, may be null only if there is no timeout"]], "Throws": [["@B_org#apache#http#conn#ConnectionPoolTimeoutException_E@", "if the timeout expired"], ["@B_java#lang#InterruptedException_E@", "if the calling thread was interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a pool entry with a connection within the given timeout.", "history": "Added in API level 1", "FullName": "public final BasicPoolEntry getEntry (HttpRoute route, Object state, long timeout, TimeUnit tunit)"}, "handleReference(java.lang.ref.Reference)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void handleReference (Reference ref)"}, "enableConnectionGC()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if connection GC is already enabled, or if it cannot be enabled because there already are pool entries"]], "SeeAlso": [], "Permissions": [], "Description": "Enables connection garbage collection (GC). This method must be called immediately after creating the connection pool. It is not possible to enable connection GC after pool entries have been created. Neither is it possible to disable connection GC.", "history": "Added in API level 1", "FullName": "public void enableConnectionGC ()"}, "closeConnection(org.apache.http.conn.OperatedClientConnection)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#OperatedClientConnection_E@", "the connection to close, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes a connection from this pool.", "history": "Added in API level 1", "FullName": "protected void closeConnection (OperatedClientConnection conn)"}, "closeIdleConnections(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the time the connections should have been idle in order to be closed now"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit for the idletime"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes idle connections.", "history": "Added in API level 1", "FullName": "public void closeIdleConnections (long idletime, TimeUnit tunit)"}, "closeExpiredConnections()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void closeExpiredConnections ()"}, "freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the entry for the connection to release"], ["boolean", "true if the entry is deemed reusable, false otherwise."], ["long", "The duration that the entry should remain free and reusable."], ["@B_java#util#concurrent#TimeUnit_E@", "The unit of time the duration is measured in."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an entry into the pool. The connection of the entry is expected to be in a suitable state, either open and re-usable, or closed. The pool will not make any attempt to determine whether it can be re-used or not.", "history": "Added in API level 1", "FullName": "public abstract void freeEntry (BasicPoolEntry entry, boolean reusable, long validDuration, TimeUnit timeUnit)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.tsccm.AbstractConnPool", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit An abstract connection pool. It is used by the @B_org#apache#http#impl#conn#tsccm#ThreadSafeClientConnManager_E@. The abstract pool includes a @B_org#apache#http#impl#conn#tsccm#AbstractConnPool#poolLock_E@, which is used to synchronize access to the internal pool datastructures. Don't use synchronized for that purpose!"}