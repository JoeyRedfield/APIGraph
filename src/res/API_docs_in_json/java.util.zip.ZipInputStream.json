{"Functions": {"ZipInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the actual input stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ZIP input stream. The UTF-8 @B_java#nio#charset#Charset_E@ is used to decode the entry names.", "history": "Added in API level 1", "FullName": "public ZipInputStream (InputStream in)"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped"]], "Parameters": [["long", "long: the number of bytes to skip"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#IllegalArgumentException_E@", "if n < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Skips specified number of bytes in the current ZIP entry.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the entry is reached"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads from the current ZIP entry into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "available()": {"Returns": [["int", "1 before EOF and 0 after EOF has reached for current entry."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns 0 after EOF has reached for the current entry data, otherwise always return 1. Programs should not count on this method to return the actual number of bytes that could be read without blocking.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the entry is reached"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads from the current ZIP entry into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "ZipInputStream(java.io.InputStream,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the actual input stream"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the ZIP entry name (ignored if the language encoding bit of the ZIP entry's general purpose bit flag is set)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ZIP input stream.", "history": "Added in API level 24", "FullName": "public ZipInputStream (InputStream in, Charset charset)"}, "createZipEntry(java.lang.String)": {"Returns": [["@B_java#util#zip#ZipEntry_E@", "the ZipEntry just created"]], "Parameters": [["@B_java#lang#String_E@", "String: the ZIP file entry name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ZipEntry object for the specified entry name.", "history": "Added in API level 1", "FullName": "protected ZipEntry createZipEntry (String name)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getNextEntry()": {"Returns": [["@B_java#util#zip#ZipEntry_E@", "the next ZIP file entry, or null if there are no more entries"]], "Parameters": [], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next ZIP file entry and positions the stream at the beginning of the entry data.", "history": "Added in API level 1", "FullName": "public ZipEntry getNextEntry ()"}, "closeEntry()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the current ZIP entry and positions the stream for reading the next entry.", "history": "Added in API level 1", "FullName": "public void closeEntry ()"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@", "@B_java#util#zip#InflaterInputStream_E@"], "ClassName": "java.util.zip.ZipInputStream", "ClassDesc": "This class implements an input stream filter for reading files in the ZIP file format. Includes support for both compressed and uncompressed entries."}