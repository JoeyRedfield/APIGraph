{"Functions": {"write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)": {"Returns": [["boolean", "Returns true if node was successfully serialized. Return false in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to serialize."], ["@B_org#w3c#dom#ls#LSOutput_E@", "LSOutput: The destination for the serialized DOM."]], "Throws": [["@B_org#w3c#dom#ls#LSException_E@", "SERIALIZE_ERR: Raised if the LSSerializer was unable to serialize the node. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Serialize the specified node as described above in the general description of the LSSerializer interface. The output is written to the supplied LSOutput. When writing to a LSOutput, the encoding is found by looking at the encoding information that is reachable through the LSOutput and the item to be written (or its owner document) in this order: If no encoding is reachable through the above properties, a default encoding of \"UTF-8\" will be used. If the specified encoding is not supported an \"unsupported-encoding\" fatal error is raised. If no output is specified in the LSOutput, a \"no-output-specified\" fatal error is raised. The implementation is responsible of associating the appropriate media type with the serialized data. When writing to a HTTP URI, a HTTP PUT is performed. When writing to other types of URIs, the mechanism for writing the data to the URI is implementation dependent.", "history": "Added in API level 8", "FullName": "public abstract boolean write (Node nodeArg, LSOutput destination)"}, "writeToURI(org.w3c.dom.Node, java.lang.String)": {"Returns": [["boolean", "Returns true if node was successfully serialized. Return false in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to serialize."], ["@B_java#lang#String_E@", "String: The URI to write to."]], "Throws": [["@B_org#w3c#dom#ls#LSException_E@", "SERIALIZE_ERR: Raised if the LSSerializer was unable to serialize the node. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method that acts as if LSSerializer.write was called with a LSOutput with no encoding specified and LSOutput.systemId set to the uri argument.", "history": "added in API level 8", "FullName": "public abstract boolean writeToURI (Node nodeArg, String uri)"}, "setNewLine(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The end-of-line sequence of characters to be used in the XML being written out. Any string is supported, but XML treats only a certain set of characters sequence as end-of-line (See section 2.11, \"End-of-Line Handling\" in [ On retrieval, the default value of this attribute is the implementation specific default end-of-line sequence. DOM implementations should choose the default to match the usual convention for text files in the environment being used. Implementations must choose a default sequence that matches one of those allowed by XML 1.0 or XML 1.1, depending on the serialized content. Setting this attribute to null will reset its value to the default value.", "history": "Added in API level 8", "FullName": "public abstract void setNewLine (String newLine)"}, "getNewLine()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The end-of-line sequence of characters to be used in the XML being written out. Any string is supported, but XML treats only a certain set of characters sequence as end-of-line (See section 2.11, \"End-of-Line Handling\" in [ On retrieval, the default value of this attribute is the implementation specific default end-of-line sequence. DOM implementations should choose the default to match the usual convention for text files in the environment being used. Implementations must choose a default sequence that matches one of those allowed by XML 1.0 or XML 1.1, depending on the serialized content. Setting this attribute to null will reset its value to the default value.", "history": "Added in API level 8", "FullName": "public abstract String getNewLine ()"}, "writeToString(org.w3c.dom.Node)": {"Returns": [["@B_java#lang#String_E@", "Returns the serialized data."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to serialize."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "DOMSTRING_SIZE_ERR: Raised if the resulting string is too long to fit in a DOMString."], ["@B_org#w3c#dom#ls#LSException_E@", "SERIALIZE_ERR: Raised if the LSSerializer was unable to serialize the node. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Serialize the specified node as described above in the general description of the LSSerializer interface. The output is written to a DOMString that is returned to the caller. The encoding used is the encoding of the DOMString type, i.e. UTF-16. Note that no Byte Order Mark is generated in a DOMString object.", "history": "Added in API level 8", "FullName": "public abstract String writeToString (Node nodeArg)"}, "getDomConfig()": {"Returns": [["@B_org#w3c#dom#DOMConfiguration_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The DOMConfiguration object used by the LSSerializer when serializing a DOM node. In addition to the parameters recognized by the DOMConfiguration objects for LSSerializer adds, or modifies, the following parameters:", "history": "Added in API level 8", "FullName": "public abstract DOMConfiguration getDomConfig ()"}, "writeToURI(org.w3c.dom.Node,java.lang.String)": {"Returns": [["boolean", "Returns true if node was successfully serialized. Return false in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to serialize."], ["@B_java#lang#String_E@", "String: The URI to write to."]], "Throws": [["@B_org#w3c#dom#ls#LSException_E@", "SERIALIZE_ERR: Raised if the LSSerializer was unable to serialize the node. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method that acts as if LSSerializer.write was called with a LSOutput with no encoding specified and LSOutput.systemId set to the uri argument.", "history": "Added in API level 8", "FullName": "public abstract boolean writeToURI (Node nodeArg, String uri)"}, "write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput)": {"Returns": [["boolean", "Returns true if node was successfully serialized. Return false in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to serialize."], ["@B_org#w3c#dom#ls#LSOutput_E@", "LSOutput: The destination for the serialized DOM."]], "Throws": [["@B_org#w3c#dom#ls#LSException_E@", "SERIALIZE_ERR: Raised if the LSSerializer was unable to serialize the node. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Serialize the specified node as described above in the general description of the LSSerializer interface. The output is written to the supplied LSOutput. When writing to a LSOutput, the encoding is found by looking at the encoding information that is reachable through the LSOutput and the item to be written (or its owner document) in this order: If no encoding is reachable through the above properties, a default encoding of \"UTF-8\" will be used. If the specified encoding is not supported an \"unsupported-encoding\" fatal error is raised. If no output is specified in the LSOutput, a \"no-output-specified\" fatal error is raised. The implementation is responsible of associating the appropriate media type with the serialized data. When writing to a HTTP URI, a HTTP PUT is performed. When writing to other types of URIs, the mechanism for writing the data to the URI is implementation dependent.", "history": "added in API level 8", "FullName": "public abstract boolean write (Node nodeArg, LSOutput destination)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.ls.LSSerializer", "ClassDesc": "A LSSerializer provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The Document object and its children are never altered by the serialization operation. During serialization of XML data, namespace fixup is done as defined in [namespaceURI of a Node is empty string, the serialization will treat them as null, ignoring the prefix if any. LSSerializer accepts any node type for serialization. For nodes of type Document or Entity, well-formed XML will be created when possible (well-formedness is guaranteed if the document or entity comes from a parse operation and is unchanged since it was created). The serialized output for these node types is either as a XML document or an External XML Entity, respectively, and is acceptable input for an XML parser. For all other types of nodes the serialized form is implementation dependent. Within a Document, DocumentFragment, or Entity being serialized, Nodes are processed as follows Document nodes are written, including the XML declaration (unless the parameter \"xml-declaration\" is set to false) and a DTD subset, if one exists in the DOM. Writing a Document node serializes the entire document. Entity nodes, when written directly by LSSerializer.write, outputs the entity expansion but no namespace fixup is done. The resulting output will be valid as an external entity. If the parameter \"true, EntityReference nodes are serialized as an entity reference of the form \" &entityName;\" in the output. Child nodes (the expansion) of the entity reference are ignored. If the parameter \"false, only the children of the entity reference are serialized. EntityReference nodes with no children (no corresponding Entity node or the corresponding Entity nodes have no children) are always serialized. CDATAsections containing content characters that cannot be represented in the specified output encoding are handled according to the \"true, CDATAsections are split, and the unrepresentable characters are serialized as numeric character references in ordinary content. The exact position and number of splits is not specified. If the parameter is set to false, unrepresentable characters in a CDATAsection are reported as \"wf-invalid-character\" errors if the parameter \"true. The error is not recoverable - there is no mechanism for supplying alternative characters and continuing with the serialization. DocumentFragment nodes are serialized by serializing the children of the document fragment in the order they appear in the document fragment. All other node types (Element, Text, etc.) are serialized to their corresponding XML source form. Node does not always generate a well-formed XML document, i.e. a LSParser might throw fatal errors when parsing the resulting serialization. Within the character data of a document (outside of markup), any characters that cannot be represented directly are replaced with character references. Occurrences of '<' and '&' are replaced by the predefined entities &lt; and &amp;. The other predefined entities (&gt;, &apos;, and &quot;) might not be used, except where needed (e.g. using &gt; in cases such as ']]>'). Any characters that cannot be represented directly in the output character encoding are serialized as numeric character references (and since character encoding standards commonly use hexadecimal representations of characters, using the hexadecimal representation when serializing character references is encouraged). To allow attribute values to contain both single and double quotes, the apostrophe or single-quote character (') may be represented as \"&apos;\", and the double-quote character (\") as \"&quot;\". New line characters and other characters that cannot be represented directly in attribute values in the output character encoding are serialized as a numeric character reference. Within markup, but outside of attributes, any occurrence of a character that cannot be represented in the output character encoding is reported as a DOMError fatal error. An example would be serializing the element <LaCa\u00f1ada/> with encoding=\"us-ascii\". This will result with a generation of a DOMError \"wf-invalid-character-in-node-name\" (as proposed in \" When requested by setting the parameter \"LSSerializer to true, character normalization is performed according to the definition of Implementations are required to support the encodings \"UTF-8\", \"UTF-16\", \"UTF-16BE\", and \"UTF-16LE\" to guarantee that data is serializable in all encodings that are required to be supported by all XML parsers. When the encoding is UTF-8, whether or not a byte order mark is serialized, or if the output is big-endian or little-endian, is implementation dependent. When the encoding is UTF-16, whether or not the output is big-endian or little-endian is implementation dependent, but a Byte Order Mark must be generated for non-character outputs, such as LSOutput.byteStream or LSOutput.systemId. If the Byte Order Mark is not generated, a \"byte-order-mark-needed\" warning is reported. When the encoding is UTF-16LE or UTF-16BE, the output is big-endian (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark is not be generated. In all cases, the encoding declaration, if generated, will correspond to the encoding used during the serialization (e.g. encoding=\"UTF-16\" will appear if UTF-16 was requested). Namespaces are fixed up during serialization, the serialization process will verify that namespace declarations, namespace prefixes and the namespace URI associated with elements and attributes are consistent. If inconsistencies are found, the serialized form of the document will be altered to remove them. The method used for doing the namespace fixup while serializing a document is the algorithm defined in Appendix B.1, \"Namespace normalization\", of [ While serializing a document, the parameter \"discard-default-content\" controls whether or not non-specified data is serialized. While serializing, errors and warnings are reported to the application through the error handler (LSSerializer.domConfig's \"DOMError.type) of errors and warnings defined by this specification are: In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...) and so on. See also the"}