{"Functions": {"setBytes(long, byte[], int, int)": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["long", "long: the position in the BLOB object at which to start writing; the first position is 1"], ["byte[]", "byte: the array of bytes to be written to this BLOB object"], ["int", "int: the offset into the array bytes at which to start reading the bytes to be set"], ["int", "int: the number of bytes to be written to the BLOB value from the array of bytes bytes"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if pos is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#getBytes_E@"], "Permissions": [], "Description": "Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written. Writing starts at position pos in the BLOB value; len bytes from the given byte array are written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "added in API level 1", "FullName": "public abstract int setBytes (long pos, byte[] bytes, int offset, int len)"}, "setBytes(long,byte[])": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["long", "long: the position in the BLOB object at which to start writing; the first position is 1"], ["byte[]", "byte: the array of bytes to be written to the BLOB value that this Blob object represents"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if pos is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#getBytes_E@"], "Permissions": [], "Description": "Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the number of bytes written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "Added in API level 1", "FullName": "public abstract int setBytes (long pos, byte[] bytes)"}, "getBytes(long, int)": {"Returns": [["byte[]", "a byte array containing up to length consecutive bytes from the BLOB value designated by this Blob object, starting with the byte at position pos"]], "Parameters": [["long", "long: the ordinal position of the first byte in the BLOB value to be extracted; the first byte is at position 1"], ["int", "int: the number of consecutive bytes to be copied; the value for length must be 0 or greater"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value; if pos is less than 1 or length is less than 0"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#setBytes_E@"], "Permissions": [], "Description": "Retrieves all or part of the BLOB value that this Blob object represents, as an array of bytes. This byte array contains up to length consecutive bytes starting at position pos.", "history": "added in API level 1", "FullName": "public abstract byte[] getBytes (long pos, int length)"}, "setBytes(long, byte[])": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["long", "long: the position in the BLOB object at which to start writing; the first position is 1"], ["byte[]", "byte: the array of bytes to be written to the BLOB value that this Blob object represents"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if pos is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#getBytes_E@"], "Permissions": [], "Description": "Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the number of bytes written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "added in API level 1", "FullName": "public abstract int setBytes (long pos, byte[] bytes)"}, "free()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if an error occurs releasing the Blob's resources"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "This method frees the Blob object and releases the resources that it holds. The object is invalid once the free method is called. After free has been called, any attempt to invoke a method other than free will result in a SQLException being thrown. If free is called multiple times, the subsequent calls to free are treated as a no-op.", "history": "Added in API level 9", "FullName": "public abstract void free ()"}, "position(byte[], long)": {"Returns": [["long", "the position at which the pattern appears, else -1"]], "Parameters": [["byte[]", "byte: the byte array for which to search"], ["long", "long: the position at which to begin searching; the first position is 1"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB or if start is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the byte position at which the specified byte array pattern begins within the BLOB value that this Blob object represents. The search for pattern begins at position start.", "history": "added in API level 1", "FullName": "public abstract long position (byte[] pattern, long start)"}, "getBinaryStream()": {"Returns": [["@B_java#io#InputStream_E@", "a stream containing the BLOB data"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#setBinaryStream_E@"], "Permissions": [], "Description": "Retrieves the BLOB value designated by this Blob instance as a stream.", "history": "Added in API level 1", "FullName": "public abstract InputStream getBinaryStream ()"}, "position(java.sql.Blob, long)": {"Returns": [["long", "the position at which the pattern begins, else -1"]], "Parameters": [["@B_java#sql#Blob_E@", "Blob: the Blob object designating the BLOB value for which to search"], ["long", "long: the position in the BLOB value at which to begin searching; the first position is 1"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if start is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the byte position in the BLOB value designated by this Blob object at which pattern begins. The search begins at position start.", "history": "added in API level 1", "FullName": "public abstract long position (Blob pattern, long start)"}, "setBytes(long,byte[],int,int)": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["long", "long: the position in the BLOB object at which to start writing; the first position is 1"], ["byte[]", "byte: the array of bytes to be written to this BLOB object"], ["int", "int: the offset into the array bytes at which to start reading the bytes to be set"], ["int", "int: the number of bytes to be written to the BLOB value from the array of bytes bytes"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if pos is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#getBytes_E@"], "Permissions": [], "Description": "Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written. Writing starts at position pos in the BLOB value; len bytes from the given byte array are written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "Added in API level 1", "FullName": "public abstract int setBytes (long pos, byte[] bytes, int offset, int len)"}, "position(byte[],long)": {"Returns": [["long", "the position at which the pattern appears, else -1"]], "Parameters": [["byte[]", "byte: the byte array for which to search"], ["long", "long: the position at which to begin searching; the first position is 1"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB or if start is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the byte position at which the specified byte array pattern begins within the BLOB value that this Blob object represents. The search for pattern begins at position start.", "history": "Added in API level 1", "FullName": "public abstract long position (byte[] pattern, long start)"}, "length()": {"Returns": [["long", "length of the BLOB in bytes"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the length of the BLOB"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes in the BLOB value designated by this Blob object.", "history": "Added in API level 1", "FullName": "public abstract long length ()"}, "getBinaryStream(long, long)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream through which the partial Blob value can be read."]], "Parameters": [["long", "long: the offset to the first byte of the partial value to be retrieved. The first byte in the Blob is at position 1"], ["long", "long: the length in bytes of the partial value to be retrieved"]], "Throws": [["@B_java#sql#SQLException_E@", "if pos is less than 1 or if pos is greater than the number of bytes in the Blob or if pos + length is greater than the number of bytes in the Blob"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length bytes in length.", "history": "added in API level 9", "FullName": "public abstract InputStream getBinaryStream (long pos, long length)"}, "getBinaryStream(long,long)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream through which the partial Blob value can be read."]], "Parameters": [["long", "long: the offset to the first byte of the partial value to be retrieved. The first byte in the Blob is at position 1"], ["long", "long: the length in bytes of the partial value to be retrieved"]], "Throws": [["@B_java#sql#SQLException_E@", "if pos is less than 1 or if pos is greater than the number of bytes in the Blob or if pos + length is greater than the number of bytes in the Blob"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length bytes in length.", "history": "Added in API level 9", "FullName": "public abstract InputStream getBinaryStream (long pos, long length)"}, "getBytes(long,int)": {"Returns": [["byte[]", "a byte array containing up to length consecutive bytes from the BLOB value designated by this Blob object, starting with the byte at position pos"]], "Parameters": [["long", "long: the ordinal position of the first byte in the BLOB value to be extracted; the first byte is at position 1"], ["int", "int: the number of consecutive bytes to be copied; the value for length must be 0 or greater"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value; if pos is less than 1 or length is less than 0"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#setBytes_E@"], "Permissions": [], "Description": "Retrieves all or part of the BLOB value that this Blob object represents, as an array of bytes. This byte array contains up to length consecutive bytes starting at position pos.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBytes (long pos, int length)"}, "truncate(long)": {"Returns": [], "Parameters": [["long", "long: the length, in bytes, to which the BLOB value that this Blob object represents should be truncated"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if len is less than 0"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Truncates the BLOB value that this Blob object represents to be len bytes in length. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "Added in API level 1", "FullName": "public abstract void truncate (long len)"}, "position(java.sql.Blob,long)": {"Returns": [["long", "the position at which the pattern begins, else -1"]], "Parameters": [["@B_java#sql#Blob_E@", "Blob: the Blob object designating the BLOB value for which to search"], ["long", "long: the position in the BLOB value at which to begin searching; the first position is 1"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if start is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the byte position in the BLOB value designated by this Blob object at which pattern begins. The search begins at position start.", "history": "Added in API level 1", "FullName": "public abstract long position (Blob pattern, long start)"}, "setBinaryStream(long)": {"Returns": [["@B_java#io#OutputStream_E@", "a java.io.OutputStream object to which data can be written"]], "Parameters": [["long", "long: the position in the BLOB value at which to start writing; the first position is 1"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error accessing the BLOB value or if pos is less than 1"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Blob#getBinaryStream_E@"], "Permissions": [], "Description": "Retrieves a stream that can be used to write to the BLOB value that this Blob object represents. The stream begins at position pos. The bytes written to the stream will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing to the stream, then the length of the Blob value will be increased to accomodate the extra bytes. pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC drivers may throw a SQLException while other drivers may support this operation.", "history": "Added in API level 1", "FullName": "public abstract OutputStream setBinaryStream (long pos)"}}, "Inheritance": [], "ClassName": "java.sql.Blob", "ClassDesc": "The representation (mapping) in the JavaBLOB value. An SQL BLOB is a built-in type that stores a Binary Large Object as a column value in a row of a database table. By default drivers implement Blob using an SQL locator(BLOB), which means that a Blob object contains a logical pointer to the SQL BLOB data rather than the data itself. A Blob object is valid for the duration of the transaction in which is was created. Methods in the interfaces @B_java#sql#ResultSet_E@, @B_java#sql#CallableStatement_E@, and @B_java#sql#PreparedStatement_E@, such as getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob interface provides methods for getting the length of an SQL BLOB (Binary Large Object) value, for materializing a BLOB value on the client, and for determining the position of a pattern of bytes within a BLOB value. In addition, this interface has methods for updating a BLOB value. All methods on the Blob interface must be fully implemented if the JDBC driver supports the data type."}