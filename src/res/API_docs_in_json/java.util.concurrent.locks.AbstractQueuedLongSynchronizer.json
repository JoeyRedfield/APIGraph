{"Functions": {"tryAcquireSharedNanos(long,long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted or the timeout elapses.", "history": "Added in API level 9", "FullName": "public final boolean tryAcquireSharedNanos (long arg, long nanosTimeout)"}, "setState(long)": {"Returns": [], "Parameters": [["long", "long: the new state value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of synchronization state. This operation has memory semantics of a volatile write.", "history": "Added in API level 9", "FullName": "protected final void setState (long newState)"}, "acquireShared(long)": {"Returns": [], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ until success.", "history": "Added in API level 9", "FullName": "public final void acquireShared (long arg)"}, "hasQueuedThreads()": {"Returns": [["boolean", "true if there may be other threads waiting to acquire"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that any other thread will ever acquire. In this implementation, this operation returns in constant time.", "history": "Added in API level 9", "FullName": "public final boolean hasQueuedThreads ()"}, "AbstractQueuedLongSynchronizer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AbstractQueuedLongSynchronizer instance with initial synchronization state of zero.", "history": "Added in API level 9", "FullName": "protected AbstractQueuedLongSynchronizer ()"}, "hasQueuedPredecessors()": {"Returns": [["boolean", "true if there is a queued thread preceding the current thread, and false if the current thread is at the head of the queue or the queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads have been waiting to acquire longer than the current thread. An invocation of this method is equivalent to (but may be more efficient than): Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that some other thread will acquire before the current thread. Likewise, it is possible for another thread to win a race to enqueue after this method has returned false, due to the queue being empty. This method is designed to be used by a fair synchronizer to avoid @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ method should return false, and its @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ method should return a negative value, if this method returns true (unless this is a reentrant acquire). For example, the tryAcquire method for a fair, reentrant, exclusive mode synchronizer might look like this:", "history": "Added in API level 21", "FullName": "public final boolean hasQueuedPredecessors ()"}, "getState()": {"Returns": [["long", "current state value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of synchronization state. This operation has memory semantics of a volatile read.", "history": "Added in API level 9", "FullName": "protected final long getState ()"}, "tryAcquireSharedNanos(long, long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted or the timeout elapses.", "history": "added in API level 9", "FullName": "public final boolean tryAcquireSharedNanos (long arg, long nanosTimeout)"}, "getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@", "AbstractQueuedLongSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.", "history": "Added in API level 9", "FullName": "public final Collection<Thread> getWaitingThreads (AbstractQueuedLongSynchronizer.ConditionObject condition)"}, "getQueueLength()": {"Returns": [["int", "the estimated number of threads waiting to acquire"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 9", "FullName": "public final int getQueueLength ()"}, "release(long)": {"Returns": [["boolean", "the value returned from @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryRelease_E@"]], "Parameters": [["long", "long: the release argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryRelease_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases in exclusive mode. Implemented by unblocking one or more threads if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryRelease_E@ returns true. This method can be used to implement method @B_java#util#concurrent#locks#Lock#unlock_E@.", "history": "Added in API level 9", "FullName": "public final boolean release (long arg)"}, "tryReleaseShared(long)": {"Returns": [["boolean", "true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise"]], "Parameters": [["long", "long: the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if shared mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 9", "FullName": "protected boolean tryReleaseShared (long arg)"}, "tryAcquireNanos(long, long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ until success or the thread is interrupted or the timeout elapses. This method can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "added in API level 9", "FullName": "public final boolean tryAcquireNanos (long arg, long nanosTimeout)"}, "tryRelease(long)": {"Returns": [["boolean", "true if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and false otherwise."]], "Parameters": [["long", "long: the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if exclusive mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set the state to reflect a release in exclusive mode. This method is always invoked by the thread performing release. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 9", "FullName": "protected boolean tryRelease (long arg)"}, "getFirstQueuedThread()": {"Returns": [["@B_java#lang#Thread_E@", "the first (longest-waiting) thread in the queue, or null if no threads are currently queued"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.", "history": "Added in API level 9", "FullName": "public final Thread getFirstQueuedThread ()"}, "hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)": {"Returns": [["boolean", "true if there are any waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@", "AbstractQueuedLongSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.", "history": "Added in API level 9", "FullName": "public final boolean hasWaiters (AbstractQueuedLongSynchronizer.ConditionObject condition)"}, "isQueued(java.lang.Thread)": {"Returns": [["boolean", "true if the given thread is on the queue"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the thread is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread.", "history": "Added in API level 9", "FullName": "public final boolean isQueued (Thread thread)"}, "tryAcquire(long)": {"Returns": [["boolean", "true if successful. Upon success, this object has been acquired."]], "Parameters": [["long", "long: the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if exclusive mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 9", "FullName": "protected boolean tryAcquire (long arg)"}, "acquireInterruptibly(long)": {"Returns": [], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ until success or the thread is interrupted. This method can be used to implement method @B_java#util#concurrent#locks#Lock#lockInterruptibly_E@.", "history": "Added in API level 9", "FullName": "public final void acquireInterruptibly (long arg)"}, "isHeldExclusively()": {"Returns": [["boolean", "true if synchronization is held exclusively; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if conditions are not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a non-waiting @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@ method. (Waiting methods instead invoke @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#release_E@.) The default implementation throws @B_java#lang#UnsupportedOperationException_E@. This method is invoked internally only within @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@ methods, so need not be defined if conditions are not used.", "history": "Added in API level 9", "FullName": "protected boolean isHeldExclusively ()"}, "getSharedQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#getQueuedThreads_E@ except that it only returns those threads waiting due to a shared acquire.", "history": "Added in API level 9", "FullName": "public final Collection<Thread> getSharedQueuedThreads ()"}, "releaseShared(long)": {"Returns": [["boolean", "the value returned from @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryReleaseShared_E@"]], "Parameters": [["long", "long: the release argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryReleaseShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases in shared mode. Implemented by unblocking one or more threads if @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryReleaseShared_E@ returns true.", "history": "Added in API level 9", "FullName": "public final boolean releaseShared (long arg)"}, "compareAndSetState(long, long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.", "history": "added in API level 9", "FullName": "protected final boolean compareAndSetState (long expect, long update)"}, "hasContended()": {"Returns": [["boolean", "true if there has ever been contention"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked. In this implementation, this operation returns in constant time.", "history": "Added in API level 9", "FullName": "public final boolean hasContended ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this synchronizer, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String \"State =\" followed by the current value of @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#getState_E@, and either \"nonempty\" or \"empty\" depending on whether the queue is empty.", "history": "Added in API level 9", "FullName": "public String toString ()"}, "getQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.", "history": "Added in API level 9", "FullName": "public final Collection<Thread> getQueuedThreads ()"}, "owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)": {"Returns": [["boolean", "true if owned"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@", "AbstractQueuedLongSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether the given ConditionObject uses this synchronizer as its lock.", "history": "Added in API level 9", "FullName": "public final boolean owns (AbstractQueuedLongSynchronizer.ConditionObject condition)"}, "getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)": {"Returns": [["int", "the estimated number of waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#ConditionObject_E@", "AbstractQueuedLongSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 9", "FullName": "public final int getWaitQueueLength (AbstractQueuedLongSynchronizer.ConditionObject condition)"}, "acquireSharedInterruptibly(long)": {"Returns": [], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted.", "history": "Added in API level 9", "FullName": "public final void acquireSharedInterruptibly (long arg)"}, "tryAcquireShared(long)": {"Returns": [["long", "a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired."]], "Parameters": [["long", "long: the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if shared mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 9", "FullName": "protected long tryAcquireShared (long arg)"}, "tryAcquireNanos(long,long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ until success or the thread is interrupted or the timeout elapses. This method can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "Added in API level 9", "FullName": "public final boolean tryAcquireNanos (long arg, long nanosTimeout)"}, "getExclusiveQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#getQueuedThreads_E@ except that it only returns those threads waiting due to an exclusive acquire.", "history": "Added in API level 9", "FullName": "public final Collection<Thread> getExclusiveQueuedThreads ()"}, "acquire(long)": {"Returns": [], "Parameters": [["long", "long: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedLongSynchronizer#tryAcquire_E@ until success. This method can be used to implement method @B_java#util#concurrent#locks#Lock#lock_E@.", "history": "Added in API level 9", "FullName": "public final void acquire (long arg)"}, "compareAndSetState(long,long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.", "history": "Added in API level 9", "FullName": "protected final boolean compareAndSetState (long expect, long update)"}}, "Inheritance": ["@B_java#util#concurrent#locks#AbstractOwnableSynchronizer_E@"], "ClassName": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer", "ClassDesc": "A version of @B_java#util#concurrent#locks#AbstractQueuedSynchronizer_E@ in which synchronization state is maintained as a long. This class has exactly the same structure, properties, and methods as AbstractQueuedSynchronizer with the exception that all state-related parameters and results are defined as long rather than int. This class may be useful when creating synchronizers such as multilevel locks and barriers that require 64 bits of state. See @B_java#util#concurrent#locks#AbstractQueuedSynchronizer_E@ for usage notes and examples."}