{"Functions": {"getRelativeTimeSpanString(android.content.Context,long,boolean)": {"Returns": [["@B_java#lang#CharSequence_E@", "a relative time string to display the time expressed by millis. Times are counted starting at midnight, which means that assuming that the current time is March 31st, 0:30: \"millis=0:10 today\" will be displayed as \"0:10\" \"millis=11:30pm the day before\" will be displayed as \"Mar 30\" If the given millis is in a different year, then the full date is returned in numeric format (e.g., \"10/12/2008\")."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["long", "long no parameter comment"], ["boolean", "boolean: If true, the string returned will include the correct preposition (\"at 9:20am\", \"on 10/12/2008\" or \"on May 29\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (Context c, long millis, boolean withPreposition)"}, "getRelativeTimeSpanString(long)": {"Returns": [["@B_java#lang#CharSequence_E@", "a String object containing the elapsed time."]], "Parameters": [["long", "long: some time in the past."]], "Throws": [], "SeeAlso": ["@B_android#text#format#DateUtils#getRelativeTimeSpanString_E@"], "Permissions": [], "Description": "Returns a string describing the elapsed time since startTime. The minimum timespan to report is set to @B_android#text#format#DateUtils#MINUTE_IN_MILLIS_E@.", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (long startTime)"}, "formatElapsedTime(long)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["long", "long: the elapsed time in seconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats an elapsed time in the form \"MM:SS\" or \"H:MM:SS\" for display on the call-in-progress screen.", "history": "Added in API level 3", "FullName": "public static String formatElapsedTime (long elapsedSeconds)"}, "getRelativeTimeSpanString(android.content.Context,long)": {"Returns": [["@B_java#lang#CharSequence_E@", "@B_java#lang#CharSequence_E@ containing relative time."]], "Parameters": [["@B_android#content#Context_E@", "Context: context for resources"], ["long", "long: time in milliseconds"]], "Throws": [], "SeeAlso": ["@B_android#text#format#DateUtils#getRelativeTimeSpanString_E@"], "Permissions": [], "Description": "Convenience function to return relative time string without preposition.", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (Context c, long millis)"}, "formatDateTime(android.content.Context, long, int)": {"Returns": [["@B_java#lang#String_E@", "a string containing the formatted date/time."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context is required only if the time is shown"], ["long", "long: a point in time in UTC milliseconds"], ["int", "int: a bit mask of formatting options"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date or a time according to the local conventions. There are lots of options that allow the caller to control, for example, if the time is shown, if the day of the week is shown, if the month name is abbreviated, if noon is shown instead of 12pm, and so on. For the complete list of options, see the documentation for @B_android#text#format#DateUtils#formatDateRange_E@. Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm 3pm 3PM 08:00 17:00 noon Noon midnight Midnight Oct 31 Oct 31, 2007 October 31, 2007 10am, Oct 31 17:00, Oct 31 Wed Wednesday 10am, Wed, Oct 31 Wed, Oct 31 Wednesday, Oct 31 Wed, Oct 31, 2007 Wed, October 31 10/31/2007", "history": "added in API level 3", "FullName": "public static String formatDateTime (Context context, long millis, int flags)"}, "getRelativeTimeSpanString(long, long, long)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the time to describe, in milliseconds"], ["long", "long: the current time in milliseconds"], ["long", "long: the minimum timespan to report. For example, a time 3 seconds in the past will be reported as \"0 minutes ago\" if this is set to MINUTE_IN_MILLIS. Pass one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, WEEK_IN_MILLIS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like \"42 minutes ago\". Time spans in the future are formatted like \"In 42 minutes\".", "history": "added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (long time, long now, long minResolution)"}, "getDayOfWeekString(int, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: One of @B_java#util#Calendar#SUNDAY_E@, @B_java#util#Calendar#MONDAY_E@, etc."], ["int", "int: One of @B_android#text#format#DateUtils#LENGTH_LONG_E@, @B_android#text#format#DateUtils#LENGTH_SHORT_E@, @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@, or @B_android#text#format#DateUtils#LENGTH_SHORTEST_E@. Note that in most languages, @B_android#text#format#DateUtils#LENGTH_SHORT_E@ will return the same as @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@. Undefined lengths will return @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@ but may return something different in the future."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the dayOfWeek is out of bounds."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#text#SimpleDateFormat_E@ instead. Return a string for the day of the week.", "history": "added in API level 3", "FullName": "public static String getDayOfWeekString (int dayOfWeek, int abbrev)"}, "formatElapsedTime(java.lang.StringBuilder, long)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#StringBuilder_E@", "StringBuilder: @B_java#lang#StringBuilder_E@ to recycle, or null to use a temporary one."], ["long", "long: the elapsed time in seconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats an elapsed time in a format like \"MM:SS\" or \"H:MM:SS\" (using a form suited to the current locale), similar to that used on the call-in-progress screen.", "history": "added in API level 3", "FullName": "public static String formatElapsedTime (StringBuilder recycle, long elapsedSeconds)"}, "getRelativeTimeSpanString(long,long,long,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the time to describe, in milliseconds"], ["long", "long: the current time in milliseconds"], ["long", "long: the minimum timespan to report. For example, a time 3 seconds in the past will be reported as \"0 minutes ago\" if this is set to MINUTE_IN_MILLIS. Pass one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, WEEK_IN_MILLIS"], ["int", "int: a bit mask of formatting options, such as @B_android#text#format#DateUtils#FORMAT_NUMERIC_DATE_E@ or @B_android#text#format#DateUtils#FORMAT_ABBREV_RELATIVE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like \"42 minutes ago\". Time spans in the future are formatted like \"In 42 minutes\". Can use @B_android#text#format#DateUtils#FORMAT_ABBREV_RELATIVE_E@ flag to use abbreviated relative times, like \"42 mins ago\".", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (long time, long now, long minResolution, int flags)"}, "formatDateTime(android.content.Context,long,int)": {"Returns": [["@B_java#lang#String_E@", "a string containing the formatted date/time."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context is required only if the time is shown"], ["long", "long: a point in time in UTC milliseconds"], ["int", "int: a bit mask of formatting options"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date or a time according to the local conventions. There are lots of options that allow the caller to control, for example, if the time is shown, if the day of the week is shown, if the month name is abbreviated, if noon is shown instead of 12pm, and so on. For the complete list of options, see the documentation for @B_android#text#format#DateUtils#formatDateRange_E@. Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm 3pm 3PM 08:00 17:00 noon Noon midnight Midnight Oct 31 Oct 31, 2007 October 31, 2007 10am, Oct 31 17:00, Oct 31 Wed Wednesday 10am, Wed, Oct 31 Wed, Oct 31 Wednesday, Oct 31 Wed, Oct 31, 2007 Wed, October 31 10/31/2007", "history": "Added in API level 3", "FullName": "public static String formatDateTime (Context context, long millis, int flags)"}, "formatSameDayTime(long,long,int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the date to format"], ["long", "long: the base time"], ["int", "int: how to format the date portion."], ["int", "int: how to format the time portion."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. The parameters dateFormat and timeFormat should each be one of @B_java#text#DateFormat#DEFAULT_E@, @B_java#text#DateFormat#FULL_E@, @B_java#text#DateFormat#LONG_E@, @B_java#text#DateFormat#MEDIUM_E@ or @B_java#text#DateFormat#SHORT_E@", "history": "Added in API level 3", "FullName": "public static final CharSequence formatSameDayTime (long then, long now, int dateStyle, int timeStyle)"}, "formatSameDayTime(long, long, int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the date to format"], ["long", "long: the base time"], ["int", "int: how to format the date portion."], ["int", "int: how to format the time portion."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. The parameters dateFormat and timeFormat should each be one of @B_java#text#DateFormat#DEFAULT_E@, @B_java#text#DateFormat#FULL_E@, @B_java#text#DateFormat#LONG_E@, @B_java#text#DateFormat#MEDIUM_E@ or @B_java#text#DateFormat#SHORT_E@", "history": "added in API level 3", "FullName": "public static final CharSequence formatSameDayTime (long then, long now, int dateStyle, int timeStyle)"}, "getRelativeDateTimeString(android.content.Context,long,long,long,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["long", "long: some time in the past."], ["long", "long: the minimum elapsed time (in milliseconds) to report when showing relative times. For example, a time 3 seconds in the past will be reported as \"0 minutes ago\" if this is set to @B_android#text#format#DateUtils#MINUTE_IN_MILLIS_E@."], ["long", "long: the elapsed time (in milliseconds) at which to stop reporting relative measurements. Elapsed times greater than this resolution will default to normal date formatting. For example, will transition from \"7 days ago\" to \"Dec 12\" when using @B_android#text#format#DateUtils#WEEK_IN_MILLIS_E@."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return string describing the elapsed time since startTime formatted like \"[relative time/date], [time]\". Example output strings for the US date format. 3 min. ago, 10:15 AM Yesterday, 12:20 PM Dec 12, 4:12 AM 11/14/2007, 8:20 AM", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeDateTimeString (Context c, long time, long minResolution, long transitionResolution, int flags)"}, "formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)": {"Returns": [["@B_java#util#Formatter_E@", "the formatter with the formatted date/time range appended to the string buffer."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context is required only if the time is shown"], ["@B_java#util#Formatter_E@", "Formatter: the Formatter used for formatting the date range. Note: be sure to call setLength(0) on StringBuilder passed to the Formatter constructor unless you want the results to accumulate."], ["long", "long: the start time in UTC milliseconds"], ["long", "long: the end time in UTC milliseconds"], ["int", "int: a bit mask of options"], ["@B_java#lang#String_E@", "String: the time zone to compute the string in. Use null for local or if the FORMAT_UTC flag is being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date or a time range according to the local conventions. Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm - 4:00pm 3pm - 4pm 3PM - 4PM 08:00 - 17:00 Oct 9 Tue, Oct 9 October 9, 2007 Oct 9 - 10 Oct 9 - 10, 2007 Oct 28 - Nov 3, 2007 Dec 31, 2007 - Jan 1, 2008 Oct 9, 8:00am - Oct 10, 5:00pm 12/31/2007 - 01/01/2008 The flags argument is a bitmask of options from the following list: FORMAT_SHOW_TIME FORMAT_SHOW_WEEKDAY FORMAT_SHOW_YEAR FORMAT_SHOW_DATE FORMAT_NO_MONTH_DAY FORMAT_12HOUR FORMAT_24HOUR FORMAT_CAP_AMPM FORMAT_NO_NOON FORMAT_CAP_NOON FORMAT_NO_MIDNIGHT FORMAT_CAP_MIDNIGHT FORMAT_UTC FORMAT_ABBREV_TIME FORMAT_ABBREV_WEEKDAY FORMAT_ABBREV_MONTH FORMAT_ABBREV_ALL FORMAT_NUMERIC_DATE If FORMAT_SHOW_TIME is set, the time is shown as part of the date range. If the start and end time are the same, then just the start time is shown. If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown. If FORMAT_SHOW_YEAR is set, then the year is always shown. If FORMAT_SHOW_YEAR is not set, then the year is shown only if it is different from the current year, or if the start and end dates fall on different years. Normally the date is shown unless the start and end day are the same. If FORMAT_SHOW_DATE is set, then the date is always shown, even for same day ranges. If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the month name will be shown, not the day of the month. For example, \"January, 2008\" instead of \"January 6 - 12, 2008\". If FORMAT_CAP_AMPM is set and 12-hour time is used, then the \"AM\" and \"PM\" are capitalized. You should not use this flag because in some locales these terms cannot be capitalized, and in many others it doesn't make sense to do so even though it is possible. If FORMAT_NO_NOON is set and 12-hour time is used, then \"12pm\" is shown instead of \"noon\". If FORMAT_CAP_NOON is set and 12-hour time is used, then \"Noon\" is shown instead of \"noon\". You should probably not use this flag because in many locales it will not make sense to capitalize the term. If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then \"12am\" is shown instead of \"midnight\". If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used, then \"Midnight\" is shown instead of \"midnight\". You should probably not use this flag because in many locales it will not make sense to capitalize the term. If FORMAT_12HOUR is set and the time is shown, then the time is shown in the 12-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. If FORMAT_24HOUR is set and the time is shown, then the time is shown in the 24-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. If FORMAT_UTC is set, then the UTC time zone is used for the start and end milliseconds unless a time zone is specified. If a time zone is specified it will be used regardless of the FORMAT_UTC flag. If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero. For example, instead of \"3:00pm\" the time would be abbreviated to \"3pm\". If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is abbreviated to a 3-letter string. If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated to a 3-letter string. If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown) are abbreviated to 3-letter strings. If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format instead of using the name of the month. For example, \"12/31/2008\" instead of \"December 31, 2008\". If the end date ends at 12:00am at the beginning of a day, it is formatted as the end of the previous day in two scenarios: For single day events. This results in \"8pm - midnight\" instead of \"Nov 10, 8pm - Nov 11, 12am\". When the time is not displayed. This results in \"Nov 10 - 11\" for an event with a start date of Nov 10 and an end date of Nov 12 at 00:00.", "history": "Added in API level 9", "FullName": "public static Formatter formatDateRange (Context context, Formatter formatter, long startMillis, long endMillis, int flags, String timeZone)"}, "formatDateRange(android.content.Context,long,long,int)": {"Returns": [["@B_java#lang#String_E@", "a string containing the formatted date/time range."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context is required only if the time is shown"], ["long", "long: the start time in UTC milliseconds"], ["long", "long: the end time in UTC milliseconds"], ["int", "int: a bit mask of options See @B_android#text#format#DateUtils#formatDateRange_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date or a time range according to the local conventions. Note that this is a convenience method. Using it involves creating an internal @B_java#util#Formatter_E@ instance on-the-fly, which is somewhat costly in terms of memory and time. This is probably acceptable if you use the method only rarely, but if you rely on it for formatting a large number of dates, consider creating and reusing your own @B_java#util#Formatter_E@ instance and use the version of @B_android#text#format#DateUtils#formatDateRange_E@ that takes a @B_java#util#Formatter_E@.", "history": "Added in API level 3", "FullName": "public static String formatDateRange (Context context, long startMillis, long endMillis, int flags)"}, "getDayOfWeekString(int,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: One of @B_java#util#Calendar#SUNDAY_E@, @B_java#util#Calendar#MONDAY_E@, etc."], ["int", "int: One of @B_android#text#format#DateUtils#LENGTH_LONG_E@, @B_android#text#format#DateUtils#LENGTH_SHORT_E@, @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@, or @B_android#text#format#DateUtils#LENGTH_SHORTEST_E@. Note that in most languages, @B_android#text#format#DateUtils#LENGTH_SHORT_E@ will return the same as @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@. Undefined lengths will return @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@ but may return something different in the future."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the dayOfWeek is out of bounds."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#text#SimpleDateFormat_E@ instead. Return a string for the day of the week.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public static String getDayOfWeekString (int dayOfWeek, int abbrev)"}, "formatElapsedTime(java.lang.StringBuilder,long)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#StringBuilder_E@", "StringBuilder: @B_java#lang#StringBuilder_E@ to recycle, or null to use a temporary one."], ["long", "long: the elapsed time in seconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats an elapsed time in a format like \"MM:SS\" or \"H:MM:SS\" (using a form suited to the current locale), similar to that used on the call-in-progress screen.", "history": "Added in API level 3", "FullName": "public static String formatElapsedTime (StringBuilder recycle, long elapsedSeconds)"}, "getAMPMString(int)": {"Returns": [["@B_java#lang#String_E@", "Localized version of \"AM\" or \"PM\"."]], "Parameters": [["int", "int: Either @B_java#util#Calendar#AM_E@ or @B_java#util#Calendar#PM_E@."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the ampm is out of bounds."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#text#SimpleDateFormat_E@ instead. Return a localized string for AM or PM.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public static String getAMPMString (int ampm)"}, "getMonthString(int, int)": {"Returns": [["@B_java#lang#String_E@", "Localized month of the year."]], "Parameters": [["int", "int: One of @B_java#util#Calendar#JANUARY_E@, @B_java#util#Calendar#FEBRUARY_E@, etc."], ["int", "int: One of @B_android#text#format#DateUtils#LENGTH_LONG_E@, @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@, or @B_android#text#format#DateUtils#LENGTH_SHORTEST_E@. Undefined lengths will return @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@ but may return something different in the future."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#text#SimpleDateFormat_E@ instead. Return a localized string for the month of the year.", "history": "added in API level 3", "FullName": "public static String getMonthString (int month, int abbrev)"}, "getRelativeTimeSpanString(long, long, long, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the time to describe, in milliseconds"], ["long", "long: the current time in milliseconds"], ["long", "long: the minimum timespan to report. For example, a time 3 seconds in the past will be reported as \"0 minutes ago\" if this is set to MINUTE_IN_MILLIS. Pass one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, WEEK_IN_MILLIS"], ["int", "int: a bit mask of formatting options, such as @B_android#text#format#DateUtils#FORMAT_NUMERIC_DATE_E@ or @B_android#text#format#DateUtils#FORMAT_ABBREV_RELATIVE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like \"42 minutes ago\". Time spans in the future are formatted like \"In 42 minutes\". Can use @B_android#text#format#DateUtils#FORMAT_ABBREV_RELATIVE_E@ flag to use abbreviated relative times, like \"42 mins ago\".", "history": "added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (long time, long now, long minResolution, int flags)"}, "getRelativeTimeSpanString(long,long,long)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["long", "long: the time to describe, in milliseconds"], ["long", "long: the current time in milliseconds"], ["long", "long: the minimum timespan to report. For example, a time 3 seconds in the past will be reported as \"0 minutes ago\" if this is set to MINUTE_IN_MILLIS. Pass one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, WEEK_IN_MILLIS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like \"42 minutes ago\". Time spans in the future are formatted like \"In 42 minutes\".", "history": "Added in API level 3", "FullName": "public static CharSequence getRelativeTimeSpanString (long time, long now, long minResolution)"}, "isToday(long)": {"Returns": [["boolean", "true if the supplied when is today else false"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static boolean isToday (long when)"}, "getMonthString(int,int)": {"Returns": [["@B_java#lang#String_E@", "Localized month of the year."]], "Parameters": [["int", "int: One of @B_java#util#Calendar#JANUARY_E@, @B_java#util#Calendar#FEBRUARY_E@, etc."], ["int", "int: One of @B_android#text#format#DateUtils#LENGTH_LONG_E@, @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@, or @B_android#text#format#DateUtils#LENGTH_SHORTEST_E@. Undefined lengths will return @B_android#text#format#DateUtils#LENGTH_MEDIUM_E@ but may return something different in the future."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_java#text#SimpleDateFormat_E@ instead. Return a localized string for the month of the year.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public static String getMonthString (int month, int abbrev)"}, "formatDateRange(android.content.Context,java.util.Formatter,long,long,int)": {"Returns": [["@B_java#util#Formatter_E@", "a string containing the formatted date/time range."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context is required only if the time is shown"], ["@B_java#util#Formatter_E@", "Formatter: the Formatter used for formatting the date range. Note: be sure to call setLength(0) on StringBuilder passed to the Formatter constructor unless you want the results to accumulate."], ["long", "long: the start time in UTC milliseconds"], ["long", "long: the end time in UTC milliseconds"], ["int", "int: a bit mask of options See @B_android#text#format#DateUtils#formatDateRange_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date or a time range according to the local conventions. Note that this is a convenience method for formatting the date or time range in the local time zone. If you want to specify the time zone please use @B_android#text#format#DateUtils#formatDateRange_E@.", "history": "Added in API level 5", "FullName": "public static Formatter formatDateRange (Context context, Formatter formatter, long startMillis, long endMillis, int flags)"}, "DateUtils()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public DateUtils ()"}}, "Inheritance": [], "ClassName": "android.text.format.DateUtils", "ClassDesc": "This class contains various date-related utilities for creating text for things like elapsed time and date ranges, strings for days of the week and months, and AM/PM text etc."}