{"Functions": {"put(java.net.URI,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: a URI where the cookies come from"], ["@B_java#util#Map_E@", "Map: an immutable map from field names to lists of field values representing the response header fields returned"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#IllegalArgumentException_E@", "if either argument is null"]], "SeeAlso": ["@B_java#net#CookieHandler#get_E@"], "Permissions": [], "Description": "Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.", "history": "Added in API level 1", "FullName": "public abstract void put (URI uri, Map<String, List<String>> responseHeaders)"}, "get(java.net.URI,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [["@B_java#util#Map_E@", "an immutable map from state management headers, with field names \"Cookie\" or \"Cookie2\" to a list of cookies containing state information"]], "Parameters": [["@B_java#net#URI_E@", "URI: a URI representing the intended use for the cookies"], ["@B_java#util#Map_E@", "Map: - a Map from request header field names to lists of field values representing the current request headers"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#IllegalArgumentException_E@", "if either argument is null"]], "SeeAlso": ["@B_java#net#CookieHandler#put_E@"], "Permissions": [], "Description": "Gets all the applicable cookies from a cookie cache for the specified uri in the request header. The URI passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript. It is up to the implementation to take into account the URI and the cookies attributes and security settings to determine which ones should be returned. HTTP protocol implementers should make sure that this method is called after all request headers related to choosing cookies are added, and before the request is sent.", "history": "Added in API level 1", "FullName": "public abstract Map<String, List<String>> get (URI uri, Map<String, List<String>> requestHeaders)"}, "getDefault()": {"Returns": [["@B_java#net#CookieHandler_E@", "the system-wide cookie handler; A null return means there is no system-wide cookie handler currently set."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#net#NetPermission_E@(\"getCookieHandler\")"]], "SeeAlso": ["@B_java#net#CookieHandler#setDefault_E@"], "Permissions": [], "Description": "Gets the system-wide cookie handler.", "history": "Added in API level 1", "FullName": "public static CookieHandler getDefault ()"}, "CookieHandler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public CookieHandler ()"}, "setDefault(java.net.CookieHandler)": {"Returns": [], "Parameters": [["@B_java#net#CookieHandler_E@", "CookieHandler: The HTTP cookie handler, or null to unset."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#net#NetPermission_E@(\"setCookieHandler\")"]], "SeeAlso": ["@B_java#net#CookieHandler#getDefault_E@"], "Permissions": [], "Description": "Sets (or unsets) the system-wide cookie handler. Note: non-standard http protocol handlers may ignore this setting.", "history": "Added in API level 1", "FullName": "public static void setDefault (CookieHandler cHandler)"}}, "Inheritance": [], "ClassName": "java.net.CookieHandler", "ClassDesc": "A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler. The HTTP state management mechanism specifies a way to create a stateful session with HTTP requests and responses. A system-wide CookieHandler that to used by the HTTP protocol handler can be registered by doing a CookieHandler.setDefault(CookieHandler). The currently registered CookieHandler can be retrieved by calling CookieHandler.getDefault(). For more information on HTTP state management, see"}