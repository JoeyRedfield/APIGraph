{"Functions": {"readSQLXML()": {"Returns": [["@B_java#sql#SQLXML_E@", "a SQLXML object representing data of the SQL XML value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract SQLXML readSQLXML ()"}, "readDate()": {"Returns": [["@B_java#sql#Date_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a java.sql.Date object.", "history": "Added in API level 1", "FullName": "public abstract Date readDate ()"}, "readURL()": {"Returns": [["@B_java#net#URL_E@", "a java.net.URL object."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, or if a URL is malformed"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL DATALINK value from the stream and returns it as a java.net.URL object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract URL readURL ()"}, "readShort()": {"Returns": [["short", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a short in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract short readShort ()"}, "readFloat()": {"Returns": [["float", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a float in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract float readFloat ()"}, "readBlob()": {"Returns": [["@B_java#sql#Blob_E@", "a Blob object representing data of the SQL BLOB value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL BLOB value from the stream and returns it as a Blob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Blob readBlob ()"}, "readString()": {"Returns": [["@B_java#lang#String_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract String readString ()"}, "readArray()": {"Returns": [["@B_java#sql#Array_E@", "an Array object representing data of the SQL ARRAY value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Array readArray ()"}, "readClob()": {"Returns": [["@B_java#sql#Clob_E@", "a Clob object representing data of the SQL CLOB value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL CLOB value from the stream and returns it as a Clob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Clob readClob ()"}, "readBigDecimal()": {"Returns": [["@B_java#math#BigDecimal_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a java.math.BigDecimal object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract BigDecimal readBigDecimal ()"}, "readByte()": {"Returns": [["byte", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a byte in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte readByte ()"}, "readBoolean()": {"Returns": [["boolean", "the attribute; if the value is SQL NULL, returns false"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a boolean in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract boolean readBoolean ()"}, "readNString()": {"Returns": [["@B_java#lang#String_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a String in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.", "history": "Added in API level 9", "FullName": "public abstract String readNString ()"}, "readBinaryStream()": {"Returns": [["@B_java#io#InputStream_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a stream of uninterpreted bytes.", "history": "Added in API level 1", "FullName": "public abstract InputStream readBinaryStream ()"}, "readRowId()": {"Returns": [["@B_java#sql#RowId_E@", "a RowId object representing data of the SQL ROWID value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract RowId readRowId ()"}, "readRef()": {"Returns": [["@B_java#sql#Ref_E@", "a Ref object representing the SQL REF value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL REF value from the stream and returns it as a Ref object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Ref readRef ()"}, "readInt()": {"Returns": [["int", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as an int in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract int readInt ()"}, "readTime()": {"Returns": [["@B_java#sql#Time_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a java.sql.Time object.", "history": "Added in API level 1", "FullName": "public abstract Time readTime ()"}, "readNClob()": {"Returns": [["@B_java#sql#NClob_E@", "a NClob object representing data of the SQL NCLOB value at the head of the stream; null if the value read is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads an SQL NCLOB value from the stream and returns it as a NClob object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract NClob readNClob ()"}, "readTimestamp()": {"Returns": [["@B_java#sql#Timestamp_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a java.sql.Timestamp object.", "history": "Added in API level 1", "FullName": "public abstract Timestamp readTimestamp ()"}, "readObject()": {"Returns": [["@B_java#lang#Object_E@", "the datum at the head of the stream as an Object in the Java programming language;null if the datum is SQL NULL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the datum at the head of the stream and returns it as an Object in the Java programming language. The actual type of the object returned is determined by the default type mapping, and any customizations present in this stream's type map. A type map is registered with the stream by the JDBC driver before the stream is passed to the application. When the datum at the head of the stream is an SQL NULL, the method returns null. If the datum is an SQL structured or distinct type, it determines the SQL type of the datum at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method SQLData.readSQL on that object, which reads additional data from the stream, using the protocol described for that method.", "history": "Added in API level 1", "FullName": "public abstract Object readObject ()"}, "readLong()": {"Returns": [["long", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a long in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract long readLong ()"}, "readAsciiStream()": {"Returns": [["@B_java#io#InputStream_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a stream of ASCII characters.", "history": "Added in API level 1", "FullName": "public abstract InputStream readAsciiStream ()"}, "wasNull()": {"Returns": [["boolean", "true if the most recently read SQL value was SQL NULL; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the last value read was SQL NULL.", "history": "Added in API level 1", "FullName": "public abstract boolean wasNull ()"}, "readDouble()": {"Returns": [["double", "the attribute; if the value is SQL NULL, returns 0"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a double in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract double readDouble ()"}, "readBytes()": {"Returns": [["byte[]", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as an array of bytes in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte[] readBytes ()"}, "readCharacterStream()": {"Returns": [["@B_java#io#Reader_E@", "the attribute; if the value is SQL NULL, returns null"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next attribute in the stream and returns it as a stream of Unicode characters.", "history": "Added in API level 1", "FullName": "public abstract Reader readCharacterStream ()"}}, "Inheritance": [], "ClassName": "java.sql.SQLInput", "ClassDesc": "An input stream that contains a stream of values representing an instance of an SQL structured type or an SQL distinct type. This interface, used only for custom mapping, is used by the driver behind the scenes, and a programmer never directly invokes SQLInput methods. The readLong, readBytes, and so on) provide a way for an implementation of the SQLData interface to read the values in an SQLInput object. And as described in SQLData, calls to reader methods must be made in the order that their corresponding attributes appear in the SQL definition of the type. The method wasNull is used to determine whether the last value read was SQL NULL. When the method getObject is called with an object of a class implementing the interface SQLData, the JDBC driver calls the method SQLData.getSQLType to determine the SQL type of the user-defined type (UDT) being custom mapped. The driver creates an instance of SQLInput, populating it with the attributes of the UDT. The driver then passes the input stream to the method SQLData.readSQL, which in turn calls the SQLInput reader methods in its implementation for reading the attributes from the input stream."}