{"Functions": {"toggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#open_E@", "@B_android#widget#SlidingDrawer#close_E@", "@B_android#widget#SlidingDrawer#animateClose_E@", "@B_android#widget#SlidingDrawer#animateOpen_E@", "@B_android#widget#SlidingDrawer#animateToggle_E@"], "Permissions": [], "Description": "Toggles the drawer open and close. Takes effect immediately.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void toggle ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "isOpened()": {"Returns": [["boolean", "True if the drawer is opened, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the drawer is currently fully opened.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public boolean isOpened ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "animateToggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#open_E@", "@B_android#widget#SlidingDrawer#close_E@", "@B_android#widget#SlidingDrawer#animateClose_E@", "@B_android#widget#SlidingDrawer#animateOpen_E@", "@B_android#widget#SlidingDrawer#toggle_E@"], "Permissions": [], "Description": "Toggles the drawer open and close with an animation.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void animateToggle ()"}, "open()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#toggle_E@", "@B_android#widget#SlidingDrawer#close_E@", "@B_android#widget#SlidingDrawer#animateOpen_E@"], "Permissions": [], "Description": "Opens the drawer immediately.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void open ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 3", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener)": {"Returns": [], "Parameters": [["@B_android#widget#SlidingDrawer#OnDrawerScrollListener_E@", "SlidingDrawer.OnDrawerScrollListener: The listener to be notified when scrolling starts or stops."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that receives a notification when the drawer starts or ends a scroll. A fling is considered as a scroll. A fling will also trigger a drawer opened or drawer closed event.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void setOnDrawerScrollListener (SlidingDrawer.OnDrawerScrollListener onDrawerScrollListener)"}, "onFinishInflate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finalize inflating a view from XML. This is called as the last phase of inflation, after all child views have been added. Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "protected void onFinishInflate ()"}, "SlidingDrawer(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes defined in XML."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SlidingDrawer from a specified set of attributes defined in XML.", "history": "Added in API level 3", "FullName": "public SlidingDrawer (Context context, AttributeSet attrs, int defStyleAttr)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "isMoving()": {"Returns": [["boolean", "True if the drawer is scroller or flinging, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the drawer is scrolling or flinging.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public boolean isMoving ()"}, "animateClose()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#close_E@", "@B_android#widget#SlidingDrawer#open_E@", "@B_android#widget#SlidingDrawer#animateOpen_E@", "@B_android#widget#SlidingDrawer#animateToggle_E@", "@B_android#widget#SlidingDrawer#toggle_E@"], "Permissions": [], "Description": "Closes the drawer with an animation.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void animateClose ()"}, "SlidingDrawer(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes defined in XML."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SlidingDrawer from a specified set of attributes defined in XML.", "history": "Added in API level 3", "FullName": "public SlidingDrawer (Context context, AttributeSet attrs)"}, "lock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#unlock_E@"], "Permissions": [], "Description": "Locks the SlidingDrawer so that touch events are ignores.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void lock ()"}, "setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener)": {"Returns": [], "Parameters": [["@B_android#widget#SlidingDrawer#OnDrawerOpenListener_E@", "SlidingDrawer.OnDrawerOpenListener: The listener to be notified when the drawer is opened."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that receives a notification when the drawer becomes open.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void setOnDrawerOpenListener (SlidingDrawer.OnDrawerOpenListener onDrawerOpenListener)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#toggle_E@", "@B_android#widget#SlidingDrawer#open_E@", "@B_android#widget#SlidingDrawer#animateClose_E@"], "Permissions": [], "Description": "Closes the drawer immediately.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void close ()"}, "getContent()": {"Returns": [["@B_android#view#View_E@", "The View reprenseting the content of the drawer, identified by the \"content\" id in XML."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the content of the drawer.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public View getContent ()"}, "animateOpen()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#close_E@", "@B_android#widget#SlidingDrawer#open_E@", "@B_android#widget#SlidingDrawer#animateClose_E@", "@B_android#widget#SlidingDrawer#animateToggle_E@", "@B_android#widget#SlidingDrawer#toggle_E@"], "Permissions": [], "Description": "Opens the drawer with an animation.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void animateOpen ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 3", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "unlock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SlidingDrawer#lock_E@"], "Permissions": [], "Description": "Unlocks the SlidingDrawer so that touch events are processed.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void unlock ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public boolean onInterceptTouchEvent (MotionEvent event)"}, "getHandle()": {"Returns": [["@B_android#view#View_E@", "The View reprenseting the handle of the drawer, identified by the \"handle\" id in XML."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the handle of the drawer.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public View getHandle ()"}, "SlidingDrawer(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes defined in XML."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SlidingDrawer from a specified set of attributes defined in XML.", "history": "Added in API level 21", "FullName": "public SlidingDrawer (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23 Deprecated in API level 17", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener)": {"Returns": [], "Parameters": [["@B_android#widget#SlidingDrawer#OnDrawerCloseListener_E@", "SlidingDrawer.OnDrawerCloseListener: The listener to be notified when the drawer is closed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that receives a notification when the drawer becomes close.", "history": "Added in API level 3 Deprecated in API level 17", "FullName": "public void setOnDrawerCloseListener (SlidingDrawer.OnDrawerCloseListener onDrawerCloseListener)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.widget.SlidingDrawer", "ClassDesc": "This class is not supported anymore. It is recommended you base your own implementation on the source code for the Android Open Source Project if you must use it in your application. SlidingDrawer hides content out of the screen and allows the user to drag a handle to bring the content on screen. SlidingDrawer can be used vertically or horizontally. A special widget composed of two children views: the handle, that the users drags, and the content, attached to the handle and dragged with it. SlidingDrawer should be used as an overlay inside layouts. This means SlidingDrawer should only be used inside of a FrameLayout or a RelativeLayout for instance. The size of the SlidingDrawer defines how much space the content will occupy once slid out so SlidingDrawer should usually use match_parent for both its dimensions. Inside an XML layout, SlidingDrawer must define the id of the handle and of the content:"}