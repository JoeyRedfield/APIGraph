{"Functions": {"onGetLayoutInflater(android.os.Bundle)": {"Returns": [["@B_android#view#LayoutInflater_E@", "The LayoutInflater used to inflate Views of this Fragment."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the LayoutInflater used to inflate Views of this Fragment. The default implementation will throw an exception if the Fragment is not attached.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public LayoutInflater onGetLayoutInflater (Bundle savedInstanceState)"}, "isInLayout()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag. This will always be true when fragments are created through the <fragment> tag, except in the case where an old fragment is restored from a previous state and it does not appear in the layout of the current state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isInLayout ()"}, "setHasOptionsMenu(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the fragment has menu items to contribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that this fragment would like to participate in populating the options menu by receiving a call to @B_android#app#Fragment#onCreateOptionsMenu_E@ and related methods.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setHasOptionsMenu (boolean hasMenu)"}, "getText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the CharSequence text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized, styled CharSequence from the application's package's default string table.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final CharSequence getText (int resId)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new device configuration. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#app#Fragment#onAttach_E@ and before @B_android#app#Fragment#onCreateView_E@, but is not called if the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@). Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#app#Fragment#onActivityCreated_E@. If your app's targetSdkVersion is @B_android#os#Build#VERSION_CODES#M_E@ or lower, child fragments being restored from the savedInstanceState are restored after onCreate returns. When targeting @B_android#os#Build#VERSION_CODES#N_E@ or above and running on an N or newer platform version they are restored by Fragment.onCreate. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCreate (Bundle savedInstanceState)"}, "isRemoving()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if this fragment is currently being removed from its activity. This is not whether its activity is finishing, but rather whether it is in the process of being removed from its activity.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isRemoving ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses can not override equals().", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean equals (Object o)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public String toString ()"}, "setSharedElementReturnTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements transferred out of the content Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred back during a pop of the back stack. This Transition acts in the leaving Fragment. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. If no value is set, the default will be to use the same value as @B_android#app#Fragment#setSharedElementEnterTransition_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setSharedElementReturnTransition (Transition transition)"}, "onOptionsItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "boolean Return false to allow normal menu processing to proceed, true to consume it here."]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#onCreateOptionsMenu_E@"], "Permissions": [], "Description": "This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Derived classes should call through to the base class for it to perform the default menu handling.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean onOptionsItemSelected (MenuItem item)"}, "Fragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor. @B_android#app#Fragment#setArguments_E@ and later retrieved by the Fragment with @B_android#app#Fragment#getArguments_E@. Applications should generally not implement a constructor. Prefer @B_android#app#Fragment#onAttach_E@ instead. It is the first place application code can run where the fragment is ready to be used - the point where the fragment is actually associated with its context. Some applications may also want to implement @B_android#app#Fragment#onInflate_E@ to retrieve attributes from a layout resource, although note this happens when the fragment is attached.", "history": "Added in API level 11", "FullName": "public Fragment ()"}, "getReturnTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views out of the Scene when the Fragment is preparing to close."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, entering Views will remain unaffected.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getReturnTransition ()"}, "requestPermissions(java.lang.String[],int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The requested permissions. Must me non-null and not empty. This value must never be null."], ["int", "int: Application specific request code to match with a result reported to @B_android#app#Fragment#onRequestPermissionsResult_E@. Should be >= 0."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#onRequestPermissionsResult_E@", "@B_android#content#Context#checkSelfPermission_E@"], "Permissions": [], "Description": "Requests permissions to be granted to this application. These permissions must be requested in your manifest, they should not be granted to your app, and they should have protection level @B_android#content#pm#PermissionInfo_E@, regardless whether they are declared by the platform or a third-party app. Normal permissions @B_android#content#pm#PermissionInfo#PROTECTION_NORMAL_E@ are granted at install time if requested in the manifest. Signature permissions @B_android#content#pm#PermissionInfo#PROTECTION_SIGNATURE_E@ are granted at install time if requested in the manifest and the signature of your app matches the signature of the app declaring the permissions. If your app does not have the requested permissions the user will be presented with UI for accepting them. After the user has accepted or rejected the requested permissions you will receive a callback on @B_android#app#Fragment#onRequestPermissionsResult_E@ reporting whether the permissions were granted or not. Note that requesting a permission does not guarantee it will be granted and your app should be able to run without having this permission. This method may start an activity allowing the user to choose which permissions to grant and which to reject. Hence, you should be prepared that your activity may be paused and resumed. Further, granting some permissions may require a restart of you application. In such a case, the system will recreate the activity stack before delivering the result to @B_android#app#Fragment#onRequestPermissionsResult_E@. When checking whether you have a permission you should use @B_android#content#Context#checkSelfPermission_E@. Calling this API for permissions already granted to your app would show UI to the user to decide whether the app can still hold these permissions. This can be useful if the way your app uses data guarded by the permissions changes significantly. You cannot request a permission if your activity sets @B_android#R#styleable#AndroidManifestActivity_noHistory_E@ to true because in this case the activity would not receive result callbacks including @B_android#app#Fragment#onRequestPermissionsResult_E@. A sample permissions request looks like this: private void showContacts() { if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) { requestPermissions(new String[]{Manifest.permission.READ_CONTACTS}, PERMISSIONS_REQUEST_READ_CONTACTS); } else { doShowContacts(); } } @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS && grantResults[0] == PackageManager.PERMISSION_GRANTED) { doShowContacts(); } }", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public final void requestPermissions (String[] permissions, int requestCode)"}, "onDestroyOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this fragment's option menu items are no longer being included in the overall options menu. Receiving this call means that the menu needed to be rebuilt, but this fragment's items were not included in the newly built menu (its @B_android#app#Fragment#onCreateOptionsMenu_E@ was not called).", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroyOptionsMenu ()"}, "onOptionsMenuClosed(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: The options menu as last shown or first initialized by onCreateOptionsMenu()."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onOptionsMenuClosed (Menu menu)"}, "isHidden()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment has been hidden. By default fragments are shown. You can find out about changes to this state with @B_android#app#Fragment#onHiddenChanged_E@. Note that the hidden state is orthogonal to other states -- that is, to be visible to the user, a fragment must be both started and not hidden.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isHidden ()"}, "setMenuVisibility(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The default is true, meaning the fragment's menu will be shown as usual. If false, the user will not see the menu."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a hint for whether this fragment's menu should be visible. This is useful if you know that a fragment has been placed in your view hierarchy so that the user can not currently seen it, so any menu items it has should also not be shown.", "history": "Added in API level 14 Deprecated in API level 28", "FullName": "public void setMenuVisibility (boolean menuVisible)"}, "onAttach(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Fragment#onAttach_E@ instead. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 23", "FullName": "public void onAttach (Activity activity)"}, "getTargetRequestCode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the target request code set by @B_android#app#Fragment#setTargetFragment_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final int getTargetRequestCode ()"}, "getTag()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the tag name of the fragment, if specified.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final String getTag ()"}, "onAttach(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is first attached to its context. @B_android#app#Fragment#onCreate_E@ will be called after this. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public void onAttach (Context context)"}, "onPictureInPictureModeChanged(boolean,android.content.res.Configuration)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in picture-in-picture mode."], ["@B_android#content#res#Configuration_E@", "Configuration: The new configuration of the activity with the state ."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the activity changes to and from picture-in-picture mode. This is generally tied to @B_android#app#Activity#onPictureInPictureModeChanged_E@ of the containing Activity. This method provides the same configuration that will be sent in the following @B_android#app#Fragment#onConfigurationChanged_E@ call after the activity enters this mode.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void onPictureInPictureModeChanged (boolean isInPictureInPictureMode, Configuration newConfig)"}, "instantiate(android.content.Context,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#app#Fragment_E@", "Returns a new fragment instance."]], "Parameters": [["@B_android#content#Context_E@", "Context: The calling context being used to instantiate the fragment. This is currently just used to get its ClassLoader."], ["@B_java#lang#String_E@", "String: The class name of the fragment to instantiate."], ["@B_android#os#Bundle_E@", "Bundle: Bundle of arguments to supply to the fragment, which it can retrieve with @B_android#app#Fragment#getArguments_E@. May be null. This value may be null."]], "Throws": [["@B_android#app#Fragment#InstantiationException_E@", "If there is a failure in instantiating the given fragment class. This is a runtime exception; it is not normally expected to happen."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new instance of a Fragment with the given class name. This is the same as calling its empty constructor.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public static Fragment instantiate (Context context, String fname, Bundle args)"}, "startActivityForResult(android.content.Intent,int,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"], ["int", "int no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startActivityForResult_E@ from the fragment's containing Activity.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "public void startActivityForResult (Intent intent, int requestCode, Bundle options)"}, "setSharedElementEnterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements transferred into the content Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred into the content Scene. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setSharedElementEnterTransition (Transition transition)"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return getActivity().getResources().", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final Resources getResources ()"}, "onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: The options menu in which you place your items."], ["@B_android#view#MenuInflater_E@", "MenuInflater no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#setHasOptionsMenu_E@", "@B_android#app#Fragment#onPrepareOptionsMenu_E@", "@B_android#app#Fragment#onOptionsItemSelected_E@"], "Permissions": [], "Description": "Initialize the contents of the Activity's standard options menu. You should place your menu items in to @B_android#app#Fragment#setHasOptionsMenu_E@. See @B_android#app#Activity#onCreateOptionsMenu_E@ for more information.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCreateOptionsMenu (Menu menu, MenuInflater inflater)"}, "setAllowEnterTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the enter transition when possible or false to wait until the exiting transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the exit transition and enter transition overlap or not. When true, the enter transition will start as soon as possible. When false, the enter transition will wait until the exit transition completes before starting.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setAllowEnterTransitionOverlap (boolean allow)"}, "getAllowReturnTransitionOverlap()": {"Returns": [["boolean", "true to start the reenter transition when possible or false to wait until the return transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the return transition and reenter transition overlap or not. When true, the reenter transition will start as soon as possible. When false, the reenter transition will wait until the return transition completes before starting.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public boolean getAllowReturnTransitionOverlap ()"}, "isVisible()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is currently visible to the user. This means it: (1) has been added, (2) has its view attached to the window, and (3) is not hidden.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isVisible ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer resumed. This is generally tied to @B_android#app#Activity#onPause_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onPause ()"}, "getSharedElementReturnTransition()": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to use for shared elements transferred out of the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Transition that will be used for shared elements transferred back during a pop of the back stack. This Transition acts in the leaving Fragment. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. If no value is set, the default will be to use the same value as @B_android#app#Fragment#setSharedElementEnterTransition_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getSharedElementReturnTransition ()"}, "onMultiWindowModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in multi-window mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Fragment#onMultiWindowModeChanged_E@ instead. Called when the Fragment's activity changes from fullscreen mode to multi-window mode and visa-versa. This is generally tied to @B_android#app#Activity#onMultiWindowModeChanged_E@ of the containing Activity.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public void onMultiWindowModeChanged (boolean isInMultiWindowMode)"}, "getEnterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views into the initial Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getEnterTransition ()"}, "isDetached()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment has been explicitly detached from the UI. That is, @B_android#app#FragmentTransaction#detach_E@ has been used on it.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public final boolean isDetached ()"}, "setArguments(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. This method cannot be called if the fragment is added to a FragmentManager and if @B_android#app#Fragment#isStateSaved_E@ would return true. Prior to @B_android#os#Build#VERSION_CODES#O_E@, this method may only be called if the fragment has not yet been added to a FragmentManager.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setArguments (Bundle args)"}, "getId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the identifier this fragment is known by. This is either the android:id value supplied in a layout or the container view ID supplied when adding the fragment.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final int getId ()"}, "getSharedElementEnterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to use for shared elements transferred into the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used for shared elements transferred into the content Scene. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getSharedElementEnterTransition ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStop ()"}, "getFragmentManager()": {"Returns": [["@B_android#app#FragmentManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the FragmentManager for interacting with fragments associated with this fragment's activity. Note that this will be non-null slightly before @B_android#app#Fragment#getActivity_E@, during the time from when the fragment is placed in a @B_android#app#FragmentTransaction_E@ until it is committed and attached to its activity. If this Fragment is a child of another Fragment, the FragmentManager returned here will be the parent's @B_android#app#Fragment#getChildFragmentManager_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final FragmentManager getFragmentManager ()"}, "isStateSaved()": {"Returns": [["boolean", "true if this fragment's state has already been saved by its host"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this fragment is added and its state has already been saved by its host. Any operations that would change saved state should not be performed if this method returns true, and some operations such as @B_android#app#Fragment#setArguments_E@ will fail.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public final boolean isStateSaved ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer in use. This is called after @B_android#app#Fragment#onStop_E@ and before @B_android#app#Fragment#onDetach_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroy ()"}, "setTargetFragment(android.app.Fragment, int)": {"Returns": [], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: The fragment that is the target of this one."], ["int", "int: Optional request code, for convenience if you are going to call back with @B_android#app#Fragment#onActivityResult_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optional target for this fragment. This may be used, for example, if this fragment is being started by another, and when done wants to give a result back to the first. The target set here is retained across instances via @B_android#app#FragmentManager#putFragment_E@.", "history": "added in API level 11", "FullName": "public void setTargetFragment (Fragment fragment, int requestCode)"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined, generally it will happen when all background process have been killed. That is, before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably, you should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ from @B_android#content#ComponentCallbacks2_E@ to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher, so you should only use this @B_android#content#ComponentCallbacks#onLowMemory_E@ method as a fallback for older versions, which can be treated the same as @B_android#content#ComponentCallbacks2#onTrimMemory_E@ with the @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@ level. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onLowMemory ()"}, "startActivity(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent to start."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startActivity_E@ from the fragment's containing Activity.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void startActivity (Intent intent)"}, "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)": {"Returns": [], "Parameters": [["@B_android#view#ContextMenu_E@", "ContextMenu: The context menu that is being built"], ["@B_android#view#View_E@", "View: The view for which the context menu is being built"], ["@B_android#view#ContextMenu#ContextMenuInfo_E@", "ContextMenu.ContextMenuInfo: Extra information about the item for which the context menu should be shown. This information will vary depending on the class of v."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a context menu for the view is about to be shown. Unlike @B_android#app#Fragment#onCreateOptionsMenu_E@, this will be called every time the context menu is about to be shown and should be populated for the view (or item inside the view for @B_android#widget#AdapterView_E@ subclasses, this can be found in the menuInfo)). Use @B_android#app#Fragment#onContextItemSelected_E@ to know when an item has been selected. The default implementation calls up to @B_android#app#Activity#onCreateContextMenu_E@, though you can not call this implementation if you don't want that behavior. It is not safe to hold onto the context menu after this method returns. Called when the context menu for this view is being built. It is not safe to hold onto the menu after this method returns.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCreateContextMenu (ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)"}, "onCreateAnimator(int,boolean,int)": {"Returns": [["@B_android#animation#Animator_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment loads an animation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public Animator onCreateAnimator (int transit, boolean enter, int nextAnim)"}, "onActivityResult(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the result from a previous call to @B_android#app#Fragment#startActivityForResult_E@. This follows the related Activity API as described there in @B_android#app#Activity#onActivityResult_E@.", "history": "added in API level 11", "FullName": "public void onActivityResult (int requestCode, int resultCode, Intent data)"}, "startActivity(android.content.Intent,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent to start."], ["@B_android#os#Bundle_E@", "Bundle: Additional options for how the Activity should be started. See @B_android#content#Context#startActivity_E@ Context.startActivity(Intent, Bundle)} for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startActivity_E@ from the fragment's containing Activity.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "public void startActivity (Intent intent, Bundle options)"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Fragments's state into the given stream.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "getView()": {"Returns": [["@B_android#view#View_E@", "The fragment's root view, or null if it has no layout."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the root view for the fragment's layout (the one returned by @B_android#app#Fragment#onCreateView_E@), if provided.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public View getView ()"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "The LayoutInflater used to inflate Views of this Fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the cached LayoutInflater used to inflate Views of this Fragment. If @B_android#app#Fragment#onGetLayoutInflater_E@ has not been called @B_android#app#Fragment#onGetLayoutInflater_E@ will be called with a null argument and that value will be cached. The cached LayoutInflater will be replaced immediately prior to @B_android#app#Fragment#onCreateView_E@ and cleared immediately after @B_android#app#Fragment#onDetach_E@.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public final LayoutInflater getLayoutInflater ()"}, "onTrimMemory(int)": {"Returns": [], "Parameters": [["int", "int: The context of the trim, giving a hint of the amount of trimming the application may like to perform. Value is @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_MODERATE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_BACKGROUND_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_UI_HIDDEN_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_CRITICAL_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_LOW_E@, or @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_MODERATE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level, since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point, you can use @B_android#app#ActivityManager#getMyMemoryState_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14 Deprecated in API level 28", "FullName": "public void onTrimMemory (int level)"}, "isResumed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is in the resumed state. This is true for the duration of @B_android#app#Fragment#onResume_E@ and @B_android#app#Fragment#onPause_E@ as well.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isResumed ()"}, "onPictureInPictureModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in picture-in-picture mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Fragment#onPictureInPictureModeChanged_E@ instead. Called by the system when the activity changes to and from picture-in-picture mode. This is generally tied to @B_android#app#Activity#onPictureInPictureModeChanged_E@ of the containing Activity.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public void onPictureInPictureModeChanged (boolean isInPictureInPictureMode)"}, "getHost()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the host object of this fragment. May return null if the fragment isn't currently being hosted.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public final Object getHost ()"}, "startPostponedEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startPostponedEnterTransition_E@"], "Permissions": [], "Description": "Begin postponed transitions after @B_android#app#Fragment#postponeEnterTransition_E@ was called. If postponeEnterTransition() was called, you must call startPostponedEnterTransition() or @B_android#app#FragmentManager#executePendingTransactions_E@ to complete the FragmentTransaction. If postponement was interrupted with @B_android#app#FragmentManager#executePendingTransactions_E@, before startPostponedEnterTransition(), animations may not run or may execute improperly.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void startPostponedEnterTransition ()"}, "onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Fragment#onInflate_E@ instead. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 12 Deprecated in API level 23", "FullName": "public void onInflate (Activity activity, AttributeSet attrs, Bundle savedInstanceState)"}, "shouldShowRequestPermissionRationale(java.lang.String)": {"Returns": [["boolean", "Whether you can show permission rationale UI."]], "Parameters": [["@B_java#lang#String_E@", "String: A permission your app wants to request. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Context#checkSelfPermission_E@", "@B_android#app#Fragment#requestPermissions_E@", "@B_android#app#Fragment#onRequestPermissionsResult_E@"], "Permissions": [], "Description": "Gets whether you should show UI with rationale for requesting a permission. You should do this only if you do not have the permission and the context in which the permission is requested does not clearly communicate to the user what would be the benefit from granting this permission. For example, if you write a camera app, requesting the camera permission would be expected by the user and no rationale for why it is requested is needed. If however, the app needs location for tagging photos then a non-tech savvy user may wonder how location is related to taking photos. In this case you may choose to show UI with rationale of requesting this permission.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public boolean shouldShowRequestPermissionRationale (String permission)"}, "onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that is inflating this fragment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes at the tag where the fragment is being created."], ["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is being created as part of a view layout inflation, typically from setting the content view of an activity. This may be called immediately after the fragment is created from a", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public void onInflate (Context context, AttributeSet attrs, Bundle savedInstanceState)"}, "getUserVisibleHint()": {"Returns": [["boolean", "The current value of the user-visible hint on this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#setUserVisibleHint_E@"], "Permissions": [], "Description": "", "history": "Added in API level 15 Deprecated in API level 28", "FullName": "public boolean getUserVisibleHint ()"}, "onPrepareOptionsMenu(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: The options menu as last shown or first initialized by onCreateOptionsMenu()."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#setHasOptionsMenu_E@", "@B_android#app#Fragment#onCreateOptionsMenu_E@"], "Permissions": [], "Description": "Prepare the Screen's standard options menu to be displayed. This is called right before the menu is shown, every time it is shown. You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents. See @B_android#app#Activity#onPrepareOptionsMenu_E@ for more information.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onPrepareOptionsMenu (Menu menu)"}, "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {"Returns": [["@B_android#view#View_E@", "Return the View for the fragment's UI, or null."]], "Parameters": [["@B_android#view#LayoutInflater_E@", "LayoutInflater: The LayoutInflater object that can be used to inflate any views in the fragment,"], ["@B_android#view#ViewGroup_E@", "ViewGroup: If non-null, this is the parent view that the fragment's UI should be attached to. The fragment should not add the view itself, but this can be used to generate the LayoutParams of the view. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: If non-null, this fragment is being re-constructed from a previous saved state as given here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to have the fragment instantiate its user interface view. This is optional, and non-graphical fragments can return null (which is the default implementation). This will be called between @B_android#app#Fragment#onCreate_E@ and @B_android#app#Fragment#onActivityCreated_E@. If you return a View from here, you will later be called in @B_android#app#Fragment#onDestroyView_E@ when the view is being released.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)"}, "requestPermissions(java.lang.String[], int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The requested permissions. Must me non-null and not empty."], ["int", "int: Application specific request code to match with a result reported to @B_android#app#Fragment#onRequestPermissionsResult_E@. Should be >= 0."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#onRequestPermissionsResult_E@", "@B_android#content#Context#checkSelfPermission_E@"], "Permissions": [], "Description": "Requests permissions to be granted to this application. These permissions must be requested in your manifest, they should not be granted to your app, and they should have protection level @B_android#content#pm#PermissionInfo_E@, regardless whether they are declared by the platform or a third-party app. Normal permissions @B_android#content#pm#PermissionInfo#PROTECTION_NORMAL_E@ are granted at install time if requested in the manifest. Signature permissions @B_android#content#pm#PermissionInfo#PROTECTION_SIGNATURE_E@ are granted at install time if requested in the manifest and the signature of your app matches the signature of the app declaring the permissions. If your app does not have the requested permissions the user will be presented with UI for accepting them. After the user has accepted or rejected the requested permissions you will receive a callback on @B_android#app#Fragment#onRequestPermissionsResult_E@ reporting whether the permissions were granted or not. Note that requesting a permission does not guarantee it will be granted and your app should be able to run without having this permission. This method may start an activity allowing the user to choose which permissions to grant and which to reject. Hence, you should be prepared that your activity may be paused and resumed. Further, granting some permissions may require a restart of you application. In such a case, the system will recreate the activity stack before delivering the result to @B_android#app#Fragment#onRequestPermissionsResult_E@. When checking whether you have a permission you should use @B_android#content#Context#checkSelfPermission_E@. Calling this API for permissions already granted to your app would show UI to the user to decide whether the app can still hold these permissions. This can be useful if the way your app uses data guarded by the permissions changes significantly. You cannot request a permission if your activity sets @B_android#R#styleable#AndroidManifestActivity_noHistory_E@ to true because in this case the activity would not receive result callbacks including @B_android#app#Fragment#onRequestPermissionsResult_E@. A sample permissions request looks like this: private void showContacts() { if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) { requestPermissions(new String[]{Manifest.permission.READ_CONTACTS}, PERMISSIONS_REQUEST_READ_CONTACTS); } else { doShowContacts(); } } @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS && grantResults[0] == PackageManager.PERMISSION_GRANTED) { doShowContacts(); } }", "history": "added in API level 23", "FullName": "public final void requestPermissions (String[] permissions, int requestCode)"}, "startActivityForResult(android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startActivityForResult_E@ from the fragment's containing Activity.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void startActivityForResult (Intent intent, int requestCode)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#content#Context_E@ this fragment is currently associated with.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public Context getContext ()"}, "onContextItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "boolean Return false to allow normal context menu processing to proceed, true to consume it here."]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: The context menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever an item in a context menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Use @B_android#view#MenuItem#getMenuInfo_E@ to get extra information set by the View that added this menu item. Derived classes should call through to the base class for it to perform the default menu handling.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean onContextItemSelected (MenuItem item)"}, "onInflate(android.util.AttributeSet,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Fragment#onInflate_E@ instead. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 15", "FullName": "public void onInflate (AttributeSet attrs, Bundle savedInstanceState)"}, "onDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer attached to its activity. This is called after @B_android#app#Fragment#onDestroy_E@, except in the cases where the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@), in which case it is called after @B_android#app#Fragment#onStop_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDetach ()"}, "setInitialSavedState(android.app.Fragment.SavedState)": {"Returns": [], "Parameters": [["@B_android#app#Fragment#SavedState_E@", "Fragment.SavedState: The state the fragment should be restored from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by @B_android#app#FragmentManager#saveFragmentInstanceState_E@.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public void setInitialSavedState (Fragment.SavedState state)"}, "onHiddenChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the fragment is now hidden, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the hidden state (as returned by @B_android#app#Fragment#isHidden_E@ of the fragment has changed. Fragments start out not hidden; this will be called whenever the fragment changes state from that.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onHiddenChanged (boolean hidden)"}, "onActivityResult(int,int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the result from a previous call to @B_android#app#Fragment#startActivityForResult_E@. This follows the related Activity API as described there in @B_android#app#Activity#onActivityResult_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onActivityResult (int requestCode, int resultCode, Intent data)"}, "setUserVisibleHint(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this fragment's UI is currently visible to the user (default), false if it is not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a hint to the system about whether this fragment's UI is currently visible to the user. This hint defaults to true and is persistent across fragment instance state save and restore. An app may set this to false to indicate that the fragment's UI is scrolled out of visibility or is otherwise not directly visible to the user. This may be used by the system to prioritize operations such as fragment lifecycle updates or loader ordering behavior. setUserVisibleHint to bring a fragment up to the started state before its FragmentTransaction had been committed. As some apps relied on this behavior, it is preserved for apps that declare a targetSdkVersion of 23 or lower.", "history": "Added in API level 15 Deprecated in API level 28", "FullName": "public void setUserVisibleHint (boolean isVisibleToUser)"}, "setExitSharedElementCallback(android.app.SharedElementCallback)": {"Returns": [], "Parameters": [["@B_android#app#SharedElementCallback_E@", "SharedElementCallback: Used to manipulate the shared element transitions on this Fragment when added as a pop from the back stack."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When custom transitions are used with Fragments, the exit transition callback is called when this Fragment is attached or detached when popping the back stack.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setExitSharedElementCallback (SharedElementCallback callback)"}, "getTargetFragment()": {"Returns": [["@B_android#app#Fragment_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the target fragment set by @B_android#app#Fragment#setTargetFragment_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final Fragment getTargetFragment ()"}, "setAllowReturnTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the reenter transition when possible or false to wait until the return transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the return transition and reenter transition overlap or not. When true, the reenter transition will start as soon as possible. When false, the reenter transition will wait until the return transition completes before starting.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setAllowReturnTransitionOverlap (boolean allow)"}, "getParentFragment()": {"Returns": [["@B_android#app#Fragment_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent Fragment containing this Fragment. If this Fragment is attached directly to an Activity, returns null.", "history": "Added in API level 17 Deprecated in API level 28", "FullName": "public final Fragment getParentFragment ()"}, "onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#app#Fragment#onCreateView_E@ and before @B_android#app#Fragment#onViewStateRestored_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onActivityCreated (Bundle savedInstanceState)"}, "onCreateAnimator(int, boolean, int)": {"Returns": [["@B_android#animation#Animator_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment loads an animation.", "history": "added in API level 11", "FullName": "public Animator onCreateAnimator (int transit, boolean enter, int nextAnim)"}, "setReenterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views into the scene when reentering from a previously-started Activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views in to the scene when returning due to popping a back stack. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. If nothing is set, the default will be to use the same transition as @B_android#app#Fragment#setExitTransition_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setReenterTransition (Transition transition)"}, "setEnterSharedElementCallback(android.app.SharedElementCallback)": {"Returns": [], "Parameters": [["@B_android#app#SharedElementCallback_E@", "SharedElementCallback: Used to manipulate the shared element transitions on this Fragment when added not as a pop from the back stack."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When custom transitions are used with Fragments, the enter transition callback is called when this Fragment is attached or detached when not popping the back stack.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setEnterSharedElementCallback (SharedElementCallback callback)"}, "instantiate(android.content.Context,java.lang.String)": {"Returns": [["@B_android#app#Fragment_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#Fragment#instantiate_E@ but with a null argument Bundle.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public static Fragment instantiate (Context context, String fname)"}, "getChildFragmentManager()": {"Returns": [["@B_android#app#FragmentManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a private FragmentManager for placing and managing Fragments inside of this Fragment.", "history": "Added in API level 17 Deprecated in API level 28", "FullName": "public final FragmentManager getChildFragmentManager ()"}, "startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#IntentSender_E@", "IntentSender no parameter comment"], ["int", "int no parameter comment"], ["@B_android#content#Intent_E@", "Intent: This value may be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [["@B_android#content#IntentSender#SendIntentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startIntentSenderForResult_E@ from the fragment's containing Activity.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public void startIntentSenderForResult (IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"}, "getString(int,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the format string"], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final String getString (int resId, Object... formatArgs)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses can not override hashCode().", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final int hashCode ()"}, "onMultiWindowModeChanged(boolean,android.content.res.Configuration)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in multi-window mode."], ["@B_android#content#res#Configuration_E@", "Configuration: The new configuration of the activity with the state ."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment's activity changes from fullscreen mode to multi-window mode and visa-versa. This is generally tied to @B_android#app#Activity#onMultiWindowModeChanged_E@ of the containing Activity. This method provides the same configuration that will be sent in the following @B_android#app#Fragment#onConfigurationChanged_E@ call after the activity enters this mode.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void onMultiWindowModeChanged (boolean isInMultiWindowMode, Configuration newConfig)"}, "getRetainInstance()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean getRetainInstance ()"}, "registerForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that should show a context menu."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#unregisterForContextMenu_E@"], "Permissions": [], "Description": "Registers a context menu to be shown for the given view (multiple views can show the context menu). This method will set the @B_android#view#View#OnCreateContextMenuListener_E@ on the view to this fragment, so @B_android#app#Fragment#onCreateContextMenu_E@ will be called when it is time to show the context menu.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void registerForContextMenu (View view)"}, "getLoaderManager()": {"Returns": [["@B_android#app#LoaderManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use https:##developer#android#com@B_android#support#v4#app#Fragment#getLoaderManager_E@ Return the LoaderManager for this fragment, creating it if needed.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public LoaderManager getLoaderManager ()"}, "setReturnTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views out of the Scene when the Fragment is preparing to close."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, entering Views will remain unaffected. If nothing is set, the default will be to use the same value as set in @B_android#app#Fragment#setEnterTransition_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setReturnTransition (Transition transition)"}, "getAllowEnterTransitionOverlap()": {"Returns": [["boolean", "true when the enter transition should start as soon as possible or false to when it should wait until the exiting transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the exit transition and enter transition overlap or not. When true, the enter transition will start as soon as possible. When false, the enter transition will wait until the exit transition completes before starting.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public boolean getAllowEnterTransitionOverlap ()"}, "onViewStateRestored(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when all saved state has been restored into the view hierarchy of the fragment. This can be used to do initialization based on saved state that you are letting the view hierarchy track itself, such as whether check box widgets are currently checked. This is called after @B_android#app#Fragment#onActivityCreated_E@ and before @B_android#app#Fragment#onStart_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 17 Deprecated in API level 28", "FullName": "public void onViewStateRestored (Bundle savedInstanceState)"}, "onRequestPermissionsResult(int,java.lang.String[],int[])": {"Returns": [], "Parameters": [["int", "int: The request code passed in @B_android#app#Fragment#requestPermissions_E@."], ["@B_java#lang#String_E@", "String: The requested permissions. Never null. This value must never be null."], ["int[]", "int: The grant results for the corresponding permissions which is either @B_android#content#pm#PackageManager#PERMISSION_GRANTED_E@ or @B_android#content#pm#PackageManager#PERMISSION_DENIED_E@. Never null. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#requestPermissions_E@"], "Permissions": [], "Description": "Callback for the result from requesting permissions. This method is invoked for every call on @B_android#app#Fragment#requestPermissions_E@.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public void onRequestPermissionsResult (int requestCode, String[] permissions, int[] grantResults)"}, "onViewCreated(android.view.View,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View returned by @B_android#app#Fragment#onCreateView_E@."], ["@B_android#os#Bundle_E@", "Bundle: If non-null, this fragment is being re-constructed from a previous saved state as given here. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called immediately after @B_android#app#Fragment#onCreateView_E@ has returned, but before any saved state has been restored in to the view. This gives subclasses a chance to initialize themselves once they know their view hierarchy has been completely created. The fragment's view hierarchy is not however attached to its parent at this point.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public void onViewCreated (View view, Bundle savedInstanceState)"}, "postponeEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#postponeEnterTransition_E@", "@B_android#app#FragmentTransaction#setReorderingAllowed_E@"], "Permissions": [], "Description": "Postpone the entering Fragment transition until @B_android#app#Fragment#startPostponedEnterTransition_E@ or @B_android#app#FragmentManager#executePendingTransactions_E@ has been called. This method gives the Fragment the ability to delay Fragment animations until all data is loaded. Until then, the added, shown, and attached Fragments will be INVISIBLE and removed, hidden, and detached Fragments won't be have their Views removed. The transaction runs when all postponed added Fragments in the transaction have called @B_android#app#Fragment#startPostponedEnterTransition_E@. This method should be called before being added to the FragmentTransaction or in @B_android#app#Fragment#onCreate_E@, @B_android#app#Fragment#onAttach_E@, or @B_android#app#Fragment#onCreateView_E@}. @B_android#app#Fragment#startPostponedEnterTransition_E@ must be called to allow the Fragment to start the transitions. When a FragmentTransaction is started that may affect a postponed FragmentTransaction, based on which containers are in their operations, the postponed FragmentTransaction will have its start triggered. The early triggering may result in faulty or nonexistent animations in the postponed transaction. FragmentTransactions that operate only on independent containers will not interfere with each other's postponement. Calling postponeEnterTransition on Fragments with a null View will not postpone the transition. Likewise, postponement only works if FragmentTransaction optimizations are enabled.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void postponeEnterTransition ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#app#Fragment#onCreate_E@, @B_android#app#Fragment#onCreateView_E@, and @B_android#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onSaveInstanceState (Bundle outState)"}, "setRetainInstance(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). This can only be used with fragments not in the back stack. If set, the fragment lifecycle will be slightly different when an activity is recreated: @B_android#app#Fragment#onDestroy_E@ will not be called (but @B_android#app#Fragment#onDetach_E@ still will be, because the fragment is being detached from its current activity). @B_android#app#Fragment#onCreate_E@ will not be called since the fragment is not being re-created. @B_android#app#Fragment#onAttach_E@ and @B_android#app#Fragment#onActivityCreated_E@", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setRetainInstance (boolean retain)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized string from the application's package's default string table.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final String getString (int resId)"}, "getActivity()": {"Returns": [["@B_android#app#Activity_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Activity this fragment is currently associated with.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final Activity getActivity ()"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#app#Fragment#onStop_E@ and before @B_android#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroyView ()"}, "getReenterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views into the scene when reentering from a previously-started Activity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. If nothing is set, the default will be to use the same transition as @B_android#app#Fragment#setExitTransition_E@.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getReenterTransition ()"}, "setExitTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views out of the Scene when the Fragment is being closed not due to popping the back stack."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setExitTransition (Transition transition)"}, "isAdded()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is currently added to its activity.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final boolean isAdded ()"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is visible to the user and actively running. This is generally tied to @B_android#app#Activity#onResume_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onResume ()"}, "unregisterForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that should stop showing a context menu."]], "Throws": [], "SeeAlso": ["@B_android#app#Fragment#registerForContextMenu_E@"], "Permissions": [], "Description": "Prevents a context menu to be shown for the given view. This method will remove the @B_android#view#View#OnCreateContextMenuListener_E@ on the view.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void unregisterForContextMenu (View view)"}, "getArguments()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the arguments supplied to @B_android#app#Fragment#setArguments_E@, if any.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public final Bundle getArguments ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStart ()"}, "setTargetFragment(android.app.Fragment,int)": {"Returns": [], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: The fragment that is the target of this one."], ["int", "int: Optional request code, for convenience if you are going to call back with @B_android#app#Fragment#onActivityResult_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optional target for this fragment. This may be used, for example, if this fragment is being started by another, and when done wants to give a result back to the first. The target set here is retained across instances via @B_android#app#FragmentManager#putFragment_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setTargetFragment (Fragment fragment, int requestCode)"}, "getExitTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views out of the Scene when the Fragment is being closed not due to popping the back stack."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public Transition getExitTransition ()"}, "getString(int, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the format string"], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@.", "history": "added in API level 11", "FullName": "public final String getString (int resId, Object... formatArgs)"}, "onAttachFragment(android.app.Fragment)": {"Returns": [], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: child fragment being attached"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is attached as a child of this fragment. This is called after the attached fragment's onAttach and before the attached fragment's onCreate if the fragment has not yet had a previous call to onCreate.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public void onAttachFragment (Fragment childFragment)"}, "setEnterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views into the initial Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@. If transition is null, entering Views will remain unaffected.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void setEnterTransition (Transition transition)"}}, "Inheritance": [], "ClassName": "android.app.Fragment", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#Fragment_E@ for consistent behavior across all devices and access to A Fragment is a piece of an application's user interface or behavior that can be placed in an @B_android#app#Activity_E@. Interaction with fragments is done through @B_android#app#FragmentManager_E@, which can be obtained via @B_android#app#Activity#getFragmentManager_E@ and @B_android#app#Fragment#getFragmentManager_E@. The Fragment class can be used many ways to achieve a wide variety of results. In its core, it represents a particular operation or interface that is running within a larger @B_android#app#Activity_E@. A Fragment is closely tied to the Activity it is in, and can not be used apart from one. Though Fragment defines its own lifecycle, that lifecycle is dependent on its activity: if the activity is stopped, no fragments inside of it can be started; when the activity is destroyed, all fragments will be destroyed. All subclasses of Fragment must include a public no-argument constructor. The framework will often re-instantiate a fragment class when needed, in particular during state restore, and needs to be able to find this constructor to instantiate it. If the no-argument constructor is not available, a runtime exception will occur in some cases during state restore. Topics covered here: @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@, a version of the API at is also available for use on older platforms through https:##developer#android#com@B_android#support#v4#app#FragmentActivity_E@. See the blog post Though a Fragment's lifecycle is tied to its owning activity, it has its own wrinkle on the standard activity lifecycle. It includes basic activity lifecycle methods such as @B_android#app#Fragment#onResume_E@, but also important are methods related to interactions with the activity and UI generation. The core series of lifecycle methods that are called to bring a fragment up to resumed state (interacting with the user) are: As a fragment is no longer being used, it goes through a reverse series of callbacks: Fragments can be used as part of your application's layout, allowing you to better modularize your code and more easily adjust your user interface to the screen it is running on. As an example, we can look at a simple program consisting of a list of items, and display of the details of each item. An activity's layout XML can include <fragment> tags to embed fragment instances inside of the layout. For example, here is a simple layout that embeds one fragment: The layout is installed in the activity in the normal way: The titles fragment, showing a list of titles, is fairly simple, relying on @B_android#app#ListFragment_E@ for most of its work. Note the implementation of clicking an item: depending on the current activity's layout, it can either create and display a new fragment to show the details in-place (more about this later), or start a new activity to show the details. The details fragment showing the contents of a selected item just displays a string of text based on an index of a string array built in to the app: In this case when the user clicks on a title, there is no details container in the current activity, so the titles fragment's click code will launch a new activity to display the details fragment: However the screen may be large enough to show both the list of titles and details about the currently selected title. To use such a layout on a landscape screen, this alternative layout can be placed under layout-land: Note how the prior code will adjust to this alternative UI flow: the titles fragment will now embed the details fragment inside of this activity, and the details activity will finish itself if it is running in a configuration where the details can be shown in-place. When a configuration change causes the activity hosting these fragments to restart, its new instance may use a different layout that doesn't include the same fragments as the previous layout. In this case all of the previous fragments will still be instantiated and running in the new instance. However, any that are no longer associated with a <fragment> tag in the view hierarchy will not have their content view created and will return false from @B_android#app#Fragment#isInLayout_E@. (The code here also shows how you can determine if a fragment placed in a container is no longer running in a layout with that container and avoid creating its view hierarchy in that case.) The attributes of the <fragment> tag are used to control the LayoutParams provided when attaching the fragment's view to the parent container. They can also be parsed by the fragment in @B_android#app#Fragment#onInflate_E@ as parameters. The fragment being instantiated must have some kind of unique identifier so that it can be re-associated with a previous instance if the parent activity needs to be destroyed and recreated. This can be provided these ways: If nothing is explicitly supplied, the view ID of the container will be used. android:tag can be used in <fragment> to provide a specific tag name for the fragment. android:id can be used in <fragment> to provide a specific identifier for the fragment. The transaction in which fragments are modified can be placed on an internal back-stack of the owning activity. When the user presses back in the activity, any transactions on the back stack are popped off before the activity itself is finished. For example, consider this simple fragment that is instantiated with an integer argument and displays that in a TextView in its UI: A function that creates a new instance of the fragment, replacing whatever current fragment instance is being shown and pushing that change on to the back stack could be written as: After each call to this function, a new entry is on the stack, and pressing back will pop it to return the user to whatever previous state the activity UI was in."}