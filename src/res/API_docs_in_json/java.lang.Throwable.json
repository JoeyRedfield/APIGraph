{"Functions": {"Throwable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new throwable with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to @B_java#lang#Throwable#initCause_E@. The @B_java#lang#Throwable#fillInStackTrace_E@ method is called to initialize the stack trace data in the newly created throwable.", "history": "Added in API level 1", "FullName": "public Throwable ()"}, "Throwable(java.lang.String, java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message (which is saved for later retrieval by the @B_java#lang#Throwable#getMessage_E@ method)."], ["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new throwable with the specified detail message and cause. Note that the detail message associated with cause is The @B_java#lang#Throwable#fillInStackTrace_E@ method is called to initialize the stack trace data in the newly created throwable.", "history": "added in API level 1", "FullName": "public Throwable (String message, Throwable cause)"}, "addSuppressed(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the exception to be added to the list of suppressed exceptions"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if exception is this throwable; a throwable cannot suppress itself."], ["@B_java#lang#NullPointerException_E@", "if exception is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified exception to the exceptions that were suppressed in order to deliver this exception. This method is thread-safe and typically called (automatically and implicitly) by the try-with-resources statement. The suppression behavior is enabled unless disabled Note that when one exception try block of a try-with-resources statement and the compiler-generated finally block which closes the resource. In these situations, only one of the thrown exceptions can be propagated. In the try-with-resources statement, when there are two such exceptions, the exception originating from the try block is propagated and the exception from the finally block is added to the list of exceptions suppressed by the exception from the try block. As an exception unwinds the stack, it can accumulate multiple suppressed exceptions. An exception may have suppressed exceptions while also being caused by another exception. Whether or not an exception has a cause is semantically known at the time of its creation, unlike whether or not an exception will suppress other exceptions which is typically only determined after an exception is thrown. Note that programmer written code is also able to take advantage of calling this method in situations where there are multiple sibling exceptions and only one can be propagated.", "history": "Added in API level 19", "FullName": "public final void addSuppressed (Throwable exception)"}, "Throwable(java.lang.String,java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message (which is saved for later retrieval by the @B_java#lang#Throwable#getMessage_E@ method)."], ["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new throwable with the specified detail message and cause. Note that the detail message associated with cause is The @B_java#lang#Throwable#fillInStackTrace_E@ method is called to initialize the stack trace data in the newly created throwable.", "history": "Added in API level 1", "FullName": "public Throwable (String message, Throwable cause)"}, "initCause(java.lang.Throwable)": {"Returns": [["@B_java#lang#Throwable_E@", "a reference to this Throwable instance."]], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if cause is this throwable. (A throwable cannot be its own cause.)"], ["@B_java#lang#IllegalStateException_E@", "if this throwable was created with @B_java#lang#Throwable#Throwable_E@ or @B_java#lang#Throwable#Throwable_E@, or this method has already been called on this throwable."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the This method can be called at most once. It is generally called from within the constructor, or immediately after creating the throwable. If this throwable was created with @B_java#lang#Throwable#Throwable_E@ or @B_java#lang#Throwable#Throwable_E@, this method cannot be called even once. An example of using this method on a legacy throwable type without other support for setting the cause is:", "history": "Added in API level 1", "FullName": "public Throwable initCause (Throwable cause)"}, "Throwable(java.lang.String,java.lang.Throwable,boolean,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message."], ["@B_java#lang#Throwable_E@", "Throwable: the cause. (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"], ["boolean", "boolean: whether or not suppression is enabled or disabled"], ["boolean", "boolean: whether or not the stack trace should be writable"]], "Throws": [], "SeeAlso": ["@B_java#lang#OutOfMemoryError_E@", "@B_java#lang#NullPointerException_E@", "@B_java#lang#ArithmeticException_E@"], "Permissions": [], "Description": "Constructs a new throwable with the specified detail message, cause, @B_java#lang#Throwable#getSuppressed_E@ for this object will return a zero-length array and calls to @B_java#lang#Throwable#addSuppressed_E@ that would otherwise append an exception to the suppressed list will have no effect. If the writable stack trace is false, this constructor will not call @B_java#lang#Throwable#fillInStackTrace_E@, a null will be written to the stackTrace field, and subsequent calls to fillInStackTrace and @B_java#lang#Throwable#setStackTrace_E@ will not set the stack trace. If the writable stack trace is false, @B_java#lang#Throwable#getStackTrace_E@ will return a zero length array. Note that the other constructors of Throwable treat suppression as being enabled and the stack trace as being writable. Subclasses of Throwable should document any conditions under which suppression is disabled and document conditions under which the stack trace is not writable. Disabling of suppression should only occur in exceptional circumstances where special requirements exist, such as a virtual machine reusing exception objects under low-memory situations. Circumstances where a given exception object is repeatedly caught and rethrown, such as to implement control flow between two sub-systems, is another situation where immutable throwable objects would be appropriate.", "history": "Added in API level 19", "FullName": "protected Throwable (String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)"}, "setStackTrace(java.lang.StackTraceElement[])": {"Returns": [], "Parameters": [["@B_java#lang#StackTraceElement_E@", "StackTraceElement: the stack trace elements to be associated with this Throwable. The specified array is copied by this call; changes in the specified array after the method invocation returns will have no affect on this Throwable's stack trace."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if stackTrace is null or if any of the elements of stackTrace are null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the stack trace elements that will be returned by @B_java#lang#Throwable#getStackTrace_E@ and printed by @B_java#lang#Throwable#printStackTrace_E@ and related methods. This method, which is designed for use by RPC frameworks and other advanced systems, allows the client to override the default stack trace that is either generated by @B_java#lang#Throwable#fillInStackTrace_E@ when a throwable is constructed or deserialized when a throwable is read from a serialization stream. If the stack trace of this Throwable", "history": "Added in API level 1", "FullName": "public void setStackTrace (StackTraceElement[] stackTrace)"}, "Throwable(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new throwable with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for throwables that are little more than wrappers for other throwables (for example, @B_java#security#PrivilegedActionException_E@). The @B_java#lang#Throwable#fillInStackTrace_E@ method is called to initialize the stack trace data in the newly created throwable.", "history": "Added in API level 1", "FullName": "public Throwable (Throwable cause)"}, "Throwable(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message. The detail message is saved for later retrieval by the @B_java#lang#Throwable#getMessage_E@ method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new throwable with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to @B_java#lang#Throwable#initCause_E@. The @B_java#lang#Throwable#fillInStackTrace_E@ method is called to initialize the stack trace data in the newly created throwable.", "history": "Added in API level 1", "FullName": "public Throwable (String message)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this throwable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a short description of this throwable. The result is the concatenation of: the \": \" (a colon and a space) the result of invoking this object's @B_java#lang#Throwable#getLocalizedMessage_E@ method If getLocalizedMessage returns null, then just the class name is returned.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getSuppressed()": {"Returns": [["@B_java#lang#Throwable_E@", "an array containing all of the exceptions that were suppressed to deliver this exception."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception. If no exceptions were suppressed or", "history": "Added in API level 19", "FullName": "public final Throwable[] getSuppressed ()"}, "getStackTrace()": {"Returns": [["@B_java#lang#StackTraceElement_E@", "an array of stack trace elements representing the stack trace pertaining to this throwable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides programmatic access to the stack trace information printed by @B_java#lang#Throwable#printStackTrace_E@. Returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assuming the array's length is non-zero) represents the top of the stack, which is the last method invocation in the sequence. Typically, this is the point at which this throwable was created and thrown. The last element of the array (assuming the array's length is non-zero) represents the bottom of the stack, which is the first method invocation in the sequence. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by printStackTrace. Writes to the returned array do not affect future calls to this method.", "history": "Added in API level 1", "FullName": "public StackTraceElement[] getStackTrace ()"}, "fillInStackTrace()": {"Returns": [["@B_java#lang#Throwable_E@", "a reference to this Throwable instance."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Throwable#printStackTrace_E@"], "Permissions": [], "Description": "Fills in the execution stack trace. This method records within this Throwable object information about the current state of the stack frames for the current thread. If the stack trace of this Throwable", "history": "Added in API level 1", "FullName": "public Throwable fillInStackTrace ()"}, "printStackTrace()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints this throwable and its backtrace to the standard error stream. This method prints a stack trace for this Throwable object on the error output stream that is the value of the field System.err. The first line of output contains the result of the @B_java#lang#Throwable#toString_E@ method for this object. Remaining lines represent data previously recorded by the method @B_java#lang#Throwable#fillInStackTrace_E@. The format of this information depends on the implementation, but the following example may be regarded as typical: \"...\". These lines indicate that the remainder of the stack trace for this exception matches the indicated number of frames from the bottom of the stack trace of the exception that was caused by this exception (the \"enclosing\" exception). This shorthand can greatly reduce the length of the output in the common case where a wrapped exception is thrown from same method as the \"causative exception\" is caught. The above example was produced by running the program: try-with-resources statement). Any exceptions that were suppressed in order to deliver an exception are printed out beneath the stack trace. The format of this information depends on the implementation, but the following example may be regarded as typical: An exception can have both a cause and one or more suppressed exceptions:", "history": "Added in API level 1", "FullName": "public void printStackTrace ()"}, "getCause()": {"Returns": [["@B_java#lang#Throwable_E@", "the cause of this throwable or null if the cause is nonexistent or unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the cause of this throwable or null if the cause is nonexistent or unknown. (The cause is the throwable that caused this throwable to get thrown.) This implementation returns the cause that was supplied via one of the constructors requiring a Throwable, or that was set after creation with the @B_java#lang#Throwable#initCause_E@ method. While it is typically unnecessary to override this method, a subclass can override it to return a cause set by some other means. This is appropriate for a \"legacy chained throwable\" that predates the addition of chained exceptions to Throwable. Note that it is PrintStackTrace methods, all of which invoke the getCause method to determine the cause of a throwable.", "history": "Added in API level 1", "FullName": "public Throwable getCause ()"}, "getLocalizedMessage()": {"Returns": [["@B_java#lang#String_E@", "The localized description of this throwable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a localized description of this throwable. Subclasses may override this method in order to produce a locale-specific message. For subclasses that do not override this method, the default implementation returns the same result as getMessage().", "history": "Added in API level 1", "FullName": "public String getLocalizedMessage ()"}, "getMessage()": {"Returns": [["@B_java#lang#String_E@", "the detail message string of this Throwable instance (which may be null)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the detail message string of this throwable.", "history": "Added in API level 1", "FullName": "public String getMessage ()"}, "printStackTrace(java.io.PrintWriter)": {"Returns": [], "Parameters": [["@B_java#io#PrintWriter_E@", "PrintWriter: PrintWriter to use for output"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints this throwable and its backtrace to the specified print writer.", "history": "Added in API level 1", "FullName": "public void printStackTrace (PrintWriter s)"}, "printStackTrace(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: PrintStream to use for output"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints this throwable and its backtrace to the specified print stream.", "history": "Added in API level 1", "FullName": "public void printStackTrace (PrintStream s)"}}, "Inheritance": [], "ClassName": "java.lang.Throwable", "ClassDesc": "The Throwable class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement. Similarly, only this class or one of its subclasses can be the argument type in a catch clause. For the purposes of compile-time checking of exceptions, Throwable and any subclass of Throwable that is not also a subclass of either @B_java#lang#RuntimeException_E@ or @B_java#lang#Error_E@ are regarded as checked exceptions. Instances of two subclasses, @B_java#lang#Error_E@ and @B_java#lang#Exception_E@, are conventionally used to indicate that exceptional situations have occurred. Typically, these instances are freshly created in the context of the exceptional situation so as to include relevant information (such as stack trace data). A throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. Over time, a throwable can One reason that a throwable may have a cause is that the class that throws it is built atop a lower layered abstraction, and an operation on the upper layer fails due to a failure in the lower layer. It would be bad design to let the throwable thrown by the lower layer propagate outward, as it is generally unrelated to the abstraction provided by the upper layer. Further, doing so would tie the API of the upper layer to the details of its implementation, assuming the lower layer's exception was a checked exception. Throwing a \"wrapped exception\" (i.e., an exception containing a cause) allows the upper layer to communicate the details of the failure to its caller without incurring either of these shortcomings. It preserves the flexibility to change the implementation of the upper layer without changing its API (in particular, the set of exceptions thrown by its methods). A second reason that a throwable may have a cause is that the method that throws it must conform to a general-purpose interface that does not permit the method to throw the cause directly. For example, suppose a persistent collection conforms to the @B_java#util#Collection_E@ interface, and that its persistence is implemented atop java.io. Suppose the internals of the add method can throw an @B_java#io#IOException_E@. The implementation can communicate the details of the IOException to its caller while conforming to the Collection interface by wrapping the IOException in an appropriate unchecked exception. (The specification for the persistent collection should indicate that it is capable of throwing such exceptions.) A cause can be associated with a throwable in two ways: via a constructor that takes the cause as an argument, or via the @B_java#lang#Throwable#initCause_E@ method. New throwable classes that wish to allow causes to be associated with them should provide constructors that take a cause and delegate (perhaps indirectly) to one of the Throwable constructors that takes a cause. Because the initCause method is public, it allows a cause to be associated with any throwable, even a \"legacy throwable\" whose implementation predates the addition of the exception chaining mechanism to Throwable. By convention, class Throwable and its subclasses have two constructors, one that takes no arguments and one that takes a String argument that can be used to produce a detail message. Further, those subclasses that might likely have a cause associated with them should have two more constructors, one that takes a Throwable (the cause), and one that takes a String (the detail message) and a Throwable (the cause)."}