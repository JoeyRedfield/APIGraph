{"Functions": {"store(java.io.Writer,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: an output character stream writer."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#io#IOException_E@", "if writing this property list to the specified output stream throws an IOException."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."], ["@B_java#lang#NullPointerException_E@", "if writer is null."]], "SeeAlso": [], "Permissions": [], "Description": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the @B_java#util#Properties#load_E@ method. Properties from the defaults table of this Properties table (if any) are If the comments argument is not null, then an ASCII # character, the comments string, and a line separator are first written to the output stream. Thus, the comments can serve as an identifying comment. Any one of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed immediately by a line feed in comments is replaced by a line separator generated by the Writer and if the next character in comments is not character # or character ! then an ASCII # is written out after that line separator. Next, a comment line is always written, consisting of an ASCII # character, the current date and time (as if produced by the toString method of Date for the current time), and a line separator as generated by the Writer. Then every entry in this Properties table is written out, one per line. For each entry the key string is written, then an ASCII =, then the associated element string. For the key, all space characters are written with a preceding \\ character. For the element, leading space characters, but not embedded or trailing space characters, are written with a preceding \\ character. The key and element characters #, !, =, and : are written with a preceding backslash to ensure that they are properly loaded. After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.", "history": "Added in API level 9", "FullName": "public void store (Writer writer, String comments)"}, "stringPropertyNames()": {"Returns": [["@B_java#util#Set_E@", "a set of keys in this property list where the key and its corresponding value are strings, including the keys in the default property list."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Properties#defaults_E@"], "Permissions": [], "Description": "Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list. Properties whose key or value is not of type The returned set is not backed by the", "history": "Added in API level 9", "FullName": "public Set<String> stringPropertyNames ()"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value in this property list with the specified key value."]], "Parameters": [["@B_java#lang#String_E@", "String: the property key."]], "Throws": [], "SeeAlso": ["@B_java#util#Properties#setProperty_E@", "@B_java#util#Properties#defaults_E@"], "Permissions": [], "Description": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns null if the property is not found.", "history": "Added in API level 1", "FullName": "public String getProperty (String key)"}, "storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."], ["@B_java#lang#String_E@", "String: a description of the property list, or null if no comment is desired."], ["@B_java#lang#String_E@", "String: the name of a supported character encoding"]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#io#UnsupportedEncodingException_E@", "if the encoding is not supported by the implementation."], ["@B_java#lang#NullPointerException_E@", "if os is null, or if encoding is null."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."]], "SeeAlso": ["@B_java#util#Properties#loadFromXML_E@"], "Permissions": [], "Description": "Emits an XML document representing all of the properties contained in this table, using the specified encoding. The XML document will have the following DOCTYPE declaration: If the specified comment is null then no comment will be stored in the document. An implementation is required to support writing of XML documents that use the \"UTF-8\" or \"UTF-16\" encoding. An implementation may support additional encodings. The specified stream remains open after this method returns.", "history": "Added in API level 1", "FullName": "public void storeToXML (OutputStream os, String comment, String encoding)"}, "list(java.io.PrintWriter)": {"Returns": [], "Parameters": [["@B_java#io#PrintWriter_E@", "PrintWriter: an output stream."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if any key in this property list is not a string."]], "SeeAlso": [], "Permissions": [], "Description": "Prints this property list out to the specified output stream. This method is useful for debugging.", "history": "Added in API level 1", "FullName": "public void list (PrintWriter out)"}, "setProperty(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the previous value of the specified key in this property list, or null if it did not have one."]], "Parameters": [["@B_java#lang#String_E@", "String: the key to be placed into this property list."], ["@B_java#lang#String_E@", "String: the value corresponding to key."]], "Throws": [], "SeeAlso": ["@B_java#util#Properties#getProperty_E@"], "Permissions": [], "Description": "Calls the put. Provided for parallelism with the put.", "history": "Added in API level 1", "FullName": "public Object setProperty (String key, String value)"}, "store(java.io.OutputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an output stream."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#io#IOException_E@", "if writing this property list to the specified output stream throws an IOException."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."], ["@B_java#lang#NullPointerException_E@", "if out is null."]], "SeeAlso": [], "Permissions": [], "Description": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the @B_java#util#Properties#load_E@ method. Properties from the defaults table of this Properties table (if any) are This method outputs the comments, properties keys and values in the same format as specified in @B_java#util#Properties#store_E@, with the following differences: The stream is written using the ISO 8859-1 character encoding. Characters not in Latin-1 in the comments are written as \\uCharacters less than \\u0020 and characters greater than \\u007E in property keys or values are written as \\u After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.", "history": "added in API level 1", "FullName": "public void store (OutputStream out, String comments)"}, "store(java.io.Writer, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: an output character stream writer."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#io#IOException_E@", "if writing this property list to the specified output stream throws an IOException."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."], ["@B_java#lang#NullPointerException_E@", "if writer is null."]], "SeeAlso": [], "Permissions": [], "Description": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the @B_java#util#Properties#load_E@ method. Properties from the defaults table of this Properties table (if any) are If the comments argument is not null, then an ASCII # character, the comments string, and a line separator are first written to the output stream. Thus, the comments can serve as an identifying comment. Any one of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed immediately by a line feed in comments is replaced by a line separator generated by the Writer and if the next character in comments is not character # or character ! then an ASCII # is written out after that line separator. Next, a comment line is always written, consisting of an ASCII # character, the current date and time (as if produced by the toString method of Date for the current time), and a line separator as generated by the Writer. Then every entry in this Properties table is written out, one per line. For each entry the key string is written, then an ASCII =, then the associated element string. For the key, all space characters are written with a preceding \\ character. For the element, leading space characters, but not embedded or trailing space characters, are written with a preceding \\ character. The key and element characters #, !, =, and : are written with a preceding backslash to ensure that they are properly loaded. After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.", "history": "added in API level 9", "FullName": "public void store (Writer writer, String comments)"}, "load(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurred when reading from the input stream."], ["@B_java#lang#IllegalArgumentException_E@", "if the input stream contains a malformed Unicode escape sequence."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a property list (key and element pairs) from the input byte stream. The input stream is in a simple line-oriented format as specified in @B_java#util#Properties#load_E@ and is assumed to use the ISO 8859-1 character encoding; that is each byte is one Latin1 character. Characters not in Latin1, and certain special characters, are represented in keys and elements using Unicode escapes as defined in section 3.3 of The specified stream remains open after this method returns.", "history": "Added in API level 1", "FullName": "public void load (InputStream inStream)"}, "store(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an output stream."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#io#IOException_E@", "if writing this property list to the specified output stream throws an IOException."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."], ["@B_java#lang#NullPointerException_E@", "if out is null."]], "SeeAlso": [], "Permissions": [], "Description": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the @B_java#util#Properties#load_E@ method. Properties from the defaults table of this Properties table (if any) are This method outputs the comments, properties keys and values in the same format as specified in @B_java#util#Properties#store_E@, with the following differences: The stream is written using the ISO 8859-1 character encoding. Characters not in Latin-1 in the comments are written as \\uCharacters less than \\u0020 and characters greater than \\u007E in property keys or values are written as \\u After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.", "history": "Added in API level 1", "FullName": "public void store (OutputStream out, String comments)"}, "save(java.io.OutputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an output stream."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."]], "SeeAlso": [], "Permissions": [], "Description": "This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method. Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.", "history": "added in API level 1", "FullName": "public void save (OutputStream out, String comments)"}, "save(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an output stream."], ["@B_java#lang#String_E@", "String: a description of the property list."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."]], "SeeAlso": [], "Permissions": [], "Description": "This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method. Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void save (OutputStream out, String comments)"}, "list(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: an output stream."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if any key in this property list is not a string."]], "SeeAlso": [], "Permissions": [], "Description": "Prints this property list out to the specified output stream. This method is useful for debugging.", "history": "Added in API level 1", "FullName": "public void list (PrintStream out)"}, "getProperty(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value in this property list with the specified key value."]], "Parameters": [["@B_java#lang#String_E@", "String: the hashtable key."], ["@B_java#lang#String_E@", "String: a default value."]], "Throws": [], "SeeAlso": ["@B_java#util#Properties#setProperty_E@", "@B_java#util#Properties#defaults_E@"], "Permissions": [], "Description": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns the default value argument if the property is not found.", "history": "Added in API level 1", "FullName": "public String getProperty (String key, String defaultValue)"}, "loadFromXML(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which to read the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if reading from the specified input stream results in an IOException."], ["@B_java#io#UnsupportedEncodingException_E@", "if the document's encoding declaration can be read and it specifies an encoding that is not supported"], ["@B_java#util#InvalidPropertiesFormatException_E@", "Data on input stream does not constitute a valid XML document with the mandated document type."], ["@B_java#lang#NullPointerException_E@", "if in is null."]], "SeeAlso": ["@B_java#util#Properties#storeToXML_E@"], "Permissions": [], "Description": "Loads all of the properties represented by the XML document on the specified input stream into this properties table. The XML document must have the following DOCTYPE declaration: An implementation is required to read XML documents that use the \"UTF-8\" or \"UTF-16\" encoding. An implementation may support additional encodings. The specified stream is closed after this method returns.", "history": "Added in API level 1", "FullName": "public void loadFromXML (InputStream in)"}, "setProperty(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the previous value of the specified key in this property list, or null if it did not have one."]], "Parameters": [["@B_java#lang#String_E@", "String: the key to be placed into this property list."], ["@B_java#lang#String_E@", "String: the value corresponding to key."]], "Throws": [], "SeeAlso": ["@B_java#util#Properties#getProperty_E@"], "Permissions": [], "Description": "Calls the put. Provided for parallelism with the put.", "history": "added in API level 1", "FullName": "public Object setProperty (String key, String value)"}, "getProperty(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value in this property list with the specified key value."]], "Parameters": [["@B_java#lang#String_E@", "String: the hashtable key."], ["@B_java#lang#String_E@", "String: a default value."]], "Throws": [], "SeeAlso": ["@B_java#util#Properties#setProperty_E@", "@B_java#util#Properties#defaults_E@"], "Permissions": [], "Description": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns the default value argument if the property is not found.", "history": "added in API level 1", "FullName": "public String getProperty (String key, String defaultValue)"}, "storeToXML(java.io.OutputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."], ["@B_java#lang#String_E@", "String: a description of the property list, or null if no comment is desired."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#lang#NullPointerException_E@", "if os is null."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."]], "SeeAlso": ["@B_java#util#Properties#loadFromXML_E@"], "Permissions": [], "Description": "Emits an XML document representing all of the properties contained in this table. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public void storeToXML (OutputStream os, String comment)"}, "load(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: the input character stream."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurred when reading from the input stream."], ["@B_java#lang#IllegalArgumentException_E@", "if a malformed Unicode escape appears in the input."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format. Properties are processed in terms of lines. There are two kinds of line, \\n or \\r or \\r\\n) or by the end of the stream. A natural line may be either a blank line, a comment line, or hold all or some of a key-element pair. A logical line holds all the data of a key-element pair, which may be spread out across several adjacent natural lines by escaping the line terminator sequence with a backslash character \\. Note that a comment line cannot be extended in this manner; every natural line that is a comment must have its own comment indicator, as described below. Lines are read from input until the end of the stream is reached. A natural line that contains only white space characters is considered blank and is ignored. A comment line has an ASCII '#' or '!' as its first non-white space character; comment lines are also ignored and do not encode key-element information. In addition to line terminators, this format considers the characters space (' ', '\\u0020'), tab ('\\t', '\\u0009'), and form feed ('\\f', '\\u000C') to be white space. If a logical line is spread across several natural lines, the backslash escaping the line terminator sequence, the line terminator sequence, and any white space at the start of the following line have no affect on the key or element values. The remainder of the discussion of key and element parsing (when loading) will assume all the characters constituting the key and element appear on a single natural line after line continuation characters have been removed. Note that it is The key contains all of the characters in the line starting with the first non-white space character and up to, but not including, the first unescaped '=', ':', or white space character other than a line terminator. All of these key termination characters may be included in the key by escaping them with a preceding backslash character; for example, \\:\\= would be the two-character key \":=\". Line terminator characters can be included using \\r and \\n escape sequences. Any white space after the key is skipped; if the first non-white space character after the key is '=' or ':', then it is ignored and any white space characters after it are also skipped. All remaining characters on the line become part of the associated element string; if there are no remaining characters, the element is the empty string \"\". Once the raw character sequences constituting the key and element are identified, escape processing is performed as described above. As an example, each of the following three lines specifies the key \"Truth\" and the associated element value \"Beauty\": \"fruits\" and the associated element is: \\ so that a space will appear after each comma in the final result; the \\, line terminator, and leading white space on the continuation line are merely discarded and are As a third example, the line: \"cheeses\" and the associated element is the empty string \"\". Octal escapes are not recognized. The character sequence \\b does The method does not treat a backslash character, \\, before a non-valid escape character as an error; the backslash is silently dropped. For example, in a Java string the sequence \"\\z\" would cause a compile time error. In contrast, this method silently drops the backslash. Therefore, this method treats the two character sequence \"\\b\" as equivalent to the single character 'b'. Escapes are not necessary for single and double quotes; however, by the rule above, single and double quote characters preceded by a backslash still yield single and double quote characters, respectively. Only a single 'u' character is allowed in a Unicode escape sequence. The specified stream remains open after this method returns.", "history": "Added in API level 9", "FullName": "public void load (Reader reader)"}, "Properties(java.util.Properties)": {"Returns": [], "Parameters": [["@B_java#util#Properties_E@", "Properties: the defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty property list with the specified defaults.", "history": "Added in API level 1", "FullName": "public Properties (Properties defaults)"}, "storeToXML(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."], ["@B_java#lang#String_E@", "String: a description of the property list, or null if no comment is desired."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#lang#NullPointerException_E@", "if os is null."], ["@B_java#lang#ClassCastException_E@", "if this Properties object contains any keys or values that are not Strings."]], "SeeAlso": ["@B_java#util#Properties#loadFromXML_E@"], "Permissions": [], "Description": "Emits an XML document representing all of the properties contained in this table. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public void storeToXML (OutputStream os, String comment)"}, "propertyNames()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of all the keys in this property list, including the keys in the default property list."]], "Parameters": [], "Throws": [["@B_java#lang#ClassCastException_E@", "if any key in this property list is not a string."]], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#Properties#defaults_E@", "@B_java#util#Properties#stringPropertyNames_E@"], "Permissions": [], "Description": "Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.", "history": "Added in API level 1", "FullName": "public Enumeration<?> propertyNames ()"}, "Properties()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty property list with no default values.", "history": "Added in API level 1", "FullName": "public Properties ()"}}, "Inheritance": ["@B_java#util#Dictionary_E@", "@B_java#util#Hashtable_E@"], "ClassName": "java.util.Properties", "ClassDesc": "The Properties class represents a persistent set of properties. The Properties can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string. A property list can contain another property list as its \"defaults\"; this second property list is searched if the property key is not found in the original property list. Because Properties inherits from Hashtable, the put and putAll methods can be applied to a Properties object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not Strings. The setProperty method should be used instead. If the store or save method is called on a \"compromised\" Properties object that contains a non-String key or value, the call will fail. Similarly, the call to the propertyNames or list method will fail if it is called on a \"compromised\" Properties object that contains a non-String key. The @B_java#util#Properties#load_E@ @B_java#util#Properties#store_E@ methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The @B_java#util#Properties#load_E@ @B_java#util#Properties#store_E@ methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of The @B_java#util#Properties#loadFromXML_E@ and @B_java#util#Properties#storeToXML_E@ methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration: This class is thread-safe: multiple threads can share a single"}