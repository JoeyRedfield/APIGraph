{"Functions": {"hasUnsupportedCriticalExtension()": {"Returns": [["boolean", "true if a critical extension is found that is not supported, otherwise false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if there is a critical extension that is not supported.", "history": "Added in API level 1", "FullName": "public abstract boolean hasUnsupportedCriticalExtension ()"}, "getCriticalExtensionOIDs()": {"Returns": [["@B_java#util#Set_E@", "a Set (or an empty Set if none are marked critical) of the extension OID strings for extensions that are marked critical. If there are no extensions present at all, then this method returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface. Here is sample code to get a Set of critical extensions from an X509Certificate and print the OIDs:", "history": "Added in API level 1", "FullName": "public abstract Set<String> getCriticalExtensionOIDs ()"}, "getExtensionValue(java.lang.String)": {"Returns": [["byte[]", "the DER-encoded octet string of the extension value or null if it is not present."]], "Parameters": [["@B_java#lang#String_E@", "String: the Object Identifier value for the extension."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String. The oid string is represented by a set of nonnegative whole numbers separated by periods. For example:", "history": "Added in API level 1", "FullName": "public abstract byte[] getExtensionValue (String oid)"}, "getNonCriticalExtensionOIDs()": {"Returns": [["@B_java#util#Set_E@", "a Set (or an empty Set if none are marked non-critical) of the extension OID strings for extensions that are marked non-critical. If there are no extensions present at all, then this method returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface. Here is sample code to get a Set of non-critical extensions from an X509CRL revoked certificate entry and print the OIDs:", "history": "Added in API level 1", "FullName": "public abstract Set<String> getNonCriticalExtensionOIDs ()"}}, "Inheritance": [], "ClassName": "java.security.cert.X509Extension", "ClassDesc": "Interface for an X.509 extension. The extensions defined for X.509 v3 @B_java#security#cert#X509Certificate_E@ and v2 @B_java#security#cert#X509CRL_E@ (Certificate Revocation Lists) provide methods for associating additional attributes with users or public keys, for managing the certification hierarchy, and for managing CRL distribution. The X.509 extensions format also allows communities to define private extensions to carry information unique to those communities. Each extension in a certificate/CRL may be designated as critical or non-critical. A certificate/CRL-using system (an application validating a certificate/CRL) must reject the certificate/CRL if it encounters a critical extension it does not recognize. A non-critical extension may be ignored if it is not recognized. The ASN.1 definition for this is: getExtensionValue method returns the DER-encoded OCTET STRING of the extension value (i.e., the extnValue). This can then be handled by a Class that understands the extension."}