{"Functions": {"getInstance(java.lang.String)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton and the default FORMAT locale. This is a convenient override of getInstance(String skeleton, ULocale locale) with the value of locale as default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton)"}, "getTimeZone()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "A copy of the TimeZone associated with this date interval formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the TimeZone", "history": "Added in API level 24", "FullName": "public TimeZone getTimeZone ()"}, "getInstance(java.lang.String,android.icu.text.DateIntervalInfo)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_android#icu#text#DateIntervalInfo_E@", "DateIntervalInfo: the DateIntervalInfo object to be adopted."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton DateIntervalInfo, and the default FORMAT locale. This is a convenient override of getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf) with the locale value as default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, DateIntervalInfo dtitvinf)"}, "getInstance(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton and a given locale. In this factory method, the date interval pattern information is load from resource files. Users are encouraged to created date interval formatter this way and to use the pre-defined skeleton macros. There are pre-defined skeletons in DateFormat, such as MONTH_DAY, YEAR_MONTH_WEEKDAY_DAY etc. Those skeletons have pre-defined interval patterns in resource files. Users are encouraged to use them. For example: DateIntervalFormat.getInstance(DateFormat.MONTH_DAY, false, loc); The given Locale provides the interval patterns. For example, for en_GB, if skeleton is YEAR_ABBR_MONTH_WEEKDAY_DAY, which is \"yMMMEEEd\", the interval patterns defined in resource file to above skeleton are: \"EEE, d MMM, yyyy - EEE, d MMM, yyyy\" for year differs, \"EEE, d MMM - EEE, d MMM, yyyy\" for month differs, \"EEE, d - EEE, d MMM, yyyy\" for day differs,", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, ULocale locale)"}, "setDateIntervalInfo(android.icu.text.DateIntervalInfo)": {"Returns": [], "Parameters": [["@B_android#icu#text#DateIntervalInfo_E@", "DateIntervalInfo: the given interval patterns to copy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the date time interval patterns.", "history": "Added in API level 24", "FullName": "public void setDateIntervalInfo (DateIntervalInfo newItvPattern)"}, "getInstance(java.lang.String,android.icu.util.ULocale,android.icu.text.DateIntervalInfo)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given locale"], ["@B_android#icu#text#DateIntervalInfo_E@", "DateIntervalInfo: the DateIntervalInfo object to be adopted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton a DateIntervalInfo, and the given locale. In this factory method, user provides its own date interval pattern information, instead of using those pre-defined data in resource file. This factory method is for powerful users who want to provide their own interval patterns. There are pre-defined skeleton in DateFormat, such as MONTH_DAY, YEAR_MONTH_WEEKDAY_DAY etc. Those skeletons have pre-defined interval patterns in resource files. Users are encouraged to use them. For example: DateIntervalFormat.getInstance(DateFormat.MONTH_DAY, false, loc,itvinf); the DateIntervalInfo provides the interval patterns. User are encouraged to set default interval pattern in DateIntervalInfo as well, if they want to set other interval patterns ( instead of reading the interval patterns from resource files). When the corresponding interval pattern for a largest calendar different field is not found ( if user not set it ), interval format fallback to the default interval pattern. If user does not provide default interval pattern, it fallback to \"{date0} - {date1}\"", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, ULocale locale, DateIntervalInfo dtitvinf)"}, "getDateIntervalInfo()": {"Returns": [["@B_android#icu#text#DateIntervalInfo_E@", "a copy of the date time interval patterns associated with this date interval formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date time interval patterns.", "history": "Added in API level 24", "FullName": "public DateIntervalInfo getDateIntervalInfo ()"}, "format(android.icu.util.DateInterval,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "Reference to 'appendTo' parameter."]], "Parameters": [["@B_android#icu#util#DateInterval_E@", "DateInterval: DateInterval to be formatted."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: Output parameter to receive result. Result is appended to existing contents."], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field. There may be multiple instances of a given field type in an interval format; in this case the fieldPosition offsets refer to the first instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a DateInterval to produce a string.", "history": "Added in API level 24", "FullName": "public final StringBuffer format (DateInterval dtInterval, StringBuffer appendTo, FieldPosition fieldPosition)"}, "format(android.icu.util.Calendar,android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "Reference to 'appendTo' parameter."]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: calendar set to the from date in date interval to be formatted into date interval string"], ["@B_android#icu#util#Calendar_E@", "Calendar: calendar set to the to date in date interval to be formatted into date interval string"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: Output parameter to receive result. Result is appended to existing contents."], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field. There may be multiple instances of a given field type in an interval format; in this case the fieldPosition offsets refer to the first instance."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the two calendars are not equivalent."]], "SeeAlso": [], "Permissions": [], "Description": "Format 2 Calendars to produce a string.", "history": "Added in API level 24", "FullName": "public final StringBuffer format (Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, FieldPosition pos)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "Reference to 'appendTo' parameter."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format. Must be a DateInterval."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: Output parameter to receive result. Result is appended to existing contents."], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field. There may be multiple instances of a given field type in an interval format; in this case the fieldPosition offsets refer to the first instance."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the formatted object is not DateInterval object"]], "SeeAlso": [], "Permissions": [], "Description": "Format an object to produce a string. This method handles Formattable objects with a DateInterval type. If a the Formattable object type is not a DateInterval, IllegalArgumentException is thrown.", "history": "Added in API level 24", "FullName": "public final StringBuffer format (Object obj, StringBuffer appendTo, FieldPosition fieldPosition)"}, "getInstance(java.lang.String,java.util.Locale,android.icu.text.DateIntervalInfo)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_java#util#Locale_E@", "Locale: the given locale"], ["@B_android#icu#text#DateIntervalInfo_E@", "DateIntervalInfo: the DateIntervalInfo object to be adopted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton a DateIntervalInfo, and the given locale. This is a convenient override of getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf) Example code:", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, Locale locale, DateIntervalInfo dtitvinf)"}, "getInstance(java.lang.String, java.util.Locale)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_java#util#Locale_E@", "Locale: the given locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton and a given locale. This is a convenient override of getInstance(String skeleton, ULocale locale) Example code:", "history": "added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, Locale locale)"}, "setTimeZone(android.icu.util.TimeZone)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: The new TimeZone, will be cloned for use by this DateIntervalFormat."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the TimeZone for the calendar used by this DateIntervalFormat object.", "history": "Added in API level 24", "FullName": "public void setTimeZone (TimeZone zone)"}, "getDateFormat()": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a copy of the date formatter associated with this date interval formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the date formatter", "history": "Added in API level 24", "FullName": "public DateFormat getDateFormat ()"}, "getInstance(java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateIntervalFormat_E@", "a date time interval formatter."]], "Parameters": [["@B_java#lang#String_E@", "String: the skeleton on which interval format based."], ["@B_java#util#Locale_E@", "Locale: the given locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a DateIntervalFormat from skeleton and a given locale. This is a convenient override of getInstance(String skeleton, ULocale locale) Example code:", "history": "Added in API level 24", "FullName": "public static final DateIntervalFormat getInstance (String skeleton, Locale locale)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "A copy of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clone this Format object polymorphically.", "history": "Added in API level 24", "FullName": "public Object clone ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@"], "ClassName": "android.icu.text.DateIntervalFormat", "ClassDesc": "DateIntervalFormat is a class for formatting and parsing date intervals in a language-independent manner. Only formatting is supported. Parsing is not supported. Date interval means from one date to another date, for example, from \"Jan 11, 2008\" to \"Jan 18, 2008\". We introduced class DateInterval to represent it. DateInterval is a pair of UDate, which is the standard milliseconds since 24:00 GMT, Jan 1, 1970. DateIntervalFormat formats a DateInterval into text as compactly as possible. For example, the date interval format from \"Jan 11, 2008\" to \"Jan 18,. 2008\" is \"Jan 11-18, 2008\" for English. And it parses text into DateInterval, although initially, parsing is not supported. There is no structural information in date time patterns. For any punctuations and string literals inside a date time pattern, we do not know whether it is just a separator, or a prefix, or a suffix. Without such information, so, it is difficult to generate a sub-pattern (or super-pattern) by algorithm. So, formatting a DateInterval is pattern-driven. It is very similar to formatting in SimpleDateFormat. We introduce class DateIntervalInfo to save date interval patterns, similar to date time pattern in SimpleDateFormat. Logically, the interval patterns are mappings from (skeleton, the_largest_different_calendar_field) to (date_interval_pattern). A skeleton The calendar fields we support for interval formatting are: year, month, date, day-of-week, am-pm, hour, hour-of-day, minute, and second (though we do not currently have specific intervalFormat data for skeletons with seconds). Those calendar fields can be defined in the following order: year > month > date > hour (in day) > minute > second The largest different calendar fields between 2 calendars is the first different calendar field in above order. For example: the largest different calendar fields between \"Jan 10, 2007\" and \"Feb 20, 2008\" is year. For other calendar fields, the compact interval formatting is not supported. And the interval format will be fall back to fall-back patterns, which is mostly \"{date0} - {date1}\". There is a set of pre-defined static skeleton strings in DateFormat, There are pre-defined interval patterns for those pre-defined skeletons in locales' resource files. For example, for a skeleton YEAR_ABBR_MONTH_DAY, which is \"yMMMd\", in en_US, if the largest different calendar field between date1 and date2 is \"year\", the date interval pattern is \"MMM d, yyyy - MMM d, yyyy\", such as \"Jan 10, 2007 - Jan 10, 2008\". If the largest different calendar field between date1 and date2 is \"month\", the date interval pattern is \"MMM d - MMM d, yyyy\", such as \"Jan 10 - Feb 10, 2007\". If the largest different calendar field between date1 and date2 is \"day\", the date interval pattern is \"\"MMM d-d, yyyy\", such as \"Jan 10-20, 2007\". For date skeleton, the interval patterns when year, or month, or date is different are defined in resource files. For time skeleton, the interval patterns when am/pm, or hour, or minute is different are defined in resource files. If a skeleton is not found in a locale's DateIntervalInfo, which means the interval patterns for the skeleton is not defined in resource file, the interval pattern will falls back to the interval \"fallback\" pattern defined in resource file. If the interval \"fallback\" pattern is not defined, the default fall-back is \"{date0} - {data1}\". For the combination of date and time, The rule to genearte interval patterns are: If two dates are the same, the interval pattern is the single date pattern. For example, interval pattern from \"Jan 10, 2007\" to \"Jan 10, 2007\" is \"Jan 10, 2007\". Or if the presenting fields between 2 dates have the exact same values, the interval pattern is the single date pattern. For example, if user only requests year and month, the interval pattern from \"Jan 10, 2007\" to \"Jan 20, 2007\" is \"Jan 2007\". DateIntervalFormat needs the following information for correct formatting: time zone, calendar type, pattern, date format symbols, and date interval patterns. It can be instantiated in several ways: For the calendar field pattern letter, such as G, y, M, d, a, h, H, m, s etc. DateIntervalFormat uses the same syntax as that of DateTime format. Code Sample: general usage Code Sample: for powerful users who wants to use their own interval pattern"}