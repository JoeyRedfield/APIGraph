{"Functions": {"push(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pushes a key/value pair of data to the data layer. This is just a convenience method that calls push(DataLayer.mapOf(key, value)). A key with value event will cause rules to be evaluated and matching tags to be fired.", "history": "", "FullName": "public void push (String key, Object value)"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a human readable string representing the Data Layer object.", "history": "", "FullName": "public String toString ()"}, "listOf(java.lang.Object...)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility method that creates a list. For example, the following creates a list containing \"object1\" and \"object2\":", "history": "", "FullName": "public static List<Object> listOf (Object... objects)"}, "push(java.util.Map<java.lang.String, java.lang.Object>)": {"Returns": [], "Parameters": [["Map", "the update object to process"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Merges the given update object into the existing data model, calling any listeners with the update (after the merge occurs). If you want to represent a missing value (like an empty index in a List), use the OBJECT_NOT_PRESENT object. If another thread is executing a push, this call blocks until that thread is finished. This is normally a synchronous call. However, if, while the thread is executing the push, another push happens from the same thread, then that second push is asynchronous (the second push will return before changes have been made to the data layer). This second push from the same thread can occur, for example, if a data layer push is made in response to a tag firing. If the update contains the key event, rules will be evaluated and matching tags will fire.", "history": "", "FullName": "public void push (Map<String, Object> update)"}, "pushEvent(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pushes an event, along with an update map, to the data layer. This is just a convenience method that pushes a map containing a key event whose value is eventName along with the contents of update via push(Map).", "history": "", "FullName": "public void pushEvent (String eventName, Map<String, Object> update)"}, "get(java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the object in the model associated with the given key. If the key is not found, null is returned. The key can can have embedded periods. For example: a key of \"a.b.c\" returns a map with key \"c\" in a map with key \"b\" in a map with key \"a\" in the model.", "history": "", "FullName": "public Object get (String key)"}, "mapOf(java.lang.Object...)": {"Returns": [], "Parameters": [], "Throws": [["IllegalArgumentException", "if there are an odd number of parameters or a key is not a string"]], "SeeAlso": [], "Permissions": [], "Description": "Utility method that creates a map. The parameters should be pairs of key values. For example, the following creates a map mapping \"key1\" to \"value1\" and \"key2\" to \"value2\":", "history": "", "FullName": "public static Map<String, Object> mapOf (Object... objects)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.tagmanager.DataLayer", "ClassDesc": "The data layer is a map holding generic information about the application. It uses a standard set of keys so it can be read by any party that understands the specification. The data layer state is updated through its API. For example, an app might start with the following dataLayer: Pushes happen synchronously; after the push, changes have been reflected in the model. When an event is pushed to the data layer, rules for tags are evaluated and any tags matching this event will fire. For example, given a container with a tag whose firing rule is that \"event\" is equal to \"openScreen\", after this push:"}