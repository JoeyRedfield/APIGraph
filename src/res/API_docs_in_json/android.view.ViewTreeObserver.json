{"Functions": {"removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnWindowFocusChangeListener_E@", "ViewTreeObserver.OnWindowFocusChangeListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnWindowFocusChangeListener_E@"], "Permissions": [], "Description": "Remove a previously installed window focus change callback.", "history": "Added in API level 18", "FullName": "public void removeOnWindowFocusChangeListener (ViewTreeObserver.OnWindowFocusChangeListener victim)"}, "removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnPreDrawListener_E@", "ViewTreeObserver.OnPreDrawListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnPreDrawListener_E@"], "Permissions": [], "Description": "Remove a previously installed pre-draw callback", "history": "Added in API level 1", "FullName": "public void removeOnPreDrawListener (ViewTreeObserver.OnPreDrawListener victim)"}, "registerFrameCommitCallback(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The callback to invoke when the frame is committed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a frame commit callback. This callback will be invoked when the current rendering content has been rendered into a frame and submitted to the swap chain. The frame may not currently be visible on the display when this is invoked, but it has been submitted. This callback is useful in combination with @B_android#view#PixelCopy_E@ to capture the current rendered content of the UI reliably. Note: Only works with hardware rendering. Does nothing otherwise.", "history": "Added in API level 29", "FullName": "public void registerFrameCommitCallback (Runnable callback)"}, "addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer<java.util.List<android.graphics.Rect>>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: listener to add This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setSystemGestureExclusionRects_E@"], "Permissions": [], "Description": "Add a listener to be notified when the tree's transformed gesture exclusion rects change. This could be the result of an animation or other layout change, or a view calling @B_android#view#View#setSystemGestureExclusionRects_E@.", "history": "Added in API level 29", "FullName": "public void addOnSystemGestureExclusionRectsChangedListener (Consumer<List<Rect>> listener)"}, "addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnDrawListener_E@", "ViewTreeObserver.OnDrawListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the view tree is about to be drawn. @B_android#view#ViewTreeObserver#OnDrawListener#onDraw_E@.", "history": "Added in API level 16", "FullName": "public void addOnDrawListener (ViewTreeObserver.OnDrawListener listener)"}, "removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer<java.util.List<android.graphics.Rect>>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnSystemGestureExclusionRectsChangedListener_E@", "@B_android#view#View#setSystemGestureExclusionRects_E@"], "Permissions": [], "Description": "Unsubscribe the given listener from gesture exclusion rect changes.", "history": "Added in API level 29", "FullName": "public void removeOnSystemGestureExclusionRectsChangedListener (Consumer<List<Rect>> listener)"}, "dispatchOnGlobalLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies registered listeners that a global layout happened. This can be called manually if you are forcing a layout on a View or a hierarchy of Views that are not attached to a Window or in the GONE state.", "history": "Added in API level 1", "FullName": "public void dispatchOnGlobalLayout ()"}, "removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnTouchModeChangeListener_E@", "ViewTreeObserver.OnTouchModeChangeListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnTouchModeChangeListener_E@"], "Permissions": [], "Description": "Remove a previously installed touch mode change callback", "history": "Added in API level 1", "FullName": "public void removeOnTouchModeChangeListener (ViewTreeObserver.OnTouchModeChangeListener victim)"}, "addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnWindowFocusChangeListener_E@", "ViewTreeObserver.OnWindowFocusChangeListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the window focus state within the view tree changes.", "history": "Added in API level 18", "FullName": "public void addOnWindowFocusChangeListener (ViewTreeObserver.OnWindowFocusChangeListener listener)"}, "removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnWindowAttachListener_E@", "ViewTreeObserver.OnWindowAttachListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnWindowAttachListener_E@"], "Permissions": [], "Description": "Remove a previously installed window attach callback.", "history": "Added in API level 18", "FullName": "public void removeOnWindowAttachListener (ViewTreeObserver.OnWindowAttachListener victim)"}, "removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnDrawListener_E@", "ViewTreeObserver.OnDrawListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnDrawListener_E@"], "Permissions": [], "Description": "Remove a previously installed pre-draw callback. @B_android#view#ViewTreeObserver#OnDrawListener#onDraw_E@.", "history": "Added in API level 16", "FullName": "public void removeOnDrawListener (ViewTreeObserver.OnDrawListener victim)"}, "removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnScrollChangedListener_E@", "ViewTreeObserver.OnScrollChangedListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnScrollChangedListener_E@"], "Permissions": [], "Description": "Remove a previously installed scroll-changed callback", "history": "Added in API level 3", "FullName": "public void removeOnScrollChangedListener (ViewTreeObserver.OnScrollChangedListener victim)"}, "addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnScrollChangedListener_E@", "ViewTreeObserver.OnScrollChangedListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when a view has been scrolled.", "history": "Added in API level 3", "FullName": "public void addOnScrollChangedListener (ViewTreeObserver.OnScrollChangedListener listener)"}, "addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnGlobalFocusChangeListener_E@", "ViewTreeObserver.OnGlobalFocusChangeListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the focus state within the view tree changes.", "history": "Added in API level 1", "FullName": "public void addOnGlobalFocusChangeListener (ViewTreeObserver.OnGlobalFocusChangeListener listener)"}, "removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnGlobalLayoutListener_E@", "ViewTreeObserver.OnGlobalLayoutListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnGlobalLayoutListener_E@"], "Permissions": [], "Description": "Use #removeOnGlobalLayoutListener instead Remove a previously installed global layout callback", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void removeGlobalOnLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)"}, "dispatchOnDraw()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies registered listeners that the drawing pass is about to start.", "history": "Added in API level 16", "FullName": "public void dispatchOnDraw ()"}, "isAlive()": {"Returns": [["boolean", "True if this object is alive and be used, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this ViewTreeObserver is alive. When an observer is not alive, any call to a method (except this one) will throw an exception. If an application keeps a long-lived reference to this ViewTreeObserver, it should always check for the result of this method before calling any other method.", "history": "Added in API level 1", "FullName": "public boolean isAlive ()"}, "addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnWindowAttachListener_E@", "ViewTreeObserver.OnWindowAttachListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the view hierarchy is attached to a window.", "history": "Added in API level 18", "FullName": "public void addOnWindowAttachListener (ViewTreeObserver.OnWindowAttachListener listener)"}, "removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnGlobalFocusChangeListener_E@", "ViewTreeObserver.OnGlobalFocusChangeListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnGlobalFocusChangeListener_E@"], "Permissions": [], "Description": "Remove a previously installed focus change callback.", "history": "Added in API level 1", "FullName": "public void removeOnGlobalFocusChangeListener (ViewTreeObserver.OnGlobalFocusChangeListener victim)"}, "addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnGlobalLayoutListener_E@", "ViewTreeObserver.OnGlobalLayoutListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the global layout state or the visibility of views within the view tree changes", "history": "Added in API level 1", "FullName": "public void addOnGlobalLayoutListener (ViewTreeObserver.OnGlobalLayoutListener listener)"}, "removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnGlobalLayoutListener_E@", "ViewTreeObserver.OnGlobalLayoutListener: The callback to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": ["@B_android#view#ViewTreeObserver#addOnGlobalLayoutListener_E@"], "Permissions": [], "Description": "Remove a previously installed global layout callback", "history": "Added in API level 16", "FullName": "public void removeOnGlobalLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)"}, "addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnPreDrawListener_E@", "ViewTreeObserver.OnPreDrawListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the view tree is about to be drawn", "history": "Added in API level 1", "FullName": "public void addOnPreDrawListener (ViewTreeObserver.OnPreDrawListener listener)"}, "addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewTreeObserver#OnTouchModeChangeListener_E@", "ViewTreeObserver.OnTouchModeChangeListener: The callback to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#view#ViewTreeObserver#isAlive_E@ returns false"]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the invoked when the touch mode changes.", "history": "Added in API level 1", "FullName": "public void addOnTouchModeChangeListener (ViewTreeObserver.OnTouchModeChangeListener listener)"}, "unregisterFrameCommitCallback(java.lang.Runnable)": {"Returns": [["boolean", "Whether or not the callback was removed. If this returns true the callback will not be invoked. If false is returned then the callback was either never added or may already be pending execution and was unable to be removed"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The callback to remove This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to remove the given callback from the list of pending frame complete callbacks.", "history": "Added in API level 29", "FullName": "public boolean unregisterFrameCommitCallback (Runnable callback)"}, "dispatchOnPreDraw()": {"Returns": [["boolean", "True if the current draw should be canceled and resceduled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies registered listeners that the drawing pass is about to start. If a listener returns true, then the drawing pass is canceled and rescheduled. This can be called manually if you are forcing the drawing on a View or a hierarchy of Views that are not attached to a Window or in the GONE state.", "history": "Added in API level 1", "FullName": "public boolean dispatchOnPreDraw ()"}}, "Inheritance": [], "ClassName": "android.view.ViewTreeObserver", "ClassDesc": "A view tree observer is used to register listeners that can be notified of global changes in the view tree. Such global events include, but are not limited to, layout of the whole tree, beginning of the drawing pass, touch mode change.... A ViewTreeObserver should never be instantiated by applications as it is provided by the views hierarchy. Refer to @B_android#view#View#getViewTreeObserver_E@ for more information."}