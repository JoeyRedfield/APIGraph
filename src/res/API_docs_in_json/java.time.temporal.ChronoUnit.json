{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the name of this enum constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this enum constant, as contained in the declaration. This method may be overridden, though it typically isn't necessary or desirable. An enum type should override this method when a more \"programmer-friendly\" string form exists.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "isDateBased()": {"Returns": [["boolean", "true if a date unit, false if a time unit"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this unit is a date unit. All units from days to eras inclusive are date-based. Time-based units and FOREVER return false.", "history": "Added in API level 26", "FullName": "public boolean isDateBased ()"}, "isTimeBased()": {"Returns": [["boolean", "true if a time unit, false if a date unit"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this unit is a time unit. All units from nanos to half-days inclusive are time-based. Date-based units and FOREVER return false.", "history": "Added in API level 26", "FullName": "public boolean isTimeBased ()"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#temporal#ChronoUnit_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static ChronoUnit valueOf (String name)"}, "values()": {"Returns": [["@B_java#time#temporal#ChronoUnit_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static final ChronoUnit[] values ()"}, "between(java.time.temporal.Temporal,java.time.temporal.Temporal)": {"Returns": [["long", "the amount of time between temporal1Inclusive and temporal2Exclusive in terms of this unit; positive if temporal2Exclusive is later than temporal1Inclusive, negative if earlier"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the base temporal object, not null"], ["@B_java#time#temporal#Temporal_E@", "Temporal: the other temporal object, exclusive, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time between two temporal objects. This calculates the amount in terms of this unit. The start and end points are supplied as temporal objects and must be of compatible types. The implementation will convert the second type to be an instance of the first type before the calculating the amount. The result will be negative if the end is before the start. For example, the amount in hours between two temporal objects can be calculated using HOURS.between(startTime, endTime). The calculation returns a whole number, representing the number of complete units between the two temporals. For example, the amount in hours between the times 11:30 and 13:29 will only be one hour as it is one minute short of two hours. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#until_E@: For example, this method allows the number of days between two dates to be calculated: Implementations should perform any queries or calculations using the units available in @B_java#time#temporal#ChronoUnit_E@ or the fields available in @B_java#time#temporal#ChronoField_E@. If the unit is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal objects.", "history": "Added in API level 26", "FullName": "public long between (Temporal temporal1Inclusive, Temporal temporal2Exclusive)"}, "isDurationEstimated()": {"Returns": [["boolean", "true if the duration is estimated, false if accurate"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the duration of the unit is an estimate. All time units in this class are considered to be accurate, while all date units in this class are considered to be estimated. This definition ignores leap seconds, but considers that Days vary due to daylight saving time and months have different lengths.", "history": "Added in API level 26", "FullName": "public boolean isDurationEstimated ()"}, "getDuration()": {"Returns": [["@B_java#time#Duration_E@", "the estimated duration of this unit, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the estimated duration of this unit in the ISO calendar system. All of the units in this class have an estimated duration. Days vary due to daylight saving time, while months have different lengths.", "history": "Added in API level 26", "FullName": "public Duration getDuration ()"}, "addTo(R, long)": {"Returns": [["R", "the adjusted temporal object, not null"]], "Parameters": [["R", "R: the temporal object to adjust, not null"], ["long", "long: the amount of this unit to add, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the specified temporal object with the specified period added. The period added is a multiple of this unit. For example, this method could be used to add \"3 days\" to a date by calling this method on the instance representing \"days\", passing the date and the period \"3\". The period to be added may be negative, which is equivalent to subtraction. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#plus_E@: plus(TemporalUnit), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the units available in @B_java#time#temporal#ChronoUnit_E@ or the fields available in @B_java#time#temporal#ChronoField_E@. If the unit is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.", "history": "added in API level 26", "FullName": "public R addTo (R temporal, long amount)"}, "isSupportedBy(java.time.temporal.Temporal)": {"Returns": [["boolean", "true if the unit is supported"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to check, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this unit is supported by the specified temporal object. This checks that the implementing date-time can add/subtract this unit. This can be used to avoid throwing an exception. This default implementation derives the value using @B_java#time#temporal#Temporal#plus_E@.", "history": "Added in API level 26", "FullName": "public boolean isSupportedBy (Temporal temporal)"}, "addTo(R,long)": {"Returns": [["R", "the adjusted temporal object, not null"]], "Parameters": [["R", "R: the temporal object to adjust, not null"], ["long", "long: the amount of this unit to add, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the specified temporal object with the specified period added. The period added is a multiple of this unit. For example, this method could be used to add \"3 days\" to a date by calling this method on the instance representing \"days\", passing the date and the period \"3\". The period to be added may be negative, which is equivalent to subtraction. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#plus_E@: plus(TemporalUnit), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the units available in @B_java#time#temporal#ChronoUnit_E@ or the fields available in @B_java#time#temporal#ChronoField_E@. If the unit is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.", "history": "Added in API level 26", "FullName": "public R addTo (R temporal, long amount)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.time.temporal.ChronoUnit", "ClassDesc": "A standard set of date periods units. This set of units provide unit-based access to manipulate a date, time or date-time. The standard set of units can be extended by implementing @B_java#time#temporal#TemporalUnit_E@. These units are intended to be applicable in multiple calendar systems. For example, most non-ISO calendar systems define units of years, months and days, just with slightly different rules. The documentation of each unit explains how it operates."}