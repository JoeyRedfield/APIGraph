{"Functions": {"getOffsetBefore()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the offset before the transition, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the offset before the transition. This is the offset in use before the instant of the transition.", "history": "Added in API level 26", "FullName": "public ZoneOffset getOffsetBefore ()"}, "isGap()": {"Returns": [["boolean", "true if this transition is a gap, false if it is an overlap"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does this transition represent a gap in the local time-line. Gaps occur where there are local date-times that simply do not exist. An example would be when the offset changes from +01:00 to +02:00. This might be described as 'the clocks will move forward one hour tonight at 1am'.", "history": "Added in API level 26", "FullName": "public boolean isGap ()"}, "of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)": {"Returns": [["@B_java#time#zone#ZoneOffsetTransition_E@", "the transition, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the transition date-time at the transition, which never actually occurs, expressed local to the before offset, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset before the transition, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset at and after the transition, not null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if offsetBefore and offsetAfter are equal, or transition.getNano() returns non-zero value"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance defining a transition between two offsets. Applications should normally obtain an instance from @B_java#time#zone#ZoneRules_E@. This factory is only intended for use when creating @B_java#time#zone#ZoneRules_E@.", "history": "Added in API level 26", "FullName": "public static ZoneOffsetTransition of (LocalDateTime transition, ZoneOffset offsetBefore, ZoneOffset offsetAfter)"}, "getOffsetAfter()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the offset after the transition, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the offset after the transition. This is the offset in use on and after the instant of the transition.", "history": "Added in API level 26", "FullName": "public ZoneOffset getOffsetAfter ()"}, "getDuration()": {"Returns": [["@B_java#time#Duration_E@", "the duration of the transition, positive for gaps, negative for overlaps"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the duration of the transition. In most cases, the transition duration is one hour, however this is not always the case. The duration will be positive for a gap and negative for an overlap. Time-zones are second-based, so the nanosecond part of the duration will be zero.", "history": "Added in API level 26", "FullName": "public Duration getDuration ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string for debugging, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this object.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "isValidOffset(java.time.ZoneOffset)": {"Returns": [["boolean", "true if the offset is valid during the transition"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified offset is valid during this transition. This checks to see if the given offset will be valid at some point in the transition. A gap will always return false. An overlap will return true if the offset is either the before or after offset.", "history": "Added in API level 26", "FullName": "public boolean isValidOffset (ZoneOffset offset)"}, "toEpochSecond()": {"Returns": [["long", "the transition epoch second"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the transition instant as an epoch second.", "history": "Added in API level 26", "FullName": "public long toEpochSecond ()"}, "getDateTimeBefore()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the transition date-time expressed with the before offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local transition date-time, as would be expressed with the 'before' offset. This is the date-time where the discontinuity begins expressed with the 'before' offset. At this instant, the 'after' offset is actually used, therefore the combination of this date-time and the 'before' offset will never occur. The combination of the 'before' date-time and offset represents the same instant as the 'after' date-time and offset.", "history": "Added in API level 26", "FullName": "public LocalDateTime getDateTimeBefore ()"}, "getDateTimeAfter()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the transition date-time expressed with the after offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local transition date-time, as would be expressed with the 'after' offset. This is the first date-time after the discontinuity, when the new offset applies. The combination of the 'before' date-time and offset represents the same instant as the 'after' date-time and offset.", "history": "Added in API level 26", "FullName": "public LocalDateTime getDateTimeAfter ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the other object to compare to, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this object equals another. The entire state of the object is compared.", "history": "Added in API level 26", "FullName": "public boolean equals (Object other)"}, "compareTo(java.time.zone.ZoneOffsetTransition)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#zone#ZoneOffsetTransition_E@", "ZoneOffsetTransition: the transition to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this transition to another based on the transition instant. This compares the instants of each transition. The offsets are ignored, making this order inconsistent with equals.", "history": "Added in API level 26", "FullName": "public int compareTo (ZoneOffsetTransition transition)"}, "getInstant()": {"Returns": [["@B_java#time#Instant_E@", "the transition instant, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the transition instant. This is the instant of the discontinuity, which is defined as the first instant that the 'after' offset applies. The methods @B_java#time#zone#ZoneOffsetTransition#getInstant_E@, @B_java#time#zone#ZoneOffsetTransition#getDateTimeBefore_E@ and @B_java#time#zone#ZoneOffsetTransition#getDateTimeAfter_E@ all represent the same instant.", "history": "Added in API level 26", "FullName": "public Instant getInstant ()"}, "isOverlap()": {"Returns": [["boolean", "true if this transition is an overlap, false if it is a gap"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does this transition represent an overlap in the local time-line. Overlaps occur where there are local date-times that exist twice. An example would be when the offset changes from +02:00 to +01:00. This might be described as 'the clocks will move back one hour tonight at 2am'.", "history": "Added in API level 26", "FullName": "public boolean isOverlap ()"}, "hashCode()": {"Returns": [["int", "the hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a suitable hash code.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.zone.ZoneOffsetTransition", "ClassDesc": "A transition between two offsets caused by a discontinuity in the local time-line. A transition between two offsets is normally the result of a daylight savings cutover. The discontinuity is normally a gap in spring and an overlap in autumn. ZoneOffsetTransition models the transition between the two offsets. Gaps occur where there are local date-times that simply do not exist. An example would be when the offset changes from +03:00 to +04:00. This might be described as 'the clocks will move forward one hour tonight at 1am'. Overlaps occur where there are local date-times that exist twice. An example would be when the offset changes from +04:00 to +03:00. This might be described as 'the clocks will move back one hour tonight at 2am'."}