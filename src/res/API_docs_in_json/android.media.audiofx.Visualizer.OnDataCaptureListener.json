{"Functions": {"onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#Visualizer_E@", "Visualizer: Visualizer object on which the listener is registered."], ["byte[]", "byte: array of bytes containing the waveform representation."], ["int", "int: sampling rate of the visualized audio."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Method called when a new waveform capture is available. Data in the waveform buffer is valid only within the scope of the callback. Applications which need access to the waveform data after returning from the callback should make a copy of the data instead of holding a reference.", "history": "Added in API level 9", "FullName": "public abstract void onWaveFormDataCapture (Visualizer visualizer, byte[] waveform, int samplingRate)"}, "onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#Visualizer_E@", "Visualizer: Visualizer object on which the listener is registered."], ["byte[]", "byte: array of bytes containing the frequency representation."], ["int", "int: sampling rate of the visualized audio."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Method called when a new frequency capture is available. Data in the fft buffer is valid only within the scope of the callback. Applications which need access to the fft data after returning from the callback should make a copy of the data instead of holding a reference. For the explanation of the fft data array layout, and the example code for processing it, please see the documentation for @B_android#media#audiofx#Visualizer#getFft_E@ method.", "history": "Added in API level 9", "FullName": "public abstract void onFftDataCapture (Visualizer visualizer, byte[] fft, int samplingRate)"}}, "Inheritance": [], "ClassName": "android.media.audiofx.Visualizer.OnDataCaptureListener", "ClassDesc": "The OnDataCaptureListener interface defines methods called by the Visualizer to periodically update the audio visualization capture. The client application can implement this interface and register the listener with the @B_android#media#audiofx#Visualizer#setDataCaptureListener_E@ method."}