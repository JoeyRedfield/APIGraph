{"Functions": {"setNotificationUris(android.content.ContentResolver,java.util.List<android.net.Uri>)": {"Returns": [], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The content resolver from the caller's context. The listener attached to this resolver will be notified. This value must never be null."], ["@B_java#util#List_E@", "List: The content URIs to watch. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#database#Cursor#setNotificationUri_E@, except this version allows to watch multiple content URIs for changes. If this is not implemented, this is equivalent to calling @B_android#database#Cursor#setNotificationUri_E@ with the first URI in uris. Calling this overrides any previous call to @B_android#database#Cursor#setNotificationUri_E@.", "history": "Added in API level 29", "FullName": "public void setNotificationUris (ContentResolver cr, List<Uri> uris)"}, "getNotificationUris()": {"Returns": [["@B_java#util#List_E@", "Returns URIs that can be used with @B_android#content#ContentResolver#registerContentObserver_E@ to find out about changes to this Cursor's data. May be null if no notification URI has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the URIs at which notifications of changes in this Cursor's data will be delivered, as previously set by @B_android#database#Cursor#setNotificationUris_E@. If this is not implemented, this is equivalent to calling @B_android#database#Cursor#getNotificationUri_E@.", "history": "Added in API level 29", "FullName": "public List<Uri> getNotificationUris ()"}, "getColumnIndexOrThrow(java.lang.String)": {"Returns": [["int", "the zero-based column index for the given column name"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the target column."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the column does not exist"]], "SeeAlso": ["@B_android#database#Cursor#getColumnIndex_E@"], "Permissions": [], "Description": "Returns the zero-based index for the given column name, or throws @B_java#lang#IllegalArgumentException_E@ if the column doesn't exist. If you're not sure if a column will exist or not use @B_android#database#Cursor#getColumnIndex_E@ and check for -1, which is more efficient than catching the exceptions.", "history": "Added in API level 1", "FullName": "public abstract int getColumnIndexOrThrow (String columnName)"}, "isAfterLast()": {"Returns": [["boolean", "whether the cursor is after the last result."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the cursor is pointing to the position after the last row.", "history": "Added in API level 1", "FullName": "public abstract boolean isAfterLast ()"}, "moveToLast()": {"Returns": [["boolean", "whether the move succeeded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor to the last row. This method will return false if the cursor is empty.", "history": "Added in API level 1", "FullName": "public abstract boolean moveToLast ()"}, "isLast()": {"Returns": [["boolean", "whether the cursor is pointing at the last entry."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the cursor is pointing to the last row.", "history": "Added in API level 1", "FullName": "public abstract boolean isLast ()"}, "getColumnName(int)": {"Returns": [["@B_java#lang#String_E@", "the column name for the given column index."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the column name at the given zero-based column index.", "history": "Added in API level 1", "FullName": "public abstract String getColumnName (int columnIndex)"}, "getWantsAllOnMoveCalls()": {"Returns": [["boolean", "whether all cursor movement should result in a call to onMove()."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "onMove() will only be called across processes if this method returns true.", "history": "Added in API level 1", "FullName": "public abstract boolean getWantsAllOnMoveCalls ()"}, "getColumnNames()": {"Returns": [["@B_java#lang#String_E@", "the names of the columns returned in this query."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.", "history": "Added in API level 1", "FullName": "public abstract String[] getColumnNames ()"}, "getCount()": {"Returns": [["int", "the number of rows in the cursor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the numbers of rows in the cursor.", "history": "Added in API level 1", "FullName": "public abstract int getCount ()"}, "requery()": {"Returns": [["boolean", "true if the requery succeeded, false if not, in which case the cursor becomes invalid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Don't use this. Just request a new cursor, so you can do this asynchronously and update your list view once the new cursor comes back. Performs the query that created the cursor again, refreshing its contents. This may be done at any time, including after a call to @B_android#database#Cursor#deactivate_E@. Since this method could execute a query on the database and potentially take a while, it could cause ANR if it is called on Main (UI) thread. A warning is printed if this method is being executed on Main thread.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract boolean requery ()"}, "isBeforeFirst()": {"Returns": [["boolean", "whether the cursor is before the first result."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the cursor is pointing to the position before the first row.", "history": "Added in API level 1", "FullName": "public abstract boolean isBeforeFirst ()"}, "unregisterDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object to unregister."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor#registerDataSetObserver_E@"], "Permissions": [], "Description": "Unregister an observer that has previously been registered with this cursor via @B_android#database#Cursor#registerContentObserver_E@.", "history": "Added in API level 1", "FullName": "public abstract void unregisterDataSetObserver (DataSetObserver observer)"}, "moveToNext()": {"Returns": [["boolean", "whether the move succeeded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor to the next row. This method will return false if the cursor is already past the last entry in the result set.", "history": "Added in API level 1", "FullName": "public abstract boolean moveToNext ()"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "the value of that column as a String."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a String. The result and whether this method throws an exception when the column value is null or the column type is not a string type is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract String getString (int columnIndex)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "cursor-defined values, or @B_android#os#Bundle#EMPTY_E@ if there are no values. Never null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bundle of extra values. This is an optional way for cursors to provide out-of-band metadata to their users. One use of this is for reporting on the progress of network requests that are required to fetch data for the cursor. These values may only change when requery is called.", "history": "Added in API level 1", "FullName": "public abstract Bundle getExtras ()"}, "copyStringToBuffer(int,android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["int", "int: the zero-based index of the target column. if the target column is null, return buffer"], ["@B_android#database#CharArrayBuffer_E@", "CharArrayBuffer: the buffer to copy the text into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the requested column text and stores it in the buffer provided. If the buffer size is not sufficient, a new char buffer will be allocated and assigned to CharArrayBuffer.data", "history": "Added in API level 1", "FullName": "public abstract void copyStringToBuffer (int columnIndex, CharArrayBuffer buffer)"}, "getLong(int)": {"Returns": [["long", "the value of that column as a long."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a long. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Long.MIN_VALUE, Long.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract long getLong (int columnIndex)"}, "respond(android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "extra values, or @B_android#os#Bundle#EMPTY_E@. Never null."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: extra values, or @B_android#os#Bundle#EMPTY_E@. Never null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is an out-of-band way for the the user of a cursor to communicate with the cursor. The structure of each bundle is entirely defined by the cursor. One use of this is to tell a cursor that it should retry its network request after it reported an error.", "history": "Added in API level 1", "FullName": "public abstract Bundle respond (Bundle extras)"}, "deactivate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Since @B_android#database#Cursor#requery_E@ is deprecated, so too is this. Deactivates the Cursor, making all calls on it fail until @B_android#database#Cursor#requery_E@ is called. Inactive Cursors use fewer resources than active Cursors. Calling @B_android#database#Cursor#requery_E@ will make the cursor active again.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public abstract void deactivate ()"}, "getShort(int)": {"Returns": [["short", "the value of that column as a short."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a short. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Short.MIN_VALUE, Short.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract short getShort (int columnIndex)"}, "getDouble(int)": {"Returns": [["double", "the value of that column as a double."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a double. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a double value is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (int columnIndex)"}, "getFloat(int)": {"Returns": [["float", "the value of that column as a float."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a float. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a float value is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (int columnIndex)"}, "isNull(int)": {"Returns": [["boolean", "whether the column value is null."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the value in the indicated column is null.", "history": "Added in API level 1", "FullName": "public abstract boolean isNull (int columnIndex)"}, "getPosition()": {"Returns": [["int", "the current cursor position."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current position of the cursor in the row set. The value is zero-based. When the row set is first returned the cursor will be at positon -1, which is before the first row. After the last row is returned another call to next() will leave the cursor past the last entry, at a position of count().", "history": "Added in API level 1", "FullName": "public abstract int getPosition ()"}, "registerDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object that gets notified when the cursors data set changes."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor#unregisterDataSetObserver_E@"], "Permissions": [], "Description": "Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via @B_android#database#Cursor#requery_E@, @B_android#database#Cursor#deactivate_E@, or @B_android#database#Cursor#close_E@.", "history": "Added in API level 1", "FullName": "public abstract void registerDataSetObserver (DataSetObserver observer)"}, "isClosed()": {"Returns": [["boolean", "true if the cursor is closed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "return true if the cursor is closed", "history": "Added in API level 1", "FullName": "public abstract boolean isClosed ()"}, "unregisterContentObserver(android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#database#ContentObserver_E@", "ContentObserver: the object to unregister."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor#registerContentObserver_E@"], "Permissions": [], "Description": "Unregister an observer that has previously been registered with this cursor via @B_android#database#Cursor#registerContentObserver_E@.", "history": "Added in API level 1", "FullName": "public abstract void unregisterContentObserver (ContentObserver observer)"}, "getColumnCount()": {"Returns": [["int", "number of columns"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return total number of columns", "history": "Added in API level 1", "FullName": "public abstract int getColumnCount ()"}, "registerContentObserver(android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#database#ContentObserver_E@", "ContentObserver: the object that gets notified when the content backing the cursor changes."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor#unregisterContentObserver_E@"], "Permissions": [], "Description": "Register an observer that is called when changes happen to the content backing this cursor. Typically the data set won't change until @B_android#database#Cursor#requery_E@ is called.", "history": "Added in API level 1", "FullName": "public abstract void registerContentObserver (ContentObserver observer)"}, "getInt(int)": {"Returns": [["int", "the value of that column as an int."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as an int. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Integer.MIN_VALUE, Integer.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract int getInt (int columnIndex)"}, "move(int)": {"Returns": [["boolean", "whether the requested move fully succeeded."]], "Parameters": [["int", "int: the offset to be applied from the current position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor by a relative amount, forward or backward, from the current position. Positive offsets move forwards, negative offsets move backwards. If the final position is outside of the bounds of the result set then the resultant position will be pinned to -1 or count() depending on whether the value is off the front or end of the set, respectively. This method will return true if the requested destination was reachable, otherwise, it returns false. For example, if the cursor is at currently on the second entry in the result set and move(-5) is called, the position will be pinned at -1, and false will be returned.", "history": "Added in API level 1", "FullName": "public abstract boolean move (int offset)"}, "isFirst()": {"Returns": [["boolean", "whether the cursor is pointing at the first entry."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the cursor is pointing to the first row.", "history": "Added in API level 1", "FullName": "public abstract boolean isFirst ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the Cursor, releasing all of its resources and making it completely invalid. Unlike @B_android#database#Cursor#deactivate_E@ a call to @B_android#database#Cursor#requery_E@ will not make the Cursor valid again.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "moveToFirst()": {"Returns": [["boolean", "whether the move succeeded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor to the first row. This method will return false if the cursor is empty.", "history": "Added in API level 1", "FullName": "public abstract boolean moveToFirst ()"}, "setNotificationUri(android.content.ContentResolver,android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The content resolver from the caller's context. The listener attached to this resolver will be notified."], ["@B_android#net#Uri_E@", "Uri: The content URI to watch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register to watch a content URI for changes. This can be the URI of a specific data row (for example, \"content://my_provider_type/23\"), or a a generic URI for a content type. Calling this overrides any previous call to @B_android#database#Cursor#setNotificationUris_E@.", "history": "Added in API level 1", "FullName": "public abstract void setNotificationUri (ContentResolver cr, Uri uri)"}, "getNotificationUri()": {"Returns": [["@B_android#net#Uri_E@", "Returns a URI that can be used with @B_android#content#ContentResolver#registerContentObserver_E@ to find out about changes to this Cursor's data. May be null if no notification URI has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by @B_android#database#Cursor#setNotificationUri_E@.", "history": "Added in API level 19", "FullName": "public abstract Uri getNotificationUri ()"}, "moveToPrevious()": {"Returns": [["boolean", "whether the move succeeded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor to the previous row. This method will return false if the cursor is already before the first entry in the result set.", "history": "Added in API level 1", "FullName": "public abstract boolean moveToPrevious ()"}, "getType(int)": {"Returns": [["int", "column value type"]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns data type of the given column's value. The preferred type of the column is returned but the data may be converted to other types as documented in the get-type methods such as @B_android#database#Cursor#getInt_E@, @B_android#database#Cursor#getFloat_E@ etc. Returned column types are @B_android#database#Cursor#FIELD_TYPE_NULL_E@ @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@ @B_android#database#Cursor#FIELD_TYPE_STRING_E@ @B_android#database#Cursor#FIELD_TYPE_BLOB_E@", "history": "Added in API level 11", "FullName": "public abstract int getType (int columnIndex)"}, "getColumnIndex(java.lang.String)": {"Returns": [["int", "the zero-based column index for the given column name, or -1 if the column name does not exist."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the target column."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor#getColumnIndexOrThrow_E@"], "Permissions": [], "Description": "Returns the zero-based index for the given column name, or -1 if the column doesn't exist. If you expect the column to exist use @B_android#database#Cursor#getColumnIndexOrThrow_E@ instead, which will make the error more clear.", "history": "Added in API level 1", "FullName": "public abstract int getColumnIndex (String columnName)"}, "setExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: @B_android#os#Bundle_E@ to set, or null to set an empty bundle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a @B_android#os#Bundle_E@ that will be returned by @B_android#database#Cursor#getExtras_E@.", "history": "Added in API level 23", "FullName": "public abstract void setExtras (Bundle extras)"}, "moveToPosition(int)": {"Returns": [["boolean", "whether the requested move fully succeeded."]], "Parameters": [["int", "int: the zero-based position to move to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor to an absolute position. The valid range of values is -1 <= position <= count. This method will return true if the request destination was reachable, otherwise, it returns false.", "history": "Added in API level 1", "FullName": "public abstract boolean moveToPosition (int position)"}, "getBlob(int)": {"Returns": [["byte[]", "the value of that column as a byte array."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a byte array. The result and whether this method throws an exception when the column value is null or the column type is not a blob type is implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBlob (int columnIndex)"}}, "Inheritance": [], "ClassName": "android.database.Cursor", "ClassDesc": "This interface provides random read-write access to the result set returned by a database query. Cursor implementations are not required to be synchronized so code using a Cursor from multiple threads should perform its own synchronization when using the Cursor. Implementations should subclass @B_android#database#AbstractCursor_E@."}