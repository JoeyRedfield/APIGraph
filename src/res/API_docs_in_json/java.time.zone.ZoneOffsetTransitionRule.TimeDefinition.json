{"Functions": {"values()": {"Returns": [["@B_java#time#zone#ZoneOffsetTransitionRule#TimeDefinition_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static final TimeDefinition[] values ()"}, "createDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the date-time relative to the wall/before offset, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the standard offset, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the wall offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified local date-time to the local date-time actually seen on a wall clock. This method converts using the type of this enum. The output is defined relative to the 'before' offset of the transition. The UTC type uses the UTC offset. The STANDARD type uses the standard offset. The WALL type returns the input date-time. The result is intended for use with the wall-offset.", "history": "Added in API level 26", "FullName": "public LocalDateTime createDateTime (LocalDateTime dateTime, ZoneOffset standardOffset, ZoneOffset wallOffset)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#zone#ZoneOffsetTransitionRule#TimeDefinition_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static ZoneOffsetTransitionRule.TimeDefinition valueOf (String name)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.time.zone.ZoneOffsetTransitionRule.TimeDefinition", "ClassDesc": "A definition of the way a local time can be converted to the actual transition date-time. Time zone rules are expressed in one of three ways: Relative to UTC Relative to the standard offset in force Relative to the wall offset (what you would see on a clock on the wall)"}