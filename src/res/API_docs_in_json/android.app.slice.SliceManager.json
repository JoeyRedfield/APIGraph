{"Functions": {"unpinSlice(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the slice being unpinned. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#pinSlice_E@", "@B_android#app#slice#SliceProvider#onSliceUnpinned_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Remove a pin for a slice. If the slice has no other pins/callbacks then the slice will be unpinned. This may only be called by apps that are the default launcher for the device or the default voice interaction service. Otherwise will throw @B_java#lang#SecurityException_E@.", "history": "Added in API level 28", "FullName": "public void unpinSlice (Uri uri)"}, "getSliceDescendants(android.net.Uri)": {"Returns": [["@B_java#util#Collection_E@", "All slices within the space. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri to look for descendants under. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceProvider#onGetSliceDescendants_E@"], "Permissions": [], "Description": "Obtains a list of slices that are descendants of the specified Uri. Not all slice providers will implement this functionality, in which case, an empty collection will be returned. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 28", "FullName": "public Collection<Uri> getSliceDescendants (Uri uri)"}, "revokeSlicePermission(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package you would like to allow to access the Uri. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The Uri you would like to revoke access to. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#grantSlicePermission_E@"], "Permissions": [], "Description": "Remove permissions to access a particular content provider Uri that were previously added with @B_android#app#slice#SliceManager#grantSlicePermission_E@ for a specific target package. The given Uri will match all previously granted Uris that are the same or a sub-path of the given Uri. That is, revoking \"content://foo/target\" will revoke both \"content://foo/target\" and \"content://foo/target/sub\", but not \"content://foo\". It will not remove any prefix grants that exist at a higher level.", "history": "Added in API level 28", "FullName": "public void revokeSlicePermission (String toPackage, Uri uri)"}, "getPinnedSlices()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceProvider#onSlicePinned_E@"], "Permissions": [], "Description": "Get the list of currently pinned slices for this app.", "history": "Added in API level 28", "FullName": "public List<Uri> getPinnedSlices ()"}, "checkSlicePermission(android.net.Uri, int, int)": {"Returns": [["int", "@B_android#content#pm#PackageManager#PERMISSION_GRANTED_E@ if the given pid/uid is allowed to access that uri, or @B_android#content#pm#PackageManager#PERMISSION_DENIED_E@ if it is not.Value is PERMISSION_GRANTED or PERMISSION_DENIED."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri that is being checked.This value must never be null."], ["int", "int: The process ID being checked against. Must be > 0."], ["int", "int: The user ID being checked against. A uid of 0 is the root user, which will pass every permission check."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#grantSlicePermission_E@"], "Permissions": [], "Description": "Determine whether a particular process and user ID has been granted permission to access a specific slice URI.", "history": "added in API level 28", "FullName": "public int checkSlicePermission (Uri uri, int pid, int uid)"}, "bindSlice(android.net.Uri,java.util.Set<android.app.slice.SliceSpec>)": {"Returns": [["@B_android#app#slice#Slice_E@", "The Slice provided by the app or null if none is given."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to a slice provider This value must never be null."], ["@B_java#util#Set_E@", "Set: List of supported specs. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#Slice_E@"], "Permissions": [], "Description": "Turns a slice Uri into slice content.", "history": "Added in API level 28", "FullName": "public Slice bindSlice (Uri uri, Set<SliceSpec> supportedSpecs)"}, "getPinnedSpecs(android.net.Uri)": {"Returns": [["@B_java#util#Set_E@", "This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceSpec_E@"], "Permissions": [], "Description": "Get the current set of specs for a pinned slice. This is the set of specs supported for a specific pinned slice. It will take into account all clients and returns only specs supported by all.", "history": "Added in API level 28", "FullName": "public Set<SliceSpec> getPinnedSpecs (Uri uri)"}, "checkSlicePermission(android.net.Uri,int,int)": {"Returns": [["int", "@B_android#content#pm#PackageManager#PERMISSION_GRANTED_E@ if the given pid/uid is allowed to access that uri, or @B_android#content#pm#PackageManager#PERMISSION_DENIED_E@ if it is not. Value is @B_android#content#pm#PackageManager#PERMISSION_GRANTED_E@, or @B_android#content#pm#PackageManager#PERMISSION_DENIED_E@"]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri that is being checked. This value must never be null."], ["int", "int: The process ID being checked against. Must be > 0."], ["int", "int: The user ID being checked against. A uid of 0 is the root user, which will pass every permission check."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#grantSlicePermission_E@"], "Permissions": [], "Description": "Determine whether a particular process and user ID has been granted permission to access a specific slice URI.", "history": "Added in API level 28", "FullName": "public int checkSlicePermission (Uri uri, int pid, int uid)"}, "mapIntentToUri(android.content.Intent)": {"Returns": [["@B_android#net#Uri_E@", "The Slice Uri provided by the app or null if none exists."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent associated with a slice. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#Slice_E@", "@B_android#app#slice#SliceProvider#onMapIntentToUri_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Turns a slice intent into a slice uri. Expects an explicit intent. This goes through a several stage resolution process to determine if any slice can represent this intent.", "history": "Added in API level 28", "FullName": "public Uri mapIntentToUri (Intent intent)"}, "bindSlice(android.content.Intent,java.util.Set<android.app.slice.SliceSpec>)": {"Returns": [["@B_android#app#slice#Slice_E@", "The Slice provided by the app or null if none is given."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent associated with a slice. This value must never be null."], ["@B_java#util#Set_E@", "Set: List of supported specs. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#Slice_E@", "@B_android#app#slice#SliceProvider#onMapIntentToUri_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Turns a slice intent into slice content. Is a shortcut to perform the action of both @B_android#app#slice#SliceManager#mapIntentToUri_E@ and @B_android#app#slice#SliceManager#bindSlice_E@ at once.", "history": "Added in API level 28", "FullName": "public Slice bindSlice (Intent intent, Set<SliceSpec> supportedSpecs)"}, "pinSlice(android.net.Uri,java.util.Set<android.app.slice.SliceSpec>)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the slice being pinned. This value must never be null."], ["@B_java#util#Set_E@", "Set: The list of supported @B_android#app#slice#SliceSpec_E@s of the callback. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceProvider#onSlicePinned_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Ensures that a slice is in a pinned state. Pinned state is not persisted across reboots, so apps are expected to re-pin any slices they still care about after a reboot. This may only be called by apps that are the default launcher for the device or the default voice interaction service. Otherwise will throw @B_java#lang#SecurityException_E@.", "history": "Added in API level 28", "FullName": "public void pinSlice (Uri uri, Set<SliceSpec> specs)"}, "grantSlicePermission(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package you would like to allow to access the Uri. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The Uri you would like to grant access to. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#slice#SliceManager#revokeSlicePermission_E@"], "Permissions": [], "Description": "Grant permission to access a specific slice Uri to another package.", "history": "Added in API level 28", "FullName": "public void grantSlicePermission (String toPackage, Uri uri)"}}, "Inheritance": [], "ClassName": "android.app.slice.SliceManager", "ClassDesc": "Class to handle interactions with @B_android#app#slice#Slice_E@s. The SliceManager manages permissions and pinned state for slices."}