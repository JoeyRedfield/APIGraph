{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getSmallestDisplacement()": {"Returns": [["", "minimum displacement between location updates in meters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the minimum displacement between location updates in meters By default this is 0.", "history": "", "FullName": "public float getSmallestDisplacement ()"}, "create()": {"Returns": [["", "a new location request"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a location request with default parameters. Default parameters are for a block accuracy, slowly updated location. It can then be adjusted as required by the applications before passing to the @B_com#google#android#gms#location#FusedLocationProviderApi_E@.", "history": "", "FullName": "public static LocationRequest create ()"}, "getFastestInterval()": {"Returns": [["", "fastest interval in milliseconds, exact"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the fastest interval of this request, in milliseconds. The system will never provide location updates faster than the minimum of @B_com#google#android#gms#location#LocationRequest#getFastestInterval_E@ and @B_com#google#android#gms#location#LocationRequest#getInterval_E@.", "history": "", "FullName": "public long getFastestInterval ()"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "setExpirationDuration(long)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["long", "duration of request in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the duration of this request, in milliseconds. The duration begins immediately (and not when the request is passed to the location client), so call this method again if the request is re-used at a later time. The location client will automatically stop updates after the request expires. The duration includes suspend time. Values less than 0 are allowed, but indicate that the request has already expired.", "history": "", "FullName": "public LocationRequest setExpirationDuration (long millis)"}, "setNumUpdates(int)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["int", "the number of location updates requested"]], "Throws": [["IllegalArgumentException", "if numUpdates is 0 or less"]], "SeeAlso": [], "Permissions": [], "Description": "Set the number of location updates. By default locations are continuously updated until the request is explicitly removed, however you can optionally request a set number of updates. For example, if your application only needs a single fresh location, then call this method with a value of 1 before passing the request to the location client. When using this option care must be taken to either explicitly remove the request when no longer needed or to set an expiration with (@B_com#google#android#gms#location#LocationRequest#setExpirationDuration_E@ or @B_com#google#android#gms#location#LocationRequest#setExpirationTime_E@. Otherwise in some cases if a location can't be computed, this request could stay active indefinitely consuming power.", "history": "", "FullName": "public LocationRequest setNumUpdates (int numUpdates)"}, "getExpirationTime()": {"Returns": [["", "expiration time of request, in milliseconds since boot including suspend"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the request expiration time, in milliseconds since boot. This value can be compared to @B_android#os#SystemClock#elapsedRealtime_E@ to determine the time until expiration.", "history": "", "FullName": "public long getExpirationTime ()"}, "getMaxWaitTime()": {"Returns": [["", "maximum wait time in milliseconds, inexact"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#location#LocationRequest#setMaxWaitTime_E@"], "Permissions": [], "Description": "Gets the maximum wait time in milliseconds for location updates. If the wait time is smaller than the interval requested with @B_com#google#android#gms#location#LocationRequest#setInterval_E@, then the interval will be used instead.", "history": "", "FullName": "public long getMaxWaitTime ()"}, "getNumUpdates()": {"Returns": [["", "number of updates"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of updates requested. By default this is @B_java#lang#Integer#MAX_VALUE_E@, which indicates that locations are updated until the request is explicitly removed.", "history": "", "FullName": "public int getNumUpdates ()"}, "setSmallestDisplacement(float)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["float", "the smallest displacement in meters the user must move between location updates."]], "Throws": [["IllegalArgumentException", "if smallestDisplacementMeters is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Set the minimum displacement between location updates in meters By default this is 0.", "history": "", "FullName": "public LocationRequest setSmallestDisplacement (float smallestDisplacementMeters)"}, "getInterval()": {"Returns": [["", "desired interval in milliseconds, inexact"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the desired interval of this request, in milliseconds.", "history": "", "FullName": "public long getInterval ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "setInterval(long)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["long", "desired interval in millisecond, inexact"]], "Throws": [["IllegalArgumentException", "if the interval is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Set the desired interval for active location updates, in milliseconds. The location client will actively try to obtain location updates for your application at this interval, so it has a direct influence on the amount of power used by your application. Choose your interval wisely. This interval is inexact. You may not receive updates at all (if no location sources are available), or you may receive them slower than requested. You may also receive them faster than requested (if other applications are requesting location at a faster interval). The fastest rate that you will receive updates can be controlled with @B_com#google#android#gms#location#LocationRequest#setFastestInterval_E@. By default this fastest rate is 6x the interval frequency. Applications with only the coarse location permission may have their interval silently throttled. An interval of 0 is allowed, but not recommended, since location updates may be extremely fast on future implementations. @B_com#google#android#gms#location#LocationRequest#setPriority_E@ and @B_com#google#android#gms#location#LocationRequest#setInterval_E@ are the most important parameters on a location request.", "history": "", "FullName": "public LocationRequest setInterval (long millis)"}, "setFastestInterval(long)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["long", "fastest interval for updates in milliseconds, exact"]], "Throws": [["IllegalArgumentException", "if the interval is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Explicitly set the fastest interval for location updates, in milliseconds. This controls the fastest rate at which your application will receive location updates, which might be faster than @B_com#google#android#gms#location#LocationRequest#setInterval_E@ in some situations (for example, if other applications are triggering location updates). This allows your application to passively acquire locations at a rate faster than it actively acquires locations, saving power. Unlike @B_com#google#android#gms#location#LocationRequest#setInterval_E@, this parameter is exact. Your application will never receive updates faster than this value. If you don't call this method, a fastest interval will be selected for you. It will be a value faster than your active interval (@B_com#google#android#gms#location#LocationRequest#setInterval_E@). An interval of 0 is allowed, but not recommended, since location updates may be extremely fast on future implementations. If @B_com#google#android#gms#location#LocationRequest#setFastestInterval_E@ is set slower than @B_com#google#android#gms#location#LocationRequest#setInterval_E@, then your effective fastest interval is @B_com#google#android#gms#location#LocationRequest#setInterval_E@.", "history": "", "FullName": "public LocationRequest setFastestInterval (long millis)"}, "setExpirationTime(long)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["long", "expiration time of request, in milliseconds since boot including suspend"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the request expiration time, in millisecond since boot. This expiration time uses the same time base as @B_android#os#SystemClock#elapsedRealtime_E@. The location client will automatically stop updates after the request expires. The duration includes suspend time. Values before @B_android#os#SystemClock#elapsedRealtime_E@ are allowed, but indicate that the request has already expired.", "history": "", "FullName": "public LocationRequest setExpirationTime (long millis)"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object object)"}, "setPriority(int)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["int", "an accuracy or power constant"]], "Throws": [["IllegalArgumentException", "if the quality constant is not valid"]], "SeeAlso": [], "Permissions": [], "Description": "Set the priority of the request. Use with a priority constant such as @B_com#google#android#gms#location#LocationRequest#PRIORITY_HIGH_ACCURACY_E@. No other values are accepted. The priority of the request is a strong hint to the LocationClient for which location sources to use. For example, @B_com#google#android#gms#location#LocationRequest#PRIORITY_HIGH_ACCURACY_E@ is more likely to use GPS, and @B_com#google#android#gms#location#LocationRequest#PRIORITY_BALANCED_POWER_ACCURACY_E@ is more likely to use WIFI & Cell tower positioning, but it also depends on many other factors (such as which sources are available) and is implementation dependent. @B_com#google#android#gms#location#LocationRequest#setPriority_E@ and @B_com#google#android#gms#location#LocationRequest#setInterval_E@ are the most important parameters on a location request.", "history": "", "FullName": "public LocationRequest setPriority (int priority)"}, "getPriority()": {"Returns": [["", "an accuracy constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the quality of the request.", "history": "", "FullName": "public int getPriority ()"}, "setMaxWaitTime(long)": {"Returns": [["", "the same object, so that setters can be chained"]], "Parameters": [["long", "desired maximum wait time in millisecond, inexact"]], "Throws": [["IllegalArgumentException", "if the interval is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum wait time in milliseconds for location updates. If you pass a value at least 2x larger than the interval specified with @B_com#google#android#gms#location#LocationRequest#setInterval_E@, then location delivery may be delayed and multiple locations can be delivered at once. Locations are determined at the @B_com#google#android#gms#location#LocationRequest#setInterval_E@ rate, but can be delivered in batch after the interval you set in this method. This can consume less battery and give more accurate locations, depending on the device's hardware capabilities. You should set this value to be as large as possible for your needs if you don't need immediate location delivery.", "history": "", "FullName": "public LocationRequest setMaxWaitTime (long millis)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.location.LocationRequest", "ClassDesc": "A data object that contains quality of service parameters for requests to the @B_com#google#android#gms#location#FusedLocationProviderApi_E@. LocationRequest objects are used to request a quality of service for location updates from the @B_com#google#android#gms#location#FusedLocationProviderApi_E@. For example, if your application wants high accuracy location it should create a location request with @B_com#google#android#gms#location#LocationRequest#setPriority_E@ set to @B_com#google#android#gms#location#LocationRequest#PRIORITY_HIGH_ACCURACY_E@ and @B_com#google#android#gms#location#LocationRequest#setInterval_E@ to 5 seconds. This would be appropriate for mapping applications that are showing your location in real-time. At the other extreme, if you want negligible power impact, but to still receive location updates when available, then create a location request with @B_com#google#android#gms#location#LocationRequest#setPriority_E@ set to @B_com#google#android#gms#location#LocationRequest#PRIORITY_NO_POWER_E@. With this request your application will not trigger (and therefore will not receive any power blame) any location updates, but will receive locations triggered by other applications. This would be appropriate for applications that have no firm requirement for location, but can take advantage when available. In between these two extremes is a very common use-case, where applications definitely want to receive updates at a specified interval, and can receive them faster when available, but still want a low power impact. These applications should consider @B_com#google#android#gms#location#LocationRequest#PRIORITY_BALANCED_POWER_ACCURACY_E@ combined with a faster @B_com#google#android#gms#location#LocationRequest#setFastestInterval_E@ (such as 1 minute) and a slower @B_com#google#android#gms#location#LocationRequest#setInterval_E@ (such as 60 minutes). They will only be assigned power blame for the interval set by @B_com#google#android#gms#location#LocationRequest#setInterval_E@, but can still receive locations triggered by other applications at a rate up to @B_com#google#android#gms#location#LocationRequest#setFastestInterval_E@. This style of request is appropriate for many location aware applications, including background usage. Do be careful to also throttle @B_com#google#android#gms#location#LocationRequest#setFastestInterval_E@ if you perform heavy-weight work after receiving an update - such as using the network. Activities should strongly consider removing all location request when entering the background (for example at @B_android#app#Activity#onPause_E@), or at least swap the request to a larger interval and lower quality. Applications cannot specify the exact location sources, such as GPS, that are used by the LocationClient. In fact, the system may have multiple location sources (providers) running and may fuse the results from several sources into a single Location object. Location requests from applications with @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ and not @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ will be automatically throttled to a slower interval, and the location object will be obfuscated to only show a coarse level of accuracy. All location requests are considered hints, and you may receive locations that are more/less accurate, and faster/slower than requested."}