{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 5", "FullName": "public String toString ()"}, "getPsm()": {"Returns": [["int", "the assigned PSM or LE_PSM value depending on transport"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the assigned dynamic protocol/service multiplexer (PSM) value for the listening L2CAP Connection-oriented Channel (CoC) server socket. This server socket must be returned by the @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@ or @B_android#bluetooth#BluetoothAdapter#listenUsingInsecureL2capChannel_E@. The returned value is undefined if this method is called on non-L2CAP server sockets.", "history": "Added in API level 29", "FullName": "public int getPsm ()"}, "accept(int)": {"Returns": [["@B_android#bluetooth#BluetoothSocket_E@", "a connected @B_android#bluetooth#BluetoothSocket_E@"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", "on error, for example this call was aborted, or timeout"]], "SeeAlso": [], "Permissions": [], "Description": "Block until a connection is established, with timeout. Returns a connected @B_android#bluetooth#BluetoothSocket_E@ on successful connection. Once this call returns, it can be called again to accept subsequent incoming connections. @B_android#bluetooth#BluetoothServerSocket#close_E@ can be used to abort this call from another thread.", "history": "Added in API level 5", "FullName": "public BluetoothSocket accept (int timeout)"}, "accept()": {"Returns": [["@B_android#bluetooth#BluetoothSocket_E@", "a connected @B_android#bluetooth#BluetoothSocket_E@"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "on error, for example this call was aborted, or timeout"]], "SeeAlso": [], "Permissions": [], "Description": "Block until a connection is established. Returns a connected @B_android#bluetooth#BluetoothSocket_E@ on successful connection. Once this call returns, it can be called again to accept subsequent incoming connections. @B_android#bluetooth#BluetoothServerSocket#close_E@ can be used to abort this call from another thread.", "history": "Added in API level 5", "FullName": "public BluetoothSocket accept ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Immediately close this socket, and release all associated resources. Causes blocked calls on this socket in other threads to immediately throw an IOException. Closing the @B_android#bluetooth#BluetoothServerSocket_E@ will not close any @B_android#bluetooth#BluetoothSocket_E@ received from @B_android#bluetooth#BluetoothServerSocket#accept_E@.", "history": "Added in API level 5", "FullName": "public void close ()"}}, "Inheritance": [], "ClassName": "android.bluetooth.BluetoothServerSocket", "ClassDesc": "A listening Bluetooth socket. The interface for Bluetooth Sockets is similar to that of TCP sockets: @B_java#net#Socket_E@ and @B_java#net#ServerSocket_E@. On the server side, use a @B_android#bluetooth#BluetoothServerSocket_E@ to create a listening server socket. When a connection is accepted by the @B_android#bluetooth#BluetoothServerSocket_E@, it will return a new @B_android#bluetooth#BluetoothSocket_E@ to manage the connection. On the client side, use a single @B_android#bluetooth#BluetoothSocket_E@ to both initiate an outgoing connection and to manage the connection. For Bluetooth BR/EDR, the most common type of socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth BR/EDR. It is also known as the Serial Port Profile (SPP). To create a listening @B_android#bluetooth#BluetoothServerSocket_E@ that's ready for incoming Bluetooth BR/EDR connections, use @B_android#bluetooth#BluetoothAdapter#listenUsingRfcommWithServiceRecord_E@. For Bluetooth LE, the socket uses LE Connection-oriented Channel (CoC). LE CoC is a connection-oriented, streaming transport over Bluetooth LE and has a credit-based flow control. Correspondingly, use @B_android#bluetooth#BluetoothAdapter#listenUsingL2capChannel_E@ to create a listening @B_android#bluetooth#BluetoothServerSocket_E@ that's ready for incoming Bluetooth LE CoC connections. For LE CoC, you can use @B_android#bluetooth#BluetoothServerSocket#getPsm_E@ to get the protocol/service multiplexer (PSM) value that the peer needs to use to connect to your socket. After the listening @B_android#bluetooth#BluetoothServerSocket_E@ is created, call @B_android#bluetooth#BluetoothServerSocket#accept_E@ to listen for incoming connection requests. This call will block until a connection is established, at which point, it will return a @B_android#bluetooth#BluetoothSocket_E@ to manage the connection. Once the @B_android#bluetooth#BluetoothSocket_E@ is acquired, it's a good idea to call @B_android#bluetooth#BluetoothServerSocket#close_E@ on the @B_android#bluetooth#BluetoothServerSocket_E@ when it's no longer needed for accepting connections. Closing the @B_android#bluetooth#BluetoothServerSocket_E@ will not close the returned @B_android#bluetooth#BluetoothSocket_E@. @B_android#bluetooth#BluetoothServerSocket_E@ is thread safe. In particular, @B_android#bluetooth#BluetoothServerSocket#close_E@ will always immediately abort ongoing operations and close the server socket. @B_android#Manifest#permission#BLUETOOTH_E@ permission."}