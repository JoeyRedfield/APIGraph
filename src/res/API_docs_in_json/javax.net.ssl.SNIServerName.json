{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this server name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this server name, including the server name type and the encoded server name value in this SNIServerName object. The exact details of the representation are unspecified and subject to change, but the following may be regarded as typical: In this class, the format of \"<name type>\" is \"[LITERAL] (INTEGER)\", where the optional \"LITERAL\" is the literal name, and INTEGER is the integer value of the name type. The format of \"<name value>\" is \"XX:...:XX\", where \"XX\" is the hexadecimal digit representation of a byte value. For example, a returned value of an pseudo server name may look like: Please NOTE that the exact details of the representation are unspecified and subject to change, and subclasses may override the method with their own formats.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "getEncoded()": {"Returns": [["byte[]", "a copy of the encoded server name value of this server name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the encoded server name value of this server name.", "history": "Added in API level 24", "FullName": "public final byte[] getEncoded ()"}, "getType()": {"Returns": [["int", "the name type of this server name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name type of this server name.", "history": "Added in API level 24", "FullName": "public final int getType ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, other is of the same class of this object, and has the same name type and encoded value as this server name."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this server name.", "history": "Added in API level 24", "FullName": "public boolean equals (Object other)"}, "SNIServerName(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the type of the server name"], ["byte[]", "byte: the encoded value of the server name"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if type is not in the range of 0 to 255, inclusive."], ["@B_java#lang#NullPointerException_E@", "if encoded is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an SNIServerName using the specified name type and encoded value. Note that the encoded byte array is cloned to protect against subsequent modification.", "history": "Added in API level 24", "FullName": "protected SNIServerName (int type, byte[] encoded)"}, "SNIServerName(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the type of the server name"], ["byte[]", "byte: the encoded value of the server name"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if type is not in the range of 0 to 255, inclusive."], ["@B_java#lang#NullPointerException_E@", "if encoded is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an SNIServerName using the specified name type and encoded value. Note that the encoded byte array is cloned to protect against subsequent modification.", "history": "added in API level 24", "FullName": "protected SNIServerName (int type, byte[] encoded)"}, "hashCode()": {"Returns": [["int", "a hash code value for this server name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this server name. The hash code value is generated using the name type and encoded value of this server name.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SNIServerName", "ClassDesc": "Instances of this class represent a server name in a Server Name Indication (SNI) extension. The SNI extension is a feature that extends the SSL/TLS protocols to indicate what server name the client is attempting to connect to during handshaking. See section 3, \"Server Name Indication\", of SNIServerName objects are immutable. Subclasses should not provide methods that can change the state of an instance once it has been created."}