{"Functions": {"hasAlpha()": {"Returns": [["boolean", "true if any part of the drawable is not opaque."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the Shape is opaque. Default impl returns true. Override if your subclass can be opaque.", "history": "Added in API level 1", "FullName": "public boolean hasAlpha ()"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: the Outline to be populated with the result. Must be non-null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the Outline of the shape and return it in the supplied Outline parameter. The default implementation does nothing and outline is not changed.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "onResize(float,float)": {"Returns": [], "Parameters": [["float", "float: the new width of the Shape"], ["float", "float: the new height of the Shape"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method called when @B_android#graphics#drawable#shapes#Shape#resize_E@ is executed.", "history": "Added in API level 1", "FullName": "protected void onResize (float width, float height)"}, "resize(float, float)": {"Returns": [], "Parameters": [["float", "float: the width of the shape (in pixels)"], ["float", "float: the height of the shape (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resizes the dimensions of this shape. Must be called before @B_android#graphics#drawable#shapes#Shape#draw_E@.", "history": "added in API level 1", "FullName": "public final void resize (float width, float height)"}, "onResize(float, float)": {"Returns": [], "Parameters": [["float", "float: the new width of the Shape"], ["float", "float: the new height of the Shape"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method called when @B_android#graphics#drawable#shapes#Shape#resize_E@ is executed.", "history": "added in API level 1", "FullName": "protected void onResize (float width, float height)"}, "resize(float,float)": {"Returns": [], "Parameters": [["float", "float: the width of the shape (in pixels)"], ["float", "float: the height of the shape (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resizes the dimensions of this shape. Must be called before @B_android#graphics#drawable#shapes#Shape#draw_E@.", "history": "Added in API level 1", "FullName": "public final void resize (float width, float height)"}, "draw(android.graphics.Canvas,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the Canvas within which this shape should be drawn"], ["@B_android#graphics#Paint_E@", "Paint: the Paint object that defines this shape's characteristics"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws this shape into the provided Canvas, with the provided Paint. Before calling this, you must call @B_android#graphics#drawable#shapes#Shape#resize_E@.", "history": "Added in API level 1", "FullName": "public abstract void draw (Canvas canvas, Paint paint)"}, "getHeight()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the height of the Shape.", "history": "Added in API level 1", "FullName": "public final float getHeight ()"}, "Shape()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Shape ()"}, "getWidth()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the width of the Shape.", "history": "Added in API level 1", "FullName": "public final float getWidth ()"}, "clone()": {"Returns": [["@B_android#graphics#drawable#shapes#Shape_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "public Shape clone ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.graphics.drawable.shapes.Shape", "ClassDesc": "Defines a generic graphical \"shape.\" Any Shape can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass it to a @B_android#graphics#drawable#ShapeDrawable_E@. Custom Shape classes must implement @B_android#graphics#drawable#shapes#Shape#clone_E@ and return an instance of the custom Shape class."}