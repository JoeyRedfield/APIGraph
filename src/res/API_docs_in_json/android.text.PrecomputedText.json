{"Functions": {"getSpanEnd(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the end of the range of text to which the specified markup object is attached, or -1 if the object is not attached.", "history": "Added in API level 28", "FullName": "public int getSpanEnd (Object tag)"}, "subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "added in API level 28", "FullName": "public CharSequence subSequence (int start, int end)"}, "getWidth(int,int)": {"Returns": [["float", "the text width Value is 0 or greater"]], "Parameters": [["int", "int: the inclusive start offset in the text Value is 0 or greater"], ["int", "int: the exclusive end offset in the text Value is 0 or greater"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if start and end offset are in the different paragraph."]], "SeeAlso": [], "Permissions": [], "Description": "Returns text width for the given range. Both start and end offset need to be in the same paragraph, otherwise IllegalArgumentException will be thrown.", "history": "Added in API level 28", "FullName": "public float getWidth (int start, int end)"}, "getParagraphEnd(int)": {"Returns": [["int", "Value is 0 or greater"]], "Parameters": [["int", "int: Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the paragraph end offset of the text.", "history": "Added in API level 28", "FullName": "public int getParagraphEnd (int paraIndex)"}, "nextSpanTransition(int, int, java.lang.Class)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the first offset greater than start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than start but less than limit. Specify null or Object.class for the type if you want every transition regardless of type.", "history": "added in API level 28", "FullName": "public int nextSpanTransition (int start, int limit, Class type)"}, "getBounds(int, int, android.graphics.Rect)": {"Returns": [], "Parameters": [["int", "int: the inclusive start offset in the text"], ["int", "int: the exclusive end offset in the text"], ["@B_android#graphics#Rect_E@", "Rect: the output rectangleThis value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if start and end offset are in the different paragraph."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the text bounding box for the given range. Both start and end offset need to be in the same paragraph, otherwise IllegalArgumentException will be thrown.", "history": "added in API level 28", "FullName": "public void getBounds (int start, int end, Rect bounds)"}, "setSpan(java.lang.Object, int, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#text#style#MetricAffectingSpan_E@ is specified."]], "SeeAlso": [], "Permissions": [], "Description": "Attach the specified markup object to the range start\u2026end of the text, or move the object to that range if it was already attached elsewhere. See @B_android#text#Spanned_E@ for an explanation of what the flags mean. The object can be one that has meaning only within your application, or it can be one that the text system will use to affect text display or behavior. Some noteworthy ones are the subclasses of @B_android#text#style#CharacterStyle_E@ and @B_android#text#style#ParagraphStyle_E@, and @B_android#text#TextWatcher_E@ and @B_android#text#SpanWatcher_E@.", "history": "added in API level 28", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "nextSpanTransition(int,int,java.lang.Class)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the first offset greater than start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than start but less than limit. Specify null or Object.class for the type if you want every transition regardless of type.", "history": "Added in API level 28", "FullName": "public int nextSpanTransition (int start, int limit, Class type)"}, "getBounds(int,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["int", "int: the inclusive start offset in the text Value is 0 or greater"], ["int", "int: the exclusive end offset in the text Value is 0 or greater"], ["@B_android#graphics#Rect_E@", "Rect: the output rectangle This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if start and end offset are in the different paragraph."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the text bounding box for the given range. Both start and end offset need to be in the same paragraph, otherwise IllegalArgumentException will be thrown.", "history": "Added in API level 28", "FullName": "public void getBounds (int start, int end, Rect bounds)"}, "getParams()": {"Returns": [["@B_android#text#PrecomputedText#Params_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the layout parameters used to measure this text.", "history": "Added in API level 28", "FullName": "public PrecomputedText.Params getParams ()"}, "getSpanStart(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the beginning of the range of text to which the specified markup object is attached, or -1 if the object is not attached.", "history": "Added in API level 28", "FullName": "public int getSpanStart (Object tag)"}, "getParagraphStart(int)": {"Returns": [["int", "Value is 0 or greater"]], "Parameters": [["int", "int: Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the paragraph start offset of the text.", "history": "Added in API level 28", "FullName": "public int getParagraphStart (int paraIndex)"}, "subSequence(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "Added in API level 28", "FullName": "public CharSequence subSequence (int start, int end)"}, "setSpan(java.lang.Object,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#text#style#MetricAffectingSpan_E@ is specified."]], "SeeAlso": [], "Permissions": [], "Description": "Attach the specified markup object to the range start\u2026end of the text, or move the object to that range if it was already attached elsewhere. See @B_android#text#Spanned_E@ for an explanation of what the flags mean. The object can be one that has meaning only within your application, or it can be one that the text system will use to affect text display or behavior. Some noteworthy ones are the subclasses of @B_android#text#style#CharacterStyle_E@ and @B_android#text#style#ParagraphStyle_E@, and @B_android#text#TextWatcher_E@ and @B_android#text#SpanWatcher_E@.", "history": "Added in API level 28", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "getParagraphCount()": {"Returns": [["int", "Value is 0 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the count of paragraphs.", "history": "Added in API level 28", "FullName": "public int getParagraphCount ()"}, "getSpans(int,int,java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it. Specify Object.class for the type if you want all the objects regardless of type.", "history": "Added in API level 28", "FullName": "public T[] getSpans (int start, int end, Class<T> type)"}, "charAt(int)": {"Returns": [["char", "the specified char value"]], "Parameters": [["int", "int: the index of the char value to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the char value at the specified index. An index ranges from zero to char value of the sequence is at index zero, the next at index one, and so on, as for array indexing. If the char value specified by the index is a", "history": "Added in API level 28", "FullName": "public char charAt (int index)"}, "removeSpan(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#text#style#MetricAffectingSpan_E@ is specified."]], "SeeAlso": [], "Permissions": [], "Description": "Remove the specified object from the range of text to which it was attached, if any. It is OK to remove an object that was never attached in the first place.", "history": "Added in API level 28", "FullName": "public void removeSpan (Object what)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 28", "FullName": "public String toString ()"}, "create(java.lang.CharSequence,android.text.PrecomputedText.Params)": {"Returns": [["@B_android#text#PrecomputedText_E@", "A @B_android#text#PrecomputedText_E@"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to be measured This value must never be null."], ["@B_android#text#PrecomputedText#Params_E@", "PrecomputedText.Params: parameters that define how text will be precomputed This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#text#PrecomputedText_E@ which will pre-compute text measurement and glyph positioning information. This can be expensive, so computing this on a background thread before your text will be presented can save work on the UI thread. Note that any @B_android#text#NoCopySpan_E@ attached to the text won't be passed to the created PrecomputedText.", "history": "Added in API level 28", "FullName": "public static PrecomputedText create (CharSequence text, PrecomputedText.Params params)"}, "length()": {"Returns": [["int", "the number of chars in this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this character sequence. The length is the number of 16-bit chars in the sequence.", "history": "Added in API level 28", "FullName": "public int length ()"}, "getSpanFlags(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the flags that were specified when @B_android#text#Spannable#setSpan_E@ was used to attach the specified markup object, or 0 if the specified object has not been attached.", "history": "Added in API level 28", "FullName": "public int getSpanFlags (Object tag)"}, "getSpans(int, int, java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it. Specify Object.class for the type if you want all the objects regardless of type.", "history": "added in API level 28", "FullName": "public T[] getSpans (int start, int end, Class<T> type)"}, "getWidth(int, int)": {"Returns": [["float", "the text widthValue is 0.0 or greater."]], "Parameters": [["int", "int: the inclusive start offset in the text"], ["int", "int: the exclusive end offset in the text"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if start and end offset are in the different paragraph."]], "SeeAlso": [], "Permissions": [], "Description": "Returns text width for the given range. Both start and end offset need to be in the same paragraph, otherwise IllegalArgumentException will be thrown.", "history": "added in API level 28", "FullName": "public float getWidth (int start, int end)"}}, "Inheritance": [], "ClassName": "android.text.PrecomputedText", "ClassDesc": "A text which has the character metrics data. A text object that contains the character metrics data and can be used to improve the performance of text layout operations. When a PrecomputedText is created with a given @B_java#lang#CharSequence_E@, it will measure the text metrics during the creation. This PrecomputedText instance can be set on @B_android#widget#TextView_E@ or @B_android#text#StaticLayout_E@. Since the text layout information will be included in this instance, @B_android#widget#TextView_E@ or @B_android#text#StaticLayout_E@ will not have to recalculate this information. Note that the @B_android#text#PrecomputedText_E@ created from different parameters of the target @B_android#widget#TextView_E@ will be rejected internally and compute the text layout again with the current @B_android#widget#TextView_E@ parameters. @B_android#text#PrecomputedText_E@ created from different parameters of the target @B_android#widget#TextView_E@ will be rejected. Note that any @B_android#text#NoCopySpan_E@ attached to the original text won't be passed to PrecomputedText."}