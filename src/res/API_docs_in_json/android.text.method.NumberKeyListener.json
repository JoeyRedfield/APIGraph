{"Functions": {"ok(char[], char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char[]", "char no parameter comment"], ["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "protected static boolean ok (char[] accept, char c)"}, "NumberKeyListener()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public NumberKeyListener ()"}, "filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#Spanned_E@", "Spanned no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the buffer is going to replace the range dstart \u2026 dend of dest with the new text from the range start \u2026 end of source. Return the CharSequence that you would like to have placed there instead, including an empty string if appropriate, or null to accept the original replacement. Be careful to not to reject 0-length replacements, as this is what happens when you delete text. Also beware that you should not attempt to make any changes to dest from this method; you may only examine it for context. Note: If @B_android#text#Spanned_E@ or @B_android#text#Spannable_E@, the span objects in the @B_android#text#TextUtils#copySpansFrom_E@ can be used for convenience if the span boundary indices would be remaining identical relative to the source.", "history": "Added in API level 1", "FullName": "public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend)"}, "getAcceptedChars()": {"Returns": [["char[]", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "You can say which characters you can accept.", "history": "Added in API level 1", "FullName": "protected abstract char[] getAcceptedChars ()"}, "lookup(android.view.KeyEvent,android.text.Spannable)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"], ["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected int lookup (KeyEvent event, Spannable content)"}, "ok(char[],char)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["char[]", "char no parameter comment"], ["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected static boolean ok (char[] accept, char c)"}, "onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (View view, Editable content, int keyCode, KeyEvent event)"}}, "Inheritance": ["@B_android#text#method#MetaKeyKeyListener_E@", "@B_android#text#method#BaseKeyListener_E@"], "ClassName": "android.text.method.NumberKeyListener", "ClassDesc": "For numeric text entry As for all implementations of @B_android#text#method#KeyListener_E@, this class is only concerned with hardware keyboards. Software input methods have no obligation to trigger the methods in this class."}