{"Functions": {"cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel pending and running spell check tasks", "history": "Added in API level 15", "FullName": "public void cancel ()"}, "getSuggestions(android.view.textservice.TextInfo,int)": {"Returns": [], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: text metadata for a spell checker"], ["int", "int: the maximum number of suggestions that will be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#textservice#SpellCheckerSession#getSentenceSuggestions_E@ instead Get candidate strings for a substring of the specified text.", "history": "Added in API level 14 Deprecated in API level 16", "FullName": "public void getSuggestions (TextInfo textInfo, int suggestionsLimit)"}, "getSuggestions(android.view.textservice.TextInfo[],int,boolean)": {"Returns": [], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: an array of text metadata for a spell checker"], ["int", "int: the maximum number of suggestions that will be returned"], ["boolean", "boolean: true if textInfos can be treated as sequential words."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#textservice#SpellCheckerSession#getSentenceSuggestions_E@ instead A batch process of getSuggestions", "history": "Added in API level 14 Deprecated in API level 16", "FullName": "public void getSuggestions (TextInfo[] textInfos, int suggestionsLimit, boolean sequentialWords)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 14", "FullName": "protected void finalize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finish this session and allow TextServicesManagerService to disconnect the bound spell checker.", "history": "Added in API level 14", "FullName": "public void close ()"}, "isSessionDisconnected()": {"Returns": [["boolean", "true if the connection to a text service of this session is disconnected and not alive."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public boolean isSessionDisconnected ()"}, "getSentenceSuggestions(android.view.textservice.TextInfo[],int)": {"Returns": [], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: an array of text metadata for a spell checker"], ["int", "int: the maximum number of suggestions that will be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get suggestions from the specified sentences", "history": "Added in API level 16", "FullName": "public void getSentenceSuggestions (TextInfo[] textInfos, int suggestionsLimit)"}, "getSpellChecker()": {"Returns": [["@B_android#view#textservice#SpellCheckerInfo_E@", "SpellCheckerInfo for the specified locale."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the spell checker service info this spell checker session has.", "history": "Added in API level 14", "FullName": "public SpellCheckerInfo getSpellChecker ()"}}, "Inheritance": [], "ClassName": "android.view.textservice.SpellCheckerSession", "ClassDesc": "The SpellCheckerSession interface provides the per client functionality of SpellCheckerService. In most cases, applications that are using the standard @B_android#widget#TextView_E@ or its subclasses will have little they need to do to work well with spell checker services. The main things you need to be aware of are: Properly set the @B_android#R#attr#inputType_E@ in your editable text views, so that the spell checker will have enough context to help the user in editing text in them. For the rare people amongst us writing client applications that use the spell checker service directly, you will need to use @B_android#view#textservice#SpellCheckerSession#getSuggestions_E@ or @B_android#view#textservice#SpellCheckerSession#getSuggestions_E@ for obtaining results from the spell checker service by yourself. There are a lot of security issues associated with spell checkers, since they could monitor all the text being sent to them through, for instance, @B_android#widget#TextView_E@. The Android spell checker framework also allows arbitrary third party spell checkers, so care must be taken to restrict their selection and interactions. Here are some key points about the security architecture behind the spell checker framework: Only the system is allowed to directly access a spell checker framework's @B_android#service#textservice#SpellCheckerService_E@ interface, via the @B_android#Manifest#permission#BIND_TEXT_SERVICE_E@ permission. This is enforced in the system by not binding to a spell checker service that does not require this permission. The user must explicitly enable a new spell checker in settings before they can be enabled, to confirm with the system that they know about it and want to make it available for use."}