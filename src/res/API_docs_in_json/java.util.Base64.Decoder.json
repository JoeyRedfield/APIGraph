{"Functions": {"decode(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A newly-allocated byte buffer containing the decoded bytes"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer to decode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if src is not in valid Base64 scheme."]], "SeeAlso": [], "Permissions": [], "Description": "Decodes all bytes from the input byte buffer using the @B_java#util#Base64_E@ encoding scheme, writing the results into a newly-allocated ByteBuffer. Upon return, the source buffer's position will be updated to its limit; its limit will not have been changed. The returned output buffer's position will be zero and its limit will be the number of resulting decoded bytes IllegalArgumentException is thrown if the input buffer is not in valid Base64 encoding scheme. The position of the input buffer will not be advanced in this case.", "history": "Added in API level 26", "FullName": "public ByteBuffer decode (ByteBuffer buffer)"}, "decode(byte[], byte[])": {"Returns": [["int", "The number of bytes written to the output byte array"]], "Parameters": [["byte[]", "byte: the byte array to decode"], ["byte[]", "byte: the output byte array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if src is not in valid Base64 scheme, or dst does not have enough space for decoding all input bytes."]], "SeeAlso": [], "Permissions": [], "Description": "Decodes all bytes from the input byte array using the @B_java#util#Base64_E@ encoding scheme, writing the results into the given output byte array, starting at offset 0. It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for decoding all bytes from the input byte array. No bytes will be be written to the output byte array if the output byte array is not big enough. If the input byte array is not in valid Base64 encoding scheme then some bytes may have been written to the output byte array before IllegalargumentException is thrown.", "history": "added in API level 26", "FullName": "public int decode (byte[] src, byte[] dst)"}, "wrap(java.io.InputStream)": {"Returns": [["@B_java#io#InputStream_E@", "the input stream for decoding the specified Base64 encoded byte stream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an input stream for decoding @B_java#util#Base64_E@ encoded byte stream. The read methods of the returned InputStream will throw IOException when reading bytes that cannot be decoded. Closing the returned input stream will close the underlying input stream.", "history": "Added in API level 26", "FullName": "public InputStream wrap (InputStream is)"}, "decode(java.lang.String)": {"Returns": [["byte[]", "A newly-allocated byte array containing the decoded bytes."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to decode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if src is not in valid Base64 scheme"]], "SeeAlso": [], "Permissions": [], "Description": "Decodes a Base64 encoded String into a newly-allocated byte array using the @B_java#util#Base64_E@ encoding scheme. An invocation of this method has exactly the same effect as invoking decode(src.getBytes(StandardCharsets.ISO_8859_1))", "history": "Added in API level 26", "FullName": "public byte[] decode (String src)"}, "decode(byte[],byte[])": {"Returns": [["int", "The number of bytes written to the output byte array"]], "Parameters": [["byte[]", "byte: the byte array to decode"], ["byte[]", "byte: the output byte array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if src is not in valid Base64 scheme, or dst does not have enough space for decoding all input bytes."]], "SeeAlso": [], "Permissions": [], "Description": "Decodes all bytes from the input byte array using the @B_java#util#Base64_E@ encoding scheme, writing the results into the given output byte array, starting at offset 0. It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for decoding all bytes from the input byte array. No bytes will be be written to the output byte array if the output byte array is not big enough. If the input byte array is not in valid Base64 encoding scheme then some bytes may have been written to the output byte array before IllegalargumentException is thrown.", "history": "Added in API level 26", "FullName": "public int decode (byte[] src, byte[] dst)"}, "decode(byte[])": {"Returns": [["byte[]", "A newly-allocated byte array containing the decoded bytes."]], "Parameters": [["byte[]", "byte: the byte array to decode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if src is not in valid Base64 scheme"]], "SeeAlso": [], "Permissions": [], "Description": "Decodes all bytes from the input byte array using the @B_java#util#Base64_E@ encoding scheme, writing the results into a newly-allocated output byte array. The returned byte array is of the length of the resulting bytes.", "history": "Added in API level 26", "FullName": "public byte[] decode (byte[] src)"}}, "Inheritance": [], "ClassName": "java.util.Base64.Decoder", "ClassDesc": "This class implements a decoder for decoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045. The Base64 padding character '=' is accepted and interpreted as the end of the encoded byte data, but is not required. So if the final unit of the encoded byte data only has two or three Base64 characters (without the corresponding padding character(s) padded), they are decoded as if followed by padding character(s). If there is a padding character present in the final unit, the correct number of padding character(s) must be present, otherwise IllegalArgumentException ( IOException when reading from a Base64 stream) is thrown during decoding. Instances of @B_java#util#Base64#Decoder_E@ class are safe for use by multiple concurrent threads. Unless otherwise noted, passing a null argument to a method of this class will cause a @B_java#lang#NullPointerException_E@ to be thrown."}