{"Functions": {"clearMetaKeyState(android.view.View,android.text.Editable,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the given shift states from the edited text.", "history": "Added in API level 3", "FullName": "public abstract void clearMetaKeyState (View view, Editable content, int states)"}, "getInputType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the type of text that this key listener is manipulating, as per @B_android#text#InputType_E@. This is used to determine the mode of the soft keyboard that is shown for the editor. If you return @B_android#text#InputType#TYPE_NULL_E@ then no soft keyboard will provided. In other words, you must be providing your own key pad for on-screen input and the key listener will be used to handle input from a hard keyboard. If you return any other value, a soft input method will be created when the user puts focus in the editor, which will provide a keypad and also consume hard key events. This means that the key listener will generally not be used, instead the soft input method will take care of managing key input as per the content type returned here.", "history": "Added in API level 3", "FullName": "public abstract int getInputType ()"}, "onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the key listener wants to other kinds of key events, return true, otherwise return false and the caller (i.e. the widget host) will handle the key.", "history": "Added in API level 3", "FullName": "public abstract boolean onKeyOther (View view, Editable text, KeyEvent event)"}, "onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the key listener wants to handle this key, return true, otherwise return false and the caller (i.e. the widget host) will handle the key.", "history": "Added in API level 1", "FullName": "public abstract boolean onKeyDown (View view, Editable text, int keyCode, KeyEvent event)"}, "onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the key listener wants to handle this key release, return true, otherwise return false and the caller (i.e. the widget host) will handle the key.", "history": "Added in API level 1", "FullName": "public abstract boolean onKeyUp (View view, Editable text, int keyCode, KeyEvent event)"}}, "Inheritance": [], "ClassName": "android.text.method.KeyListener", "ClassDesc": "Interface for converting text key events into edit operations on an Editable class. Note that for most cases this interface has been superceded by general soft input methods as defined by @B_android#view#inputmethod#InputMethod_E@; it should only be used for cases where an application has its own on-screen keypad and also wants to process hard keyboard events to match it. Key presses on soft input methods are not required to trigger the methods in this listener, and are in fact discouraged to do so. The default android keyboard will not trigger these for any key to any application targetting Jelly Bean or later, and will only deliver it for some key presses to applications targetting Ice Cream Sandwich or earlier."}