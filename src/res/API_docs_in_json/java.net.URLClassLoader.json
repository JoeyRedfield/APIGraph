{"Functions": {"newInstance(java.net.URL[])": {"Returns": [["@B_java#net#URLClassLoader_E@", "the resulting class loader"]], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs to search for classes and resources"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of URLClassLoader for the specified URLs and default parent class loader. If a security manager is installed, the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager.checkPackageAccess before loading the class.", "history": "Added in API level 1", "FullName": "public static URLClassLoader newInstance (URL[] urls)"}, "getPermissions(java.security.CodeSource)": {"Returns": [["@B_java#security#PermissionCollection_E@", "the permissions granted to the codesource"]], "Parameters": [["@B_java#security#CodeSource_E@", "CodeSource: the codesource"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if codesource is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the permissions for the given codesource object. The implementation of this method first calls super.getPermissions and then adds permissions based on the URL of the codesource. If the protocol of this URL is \"jar\", then the permission granted is based on the permission that is required by the URL of the Jar file. If the protocol is \"file\" and there is an authority component, then permission to connect to and accept connections from that authority may be granted. If the protocol is \"file\" and the path specifies a file, then permission to read that file is granted. If protocol is \"file\" and the path is a directory, permission is granted to read all files and (recursively) all files and subdirectories contained in that directory. If the protocol is not \"file\", then permission to connect to and accept connections from the URL's host is granted.", "history": "Added in API level 1", "FullName": "protected PermissionCollection getPermissions (CodeSource codesource)"}, "URLClassLoader(java.net.URL[],java.lang.ClassLoader,java.net.URLStreamHandlerFactory)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs from which to load classes and resources"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader for delegation"], ["@B_java#net#URLStreamHandlerFactory_E@", "URLStreamHandlerFactory: the URLStreamHandlerFactory to use when creating URLs"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader."], ["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkCreateClassLoader_E@"], "Permissions": [], "Description": "Constructs a new URLClassLoader for the specified URLs, parent class loader, and URLStreamHandlerFactory. The parent argument will be used as the parent class loader for delegation. The factory argument will be used as the stream handler factory to obtain protocol handlers when creating new jar URLs. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed.", "history": "Added in API level 1", "FullName": "public URLClassLoader (URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)"}, "findResources(java.lang.String)": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration of URLs If the loader is closed, the Enumeration will be empty."]], "Parameters": [["@B_java#lang#String_E@", "String: the resource name"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.", "history": "Added in API level 1", "FullName": "public Enumeration<URL> findResources (String name)"}, "getResourceAsStream(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "An input stream for reading the resource, or null if the resource could not be found"]], "Parameters": [["@B_java#lang#String_E@", "String: The resource name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an input stream for reading the specified resource. If this loader is closed, then any resources opened by this method will be closed. The search order is described in the documentation for @B_java#lang#ClassLoader#getResource_E@.", "history": "Added in API level 1", "FullName": "public InputStream getResourceAsStream (String name)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if closing any file opened by this class loader resulted in an IOException. Any such exceptions are caught internally. If only one is caught, then it is re-thrown. If more than one exception is caught, then the second and following exceptions are added as suppressed exceptions of the first one caught, which is then re-thrown."], ["@B_java#lang#SecurityException_E@", "if a security manager is set, and it denies @B_java#lang#RuntimePermission_E@(\"closeClassLoader\")"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader. Classes and resources defined by any of this loader's parents in the delegation hierarchy are still accessible. Also, any classes or resources that are already loaded, are still accessible. In the case of jar: and file: URLs, it also closes any files that were opened by it. If another thread is loading a class when the close method is invoked, then the result of that load is undefined. The method makes a best effort attempt to close all opened files, by catching @B_java#io#IOException_E@s internally. Unchecked exceptions and errors are not caught. Calling close on an already closed loader has no effect.", "history": "Added in API level 24", "FullName": "public void close ()"}, "newInstance(java.net.URL[],java.lang.ClassLoader)": {"Returns": [["@B_java#net#URLClassLoader_E@", "the resulting class loader"]], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs to search for classes and resources"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader for delegation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of URLClassLoader for the specified URLs and parent class loader. If a security manager is installed, the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager.checkPackageAccess method before loading the class.", "history": "Added in API level 1", "FullName": "public static URLClassLoader newInstance (URL[] urls, ClassLoader parent)"}, "findResource(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "a URL for the resource, or null if the resource could not be found, or if the loader is closed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds the resource with the specified name on the URL search path.", "history": "Added in API level 1", "FullName": "public URL findResource (String name)"}, "newInstance(java.net.URL[], java.lang.ClassLoader)": {"Returns": [["@B_java#net#URLClassLoader_E@", "the resulting class loader"]], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs to search for classes and resources"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader for delegation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of URLClassLoader for the specified URLs and parent class loader. If a security manager is installed, the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager.checkPackageAccess method before loading the class.", "history": "added in API level 1", "FullName": "public static URLClassLoader newInstance (URL[] urls, ClassLoader parent)"}, "findClass(java.lang.String)": {"Returns": [["@B_java#lang#Class_E@", "the resulting class"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the class"]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", "if the class could not be found, or if the loader is closed."], ["@B_java#lang#NullPointerException_E@", "if name is null."]], "SeeAlso": [], "Permissions": [], "Description": "Finds and loads the class with the specified name from the URL search path. Any URLs referring to JAR files are loaded and opened as needed until the class is found.", "history": "Added in API level 1", "FullName": "protected Class<?> findClass (String name)"}, "URLClassLoader(java.net.URL[],java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs from which to load classes and resources"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader for delegation"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader."], ["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkCreateClassLoader_E@"], "Permissions": [], "Description": "Constructs a new URLClassLoader for the given URLs. The URLs will be searched in the order specified for classes and resources after first searching in the specified parent class loader. Any URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a JAR file which will be downloaded and opened as needed. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed.", "history": "Added in API level 1", "FullName": "public URLClassLoader (URL[] urls, ClassLoader parent)"}, "URLClassLoader(java.net.URL[])": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URLs from which to load classes and resources"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkCreateClassLoader method doesn't allow creation of a class loader."], ["@B_java#lang#NullPointerException_E@", "if urls is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkCreateClassLoader_E@"], "Permissions": [], "Description": "Constructs a new URLClassLoader for the specified URLs using the default delegation parent ClassLoader. The URLs will be searched in the order specified for classes and resources after first searching in the parent class loader. Any URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a JAR file which will be downloaded and opened as needed. If there is a security manager, this method first calls the security manager's checkCreateClassLoader method to ensure creation of a class loader is allowed.", "history": "Added in API level 1", "FullName": "public URLClassLoader (URL[] urls)"}, "definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)": {"Returns": [["@B_java#lang#Package_E@", "the newly defined Package object"]], "Parameters": [["@B_java#lang#String_E@", "String: the package name"], ["@B_java#util#jar#Manifest_E@", "Manifest: the Manifest containing package version and sealing information"], ["@B_java#net#URL_E@", "URL: the code source url for the package, or null if none"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the package name duplicates an existing package either in this class loader or one of its ancestors"]], "SeeAlso": [], "Permissions": [], "Description": "Defines a new package by name in this ClassLoader. The attributes contained in the specified Manifest will be used to obtain package version and sealing information. For sealed packages, the additional URL specifies the code source URL from which the package was loaded.", "history": "Added in API level 1", "FullName": "protected Package definePackage (String name, Manifest man, URL url)"}, "addURL(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to be added to the search path of URLs"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified URL to the list of URLs to search for classes and resources. If the URL specified is null or is already in the list of URLs, or if this loader is closed, then invoking this method has no effect.", "history": "Added in API level 1", "FullName": "protected void addURL (URL url)"}, "getURLs()": {"Returns": [["@B_java#net#URL_E@", "the search path of URLs for loading classes and resources."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the search path of URLs for loading classes and resources. This includes the original list of URLs specified to the constructor, along with any URLs subsequently appended by the addURL() method.", "history": "Added in API level 1", "FullName": "public URL[] getURLs ()"}}, "Inheritance": ["@B_java#lang#ClassLoader_E@", "@B_java#security#SecureClassLoader_E@"], "ClassName": "java.net.URLClassLoader", "ClassDesc": "This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories. Any URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a JAR file which will be opened as needed. The AccessControlContext of the thread that created the instance of URLClassLoader will be used when subsequently loading classes and resources. The classes that are loaded are by default granted permission only to access the URLs specified when the URLClassLoader was created."}