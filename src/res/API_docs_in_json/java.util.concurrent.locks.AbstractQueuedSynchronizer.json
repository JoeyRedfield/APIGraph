{"Functions": {"release(int)": {"Returns": [["boolean", "the value returned from @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryRelease_E@"]], "Parameters": [["int", "int: the release argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryRelease_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases in exclusive mode. Implemented by unblocking one or more threads if @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryRelease_E@ returns true. This method can be used to implement method @B_java#util#concurrent#locks#Lock#unlock_E@.", "history": "Added in API level 1", "FullName": "public final boolean release (int arg)"}, "tryAcquireSharedNanos(int,long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted or the timeout elapses.", "history": "Added in API level 1", "FullName": "public final boolean tryAcquireSharedNanos (int arg, long nanosTimeout)"}, "hasQueuedThreads()": {"Returns": [["boolean", "true if there may be other threads waiting to acquire"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that any other thread will ever acquire. In this implementation, this operation returns in constant time.", "history": "Added in API level 1", "FullName": "public final boolean hasQueuedThreads ()"}, "owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)": {"Returns": [["boolean", "true if owned"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@", "AbstractQueuedSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether the given ConditionObject uses this synchronizer as its lock.", "history": "Added in API level 1", "FullName": "public final boolean owns (AbstractQueuedSynchronizer.ConditionObject condition)"}, "tryAcquireShared(int)": {"Returns": [["int", "a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired."]], "Parameters": [["int", "int: the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if shared mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1", "FullName": "protected int tryAcquireShared (int arg)"}, "acquireShared(int)": {"Returns": [], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ until success.", "history": "Added in API level 1", "FullName": "public final void acquireShared (int arg)"}, "getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)": {"Returns": [["int", "the estimated number of waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@", "AbstractQueuedSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public final int getWaitQueueLength (AbstractQueuedSynchronizer.ConditionObject condition)"}, "tryAcquireNanos(int, long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ until success or the thread is interrupted or the timeout elapses. This method can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "added in API level 1", "FullName": "public final boolean tryAcquireNanos (int arg, long nanosTimeout)"}, "getQueueLength()": {"Returns": [["int", "the estimated number of threads waiting to acquire"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public final int getQueueLength ()"}, "compareAndSetState(int, int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.", "history": "added in API level 1", "FullName": "protected final boolean compareAndSetState (int expect, int update)"}, "releaseShared(int)": {"Returns": [["boolean", "the value returned from @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryReleaseShared_E@"]], "Parameters": [["int", "int: the release argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryReleaseShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases in shared mode. Implemented by unblocking one or more threads if @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryReleaseShared_E@ returns true.", "history": "Added in API level 1", "FullName": "public final boolean releaseShared (int arg)"}, "acquire(int)": {"Returns": [], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ until success. This method can be used to implement method @B_java#util#concurrent#locks#Lock#lock_E@.", "history": "Added in API level 1", "FullName": "public final void acquire (int arg)"}, "hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)": {"Returns": [["boolean", "true if there are any waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@", "AbstractQueuedSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.", "history": "Added in API level 1", "FullName": "public final boolean hasWaiters (AbstractQueuedSynchronizer.ConditionObject condition)"}, "getFirstQueuedThread()": {"Returns": [["@B_java#lang#Thread_E@", "the first (longest-waiting) thread in the queue, or null if no threads are currently queued"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.", "history": "Added in API level 1", "FullName": "public final Thread getFirstQueuedThread ()"}, "tryAcquireNanos(int,long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ until success or the thread is interrupted or the timeout elapses. This method can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "Added in API level 1", "FullName": "public final boolean tryAcquireNanos (int arg, long nanosTimeout)"}, "isQueued(java.lang.Thread)": {"Returns": [["boolean", "true if the given thread is on the queue"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the thread is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread.", "history": "Added in API level 1", "FullName": "public final boolean isQueued (Thread thread)"}, "tryAcquire(int)": {"Returns": [["boolean", "true if successful. Upon success, this object has been acquired."]], "Parameters": [["int", "int: the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if exclusive mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method @B_java#util#concurrent#locks#Lock#tryLock_E@. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1", "FullName": "protected boolean tryAcquire (int arg)"}, "isHeldExclusively()": {"Returns": [["boolean", "true if synchronization is held exclusively; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if conditions are not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a non-waiting @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@ method. (Waiting methods instead invoke @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#release_E@.) The default implementation throws @B_java#lang#UnsupportedOperationException_E@. This method is invoked internally only within @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@ methods, so need not be defined if conditions are not used.", "history": "Added in API level 1", "FullName": "protected boolean isHeldExclusively ()"}, "getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [["@B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@", "AbstractQueuedSynchronizer.ConditionObject: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if exclusive synchronization is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this synchronizer"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.", "history": "Added in API level 1", "FullName": "public final Collection<Thread> getWaitingThreads (AbstractQueuedSynchronizer.ConditionObject condition)"}, "getSharedQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getQueuedThreads_E@ except that it only returns those threads waiting due to a shared acquire.", "history": "Added in API level 1", "FullName": "public final Collection<Thread> getSharedQueuedThreads ()"}, "acquireSharedInterruptibly(int)": {"Returns": [], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted.", "history": "Added in API level 1", "FullName": "public final void acquireSharedInterruptibly (int arg)"}, "AbstractQueuedSynchronizer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero.", "history": "Added in API level 1", "FullName": "protected AbstractQueuedSynchronizer ()"}, "tryAcquireSharedNanos(int, long)": {"Returns": [["boolean", "true if acquired; false if timed out"]], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ but is otherwise uninterpreted and can represent anything you like."], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@, returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ until success or the thread is interrupted or the timeout elapses.", "history": "added in API level 1", "FullName": "public final boolean tryAcquireSharedNanos (int arg, long nanosTimeout)"}, "tryReleaseShared(int)": {"Returns": [["boolean", "true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise"]], "Parameters": [["int", "int: the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if shared mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1", "FullName": "protected boolean tryReleaseShared (int arg)"}, "hasContended()": {"Returns": [["boolean", "true if there has ever been contention"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked. In this implementation, this operation returns in constant time.", "history": "Added in API level 1", "FullName": "public final boolean hasContended ()"}, "acquireInterruptibly(int)": {"Returns": [], "Parameters": [["int", "int: the acquire argument. This value is conveyed to @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ but is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ until success or the thread is interrupted. This method can be used to implement method @B_java#util#concurrent#locks#Lock#lockInterruptibly_E@.", "history": "Added in API level 1", "FullName": "public final void acquireInterruptibly (int arg)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this synchronizer, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String \"State =\" followed by the current value of @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getState_E@, and either \"nonempty\" or \"empty\" depending on whether the queue is empty.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getState()": {"Returns": [["int", "current state value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of synchronization state. This operation has memory semantics of a volatile read.", "history": "Added in API level 1", "FullName": "protected final int getState ()"}, "getQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.", "history": "Added in API level 1", "FullName": "public final Collection<Thread> getQueuedThreads ()"}, "compareAndSetState(int,int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.", "history": "Added in API level 1", "FullName": "protected final boolean compareAndSetState (int expect, int update)"}, "setState(int)": {"Returns": [], "Parameters": [["int", "int: the new state value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of synchronization state. This operation has memory semantics of a volatile write.", "history": "Added in API level 1", "FullName": "protected final void setState (int newState)"}, "tryRelease(int)": {"Returns": [["boolean", "true if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and false otherwise."]], "Parameters": [["int", "int: the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly."], ["@B_java#lang#UnsupportedOperationException_E@", "if exclusive mode is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set the state to reflect a release in exclusive mode. This method is always invoked by the thread performing release. The default implementation throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1", "FullName": "protected boolean tryRelease (int arg)"}, "getExclusiveQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getQueuedThreads_E@ except that it only returns those threads waiting due to an exclusive acquire.", "history": "Added in API level 1", "FullName": "public final Collection<Thread> getExclusiveQueuedThreads ()"}, "hasQueuedPredecessors()": {"Returns": [["boolean", "true if there is a queued thread preceding the current thread, and false if the current thread is at the head of the queue or the queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads have been waiting to acquire longer than the current thread. An invocation of this method is equivalent to (but may be more efficient than): Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that some other thread will acquire before the current thread. Likewise, it is possible for another thread to win a race to enqueue after this method has returned false, due to the queue being empty. This method is designed to be used by a fair synchronizer to avoid @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ method should return false, and its @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ method should return a negative value, if this method returns true (unless this is a reentrant acquire). For example, the tryAcquire method for a fair, reentrant, exclusive mode synchronizer might look like this:", "history": "Added in API level 21", "FullName": "public final boolean hasQueuedPredecessors ()"}}, "Inheritance": ["@B_java#util#concurrent#locks#AbstractOwnableSynchronizer_E@"], "ClassName": "java.util.concurrent.locks.AbstractQueuedSynchronizer", "ClassDesc": "Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues. This class is designed to be a useful basis for most kinds of synchronizers that rely on a single atomic int value to represent state. Subclasses must define the protected methods that change this state, and which define what that state means in terms of this object being acquired or released. Given these, the other methods in this class carry out all queuing and blocking mechanics. Subclasses can maintain other state fields, but only the atomically updated int value manipulated using methods @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getState_E@, @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#setState_E@ and @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#compareAndSetState_E@ is tracked with respect to synchronization. Subclasses should be defined as non-public internal helper classes that are used to implement the synchronization properties of their enclosing class. Class AbstractQueuedSynchronizer does not implement any synchronization interface. Instead it defines methods such as @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#acquireInterruptibly_E@ that can be invoked as appropriate by concrete locks and related synchronizers to implement their public methods. This class supports either or both a default exclusive mode and a shared mode. When acquired in exclusive mode, attempted acquires by other threads cannot succeed. Shared mode acquires by multiple threads may (but need not) succeed. This class does not \"understand\" these differences except in the mechanical sense that when a shared mode acquire succeeds, the next waiting thread (if one exists) must also determine whether it can acquire as well. Threads waiting in the different modes share the same FIFO queue. Usually, implementation subclasses support only one of these modes, but both can come into play for example in a @B_java#util#concurrent#locks#ReadWriteLock_E@. Subclasses that support only exclusive or only shared modes need not define the methods supporting the unused mode. This class defines a nested @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@ class that can be used as a @B_java#util#concurrent#locks#Condition_E@ implementation by subclasses supporting exclusive mode for which method @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#isHeldExclusively_E@ reports whether synchronization is exclusively held with respect to the current thread, method @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#release_E@ invoked with the current @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getState_E@ value fully releases this object, and @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#acquire_E@, given this saved state value, eventually restores this object to its previous acquired state. No AbstractQueuedSynchronizer method otherwise creates such a condition, so if this constraint cannot be met, do not use it. The behavior of @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#ConditionObject_E@ depends of course on the semantics of its synchronizer implementation. This class provides inspection, instrumentation, and monitoring methods for the internal queue, as well as similar methods for condition objects. These can be exported as desired into classes using an AbstractQueuedSynchronizer for their synchronization mechanics. Serialization of this class stores only the underlying atomic integer maintaining state, so deserialized objects have empty thread queues. Typical subclasses requiring serializability will define a readObject method that restores this to a known initial state upon deserialization. To use this class as the basis of a synchronizer, redefine the following methods, as applicable, by inspecting and/or modifying the synchronization state using @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#getState_E@, @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#setState_E@ and/or @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#compareAndSetState_E@: @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquire_E@ @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryRelease_E@ @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryAcquireShared_E@ @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#tryReleaseShared_E@ @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#isHeldExclusively_E@ Each of these methods by default throws @B_java#lang#UnsupportedOperationException_E@. Implementations of these methods must be internally thread-safe, and should in general be short and not block. Defining these methods is the only supported means of using this class. All other methods are declared final because they cannot be independently varied. You may also find the inherited methods from @B_java#util#concurrent#locks#AbstractOwnableSynchronizer_E@ useful to keep track of the thread owning an exclusive synchronizer. You are encouraged to use them -- this enables monitoring and diagnostic tools to assist users in determining which threads hold locks. Even though this class is based on an internal FIFO queue, it does not automatically enforce FIFO acquisition policies. The core of exclusive synchronization takes the form: Because checks in acquire are invoked before enqueuing, a newly acquiring thread may barge ahead of others that are blocked and queued. However, you can, if desired, define tryAcquire and/or tryAcquireShared to disable barging by internally invoking one or more of the inspection methods, thereby providing a fair FIFO acquisition order. In particular, most fair synchronizers can define tryAcquire to return false if @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#hasQueuedPredecessors_E@ (a method specifically designed to be used by fair synchronizers) returns true. Other variations are possible. Throughput and scalability are generally highest for the default barging (also known as greedy, renouncement, and convoy-avoidance) strategy. While this is not guaranteed to be fair or starvation-free, earlier queued threads are allowed to recontend before later queued threads, and each recontention has an unbiased chance to succeed against incoming threads. Also, while acquires do not \"spin\" in the usual sense, they may perform multiple invocations of tryAcquire interspersed with other computations before blocking. This gives most of the benefits of spins when exclusive synchronization is only briefly held, without most of the liabilities when it isn't. If so desired, you can augment this by preceding calls to acquire methods with \"fast-path\" checks, possibly prechecking @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#hasContended_E@ and/or @B_java#util#concurrent#locks#AbstractQueuedSynchronizer#hasQueuedThreads_E@ to only do so if the synchronizer is likely not to be contended. This class provides an efficient and scalable basis for synchronization in part by specializing its range of use to synchronizers that can rely on int state, acquire, and release parameters, and an internal FIFO wait queue. When this does not suffice, you can build synchronizers from a lower level using @B_java#util#concurrent#atomic#package-summary_E@ classes, your own custom @B_java#util#Queue_E@ classes, and @B_java#util#concurrent#locks#LockSupport_E@ blocking support. Here is a non-reentrant mutual exclusion lock class that uses the value zero to represent the unlocked state, and one to represent the locked state. While a non-reentrant lock does not strictly require recording of the current owner thread, this class does so anyway to make usage easier to monitor. It also supports conditions and exposes one of the instrumentation methods: Here is a latch class that is like a @B_java#util#concurrent#CountDownLatch_E@ except that it only requires a single signal to fire. Because a latch is non-exclusive, it uses the shared acquire and release methods."}