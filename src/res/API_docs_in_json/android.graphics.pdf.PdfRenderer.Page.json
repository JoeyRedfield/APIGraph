{"Functions": {"render(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Matrix,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: Destination bitmap to which to render. This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: Optional clip in the bitmap bounds. This value may be null."], ["@B_android#graphics#Matrix_E@", "Matrix: Optional transformation to apply when rendering. This value may be null."], ["int", "int: The render mode. Value is @B_android#graphics#pdf#PdfRenderer#Page#RENDER_MODE_FOR_DISPLAY_E@, or @B_android#graphics#pdf#PdfRenderer#Page#RENDER_MODE_FOR_PRINT_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfRenderer#Page_E@"], "Permissions": [], "Description": "Renders a page to a bitmap. You may optionally specify a rectangular clip in the bitmap bounds. No rendering outside the clip will be performed, hence it is your responsibility to initialize the bitmap outside the clip. You may optionally specify a matrix to transform the content from page coordinates which are in points (1/72\") to bitmap coordinates which are in pixels. If this matrix is not provided this method will apply a transformation that will fit the whole page to the destination clip if provided or the destination bitmap if no clip is provided. The clip and transformation are useful for implementing tile rendering where the destination bitmap contains a portion of the image, for example when zooming. Another useful application is for printing where the size of the bitmap holding the page is too large and a client can render the page in stripes. @B_android#graphics#Bitmap#Config#ARGB_8888_E@. @B_android#graphics#Matrix#isAffine_E@. Hence, you can specify rotation, scaling, translation but not a perspective transformation.", "history": "Added in API level 21", "FullName": "public void render (Bitmap destination, Rect destClip, Matrix transform, int renderMode)"}, "getHeight()": {"Returns": [["int", "The height in points."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the page height in points (1/72\").", "history": "Added in API level 21", "FullName": "public int getHeight ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 21", "FullName": "protected void finalize ()"}, "getWidth()": {"Returns": [["int", "The width in points."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the page width in points (1/72\").", "history": "Added in API level 21", "FullName": "public int getWidth ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfRenderer#openPage_E@"], "Permissions": [], "Description": "Closes this page.", "history": "Added in API level 21", "FullName": "public void close ()"}, "getIndex()": {"Returns": [["int", "The index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the page index.", "history": "Added in API level 21", "FullName": "public int getIndex ()"}}, "Inheritance": [], "ClassName": "android.graphics.pdf.PdfRenderer.Page", "ClassDesc": "This class represents a PDF document page for rendering."}