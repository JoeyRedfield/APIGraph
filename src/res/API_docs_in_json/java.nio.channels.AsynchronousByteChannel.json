{"Functions": {"read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The completion handler"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the buffer is read-only"], ["@B_java#nio#channels#ReadPendingException_E@", "If the channel does not allow more than one read to be outstanding and a previous read has not completed"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel is associated with a @B_java#nio#channels#AsynchronousChannelGroup_E@ that has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The handler parameter is a completion handler that is invoked when the read operation completes (or fails). The result passed to the completion handler is the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream. The read operation may read up to dst.remaining() at the time that the read is attempted. Where 0 without initiating an I/O operation. Suppose that a byte sequence of length Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. This method may be invoked at any time. Some channel types may not allow more than one read to be outstanding at any given time. If a thread initiates a read operation before a previous read operation has completed then a @B_java#nio#channels#ReadPendingException_E@ will be thrown.", "history": "Added in API level 26", "FullName": "public abstract void read (ByteBuffer dst, A attachment, CompletionHandler<Integer, ? super A> handler)"}, "read(java.nio.ByteBuffer)": {"Returns": [["@B_java#util#concurrent#Future_E@", "A Future representing the result of the operation"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the buffer is read-only"], ["@B_java#nio#channels#ReadPendingException_E@", "If the channel does not allow more than one read to be outstanding and a previous read has not completed"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousByteChannel#read_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream.", "history": "Added in API level 26", "FullName": "public abstract Future<Integer> read (ByteBuffer dst)"}, "write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The completion handler object"]], "Throws": [["@B_java#nio#channels#WritePendingException_E@", "If the channel does not allow more than one write to be outstanding and a previous write has not completed"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel is associated with a @B_java#nio#channels#AsynchronousChannelGroup_E@ that has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The handler parameter is a completion handler that is invoked when the write operation completes (or fails). The result passed to the completion handler is the number of bytes written. The write operation may write up to src.remaining() at the time that the write is attempted. Where 0 without initiating an I/O operation. Suppose that a byte sequence of length Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. This method may be invoked at any time. Some channel types may not allow more than one write to be outstanding at any given time. If a thread initiates a write operation before a previous write operation has completed then a @B_java#nio#channels#WritePendingException_E@ will be thrown.", "history": "Added in API level 26", "FullName": "public abstract void write (ByteBuffer src, A attachment, CompletionHandler<Integer, ? super A> handler)"}, "write(java.nio.ByteBuffer)": {"Returns": [["@B_java#util#concurrent#Future_E@", "A Future representing the result of the operation"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#WritePendingException_E@", "If the channel does not allow more than one write to be outstanding and a previous write has not completed"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousByteChannel#write_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns the number of bytes written.", "history": "Added in API level 26", "FullName": "public abstract Future<Integer> write (ByteBuffer src)"}}, "Inheritance": [], "ClassName": "java.nio.channels.AsynchronousByteChannel", "ClassDesc": "An asynchronous channel that can read and write bytes. Some channels may not allow more than one read or write to be outstanding at any given time. If a thread invokes a read method before a previous read operation has completed then a @B_java#nio#channels#ReadPendingException_E@ will be thrown. Similarly, if a write method is invoked before a previous write has completed then @B_java#nio#channels#WritePendingException_E@ is thrown. Whether or not other kinds of I/O operations may proceed concurrently with a read operation depends upon the type of the channel. Note that @B_java#nio#ByteBuffer_E@ are not safe for use by multiple concurrent threads. When a read or write operation is initiated then care must be taken to ensure that the buffer is not accessed until the operation completes."}