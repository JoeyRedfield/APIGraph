{"Functions": {"setNamePattern(java.util.regex.Pattern)": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: if set, only devices with @B_android#bluetooth#BluetoothDevice#getName_E@ matching the given regular expression will be shown This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setNamePattern (Pattern regex)"}, "setRawDataFilter(byte[], byte[])": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining This value will never be null."]], "Parameters": [["byte[]", "byte: bit values that have to match against advertized dataThis value must never be null."], ["byte[]", "byte: bits that have to be matchedThis value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Filter devices by raw advertisement data, as obtained by @B_android#bluetooth#le#ScanRecord#getBytes_E@", "history": "added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setRawDataFilter (byte[] rawDataFilter, byte[] rawDataFilterMask)"}, "checkNotUsed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void checkNotUsed ()"}, "markUsed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void markUsed ()"}, "BluetoothLeDeviceFilter.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder ()"}, "setScanFilter(android.bluetooth.le.ScanFilter)": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining This value will never be null."]], "Parameters": [["@B_android#bluetooth#le#ScanFilter_E@", "ScanFilter: a @B_android#bluetooth#le#ScanFilter_E@ to filter devices by This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#bluetooth#le#ScanFilter_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setScanFilter (ScanFilter scanFilter)"}, "setRawDataFilter(byte[],byte[])": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining This value will never be null."]], "Parameters": [["byte[]", "byte: bit values that have to match against advertized data This value must never be null."], ["byte[]", "byte: bits that have to be matched This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Filter devices by raw advertisement data, as obtained by @B_android#bluetooth#le#ScanRecord#getBytes_E@", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setRawDataFilter (byte[] rawDataFilter, byte[] rawDataFilterMask)"}, "setRenameFromName(java.lang.String,java.lang.String,int,int)": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: to be displayed before the byte data This value must never be null."], ["@B_java#lang#String_E@", "String: to be displayed after the byte data This value must never be null."], ["int", "int: the start name character index to be displayed (inclusive)"], ["int", "int: the number of characters to be displayed from the given index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rename the devices shown in the list, using specific characters from the advertised name, as well as a custom prefix/suffix around them Note that the prefix length is limited to @B_android#companion#BluetoothLeDeviceFilter#getRenamePrefixLengthLimit_E@ characters to ensure that there's enough space to display the byte data The range of name characters to be displayed cannot be empty", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setRenameFromName (String prefix, String suffix, int nameFrom, int nameLength)"}, "build()": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter build ()"}, "setRenameFromBytes(java.lang.String,java.lang.String,int,int,java.nio.ByteOrder)": {"Returns": [["@B_android#companion#BluetoothLeDeviceFilter#Builder_E@", "self for chaining This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: to be displayed before the byte data This value must never be null."], ["@B_java#lang#String_E@", "String: to be displayed after the byte data This value must never be null."], ["int", "int: the start byte index to be displayed (inclusive)"], ["int", "int: the number of bytes to be displayed from the given index"], ["@B_java#nio#ByteOrder_E@", "ByteOrder: whether the given range of bytes is big endian (will be displayed in same order) or little endian (will be flipped before displaying)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rename the devices shown in the list, using specific bytes from the raw advertisement data (@B_android#bluetooth#le#ScanRecord#getBytes_E@) in hexadecimal format, as well as a custom prefix/suffix around them Note that the prefix length is limited to @B_android#companion#BluetoothLeDeviceFilter#getRenamePrefixLengthLimit_E@ characters to ensure that there's enough space to display the byte data The range of bytes to be displayed cannot be empty", "history": "Added in API level 26", "FullName": "public BluetoothLeDeviceFilter.Builder setRenameFromBytes (String prefix, String suffix, int bytesFrom, int bytesLength, ByteOrder byteOrder)"}}, "Inheritance": [], "ClassName": "android.companion.BluetoothLeDeviceFilter.Builder", "ClassDesc": "Builder for @B_android#companion#BluetoothLeDeviceFilter_E@"}