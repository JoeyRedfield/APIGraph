{"Functions": {"JobScheduler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public JobScheduler ()"}, "schedule(android.app.job.JobInfo)": {"Returns": [["int", "the result of the schedule request. Value is @B_android#app#job#JobScheduler#RESULT_FAILURE_E@, or @B_android#app#job#JobScheduler#RESULT_SUCCESS_E@"]], "Parameters": [["@B_android#app#job#JobInfo_E@", "JobInfo: The job you wish scheduled. See @B_android#app#job#JobInfo#Builder_E@ for more detail on the sorts of jobs you can schedule. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Schedule a job to be executed. Will replace any currently scheduled job with the same ID with the new information in the @B_android#app#job#JobInfo_E@. If a job with the given ID is currently running, it will be stopped.", "history": "Added in API level 21", "FullName": "public abstract int schedule (JobInfo job)"}, "enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)": {"Returns": [["int", "the result of the enqueue request. Value is @B_android#app#job#JobScheduler#RESULT_FAILURE_E@, or @B_android#app#job#JobScheduler#RESULT_SUCCESS_E@"]], "Parameters": [["@B_android#app#job#JobInfo_E@", "JobInfo: The job you wish to enqueue work for. See @B_android#app#job#JobInfo#Builder_E@ for more detail on the sorts of jobs you can schedule. This value must never be null."], ["@B_android#app#job#JobWorkItem_E@", "JobWorkItem: New work to enqueue. This will be available later when the job starts running. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#app#job#JobScheduler#schedule_E@, but allows you to enqueue work for a new or existing job. If a job with the same ID is already scheduled, it will be replaced with the new @B_android#app#job#JobInfo_E@, but any previously enqueued work will remain and be dispatched the next time it runs. If a job with the same ID is already running, the new work will be enqueued for it. The work you enqueue is later retrieved through @B_android#app#job#JobParameters#dequeueWork_E@. Be sure to see there about how to process work; the act of enqueueing work changes how you should handle the overall lifecycle of an executing job. It is strongly encouraged that you use the same @B_android#app#job#JobInfo_E@ for all work you enqueue. This will allow the system to optimally schedule work along with any pending and/or currently running work. If the JobInfo changes from the last time the job was enqueued, the system will need to update the associated JobInfo, which can cause a disruption in execution. In particular, this can result in any currently running job that is processing previous work to be stopped and restarted with the new JobInfo. It is recommended that you avoid using @B_android#app#job#JobInfo#Builder#setExtras_E@ or @B_android#app#job#JobInfo#Builder#setTransientExtras_E@ with a JobInfo you are using to enqueue work. The system will try to compare these extras with the previous JobInfo, but there are situations where it may get this wrong and count the JobInfo as changing. (That said, you should be relatively safe with a simple set of consistent data in these fields.) You should never use @B_android#app#job#JobInfo#Builder#setClipData_E@ with work you are enqueue, since currently this will always be treated as a different JobInfo, even if the ClipData contents are exactly the same.", "history": "Added in API level 26", "FullName": "public abstract int enqueue (JobInfo job, JobWorkItem work)"}, "cancelAll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel all jobs that have been scheduled by the calling application.", "history": "Added in API level 21", "FullName": "public abstract void cancelAll ()"}, "getAllPendingJobs()": {"Returns": [["@B_java#util#List_E@", "a list of all of the app's scheduled jobs. This includes jobs that are currently started as well as those that are still waiting to run. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all jobs that have been scheduled by the calling application.", "history": "Added in API level 21", "FullName": "public abstract List<JobInfo> getAllPendingJobs ()"}, "cancel(int)": {"Returns": [], "Parameters": [["int", "int: unique identifier for the job to be canceled, as supplied to @B_android#app#job#JobInfo#Builder#JobInfo#Builder_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel the specified job. If the job is currently executing, it is stopped immediately and the return value from its @B_android#app#job#JobService#onStopJob_E@ method is ignored.", "history": "Added in API level 21", "FullName": "public abstract void cancel (int jobId)"}, "getPendingJob(int)": {"Returns": [["@B_android#app#job#JobInfo_E@", "The @B_android#app#job#JobInfo_E@ description of the given scheduled job, or null if the supplied job ID does not correspond to any job."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the description of a scheduled job.", "history": "Added in API level 24", "FullName": "public abstract JobInfo getPendingJob (int jobId)"}}, "Inheritance": [], "ClassName": "android.app.job.JobScheduler", "ClassDesc": "This is an API for scheduling various types of jobs against the framework that will be executed in your application's own process. See @B_android#app#job#JobInfo_E@ for more description of the types of jobs that can be run and how to construct them. You will construct these JobInfo objects and pass them to the JobScheduler with @B_android#app#job#JobScheduler#schedule_E@. When the criteria declared are met, the system will execute this job on your application's @B_android#app#job#JobService_E@. You identify the service component that implements the logic for your job when you construct the JobInfo using @B_android#app#job#JobInfo#Builder#JobInfo#Builder_E@. The framework will be intelligent about when it executes jobs, and attempt to batch and defer them as much as possible. Typically if you don't specify a deadline on a job, it can be run at any moment depending on the current state of the JobScheduler's internal queue. While a job is running, the system holds a wakelock on behalf of your app. For this reason, you do not need to take any action to guarantee that the device stays awake for the duration of the job. You do not instantiate this class directly; instead, retrieve it through @B_android#content#Context#getSystemService_E@."}