{"Functions": {"registerTorchCallback(android.hardware.camera2.CameraManager.TorchCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraManager#TorchCallback_E@", "CameraManager.TorchCallback: The new callback to send torch mode status to This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the handler is null but the current thread has no looper."]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified about torch mode status. Registering the same callback again will replace the handler with the new one provided. The first time a callback is registered, it is immediately called with the torch mode status of all currently known camera devices with a flash unit. Since this callback will be registered with the camera service, remember to unregister it once it is no longer needed; otherwise the callback will continue to receive events indefinitely and it may prevent other resources from being released. Specifically, the callbacks will be invoked independently of the general activity lifecycle and independently of the state of individual CameraManager instances.", "history": "Added in API level 23", "FullName": "public void registerTorchCallback (CameraManager.TorchCallback callback, Handler handler)"}, "getCameraIdList()": {"Returns": [["@B_java#lang#String_E@", "The list of currently connected camera devices. This value will never be null."]], "Parameters": [], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return the list of currently connected camera devices by identifier, including cameras that may be in use by other camera API clients. Non-removable cameras use integers starting at 0 for their identifiers, while removable cameras have a unique identifier for each individual device, even if they are the same model. This list doesn't contain physical cameras that can only be used as part of a logical multi-camera device.", "history": "Added in API level 21", "FullName": "public String[] getCameraIdList ()"}, "openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice.StateCallback)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The unique identifier of the camera device to open This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor which will be used when invoking the callback. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#camera2#CameraDevice#StateCallback_E@", "CameraDevice.StateCallback: The callback which is invoked once the camera is opened This value must never be null."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera is disabled by device policy, has been disconnected, or is being used by a higher-priority camera API client."], ["@B_java#lang#IllegalArgumentException_E@", "if cameraId, the callback or the executor was null, or the cameraId does not match any currently or previously available camera device."], ["@B_java#lang#SecurityException_E@", "if the application does not have permission to access the camera"]], "SeeAlso": ["@B_android#hardware#camera2#CameraManager#getCameraIdList_E@", "@B_android#app#admin#DevicePolicyManager#setCameraDisabled_E@"], "Permissions": ["@B_android#Manifest#permission#CAMERA_E@"], "Description": "Open a connection to a camera with the given ID. The behavior of this method matches that of @B_android#hardware#camera2#CameraManager#openCamera_E@, except that it uses @B_java#util#concurrent#Executor_E@ as an argument instead of @B_android#os#Handler_E@. Requires @B_android#Manifest#permission#CAMERA_E@", "history": "Added in API level 28", "FullName": "public void openCamera (String cameraId, Executor executor, CameraDevice.StateCallback callback)"}, "setTorchMode(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The unique identifier of the camera device that the flash unit belongs to. This value must never be null."], ["boolean", "boolean: The desired state of the torch mode for the target camera device. Set to true to turn on the torch mode. Set to false to turn off the torch mode."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", "if it failed to access the flash unit. @B_android#hardware#camera2#CameraAccessException#CAMERA_IN_USE_E@ will be thrown if the camera device is in use. @B_android#hardware#camera2#CameraAccessException#MAX_CAMERAS_IN_USE_E@ will be thrown if other camera resources needed to turn on the torch mode are in use. @B_android#hardware#camera2#CameraAccessException#CAMERA_DISCONNECTED_E@ will be thrown if camera service is not available."], ["@B_java#lang#IllegalArgumentException_E@", "if cameraId was null, cameraId doesn't match any currently or previously available camera device, or the camera device doesn't have a flash unit."]], "SeeAlso": [], "Permissions": [], "Description": "Set the flash unit's torch mode of the camera of the given ID without opening the camera device. Use @B_android#hardware#camera2#CameraManager#getCameraIdList_E@ to get the list of available camera devices and use @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@ to check whether the camera device has a flash unit. Note that even if a camera device has a flash unit, turning on the torch mode may fail if the camera device or other camera resources needed to turn on the torch mode are in use. If @B_android#hardware#camera2#CameraManager#setTorchMode_E@ is called to turn on or off the torch mode successfully, @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeChanged_E@ will be invoked. However, even if turning on the torch mode is successful, the application does not have the exclusive ownership of the flash unit or the camera device. The torch mode will be turned off and becomes unavailable when the camera device that the flash unit belongs to becomes unavailable or when other camera resources to keep the torch on become unavailable ( @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeUnavailable_E@ will be invoked). Also, other applications are free to call @B_android#hardware#camera2#CameraManager#setTorchMode_E@ to turn off the torch mode ( @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeChanged_E@ will be invoked). If the latest application that turned on the torch mode exits, the torch mode will be turned off.", "history": "Added in API level 23", "FullName": "public void setTorchMode (String cameraId, boolean enabled)"}, "getCameraCharacteristics(java.lang.String)": {"Returns": [["@B_android#hardware#camera2#CameraCharacteristics_E@", "The properties of the given camera This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The id of the camera device to query. This could be either a standalone camera ID which can be directly opened by @B_android#hardware#camera2#CameraManager#openCamera_E@, or a physical camera ID that can only used as part of a logical multi-camera. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the cameraId does not match any known camera device."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device has been disconnected."]], "SeeAlso": ["@B_android#hardware#camera2#CameraManager#getCameraIdList_E@", "@B_android#app#admin#DevicePolicyManager#setCameraDisabled_E@"], "Permissions": [], "Description": "Query the capabilities of a camera device. These capabilities are immutable for a given camera. From API level 29, this function can also be used to query the capabilities of physical cameras that can only be used as part of logical multi-camera. These cameras cannot be opened directly via @B_android#hardware#camera2#CameraManager#openCamera_E@", "history": "Added in API level 21", "FullName": "public CameraCharacteristics getCameraCharacteristics (String cameraId)"}, "unregisterTorchCallback(android.hardware.camera2.CameraManager.TorchCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraManager#TorchCallback_E@", "CameraManager.TorchCallback: The callback to remove from the notification list This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a previously-added callback; the callback will no longer receive torch mode status callbacks. Removing a callback that isn't registered has no effect.", "history": "Added in API level 23", "FullName": "public void unregisterTorchCallback (CameraManager.TorchCallback callback)"}, "registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager.AvailabilityCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: The executor which will be used to invoke the callback. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#camera2#CameraManager#AvailabilityCallback_E@", "CameraManager.AvailabilityCallback: the new callback to send camera availability notices to This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the executor is null."]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified about camera device availability. The behavior of this method matches that of @B_android#hardware#camera2#CameraManager#registerAvailabilityCallback_E@, except that it uses @B_java#util#concurrent#Executor_E@ as an argument instead of @B_android#os#Handler_E@.", "history": "Added in API level 28", "FullName": "public void registerAvailabilityCallback (Executor executor, CameraManager.AvailabilityCallback callback)"}, "setTorchMode(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The unique identifier of the camera device that the flash unit belongs to.This value must never be null."], ["boolean", "boolean: The desired state of the torch mode for the target camera device. Set to true to turn on the torch mode. Set to false to turn off the torch mode."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", "if it failed to access the flash unit. @B_android#hardware#camera2#CameraAccessException#CAMERA_IN_USE_E@ will be thrown if the camera device is in use. @B_android#hardware#camera2#CameraAccessException#MAX_CAMERAS_IN_USE_E@ will be thrown if other camera resources needed to turn on the torch mode are in use. @B_android#hardware#camera2#CameraAccessException#CAMERA_DISCONNECTED_E@ will be thrown if camera service is not available."], ["@B_java#lang#IllegalArgumentException_E@", "if cameraId was null, cameraId doesn't match any currently or previously available camera device, or the camera device doesn't have a flash unit."]], "SeeAlso": [], "Permissions": [], "Description": "Set the flash unit's torch mode of the camera of the given ID without opening the camera device. Use @B_android#hardware#camera2#CameraManager#getCameraIdList_E@ to get the list of available camera devices and use @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@ to check whether the camera device has a flash unit. Note that even if a camera device has a flash unit, turning on the torch mode may fail if the camera device or other camera resources needed to turn on the torch mode are in use. If @B_android#hardware#camera2#CameraManager#setTorchMode_E@ is called to turn on or off the torch mode successfully, @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeChanged_E@ will be invoked. However, even if turning on the torch mode is successful, the application does not have the exclusive ownership of the flash unit or the camera device. The torch mode will be turned off and becomes unavailable when the camera device that the flash unit belongs to becomes unavailable or when other camera resources to keep the torch on become unavailable ( @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeUnavailable_E@ will be invoked). Also, other applications are free to call @B_android#hardware#camera2#CameraManager#setTorchMode_E@ to turn off the torch mode ( @B_android#hardware#camera2#CameraManager#TorchCallback#onTorchModeChanged_E@ will be invoked). If the latest application that turned on the torch mode exits, the torch mode will be turned off.", "history": "added in API level 23", "FullName": "public void setTorchMode (String cameraId, boolean enabled)"}, "unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraManager#AvailabilityCallback_E@", "CameraManager.AvailabilityCallback: The callback to remove from the notification list This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a previously-added callback; the callback will no longer receive connection and disconnection callbacks. Removing a callback that isn't registered has no effect.", "history": "Added in API level 21", "FullName": "public void unregisterAvailabilityCallback (CameraManager.AvailabilityCallback callback)"}, "registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraManager#AvailabilityCallback_E@", "CameraManager.AvailabilityCallback: the new callback to send camera availability notices to This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the handler is null but the current thread has no looper."]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified about camera device availability. Registering the same callback again will replace the handler with the new one provided. The first time a callback is registered, it is immediately called with the availability status of all currently known camera devices. @B_android#hardware#camera2#CameraManager#AvailabilityCallback#onCameraUnavailable_E@ will be called whenever a camera device is opened by any camera API client. As of API level 23, other camera API clients may still be able to open such a camera device, evicting the existing client if they have higher priority than the existing client of a camera device. See open() for more details. Since this callback will be registered with the camera service, remember to unregister it once it is no longer needed; otherwise the callback will continue to receive events indefinitely and it may prevent other resources from being released. Specifically, the callbacks will be invoked independently of the general activity lifecycle and independently of the state of individual CameraManager instances.", "history": "Added in API level 21", "FullName": "public void registerAvailabilityCallback (CameraManager.AvailabilityCallback callback, Handler handler)"}, "openCamera(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The unique identifier of the camera device to open This value must never be null."], ["@B_android#hardware#camera2#CameraDevice#StateCallback_E@", "CameraDevice.StateCallback: The callback which is invoked once the camera is opened This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera is disabled by device policy, has been disconnected, or is being used by a higher-priority camera API client."], ["@B_java#lang#IllegalArgumentException_E@", "if cameraId or the callback was null, or the cameraId does not match any currently or previously available camera device returned by @B_android#hardware#camera2#CameraManager#getCameraIdList_E@."], ["@B_java#lang#SecurityException_E@", "if the application does not have permission to access the camera"]], "SeeAlso": ["@B_android#hardware#camera2#CameraManager#getCameraIdList_E@", "@B_android#app#admin#DevicePolicyManager#setCameraDisabled_E@"], "Permissions": ["@B_android#Manifest#permission#CAMERA_E@"], "Description": "Open a connection to a camera with the given ID. Use @B_android#hardware#camera2#CameraManager#getCameraIdList_E@ to get the list of available camera devices. Note that even if an id is listed, open may fail if the device is disconnected between the calls to @B_android#hardware#camera2#CameraManager#getCameraIdList_E@ and @B_android#hardware#camera2#CameraManager#openCamera_E@, or if a higher-priority camera API client begins using the camera device. As of API level 23, devices for which the @B_android#hardware#camera2#CameraManager#AvailabilityCallback#onCameraUnavailable_E@ callback has been called due to the device being in use by a lower-priority, background camera API client can still potentially be opened by calling this method when the calling camera API client has a higher priority than the current camera API client using this device. In general, if the top, foreground activity is running within your application process, your process will be given the highest priority when accessing the camera, and this method will succeed even if the camera device is in use by another camera API client. Any lower-priority application that loses control of the camera in this way will receive an @B_android#hardware#camera2#CameraDevice#StateCallback#onDisconnected_E@ callback. Once the camera is successfully opened, @B_android#hardware#camera2#CameraDevice#StateCallback#onOpened_E@ will be invoked with the newly opened @B_android#hardware#camera2#CameraDevice_E@. The camera device can then be set up for operation by calling @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ and @B_android#hardware#camera2#CameraDevice#createCaptureRequest_E@ If the camera becomes disconnected during initialization after this function call returns, @B_android#hardware#camera2#CameraDevice#StateCallback#onDisconnected_E@ with a @B_android#hardware#camera2#CameraDevice_E@ in the disconnected state (and @B_android#hardware#camera2#CameraDevice#StateCallback#onOpened_E@ will be skipped). If opening the camera device fails, then the device callback's @B_android#hardware#camera2#CameraDevice#StateCallback#onError_E@ method will be called, and subsequent calls on the camera device will throw a @B_android#hardware#camera2#CameraAccessException_E@. Requires @B_android#Manifest#permission#CAMERA_E@", "history": "Added in API level 21", "FullName": "public void openCamera (String cameraId, CameraDevice.StateCallback callback, Handler handler)"}, "registerTorchCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager.TorchCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: The executor which will be used to invoke the callback This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#camera2#CameraManager#TorchCallback_E@", "CameraManager.TorchCallback: The new callback to send torch mode status to This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the executor is null."]], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified about torch mode status. The behavior of this method matches that of @B_android#hardware#camera2#CameraManager#registerTorchCallback_E@, except that it uses @B_java#util#concurrent#Executor_E@ as an argument instead of @B_android#os#Handler_E@.", "history": "Added in API level 28", "FullName": "public void registerTorchCallback (Executor executor, CameraManager.TorchCallback callback)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.CameraManager", "ClassDesc": "A system service manager for detecting, characterizing, and connecting to @B_android#hardware#camera2#CameraDevice_E@. For more details about communicating with camera devices, read the Camera developer guide or the @B_android#hardware#camera2#package-summary_E@ package documentation."}