{"Functions": {"getJarFile()": {"Returns": [["@B_java#util#jar#JarFile_E@", "the JAR file for this connection. If the connection is a connection to an entry of a JAR file, the JAR file object is returned"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an IOException occurs while trying to connect to the JAR file for this connection."]], "SeeAlso": ["@B_java#net#URLConnection#connect_E@"], "Permissions": [], "Description": "Return the JAR file for this connection.", "history": "Added in API level 1", "FullName": "public abstract JarFile getJarFile ()"}, "getManifest()": {"Returns": [["@B_java#util#jar#Manifest_E@", "the manifest object corresponding to the JAR file object for this connection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if getting the JAR file for this connection causes an IOException to be thrown."]], "SeeAlso": ["@B_java#net#JarURLConnection#getJarFile_E@"], "Permissions": [], "Description": "Returns the Manifest for this connection, or null if none.", "history": "Added in API level 1", "FullName": "public Manifest getManifest ()"}, "getJarFileURL()": {"Returns": [["@B_java#net#URL_E@", "the URL for the Jar file for this connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the URL for the Jar file for this connection.", "history": "Added in API level 1", "FullName": "public URL getJarFileURL ()"}, "getMainAttributes()": {"Returns": [["@B_java#util#jar#Attributes_E@", "the main Attributes for the JAR file for this connection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if getting the manifest causes an IOException to be thrown."]], "SeeAlso": ["@B_java#net#JarURLConnection#getJarFile_E@", "@B_java#net#JarURLConnection#getManifest_E@"], "Permissions": [], "Description": "Returns the main Attributes for the JAR file for this connection.", "history": "Added in API level 1", "FullName": "public Attributes getMainAttributes ()"}, "getEntryName()": {"Returns": [["@B_java#lang#String_E@", "the entry name for this connection, if any."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the entry name for this connection. This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry.", "history": "Added in API level 1", "FullName": "public String getEntryName ()"}, "JarURLConnection(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL"]], "Throws": [["@B_java#net#MalformedURLException_E@", "if no legal protocol could be found in a specification string or the string could not be parsed."]], "SeeAlso": [], "Permissions": [], "Description": "Creates the new JarURLConnection to the specified URL.", "history": "Added in API level 1", "FullName": "protected JarURLConnection (URL url)"}, "getJarEntry()": {"Returns": [["@B_java#util#jar#JarEntry_E@", "the JAR entry object for this connection, or null if the JAR URL for this connection points to a JAR file."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if getting the JAR file for this connection causes an IOException to be thrown."]], "SeeAlso": ["@B_java#net#JarURLConnection#getJarFile_E@", "@B_java#net#JarURLConnection#getJarEntry_E@"], "Permissions": [], "Description": "Return the JAR entry object for this connection, if any. This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry.", "history": "Added in API level 1", "FullName": "public JarEntry getJarEntry ()"}, "getAttributes()": {"Returns": [["@B_java#util#jar#Attributes_E@", "the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if getting the JAR entry causes an IOException to be thrown."]], "SeeAlso": ["@B_java#net#JarURLConnection#getJarEntry_E@"], "Permissions": [], "Description": "Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise.", "history": "Added in API level 1", "FullName": "public Attributes getAttributes ()"}, "getCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if getting the JAR entry causes an IOException to be thrown."]], "SeeAlso": ["@B_java#net#JarURLConnection#getJarEntry_E@"], "Permissions": [], "Description": "Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise. This method can only be called once the connection has been completely verified by reading from the input stream until the end of the stream has been reached. Otherwise, this method will return null", "history": "Added in API level 1", "FullName": "public Certificate[] getCertificates ()"}}, "Inheritance": ["@B_java#net#URLConnection_E@"], "ClassName": "java.net.JarURLConnection", "ClassDesc": "A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file. The syntax of a JAR URL is: for example: jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class Jar URLs should be used to refer to a JAR file or entries in a JAR file. The example above is a JAR URL which refers to a JAR entry. If the entry name is omitted, the URL refers to the whole JAR file: jar:http://www.foo.com/bar/baz.jar!/ Users should cast the generic URLConnection to a JarURLConnection when they know that the URL they created is a JAR URL, and they need JAR-specific functionality. For example: JarURLConnection instances can only be used to read from JAR files. It is not possible to get a @B_java#io#OutputStream_E@ to modify or write to the underlying JAR file using this class. Examples: !/ is referred to as the separator. When constructing a JAR url via new URL(context, spec), the following rules apply: if there is no context URL and the specification passed to the URL constructor doesn't contain a separator, the URL is considered to refer to a JarFile. if there is a context URL, the context URL is assumed to refer to a JAR file or a Jar directory. if the specification begins with a '/', the Jar directory is ignored, and the spec is considered to be at the root of the Jar file. Examples:"}