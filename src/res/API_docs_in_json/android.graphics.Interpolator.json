{"Functions": {"getValueCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final int getValueCount ()"}, "timeToValues(int,float[])": {"Returns": [["@B_android#graphics#Interpolator#Result_E@", "how the values were computed (even if values == null)"]], "Parameters": [["int", "int: The time (in milliseconds) used to sample into the Interpolator. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Where to write the computed values (may be NULL)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a millisecond time value (msec), return the interpolated values and return whether the specified time was within the range of key times (NORMAL), was before the first key time (FREEZE_START) or after the last key time (FREEZE_END). In any event, computed values are always returned.", "history": "Added in API level 1", "FullName": "public Interpolator.Result timeToValues (int msec, float[] values)"}, "reset(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the Interpolator to have the specified number of values and keyFrames. After this call the values for each keyFrame must be assigned using setKeyFrame().", "history": "added in API level 1", "FullName": "public void reset (int valueCount, int frameCount)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "setKeyFrame(int,int,float[],float[])": {"Returns": [], "Parameters": [["int", "int: The index of the key frame to assign"], ["int", "int: The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Array of values associated with theis key frame"], ["float[]", "float: (may be null) Optional array of 4 blend values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the keyFrame (specified by index) a time value and an array of key values and blend array.", "history": "Added in API level 1", "FullName": "public void setKeyFrame (int index, int msec, float[] values, float[] blend)"}, "setRepeatMirror(float, boolean)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a repeat count (which may be fractional) for the interpolator, and whether the interpolator should mirror its repeats. The default settings are repeatCount = 1, and mirror = false.", "history": "added in API level 1", "FullName": "public void setRepeatMirror (float repeatCount, boolean mirror)"}, "Interpolator(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Interpolator (int valueCount)"}, "timeToValues(float[])": {"Returns": [["@B_android#graphics#Interpolator#Result_E@", "no returns description in source"]], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls timeToValues(msec, values) with the msec set to now (by calling (int)SystemClock.uptimeMillis().)", "history": "Added in API level 1", "FullName": "public Interpolator.Result timeToValues (float[] values)"}, "getKeyFrameCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final int getKeyFrameCount ()"}, "setKeyFrame(int, int, float[], float[])": {"Returns": [], "Parameters": [["int", "int: The index of the key frame to assign"], ["int", "int: The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Array of values associated with theis key frame"], ["float[]", "float: (may be null) Optional array of 4 blend values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the keyFrame (specified by index) a time value and an array of key values and blend array.", "history": "added in API level 1", "FullName": "public void setKeyFrame (int index, int msec, float[] values, float[] blend)"}, "reset(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the Interpolator to have the specified number of values and an implicit keyFrame count of 2 (just a start and end). After this call the values for each keyFrame must be assigned using setKeyFrame().", "history": "Added in API level 1", "FullName": "public void reset (int valueCount)"}, "timeToValues(int, float[])": {"Returns": [["@B_android#graphics#Interpolator#Result_E@", "how the values were computed (even if values == null)"]], "Parameters": [["int", "int: The time (in milliseconds) used to sample into the Interpolator. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Where to write the computed values (may be NULL)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a millisecond time value (msec), return the interpolated values and return whether the specified time was within the range of key times (NORMAL), was before the first key time (FREEZE_START) or after the last key time (FREEZE_END). In any event, computed values are always returned.", "history": "added in API level 1", "FullName": "public Interpolator.Result timeToValues (int msec, float[] values)"}, "Interpolator(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Interpolator (int valueCount, int frameCount)"}, "setRepeatMirror(float,boolean)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a repeat count (which may be fractional) for the interpolator, and whether the interpolator should mirror its repeats. The default settings are repeatCount = 1, and mirror = false.", "history": "Added in API level 1", "FullName": "public void setRepeatMirror (float repeatCount, boolean mirror)"}, "Interpolator(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Interpolator (int valueCount, int frameCount)"}, "setKeyFrame(int,int,float[])": {"Returns": [], "Parameters": [["int", "int: The index of the key frame to assign"], ["int", "int: The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Array of values associated with theis key frame"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values).", "history": "Added in API level 1", "FullName": "public void setKeyFrame (int index, int msec, float[] values)"}, "setKeyFrame(int, int, float[])": {"Returns": [], "Parameters": [["int", "int: The index of the key frame to assign"], ["int", "int: The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock"], ["float[]", "float: Array of values associated with theis key frame"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values).", "history": "added in API level 1", "FullName": "public void setKeyFrame (int index, int msec, float[] values)"}, "reset(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the Interpolator to have the specified number of values and keyFrames. After this call the values for each keyFrame must be assigned using setKeyFrame().", "history": "Added in API level 1", "FullName": "public void reset (int valueCount, int frameCount)"}}, "Inheritance": [], "ClassName": "android.graphics.Interpolator", "ClassDesc": ""}