{"Functions": {"setStartDelay(long)": {"Returns": [], "Parameters": [["long", "long: The amount of the delay, in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay processing the animation after @B_android#animation#Animator#start_E@ is called.", "history": "Added in API level 11", "FullName": "public abstract void setStartDelay (long startDelay)"}, "setupStartValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract starting values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupStartValues ()"}, "addPauseListener(android.animation.Animator.AnimatorPauseListener)": {"Returns": [], "Parameters": [["@B_android#animation#Animator#AnimatorPauseListener_E@", "Animator.AnimatorPauseListener: the listener to be added to the current set of pause listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a pause listener to this animator.", "history": "Added in API level 19", "FullName": "public void addPauseListener (Animator.AnimatorPauseListener listener)"}, "getDuration()": {"Returns": [["long", "The length of the animation, in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the duration of the animation.", "history": "Added in API level 11", "FullName": "public abstract long getDuration ()"}, "isRunning()": {"Returns": [["boolean", "Whether the Animator is running."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).", "history": "Added in API level 11", "FullName": "public abstract boolean isRunning ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels the animation. Unlike @B_android#animation#Animator#end_E@, cancel() causes the animation to stop in its tracks, sending an @B_android#animation#Animator#AnimatorListener#onAnimationCancel_E@ to its listeners, followed by an @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ message. This method must be called on the thread that is running the animation.", "history": "Added in API level 11", "FullName": "public void cancel ()"}, "removePauseListener(android.animation.Animator.AnimatorPauseListener)": {"Returns": [], "Parameters": [["@B_android#animation#Animator#AnimatorPauseListener_E@", "Animator.AnimatorPauseListener: the listener to be removed from the current set of pause listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a pause listener from the set listening to this animation.", "history": "Added in API level 19", "FullName": "public void removePauseListener (Animator.AnimatorPauseListener listener)"}, "setTarget(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The object being animated This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the target object whose property will be animated by this animation. Not all subclasses operate on target objects (for example, @B_android#animation#ValueAnimator_E@, but this method is on the superclass for the convenience of dealing generically with those subclasses that do handle targets.", "history": "Added in API level 11", "FullName": "public void setTarget (Object target)"}, "getStartDelay()": {"Returns": [["long", "the number of milliseconds to delay running the animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay processing the animation after @B_android#animation#Animator#start_E@ is called.", "history": "Added in API level 11", "FullName": "public abstract long getStartDelay ()"}, "isStarted()": {"Returns": [["boolean", "Whether the Animator has been started and not yet ended."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this Animator has been started and not yet ended. For reusable Animators (which most Animators are, apart from the one-shot animator produced by @B_android#view#ViewAnimationUtils#createCircularReveal_E@), this state is a superset of @B_android#animation#Animator#isRunning_E@, because an Animator with a nonzero @B_android#animation#Animator#getStartDelay_E@ will return true for @B_android#animation#Animator#isStarted_E@ during the delay phase, whereas @B_android#animation#Animator#isRunning_E@ will return true only after the delay phase is complete. Non-reusable animators will always return true after they have been started, because they cannot return to a non-started state.", "history": "Added in API level 14", "FullName": "public boolean isStarted ()"}, "clone()": {"Returns": [["@B_android#animation#Animator_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public Animator clone ()"}, "pause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#resume_E@", "@B_android#animation#Animator#isPaused_E@", "@B_android#animation#Animator#AnimatorPauseListener_E@"], "Permissions": [], "Description": "Pauses a running animation. This method should only be called on the same thread on which the animation was started. If the animation has not yet been @B_android#animation#Animator#isStarted_E@ or has since ended, then the call is ignored. Paused animations can be resumed by calling @B_android#animation#Animator#resume_E@.", "history": "Added in API level 19", "FullName": "public void pause ()"}, "removeListener(android.animation.Animator.AnimatorListener)": {"Returns": [], "Parameters": [["@B_android#animation#Animator#AnimatorListener_E@", "Animator.AnimatorListener: the listener to be removed from the current set of listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a listener from the set listening to this animation.", "history": "Added in API level 11", "FullName": "public void removeListener (Animator.AnimatorListener listener)"}, "isPaused()": {"Returns": [["boolean", "True if the animator is currently paused, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#pause_E@", "@B_android#animation#Animator#resume_E@"], "Permissions": [], "Description": "Returns whether this animator is currently in a paused state.", "history": "Added in API level 19", "FullName": "public boolean isPaused ()"}, "addListener(android.animation.Animator.AnimatorListener)": {"Returns": [], "Parameters": [["@B_android#animation#Animator#AnimatorListener_E@", "Animator.AnimatorListener: the listener to be added to the current set of listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.", "history": "Added in API level 11", "FullName": "public void addListener (Animator.AnimatorListener listener)"}, "getListeners()": {"Returns": [["@B_java#util#ArrayList_E@", "ArrayList The set of listeners."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of @B_android#animation#Animator#AnimatorListener_E@ objects that are currently listening for events on this Animator object.", "history": "Added in API level 11", "FullName": "public ArrayList<Animator.AnimatorListener> getListeners ()"}, "setDuration(long)": {"Returns": [["@B_android#animation#Animator_E@", "no returns description in source"]], "Parameters": [["long", "long: The length of the animation, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration of the animation.", "history": "Added in API level 11", "FullName": "public abstract Animator setDuration (long duration)"}, "setupEndValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract ending values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupEndValues ()"}, "removeAllListeners()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all @B_android#animation#Animator#addListener_E@ and @B_android#animation#Animator#addPauseListener_E@ from this object.", "history": "Added in API level 11", "FullName": "public void removeAllListeners ()"}, "getTotalDuration()": {"Returns": [["long", "Total time an animation takes to finish, starting from the time @B_android#animation#Animator#start_E@ is called. @B_android#animation#Animator#DURATION_INFINITE_E@ will be returned if the animation or any child animation repeats infinite times."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating. Return @B_android#animation#Animator#DURATION_INFINITE_E@ if the duration is infinite.", "history": "Added in API level 24", "FullName": "public long getTotalDuration ()"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: the interpolator to be used by this animation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The time interpolator used in calculating the elapsed fraction of the animation. The interpolator determines whether the animation runs with linear or non-linear motion, such as acceleration and deceleration. The default value is @B_android#view#animation#AccelerateDecelerateInterpolator_E@.", "history": "Added in API level 11", "FullName": "public abstract void setInterpolator (TimeInterpolator value)"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#pause_E@", "@B_android#animation#Animator#isPaused_E@", "@B_android#animation#Animator#AnimatorPauseListener_E@"], "Permissions": [], "Description": "Resumes a paused animation, causing the animator to pick up where it left off when it was paused. This method should only be called on the same thread on which the animation was started. Calls to resume() on an animator that is not currently paused will be ignored.", "history": "Added in API level 19", "FullName": "public void resume ()"}, "Animator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 11", "FullName": "public Animator ()"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The timing interpolator for this animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timing interpolator that this animation uses.", "history": "Added in API level 18", "FullName": "public TimeInterpolator getInterpolator ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to @B_android#animation#Animator#AnimatorListener#onAnimationStart_E@ for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy.", "history": "Added in API level 11", "FullName": "public void start ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ends the animation. This causes the animation to assign the end value of the property being animated, then calling the @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ method on its listeners. This method must be called on the thread that is running the animation.", "history": "Added in API level 11", "FullName": "public void end ()"}}, "Inheritance": [], "ClassName": "android.animation.Animator", "ClassDesc": "This is the superclass for classes which provide basic support for animations which can be started, ended, and have AnimatorListeners added to them."}