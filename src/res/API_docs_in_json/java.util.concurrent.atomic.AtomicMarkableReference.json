{"Functions": {"AtomicMarkableReference(V,boolean)": {"Returns": [], "Parameters": [["V", "V: the initial reference"], ["boolean", "boolean: the initial mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicMarkableReference with the given initial values.", "history": "Added in API level 1", "FullName": "public AtomicMarkableReference (V initialRef, boolean initialMark)"}, "weakCompareAndSet(V, V, boolean, boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["boolean", "boolean: the expected value of the mark"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark. compareAndSet.", "history": "added in API level 1", "FullName": "public boolean weakCompareAndSet (V expectedReference, V newReference, boolean expectedMark, boolean newMark)"}, "attemptMark(V,boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.", "history": "Added in API level 1", "FullName": "public boolean attemptMark (V expectedReference, boolean newMark)"}, "set(V, boolean)": {"Returns": [], "Parameters": [["V", "V: the new value for the reference"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unconditionally sets the value of both the reference and mark.", "history": "added in API level 1", "FullName": "public void set (V newReference, boolean newMark)"}, "weakCompareAndSet(V,V,boolean,boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["boolean", "boolean: the expected value of the mark"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark. compareAndSet.", "history": "Added in API level 1", "FullName": "public boolean weakCompareAndSet (V expectedReference, V newReference, boolean expectedMark, boolean newMark)"}, "attemptMark(V, boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.", "history": "added in API level 1", "FullName": "public boolean attemptMark (V expectedReference, boolean newMark)"}, "isMarked()": {"Returns": [["boolean", "the current value of the mark"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the mark.", "history": "Added in API level 1", "FullName": "public boolean isMarked ()"}, "AtomicMarkableReference(V, boolean)": {"Returns": [], "Parameters": [["V", "V: the initial reference"], ["boolean", "boolean: the initial mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicMarkableReference with the given initial values.", "history": "added in API level 1", "FullName": "public AtomicMarkableReference (V initialRef, boolean initialMark)"}, "set(V,boolean)": {"Returns": [], "Parameters": [["V", "V: the new value for the reference"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unconditionally sets the value of both the reference and mark.", "history": "Added in API level 1", "FullName": "public void set (V newReference, boolean newMark)"}, "get(boolean[])": {"Returns": [["V", "the current value of the reference"]], "Parameters": [["boolean[]", "boolean: an array of size of at least one. On return, markHolder[0] will hold the value of the mark."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current values of both the reference and the mark. Typical usage is boolean[1] holder; ref = v.get(holder); .", "history": "Added in API level 1", "FullName": "public V get (boolean[] markHolder)"}, "getReference()": {"Returns": [["V", "the current value of the reference"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the reference.", "history": "Added in API level 1", "FullName": "public V getReference ()"}, "compareAndSet(V, V, boolean, boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["boolean", "boolean: the expected value of the mark"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.", "history": "added in API level 1", "FullName": "public boolean compareAndSet (V expectedReference, V newReference, boolean expectedMark, boolean newMark)"}, "compareAndSet(V,V,boolean,boolean)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["boolean", "boolean: the expected value of the mark"], ["boolean", "boolean: the new value for the mark"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.", "history": "Added in API level 1", "FullName": "public boolean compareAndSet (V expectedReference, V newReference, boolean expectedMark, boolean newMark)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicMarkableReference<V>", "ClassDesc": "An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically. Implementation note: This implementation maintains markable references by creating internal objects representing \"boxed\" [reference, boolean] pairs."}