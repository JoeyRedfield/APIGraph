{"Functions": {"OffHostApduService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 19", "FullName": "public OffHostApduService ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The Android platform itself will not bind to this service, but merely uses its declaration to keep track of what AIDs the service is interested in. This information is then used to present the user with a list of applications that can handle an AID, as well as correctly route those AIDs either to the host (in case the user preferred a @B_android#nfc#cardemulation#HostApduService_E@), or to an off-host execution environment (in case the user preferred a @B_android#nfc#cardemulation#OffHostApduService_E@. Implementers may define additional actions outside of the Android namespace that allow further interactions with the off-host execution environment. Such implementations would need to override this method.", "history": "Added in API level 19", "FullName": "public abstract IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.nfc.cardemulation.OffHostApduService", "ClassDesc": "OffHostApduService is a convenience @B_android#app#Service_E@ class that can be extended to describe one or more NFC applications that are residing off-host, for example on an embedded secure element or a UICC. Off-host applications represented by this class are based on the NFC-Forum ISO-DEP protocol (based on ISO/IEC 14443-4) and support processing command Application Protocol Data Units (APDUs) as defined in the ISO/IEC 7816-4 specification. When a remote NFC device wants to talk to your off-host NFC application, it sends a so-called \"SELECT AID\" APDU as defined in the ISO/IEC 7816-4 specification. The AID is an application identifier defined in ISO/IEC 7816-4. The registration procedure for AIDs is defined in the ISO/IEC 7816-5 specification. If you don't want to register an AID, you are free to use AIDs in the proprietary range: bits 8-5 of the first byte must each be set to '1'. For example, \"0xF00102030405\" is a proprietary AID. If you do use proprietary AIDs, it is recommended to choose an AID of at least 6 bytes, to reduce the risk of collisions with other applications that might be using proprietary AIDs as well. In some cases, an off-host environment may need to register multiple AIDs to implement a certain application, and it needs to be sure that it is the default handler for all of these AIDs (as opposed to some AIDs in the group going to another service). An AID group is a list of AIDs that should be considered as belonging together by the OS. For all AIDs in an AID group, the OS will guarantee one of the following: All AIDs in the group are routed to the off-host execution environment No AIDs in the group are routed to the off-host execution environment In other words, there is no in-between state, where some AIDs in the group can be routed to this off-host execution environment, and some to another or a host-based @B_android#nfc#cardemulation#HostApduService_E@. Each AID group can be associated with a category. This allows the Android OS to classify services, and it allows the user to set defaults at the category level instead of the AID level. You can use @B_android#nfc#cardemulation#CardEmulation#isDefaultServiceForCategory_E@ to determine if your off-host service is the default handler for a category. In this version of the platform, the only known categories are @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@ and @B_android#nfc#cardemulation#CardEmulation#CATEGORY_OTHER_E@. AID groups without a category, or with a category that is not recognized by the current platform version, will automatically be grouped into the @B_android#nfc#cardemulation#CardEmulation#CATEGORY_OTHER_E@ category. To tell the platform which AIDs reside off-host and are managed by this service, a @B_android#nfc#cardemulation#OffHostApduService#SERVICE_META_DATA_E@ entry must be included in the declaration of the service. An example of a OffHostApduService manifest declaration is shown below: The @B_android#R#styleable#OffHostApduService_E@ is required to contain a @B_android#R#styleable#OffHostApduService_description_E@ attribute that contains a user-friendly description of the service that may be shown in UI. The @B_android#R#styleable#OffHostApduService_E@ must contain one or more @B_android#R#styleable#AidGroup_E@ tags. Each @B_android#R#styleable#AidGroup_E@ must contain one or more @B_android#R#styleable#AidFilter_E@ tags, each of which contains a single AID. The AID must be specified in hexadecimal format, and contain an even number of characters. This registration will allow the service to be included as an option for being the default handler for categories. The Android OS will take care of correctly routing the AIDs to the off-host execution environment, based on which service the user has selected to be the handler for a certain category. The service may define additional actions outside of the Android namespace that provide further interaction with the off-host execution environment. Use of this class requires the @B_android#content#pm#PackageManager#FEATURE_NFC_HOST_CARD_EMULATION_E@ to be present on the device."}