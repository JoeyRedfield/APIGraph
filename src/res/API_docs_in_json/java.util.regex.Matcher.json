{"Functions": {"find()": {"Returns": [["boolean", "true if, and only if, a subsequence of the input sequence matches this matcher's pattern"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next subsequence of the input sequence that matches the pattern. This method starts at the beginning of this matcher's region, or, if a previous invocation of the method was successful and the matcher has not since been reset, at the first character not matched by the previous match. If the match succeeds then more information can be obtained via the", "history": "Added in API level 1", "FullName": "public boolean find ()"}, "group()": {"Returns": [["@B_java#lang#String_E@", "The (possibly empty) subsequence matched by the previous match, in string form"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the input subsequence matched by the previous match. For a matcher Note that some patterns, for example", "history": "Added in API level 1", "FullName": "public String group ()"}, "toMatchResult()": {"Returns": [["@B_java#util#regex#MatchResult_E@", "a MatchResult with the state of this matcher"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the match state of this matcher as a @B_java#util#regex#MatchResult_E@. The result is unaffected by subsequent operations performed upon this matcher.", "history": "Added in API level 1", "FullName": "public MatchResult toMatchResult ()"}, "appendTail(java.lang.StringBuffer)": {"Returns": [["@B_java#lang#StringBuffer_E@", "The target string buffer"]], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: The target string buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements a terminal append-and-replace step. This method reads characters from the input sequence, starting at the append position, and appends them to the given string buffer. It is intended to be invoked after one or more invocations of the @B_java#util#regex#Matcher#appendReplacement_E@ method in order to copy the remainder of the input sequence.", "history": "Added in API level 1", "FullName": "public StringBuffer appendTail (StringBuffer sb)"}, "hitEnd()": {"Returns": [["boolean", "true iff the end of input was hit in the last match; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher. When this method returns true, then it is possible that more input would have changed the result of the last search.", "history": "Added in API level 1", "FullName": "public boolean hitEnd ()"}, "appendReplacement(java.lang.StringBuffer,java.lang.String)": {"Returns": [["@B_java#util#regex#Matcher_E@", "This matcher"]], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: The target string buffer"], ["@B_java#lang#String_E@", "String: The replacement string"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IllegalArgumentException_E@", "If the replacement string refers to a named-capturing group that does not exist in the pattern"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the replacement string refers to a capturing group that does not exist in the pattern"]], "SeeAlso": [], "Permissions": [], "Description": "Implements a non-terminal append-and-replace step. This method performs the following actions: The replacement string may contain references to subsequences captured during the previous match: Each occurrence of @B_java#util#regex#Matcher#group_E@ or @B_java#util#regex#Matcher#group_E@ respectively. For Note that backslashes ( This method is intended to be used in a loop together with the @B_java#util#regex#Matcher#appendTail_E@ and @B_java#util#regex#Matcher#find_E@ methods. The following code, for example, writes", "history": "Added in API level 1", "FullName": "public Matcher appendReplacement (StringBuffer sb, String replacement)"}, "lookingAt()": {"Returns": [["boolean", "true if, and only if, a prefix of the input sequence matches this matcher's pattern"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to match the input sequence, starting at the beginning of the region, against the pattern. Like the @B_java#util#regex#Matcher#matches_E@ method, this method always starts at the beginning of the region; unlike that method, it does not require that the entire region be matched. If the match succeeds then more information can be obtained via the", "history": "Added in API level 1", "FullName": "public boolean lookingAt ()"}, "useTransparentBounds(boolean)": {"Returns": [["@B_java#util#regex#Matcher_E@", "this matcher"]], "Parameters": [["boolean", "boolean: a boolean indicating whether to use opaque or transparent regions"]], "Throws": [], "SeeAlso": ["@B_java#util#regex#Matcher#hasTransparentBounds_E@"], "Permissions": [], "Description": "Sets the transparency of region bounds for this matcher. Invoking this method with an argument of Using transparent bounds, the boundaries of this matcher's region are transparent to lookahead, lookbehind, and boundary matching constructs. Those constructs can see beyond the boundaries of the region to see if a match is appropriate. Using opaque bounds, the boundaries of this matcher's region are opaque to lookahead, lookbehind, and boundary matching constructs that may try to see beyond them. Those constructs cannot look past the boundaries so they will fail to match anything outside of the region. By default, a matcher uses opaque bounds.", "history": "Added in API level 1", "FullName": "public Matcher useTransparentBounds (boolean b)"}, "hasTransparentBounds()": {"Returns": [["boolean", "true iff this matcher is using transparent bounds, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#regex#Matcher#useTransparentBounds_E@"], "Permissions": [], "Description": "Queries the transparency of region bounds for this matcher. This method returns See @B_java#util#regex#Matcher#useTransparentBounds_E@ for a description of transparent and opaque bounds. By default, a matcher uses opaque region boundaries.", "history": "Added in API level 1", "FullName": "public boolean hasTransparentBounds ()"}, "groupCount()": {"Returns": [["int", "The number of capturing groups in this matcher's pattern"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of capturing groups in this matcher's pattern. Group zero denotes the entire pattern by convention. It is not included in this count. Any non-negative integer smaller than or equal to the value returned by this method is guaranteed to be a valid group index for this matcher.", "history": "Added in API level 1", "FullName": "public int groupCount ()"}, "region(int, int)": {"Returns": [["@B_java#util#regex#Matcher_E@", "this matcher"]], "Parameters": [["int", "int: The index to start searching at (inclusive)"], ["int", "int: The index to end searching at (exclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end is less than zero, if start is greater than the length of the input sequence, if end is greater than the length of the input sequence, or if start is greater than end."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the limits of this matcher's region. The region is the part of the input sequence that will be searched to find a match. Invoking this method resets the matcher, and then sets the region to start at the index specified by the start parameter and end at the index specified by the end parameter. Depending on the transparency and anchoring being used (see @B_java#util#regex#Matcher#useTransparentBounds_E@ and @B_java#util#regex#Matcher#useAnchoringBounds_E@), certain constructs such as anchors may behave differently at or around the boundaries of the region.", "history": "added in API level 1", "FullName": "public Matcher region (int start, int end)"}, "replaceFirst(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The string constructed by replacing the first matching subsequence by the replacement string, substituting captured subsequences as needed"]], "Parameters": [["@B_java#lang#String_E@", "String: The replacement string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string. This method first resets this matcher. It then scans the input sequence looking for a match of the pattern. Characters that are not part of the match are appended directly to the result string; the match is replaced in the result by the replacement string. The replacement string may contain references to captured subsequences as in the @B_java#util#regex#Matcher#appendReplacement_E@ method. Note that backslashes ( Given the regular expression Invoking this method changes this matcher's state. If the matcher is to be used in further matching operations then it should first be reset.", "history": "Added in API level 1", "FullName": "public String replaceFirst (String replacement)"}, "start()": {"Returns": [["int", "The index of the first character matched"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the start index of the previous match.", "history": "Added in API level 1", "FullName": "public int start ()"}, "hasAnchoringBounds()": {"Returns": [["boolean", "true iff this matcher is using anchoring bounds, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#regex#Matcher#useAnchoringBounds_E@"], "Permissions": [], "Description": "Queries the anchoring of region bounds for this matcher. This method returns See @B_java#util#regex#Matcher#useAnchoringBounds_E@ for a description of anchoring bounds. By default, a matcher uses anchoring region boundaries.", "history": "Added in API level 1", "FullName": "public boolean hasAnchoringBounds ()"}, "replaceAll(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The string constructed by replacing each matching subsequence by the replacement string, substituting captured subsequences as needed"]], "Parameters": [["@B_java#lang#String_E@", "String: The replacement string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces every subsequence of the input sequence that matches the pattern with the given replacement string. This method first resets this matcher. It then scans the input sequence looking for matches of the pattern. Characters that are not part of any match are appended directly to the result string; each match is replaced in the result by the replacement string. The replacement string may contain references to captured subsequences as in the @B_java#util#regex#Matcher#appendReplacement_E@ method. Note that backslashes ( Given the regular expression Invoking this method changes this matcher's state. If the matcher is to be used in further matching operations then it should first be reset.", "history": "Added in API level 1", "FullName": "public String replaceAll (String replacement)"}, "reset(java.lang.CharSequence)": {"Returns": [["@B_java#util#regex#Matcher_E@", "This matcher"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new input character sequence"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this matcher with a new input sequence. Resetting a matcher discards all of its explicit state information and sets its append position to zero. The matcher's region is set to the default region, which is its entire character sequence. The anchoring and transparency of this matcher's region boundaries are unaffected.", "history": "Added in API level 1", "FullName": "public Matcher reset (CharSequence input)"}, "end(int)": {"Returns": [["int", "The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything"]], "Parameters": [["int", "int: The index of a capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If there is no capturing group in the pattern with the given index"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset after the last character of the subsequence captured by the given group during the previous match operation.", "history": "Added in API level 1", "FullName": "public int end (int group)"}, "requireEnd()": {"Returns": [["boolean", "true iff more input could change a positive match into a negative one."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if more input could change a positive match into a negative one. If this method returns true, and a match was found, then more input could cause the match to be lost. If this method returns false and a match was found, then more input might change the match but the match won't be lost. If a match was not found, then requireEnd has no meaning.", "history": "Added in API level 1", "FullName": "public boolean requireEnd ()"}, "useAnchoringBounds(boolean)": {"Returns": [["@B_java#util#regex#Matcher_E@", "this matcher"]], "Parameters": [["boolean", "boolean: a boolean indicating whether or not to use anchoring bounds."]], "Throws": [], "SeeAlso": ["@B_java#util#regex#Matcher#hasAnchoringBounds_E@"], "Permissions": [], "Description": "Sets the anchoring of region bounds for this matcher. Invoking this method with an argument of Using anchoring bounds, the boundaries of this matcher's region match anchors such as ^ and $. Without anchoring bounds, the boundaries of this matcher's region will not match anchors such as ^ and $. By default, a matcher uses anchoring region boundaries.", "history": "Added in API level 1", "FullName": "public Matcher useAnchoringBounds (boolean b)"}, "matches()": {"Returns": [["boolean", "true if, and only if, the entire region sequence matches this matcher's pattern"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to match the entire region against the pattern. If the match succeeds then more information can be obtained via the", "history": "Added in API level 1", "FullName": "public boolean matches ()"}, "group(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The (possibly empty) subsequence captured by the named group during the previous match, or null if the group failed to match part of the input"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a named-capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IllegalArgumentException_E@", "If there is no capturing group in the pattern with the given name"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the input subsequence captured by the given If the match was successful but the group specified failed to match any part of the input sequence, then", "history": "Added in API level 26", "FullName": "public String group (String name)"}, "pattern()": {"Returns": [["@B_java#util#regex#Pattern_E@", "The pattern for which this matcher was created"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern that is interpreted by this matcher.", "history": "Added in API level 1", "FullName": "public Pattern pattern ()"}, "group(int)": {"Returns": [["@B_java#lang#String_E@", "The (possibly empty) subsequence captured by the group during the previous match, or null if the group failed to match part of the input"]], "Parameters": [["int", "int: The index of a capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If there is no capturing group in the pattern with the given index"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the input subsequence captured by the given group during the previous match operation. For a matcher If the match was successful but the group specified failed to match any part of the input sequence, then", "history": "Added in API level 1", "FullName": "public String group (int group)"}, "reset()": {"Returns": [["@B_java#util#regex#Matcher_E@", "This matcher"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this matcher. Resetting a matcher discards all of its explicit state information and sets its append position to zero. The matcher's region is set to the default region, which is its entire character sequence. The anchoring and transparency of this matcher's region boundaries are unaffected.", "history": "Added in API level 1", "FullName": "public Matcher reset ()"}, "end(java.lang.String)": {"Returns": [["int", "The offset after the last character captured by the group, or -1 if the match was successful but the group itself did not match anything"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a named-capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IllegalArgumentException_E@", "If there is no capturing group in the pattern with the given name"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset after the last character of the subsequence captured by the given", "history": "Added in API level 26", "FullName": "public int end (String name)"}, "start(int)": {"Returns": [["int", "The index of the first character captured by the group, or -1 if the match was successful but the group itself did not match anything"]], "Parameters": [["int", "int: The index of a capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If there is no capturing group in the pattern with the given index"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the start index of the subsequence captured by the given group during the previous match operation.", "history": "Added in API level 1", "FullName": "public int start (int group)"}, "start(java.lang.String)": {"Returns": [["int", "The index of the first character captured by the group, or -1 if the match was successful but the group itself did not match anything"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a named-capturing group in this matcher's pattern"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"], ["@B_java#lang#IllegalArgumentException_E@", "If there is no capturing group in the pattern with the given name"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the start index of the subsequence captured by the given", "history": "Added in API level 26", "FullName": "public int start (String name)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The string representation of this matcher"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of this matcher. The string representation of a Matcher contains information that may be useful for debugging. The exact format is unspecified.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "regionStart()": {"Returns": [["int", "The starting point of this matcher's region"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports the start index of this matcher's region. The searches this matcher conducts are limited to finding matches within @B_java#util#regex#Matcher#regionStart_E@ (inclusive) and @B_java#util#regex#Matcher#regionEnd_E@ (exclusive).", "history": "Added in API level 1", "FullName": "public int regionStart ()"}, "end()": {"Returns": [["int", "The offset after the last character matched"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match has yet been attempted, or if the previous match operation failed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset after the last character matched.", "history": "Added in API level 1", "FullName": "public int end ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "regionEnd()": {"Returns": [["int", "the ending point of this matcher's region"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports the end index (exclusive) of this matcher's region. The searches this matcher conducts are limited to finding matches within @B_java#util#regex#Matcher#regionStart_E@ (inclusive) and @B_java#util#regex#Matcher#regionEnd_E@ (exclusive).", "history": "Added in API level 1", "FullName": "public int regionEnd ()"}, "usePattern(java.util.regex.Pattern)": {"Returns": [["@B_java#util#regex#Matcher_E@", "This matcher"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: The new pattern used by this matcher"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If newPattern is null"]], "SeeAlso": [], "Permissions": [], "Description": "Changes the This method causes this matcher to lose information about the groups of the last match that occurred. The matcher's position in the input is maintained and its last append position is unaffected.", "history": "Added in API level 1", "FullName": "public Matcher usePattern (Pattern newPattern)"}, "find(int)": {"Returns": [["boolean", "true if, and only if, a subsequence of the input sequence starting at the given index matches this matcher's pattern"]], "Parameters": [["int", "int: the index to start searching for a match"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start is less than zero or if start is greater than the length of the input sequence."]], "SeeAlso": [], "Permissions": [], "Description": "Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index. If the match succeeds then more information can be obtained via the @B_java#util#regex#Matcher#find_E@ method will start at the first character not matched by this match.", "history": "Added in API level 1", "FullName": "public boolean find (int start)"}, "region(int,int)": {"Returns": [["@B_java#util#regex#Matcher_E@", "this matcher"]], "Parameters": [["int", "int: The index to start searching at (inclusive)"], ["int", "int: The index to end searching at (exclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end is less than zero, if start is greater than the length of the input sequence, if end is greater than the length of the input sequence, or if start is greater than end."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the limits of this matcher's region. The region is the part of the input sequence that will be searched to find a match. Invoking this method resets the matcher, and then sets the region to start at the index specified by the start parameter and end at the index specified by the end parameter. Depending on the transparency and anchoring being used (see @B_java#util#regex#Matcher#useTransparentBounds_E@ and @B_java#util#regex#Matcher#useAnchoringBounds_E@), certain constructs such as anchors may behave differently at or around the boundaries of the region.", "history": "Added in API level 1", "FullName": "public Matcher region (int start, int end)"}, "quoteReplacement(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "A literal string replacement"]], "Parameters": [["@B_java#lang#String_E@", "String: The string to be literalized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a literal replacement String for the specified String. This method produces a String that will work as a literal replacement s in the appendReplacement method of the @B_java#util#regex#Matcher_E@ class. The String produced will match the sequence of characters in s treated as a literal sequence. Slashes ('\\') and dollar signs ('$') will be given no special meaning.", "history": "Added in API level 1", "FullName": "public static String quoteReplacement (String s)"}}, "Inheritance": [], "ClassName": "java.util.regex.Matcher", "ClassDesc": "An engine that performs match operations on a @B_java#util#regex#Pattern_E@. A matcher is created from a pattern by invoking the pattern's @B_java#util#regex#Pattern#matcher_E@ method. Once created, a matcher can be used to perform three different kinds of match operations: The @B_java#util#regex#Matcher#matches_E@ method attempts to match the entire input sequence against the pattern. The @B_java#util#regex#Matcher#lookingAt_E@ method attempts to match the input sequence, starting at the beginning, against the pattern. The @B_java#util#regex#Matcher#find_E@ method scans the input sequence looking for the next subsequence that matches the pattern. Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. A matcher finds matches in a subset of its input called the @B_java#util#regex#Matcher#region_E@ method and queried via the @B_java#util#regex#Matcher#regionStart_E@ and @B_java#util#regex#Matcher#regionEnd_E@ methods. The way that the region boundaries interact with some pattern constructs can be changed. See @B_java#util#regex#Matcher#useAnchoringBounds_E@ and @B_java#util#regex#Matcher#useTransparentBounds_E@ for more details. This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The @B_java#util#regex#Matcher#appendReplacement_E@ and @B_java#util#regex#Matcher#appendTail_E@ methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient @B_java#util#regex#Matcher#replaceAll_E@ method can be used to create a string in which every matching subsequence in the input sequence is replaced. The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an @B_java#lang#IllegalStateException_E@ to be thrown. The explicit state of a matcher is recomputed by every match operation. The implicit state of a matcher includes the input character sequence as well as the @B_java#util#regex#Matcher#appendReplacement_E@ method. A matcher may be reset explicitly by invoking its @B_java#util#regex#Matcher#reset_E@ method or, if a new input sequence is desired, its @B_java#util#regex#Matcher#reset_E@ method. Resetting a matcher discards its explicit state information and sets the append position to zero. Instances of this class are not safe for use by multiple concurrent threads."}