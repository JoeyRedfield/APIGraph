{"Functions": {"replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public abstract boolean remove (Object key, Object value)"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping: @B_java#util#Map#merge_E@ is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public abstract boolean remove (Object key, Object value)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public abstract V replace (K key, V value)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public abstract V putIfAbsent (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of a specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if a specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public abstract boolean replace (K key, V oldValue, V newValue)"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public abstract V putIfAbsent (K key, V value)"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public abstract V replace (K key, V value)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the mapping function to compute a value"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: Or to implement a multi-value map, Map<K,Collection<V>>, supporting multiple values per key: The mapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if no value is associated with the key"]], "Parameters": [["K", "K: key with which the resulting value is to be associated"], ["V", "V: the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to recompute a value if present"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping: If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of a specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if a specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public abstract boolean replace (K key, V oldValue, V newValue)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "", "FullName": "public V getOrDefault (Object key, V defaultValue)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ConcurrentMap<K, V>", "ClassDesc": "A @B_java#util#Map_E@ providing thread safety and atomicity guarantees. To maintain the specified guarantees, default implementations of methods including @B_java#util#concurrent#ConcurrentMap#putIfAbsent_E@ inherited from @B_java#util#Map_E@ must be overridden by implementations of this interface. Similarly, implementations of the collections returned by methods @B_java#util#Map#keySet_E@, @B_java#util#Map#values_E@, and @B_java#util#Map#entrySet_E@ must override methods such as removeIf when necessary to preserve atomicity guarantees. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a ConcurrentMap as a key or value ConcurrentMap in another thread."}