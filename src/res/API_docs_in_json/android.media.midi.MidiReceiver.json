{"Functions": {"flush()": {"Returns": [], "Parameters": [], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Instructs the receiver to discard all pending MIDI data.", "history": "Added in API level 23", "FullName": "public void flush ()"}, "send(byte[], int, int, long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be sent"], ["int", "int: the number of bytes of MIDI data in the array to be sent"], ["long", "long: the timestamp of the message, based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["@B_java#io#IOException_E@", "if the data could not be sent in entirety"]], "SeeAlso": [], "Permissions": [], "Description": "Called to send MIDI data to the receiver with a specified timestamp. Data will be processed by receiver in order first by timestamp, then in the order sent. Data will get split into multiple calls to @B_android#media#midi#MidiReceiver#onSend_E@ if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt. The sender should reestablish communication, reset all controllers and send all notes off.", "history": "added in API level 23", "FullName": "public void send (byte[] msg, int offset, int count, long timestamp)"}, "onSend(byte[], int, int, long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be processed"], ["int", "int: the number of bytes of MIDI data in the array to be processed"], ["long", "long: the timestamp of the message (based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called whenever the receiver is passed new MIDI data. Subclasses override this method to receive MIDI data. May fail if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. NOTE: the msg array parameter is only valid within the context of this call. The msg bytes should be copied by the receiver rather than retaining a reference to this parameter. Also, modifying the contents of the msg array parameter may result in other receivers in the same application receiving incorrect values in their {link #onSend} method.", "history": "added in API level 23", "FullName": "public abstract void onSend (byte[] msg, int offset, int count, long timestamp)"}, "send(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be sent"], ["int", "int: the number of bytes of MIDI data in the array to be sent"]], "Throws": [["@B_java#io#IOException_E@", "if the data could not be sent in entirety"]], "SeeAlso": [], "Permissions": [], "Description": "Called to send MIDI data to the receiver without a timestamp. Data will be processed by receiver in the order sent. Data will get split into multiple calls to @B_android#media#midi#MidiReceiver#onSend_E@ if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt. The sender should reestablish communication, reset all controllers and send all notes off.", "history": "Added in API level 23", "FullName": "public void send (byte[] msg, int offset, int count)"}, "send(byte[],int,int,long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be sent"], ["int", "int: the number of bytes of MIDI data in the array to be sent"], ["long", "long: the timestamp of the message, based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["@B_java#io#IOException_E@", "if the data could not be sent in entirety"]], "SeeAlso": [], "Permissions": [], "Description": "Called to send MIDI data to the receiver with a specified timestamp. Data will be processed by receiver in order first by timestamp, then in the order sent. Data will get split into multiple calls to @B_android#media#midi#MidiReceiver#onSend_E@ if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt. The sender should reestablish communication, reset all controllers and send all notes off.", "history": "Added in API level 23", "FullName": "public void send (byte[] msg, int offset, int count, long timestamp)"}, "getMaxMessageSize()": {"Returns": [["int", "maximum message size"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum size of a message this receiver can receive.", "history": "Added in API level 23", "FullName": "public final int getMaxMessageSize ()"}, "send(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be sent"], ["int", "int: the number of bytes of MIDI data in the array to be sent"]], "Throws": [["@B_java#io#IOException_E@", "if the data could not be sent in entirety"]], "SeeAlso": [], "Permissions": [], "Description": "Called to send MIDI data to the receiver without a timestamp. Data will be processed by receiver in the order sent. Data will get split into multiple calls to @B_android#media#midi#MidiReceiver#onSend_E@ if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt. The sender should reestablish communication, reset all controllers and send all notes off.", "history": "added in API level 23", "FullName": "public void send (byte[] msg, int offset, int count)"}, "MidiReceiver()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default MidiReceiver constructor. Maximum message size is set to @B_java#lang#Integer#MAX_VALUE_E@", "history": "Added in API level 23", "FullName": "public MidiReceiver ()"}, "onSend(byte[],int,int,long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be processed"], ["int", "int: the number of bytes of MIDI data in the array to be processed"], ["long", "long: the timestamp of the message (based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called whenever the receiver is passed new MIDI data. Subclasses override this method to receive MIDI data. May fail if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. NOTE: the msg array parameter is only valid within the context of this call. The msg bytes should be copied by the receiver rather than retaining a reference to this parameter. Also, modifying the contents of the msg array parameter may result in other receivers in the same application receiving incorrect values in their {link #onSend} method.", "history": "Added in API level 23", "FullName": "public abstract void onSend (byte[] msg, int offset, int count, long timestamp)"}, "onFlush()": {"Returns": [], "Parameters": [], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called when the receiver is instructed to discard all pending MIDI data. Subclasses should override this method if they maintain a list or queue of MIDI data to be processed in the future.", "history": "Added in API level 23", "FullName": "public void onFlush ()"}, "MidiReceiver(int)": {"Returns": [], "Parameters": [["int", "int: the maximum size of a message this receiver can receive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "MidiReceiver constructor.", "history": "Added in API level 23", "FullName": "public MidiReceiver (int maxMessageSize)"}}, "Inheritance": [], "ClassName": "android.media.midi.MidiReceiver", "ClassDesc": "Interface for sending and receiving data to and from a MIDI device."}