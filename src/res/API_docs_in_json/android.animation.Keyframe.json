{"Functions": {"ofFloat(float)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an @B_android#animation#ObjectAnimator_E@). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofFloat (float fraction)"}, "setFraction(float)": {"Returns": [], "Parameters": [["float", "float: time associated with this keyframe, as a fraction of the overall animation duration. This should be a value between 0 and 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time for this keyframe, as a fraction of the overall animation duration.", "history": "Added in API level 11", "FullName": "public void setFraction (float fraction)"}, "ofFloat(float, float)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["float", "float: The value that the object will animate to as the animation time approaches the time in this keyframe, and the the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "added in API level 11", "FullName": "public static Keyframe ofFloat (float fraction, float value)"}, "Keyframe()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 11", "FullName": "public Keyframe ()"}, "ofObject(float)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an @B_android#animation#ObjectAnimator_E@). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofObject (float fraction)"}, "hasValue()": {"Returns": [["boolean", "boolean Whether this object has a value assigned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this keyframe has a valid value. This method is called internally when an @B_android#animation#ObjectAnimator_E@ first starts; keyframes without values are assigned values at that time by deriving the value for the property from the target object.", "history": "Added in API level 11", "FullName": "public boolean hasValue ()"}, "getFraction()": {"Returns": [["float", "The time associated with this keyframe, as a fraction of the overall animation duration. This should be a value between 0 and 1."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time for this keyframe, as a fraction of the overall animation duration.", "history": "Added in API level 11", "FullName": "public float getFraction ()"}, "ofFloat(float,float)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["float", "float: The value that the object will animate to as the animation time approaches the time in this keyframe, and the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofFloat (float fraction, float value)"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The optional interpolator for this Keyframe."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the optional interpolator for this Keyframe. A value of null indicates that there is no interpolation, which is the same as linear interpolation.", "history": "Added in API level 11", "FullName": "public TimeInterpolator getInterpolator ()"}, "ofObject(float, java.lang.Object)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["@B_java#lang#Object_E@", "Object: The value that the object will animate to as the animation time approaches the time in this keyframe, and the the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "added in API level 11", "FullName": "public static Keyframe ofObject (float fraction, Object value)"}, "getValue()": {"Returns": [["@B_java#lang#Object_E@", "The value for this Keyframe."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value for this Keyframe.", "history": "Added in API level 11", "FullName": "public abstract Object getValue ()"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [["void", "The optional interpolator for this Keyframe."]], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the optional interpolator for this Keyframe. A value of null indicates that there is no interpolation, which is the same as linear interpolation.", "history": "Added in API level 11", "FullName": "public void setInterpolator (TimeInterpolator interpolator)"}, "ofInt(float, int)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["int", "int: The value that the object will animate to as the animation time approaches the time in this keyframe, and the the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "added in API level 11", "FullName": "public static Keyframe ofInt (float fraction, int value)"}, "getType()": {"Returns": [["@B_java#lang#Class_E@", "The type of the value stored in the Keyframe."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the type of keyframe. This information is used by ValueAnimator to determine the type of @B_android#animation#TypeEvaluator_E@ to use when calculating values between keyframes. The type is based on the type of Keyframe created.", "history": "Added in API level 11", "FullName": "public Class getType ()"}, "ofInt(float)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an @B_android#animation#ObjectAnimator_E@). The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofInt (float fraction)"}, "ofInt(float,int)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["int", "int: The value that the object will animate to as the animation time approaches the time in this keyframe, and the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofInt (float fraction, int value)"}, "clone()": {"Returns": [["@B_android#animation#Keyframe_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public abstract Keyframe clone ()"}, "setValue(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: value for this Keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value for this Keyframe.", "history": "Added in API level 11", "FullName": "public abstract void setValue (Object value)"}, "ofObject(float,java.lang.Object)": {"Returns": [["@B_android#animation#Keyframe_E@", "no returns description in source"]], "Parameters": [["float", "float: The time, expressed as a value between 0 and 1, representing the fraction of time elapsed of the overall animation duration."], ["@B_java#lang#Object_E@", "Object: The value that the object will animate to as the animation time approaches the time in this keyframe, and the value animated from as the time passes the time in this keyframe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Keyframe object with the given time and value. The time defines the time, as a proportion of an overall animation's duration, at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.", "history": "Added in API level 11", "FullName": "public static Keyframe ofObject (float fraction, Object value)"}}, "Inheritance": [], "ClassName": "android.animation.Keyframe", "ClassDesc": "This class holds a time/value pair for an animation. The Keyframe class is used by @B_android#animation#ValueAnimator_E@ to define the values that the animation target will have over the course of the animation. As the time proceeds from one keyframe to the other, the value of the target object will animate between the value at the previous keyframe and the value at the next keyframe. Each keyframe also holds an optional @B_android#animation#TimeInterpolator_E@ object, which defines the time interpolation over the intervalue preceding the keyframe. The Keyframe class itself is abstract. The type-specific factory methods will return a subclass of Keyframe specific to the type of value being stored. This is done to improve performance when dealing with the most common cases (e.g., float and int values). Other types will fall into a more general Keyframe class that treats its values as Objects. Unless your animation requires dealing with a custom type or a data structure that needs to be animated directly (and evaluated using an implementation of @B_android#animation#TypeEvaluator_E@), you should stick to using float and int as animations using those types have lower runtime overhead than other types."}