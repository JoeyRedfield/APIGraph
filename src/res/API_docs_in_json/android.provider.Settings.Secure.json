{"Functions": {"getFloat(android.content.ContentResolver,java.lang.String)": {"Returns": [["float", "The setting's current value."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."]], "Throws": [["@B_android#provider#Settings#SettingNotFoundException_E@", "Thrown if a setting by the given name can't be found or the setting value is not a float."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as a float. Note that internally setting values are always stored as strings; this function converts the string to a float for you. This version does not take a default value. If the setting has not been set, or the string value is not a number, it throws @B_android#provider#Settings#SettingNotFoundException_E@.", "history": "Added in API level 3", "FullName": "public static float getFloat (ContentResolver cr, String name)"}, "putFloat(android.content.ContentResolver,java.lang.String,float)": {"Returns": [["boolean", "true if the value was set, false on database errors"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to modify."], ["float", "float: The new value for the setting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for updating a single settings value as a floating point number. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name. Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.", "history": "Added in API level 3", "FullName": "public static boolean putFloat (ContentResolver cr, String name, float value)"}, "Settings.Secure()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public Settings.Secure ()"}, "putString(android.content.ContentResolver,java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the value was set, false on database errors"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: to access the database with"], ["@B_java#lang#String_E@", "String: to store"], ["@B_java#lang#String_E@", "String: to associate with the name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Store a name/value pair into the database.", "history": "Added in API level 3", "FullName": "public static boolean putString (ContentResolver resolver, String name, String value)"}, "getFloat(android.content.ContentResolver,java.lang.String,float)": {"Returns": [["float", "The setting's current value, or 'def' if it is not defined or not a valid float."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."], ["float", "float: Value to return if the setting is not defined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as a floating point number. Note that internally setting values are always stored as strings; this function converts the string to an float for you. The default value will be returned if the setting is not defined or not a valid float.", "history": "Added in API level 3", "FullName": "public static float getFloat (ContentResolver cr, String name, float def)"}, "getInt(android.content.ContentResolver,java.lang.String)": {"Returns": [["int", "The setting's current value."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."]], "Throws": [["@B_android#provider#Settings#SettingNotFoundException_E@", "Thrown if a setting by the given name can't be found or the setting value is not an integer."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as an integer. Note that internally setting values are always stored as strings; this function converts the string to an integer for you. This version does not take a default value. If the setting has not been set, or the string value is not a number, it throws @B_android#provider#Settings#SettingNotFoundException_E@.", "history": "Added in API level 3", "FullName": "public static int getInt (ContentResolver cr, String name)"}, "getLong(android.content.ContentResolver,java.lang.String)": {"Returns": [["long", "The setting's current value."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."]], "Throws": [["@B_android#provider#Settings#SettingNotFoundException_E@", "Thrown if a setting by the given name can't be found or the setting value is not an integer."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as a long. Note that internally setting values are always stored as strings; this function converts the string to a long for you. This version does not take a default value. If the setting has not been set, or the string value is not a number, it throws @B_android#provider#Settings#SettingNotFoundException_E@.", "history": "Added in API level 3", "FullName": "public static long getLong (ContentResolver cr, String name)"}, "getLong(android.content.ContentResolver,java.lang.String,long)": {"Returns": [["long", "The setting's current value, or 'def' if it is not defined or not a valid long."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."], ["long", "long: Value to return if the setting is not defined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as a long. Note that internally setting values are always stored as strings; this function converts the string to a long for you. The default value will be returned if the setting is not defined or not a long.", "history": "Added in API level 3", "FullName": "public static long getLong (ContentResolver cr, String name, long def)"}, "getInt(android.content.ContentResolver,java.lang.String,int)": {"Returns": [["int", "The setting's current value, or 'def' if it is not defined or not a valid integer."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to retrieve."], ["int", "int: Value to return if the setting is not defined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for retrieving a single secure settings value as an integer. Note that internally setting values are always stored as strings; this function converts the string to an integer for you. The default value will be returned if the setting is not defined or not an integer.", "history": "Added in API level 3", "FullName": "public static int getInt (ContentResolver cr, String name, int def)"}, "getUriFor(java.lang.String)": {"Returns": [["@B_android#net#Uri_E@", "the corresponding content URI, or null if not present"]], "Parameters": [["@B_java#lang#String_E@", "String: to look up in the table"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct the content URI for a particular name/value pair, useful for monitoring changes with a ContentObserver.", "history": "Added in API level 3", "FullName": "public static Uri getUriFor (String name)"}, "putLong(android.content.ContentResolver,java.lang.String,long)": {"Returns": [["boolean", "true if the value was set, false on database errors"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to modify."], ["long", "long: The new value for the setting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for updating a secure settings value as a long integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name. Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.", "history": "Added in API level 3", "FullName": "public static boolean putLong (ContentResolver cr, String name, long value)"}, "putInt(android.content.ContentResolver,java.lang.String,int)": {"Returns": [["boolean", "true if the value was set, false on database errors"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: The ContentResolver to access."], ["@B_java#lang#String_E@", "String: The name of the setting to modify."], ["int", "int: The new value for the setting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for updating a single settings value as an integer. This will either create a new entry in the table if the given name does not exist, or modify the value of the existing row with that name. Note that internally setting values are always stored as strings, so this function converts the given value to a string before storing it.", "history": "Added in API level 3", "FullName": "public static boolean putInt (ContentResolver cr, String name, int value)"}, "getString(android.content.ContentResolver,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the corresponding value, or null if not present"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: to access the database with"], ["@B_java#lang#String_E@", "String: to look up in the table"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up a name in the database.", "history": "Added in API level 3", "FullName": "public static String getString (ContentResolver resolver, String name)"}, "setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: the content resolver to use"], ["@B_java#lang#String_E@", "String: the location provider to enable or disable"], ["boolean", "boolean: true if the provider should be enabled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This API is deprecated Thread-safe method for enabling or disabling a single location provider. This will have no effect on Android Q and above.", "history": "Added in API level 8 Deprecated in API level 19", "FullName": "public static void setLocationProviderEnabled (ContentResolver cr, String provider, boolean enabled)"}, "isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)": {"Returns": [["boolean", "true if the provider is enabled"]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: the content resolver to use"], ["@B_java#lang#String_E@", "String: the location provider to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#LocationManager#isProviderEnabled_E@ Helper method for determining if a location provider is enabled.", "history": "Added in API level 8 Deprecated in API level 19", "FullName": "public static boolean isLocationProviderEnabled (ContentResolver cr, String provider)"}}, "Inheritance": ["@B_android#provider#Settings#NameValueTable_E@"], "ClassName": "android.provider.Settings.Secure", "ClassDesc": "Secure system settings, containing system preferences that applications can read but are not allowed to write. These are for preferences that the user must explicitly modify through the system UI or specialized APIs for those values, not modified directly by applications."}