{"Functions": {"finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 26", "FullName": "protected void finalize ()"}, "isOpen()": {"Returns": [["boolean", "true if channel is valid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if a channel is still valid. A channel is invalidated after @B_android#hardware#SensorDirectChannel#close_E@ is called.", "history": "Added in API level 26", "FullName": "public boolean isOpen ()"}, "configure(android.hardware.Sensor,int)": {"Returns": [["int", "* starting report or changing rate: positive sensor report token on success, 0 on failure; * stopping report: 1 on success, 0 on failure."]], "Parameters": [["@B_android#hardware#Sensor_E@", "Sensor: A @B_android#hardware#Sensor_E@ object to denote sensor to be operated."], ["int", "int: rate level defined in @B_android#hardware#SensorDirectChannel_E@. Value is either 0 or a combination of @B_android#hardware#SensorDirectChannel#RATE_STOP_E@, @B_android#hardware#SensorDirectChannel#RATE_NORMAL_E@, @B_android#hardware#SensorDirectChannel#RATE_FAST_E@, and @B_android#hardware#SensorDirectChannel#RATE_VERY_FAST_E@"]], "Throws": [["@B_java#lang#NullPointerException_E@", "when channel is null."]], "SeeAlso": [], "Permissions": [], "Description": "Configure sensor rate or stop sensor report. To start event report of a sensor, or change rate of existing report, call this function with rateLevel other than @B_android#hardware#SensorDirectChannel#RATE_STOP_E@. Sensor events will be added into a queue formed by the shared memory used in creation of direction channel. Each element of the queue has size of 104 bytes and represents a sensor event. Data structure of an element (all fields in little-endian): @B_android#hardware#SensorDirectChannel#RATE_STOP_E@. If the sensor parameter is left to be null, this will stop all active sensor report associated with the direct channel specified. Function return 1 on success or 0 on failure.", "history": "Added in API level 26", "FullName": "public int configure (Sensor sensor, int rateLevel)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#SensorManager#createDirectChannel_E@"], "Permissions": [], "Description": "Close sensor direct channel. Stop all active sensor in the channel and free sensor system resource related to channel. Shared memory used for creating the direct channel need to be closed or freed separately.", "history": "Added in API level 26", "FullName": "public void close ()"}, "configure(android.hardware.Sensor, int)": {"Returns": [["int", "* starting report or changing rate: positive sensor report token on success, 0 on failure; * stopping report: 1 on success, 0 on failure."]], "Parameters": [["@B_android#hardware#Sensor_E@", "Sensor: A @B_android#hardware#Sensor_E@ object to denote sensor to be operated."], ["int", "int: rate level defined in @B_android#hardware#SensorDirectChannel_E@.Value is either 0 or combination of RATE_STOP, RATE_NORMAL, RATE_FAST or RATE_VERY_FAST."]], "Throws": [["@B_java#lang#NullPointerException_E@", "when channel is null."]], "SeeAlso": [], "Permissions": [], "Description": "Configure sensor rate or stop sensor report. To start event report of a sensor, or change rate of existing report, call this function with rateLevel other than @B_android#hardware#SensorDirectChannel#RATE_STOP_E@. Sensor events will be added into a queue formed by the shared memory used in creation of direction channel. Each element of the queue has size of 104 bytes and represents a sensor event. Data structure of an element (all fields in little-endian): @B_android#hardware#SensorDirectChannel#RATE_STOP_E@. If the sensor parameter is left to be null, this will stop all active sensor report associated with the direct channel specified. Function return 1 on success or 0 on failure.", "history": "added in API level 26", "FullName": "public int configure (Sensor sensor, int rateLevel)"}}, "Inheritance": [], "ClassName": "android.hardware.SensorDirectChannel", "ClassDesc": "Class representing a sensor direct channel. Use @B_android#hardware#SensorManager#createDirectChannel_E@ or @B_android#hardware#SensorManager#createDirectChannel_E@ to obtain an object. The channel object can be then configured (see @B_android#hardware#SensorDirectChannel#configure_E@) to start delivery of sensor events into shared memory buffer."}