{"Functions": {"engineGetEncoded(java.lang.String)": {"Returns": [["byte[]", "the parameters encoded using the specified encoding scheme."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the encoding format."]], "Throws": [["@B_java#io#IOException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameters encoded in the specified format. If format is null, the primary encoding format for parameters is used. The primary encoding format is ASN.1, if an ASN.1 specification for these parameters exists.", "history": "Added in API level 1", "FullName": "protected abstract byte[] engineGetEncoded (String format)"}, "engineGetEncoded()": {"Returns": [["byte[]", "the parameters encoded using their primary encoding format."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameters in their primary encoding format. The primary encoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists.", "history": "Added in API level 1", "FullName": "protected abstract byte[] engineGetEncoded ()"}, "engineInit(byte[], java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the encoded parameters."], ["@B_java#lang#String_E@", "String: the name of the decoding format."]], "Throws": [["@B_java#io#IOException_E@", "on decoding errors"]], "SeeAlso": [], "Permissions": [], "Description": "Imports the parameters from params and decodes them according to the specified decoding format. If format is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists.", "history": "added in API level 1", "FullName": "protected abstract void engineInit (byte[] params, String format)"}, "engineInit(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the encoded parameters."]], "Throws": [["@B_java#io#IOException_E@", "on decoding errors"]], "SeeAlso": [], "Permissions": [], "Description": "Imports the specified parameters and decodes them according to the primary decoding format for parameters. The primary decoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (byte[] params)"}, "engineInit(byte[],java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the encoded parameters."], ["@B_java#lang#String_E@", "String: the name of the decoding format."]], "Throws": [["@B_java#io#IOException_E@", "on decoding errors"]], "SeeAlso": [], "Permissions": [], "Description": "Imports the parameters from params and decodes them according to the specified decoding format. If format is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (byte[] params, String format)"}, "engineToString()": {"Returns": [["@B_java#lang#String_E@", "a formatted string describing the parameters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a formatted string describing the parameters.", "history": "Added in API level 1", "FullName": "protected abstract String engineToString ()"}, "engineGetParameterSpec(java.lang.Class<T>)": {"Returns": [["T", "the parameter specification."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the specification class in which the parameters should be returned."]], "Throws": [["@B_java#security#spec#InvalidParameterSpecException_E@", "if the requested parameter specification is inappropriate for this parameter object."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a (transparent) specification of this parameters object. paramSpec identifies the specification class in which the parameters should be returned. It could, for example, be DSAParameterSpec.class, to indicate that the parameters should be returned in an instance of the DSAParameterSpec class.", "history": "Added in API level 1", "FullName": "protected abstract T engineGetParameterSpec (Class<T> paramSpec)"}, "engineInit(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the parameter specification."]], "Throws": [["@B_java#security#spec#InvalidParameterSpecException_E@", "if the given parameter specification is inappropriate for the initialization of this parameter object."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameters object using the parameters specified in paramSpec.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (AlgorithmParameterSpec paramSpec)"}, "AlgorithmParametersSpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public AlgorithmParametersSpi ()"}}, "Inheritance": [], "ClassName": "java.security.AlgorithmParametersSpi", "ClassDesc": "This class defines the AlgorithmParameters class, which is used to manage algorithm parameters. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply parameter management for a particular algorithm."}