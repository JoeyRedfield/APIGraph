{"Functions": {"getItemCount()": {"Returns": [["int", "The number of items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of items that can be visited.", "history": "Added in API level 14", "FullName": "public int getItemCount ()"}, "setBeforeText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text before the change."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text before a change.", "history": "Added in API level 14", "FullName": "public void setBeforeText (CharSequence beforeText)"}, "getFromIndex()": {"Returns": [["int", "The index of the first character or selection start or the first visible item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling.", "history": "Added in API level 14", "FullName": "public int getFromIndex ()"}, "setSource(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree. This value may be null."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure.", "history": "Added in API level 16", "FullName": "public void setSource (View root, int virtualDescendantId)"}, "setParcelableData(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The parcelable data."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#os#Parcelable_E@ data of the event.", "history": "Added in API level 14", "FullName": "public void setParcelableData (Parcelable parcelableData)"}, "setScrollDeltaX(int)": {"Returns": [], "Parameters": [["int", "int: the scroll delta x"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the difference in pixels between the horizontal position before the scroll and the current horizontal position", "history": "Added in API level 28", "FullName": "public void setScrollDeltaX (int scrollDeltaX)"}, "setScrollable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the source is scrollable, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the source is scrollable.", "history": "Added in API level 14", "FullName": "public void setScrollable (boolean scrollable)"}, "setSource(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The source."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the event source.", "history": "Added in API level 14", "FullName": "public void setSource (View source)"}, "setScrollDeltaY(int)": {"Returns": [], "Parameters": [["int", "int: the scroll delta y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the difference in pixels between the vertical position before the scroll and the current vertical position", "history": "Added in API level 28", "FullName": "public void setScrollDeltaY (int scrollDeltaY)"}, "getParcelableData()": {"Returns": [["@B_android#os#Parcelable_E@", "The parcelable data."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#os#Parcelable_E@ data.", "history": "Added in API level 14", "FullName": "public Parcelable getParcelableData ()"}, "setRemovedCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of removed characters."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of removed characters.", "history": "Added in API level 14", "FullName": "public void setRemovedCount (int removedCount)"}, "setContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The description."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the description of the source.", "history": "Added in API level 14", "FullName": "public void setContentDescription (CharSequence contentDescription)"}, "getBeforeText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text before the change."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text before a change.", "history": "Added in API level 14", "FullName": "public CharSequence getBeforeText ()"}, "getCurrentItemIndex()": {"Returns": [["int", "The current item index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the index of the source in the list of items the can be visited.", "history": "Added in API level 14", "FullName": "public int getCurrentItemIndex ()"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is checked, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the source is checked.", "history": "Added in API level 14", "FullName": "public void setChecked (boolean isChecked)"}, "getClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The class name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the class name of the source.", "history": "Added in API level 14", "FullName": "public CharSequence getClassName ()"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is enabled, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the source is enabled.", "history": "Added in API level 14", "FullName": "public void setEnabled (boolean isEnabled)"}, "setPassword(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view is a password field, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the source is a password field.", "history": "Added in API level 14", "FullName": "public void setPassword (boolean isPassword)"}, "obtain(android.view.accessibility.AccessibilityRecord)": {"Returns": [["@B_android#view#accessibility#AccessibilityRecord_E@", "An instance."]], "Parameters": [["@B_android#view#accessibility#AccessibilityRecord_E@", "AccessibilityRecord no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available or a new one is instantiated. The instance is initialized with data from the given record.", "history": "Added in API level 14", "FullName": "public static AccessibilityRecord obtain (AccessibilityRecord record)"}, "isScrollable()": {"Returns": [["boolean", "True if the source is scrollable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the source is scrollable.", "history": "Added in API level 14", "FullName": "public boolean isScrollable ()"}, "setScrollX(int)": {"Returns": [], "Parameters": [["int", "int: The scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the scroll offset of the source left edge in pixels.", "history": "Added in API level 14", "FullName": "public void setScrollX (int scrollX)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 14", "FullName": "public String toString ()"}, "getScrollDeltaY()": {"Returns": [["int", "the scroll delta y"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the difference in pixels between the vertical position before the scroll and the current vertical position", "history": "Added in API level 28", "FullName": "public int getScrollDeltaY ()"}, "setSource(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree.This value may be null."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure.", "history": "added in API level 16", "FullName": "public void setSource (View root, int virtualDescendantId)"}, "setCurrentItemIndex(int)": {"Returns": [], "Parameters": [["int", "int: The current item index."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the index of the source in the list of items that can be visited.", "history": "Added in API level 14", "FullName": "public void setCurrentItemIndex (int currentItemIndex)"}, "getScrollY()": {"Returns": [["int", "The scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the scroll offset of the source top edge in pixels.", "history": "Added in API level 14", "FullName": "public int getScrollY ()"}, "setToIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of selection end or last item index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the index of text selection end or the index of the last visible item when scrolling.", "history": "Added in API level 14", "FullName": "public void setToIndex (int toIndex)"}, "setMaxScrollX(int)": {"Returns": [], "Parameters": [["int", "int: The max scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the max scroll offset of the source left edge in pixels.", "history": "Added in API level 15", "FullName": "public void setMaxScrollX (int maxScrollX)"}, "isPassword()": {"Returns": [["boolean", "True if the view is a password field, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the source is a password field.", "history": "Added in API level 14", "FullName": "public boolean isPassword ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the record is already recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Return an instance back to be reused.", "history": "Added in API level 14", "FullName": "public void recycle ()"}, "setScrollY(int)": {"Returns": [], "Parameters": [["int", "int: The scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the scroll offset of the source top edge in pixels.", "history": "Added in API level 14", "FullName": "public void setScrollY (int scrollY)"}, "getRemovedCount()": {"Returns": [["int", "The number of removed characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of removed characters.", "history": "Added in API level 14", "FullName": "public int getRemovedCount ()"}, "getSource()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The info of the source."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#view#accessibility#AccessibilityNodeInfo_E@ of the event source. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 14", "FullName": "public AccessibilityNodeInfo getSource ()"}, "isChecked()": {"Returns": [["boolean", "True if the view is checked, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the source is checked.", "history": "Added in API level 14", "FullName": "public boolean isChecked ()"}, "setClassName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The lass name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the class name of the source.", "history": "Added in API level 14", "FullName": "public void setClassName (CharSequence className)"}, "getScrollX()": {"Returns": [["int", "The scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the scroll offset of the source left edge in pixels.", "history": "Added in API level 14", "FullName": "public int getScrollX ()"}, "setAddedCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of added characters."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of added characters.", "history": "Added in API level 14", "FullName": "public void setAddedCount (int addedCount)"}, "setItemCount(int)": {"Returns": [], "Parameters": [["int", "int: The number of items."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of items that can be visited.", "history": "Added in API level 14", "FullName": "public void setItemCount (int itemCount)"}, "setMaxScrollY(int)": {"Returns": [], "Parameters": [["int", "int: The max scroll."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the max scroll offset of the source top edge in pixels.", "history": "Added in API level 15", "FullName": "public void setMaxScrollY (int maxScrollY)"}, "getScrollDeltaX()": {"Returns": [["int", "the scroll delta x"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the difference in pixels between the horizontal position before the scroll and the current horizontal position", "history": "Added in API level 28", "FullName": "public int getScrollDeltaX ()"}, "setFullScreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the source is full screen, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the source is taking the entire screen.", "history": "Added in API level 14", "FullName": "public void setFullScreen (boolean isFullScreen)"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the description of the source.", "history": "Added in API level 14", "FullName": "public CharSequence getContentDescription ()"}, "getMaxScrollX()": {"Returns": [["int", "The max scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the max scroll offset of the source left edge in pixels.", "history": "Added in API level 15", "FullName": "public int getMaxScrollX ()"}, "isEnabled()": {"Returns": [["boolean", "True if the view is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the source is enabled.", "history": "Added in API level 14", "FullName": "public boolean isEnabled ()"}, "setFromIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of the first character or selection start or the first visible item."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.", "history": "Added in API level 14", "FullName": "public void setFromIndex (int fromIndex)"}, "getText()": {"Returns": [["@B_java#util#List_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text of the event. The index in the list represents the priority of the text. Specifically, the lower the index the higher the priority.", "history": "Added in API level 14", "FullName": "public List<CharSequence> getText ()"}, "getAddedCount()": {"Returns": [["int", "The number of added characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of added characters.", "history": "Added in API level 14", "FullName": "public int getAddedCount ()"}, "getMaxScrollY()": {"Returns": [["int", "The max scroll."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the max scroll offset of the source top edge in pixels.", "history": "Added in API level 15", "FullName": "public int getMaxScrollY ()"}, "getWindowId()": {"Returns": [["int", "The window id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id of the window from which the event comes from.", "history": "Added in API level 14", "FullName": "public int getWindowId ()"}, "isFullScreen()": {"Returns": [["boolean", "True if the source is full screen, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the source is taking the entire screen.", "history": "Added in API level 14", "FullName": "public boolean isFullScreen ()"}, "obtain()": {"Returns": [["@B_android#view#accessibility#AccessibilityRecord_E@", "An instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available or a new one is instantiated.", "history": "Added in API level 14", "FullName": "public static AccessibilityRecord obtain ()"}, "getToIndex()": {"Returns": [["int", "The index of selection end or last item index."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the index of text selection end or the index of the last visible item when scrolling.", "history": "Added in API level 14", "FullName": "public int getToIndex ()"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityRecord", "ClassDesc": "Represents a record in an @B_android#view#accessibility#AccessibilityEvent_E@ and contains information about state change of its source @B_android#view#View_E@. When a view fires an accessibility event it requests from its parent to dispatch the constructed event. The parent may optionally append a record for itself for providing more context to @B_android#accessibilityservice#AccessibilityService_E@s. Hence, accessibility services can facilitate additional accessibility records to enhance feedback. Once the accessibility event containing a record is dispatched the record is made immutable and calling a state mutation method generates an error. @B_android#view#accessibility#AccessibilityEvent_E@."}