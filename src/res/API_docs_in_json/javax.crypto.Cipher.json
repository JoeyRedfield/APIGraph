{"Functions": {"init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the encryption key"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or its keysize exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this cipher, or this cipher requires algorithm parameters and params is null, or the given algorithm parameters imply a cryptographic strength that would exceed the legal limits (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters and params is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidAlgorithmParameterException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them from random. Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key, AlgorithmParameters params, SecureRandom random)"}, "getBlockSize()": {"Returns": [["int", "the block size (in bytes), or 0 if the underlying algorithm is not a block cipher"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the block size (in bytes).", "history": "Added in API level 1", "FullName": "public final int getBlockSize ()"}, "getMaxAllowedParameterSpec(java.lang.String)": {"Returns": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "an AlgorithmParameterSpec which holds the maximum value or null."]], "Parameters": [["@B_java#lang#String_E@", "String: the cipher transformation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if transformation is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is not a valid transformation, i.e. in the form of \"algorithm\" or \"algorithm/mode/padding\"."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an AlgorithmParameterSpec object which contains the maximum cipher parameter value according to the jurisdiction policy file. If JCE unlimited strength jurisdiction policy files are installed or there is no maximum limit on the parameters for the specified transformation in the policy file, null will be returned.", "history": "Added in API level 1", "FullName": "public static final AlgorithmParameterSpec getMaxAllowedParameterSpec (String transformation)"}, "getParameters()": {"Returns": [["@B_java#security#AlgorithmParameters_E@", "the parameters used with this cipher, or null if this cipher does not use any parameters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameters used with this cipher. The returned parameters may be the same that were used to initialize this cipher, or may contain a combination of default and random parameter values used by the underlying cipher implementation if this cipher requires algorithm parameters but was not initialized with any.", "history": "Added in API level 1", "FullName": "public final AlgorithmParameters getParameters ()"}, "init(int,java.security.Key,java.security.AlgorithmParameters)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the encryption key"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or its keysize exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this cipher, or this cipher requires algorithm parameters and params is null, or the given algorithm parameters imply a cryptographic strength that would exceed the legal limits (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key and a set of algorithm parameters. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters and params is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidAlgorithmParameterException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key, AlgorithmParameters params)"}, "doFinal(byte[],int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized. Input data that may have been buffered during a previous update operation is processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "Added in API level 1", "FullName": "public final int doFinal (byte[] output, int outputOffset)"}, "doFinal(byte[])": {"Returns": [["byte[]", "the new buffer with the result"]], "Parameters": [["byte[]", "byte: the input buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The bytes in the input buffer, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in a new buffer. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "Added in API level 1", "FullName": "public final byte[] doFinal (byte[] input)"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#crypto#Cipher_E@", "a cipher that implements the requested transformation."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the transformation, e.g., DES/CBC/PKCS5Padding. See the Cipher section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard transformation names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is null, empty, in an invalid format, or if no Provider supports a CipherSpi implementation for the specified algorithm."], ["@B_javax#crypto#NoSuchPaddingException_E@", "if transformation contains a padding scheme that is not available."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Cipher object that implements the specified transformation. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Cipher object encapsulating the CipherSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final Cipher getInstance (String transformation)"}, "doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the input ByteBuffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the output ByteBuffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_java#lang#IllegalArgumentException_E@", "if input and output are the same object"], ["@B_java#nio#ReadOnlyBufferException_E@", "if the output buffer is read-only"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if there is insufficient space in the output buffer"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. All input.remaining() bytes starting at input.position() are processed. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed. The output buffer's position will have advanced by n, where n is the value returned by this method; the output buffer's limit will not have changed. If output.remaining() bytes are insufficient to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int doFinal (ByteBuffer input, ByteBuffer output)"}, "init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the encryption key"], ["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the algorithm parameters"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or its keysize exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this cipher, or this cipher requires algorithm parameters and params is null, or the given algorithm parameters imply a cryptographic strength that would exceed the legal limits (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters and params is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidAlgorithmParameterException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them from random. Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random)"}, "doFinal(byte[], int, int)": {"Returns": [["byte[]", "the new buffer with the result"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in a new buffer. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "added in API level 1", "FullName": "public final byte[] doFinal (byte[] input, int inputOffset, int inputLen)"}, "update(java.nio.ByteBuffer,java.nio.ByteBuffer)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the input ByteBuffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the output ByteByffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_java#lang#IllegalArgumentException_E@", "if input and output are the same object"], ["@B_java#nio#ReadOnlyBufferException_E@", "if the output buffer is read-only"], ["@B_javax#crypto#ShortBufferException_E@", "if there is insufficient space in the output buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. All input.remaining() bytes starting at input.position() are processed. The result is stored in the output buffer. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed. The output buffer's position will have advanced by n, where n is the value returned by this method; the output buffer's limit will not have changed. If output.remaining() bytes are insufficient to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Note: this method should be copy-safe, which means the input and output buffers can reference the same block of memory and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int update (ByteBuffer input, ByteBuffer output)"}, "init(int,java.security.cert.Certificate)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the public key in the given certificate is inappropriate for initializing this cipher, or this cipher requires algorithm parameters that cannot be determined from the public key in the given certificate, or the keysize of the public key in the given certificate has a keysize that exceeds the maximum allowable keysize (as determined by the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with the public key from the given certificate. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If the certificate is of type X.509 and has a opmode, an InvalidKeyException is thrown. If this cipher requires any algorithm parameters that cannot be derived from the public key in the given certificate, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Certificate certificate)"}, "updateAAD(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer containing the AAD"], ["int", "int: the offset in src where the AAD input starts"], ["int", "int: the number of AAD bytes"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the src byte array is null, or the offset or length is less than 0, or the sum of the offset and len is greater than the length of the src byte array"], ["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the update methods has already been called for the active encryption/decryption operation"], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi has not been overridden by an implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer. Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods).", "history": "added in API level 19", "FullName": "public final void updateAAD (byte[] src, int offset, int len)"}, "wrap(java.security.Key)": {"Returns": [["byte[]", "the wrapped key."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key to be wrapped."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)."], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested, and the length of the encoding of the key to be wrapped is not a multiple of the block size."], ["@B_java#security#InvalidKeyException_E@", "if it is impossible or unsafe to wrap the key with this cipher (e.g., a hardware protected key is being passed to a software-only cipher)."], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Wrap a key.", "history": "Added in API level 1", "FullName": "public final byte[] wrap (Key key)"}, "getIV()": {"Returns": [["byte[]", "the initialization vector in a new buffer, or null if the underlying algorithm does not use an IV, or if the IV has not yet been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the initialization vector (IV) in a new buffer. This is useful in the case where a random IV was created, or in the context of password-based encryption or decryption, where the IV is derived from a user-supplied password.", "history": "Added in API level 1", "FullName": "public final byte[] getIV ()"}, "Cipher(javax.crypto.CipherSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#crypto#CipherSpi_E@", "CipherSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the transformation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Cipher object.", "history": "Added in API level 1", "FullName": "protected Cipher (CipherSpi cipherSpi, Provider provider, String transformation)"}, "update(byte[],int,int)": {"Returns": [["byte[]", "the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in a new buffer. If inputLen is zero, this method returns null.", "history": "Added in API level 1", "FullName": "public final byte[] update (byte[] input, int inputOffset, int inputLen)"}, "update(byte[],int,int,byte[],int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. If inputLen is zero, this method returns a length of zero. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int update (byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)"}, "doFinal()": {"Returns": [["byte[]", "the new buffer with the result"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized. Input data that may have been buffered during a previous update operation is processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in a new buffer. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "Added in API level 1", "FullName": "public final byte[] doFinal ()"}, "update(byte[], int, int)": {"Returns": [["byte[]", "the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in a new buffer. If inputLen is zero, this method returns null.", "history": "added in API level 1", "FullName": "public final byte[] update (byte[] input, int inputOffset, int inputLen)"}, "doFinal(byte[], int, int, byte[], int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int doFinal (byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)"}, "update(byte[], int, int, byte[])": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. If inputLen is zero, this method returns a length of zero. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int update (byte[] input, int inputOffset, int inputLen, byte[] output)"}, "init(int, java.security.cert.Certificate)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the public key in the given certificate is inappropriate for initializing this cipher, or this cipher requires algorithm parameters that cannot be determined from the public key in the given certificate, or the keysize of the public key in the given certificate has a keysize that exceeds the maximum allowable keysize (as determined by the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with the public key from the given certificate. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If the certificate is of type X.509 and has a opmode, an InvalidKeyException is thrown. If this cipher requires any algorithm parameters that cannot be derived from the public key in the given certificate, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "added in API level 1", "FullName": "public final void init (int opmode, Certificate certificate)"}, "init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the encryption key"], ["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or its keysize exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this cipher, or this cipher requires algorithm parameters and params is null, or the given algorithm parameters imply a cryptographic strength that would exceed the legal limits (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key and a set of algorithm parameters. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters and params is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidAlgorithmParameterException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key, AlgorithmParameterSpec params)"}, "updateAAD(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer containing the Additional Authentication Data"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the src byte array is null"], ["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the update methods has already been called for the active encryption/decryption operation"], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi has not been overridden by an implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multi-part update of the Additional Authentication Data (AAD). Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods).", "history": "Added in API level 19", "FullName": "public final void updateAAD (byte[] src)"}, "updateAAD(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer containing the AAD"], ["int", "int: the offset in src where the AAD input starts"], ["int", "int: the number of AAD bytes"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the src byte array is null, or the offset or length is less than 0, or the sum of the offset and len is greater than the length of the src byte array"], ["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the update methods has already been called for the active encryption/decryption operation"], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi has not been overridden by an implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer. Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods).", "history": "Added in API level 19", "FullName": "public final void updateAAD (byte[] src, int offset, int len)"}, "unwrap(byte[], java.lang.String, int)": {"Returns": [["@B_java#security#Key_E@", "the unwrapped key."]], "Parameters": [["byte[]", "byte: the key to be unwrapped."], ["@B_java#lang#String_E@", "String: the algorithm associated with the wrapped key."], ["int", "int: the type of the wrapped key. This must be one of SECRET_KEY, PRIVATE_KEY, or PUBLIC_KEY."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)."], ["@B_java#security#NoSuchAlgorithmException_E@", "if no installed providers can create keys of type wrappedKeyType for the wrappedKeyAlgorithm."], ["@B_java#security#InvalidKeyException_E@", "if wrappedKey does not represent a wrapped key of type wrappedKeyType for the wrappedKeyAlgorithm."], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Unwrap a previously wrapped key.", "history": "added in API level 1", "FullName": "public final Key unwrap (byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType)"}, "doFinal(byte[],int,int,byte[],int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int doFinal (byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#crypto#Cipher_E@", "a cipher that implements the requested transformation."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the transformation, e.g., DES/CBC/PKCS5Padding. See the Cipher section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard transformation names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is null, empty, in an invalid format, or if a CipherSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_javax#crypto#NoSuchPaddingException_E@", "if transformation contains a padding scheme that is not available."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Cipher object that implements the specified transformation. A new Cipher object encapsulating the CipherSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final Cipher getInstance (String transformation, String provider)"}, "init(int, java.security.Key)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the key"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or requires algorithm parameters that cannot be determined from the given key, or if the given key has a keysize that exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters that cannot be derived from the given key, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "added in API level 1", "FullName": "public final void init (int opmode, Key key)"}, "init(int,java.security.Key,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the encryption key"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or requires algorithm parameters that cannot be determined from the given key, or if the given key has a keysize that exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key and a source of randomness. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters that cannot be derived from the given key, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them from random. Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key, SecureRandom random)"}, "doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the input ByteBuffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the output ByteBuffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_java#lang#IllegalArgumentException_E@", "if input and output are the same object"], ["@B_java#nio#ReadOnlyBufferException_E@", "if the output buffer is read-only"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if there is insufficient space in the output buffer"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. All input.remaining() bytes starting at input.position() are processed. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed. The output buffer's position will have advanced by n, where n is the value returned by this method; the output buffer's limit will not have changed. If output.remaining() bytes are insufficient to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int doFinal (ByteBuffer input, ByteBuffer output)"}, "updateAAD(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the buffer containing the AAD"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the src ByteBuffer is null"], ["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized), does not accept AAD, or if operating in either GCM or CCM mode and one of the update methods has already been called for the active encryption/decryption operation"], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi has not been overridden by an implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multi-part update of the Additional Authentication Data (AAD). Calls to this method provide AAD to the cipher when operating in modes such as AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD must be supplied before beginning operations on the ciphertext (via the update and doFinal methods). All src.remaining() bytes starting at src.position() are processed. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 19", "FullName": "public final void updateAAD (ByteBuffer src)"}, "update(byte[],int,int,byte[])": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. If inputLen is zero, this method returns a length of zero. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int update (byte[] input, int inputOffset, int inputLen, byte[] output)"}, "doFinal(byte[],int,int,byte[])": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "Added in API level 1", "FullName": "public final int doFinal (byte[] input, int inputOffset, int inputLen, byte[] output)"}, "doFinal(byte[], int, int, byte[])": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int doFinal (byte[] input, int inputOffset, int inputLen, byte[] output)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#crypto#Cipher_E@", "a cipher that implements the requested transformation."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the transformation, e.g., DES/CBC/PKCS5Padding. See the Cipher section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard transformation names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is null, empty, in an invalid format, or if a CipherSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_javax#crypto#NoSuchPaddingException_E@", "if transformation contains a padding scheme that is not available."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Cipher object that implements the specified transformation. A new Cipher object encapsulating the CipherSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final Cipher getInstance (String transformation, String provider)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this Cipher object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this Cipher object. This is the same name that was specified in one of the getInstance calls that created this Cipher object..", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "update(byte[])": {"Returns": [["byte[]", "the new buffer with the result, or null if the underlying cipher is a block cipher and the input data is too short to result in a new block."]], "Parameters": [["byte[]", "byte: the input buffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The bytes in the input buffer are processed, and the result is stored in a new buffer. If input has a length of zero, this method returns null.", "history": "Added in API level 1", "FullName": "public final byte[] update (byte[] input)"}, "init(int,java.security.cert.Certificate,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the public key in the given certificate is inappropriate for initializing this cipher, or this cipher requires algorithm parameters that cannot be determined from the public key in the given certificate, or the keysize of the public key in the given certificate has a keysize that exceeds the maximum allowable keysize (as determined by the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with the public key from the given certificate and a source of randomness. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If the certificate is of type X.509 and has a opmode, an InvalidKeyException is thrown. If this cipher requires any algorithm parameters that cannot be derived from the public key in the given certificate, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them from random. Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Certificate certificate, SecureRandom random)"}, "getExemptionMechanism()": {"Returns": [["@B_javax#crypto#ExemptionMechanism_E@", "the exemption mechanism object used with this cipher, or null if this cipher does not use any exemption mechanism."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the exemption mechanism object used with this cipher.", "history": "Added in API level 1", "FullName": "public final ExemptionMechanism getExemptionMechanism ()"}, "doFinal(byte[],int,int)": {"Returns": [["byte[]", "the new buffer with the result"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation. The data is encrypted or decrypted, depending on how this cipher was initialized. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, and any input bytes that may have been buffered during a previous update operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in a new buffer. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "Added in API level 1", "FullName": "public final byte[] doFinal (byte[] input, int inputOffset, int inputLen)"}, "getMaxAllowedKeyLength(java.lang.String)": {"Returns": [["int", "the maximum key length in bits or Integer.MAX_VALUE."]], "Parameters": [["@B_java#lang#String_E@", "String: the cipher transformation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if transformation is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is not a valid transformation, i.e. in the form of \"algorithm\" or \"algorithm/mode/padding\"."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum key length for the specified transformation according to the installed JCE jurisdiction policy files. If JCE unlimited strength jurisdiction policy files are installed, Integer.MAX_VALUE will be returned. For more information on default key size in JCE jurisdiction policy files, please see Appendix E in the", "history": "Added in API level 1", "FullName": "public static final int getMaxAllowedKeyLength (String transformation)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#crypto#Cipher_E@", "a cipher that implements the requested transformation."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the transformation, e.g., DES/CBC/PKCS5Padding. See the Cipher section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard transformation names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if transformation is null, empty, in an invalid format, or if a CipherSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_javax#crypto#NoSuchPaddingException_E@", "if transformation contains a padding scheme that is not available."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Cipher object that implements the specified transformation. A new Cipher object encapsulating the CipherSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final Cipher getInstance (String transformation, Provider provider)"}, "update(byte[], int, int, byte[], int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the input buffer"], ["int", "int: the offset in input where the input starts"], ["int", "int: the input length"], ["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. The first inputLen bytes in the input buffer, starting at inputOffset inclusive, are processed, and the result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. If inputLen is zero, this method returns a length of zero. Note: this method should be copy-safe, which means the input and output buffers can reference the same byte array and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int update (byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)"}, "getOutputSize(int)": {"Returns": [["int", "the required output buffer size (in bytes)"]], "Parameters": [["int", "int: the input length (in bytes)"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not yet been initialized)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes). This call takes into account any unprocessed (buffered) data from a previous update call, padding, and AEAD tagging. The actual output length of the next update or doFinal call may be smaller than the length returned by this method.", "history": "Added in API level 1", "FullName": "public final int getOutputSize (int inputLen)"}, "doFinal(byte[], int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if this cipher is a block cipher, no padding has been requested (only in encryption mode), and the total input length of the data processed by this cipher is not a multiple of block size; or if this encryption algorithm is unable to process the input data provided."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_javax#crypto#BadPaddingException_E@", "if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"], ["@B_javax#crypto#AEADBadTagException_E@", "if this cipher is decrypting in an AEAD mode (such as GCM/CCM), and the received authentication tag does not match the calculated value"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized. Input data that may have been buffered during a previous update operation is processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Upon finishing, this method resets this cipher object to the state it was in when previously initialized via a call to init. That is, the object is reset and available to encrypt or decrypt (depending on the operation mode that was specified in the call to init) more data. Note: if any exception is thrown, this cipher object may need to be reset before it can be used again.", "history": "added in API level 1", "FullName": "public final int doFinal (byte[] output, int outputOffset)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this Cipher object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this Cipher object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "init(int,java.security.Key)": {"Returns": [], "Parameters": [["int", "int: the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE)"], ["@B_java#security#Key_E@", "Key: the key"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this cipher, or requires algorithm parameters that cannot be determined from the given key, or if the given key has a keysize that exceeds the maximum allowable keysize (as determined from the configured jurisdiction policy files)."], ["@B_java#lang#UnsupportedOperationException_E@", "if (@code opmode} is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this cipher with a key. The cipher is initialized for one of the following four operations: encryption, decryption, key wrapping or key unwrapping, depending on the value of opmode. If this cipher requires any algorithm parameters that cannot be derived from the given key, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an InvalidKeyException if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using @B_javax#crypto#Cipher#getParameters_E@ or @B_javax#crypto#Cipher#getIV_E@ (if the parameter is an IV). If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail. If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the @B_java#security#SecureRandom_E@ implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.) Note that when a Cipher object is initialized, it loses all previously-acquired state. In other words, initializing a Cipher is equivalent to creating a new instance of that Cipher and initializing it.", "history": "Added in API level 1", "FullName": "public final void init (int opmode, Key key)"}, "unwrap(byte[],java.lang.String,int)": {"Returns": [["@B_java#security#Key_E@", "the unwrapped key."]], "Parameters": [["byte[]", "byte: the key to be unwrapped."], ["@B_java#lang#String_E@", "String: the algorithm associated with the wrapped key."], ["int", "int: the type of the wrapped key. This must be one of SECRET_KEY, PRIVATE_KEY, or PUBLIC_KEY."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)."], ["@B_java#security#NoSuchAlgorithmException_E@", "if no installed providers can create keys of type wrappedKeyType for the wrappedKeyAlgorithm."], ["@B_java#security#InvalidKeyException_E@", "if wrappedKey does not represent a wrapped key of type wrappedKeyType for the wrappedKeyAlgorithm."], ["@B_java#lang#UnsupportedOperationException_E@", "if the corresponding method in the CipherSpi is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Unwrap a previously wrapped key.", "history": "Added in API level 1", "FullName": "public final Key unwrap (byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType)"}, "update(java.nio.ByteBuffer, java.nio.ByteBuffer)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the input ByteBuffer"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the output ByteByffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this cipher is in a wrong state (e.g., has not been initialized)"], ["@B_java#lang#IllegalArgumentException_E@", "if input and output are the same object"], ["@B_java#nio#ReadOnlyBufferException_E@", "if the output buffer is read-only"], ["@B_javax#crypto#ShortBufferException_E@", "if there is insufficient space in the output buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part. All input.remaining() bytes starting at input.position() are processed. The result is stored in the output buffer. Upon return, the input buffer's position will be equal to its limit; its limit will not have changed. The output buffer's position will have advanced by n, where n is the value returned by this method; the output buffer's limit will not have changed. If output.remaining() bytes are insufficient to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#Cipher#getOutputSize_E@ to determine how big the output buffer should be. Note: this method should be copy-safe, which means the input and output buffers can reference the same block of memory and no unprocessed input data is overwritten when the result is copied into the output buffer.", "history": "added in API level 1", "FullName": "public final int update (ByteBuffer input, ByteBuffer output)"}}, "Inheritance": [], "ClassName": "javax.crypto.Cipher", "ClassDesc": "This class provides the functionality of a cryptographic cipher for encryption and decryption. It forms the core of the Java Cryptographic Extension (JCE) framework. In order to create a Cipher object, the application calls the Cipher's getInstance method, and passes the name of the requested A A transformation is of the form: \"\" (in the latter case, provider-specific default values for the mode and padding scheme are used). For example, the following is a valid transformation: CFB and OFB, block ciphers can encrypt data in units smaller than the cipher's actual block size. When requesting such a mode, you may optionally specify the number of bits to be processed at a time by appending this number to the mode name as shown in the \"DES/CFB8/NoPadding\" and \"DES/OFB32/PKCS5Padding\" transformations. If no such number is specified, a provider-specific default is used. (For example, the SunJCE provider uses a default of 64 bits for DES.) Thus, block ciphers can be turned into byte-oriented stream ciphers by using an 8 bit mode such as CFB8 or OFB8. Modes such as Authenticated Encryption with Associated Data (AEAD) provide authenticity assurances for both confidential data and Additional Associated Data (AAD) that is not encrypted. (Please see @B_javax#crypto#Mac_E@). This tag is appended to the ciphertext during encryption, and is verified on decryption. AEAD modes such as GCM/CCM perform all AAD authenticity calculations before starting the ciphertext authenticity calculations. To avoid implementations having to internally buffer ciphertext, all AAD data must be supplied to GCM/CCM implementations (via the updateAAD methods) update and doFinal methods). Note that GCM mode has a uniqueness requirement on IVs used in encryption with a given key. When IVs are repeated for GCM encryption, such usages are subject to forgery attacks. Thus, after each encryption operation using GCM mode, callers should re-initialize the cipher objects with GCM parameters which has a different IV value. Android provides the following Cipher transformations:"}