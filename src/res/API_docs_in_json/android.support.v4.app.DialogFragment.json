{"Functions": {"getDialog()": {"Returns": [["@B_android#app#Dialog_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "Dialog getDialog ()"}, "onGetLayoutInflater(android.os.Bundle)": {"Returns": [["@B_android#view#LayoutInflater_E@", "The LayoutInflater used to inflate Views of this Fragment."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the LayoutInflater used to inflate Views of this Fragment. The default implementation will throw an exception if the Fragment is not attached.", "history": "added in version 25.4.0", "FullName": "LayoutInflater onGetLayoutInflater (Bundle savedInstanceState)"}, "setCancelable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the dialog is cancelable. The default is true."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the shown Dialog is cancelable. Use this instead of directly calling @B_android#app#Dialog#setCancelable_E@, because DialogFragment needs to change its behavior based on this.", "history": "added in version 22.0.0", "FullName": "void setCancelable (boolean cancelable)"}, "onDismiss(android.content.DialogInterface)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface_E@", "DialogInterface: the dialog that was dismissed will be passed into the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be invoked when the dialog is dismissed.", "history": "added in version 22.0.0", "FullName": "void onDismiss (DialogInterface dialog)"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss the fragment and its dialog. If the fragment was added to the back stack, all back stack state up to and including this entry will be popped. Otherwise, a new transaction will be committed to remove the fragment.", "history": "added in version 22.0.0", "FullName": "void dismiss ()"}, "DialogFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "DialogFragment ()"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove dialog.", "history": "added in version 22.0.0", "FullName": "void onDestroyView ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onStart ()"}, "getTheme()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getTheme ()"}, "isCancelable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current value of @B_android#support#v4#app#DialogFragment#setCancelable_E@.", "history": "added in version 22.0.0", "FullName": "boolean isCancelable ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#support#v4#app#Fragment#onAttach_E@ and before @B_android#support#v4#app#Fragment#onCreateView_E@. Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#support#v4#app#Fragment#onActivityCreated_E@. Any restored child fragments will be created before the base Fragment.onCreate method returns.", "history": "added in version 22.0.0", "FullName": "void onCreate (Bundle savedInstanceState)"}, "onCancel(android.content.DialogInterface)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface_E@", "DialogInterface: the dialog that was canceled will be passed into the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be invoked when the dialog is canceled.", "history": "added in version 22.0.0", "FullName": "void onCancel (DialogInterface dialog)"}, "onDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer attached to its activity. This is called after @B_android#support#v4#app#Fragment#onDestroy_E@.", "history": "added in version 22.0.0", "FullName": "void onDetach ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onStop ()"}, "dismissAllowingStateLoss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Version of @B_android#support#v4#app#DialogFragment#dismiss_E@ that uses @B_android#support#v4#app#FragmentTransaction#commitAllowingStateLoss_E@. See linked documentation for further details.", "history": "added in version 22.0.0", "FullName": "void dismissAllowingStateLoss ()"}, "onAttach(android.app.Activity)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is first attached to its activity. @B_android#support#v4#app#Fragment#onCreate_E@ will be called after this. Deprecated. See @B_android#support#v4#app#Fragment#onAttach_E@.", "history": "", "FullName": "public void onAttach (Activity activity)"}, "onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#support#v4#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#support#v4#app#Fragment#onCreateView_E@ and before @B_android#support#v4#app#Fragment#onViewStateRestored_E@.", "history": "added in version 22.0.0", "FullName": "void onActivityCreated (Bundle savedInstanceState)"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#support#v4#app#Fragment#onCreate_E@, @B_android#support#v4#app#Fragment#onCreateView_E@, and @B_android#support#v4#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#support#v4#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "added in version 22.0.0", "FullName": "void onSaveInstanceState (Bundle outState)"}, "onCreateDialog(android.os.Bundle)": {"Returns": [["@B_android#app#Dialog_E@", "Return a new Dialog instance to be displayed by the Fragment."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The last saved instance state of the Fragment, or null if this is a freshly created Fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to build your own custom Dialog container. This is typically used to show an AlertDialog instead of a generic Dialog; when doing so, @B_android#support#v4#app#Fragment#onCreateView_E@ does not need to be implemented since the AlertDialog takes care of its own content. This method will be called after @B_android#support#v4#app#DialogFragment#onCreate_E@ and before @B_android#support#v4#app#Fragment#onCreateView_E@. The default implementation simply instantiates and returns a @B_android#app#Dialog_E@ class. Note: DialogFragment own the @B_android#app#Dialog#setOnCancelListener_E@ and @B_android#app#Dialog#setOnDismissListener_E@ callbacks. You must not set them yourself. To find out about these events, override @B_android#support#v4#app#DialogFragment#onCancel_E@ and @B_android#support#v4#app#DialogFragment#onDismiss_E@.", "history": "added in version 22.0.0", "FullName": "Dialog onCreateDialog (Bundle savedInstanceState)"}, "getShowsDialog()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current value of @B_android#support#v4#app#DialogFragment#setShowsDialog_E@.", "history": "added in version 22.0.0", "FullName": "boolean getShowsDialog ()"}, "onAttach(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is first attached to its context. @B_android#support#v4#app#Fragment#onCreate_E@ will be called after this.", "history": "added in version 23.0.0", "FullName": "void onAttach (Context context)"}, "setShowsDialog(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the fragment will be displayed in a Dialog. If false, no Dialog will be created and the fragment's view hierarchy left undisturbed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether this fragment should be shown in a dialog. If not set, no Dialog will be created in @B_android#support#v4#app#DialogFragment#onActivityCreated_E@, and the fragment's view hierarchy will thus not be added to it. This allows you to instead use it as a normal fragment (embedded inside of its activity). This is normally set for you based on whether the fragment is associated with a container view ID passed to @B_android#support#v4#app#FragmentTransaction#add_E@. If the fragment was added with a container, setShowsDialog will be initialized to false; otherwise, it will be true.", "history": "added in version 22.0.0", "FullName": "void setShowsDialog (boolean showsDialog)"}, "setStyle(int, int)": {"Returns": [], "Parameters": [["int", "int: Selects a standard style: may be @B_android#support#v4#app#DialogFragment#STYLE_NORMAL_E@, @B_android#support#v4#app#DialogFragment#STYLE_NO_TITLE_E@, @B_android#support#v4#app#DialogFragment#STYLE_NO_FRAME_E@, or @B_android#support#v4#app#DialogFragment#STYLE_NO_INPUT_E@."], ["int", "int: Optional custom theme. If 0, an appropriate theme (based on the style) will be selected for you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call to customize the basic appearance and behavior of the fragment's dialog. This can be used for some common dialog behaviors, taking care of selecting flags, theme, and other options for you. The same effect can be achieve by manually setting Dialog and Window attributes yourself. Calling this after the fragment's Dialog is created will have no effect.", "history": "added in version 22.0.0", "FullName": "void setStyle (int style, int theme)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#app#Fragment_E@"], "ClassName": "android.support.v4.app.DialogFragment", "ClassDesc": "Static library support version of the framework's https:##developer#android#com@B_android#app#DialogFragment_E@. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview."}