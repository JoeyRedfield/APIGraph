{"Functions": {"allowPurging(boolean)": {"Returns": [["boolean", "previous value of allowPurging"]], "Parameters": [["boolean", "boolean: true if the operating system can purge the contents of the file in low memory situations"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Purgable is considered generally fragile and hard to use safely. Applications are recommend to instead use @B_android#content#ComponentCallbacks2#onTrimMemory_E@ to react to memory events and release shared memory regions as appropriate. Enables or disables purging of the memory file.", "history": "Added in API level 1 Deprecated in API level 27", "FullName": "public boolean allowPurging (boolean allowPurging)"}, "readBytes(byte[], int, int, int)": {"Returns": [["int", "number of bytes read."]], "Parameters": [["byte[]", "byte: byte array to read bytes into."], ["int", "int: offset into the memory file to read from."], ["int", "int: offset into the byte array buffer to read into."], ["int", "int: number of bytes to read."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file has been purged or deactivated."]], "SeeAlso": [], "Permissions": [], "Description": "Reads bytes from the memory file. Will throw an IOException if the file has been purged.", "history": "added in API level 1", "FullName": "public int readBytes (byte[] buffer, int srcOffset, int destOffset, int count)"}, "MemoryFile(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: optional name for the file (can be null)."], ["int", "int: of the memory file in bytes, must be positive."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file could not be created."]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new ashmem region. The region is initially not purgable.", "history": "added in API level 1", "FullName": "public MemoryFile (String name, int length)"}, "writeBytes(byte[],int,int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: byte array to write bytes from."], ["int", "int: offset into the byte array buffer to write from."], ["int", "int: offset into the memory file to write to."], ["int", "int: number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file has been purged or deactivated."]], "SeeAlso": [], "Permissions": [], "Description": "Write bytes to the memory file. Will throw an IOException if the file has been purged.", "history": "Added in API level 1", "FullName": "public void writeBytes (byte[] buffer, int srcOffset, int destOffset, int count)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 1", "FullName": "void finalize ()"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "InputStream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new InputStream for reading from the memory file.", "history": "Added in API level 1", "FullName": "public InputStream getInputStream ()"}, "length()": {"Returns": [["int", "file length."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the memory file.", "history": "Added in API level 1", "FullName": "public int length ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the memory file. If there are no other open references to the memory file, it will be deleted.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "OutputStream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new OutputStream for writing to the memory file.", "history": "Added in API level 1", "FullName": "public OutputStream getOutputStream ()"}, "writeBytes(byte[], int, int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: byte array to write bytes from."], ["int", "int: offset into the byte array buffer to write from."], ["int", "int: offset into the memory file to write to."], ["int", "int: number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file has been purged or deactivated."]], "SeeAlso": [], "Permissions": [], "Description": "Write bytes to the memory file. Will throw an IOException if the file has been purged.", "history": "added in API level 1", "FullName": "public void writeBytes (byte[] buffer, int srcOffset, int destOffset, int count)"}, "MemoryFile(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: optional name for the file (can be null)."], ["int", "int: of the memory file in bytes, must be positive."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file could not be created."]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new ashmem region. The region is initially not purgable.", "history": "Added in API level 1", "FullName": "public MemoryFile (String name, int length)"}, "isPurgingAllowed()": {"Returns": [["boolean", "true if the file may be purged."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Purgable is considered generally fragile and hard to use safely. Applications are recommend to instead use @B_android#content#ComponentCallbacks2#onTrimMemory_E@ to react to memory events and release shared memory regions as appropriate. Is memory file purging enabled?", "history": "Added in API level 1 Deprecated in API level 27", "FullName": "public boolean isPurgingAllowed ()"}, "readBytes(byte[],int,int,int)": {"Returns": [["int", "number of bytes read."]], "Parameters": [["byte[]", "byte: byte array to read bytes into."], ["int", "int: offset into the memory file to read from."], ["int", "int: offset into the byte array buffer to read into."], ["int", "int: number of bytes to read."]], "Throws": [["@B_java#io#IOException_E@", "if the memory file has been purged or deactivated."]], "SeeAlso": [], "Permissions": [], "Description": "Reads bytes from the memory file. Will throw an IOException if the file has been purged.", "history": "Added in API level 1", "FullName": "public int readBytes (byte[] buffer, int srcOffset, int destOffset, int count)"}}, "Inheritance": [], "ClassName": "android.os.MemoryFile", "ClassDesc": "MemoryFile is a wrapper for @B_android#os#SharedMemory_E@ which can optionally be set to purgeable. Applications should generally prefer to use @B_android#os#SharedMemory_E@ which offers more flexible access & control over the shared memory region than MemoryFile does. Purgeable files may have their contents reclaimed by the kernel in low memory conditions (only if allowPurging is set to true). After a file is purged, attempts to read or write the file will cause an IOException to be thrown."}