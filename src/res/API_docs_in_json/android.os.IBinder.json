{"Functions": {"queryLocalInterface(java.lang.String)": {"Returns": [["@B_android#os#IInterface_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to retrieve a local implementation of an interface for this Binder object. If null is returned, you will need to instantiate a proxy class to marshall calls through the transact() method.", "history": "Added in API level 1", "FullName": "public abstract IInterface queryLocalInterface (String descriptor)"}, "pingBinder()": {"Returns": [["boolean", "Returns false if the hosting process is gone, otherwise the result (always by default true) returned by the pingBinder() implementation on the other side."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check to see if the object still exists.", "history": "Added in API level 1", "FullName": "public abstract boolean pingBinder ()"}, "dump(java.io.FileDescriptor,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to. This value must never be null."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request. This value may be null."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Print the object's state into the given stream.", "history": "Added in API level 3", "FullName": "public abstract void dump (FileDescriptor fd, String[] args)"}, "dumpAsync(java.io.FileDescriptor,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to. This value must never be null."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request. This value may be null."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#os#IBinder#dump_E@ but always executes asynchronously. If the object is local, a new thread is created to perform the dump.", "history": "Added in API level 13", "FullName": "public abstract void dumpAsync (FileDescriptor fd, String[] args)"}, "unlinkToDeath(android.os.IBinder.DeathRecipient,int)": {"Returns": [["boolean", "true if the recipient is successfully unlinked, assuring you that its @B_android#os#IBinder#DeathRecipient#binderDied_E@ method will not be called; false if the target IBinder has already died, meaning the method has been (or soon will be) called."]], "Parameters": [["@B_android#os#IBinder#DeathRecipient_E@", "IBinder.DeathRecipient: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the given recipient has not been registered with the IBinder, and the IBinder is still alive. Note that if the recipient was never registered, but the IBinder has already died, then this exception will not be thrown, and you will receive a false return value instead."]], "SeeAlso": [], "Permissions": [], "Description": "Remove a previously registered death notification. The recipient will no longer be called if this object dies.", "history": "Added in API level 1", "FullName": "public abstract boolean unlinkToDeath (IBinder.DeathRecipient recipient, int flags)"}, "getInterfaceDescriptor()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Get the canonical name of the interface supported by this binder.", "history": "Added in API level 1", "FullName": "public abstract String getInterfaceDescriptor ()"}, "linkToDeath(android.os.IBinder.DeathRecipient,int)": {"Returns": [], "Parameters": [["@B_android#os#IBinder#DeathRecipient_E@", "IBinder.DeathRecipient: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_android#os#RemoteException_E@", "if the target IBinder's process has already died."]], "SeeAlso": ["@B_android#os#IBinder#unlinkToDeath_E@"], "Permissions": [], "Description": "Register the recipient for a notification if this binder goes away. If this binder object unexpectedly goes away (typically because its hosting process has been killed), then the given @B_android#os#IBinder#DeathRecipient_E@'s @B_android#os#IBinder#DeathRecipient#binderDied_E@ method will be called. You will only receive death notifications for remote binders, as local binders by definition can't die without you dying as well.", "history": "Added in API level 1", "FullName": "public abstract void linkToDeath (IBinder.DeathRecipient recipient, int flags)"}, "isBinderAlive()": {"Returns": [["boolean", "false if the process is not alive. Note that if it returns true, the process may have died while the call is returning."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check to see if the process that the binder is in is still alive.", "history": "Added in API level 1", "FullName": "public abstract boolean isBinderAlive ()"}, "dump(java.io.FileDescriptor, java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to.This value must never be null."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request. This value may be null."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Print the object's state into the given stream.", "history": "added in API level 3", "FullName": "public abstract void dump (FileDescriptor fd, String[] args)"}, "transact(int,android.os.Parcel,android.os.Parcel,int)": {"Returns": [["boolean", "Returns the result from @B_android#os#Binder#onTransact_E@. A successful call generally returns true; false generally means the transaction code was not understood."]], "Parameters": [["int", "int: The action to perform. This should be a number between @B_android#os#IBinder#FIRST_CALL_TRANSACTION_E@ and @B_android#os#IBinder#LAST_CALL_TRANSACTION_E@."], ["@B_android#os#Parcel_E@", "Parcel: Marshalled data to send to the target. Must not be null. If you are not sending any data, you must create an empty Parcel that is given here. This value must never be null."], ["@B_android#os#Parcel_E@", "Parcel: Marshalled data to be received from the target. May be null if you are not interested in the return value. This value may be null."], ["int", "int: Additional operation flags. Either 0 for a normal RPC, or @B_android#os#IBinder#FLAG_ONEWAY_E@ for a one-way RPC."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Perform a generic operation with the object.", "history": "Added in API level 1", "FullName": "public abstract boolean transact (int code, Parcel data, Parcel reply, int flags)"}}, "Inheritance": [], "ClassName": "android.os.IBinder", "ClassDesc": "Base interface for a remotable object, the core part of a lightweight remote procedure call mechanism designed for high performance when performing in-process and cross-process calls. This interface describes the abstract protocol for interacting with a remotable object. Do not implement this interface directly, instead extend from @B_android#os#Binder_E@. The key IBinder API is @B_android#os#IBinder#transact_E@ matched by @B_android#os#Binder#onTransact_E@. These methods allow you to send a call to an IBinder object and receive a call coming in to a Binder object, respectively. This transaction API is synchronous, such that a call to @B_android#os#IBinder#transact_E@ does not return until the target has returned from @B_android#os#Binder#onTransact_E@; this is the expected behavior when calling an object that exists in the local process, and the underlying inter-process communication (IPC) mechanism ensures that these same semantics apply when going across processes. The data sent through transact() is a @B_android#os#Parcel_E@, a generic buffer of data that also maintains some meta-data about its contents. The meta data is used to manage IBinder object references in the buffer, so that those references can be maintained as the buffer moves across processes. This mechanism ensures that when an IBinder is written into a Parcel and sent to another process, if that other process sends a reference to that same IBinder back to the original process, then the original process will receive the same IBinder object back. These semantics allow IBinder/Binder objects to be used as a unique identity (to serve as a token or for other purposes) that can be managed across processes. The system maintains a pool of transaction threads in each process that it runs in. These threads are used to dispatch all IPCs coming in from other processes. For example, when an IPC is made from process A to process B, the calling thread in A blocks in transact() as it sends the transaction to process B. The next available pool thread in B receives the incoming transaction, calls Binder.onTransact() on the target object, and replies with the result Parcel. Upon receiving its result, the thread in process A returns to allow its execution to continue. In effect, other processes appear to use as additional threads that you did not create executing in your own process. The Binder system also supports recursion across processes. For example if process A performs a transaction to process B, and process B while handling that transaction calls transact() on an IBinder that is implemented in A, then the thread in A that is currently waiting for the original transaction to finish will take care of calling Binder.onTransact() on the object being called by B. This ensures that the recursion semantics when calling remote binder object are the same as when calling local objects. When working with remote objects, you often want to find out when they are no longer valid. There are three ways this can be determined: The @B_android#os#IBinder#transact_E@ method will throw a @B_android#os#RemoteException_E@ exception if you try to call it on an IBinder whose process no longer exists. The @B_android#os#IBinder#pingBinder_E@ method can be called, and will return false if the remote process no longer exists. The @B_android#os#IBinder#linkToDeath_E@ method can be used to register a @B_android#os#IBinder#DeathRecipient_E@ with the IBinder, which will be called when its containing process goes away."}