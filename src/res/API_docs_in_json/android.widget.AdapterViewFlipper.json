{"Functions": {"showPrevious()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually shows the previous child.", "history": "Added in API level 11", "FullName": "public void showPrevious ()"}, "setAdapter(android.widget.Adapter)": {"Returns": [], "Parameters": [["@B_android#widget#Adapter_E@", "Adapter: The adapter to use to create this view's content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides the data and the views to represent the data in this widget.", "history": "Added in API level 11", "FullName": "public void setAdapter (Adapter adapter)"}, "AdapterViewFlipper(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AdapterViewFlipper (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "fyiWillBeAdvancedByHostKThx()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an @B_android#appwidget#AppWidgetHost_E@ to indicate that it will be automatically advancing the views of this @B_android#widget#AdapterViewFlipper_E@ by calling @B_android#widget#AdapterViewAnimator#advance_E@ at some point in the future. This allows @B_android#widget#AdapterViewFlipper_E@ to prepare by no longer Advancing its children.", "history": "Added in API level 11", "FullName": "public void fyiWillBeAdvancedByHostKThx ()"}, "getFlipInterval()": {"Returns": [["int", "the flip interval in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewFlipper#setFlipInterval_E@"], "Permissions": [], "Description": "Returns the flip interval, in milliseconds.", "history": "Added in API level 16", "FullName": "public int getFlipInterval ()"}, "isAutoStart()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this view automatically calls @B_android#widget#AdapterViewFlipper#startFlipping_E@ when it becomes attached to a window.", "history": "Added in API level 11", "FullName": "public boolean isAutoStart ()"}, "startFlipping()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a timer to cycle through child views", "history": "Added in API level 11", "FullName": "public void startFlipping ()"}, "AdapterViewFlipper(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AdapterViewFlipper (Context context, AttributeSet attrs, int defStyleAttr)"}, "AdapterViewFlipper(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AdapterViewFlipper (Context context)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void onAttachedToWindow ()"}, "AdapterViewFlipper(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AdapterViewFlipper (Context context, AttributeSet attrs)"}, "setAutoStart(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set if this view automatically calls @B_android#widget#AdapterViewFlipper#startFlipping_E@ when it becomes attached to a window.", "history": "Added in API level 11", "FullName": "public void setAutoStart (boolean autoStart)"}, "stopFlipping()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "No more flips", "history": "Added in API level 11", "FullName": "public void stopFlipping ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void onDetachedFromWindow ()"}, "isFlipping()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the child views are flipping.", "history": "Added in API level 11", "FullName": "public boolean isFlipping ()"}, "onWindowVisibilityChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new visibility of the window. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing has change its visibility (between @B_android#view#View#GONE_E@, @B_android#view#View#INVISIBLE_E@, and @B_android#view#View#VISIBLE_E@). Note that this tells you whether or not your window is being made visible to the window manager; this does not tell you whether or not your window is obscured by other windows on the screen, even if it is itself visible.", "history": "Added in API level 11", "FullName": "protected void onWindowVisibilityChanged (int visibility)"}, "showNext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually shows the next child.", "history": "Added in API level 11", "FullName": "public void showNext ()"}, "setFlipInterval(int)": {"Returns": [], "Parameters": [["int", "int: flip interval in milliseconds"]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewFlipper#getFlipInterval_E@"], "Permissions": [], "Description": "How long to wait before flipping to the next view.", "history": "Added in API level 11", "FullName": "public void setFlipInterval (int flipInterval)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@", "@B_android#widget#AdapterViewAnimator_E@"], "ClassName": "android.widget.AdapterViewFlipper", "ClassDesc": "Simple @B_android#widget#ViewAnimator_E@ that will animate between two or more views that have been added to it. Only one child is shown at a time. If requested, can automatically flip between each child at a regular interval."}