{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 28", "FullName": "public String toString ()"}, "getBreakStrategy()": {"Returns": [["int", "A line break strategy Value is @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_SIMPLE_E@, @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_HIGH_QUALITY_E@, or @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_BALANCED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the break strategy for this text.", "history": "Added in API level 28", "FullName": "public int getBreakStrategy ()"}, "getTextPaint()": {"Returns": [["@B_android#text#TextPaint_E@", "A @B_android#text#TextPaint_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#text#TextPaint_E@ for this text.", "history": "Added in API level 28", "FullName": "public TextPaint getTextPaint ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this and the given param result in the same text layout"]], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the same text layout.", "history": "Added in API level 28", "FullName": "public boolean equals (Object o)"}, "getTextDirection()": {"Returns": [["@B_android#text#TextDirectionHeuristic_E@", "A @B_android#text#TextDirectionHeuristic_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#text#TextDirectionHeuristic_E@ for this text.", "history": "Added in API level 28", "FullName": "public TextDirectionHeuristic getTextDirection ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 28", "FullName": "public int hashCode ()"}, "getHyphenationFrequency()": {"Returns": [["int", "A hyphenation frequency Value is @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@, or @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hyphenation frequency for this text.", "history": "Added in API level 28", "FullName": "public int getHyphenationFrequency ()"}}, "Inheritance": [], "ClassName": "android.text.PrecomputedText.Params", "ClassDesc": "The information required for building @B_android#text#PrecomputedText_E@. Contains information required for precomputing text measurement metadata, so it can be done in isolation of a @B_android#widget#TextView_E@ or @B_android#text#StaticLayout_E@, when final layout constraints are not known."}