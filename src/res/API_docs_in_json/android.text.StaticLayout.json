{"Functions": {"getLineDescent(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the descent of the specified line(0\u2026getLineCount() - 1).", "history": "Added in API level 1", "FullName": "public int getLineDescent (int line)"}, "getLineForVertical(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the line number corresponding to the specified vertical position. If you ask for a position above 0, you get 0; if you ask for a position below the bottom of the text, you get the last line.", "history": "Added in API level 1", "FullName": "public int getLineForVertical (int vertical)"}, "getLineStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()). If the specified line is equal to the line count, returns the length of the text.", "history": "Added in API level 1", "FullName": "public int getLineStart (int line)"}, "getEllipsizedWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width to which this Layout is ellipsizing, or @B_android#text#Layout#getWidth_E@ if it is not doing anything special.", "history": "Added in API level 1", "FullName": "public int getEllipsizedWidth ()"}, "getLineCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of lines of text in this layout.", "history": "Added in API level 1", "FullName": "public int getLineCount ()"}, "StaticLayout(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#text#StaticLayout#Builder_E@ instead.", "history": "Added in API level 1", "FullName": "public StaticLayout (CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad)"}, "getLineContainsTab(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified line contains one or more characters that need to be handled specially, like tabs.", "history": "Added in API level 1", "FullName": "public boolean getLineContainsTab (int line)"}, "getEllipsisCount(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place.", "history": "Added in API level 1", "FullName": "public int getEllipsisCount (int line)"}, "getEllipsisStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)", "history": "Added in API level 1", "FullName": "public int getEllipsisStart (int line)"}, "getBottomPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of extra pixels of descent padding in the bottom line of the Layout.", "history": "Added in API level 1", "FullName": "public int getBottomPadding ()"}, "getLineTop(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical position of the top of the specified line (0\u2026getLineCount()). If the specified line is equal to the line count, returns the bottom of the last line.", "history": "Added in API level 1", "FullName": "public int getLineTop (int line)"}, "StaticLayout(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#text#StaticLayout#Builder_E@ instead.", "history": "Added in API level 1", "FullName": "public StaticLayout (CharSequence source, TextPaint paint, int width, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad)"}, "getLineDirections(int)": {"Returns": [["@B_android#text#Layout#Directions_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the directional run information for the specified line. The array alternates counts of characters in left-to-right and right-to-left segments of the line. NOTE: this is inadequate to support bidirectional text, and will change.", "history": "Added in API level 1", "FullName": "public final Layout.Directions getLineDirections (int line)"}, "getTopPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout.", "history": "Added in API level 1", "FullName": "public int getTopPadding ()"}, "getParagraphDirection(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see @B_android#text#Layout#DIR_LEFT_TO_RIGHT_E@, @B_android#text#Layout#DIR_RIGHT_TO_LEFT_E@).", "history": "Added in API level 1", "FullName": "public int getParagraphDirection (int line)"}, "StaticLayout(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean,android.text.TextUtils.TruncateAt,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["boolean", "boolean no parameter comment"], ["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#text#StaticLayout#Builder_E@ instead.", "history": "Added in API level 1", "FullName": "public StaticLayout (CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)"}}, "Inheritance": ["@B_android#text#Layout_E@"], "ClassName": "android.text.StaticLayout", "ClassDesc": "StaticLayout is a Layout for text that will not be edited after it is laid out. Use @B_android#text#DynamicLayout_E@ for text that may change. This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or would be tempted to call @B_android#graphics#Canvas#drawText_E@ directly."}