{"Functions": {"SSLSocketFactory(java.security.KeyStore,java.lang.String,java.security.KeyStore)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"]], "Throws": [["@B_java#security#KeyManagementException_E@", ""], ["@B_java#security#KeyStoreException_E@", ""], ["@B_java#security#NoSuchAlgorithmException_E@", ""], ["@B_java#security#UnrecoverableKeyException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SSLSocketFactory (KeyStore keystore, String keystorePassword, KeyStore truststore)"}, "isSecure(java.net.Socket)": {"Returns": [["boolean", "true"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the connected socket"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a socket connection is secure. This factory creates TLS/SSL socket connections which, by default, are considered secure. Derived classes may override this method to perform runtime checks, for example based on the cypher suite.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public boolean isSecure (Socket sock)"}, "SSLSocketFactory(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"], ["@B_java#security#SecureRandom_E@", "SecureRandom no parameter comment"], ["@B_org#apache#http#conn#scheme#HostNameResolver_E@", "HostNameResolver no parameter comment"]], "Throws": [["@B_java#security#KeyManagementException_E@", ""], ["@B_java#security#KeyStoreException_E@", ""], ["@B_java#security#NoSuchAlgorithmException_E@", ""], ["@B_java#security#UnrecoverableKeyException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SSLSocketFactory (String algorithm, KeyStore keystore, String keystorePassword, KeyStore truststore, SecureRandom random, HostNameResolver nameResolver)"}, "setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#ssl#X509HostnameVerifier_E@", "X509HostnameVerifier no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public void setHostnameVerifier (X509HostnameVerifier hostnameVerifier)"}, "createSocket(java.net.Socket,java.lang.String,int,boolean)": {"Returns": [["@B_java#net#Socket_E@", "Socket a new socket"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the existing socket"], ["@B_java#lang#String_E@", "String: the host name/IP"], ["int", "int: the port on the host"], ["boolean", "boolean: a flag for closing the underling socket when the created socket is closed"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#net#UnknownHostException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a socket connected to the given host that is layered over an existing socket. Used primarily for creating secure sockets through proxies.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public Socket createSocket (Socket socket, String host, int port, boolean autoClose)"}, "SSLSocketFactory(java.security.KeyStore)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"]], "Throws": [["@B_java#security#KeyManagementException_E@", ""], ["@B_java#security#KeyStoreException_E@", ""], ["@B_java#security#NoSuchAlgorithmException_E@", ""], ["@B_java#security#UnrecoverableKeyException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SSLSocketFactory (KeyStore truststore)"}, "SSLSocketFactory(java.security.KeyStore,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#security#KeyManagementException_E@", ""], ["@B_java#security#KeyStoreException_E@", ""], ["@B_java#security#NoSuchAlgorithmException_E@", ""], ["@B_java#security#UnrecoverableKeyException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SSLSocketFactory (KeyStore keystore, String keystorePassword)"}, "createSocket()": {"Returns": [["@B_java#net#Socket_E@", "a new socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, unconnected socket. The socket should subsequently be passed to @B_org#apache#http#conn#scheme#SocketFactory#connectSocket_E@.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public Socket createSocket ()"}, "getHostnameVerifier()": {"Returns": [["@B_org#apache#http#conn#ssl#X509HostnameVerifier_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public X509HostnameVerifier getHostnameVerifier ()"}, "connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)": {"Returns": [["@B_java#net#Socket_E@", "the connected socket. The returned object may be different from the sock argument if this factory supports a layered protocol."]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the socket to connect, as obtained from @B_org#apache#http#conn#ssl#SSLSocketFactory#createSocket_E@. null indicates that a new socket should be created and connected."], ["@B_java#lang#String_E@", "String: the host to connect to"], ["int", "int: the port to connect to on the host"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address to bind the socket to, or null for any"], ["int", "int: the port on the local machine, 0 or a negative number for any"], ["@B_org#apache#http#params#HttpParams_E@", "HttpParams: additional @B_org#apache#http#params#HttpParams_E@ for connecting"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Connects a socket to the given host.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public Socket connectSocket (Socket sock, String host, int port, InetAddress localAddress, int localPort, HttpParams params)"}, "getSocketFactory()": {"Returns": [["@B_org#apache#http#conn#ssl#SSLSocketFactory_E@", "a SSLProtocolSocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an singleton instance of the SSLProtocolSocketFactory.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public static SSLSocketFactory getSocketFactory ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.ssl.SSLSocketFactory", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Layered socket factory for TLS/SSL connections, based on JSSE. . SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates and to authenticate to the HTTPS server using a private key. SSLSocketFactory will enable server authentication when supplied with a @B_java#security#KeyStore_E@ file containg one or several trusted certificates. The client secure socket will reject the connection during the SSL session handshake if the target HTTPS server attempts to authenticate itself with a non-trusted certificate. Use JDK keytool utility to import a trusted certificate and generate a truststore file: SSLSocketFactory will enable client authentication when supplied with a @B_java#security#KeyStore_E@ file containg a private key/public certificate pair. The client secure socket will use the private key to authenticate itself to the target HTTPS server during the SSL session handshake if requested to do so by the server. The target HTTPS server will in its turn verify the certificate presented by the client in order to establish client's authenticity Use the following sequence of actions to generate a keystore file Use JDK keytool utility to generate a new key Issue a certificate signing request (CSR) Send the certificate request to the trusted Certificate Authority for signature. One may choose to act as her own CA and sign the certificate request using a PKI tool, such as OpenSSL. Import the trusted CA root certificate Import the PKCS#7 file containg the complete certificate chain Verify the content the resultant keystore file"}