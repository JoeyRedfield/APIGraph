{"Functions": {"onCreate(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["SurfaceHolder", "SurfaceHolder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onCreate (SurfaceHolder holder)"}, "onTimeTick()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called periodically to update the time shown by the watch face. This method is called: at least once per minute in both ambient and interactive modes when date or time has changed when timezone has changed", "history": "", "FullName": "void onTimeTick ()"}, "WatchFaceService.Engine()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WatchFaceService.Engine ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onDestroy ()"}, "getUnreadCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of unread notification cards in the stream.", "history": "", "FullName": "int getUnreadCount ()"}, "getInterruptionFilter()": {"Returns": [["int", "@B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_NONE_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_PRIORITY_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_ALL_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_ALARMS_E@, or @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_UNKNOWN_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns interruption filter selected by the user.", "history": "", "FullName": "int getInterruptionFilter ()"}, "getPeekCardPosition()": {"Returns": [["Rect", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the location of the first peeking card. This doesn't provide information about all movements of the card, only about its location when it's peeking at the bottom and allowing the watch face to be exposed.", "history": "", "FullName": "Rect getPeekCardPosition ()"}, "onInterruptionFilterChanged(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user changes interruption filter. The watch face should adjust the amount of information it displays. For example, if it displays the number of pending emails, it should hide it if interruptionFilter is equal to @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_NONE_E@. interruptionFilter can be @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_NONE_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_PRIORITY_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_ALL_E@, @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_ALARMS_E@, or @B_android#support#wearable#watchface#WatchFaceService#INTERRUPTION_FILTER_UNKNOWN_E@.", "history": "", "FullName": "void onInterruptionFilterChanged (int interruptionFilter)"}, "onTapCommand(int, int, int, long)": {"Returns": [], "Parameters": [["int", "int: Value representing the event sent to the wallpaper."], ["int", "int: X coordinate of the event."], ["int", "int: Y coordinate of the event."], ["long", "long: The time, in millis, of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a tap or touch related event occurs.", "history": "", "FullName": "void onTapCommand (int tapType, int x, int y, long eventTime)"}, "onPropertiesChanged(android.os.Bundle)": {"Returns": [], "Parameters": [["Bundle", "Bundle: a bundle containing the hardware properties"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the properties of the device are determined. These include @B_android#support#wearable#watchface#WatchFaceService#PROPERTY_BURN_IN_PROTECTION_E@ and @B_android#support#wearable#watchface#WatchFaceService#PROPERTY_LOW_BIT_AMBIENT_E@.", "history": "", "FullName": "void onPropertiesChanged (Bundle properties)"}, "onVisibilityChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to inform you of the watch face becoming visible or hidden. If you decide to override this method, you must call super.onVisibilityChanged(visible) as the first statement in your override.", "history": "", "FullName": "void onVisibilityChanged (boolean visible)"}, "onPeekCardPositionUpdate(android.graphics.Rect)": {"Returns": [], "Parameters": [["Rect", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the first, peeking card positions itself on the screen. This is where the watch face can change its appearance depending on where the card is on the screen. This doesn't provide information about all movements of the card, only about its location when it's peeking at the bottom and allowing the watch face to be exposed.", "history": "", "FullName": "void onPeekCardPositionUpdate (Rect rect)"}, "onAmbientModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the device enters or exits ambient mode. The watch face should switch to a black and white display in ambient mode. If the watch face displays seconds, it should hide them in ambient mode.", "history": "", "FullName": "void onAmbientModeChanged (boolean inAmbientMode)"}, "isInAmbientMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the watch face is in ambient mode. When true, the watch face should display in white on black.", "history": "", "FullName": "boolean isInAmbientMode ()"}, "getNotificationCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of notification cards in the stream.", "history": "", "FullName": "int getNotificationCount ()"}, "onNotificationCountChanged(int)": {"Returns": [], "Parameters": [["int", "int: total number of the notification cards in the stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the total number of notification cards in the stream has changed.", "history": "", "FullName": "void onNotificationCountChanged (int count)"}, "onUnreadCountChanged(int)": {"Returns": [], "Parameters": [["int", "int: number of the notification cards in the stream that haven't yet been seen by the user"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the number of unread notification cards in the stream has changed.", "history": "", "FullName": "void onUnreadCountChanged (int count)"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "http:##developer#android#com@B_android#service#wallpaper#WallpaperService#Engine_E@"], "ClassName": "android.support.wearable.watchface.WatchFaceService.Engine", "ClassDesc": "The actual implementation of a watch face. You must implement https:##developer#android#com@B_android#support#wearable#watchface#WatchFaceService#onCreateEngine_E@ to return your concrete Engine implementation."}