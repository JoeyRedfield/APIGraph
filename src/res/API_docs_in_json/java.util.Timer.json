{"Functions": {"cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Terminates this timer, discarding any currently scheduled tasks. Does not interfere with a currently executing task (if it exists). Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it. Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer. This method may be called repeatedly; the second and subsequent calls have no effect.", "history": "Added in API level 1", "FullName": "public void cancel ()"}, "purge()": {"Returns": [["int", "the number of tasks removed from the queue."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all cancelled tasks from this timer's task queue. Most programs will have no need to call this method. It is designed for use by the rare application that cancels a large number of tasks. Calling this method trades time for space: the runtime of the method may be proportional to n + c log n, where n is the number of tasks in the queue and c is the number of cancelled tasks. Note that it is permissible to call this method from within a a task scheduled on this timer.", "history": "Added in API level 1", "FullName": "public int purge ()"}, "Timer(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the associated thread"], ["boolean", "boolean: true if the associated thread should run as a daemon"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new timer whose associated thread has the specified name, and may be specified to", "history": "added in API level 1", "FullName": "public Timer (String name, boolean isDaemon)"}, "scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["@B_java#util#Date_E@", "Date: First time at which task is to be executed."], ["long", "long: time in milliseconds between successive task executions."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if firstTime.getTime() < 0 or period <= 0"], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task or firstTime is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for repeated In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to \"catch up.\" In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying Fixed-rate execution is appropriate for recurring activities that are sensitive to", "history": "Added in API level 1", "FullName": "public void scheduleAtFixedRate (TimerTask task, Date firstTime, long period)"}, "scheduleAtFixedRate(java.util.TimerTask,long,long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["long", "long: delay in milliseconds before task is to be executed."], ["long", "long: time in milliseconds between successive task executions."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if delay < 0, or delay + System.currentTimeMillis() < 0, or period <= 0"], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for repeated In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to \"catch up.\" In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying Fixed-rate execution is appropriate for recurring activities that are sensitive to", "history": "Added in API level 1", "FullName": "public void scheduleAtFixedRate (TimerTask task, long delay, long period)"}, "Timer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new timer. The associated thread does", "history": "Added in API level 1", "FullName": "public Timer ()"}, "schedule(java.util.TimerTask,java.util.Date,long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["@B_java#util#Date_E@", "Date: First time at which task is to be executed."], ["long", "long: time in milliseconds between successive task executions."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if firstTime.getTime() < 0, or period <= 0"], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task or firstTime is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for repeated In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\" In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.", "history": "Added in API level 1", "FullName": "public void schedule (TimerTask task, Date firstTime, long period)"}, "schedule(java.util.TimerTask, long, long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["long", "long: delay in milliseconds before task is to be executed."], ["long", "long: time in milliseconds between successive task executions."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if delay < 0, or delay + System.currentTimeMillis() < 0, or period <= 0"], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for repeated In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\" In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.", "history": "added in API level 1", "FullName": "public void schedule (TimerTask task, long delay, long period)"}, "schedule(java.util.TimerTask,long,long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["long", "long: delay in milliseconds before task is to be executed."], ["long", "long: time in milliseconds between successive task executions."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if delay < 0, or delay + System.currentTimeMillis() < 0, or period <= 0"], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for repeated In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\" In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.", "history": "Added in API level 1", "FullName": "public void schedule (TimerTask task, long delay, long period)"}, "schedule(java.util.TimerTask,long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["long", "long: delay in milliseconds before task is to be executed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if delay is negative, or delay + System.currentTimeMillis() is negative."], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for execution after the specified delay.", "history": "Added in API level 1", "FullName": "public void schedule (TimerTask task, long delay)"}, "Timer(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the associated thread"], ["boolean", "boolean: true if the associated thread should run as a daemon"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new timer whose associated thread has the specified name, and may be specified to", "history": "Added in API level 1", "FullName": "public Timer (String name, boolean isDaemon)"}, "schedule(java.util.TimerTask, long)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["long", "long: delay in milliseconds before task is to be executed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if delay is negative, or delay + System.currentTimeMillis() is negative."], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for execution after the specified delay.", "history": "added in API level 1", "FullName": "public void schedule (TimerTask task, long delay)"}, "Timer(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the associated thread should run as a daemon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new timer whose associated thread may be specified to", "history": "Added in API level 1", "FullName": "public Timer (boolean isDaemon)"}, "Timer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the associated thread"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new timer whose associated thread has the specified name. The associated thread does", "history": "Added in API level 1", "FullName": "public Timer (String name)"}, "schedule(java.util.TimerTask, java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["@B_java#util#Date_E@", "Date: time at which task is to be executed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if time.getTime() is negative."], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task or time is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution.", "history": "added in API level 1", "FullName": "public void schedule (TimerTask task, Date time)"}, "schedule(java.util.TimerTask,java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#TimerTask_E@", "TimerTask: task to be scheduled."], ["@B_java#util#Date_E@", "Date: time at which task is to be executed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if time.getTime() is negative."], ["@B_java#lang#IllegalStateException_E@", "if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated."], ["@B_java#lang#NullPointerException_E@", "if task or time is null"]], "SeeAlso": [], "Permissions": [], "Description": "Schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution.", "history": "Added in API level 1", "FullName": "public void schedule (TimerTask task, Date time)"}}, "Inheritance": [], "ClassName": "java.util.Timer", "ClassDesc": "A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals. Corresponding to each After the last live reference to a If the timer's task execution thread terminates unexpectedly, for example, because its This class is thread-safe: multiple threads can share a single This class does Java 5.0 introduced the java.util.concurrent package and one of the concurrency utilities therein is the @B_java#util#concurrent#ScheduledThreadPoolExecutor_E@ which is a thread pool for repeatedly executing tasks at a given rate or delay. It is effectively a more versatile replacement for the Timer/TimerTask combination, as it allows multiple service threads, accepts various time units, and doesn't require subclassing TimerTask (just implement Runnable). Configuring ScheduledThreadPoolExecutor with one thread makes it equivalent to Timer. Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks. Implementation note: All constructors start a timer thread."}