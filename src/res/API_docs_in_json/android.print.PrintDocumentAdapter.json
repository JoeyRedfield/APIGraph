{"Functions": {"onFinish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when printing finishes. You can use this callback to release resources acquired in @B_android#print#PrintDocumentAdapter#onStart_E@. This method is invoked on the main thread.", "history": "Added in API level 19", "FullName": "public void onFinish ()"}, "onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter.WriteResultCallback)": {"Returns": [], "Parameters": [["@B_android#print#PageRange_E@", "PageRange: The pages whose content to print - non-overlapping in ascending order."], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: The destination file descriptor to which to write."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: Signal for observing cancel writing requests."], ["@B_android#print#PrintDocumentAdapter#WriteResultCallback_E@", "PrintDocumentAdapter.WriteResultCallback: Callback to inform the system for the write result."]], "Throws": [], "SeeAlso": ["@B_android#print#PrintDocumentAdapter#WriteResultCallback_E@", "@B_android#os#CancellationSignal_E@"], "Permissions": [], "Description": "Called when specific pages of the content should be written in the form of a PDF file to the given file descriptor. This method is invoked on the main thread. After you are done writing, you should close the file descriptor and invoke @B_android#print#PrintDocumentAdapter#WriteResultCallback#onWriteFinished_E@, if writing completed successfully; or @B_android#print#PrintDocumentAdapter#WriteResultCallback#onWriteFailed_E@, if an error occurred; or @B_android#print#PrintDocumentAdapter#WriteResultCallback#onWriteCancelled_E@, if writing was cancelled in a response to a cancellation request via the passed in @B_android#os#CancellationSignal_E@. Note that you One of the arguments passed to this method is a @B_android#os#CancellationSignal_E@ which is used to propagate requests from the system to your application for canceling the current write operation. For example, a cancellation may be requested if the user changes a print option that may affect layout while you are performing a write operation. In such a case the system will make an attempt to cancel the current write as a layout will have to be performed which then may be followed by a write. Typically, you should register a cancellation callback in the cancellation signal. The cancellation callback @B_android#os#CancellationSignal_E@ upon invocation of which you should stop writing.", "history": "Added in API level 19", "FullName": "public abstract void onWrite (PageRange[] pages, ParcelFileDescriptor destination, CancellationSignal cancellationSignal, PrintDocumentAdapter.WriteResultCallback callback)"}, "onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter.LayoutResultCallback,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#print#PrintAttributes_E@", "PrintAttributes: The old print attributes."], ["@B_android#print#PrintAttributes_E@", "PrintAttributes: The new print attributes."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: Signal for observing cancel layout requests."], ["@B_android#print#PrintDocumentAdapter#LayoutResultCallback_E@", "PrintDocumentAdapter.LayoutResultCallback: Callback to inform the system for the layout result."], ["@B_android#os#Bundle_E@", "Bundle: Additional information about how to layout the content."]], "Throws": [], "SeeAlso": ["@B_android#print#PrintDocumentAdapter#LayoutResultCallback_E@", "@B_android#os#CancellationSignal_E@", "@B_android#print#PrintDocumentAdapter_E@"], "Permissions": [], "Description": "Called when the print attributes (page size, density, etc) changed giving you a chance to layout the content such that it matches the new constraints. This method is invoked on the main thread. After you are done laying out, you @B_android#print#PrintDocumentAdapter#LayoutResultCallback#onLayoutFinished_E@ with the last argument true or false depending on whether the layout changed the content or not, respectively; or @B_android#print#PrintDocumentAdapter#LayoutResultCallback#onLayoutFailed_E@, if an error occurred; or @B_android#print#PrintDocumentAdapter#LayoutResultCallback#onLayoutCancelled_E@ if layout was cancelled in a response to a cancellation request via the passed in @B_android#os#CancellationSignal_E@. Note that you One of the arguments passed to this method is a @B_android#os#CancellationSignal_E@ which is used to propagate requests from the system to your application for canceling the current layout operation. For example, a cancellation may be requested if the user changes a print option that may affect layout while you are performing a layout operation. In such a case the system will make an attempt to cancel the current layout as another one will have to be performed. Typically, you should register a cancellation callback in the cancellation signal. The cancellation callback @B_android#os#CancellationSignal_E@ upon invocation of which you should stop the layout.", "history": "Added in API level 19", "FullName": "public abstract void onLayout (PrintAttributes oldAttributes, PrintAttributes newAttributes, CancellationSignal cancellationSignal, PrintDocumentAdapter.LayoutResultCallback callback, Bundle extras)"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when printing starts. You can use this callback to allocate resources. This method is invoked on the main thread.", "history": "Added in API level 19", "FullName": "public void onStart ()"}, "PrintDocumentAdapter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 19", "FullName": "public PrintDocumentAdapter ()"}}, "Inheritance": [], "ClassName": "android.print.PrintDocumentAdapter", "ClassDesc": "Base class that provides the content of a document to be printed. Initially, you will receive a call to @B_android#print#PrintDocumentAdapter#onStart_E@. This callback can be used to allocate resources. Next, you will get one or more calls to @B_android#print#PrintDocumentAdapter#onLayout_E@ to inform you that the print attributes (page size, density, etc) changed giving you an opportunity to layout the content to match the new constraints. After every call to @B_android#print#PrintDocumentAdapter#onLayout_E@, you @B_android#print#PrintDocumentAdapter#onWrite_E@ asking you to write a PDF file with the content for specific pages. Finally, you will receive a call to @B_android#print#PrintDocumentAdapter#onFinish_E@. You can use this callback to release resources allocated in @B_android#print#PrintDocumentAdapter#onStart_E@. The @B_android#print#PrintDocumentAdapter#onStart_E@ callback is always the first call you will receive and is useful for doing one time setup or resource allocation before printing. You will not receive a subsequent call here. The @B_android#print#PrintDocumentAdapter#onLayout_E@ callback requires that you layout the content based on the current @B_android#print#PrintAttributes_E@. The execution of this method is not considered completed until you invoke one of the methods on the passed in callback instance. Hence, you will not receive a subsequent call to any other method of this class until the execution of this method is complete by invoking one of the callback methods. The @B_android#print#PrintDocumentAdapter#onWrite_E@ requires that you render and write the content of some pages to the provided destination. The execution of this method is not considered complete until you invoke one of the methods on the passed in callback instance. Hence, you will not receive a subsequent call to any other method of this class until the execution of this method is complete by invoking one of the callback methods. You will never receive a sequence of one or more calls to this method without a previous call to @B_android#print#PrintDocumentAdapter#onLayout_E@. The @B_android#print#PrintDocumentAdapter#onFinish_E@ callback is always the last call you will receive and is useful for doing one time cleanup or resource deallocation after printing. You will not receive a subsequent call here. The APIs defined in this class are designed to enable doing part or all of the work on an arbitrary thread. For example, if the printed content does not depend on the UI state, i.e. on what is shown on the screen, then you can offload the entire work on a dedicated thread, thus making your application interactive while the print work is being performed. Note that while your activity is covered by the system print UI and a user cannot interact with it, doing the printing work on the main application thread may affect the performance of your other application components as they are also executed on that thread. You can also do work on different threads, for example if you print UI content, you can handle @B_android#print#PrintDocumentAdapter#onStart_E@ and @B_android#print#PrintDocumentAdapter#onLayout_E@ on the UI thread (assuming onStart initializes resources needed for layout). This will ensure that the UI does not change while you are laying out the printed content. Then you can handle @B_android#print#PrintDocumentAdapter#onWrite_E@ and @B_android#print#PrintDocumentAdapter#onFinish_E@ on another thread. This will ensure that the main thread is busy for a minimal amount of time. Also this assumes that you will generate the printed content in @B_android#print#PrintDocumentAdapter#onLayout_E@ which is not mandatory. If you use multiple threads, you are responsible for proper synchronization."}