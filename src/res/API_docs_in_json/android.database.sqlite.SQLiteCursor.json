{"Functions": {"setFillWindowForwardOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, rows will be fetched starting from requested position up to the window's capacity. Default value is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls fetching of rows relative to requested position. Calling this method defines how rows will be loaded, but it doesn't affect rows that are already in the window. This setting is preserved if a new window is @B_android#database#sqlite#SQLiteCursor#setWindow_E@", "history": "Added in API level 28", "FullName": "public void setFillWindowForwardOnly (boolean fillWindowForwardOnly)"}, "deactivate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deactivates the Cursor, making all calls on it fail until @B_android#database#Cursor#requery_E@ is called. Inactive Cursors use fewer resources than active Cursors. Calling @B_android#database#Cursor#requery_E@ will make the cursor active again.", "history": "Added in API level 1", "FullName": "public void deactivate ()"}, "getDatabase()": {"Returns": [["@B_android#database#sqlite#SQLiteDatabase_E@", "the SQLiteDatabase that this cursor is associated with."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the database that this cursor is associated with.", "history": "Added in API level 1", "FullName": "public SQLiteDatabase getDatabase ()"}, "SQLiteCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: a reference to a Database object that is already constructed and opened. This param is not used any longer"], ["@B_android#database#sqlite#SQLiteCursorDriver_E@", "SQLiteCursorDriver no parameter comment"], ["@B_java#lang#String_E@", "String: the name of the table used for this query"], ["@B_android#database#sqlite#SQLiteQuery_E@", "SQLiteQuery: the rest of the query terms cursor is finalized"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#database#sqlite#SQLiteCursor#SQLiteCursor_E@ instead Execute a query and provide access to its result set through a Cursor interface. For a query such as: SELECT name, birth, phone FROM myTable WHERE ... LIMIT 1,20 ORDER BY... the column names (name, birth, phone) would be in the projection argument and everything from FROM onward would be in the params argument.", "history": "Added in API level 1", "FullName": "public SQLiteCursor (SQLiteDatabase db, SQLiteCursorDriver driver, String editTable, SQLiteQuery query)"}, "onMove(int,int)": {"Returns": [["boolean", "true if the move is successful, false otherwise"]], "Parameters": [["int", "int: the position that we're moving from"], ["int", "int: the position that we're moving to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position.", "history": "Added in API level 1", "FullName": "public boolean onMove (int oldPosition, int newPosition)"}, "setWindow(android.database.CursorWindow)": {"Returns": [], "Parameters": [["@B_android#database#CursorWindow_E@", "CursorWindow: The new cursor window, typically a remote cursor window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a new cursor window for the cursor to use. The cursor takes ownership of the provided cursor window; the cursor window will be closed when the cursor is closed or when the cursor adopts a new cursor window. If the cursor previously had a cursor window, then it is closed when the new cursor window is assigned.", "history": "Added in API level 1", "FullName": "public void setWindow (CursorWindow window)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the Cursor, releasing all of its resources and making it completely invalid. Unlike @B_android#database#Cursor#deactivate_E@ a call to @B_android#database#Cursor#requery_E@ will not make the Cursor valid again.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getColumnNames()": {"Returns": [["@B_java#lang#String_E@", "the names of the columns returned in this query."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.", "history": "Added in API level 1", "FullName": "public String[] getColumnNames ()"}, "getCount()": {"Returns": [["int", "the number of rows in the cursor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the numbers of rows in the cursor.", "history": "Added in API level 1", "FullName": "public int getCount ()"}, "requery()": {"Returns": [["boolean", "true if the requery succeeded, false if not, in which case the cursor becomes invalid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the query that created the cursor again, refreshing its contents. This may be done at any time, including after a call to @B_android#database#Cursor#deactivate_E@. Since this method could execute a query on the database and potentially take a while, it could cause ANR if it is called on Main (UI) thread. A warning is printed if this method is being executed on Main thread.", "history": "Added in API level 1", "FullName": "public boolean requery ()"}, "setSelectionArguments(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selection arguments. The new values take effect after a call to requery().", "history": "Added in API level 1", "FullName": "public void setSelectionArguments (String[] selectionArgs)"}, "SQLiteCursor(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteCursorDriver_E@", "SQLiteCursorDriver no parameter comment"], ["@B_java#lang#String_E@", "String: the name of the table used for this query"], ["@B_android#database#sqlite#SQLiteQuery_E@", "SQLiteQuery: the @B_android#database#sqlite#SQLiteQuery_E@ object associated with this cursor object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Execute a query and provide access to its result set through a Cursor interface. For a query such as: SELECT name, birth, phone FROM myTable WHERE ... LIMIT 1,20 ORDER BY... the column names (name, birth, phone) would be in the projection argument and everything from FROM onward would be in the params argument.", "history": "Added in API level 11", "FullName": "public SQLiteCursor (SQLiteCursorDriver driver, String editTable, SQLiteQuery query)"}, "onMove(int, int)": {"Returns": [["boolean", "true if the move is successful, false otherwise"]], "Parameters": [["int", "int: the position that we're moving from"], ["int", "int: the position that we're moving to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position.", "history": "added in API level 1", "FullName": "public boolean onMove (int oldPosition, int newPosition)"}, "getColumnIndex(java.lang.String)": {"Returns": [["int", "the zero-based column index for the given column name, or -1 if the column name does not exist."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the zero-based index for the given column name, or -1 if the column doesn't exist. If you expect the column to exist use @B_android#database#Cursor#getColumnIndexOrThrow_E@ instead, which will make the error more clear.", "history": "Added in API level 1", "FullName": "public int getColumnIndex (String columnName)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Release the native resources, if they haven't been released yet.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}}, "Inheritance": ["@B_android#database#AbstractCursor_E@", "@B_android#database#AbstractWindowedCursor_E@"], "ClassName": "android.database.sqlite.SQLiteCursor", "ClassDesc": "A Cursor implementation that exposes results from a query on a @B_android#database#sqlite#SQLiteDatabase_E@. SQLiteCursor is not internally synchronized so code using a SQLiteCursor from multiple threads should perform its own synchronization when using the SQLiteCursor."}