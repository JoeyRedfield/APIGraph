{"Functions": {"doFrame(long)": {"Returns": [], "Parameters": [["long", "long: The time in nanoseconds when the frame started being rendered, in the @B_java#lang#System#nanoTime_E@ timebase. Divide this value by 1000000 to convert it to the @B_android#os#SystemClock#uptimeMillis_E@ time base."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of @B_android#os#SystemClock#uptimeMillis_E@ or @B_java#lang#System#nanoTime_E@ for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly.", "history": "Added in API level 16", "FullName": "public abstract void doFrame (long frameTimeNanos)"}}, "Inheritance": [], "ClassName": "android.view.Choreographer.FrameCallback", "ClassDesc": "Implement this interface to receive a callback when a new display frame is being rendered. The callback is invoked on the @B_android#os#Looper_E@ thread to which the @B_android#view#Choreographer_E@ is attached."}