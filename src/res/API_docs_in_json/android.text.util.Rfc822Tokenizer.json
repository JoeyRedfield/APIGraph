{"Functions": {"terminateToken(java.lang.CharSequence)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Terminates the specified address with a comma and space. This assumes that the specified text already has valid syntax. The Adapter subclass's convertToString() method must make that guarantee.", "history": "Added in API level 1", "FullName": "public CharSequence terminateToken (CharSequence text)"}, "findTokenStart(java.lang.CharSequence,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start of the token that ends at offset cursor within text.", "history": "Added in API level 1", "FullName": "public int findTokenStart (CharSequence text, int cursor)"}, "findTokenStart(java.lang.CharSequence, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start of the token that ends at offset cursor within text.", "history": "added in API level 1", "FullName": "public int findTokenStart (CharSequence text, int cursor)"}, "findTokenEnd(java.lang.CharSequence,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end of the token (minus trailing punctuation) that begins at offset cursor within text.", "history": "Added in API level 1", "FullName": "public int findTokenEnd (CharSequence text, int cursor)"}, "tokenize(java.lang.CharSequence,java.util.Collection<android.text.util.Rfc822Token>)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#util#Collection_E@", "Collection no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This constructor will try to take a string like \"Foo Bar (something) <foo\\@google.com>, blah\\@google.com (something)\" and convert it into one or more Rfc822Tokens, output into the supplied collection. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error.", "history": "Added in API level 8", "FullName": "public static void tokenize (CharSequence text, Collection<Rfc822Token> out)"}, "Rfc822Tokenizer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Rfc822Tokenizer ()"}, "findTokenEnd(java.lang.CharSequence, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end of the token (minus trailing punctuation) that begins at offset cursor within text.", "history": "added in API level 1", "FullName": "public int findTokenEnd (CharSequence text, int cursor)"}, "tokenize(java.lang.CharSequence)": {"Returns": [["@B_android#text#util#Rfc822Token_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will try to take a string like \"Foo Bar (something) <foo\\@google.com>, blah\\@google.com (something)\" and convert it into one or more Rfc822Tokens. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error.", "history": "Added in API level 1", "FullName": "public static Rfc822Token[] tokenize (CharSequence text)"}}, "Inheritance": [], "ClassName": "android.text.util.Rfc822Tokenizer", "ClassDesc": "This class works as a Tokenizer for MultiAutoCompleteTextView for address list fields, and also provides a method for converting a string of addresses (such as might be typed into such a field) into a series of Rfc822Tokens."}