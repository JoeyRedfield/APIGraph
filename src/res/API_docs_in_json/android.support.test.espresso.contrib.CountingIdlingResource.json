{"Functions": {"CountingIdlingResource(java.lang.String)": {"Returns": [], "Parameters": [["String", "String: the resource name this resource should report to Espresso."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CountingIdlingResource without debug tracing.", "history": "", "FullName": "CountingIdlingResource (String resourceName)"}, "dumpStateToLogs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints the current state of this resource to the logcat at info level.", "history": "", "FullName": "void dumpStateToLogs ()"}, "isIdleNow()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if resource is currently idle. Espresso will", "history": "", "FullName": "boolean isIdleNow ()"}, "increment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increments the count of in-flight transactions to the resource being monitored. This method can be called from any thread.", "history": "", "FullName": "void increment ()"}, "getName()": {"Returns": [["String", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the resources (used for logging and idempotency of registration).", "history": "", "FullName": "String getName ()"}, "decrement()": {"Returns": [], "Parameters": [], "Throws": [["IllegalStateException", "if the counter is below 0."]], "SeeAlso": [], "Permissions": [], "Description": "Decrements the count of in-flight transactions to the resource being monitored. If this operation results in the counter falling below 0 - an exception is raised.", "history": "", "FullName": "void decrement ()"}, "CountingIdlingResource(java.lang.String, boolean)": {"Returns": [], "Parameters": [["String", "String: the resource name this resource should report to Espresso."], ["boolean", "boolean: if true increment & decrement calls will print trace information to logs."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CountingIdlingResource.", "history": "", "FullName": "CountingIdlingResource (String resourceName, boolean debugCounting)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.idling.CountingIdlingResource", "ClassDesc": "An implementation of @B_android#support#test#espresso#IdlingResource_E@ that determines idleness by maintaining an internal counter. When the counter is 0 - it is considered to be idle, when it is non-zero it is not idle. This is very similar to the way a https:##developer#android#com@B_java#util#concurrent#Semaphore_E@ behaves. The counter may be incremented or decremented from any thread. If it reaches an illogical state (like counter less than zero) it will throw an IllegalStateException. This class can then be used to wrap up operations that while in progress should block tests from accessing the UI."}