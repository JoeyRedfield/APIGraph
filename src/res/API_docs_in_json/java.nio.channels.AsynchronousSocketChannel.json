{"Functions": {"write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler<java.lang.Long,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"], ["long", "long: The maximum time for the I/O operation to complete"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit of the timeout argument"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the pre-conditions for the offset and length parameter aren't met"], ["@B_java#nio#channels#WritePendingException_E@", "If a write operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. This operation, sometimes called a gathering write, is often useful when implementing network protocols that group data into segments consisting of one or more fixed-length headers followed by a variable-length body. The handler parameter is a completion handler that is invoked when the write operation completes (or fails). The result passed to the completion handler is the number of bytes written. This method initiates a write of up to Suppose that a byte sequence of length If a timeout is specified and the timeout elapses before the operation completes then it completes with the exception @B_java#nio#channels#InterruptedByTimeoutException_E@. Where a timeout occurs, and the implementation cannot guarantee that bytes have not been written, or will not be written to the channel from the given buffers, then further attempts to write to the channel will cause an unspecific runtime exception to be thrown.", "history": "Added in API level 26", "FullName": "public abstract void write (ByteBuffer[] srcs, int offset, int length, long timeout, TimeUnit unit, A attachment, CompletionHandler<Long, ? super A> handler)"}, "open(java.nio.channels.AsynchronousChannelGroup)": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "A new asynchronous socket channel"]], "Parameters": [["@B_java#nio#channels#AsynchronousChannelGroup_E@", "AsynchronousChannelGroup: The group to which the newly constructed channel should be bound, or null for the default group"]], "Throws": [["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group is shutdown"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens an asynchronous socket channel. The new channel is created by invoking the @B_java#nio#channels#spi#AsynchronousChannelProvider#openAsynchronousSocketChannel_E@ method on the @B_java#nio#channels#spi#AsynchronousChannelProvider_E@ that created the group. If the group parameter is null then the resulting channel is created by the system-wide default provider, and bound to the default group.", "history": "Added in API level 26", "FullName": "public static AsynchronousSocketChannel open (AsynchronousChannelGroup group)"}, "write(java.nio.ByteBuffer)": {"Returns": [["@B_java#util#concurrent#Future_E@", "A Future representing the result of the operation"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#WritePendingException_E@", ""], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousByteChannel#write_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns the number of bytes written.", "history": "Added in API level 26", "FullName": "public abstract Future<Integer> write (ByteBuffer src)"}, "write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"], ["long", "long: The maximum time for the I/O operation to complete"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit of the timeout argument"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#nio#channels#WritePendingException_E@", "If a write operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The handler parameter is a completion handler that is invoked when the write operation completes (or fails). The result passed to the completion handler is the number of bytes written. If a timeout is specified and the timeout elapses before the operation completes then it completes with the exception @B_java#nio#channels#InterruptedByTimeoutException_E@. Where a timeout occurs, and the implementation cannot guarantee that bytes have not been written, or will not be written to the channel from the given buffer, then further attempts to write to the channel will cause an unspecific runtime exception to be thrown. Otherwise this method works in the same manner as the @B_java#nio#channels#AsynchronousByteChannel#write_E@ method.", "history": "Added in API level 26", "FullName": "public abstract void write (ByteBuffer src, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer, ? super A> handler)"}, "shutdownOutput()": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "The channel"]], "Parameters": [], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Shutdown the connection for writing without closing the channel. Once shutdown for writing then further attempts to write to the channel will throw @B_java#nio#channels#ClosedChannelException_E@. If the output side of the connection is already shutdown then invoking this method has no effect. The effect on an outstanding write operation is system dependent and therefore not specified.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousSocketChannel shutdownOutput ()"}, "setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousSocketChannel setOption (SocketOption<T> name, T value)"}, "connect(java.net.SocketAddress,A,java.nio.channels.CompletionHandler<java.lang.Void,?superA>)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The remote address to which this channel is to be connected"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#nio#channels#UnresolvedAddressException_E@", "If the given remote address is not fully resolved"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given remote address is not supported"], ["@B_java#nio#channels#AlreadyConnectedException_E@", "If this channel is already connected"], ["@B_java#nio#channels#ConnectionPendingException_E@", "If a connection operation is already in progress on this channel"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the given remote endpoint"]], "SeeAlso": ["@B_java#nio#channels#AsynchronousSocketChannel#getRemoteAddress_E@"], "Permissions": [], "Description": "Connects this channel. This method initiates an operation to connect this channel. The handler parameter is a completion handler that is invoked when the connection is successfully established or connection cannot be established. If the connection cannot be established then the channel is closed. This method performs exactly the same security checks as the @B_java#net#Socket_E@ class. That is, if a security manager has been installed then this method verifies that its @B_java#lang#SecurityManager#checkConnect_E@ method permits connecting to the address and port number of the given remote endpoint.", "history": "Added in API level 26", "FullName": "public abstract void connect (SocketAddress remote, A attachment, CompletionHandler<Void, ? super A> handler)"}, "read(java.nio.ByteBuffer)": {"Returns": [["@B_java#util#concurrent#Future_E@", "A Future representing the result of the operation"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ReadPendingException_E@", ""], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousByteChannel#read_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream.", "history": "Added in API level 26", "FullName": "public abstract Future<Integer> read (ByteBuffer dst)"}, "getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port of the channel's socket is returned.", "history": "Added in API level 26", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "open()": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "A new asynchronous socket channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens an asynchronous socket channel. This method returns an asynchronous socket channel that is bound to the default group.This method is equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static AsynchronousSocketChannel open ()"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#AsynchronousChannelProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 26", "FullName": "public final AsynchronousChannelProvider provider ()"}, "read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The completion handler"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ReadPendingException_E@", ""], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The handler parameter is a completion handler that is invoked when the read operation completes (or fails). The result passed to the completion handler is the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream. The read operation may read up to dst.remaining() at the time that the read is attempted. Where 0 without initiating an I/O operation. Suppose that a byte sequence of length Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. This method may be invoked at any time. Some channel types may not allow more than one read to be outstanding at any given time. If a thread initiates a read operation before a previous read operation has completed then a @B_java#nio#channels#ReadPendingException_E@ will be thrown.", "history": "Added in API level 26", "FullName": "public final void read (ByteBuffer dst, A attachment, CompletionHandler<Integer, ? super A> handler)"}, "setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 26", "FullName": "public abstract AsynchronousSocketChannel setOption (SocketOption<T> name, T value)"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind the socket to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#ConnectionPendingException_E@", "If a connection operation is already in progress on this channel"], ["@B_java#nio#channels#AlreadyBoundException_E@", ""], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. If the local parameter has the value null then the socket will be bound to an address that is assigned automatically.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousSocketChannel bind (SocketAddress local)"}, "read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler<java.lang.Long,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"], ["long", "long: The maximum time for the I/O operation to complete"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit of the timeout argument"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the pre-conditions for the offset and length parameter aren't met"], ["@B_java#lang#IllegalArgumentException_E@", "If the buffer is read-only"], ["@B_java#nio#channels#ReadPendingException_E@", "If a read operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into a subsequence of the given buffers. This operation, sometimes called a scattering read, is often useful when implementing network protocols that group data into segments consisting of one or more fixed-length headers followed by a variable-length body. The handler parameter is a completion handler that is invoked when the read operation completes (or fails). The result passed to the completion handler is the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream. This method initiates a read of up to Suppose that a byte sequence of length If a timeout is specified and the timeout elapses before the operation completes then it completes with the exception @B_java#nio#channels#InterruptedByTimeoutException_E@. Where a timeout occurs, and the implementation cannot guarantee that bytes have not been read, or will not be read from the channel into the given buffers, then further attempts to read from the channel will cause an unspecific runtime exception to be thrown.", "history": "Added in API level 26", "FullName": "public abstract void read (ByteBuffer[] dsts, int offset, int length, long timeout, TimeUnit unit, A attachment, CompletionHandler<Long, ? super A> handler)"}, "shutdownInput()": {"Returns": [["@B_java#nio#channels#AsynchronousSocketChannel_E@", "The channel"]], "Parameters": [], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Shutdown the connection for reading without closing the channel. Once shutdown for reading then further reads on the channel will return -1, the end-of-stream indication. If the input side of the connection is already shutdown then invoking this method has no effect. The effect on an outstanding read operation is system dependent and therefore not specified. The effect, if any, when there is data in the socket receive buffer that has not been read, or data arrives subsequently, is also system dependent.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousSocketChannel shutdownInput ()"}, "getRemoteAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The remote address; null if the channel's socket is not connected"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the remote address to which this channel's socket is connected. Where the channel is bound and connected to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@.", "history": "Added in API level 26", "FullName": "public abstract SocketAddress getRemoteAddress ()"}, "write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The completion handler object"]], "Throws": [["@B_java#nio#channels#WritePendingException_E@", ""], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. This method initiates an asynchronous write operation to write a sequence of bytes to this channel from the given buffer. The handler parameter is a completion handler that is invoked when the write operation completes (or fails). The result passed to the completion handler is the number of bytes written. The write operation may write up to src.remaining() at the time that the write is attempted. Where 0 without initiating an I/O operation. Suppose that a byte sequence of length Buffers are not safe for use by multiple concurrent threads so care should be taken to not access the buffer until the operation has completed. This method may be invoked at any time. Some channel types may not allow more than one write to be outstanding at any given time. If a thread initiates a write operation before a previous write operation has completed then a @B_java#nio#channels#WritePendingException_E@ will be thrown.", "history": "Added in API level 26", "FullName": "public final void write (ByteBuffer src, A attachment, CompletionHandler<Integer, ? super A> handler)"}, "connect(java.net.SocketAddress)": {"Returns": [["@B_java#util#concurrent#Future_E@", "A Future object representing the pending result"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The remote address to which this channel is to be connected"]], "Throws": [["@B_java#nio#channels#UnresolvedAddressException_E@", "If the given remote address is not fully resolved"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given remote address is not supported"], ["@B_java#nio#channels#AlreadyConnectedException_E@", "If this channel is already connected"], ["@B_java#nio#channels#ConnectionPendingException_E@", "If a connection operation is already in progress on this channel"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the given remote endpoint"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this channel. This method initiates an operation to connect this channel. This method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousSocketChannel#connect_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns null on successful completion.", "history": "Added in API level 26", "FullName": "public abstract Future<Void> connect (SocketAddress remote)"}, "AsynchronousSocketChannel(java.nio.channels.spi.AsynchronousChannelProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#AsynchronousChannelProvider_E@", "AsynchronousChannelProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected AsynchronousSocketChannel (AsynchronousChannelProvider provider)"}, "read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler<java.lang.Integer,?superA>)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"], ["long", "long: The maximum time for the I/O operation to complete"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit of the timeout argument"], ["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the buffer is read-only"], ["@B_java#nio#channels#ReadPendingException_E@", "If a read operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. This method initiates an asynchronous read operation to read a sequence of bytes from this channel into the given buffer. The handler parameter is a completion handler that is invoked when the read operation completes (or fails). The result passed to the completion handler is the number of bytes read or -1 if no bytes could be read because the channel has reached end-of-stream. If a timeout is specified and the timeout elapses before the operation completes then the operation completes with the exception @B_java#nio#channels#InterruptedByTimeoutException_E@. Where a timeout occurs, and the implementation cannot guarantee that bytes have not been read, or will not be read from the channel into the given buffer, then further attempts to read from the channel will cause an unspecific runtime exception to be thrown. Otherwise this method works in the same manner as the @B_java#nio#channels#AsynchronousByteChannel#read_E@ method.", "history": "Added in API level 26", "FullName": "public abstract void read (ByteBuffer dst, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer, ? super A> handler)"}}, "Inheritance": [], "ClassName": "java.nio.channels.AsynchronousSocketChannel", "ClassDesc": "An asynchronous channel for stream-oriented connecting sockets. Asynchronous socket channels are created in one of two ways. A newly-created AsynchronousSocketChannel is created by invoking one of the @B_java#nio#channels#AsynchronousSocketChannel#open_E@ methods defined by this class. A newly-created channel is open but not yet connected. A connected AsynchronousSocketChannel is created when a connection is made to the socket of an @B_java#nio#channels#AsynchronousServerSocketChannel_E@. It is not possible to create an asynchronous socket channel for an arbitrary, pre-existing @B_java#net#Socket_E@. A newly-created channel is connected by invoking its @B_java#nio#channels#AsynchronousSocketChannel#connect_E@ method; once connected, a channel remains connected until it is closed. Whether or not a socket channel is connected may be determined by invoking its @B_java#nio#channels#AsynchronousSocketChannel#getRemoteAddress_E@ method. An attempt to invoke an I/O operation upon an unconnected channel will cause a @B_java#nio#channels#NotYetConnectedException_E@ to be thrown. Channels of this type are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one read operation and one write operation can be outstanding at any time. If a thread initiates a read operation before a previous read operation has completed then a @B_java#nio#channels#ReadPendingException_E@ will be thrown. Similarly, an attempt to initiate a write operation before a previous write has completed will throw a @B_java#nio#channels#WritePendingException_E@. Socket options are configured using the @B_java#nio#channels#AsynchronousSocketChannel#setOption_E@ method. Asynchronous socket channels support the following options: The @B_java#nio#channels#AsynchronousSocketChannel#read_E@ and @B_java#nio#channels#AsynchronousSocketChannel#write_E@ methods defined by this class allow a timeout to be specified when initiating a read or write operation. If the timeout elapses before an operation completes then the operation completes with the exception @B_java#nio#channels#InterruptedByTimeoutException_E@. A timeout may leave the channel, or the underlying connection, in an inconsistent state. Where the implementation cannot guarantee that bytes have not been read from the channel then it puts the channel into an implementation specific error state. A subsequent attempt to initiate a read operation causes an unspecified runtime exception to be thrown. Similarly if a write operation times out and the implementation cannot guarantee bytes have not been written to the channel then further attempts to write to the channel cause an unspecified runtime exception to be thrown. When a timeout elapses then the state of the @B_java#nio#ByteBuffer_E@, or the sequence of buffers, for the I/O operation is not defined. Buffers should be discarded or at least care must be taken to ensure that the buffers are not accessed while the channel remains open. All methods that accept timeout parameters treat values less than or equal to zero to mean that the I/O operation does not timeout."}