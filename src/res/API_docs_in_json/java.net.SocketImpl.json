{"Functions": {"SocketImpl()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public SocketImpl ()"}, "setPerformancePreferences(int,int,int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). By default, this method does nothing, unless it is overridden in a a sub-class.", "history": "Added in API level 1", "FullName": "protected void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "getPort()": {"Returns": [["int", "the value of this socket's port field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#SocketImpl#port_E@"], "Permissions": [], "Description": "Returns the value of this socket's port field.", "history": "Added in API level 1", "FullName": "protected int getPort ()"}, "shutdownOutput()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when shutting down this socket."]], "SeeAlso": ["@B_java#net#Socket#shutdownInput_E@", "@B_java#net#Socket#close_E@", "@B_java#net#Socket#setSoLinger_E@"], "Permissions": [], "Description": "Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP's normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.", "history": "Added in API level 1", "FullName": "protected void shutdownOutput ()"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "a stream for reading from this socket."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the input stream."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an input stream for this socket.", "history": "Added in API level 1", "FullName": "protected abstract InputStream getInputStream ()"}, "connect(java.net.SocketAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the Socket address of the remote host."], ["int", "int: the timeout value, in milliseconds, or zero for no timeout."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when attempting a connection."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port number on the specified host. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.", "history": "added in API level 1", "FullName": "protected abstract void connect (SocketAddress address, int timeout)"}, "getInetAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the value of this socket's address field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#SocketImpl#address_E@"], "Permissions": [], "Description": "Returns the value of this socket's address field.", "history": "Added in API level 1", "FullName": "protected InetAddress getInetAddress ()"}, "bind(java.net.InetAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: an IP address that belongs to a local interface."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when binding this socket."]], "SeeAlso": [], "Permissions": [], "Description": "Binds this socket to the specified local IP address and port number.", "history": "added in API level 1", "FullName": "protected abstract void bind (InetAddress host, int port)"}, "getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "an output stream for writing to this socket."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the output stream."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an output stream for this socket.", "history": "Added in API level 1", "FullName": "protected abstract OutputStream getOutputStream ()"}, "connect(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the remote host."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when connecting to the remote host."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port on the named host.", "history": "Added in API level 1", "FullName": "protected abstract void connect (String host, int port)"}, "bind(java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: an IP address that belongs to a local interface."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when binding this socket."]], "SeeAlso": [], "Permissions": [], "Description": "Binds this socket to the specified local IP address and port number.", "history": "Added in API level 1", "FullName": "protected abstract void bind (InetAddress host, int port)"}, "supportsUrgentData()": {"Returns": [["boolean", "true if urgent data supported"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#SocketImpl#address_E@"], "Permissions": [], "Description": "Returns whether or not this SocketImpl supports sending urgent data. By default, false is returned unless the method is overridden in a sub-class", "history": "Added in API level 1", "FullName": "protected boolean supportsUrgentData ()"}, "connect(java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address of the remote host."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when attempting a connection."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port number on the specified host.", "history": "Added in API level 1", "FullName": "protected abstract void connect (InetAddress address, int port)"}, "connect(java.net.SocketAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the Socket address of the remote host."], ["int", "int: the timeout value, in milliseconds, or zero for no timeout."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when attempting a connection."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port number on the specified host. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.", "history": "Added in API level 1", "FullName": "protected abstract void connect (SocketAddress address, int timeout)"}, "sendUrgentData(int)": {"Returns": [], "Parameters": [["int", "int: The byte of data to send"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error sending the data."]], "SeeAlso": [], "Permissions": [], "Description": "Send one byte of urgent data on the socket. The byte to be sent is the low eight bits of the parameter", "history": "Added in API level 1", "FullName": "protected abstract void sendUrgentData (int data)"}, "accept(java.net.SocketImpl)": {"Returns": [], "Parameters": [["@B_java#net#SocketImpl_E@", "SocketImpl: the accepted connection."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when accepting the connection."]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a connection.", "history": "Added in API level 1", "FullName": "protected abstract void accept (SocketImpl s)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when closing this socket."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this socket.", "history": "Added in API level 1", "FullName": "protected abstract void close ()"}, "connect(java.net.InetAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address of the remote host."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when attempting a connection."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port number on the specified host.", "history": "added in API level 1", "FullName": "protected abstract void connect (InetAddress address, int port)"}, "setPerformancePreferences(int, int, int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). By default, this method does nothing, unless it is overridden in a a sub-class.", "history": "added in API level 1", "FullName": "protected void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this socket."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the address and port of this socket as a String.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "available()": {"Returns": [["int", "the number of bytes that can be read from this socket without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when determining the number of bytes available."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes that can be read from this socket without blocking.", "history": "Added in API level 1", "FullName": "protected abstract int available ()"}, "shutdownInput()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when shutting down this socket."]], "SeeAlso": ["@B_java#net#Socket#shutdownOutput_E@", "@B_java#net#Socket#close_E@", "@B_java#net#Socket#setSoLinger_E@"], "Permissions": [], "Description": "Places the input stream for this socket at \"end of stream\". Any data sent to this socket is acknowledged and then silently discarded. If you read from a socket input stream after invoking this method on the socket, the stream's available method will return 0, and its read methods will return -1 (end of stream).", "history": "Added in API level 1", "FullName": "protected void shutdownInput ()"}, "create(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, create a stream socket; otherwise, create a datagram socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while creating the socket."]], "SeeAlso": [], "Permissions": [], "Description": "Creates either a stream or a datagram socket.", "history": "Added in API level 1", "FullName": "protected abstract void create (boolean stream)"}, "listen(int)": {"Returns": [], "Parameters": [["int", "int: the maximum length of the queue."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the queue."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument. If a connection indication arrives when the queue is full, the connection is refused.", "history": "Added in API level 1", "FullName": "protected abstract void listen (int backlog)"}, "getFileDescriptor()": {"Returns": [["@B_java#io#FileDescriptor_E@", "the value of this socket's fd field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#SocketImpl#fd_E@"], "Permissions": [], "Description": "Returns the value of this socket's fd field.", "history": "Added in API level 1", "FullName": "protected FileDescriptor getFileDescriptor ()"}, "connect(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the remote host."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when connecting to the remote host."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the specified port on the named host.", "history": "added in API level 1", "FullName": "protected abstract void connect (String host, int port)"}, "getLocalPort()": {"Returns": [["int", "the value of this socket's localport field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#SocketImpl#localport_E@"], "Permissions": [], "Description": "Returns the value of this socket's localport field.", "history": "Added in API level 1", "FullName": "protected int getLocalPort ()"}}, "Inheritance": [], "ClassName": "java.net.SocketImpl", "ClassDesc": "The abstract class SocketImpl is a common superclass of all classes that actually implement sockets. It is used to create both client and server sockets. A \"plain\" socket implements these methods exactly as described, without attempting to go through a firewall or proxy."}