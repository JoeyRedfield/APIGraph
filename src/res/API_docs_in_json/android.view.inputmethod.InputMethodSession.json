{"Functions": {"updateExtractedText(int,android.view.inputmethod.ExtractedText)": {"Returns": [], "Parameters": [["int", "int: The input method supplied token for identifying its request."], ["@B_android#view#inputmethod#ExtractedText_E@", "ExtractedText: The new extracted text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a text editor to report its new extracted text when its contents change. This will only be called if the input method calls @B_android#view#inputmethod#InputConnection#getExtractedText_E@ with the option to report updates.", "history": "Added in API level 3", "FullName": "public abstract void updateExtractedText (int token, ExtractedText text)"}, "updateSelection(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The previous text offset of the cursor selection start position."], ["int", "int: The previous text offset of the cursor selection end position."], ["int", "int: The new text offset of the cursor selection start position."], ["int", "int: The new text offset of the cursor selection end position."], ["int", "int: The text offset of the current candidate text start position."], ["int", "int: The text offset of the current candidate text end position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the selection or cursor in the current target input field has changed.", "history": "Added in API level 3", "FullName": "public abstract void updateSelection (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)"}, "appPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands."], ["@B_android#os#Bundle_E@", "Bundle: Any data to include with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process a private command sent from the application to the input method. This can be used to provide domain-specific features that are only known between certain input methods and their clients.", "history": "Added in API level 3", "FullName": "public abstract void appPrivateCommand (String action, Bundle data)"}, "viewClicked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the user changed the focused view by this click."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the user tapped a text view. IMEs can't rely on this method being called because this was not part of the original IME protocol, so applications with custom text editing written before this method appeared will not call to inform the IME of this interaction.", "history": "Added in API level 14", "FullName": "public abstract void viewClicked (boolean focusChanged)"}, "dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)": {"Returns": [["void", "Whether the input method wants to handle this event."]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."], ["@B_android#view#inputmethod#InputMethodSession#EventCallback_E@", "InputMethodSession.EventCallback no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "This method is called when there is a track ball event. If the input method wants to handle this event, return true, otherwise return false and the caller (i.e. the application) will handle the event.", "history": "Added in API level 3", "FullName": "public abstract void dispatchTrackballEvent (int seq, MotionEvent event, InputMethodSession.EventCallback callback)"}, "toggleSoftInput(int,int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@, @B_android#view#inputmethod#InputMethodManager#SHOW_FORCED_E@ bit set."], ["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@, @B_android#view#inputmethod#InputMethodManager#HIDE_NOT_ALWAYS_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Toggle the soft input window. Applications can toggle the state of the soft input window.", "history": "Added in API level 3", "FullName": "public abstract void toggleSoftInput (int showFlags, int hideFlags)"}, "updateSelection(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The previous text offset of the cursor selection start position."], ["int", "int: The previous text offset of the cursor selection end position."], ["int", "int: The new text offset of the cursor selection start position."], ["int", "int: The new text offset of the cursor selection end position."], ["int", "int: The text offset of the current candidate text start position."], ["int", "int: The text offset of the current candidate text end position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the selection or cursor in the current target input field has changed.", "history": "added in API level 3", "FullName": "public abstract void updateSelection (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)"}, "toggleSoftInput(int, int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@, @B_android#view#inputmethod#InputMethodManager#SHOW_FORCED_E@ bit set."], ["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@, @B_android#view#inputmethod#InputMethodManager#HIDE_NOT_ALWAYS_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Toggle the soft input window. Applications can toggle the state of the soft input window.", "history": "added in API level 3", "FullName": "public abstract void toggleSoftInput (int showFlags, int hideFlags)"}, "dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)": {"Returns": [["void", "Whether the input method wants to handle this event."]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."], ["@B_android#view#inputmethod#InputMethodSession#EventCallback_E@", "InputMethodSession.EventCallback no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#MotionEvent_E@"], "Permissions": [], "Description": "This method is called when there is a generic motion event. If the input method wants to handle this event, return true, otherwise return false and the caller (i.e. the application) will handle the event.", "history": "Added in API level 17", "FullName": "public abstract void dispatchGenericMotionEvent (int seq, MotionEvent event, InputMethodSession.EventCallback callback)"}, "dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession.EventCallback)": {"Returns": [["void", "Whether the input method wants to handle this event."]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."], ["@B_android#view#inputmethod#InputMethodSession#EventCallback_E@", "InputMethodSession.EventCallback no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "This method is called when a key is pressed. When done with the event, the implementation must call back on If the input method wants to handle this event, return true, otherwise return false and the caller (i.e. the application) will handle the event.", "history": "Added in API level 3", "FullName": "public abstract void dispatchKeyEvent (int seq, KeyEvent event, InputMethodSession.EventCallback callback)"}, "updateCursor(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle of the cursor currently being shown in the input field's window coordinates."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when cursor location of the target input field has changed within its window. This is not normally called, but will only be reported if requested by the input method.", "history": "Added in API level 3", "FullName": "public abstract void updateCursor (Rect newCursor)"}, "updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CursorAnchorInfo_E@", "CursorAnchorInfo: Positional information relevant to text input, such as text insertion point and composition string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the cursor and/or the character position relevant to text input is changed on the screen. This is not called by default. It will only be reported if requested by the input method.", "history": "Added in API level 21", "FullName": "public abstract void updateCursorAnchorInfo (CursorAnchorInfo cursorAnchorInfo)"}, "finishInput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the application would like to stop receiving text input.", "history": "Added in API level 3", "FullName": "public abstract void finishInput ()"}, "displayCompletions(android.view.inputmethod.CompletionInfo[])": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo: Array of text completions that are available, starting with the best. If this array is null, any existing completions will be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a text editor that performs auto completion, to tell the input method about the completions it has available. This can be used by the input method to display them to the user to select the text to be inserted.", "history": "Added in API level 3", "FullName": "public abstract void displayCompletions (CompletionInfo[] completions)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.InputMethodSession", "ClassDesc": "The InputMethodSession interface provides the per-client functionality of @B_android#view#inputmethod#InputMethod_E@ that is safe to expose to applications. Applications will not normally use this interface themselves, instead relying on the standard interaction provided by @B_android#widget#TextView_E@ and @B_android#widget#EditText_E@."}