{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "isAvailable()": {"Returns": [["boolean", "true if the network is available, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes. @B_android#net#ConnectivityManager#registerDefaultNetworkCallback_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity is possible. A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network. Examples include The device is out of the coverage area for any network of this type. The device is on a network other than the home network (i.e., roaming), and data roaming has been disabled. The device's radio is turned off, e.g., because airplane mode is enabled. Since Android L, this always returns true, because the system only returns info for available networks.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public boolean isAvailable ()"}, "isConnected()": {"Returns": [["boolean", "true if network connectivity exists, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes. See @B_android#net#ConnectivityManager#registerDefaultNetworkCallback_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity exists and it is possible to establish connections and pass data. Always call this before attempting to perform data transactions.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean isConnected ()"}, "isRoaming()": {"Returns": [["boolean", "true if roaming is in effect, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callers should switch to checking @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING_E@ instead, since that handles more complex situations, such as VPNs. Indicates whether the device is currently roaming on this network. When true, it suggests that use of data on this network may incur extra costs.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public boolean isRoaming ()"}, "getSubtype()": {"Returns": [["int", "the network subtype"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telephony#TelephonyManager#getDataNetworkType_E@ instead. Return a network-type-specific integer describing the subtype of the network.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public int getSubtype ()"}, "isConnectedOrConnecting()": {"Returns": [["boolean", "true if network connectivity exists or is in the process of being established, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes. @B_android#net#ConnectivityManager#registerDefaultNetworkCallback_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity exists or is in the process of being established. This is good for applications that need to do anything related to the network other than read or write data. For the latter, call @B_android#net#NetworkInfo#isConnected_E@ instead, which guarantees that the network is fully usable.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public boolean isConnectedOrConnecting ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public int describeContents ()"}, "isFailover()": {"Returns": [["boolean", "true if this is a failover attempt, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This field is not populated in recent Android releases, and does not make a lot of sense in a multi-network world. Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public boolean isFailover ()"}, "getSubtypeName()": {"Returns": [["@B_java#lang#String_E@", "the name of the network subtype"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telephony#TelephonyManager#getDataNetworkType_E@ instead. Return a human-readable name describing the subtype of the network.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public String getSubtypeName ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public String toString ()"}, "getDetailedState()": {"Returns": [["@B_android#net#NetworkInfo#DetailedState_E@", "the fine-grained state This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes. See @B_android#net#ConnectivityManager#registerDefaultNetworkCallback_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Reports the current fine-grained state of the network.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public NetworkInfo.DetailedState getDetailedState ()"}, "getTypeName()": {"Returns": [["@B_java#lang#String_E@", "the name of the network type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callers should switch to checking @B_android#net#NetworkCapabilities#hasTransport_E@ instead with one of the NetworkCapabilities#TRANSPORT_* constants : @B_android#net#NetworkInfo#getType_E@ and @B_android#net#NetworkInfo#getTypeName_E@ cannot account for networks using multiple transports. Note that generally apps should not care about transport; @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_METERED_E@ and @B_android#net#NetworkCapabilities#getLinkDownstreamBandwidthKbps_E@ are calls that apps concerned with meteredness or bandwidth should be looking at, as they offer this information with much better accuracy. Return a human-readable name describe the type of the network, for example \"WIFI\" or \"MOBILE\".", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public String getTypeName ()"}, "getType()": {"Returns": [["int", "one of @B_android#net#ConnectivityManager#TYPE_MOBILE_E@, @B_android#net#ConnectivityManager#TYPE_WIFI_E@, @B_android#net#ConnectivityManager#TYPE_WIMAX_E@, @B_android#net#ConnectivityManager#TYPE_ETHERNET_E@, @B_android#net#ConnectivityManager#TYPE_BLUETOOTH_E@, or other types defined by @B_android#net#ConnectivityManager_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callers should switch to checking @B_android#net#NetworkCapabilities#hasTransport_E@ instead with one of the NetworkCapabilities#TRANSPORT_* constants : @B_android#net#NetworkInfo#getType_E@ and @B_android#net#NetworkInfo#getTypeName_E@ cannot account for networks using multiple transports. Note that generally apps should not care about transport; @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_METERED_E@ and @B_android#net#NetworkCapabilities#getLinkDownstreamBandwidthKbps_E@ are calls that apps concerned with meteredness or bandwidth should be looking at, as they offer this information with much better accuracy. Reports the type of network to which the info in this NetworkInfo pertains.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public int getType ()"}, "getReason()": {"Returns": [["@B_java#lang#String_E@", "the reason for failure, or null if not available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method does not have a consistent contract that could make it useful to callers. Report the reason an attempt to establish connectivity failed, if one is available.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public String getReason ()"}, "getExtraInfo()": {"Returns": [["@B_java#lang#String_E@", "the extra information, or null if not available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use other services e.g. WifiManager to get additional information passed up from the lower networking layers. Report the extra information about the network state, if any was provided by the lower networking layers.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public String getExtraInfo ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getState()": {"Returns": [["@B_android#net#NetworkInfo#State_E@", "the coarse-grained state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes. @B_android#net#ConnectivityManager#registerDefaultNetworkCallback_E@ and @B_android#net#ConnectivityManager#registerNetworkCallback_E@. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Reports the current coarse-grained state of the network.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public NetworkInfo.State getState ()"}}, "Inheritance": [], "ClassName": "android.net.NetworkInfo", "ClassDesc": "Callers should instead use the @B_android#net#ConnectivityManager#NetworkCallback_E@ API to learn about connectivity changes, or switch to use @B_android#net#ConnectivityManager#getNetworkCapabilities_E@ or @B_android#net#ConnectivityManager#getLinkProperties_E@ to get information synchronously. Keep in mind that while callbacks are guaranteed to be called for every event in order, synchronous calls have no such constraints, and as such it is unadvisable to use the synchronous methods inside the callbacks as they will often not offer a view of networking that is consistent (that is: they may return a past or a future state with respect to the event being processed by the callback). Instead, callers are advised to only use the arguments of the callbacks, possibly memorizing the specific bits of information they need to keep from one callback to another. Describes the status of a network interface. Use @B_android#net#ConnectivityManager#getActiveNetworkInfo_E@ to get an instance that represents the current network connection."}