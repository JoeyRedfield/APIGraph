{"Functions": {"isPresent()": {"Returns": [["boolean", "true if there is a value present, otherwise false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if there is a value present, otherwise false.", "history": "Added in API level 24", "FullName": "public boolean isPresent ()"}, "empty()": {"Returns": [["@B_java#util#Optional_E@", "an empty Optional"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty Optional instance. No value is present for this Optional.", "history": "Added in API level 24", "FullName": "public static Optional<T> empty ()"}, "get()": {"Returns": [["T", "the non-null value held by this Optional"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there is no value present"]], "SeeAlso": ["@B_java#util#Optional#isPresent_E@"], "Permissions": [], "Description": "If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.", "history": "Added in API level 24", "FullName": "public T get ()"}, "of(T)": {"Returns": [["@B_java#util#Optional_E@", "an Optional with the value present"]], "Parameters": [["T", "T: the value to be present, which must be non-null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an Optional with the specified present non-null value.", "history": "Added in API level 24", "FullName": "public static Optional<T> of (T value)"}, "filter(java.util.function.Predicate<?superT>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate to apply to the value, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the predicate is null"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.", "history": "Added in API level 24", "FullName": "public Optional<T> filter (Predicate<? super T> predicate)"}, "ifPresent(java.util.function.Consumer<?superT>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: block to be executed if a value is present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is present and consumer is null"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, invoke the specified consumer with the value, otherwise do nothing.", "history": "Added in API level 24", "FullName": "public void ifPresent (Consumer<? super T> consumer)"}, "orElseGet(java.util.function.Supplier<?extendsT>)": {"Returns": [["T", "the value if present otherwise the result of other.get()"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a Supplier whose result is returned if no value is present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is not present and other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Return the value if present, otherwise invoke other and return the result of that invocation.", "history": "Added in API level 24", "FullName": "public T orElseGet (Supplier<? extends T> other)"}, "orElseThrow(java.util.function.Supplier<?extendsX>)": {"Returns": [["T", "the present value"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: The supplier which will return the exception to be thrown"]], "Throws": [["", "if there is no value present"], ["@B_java#lang#NullPointerException_E@", "if no value is present and exceptionSupplier is null"], ["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.", "history": "Added in API level 24", "FullName": "public T orElseThrow (Supplier<? extends X> exceptionSupplier)"}, "ofNullable(T)": {"Returns": [["@B_java#util#Optional_E@", "an Optional with a present value if the specified value is non-null, otherwise an empty Optional"]], "Parameters": [["T", "T: the possibly-null value to describe"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.", "history": "Added in API level 24", "FullName": "public static Optional<T> ofNullable (T value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation of this instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a non-empty string representation of this Optional suitable for debugging. The exact presentation format is unspecified and may vary between implementations and versions.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "flatMap(java.util.function.Function<?superT,java.util.Optional<U>>)": {"Returns": [["@B_java#util#Optional_E@", "the result of applying an Optional-bearing mapping function to the value of this Optional, if a value is present, otherwise an empty Optional"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to apply to the value, if present the mapping function"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the mapping function is null or returns a null result"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, apply the provided Optional-bearing mapping function to it, return that result, otherwise return an empty Optional. This method is similar to @B_java#util#Optional#map_E@, but the provided mapper is one whose result is already an Optional, and if invoked, flatMap does not wrap it with an additional Optional.", "history": "Added in API level 24", "FullName": "public Optional<U> flatMap (Function<? super T, Optional<U>> mapper)"}, "map(java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise an empty Optional"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to apply to the value, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the mapping function is null"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result. Otherwise return an empty Optional.", "history": "Added in API level 24", "FullName": "public Optional<U> map (Function<? super T, ? extends U> mapper)"}, "filter(java.util.function.Predicate<? super T>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate to apply to the value, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the predicate is null"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.", "history": "added in API level 24", "FullName": "public Optional<T> filter (Predicate<? super T> predicate)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "{code true} if the other object is \"equal to\" this object otherwise false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this Optional. The other object is considered equal if: it is also an Optional and; both instances have no value present or; the present values are \"equal to\" each other via equals().", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "ifPresent(java.util.function.Consumer<? super T>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: block to be executed if a value is present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is present and consumer is null"]], "SeeAlso": [], "Permissions": [], "Description": "If a value is present, invoke the specified consumer with the value, otherwise do nothing.", "history": "added in API level 24", "FullName": "public void ifPresent (Consumer<? super T> consumer)"}, "orElse(T)": {"Returns": [["T", "the value, if present, otherwise other"]], "Parameters": [["T", "T: the value to be returned if there is no value present, may be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value if present, otherwise return other.", "history": "Added in API level 24", "FullName": "public T orElse (T other)"}, "hashCode()": {"Returns": [["int", "hash code value of the present value or 0 if no value is present"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value of the present value, if any, or 0 (zero) if no value is present.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.Optional<T>", "ClassDesc": "A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value. Additional methods that depend on the presence or absence of a contained value are provided, such as @B_java#util#Optional#orElse_E@ (return a default value if value not present) and @B_java#util#Optional#ifPresent_E@ (execute a block of code if the value is present)."}