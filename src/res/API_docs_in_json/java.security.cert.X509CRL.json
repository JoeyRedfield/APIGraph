{"Functions": {"X509CRL()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for X.509 CRLs.", "history": "Added in API level 1", "FullName": "protected X509CRL ()"}, "getSigAlgName()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm name for the CRL signature algorithm. An example is the string \"SHA256withRSA\". The ASN.1 definition for this is: The algorithm name is determined from the algorithm OID string.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgName ()"}, "getThisUpdate()": {"Returns": [["@B_java#util#Date_E@", "the thisUpdate date from the CRL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the thisUpdate date from the CRL. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract Date getThisUpdate ()"}, "getNextUpdate()": {"Returns": [["@B_java#util#Date_E@", "the nextUpdate date from the CRL, or null if not present."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nextUpdate date from the CRL.", "history": "Added in API level 1", "FullName": "public abstract Date getNextUpdate ()"}, "verify(java.security.PublicKey,java.security.Provider)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#security#Provider_E@", "Provider: the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CRLException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this CRL was signed using the private key that corresponds to the given public key. This method uses the signature verification engine supplied by the given provider. Note that the specified Provider object does not have to be registered in the provider list. This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation.", "history": "Added in API level 26", "FullName": "public void verify (PublicKey key, Provider sigProvider)"}, "getRevokedCertificates()": {"Returns": [["@B_java#util#Set_E@", "all the entries or null if there are none present."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CRLEntry_E@"], "Permissions": [], "Description": "Gets all the entries from this CRL. This returns a Set of X509CRLEntry objects.", "history": "Added in API level 1", "FullName": "public abstract Set<? extends X509CRLEntry> getRevokedCertificates ()"}, "getVersion()": {"Returns": [["int", "the version number, i.e. 1 or 2."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the version (version number) value from the CRL. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract int getVersion ()"}, "getSignature()": {"Returns": [["byte[]", "the signature."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature value (the raw signature bits) from the CRL. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract byte[] getSignature ()"}, "getRevokedCertificate(java.security.cert.X509Certificate)": {"Returns": [["@B_java#security#cert#X509CRLEntry_E@", "the entry for the given certificate, or null if no such entry exists in this CRL."]], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: the certificate for which a CRL entry is to be looked up"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if certificate is null"]], "SeeAlso": [], "Permissions": [], "Description": "Get the CRL entry, if any, for the given certificate. This method can be used to lookup CRL entries in indirect CRLs, that means CRLs that contain entries from issuers other than the CRL issuer. The default implementation will only return entries for certificates issued by the CRL issuer. Subclasses that wish to support indirect CRLs should override this method.", "history": "Added in API level 1", "FullName": "public X509CRLEntry getRevokedCertificate (X509Certificate certificate)"}, "verify(java.security.PublicKey,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CRLException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this CRL was signed using the private key that corresponds to the given public key. This method uses the signature verification engine supplied by the given provider.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}, "getSigAlgOID()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm OID string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm OID string from the CRL. An OID is represented by a set of nonnegative whole numbers separated by periods. For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1 with DSA signature algorithm defined in See @B_java#security#cert#X509CRL#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgOID ()"}, "getRevokedCertificate(java.math.BigInteger)": {"Returns": [["@B_java#security#cert#X509CRLEntry_E@", "the entry with the given serial number, or null if no such entry exists in this CRL."]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: the serial number of the certificate for which a CRL entry is to be looked up"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509CRLEntry_E@"], "Permissions": [], "Description": "Gets the CRL entry, if any, with the given certificate serialNumber.", "history": "Added in API level 1", "FullName": "public abstract X509CRLEntry getRevokedCertificate (BigInteger serialNumber)"}, "getEncoded()": {"Returns": [["byte[]", "the encoded form of this certificate"]], "Parameters": [], "Throws": [["@B_java#security#cert#CRLException_E@", "if an encoding error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the ASN.1 DER-encoded form of this CRL.", "history": "Added in API level 1", "FullName": "public abstract byte[] getEncoded ()"}, "getIssuerX500Principal()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "an X500Principal representing the issuer distinguished name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal. It is recommended that subclasses override this method.", "history": "Added in API level 1", "FullName": "public X500Principal getIssuerX500Principal ()"}, "verify(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "if there's no default provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CRLException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this CRL was signed using the private key that corresponds to the given public key.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true iff the encoded forms of the two CRLs match, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this CRL."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this CRL for equality with the given object. If the other object is an instanceof X509CRL, then its encoded form is retrieved and compared with the encoded form of this CRL.", "history": "Added in API level 1", "FullName": "public boolean equals (Object other)"}, "getIssuerDN()": {"Returns": [["@B_java#security#Principal_E@", "a Principal whose name is the issuer distinguished name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "issuer as an implementation specific Principal object, which should not be relied upon by portable code. Gets the issuer (issuer distinguished name) value from the CRL. The issuer name identifies the entity that signed (and issued) the CRL. The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: Name describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the AttributeValue component is determined by the AttributeType; in general it will be a directoryString. A directoryString is usually one of PrintableString, TeletexString or UniversalString.", "history": "Added in API level 1", "FullName": "public abstract Principal getIssuerDN ()"}, "getSigAlgParams()": {"Returns": [["byte[]", "the DER-encoded signature algorithm parameters, or null if no parameters are present."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm. In most cases, the signature algorithm parameters are null; the parameters are usually supplied with the public key. If access to individual parameter values is needed then use @B_java#security#AlgorithmParameters_E@ and instantiate with the name returned by @B_java#security#cert#X509CRL#getSigAlgName_E@. See @B_java#security#cert#X509CRL#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract byte[] getSigAlgParams ()"}, "verify(java.security.PublicKey, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CRLException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this CRL was signed using the private key that corresponds to the given public key. This method uses the signature verification engine supplied by the given provider.", "history": "added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}, "getTBSCertList()": {"Returns": [["byte[]", "the DER-encoded CRL information."]], "Parameters": [], "Throws": [["@B_java#security#cert#CRLException_E@", "if an encoding error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded CRL information, the tbsCertList from this CRL. This can be used to verify the signature independently.", "history": "Added in API level 1", "FullName": "public abstract byte[] getTBSCertList ()"}, "hashCode()": {"Returns": [["int", "the hashcode value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode value for this CRL from its encoded form.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#security#cert#CRL_E@"], "ClassName": "java.security.cert.X509CRL", "ClassDesc": "Abstract class for an X.509 Certificate Revocation List (CRL). A CRL is a time-stamped list identifying revoked certificates. It is signed by a Certificate Authority (CA) and made freely available in a public repository. Each revoked certificate is identified in a CRL by its certificate serial number. When a certificate-using system uses a certificate (e.g., for verifying a remote user's digital signature), that system not only checks the certificate signature and validity but also acquires a suitably- recent CRL and checks that the certificate serial number is not on that CRL. The meaning of \"suitably-recent\" may vary with local policy, but it usually means the most recently-issued CRL. A CA issues a new CRL on a regular periodic basis (e.g., hourly, daily, or weekly). Entries are added to CRLs as revocations occur, and an entry may be removed when the certificate expiration date is reached. The X.509 v2 CRL format is described below in ASN.1: More information can be found in The ASN.1 definition of tbsCertList is: CRLs are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 CRL:"}