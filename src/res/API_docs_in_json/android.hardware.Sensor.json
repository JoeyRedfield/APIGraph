{"Functions": {"getFifoReservedEventCount()": {"Returns": [["int", "Number of events reserved for this sensor in the batch mode FIFO. This gives a guarantee on the minimum number of events that can be batched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public int getFifoReservedEventCount ()"}, "getMinDelay()": {"Returns": [["int", "the minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public int getMinDelay ()"}, "getStringType()": {"Returns": [["@B_java#lang#String_E@", "The type of this sensor as a string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 20", "FullName": "public String getStringType ()"}, "isDirectChannelTypeSupported(int)": {"Returns": [["boolean", "true if the specified shared memory type is supported."]], "Parameters": [["int", "int: type of shared memory used by direct channel. Value is either 0 or a combination of @B_android#hardware#SensorDirectChannel#TYPE_MEMORY_FILE_E@, and @B_android#hardware#SensorDirectChannel#TYPE_HARDWARE_BUFFER_E@"]], "Throws": [], "SeeAlso": ["@B_android#hardware#SensorDirectChannel_E@"], "Permissions": [], "Description": "Test if a sensor supports a specified direct channel type.", "history": "Added in API level 26", "FullName": "public boolean isDirectChannelTypeSupported (int sharedMemType)"}, "getFifoMaxEventCount()": {"Returns": [["int", "Maximum number of events of this sensor that could be batched. If this value is zero it indicates that batch mode is not supported for this sensor. If other applications registered to batched sensors, the actual number of events that can be batched might be smaller because the hardware FiFo will be partially used to batch the other sensors."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public int getFifoMaxEventCount ()"}, "getVersion()": {"Returns": [["int", "version of the sensor's module."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getVersion ()"}, "getVendor()": {"Returns": [["@B_java#lang#String_E@", "vendor string of this sensor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public String getVendor ()"}, "getResolution()": {"Returns": [["float", "resolution of the sensor in the sensor's unit."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public float getResolution ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 3", "FullName": "public String toString ()"}, "getMaxDelay()": {"Returns": [["int", "The max delay for this sensor in microseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This value is defined only for continuous and on-change sensors. It is the delay between two sensor events corresponding to the lowest frequency that this sensor supports. When lower frequencies are requested through registerListener() the events will be generated at this frequency instead. It can be used to estimate when the batch FIFO may be full. Older devices may set this value to zero. Ignore this value in case it is negative or zero.", "history": "Added in API level 21", "FullName": "public int getMaxDelay ()"}, "isAdditionalInfoSupported()": {"Returns": [["boolean", "true if the sensor supports sensor additional information API"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#SensorAdditionalInfo_E@"], "Permissions": [], "Description": "Returns true if the sensor supports sensor additional information API", "history": "Added in API level 24", "FullName": "public boolean isAdditionalInfoSupported ()"}, "isDynamicSensor()": {"Returns": [["boolean", "true if the sensor is a dynamic sensor (sensor added at runtime)."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#SensorManager#DynamicSensorCallback_E@"], "Permissions": [], "Description": "Returns true if the sensor is a dynamic sensor.", "history": "Added in API level 24", "FullName": "public boolean isDynamicSensor ()"}, "getType()": {"Returns": [["int", "generic type of this sensor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getType ()"}, "getHighestDirectReportRateLevel()": {"Returns": [["int", "Highest direct report rate level of this sensor. If the sensor does not support direct report mode, this returns @B_android#hardware#SensorDirectChannel#RATE_STOP_E@. Value is either 0 or a combination of @B_android#hardware#SensorDirectChannel#RATE_STOP_E@, @B_android#hardware#SensorDirectChannel#RATE_NORMAL_E@, @B_android#hardware#SensorDirectChannel#RATE_FAST_E@, and @B_android#hardware#SensorDirectChannel#RATE_VERY_FAST_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#SensorDirectChannel_E@"], "Permissions": [], "Description": "Get the highest supported direct report mode rate level of the sensor.", "history": "Added in API level 26", "FullName": "public int getHighestDirectReportRateLevel ()"}, "getId()": {"Returns": [["int", "The sensor id that will be unique for the same app unless the device is factory reset. Return value of 0 means this sensor does not support this function; return value of -1 means this sensor can be uniquely identified in system by combination of its type and name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getId ()"}, "getMaximumRange()": {"Returns": [["float", "maximum range of the sensor in the sensor's unit."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public float getMaximumRange ()"}, "getPower()": {"Returns": [["float", "the power in mA used by this sensor while in use"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public float getPower ()"}, "getReportingMode()": {"Returns": [["int", "Reporting mode for the input sensor, one of REPORTING_MODE_* constants."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Sensor_E@"], "Permissions": [], "Description": "Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type.", "history": "Added in API level 21", "FullName": "public int getReportingMode ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "name string of the sensor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public String getName ()"}, "isWakeUpSensor()": {"Returns": [["boolean", "true if this is a wake-up sensor, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the sensor is a wake-up sensor. Application Processor(AP), is the processor on which applications run. When no wake lock is held and the user is not interacting with the device, this processor can enter a \u201cSuspend\u201d mode, reducing the power consumption by 10 times or more. Non-wake-up sensors are sensors that do not wake the AP out of suspend to report data. While the AP is in suspend mode, the sensors continue to function and generate events, which are put in a hardware FIFO. The events in the FIFO are delivered to the application when the AP wakes up. If the FIFO was too small to store all events generated while the AP was in suspend mode, the older events are lost: the oldest data is dropped to accommodate the newer data. In the extreme case where the FIFO is non-existent maxFifoEventCount() == 0, all events generated while the AP was in suspend mode are lost. Applications using non-wake-up sensors should usually: Either unregister from the sensors when they do not need them, usually in the activity\u2019s onPause method. This is the most common case. Or realize that the sensors are consuming some power while the AP is in suspend mode and that even then, some events might be lost. In opposition to non-wake-up sensors, wake-up sensors ensure that their data is delivered independently of the state of the AP. While the AP is awake, the wake-up sensors behave like non-wake-up-sensors. When the AP is asleep, wake-up sensors wake up the AP to deliver events. That is, the AP will wake up and the sensor will deliver the events before the maximum reporting latency is elapsed or the hardware FIFO gets full. See @B_android#hardware#SensorManager#registerListener_E@ for more details.", "history": "Added in API level 21", "FullName": "public boolean isWakeUpSensor ()"}}, "Inheritance": [], "ClassName": "android.hardware.Sensor", "ClassDesc": "Class representing a sensor. Use @B_android#hardware#SensorManager#getSensorList_E@ to get the list of available sensors. For more information about Android sensors, read the"}