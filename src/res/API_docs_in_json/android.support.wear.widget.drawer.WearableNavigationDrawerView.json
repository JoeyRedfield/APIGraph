{"Functions": {"onDrawerClosed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawer has settled in a completely closed state. This is analogous to @B_android#support#wear#widget#drawer#WearableDrawerLayout#DrawerStateCallback#onDrawerClosed_E@.", "history": "added in version 26.0.0-beta2", "FullName": "void onDrawerClosed ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "onDrawerOpened()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawer has settled in a completely open state. The drawer is interactive at this point. This is analogous to @B_android#support#wear#widget#drawer#WearableDrawerLayout#DrawerStateCallback#onDrawerOpened_E@.", "history": "added in version 26.0.0-beta2", "FullName": "void onDrawerOpened ()"}, "getNavigationStyle()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the style this drawer is using, either @B_android#support#wear#widget#drawer#WearableNavigationDrawerView#SINGLE_PAGE_E@ or @B_android#support#wear#widget#drawer#WearableNavigationDrawerView#MULTI_PAGE_E@.", "history": "added in version 26.0.0-beta2", "FullName": "int getNavigationStyle ()"}, "canScrollHorizontally(int)": {"Returns": [["boolean", "true if this view can be scrolled in the specified direction, false otherwise."]], "Parameters": [["int", "int: Negative to check scrolling left, positive to check scrolling right."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this view can be scrolled horizontally in a certain direction.", "history": "", "FullName": "boolean canScrollHorizontally (int direction)"}, "setCurrentItem(int, boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes which index is selected. @B_android#support#wear#widget#drawer#WearableNavigationDrawerView#OnItemSelectedListener#onItemSelected_E@ will be called when the specified index is reached, but it won't be called for items between the current index and the destination index.", "history": "added in version 26.0.0-beta2", "FullName": "void setCurrentItem (int index, boolean smoothScrollTo)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@", "@B_android#support#wear#widget#drawer#WearableDrawerView_E@"], "ClassName": "android.support.wear.widget.drawer.WearableNavigationDrawerView", "ClassDesc": "Ease of use class for creating a Wearable navigation drawer. This can be used with @B_android#support#wear#widget#drawer#WearableDrawerLayout_E@ to create a drawer for users to easily navigate a wearable app. There are two ways this information may be presented: as a single page and as multiple pages. The single page navigation drawer will display 1-7 items to the user representing different navigation verticals. If more than 7 items are provided to a single page navigation drawer, the navigation drawer will be displayed as empty. The multiple page navigation drawer will display 1 or more pages to the user, each representing different navigation verticals. The developer may specify which style to use with the app:navigationStyle custom attribute. If not specified, @B_android#support#wear#widget#drawer#WearableNavigationDrawerView#SINGLE_PAGE_E@ will be used as the default."}