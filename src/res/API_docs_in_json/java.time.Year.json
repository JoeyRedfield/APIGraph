{"Functions": {"isBefore(java.time.Year)": {"Returns": [["boolean", "true if this point is before the specified year"]], "Parameters": [["@B_java#time#Year_E@", "Year: the other year to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this year is before the specified year.", "history": "Added in API level 26", "FullName": "public boolean isBefore (Year other)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#Year_E@", "the parsed year, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Year from a text string using a specific formatter. The text is parsed using the formatter, returning a year.", "history": "Added in API level 26", "FullName": "public static Year parse (CharSequence text, DateTimeFormatter formatter)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount added. This returns a Year, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: YEARS - Returns a Year with the specified number of years added. This is equivalent to @B_java#time#Year#plusYears_E@. DECADES - Returns a Year with the specified number of decades added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 10. CENTURIES - Returns a Year with the specified number of centuries added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 100. MILLENNIA - Returns a Year with the specified number of millennia added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 1,000. ERAS - Returns a Year with the specified number of eras added. Only two eras are supported so the amount must be one, zero or minus one. If the amount is non-zero then the year is changed such that the year-of-era is unchanged. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year plus (long amountToAdd, TemporalUnit unit)"}, "isLeap()": {"Returns": [["boolean", "true if the year is leap, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.", "history": "Added in API level 26", "FullName": "public boolean isLeap ()"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have this year. This returns a temporal object of the same observable type as the input with the year changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#YEAR_E@ as the field. If the specified temporal object does not use the ISO calendar system then a DateTimeException is thrown. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this year, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this year can be queried for the specified field. If false, then calling the @B_java#time#Year#range_E@, @B_java#time#Year#get_E@ and @B_java#time#Year#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: YEAR_OF_ERA YEAR ERA All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "atMonth(java.time.Month)": {"Returns": [["@B_java#time#YearMonth_E@", "the year-month formed from this year and the specified month, not null"]], "Parameters": [["@B_java#time#Month_E@", "Month: the month-of-year to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this year with a month to create a YearMonth. This returns a YearMonth formed from this year and the specified month. All possible combinations of year and month are valid. This method can be used as part of a chain to produce a date:", "history": "Added in API level 26", "FullName": "public YearMonth atMonth (Month month)"}, "atMonth(int)": {"Returns": [["@B_java#time#YearMonth_E@", "the year-month formed from this year and the specified month, not null"]], "Parameters": [["int", "int: the month-of-year to use, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this year with a month to create a YearMonth. This returns a YearMonth formed from this year and the specified month. All possible combinations of year and month are valid. This method can be used as part of a chain to produce a date:", "history": "Added in API level 26", "FullName": "public YearMonth atMonth (int month)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#Year_E@", "the parsed year, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"2007\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Year from a text string such as 2007. The string must represent a valid year. Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.", "history": "Added in API level 26", "FullName": "public static Year parse (CharSequence text)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount subtracted. This returns a Year, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#Year#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public Year minus (long amountToSubtract, TemporalUnit unit)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this year. This returns a Year, based on this one, with the year adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year with (TemporalAdjuster adjuster)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this year and the end year"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to a Year, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a Year"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another year in terms of the specified unit. This calculates the amount of time between two Year objects in terms of a single TemporalUnit. The start and end points are this and the specified year. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a Year using @B_java#time#Year#from_E@. For example, the amount in decades between two year can be calculated using startYear.until(endYear, DECADES). The calculation returns a whole number, representing the number of complete units between the two years. For example, the amount in decades between 2012 and 2031 will only be one decade as it is one year short of two decades. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#Year_E@", "the current year, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current year from the specified clock. This will query the specified clock to obtain the current year. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static Year now (Clock clock)"}, "getValue()": {"Returns": [["int", "the year, MIN_VALUE to MAX_VALUE"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the year value. The year returned by this method is proleptic as per get(YEAR).", "history": "Added in API level 26", "FullName": "public int getValue ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other year"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this year is equal to another year. The comparison is based on the time-line position of the years.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "plusYears(long)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the years added, not null"]], "Parameters": [["long", "long: the years to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this Year with the specified number of years added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year plusYears (long yearsToAdd)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified field set to a new value. This returns a Year, based on this one, with the value for the specified field changed. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: YEAR_OF_ERA - Returns a Year with the specified year-of-era The era will be unchanged. YEAR - Returns a Year with the specified year. This completely replaces the date and is equivalent to @B_java#time#Year#of_E@. ERA - Returns a Year with the specified era. The year-of-era will be unchanged. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year with (TemporalField field, long newValue)"}, "of(int)": {"Returns": [["@B_java#time#Year_E@", "the year, not null"]], "Parameters": [["int", "int: the ISO proleptic year to represent, from MIN_VALUE to MAX_VALUE"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Year. This method accepts a year value from the proleptic ISO calendar system. The year 2AD/CE is represented by 2. The year 1AD/CE is represented by 1. The year 1BC/BCE is represented by 0. The year 2BC/BCE is represented by -1.", "history": "Added in API level 26", "FullName": "public static Year of (int isoYear)"}, "isLeap(long)": {"Returns": [["boolean", "true if the year is leap, false otherwise"]], "Parameters": [["long", "long: the year to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.", "history": "Added in API level 26", "FullName": "public static boolean isLeap (long year)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount subtracted. This returns a Year, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#Year#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year minus (TemporalAmount amountToSubtract)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This year is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#Year#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#Year_E@", "the year, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a Year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Year from a temporal object. This obtains a year based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of Year. The conversion extracts the @B_java#time#temporal#ChronoField#YEAR_E@ field. The extraction is only permitted if the temporal object has an ISO chronology, or can be converted to a LocalDate. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, Year::from.", "history": "Added in API level 26", "FullName": "public static Year from (TemporalAccessor temporal)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified field set to a new value. This returns a Year, based on this one, with the value for the specified field changed. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: YEAR_OF_ERA - Returns a Year with the specified year-of-era The era will be unchanged. YEAR - Returns a Year with the specified year. This completely replaces the date and is equivalent to @B_java#time#Year#of_E@. ERA - Returns a Year with the specified era. The year-of-era will be unchanged. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public Year with (TemporalField field, long newValue)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount added. This returns a Year, based on this one, with the specified amount added. The amount is typically @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#Year#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year plus (TemporalAmount amountToAdd)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this year using the specified query. This queries this year using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minusYears(long)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the year subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this Year with the specified number of years subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year minusYears (long yearsToSubtract)"}, "compareTo(java.time.Year)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#Year_E@", "Year: the other year to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this year to another year. The comparison is based on the value of the year. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (Year other)"}, "now()": {"Returns": [["@B_java#time#Year_E@", "the current year using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current year from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current year. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static Year now ()"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount subtracted. This returns a Year, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#Year#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Year minus (long amountToSubtract, TemporalUnit unit)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this year.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "isValidMonthDay(java.time.MonthDay)": {"Returns": [["boolean", "true if the month and day are valid for this year"]], "Parameters": [["@B_java#time#MonthDay_E@", "MonthDay: the month-day to validate, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the month-day is valid for this year. This method checks whether this year and the input month and day form a valid date.", "history": "Added in API level 26", "FullName": "public boolean isValidMonthDay (MonthDay monthDay)"}, "isAfter(java.time.Year)": {"Returns": [["boolean", "true if this is after the specified year"]], "Parameters": [["@B_java#time#Year_E@", "Year: the other year to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this year is after the specified year.", "history": "Added in API level 26", "FullName": "public boolean isAfter (Year other)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this year as a String.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this year as an int. This queries this year for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#Year#isSupported_E@ will return valid values based on this year. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#Year_E@", "a Year based on this year with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this year with the specified amount added. This returns a Year, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: YEARS - Returns a Year with the specified number of years added. This is equivalent to @B_java#time#Year#plusYears_E@. DECADES - Returns a Year with the specified number of decades added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 10. CENTURIES - Returns a Year with the specified number of centuries added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 100. MILLENNIA - Returns a Year with the specified number of millennia added. This is equivalent to calling @B_java#time#Year#plusYears_E@ with the amount multiplied by 1,000. ERAS - Returns a Year with the specified number of eras added. Only two eras are supported so the amount must be one, zero or minus one. If the amount is non-zero then the year is changed such that the year-of-era is unchanged. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public Year plus (long amountToAdd, TemporalUnit unit)"}, "atDay(int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date formed from this year and the specified date of year, not null"]], "Parameters": [["int", "int: the day-of-year to use, from 1 to 365-366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day of year is zero or less, 366 or greater or equal to 366 and this is not a leap year"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this year with a day-of-year to create a LocalDate. This returns a LocalDate formed from this year and the specified day-of-year. The day-of-year value 366 is only valid in a leap year.", "history": "Added in API level 26", "FullName": "public LocalDate atDay (int dayOfYear)"}, "length()": {"Returns": [["int", "the length of this year in days, 365 or 366"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the length of this year in days.", "history": "Added in API level 26", "FullName": "public int length ()"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted year string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this year using the specified formatter. This year will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "atMonthDay(java.time.MonthDay)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date formed from this year and the specified month-day, not null"]], "Parameters": [["@B_java#time#MonthDay_E@", "MonthDay: the month-day to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this year with a month-day to create a LocalDate. This returns a LocalDate formed from this year and the specified month-day. A month-day of February 29th will be adjusted to February 28th in the resulting date if the year is not a leap year.", "history": "Added in API level 26", "FullName": "public LocalDate atMonthDay (MonthDay monthDay)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#Year_E@", "the current year using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current year from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current year. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static Year now (ZoneId zone)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this year. If false, then calling the @B_java#time#Year#plus_E@ and @B_java#time#Year#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this year as a long. This queries this year for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#Year#isSupported_E@ will return valid values based on this year. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}}, "Inheritance": [], "ClassName": "java.time.Year", "ClassDesc": "A year in the ISO-8601 calendar system, such as 2007. Year is an immutable date-time object that represents a year. Any field that can be derived from a year can be obtained. This class does not store or represent a month, day, time or time-zone. For example, the value \"2007\" can be stored in a Year. Years represented by this class follow the ISO-8601 standard and use the proleptic numbering system. Year 1 is preceded by year 0, then by year -1. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable."}