{"Functions": {"MediaMuxer(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The path of the output media file.This value must never be null."], ["int", "int: The format of the output media file."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if path is invalid or format is not supported."], ["@B_java#io#IOException_E@", "if failed to open the file for write."]], "SeeAlso": ["@B_android#media#MediaMuxer#OutputFormat_E@"], "Permissions": [], "Description": "Constructor. Creates a media muxer that writes to the specified path.", "history": "added in API level 18", "FullName": "public MediaMuxer (String path, int format)"}, "MediaMuxer(java.io.FileDescriptor, int)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The FileDescriptor of the output media file.This value must never be null."], ["int", "int: The format of the output media file."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fd is invalid or format is not supported."], ["@B_java#io#IOException_E@", "if failed to open the file for write."]], "SeeAlso": ["@B_android#media#MediaMuxer#OutputFormat_E@"], "Permissions": [], "Description": "Constructor. Creates a media muxer that writes to the specified FileDescriptor. File descriptor must be seekable and writable. Application should not use the file referenced by this file descriptor until @B_android#media#MediaMuxer#stop_E@. It is the application's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "added in API level 26", "FullName": "public MediaMuxer (FileDescriptor fd, int format)"}, "addTrack(android.media.MediaFormat)": {"Returns": [["int", "The track index for this newly added track, and it should be used in the @B_android#media#MediaMuxer#writeSampleData_E@."]], "Parameters": [["@B_android#media#MediaFormat_E@", "MediaFormat: The media format for the track. This must not be an empty MediaFormat. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format is invalid."], ["@B_java#lang#IllegalStateException_E@", "if muxer is in the wrong state."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a track with the specified format. The following table summarizes support for specific format keys across android releases. Keys marked with '+:' are required. The following table summarizes codec support for containers across android releases:", "history": "Added in API level 18", "FullName": "public int addTrack (MediaFormat format)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 18", "FullName": "protected void finalize ()"}, "setOrientationHint(int)": {"Returns": [], "Parameters": [["int", "int: the angle to be rotated clockwise in degrees. The supported angles are 0, 90, 180, and 270 degrees."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if degree is not supported."], ["@B_java#lang#IllegalStateException_E@", "If this method is called after @B_android#media#MediaMuxer#start_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the orientation hint for output video playback. This method should be called before @B_android#media#MediaMuxer#start_E@. Calling this method will not rotate the video frame when muxer is generating the file, but add a composition matrix containing the rotation angle in the output video if the output format is @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_MPEG_4_E@ so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the composition matrix in a video during playback. By default, the rotation degree is 0.", "history": "Added in API level 18", "FullName": "public void setOrientationHint (int degrees)"}, "MediaMuxer(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The path of the output media file. This value must never be null."], ["int", "int: The format of the output media file. Value is @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_MPEG_4_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_WEBM_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_3GPP_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_HEIF_E@, or @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_OGG_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if path is invalid or format is not supported."], ["@B_java#io#IOException_E@", "if failed to open the file for write."]], "SeeAlso": ["@B_android#media#MediaMuxer#OutputFormat_E@"], "Permissions": [], "Description": "Constructor. Creates a media muxer that writes to the specified path.", "history": "Added in API level 18", "FullName": "public MediaMuxer (String path, int format)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If this method is called after @B_android#media#MediaMuxer#start_E@ or Muxer is released"]], "SeeAlso": [], "Permissions": [], "Description": "Starts the muxer. Make sure this is called after @B_android#media#MediaMuxer#addTrack_E@ and before @B_android#media#MediaMuxer#writeSampleData_E@.", "history": "Added in API level 18", "FullName": "public void start ()"}, "setLocation(float,float)": {"Returns": [], "Parameters": [["float", "float: Latitude in degrees. Its value must be in the range [-90, 90]."], ["float", "float: Longitude in degrees. Its value must be in the range [-180, 180]."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given latitude or longitude is out of range."], ["@B_java#lang#IllegalStateException_E@", "If this method is called after @B_android#media#MediaMuxer#start_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Set and store the geodata (latitude and longitude) in the output file. This method should be called before @B_android#media#MediaMuxer#start_E@. The geodata is stored in udta box if the output format is @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_MPEG_4_E@, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.", "history": "Added in API level 19", "FullName": "public void setLocation (float latitude, float longitude)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.", "history": "Added in API level 18", "FullName": "public void release ()"}, "MediaMuxer(java.io.FileDescriptor,int)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The FileDescriptor of the output media file. This value must never be null."], ["int", "int: The format of the output media file. Value is @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_MPEG_4_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_WEBM_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_3GPP_E@, @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_HEIF_E@, or @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_OGG_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fd is invalid or format is not supported."], ["@B_java#io#IOException_E@", "if failed to open the file for write."]], "SeeAlso": ["@B_android#media#MediaMuxer#OutputFormat_E@"], "Permissions": [], "Description": "Constructor. Creates a media muxer that writes to the specified FileDescriptor. File descriptor must be seekable and writable. Application should not use the file referenced by this file descriptor until @B_android#media#MediaMuxer#stop_E@. It is the application's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "Added in API level 26", "FullName": "public MediaMuxer (FileDescriptor fd, int format)"}, "writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec.BufferInfo)": {"Returns": [], "Parameters": [["int", "int: The track index for this sample."], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The encoded sample. This value must never be null."], ["@B_android#media#MediaCodec#BufferInfo_E@", "MediaCodec.BufferInfo: The buffer information related to this sample. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if trackIndex, byteBuf or bufferInfo is invalid."], ["@B_java#lang#IllegalStateException_E@", "if muxer is in wrong state. MediaMuxer uses the flags provided in @B_android#media#MediaCodec#BufferInfo_E@, to signal sync frames."]], "SeeAlso": [], "Permissions": [], "Description": "Writes an encoded sample into the muxer. The application needs to make sure that the samples are written into the right tracks. Also, it needs to make sure the samples for each track are written in chronological order (e.g. in the order they are provided by the encoder.)", "history": "Added in API level 18", "FullName": "public void writeSampleData (int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo)"}, "setLocation(float, float)": {"Returns": [], "Parameters": [["float", "float: Latitude in degrees. Its value must be in the range [-90, 90]."], ["float", "float: Longitude in degrees. Its value must be in the range [-180, 180]."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given latitude or longitude is out of range."], ["@B_java#lang#IllegalStateException_E@", "If this method is called after @B_android#media#MediaMuxer#start_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Set and store the geodata (latitude and longitude) in the output file. This method should be called before @B_android#media#MediaMuxer#start_E@. The geodata is stored in udta box if the output format is @B_android#media#MediaMuxer#OutputFormat#MUXER_OUTPUT_MPEG_4_E@, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.", "history": "added in API level 19", "FullName": "public void setLocation (float latitude, float longitude)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if muxer is in the wrong state."]], "SeeAlso": [], "Permissions": [], "Description": "Stops the muxer. Once the muxer stops, it can not be restarted.", "history": "Added in API level 18", "FullName": "public void stop ()"}}, "Inheritance": [], "ClassName": "android.media.MediaMuxer", "ClassDesc": "MediaMuxer facilitates muxing elementary streams. Currently MediaMuxer supports MP4, Webm and 3GP file as the output. It also supports muxing B-frames in MP4 since Android Nougat. It is generally used like this: Per-frame metadata is useful in carrying extra information that correlated with video or audio to facilitate offline processing, e.g. gyro signals from the sensor could help video stabilization when doing offline processing. Metadata track is only supported in MP4 container. When adding a new metadata track, track's mime format must start with prefix \"application/\", e.g. \"applicaton/gyro\". Metadata's format/layout will be defined by the application. Writing metadata is nearly the same as writing video/audio data except that the data will not be from mediacodec. Application just needs to pass the bytebuffer that contains the metadata and also the associated timestamp to the @B_android#media#MediaMuxer#writeSampleData_E@ api. The timestamp must be in the same time base as video and audio. The generated MP4 file uses TextMetaDataSampleEntry defined in section 12.3.3.2 of the ISOBMFF to signal the metadata's mime format. When using@B_android#media#MediaExtractor_E@ to extract the file with metadata track, the mime format of the metadata will be extracted into @B_android#media#MediaFormat_E@. The following table summarizes the feature support in different API version and containers. For API version numbers, see @B_android#os#Build#VERSION_CODES_E@."}