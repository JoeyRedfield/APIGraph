{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the system identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getSystemId_E@"], "Permissions": [], "Description": "Get the system identifier of the entity where the exception occurred. If the system identifier is a URL, it will have been resolved fully.", "history": "Added in API level 1", "FullName": "public String getSystemId ()"}, "SAXParseException(java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.Exception)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The error or warning message, or null to use the message from the embedded exception."], ["@B_java#lang#String_E@", "String: The public identifier of the entity that generated the error or warning."], ["@B_java#lang#String_E@", "String: The system identifier of the entity that generated the error or warning."], ["int", "int: The line number of the end of the text that caused the error or warning."], ["int", "int: The column number of the end of the text that cause the error or warning."], ["@B_java#lang#Exception_E@", "Exception: Another exception to embed in this one."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new SAXParseException with an embedded exception. This constructor is most useful for parser writers who need to wrap an exception that is not a subclass of @B_org#xml#sax#SAXException_E@. All parameters except the message and exception are as if they were provided by a @B_org#xml#sax#Locator_E@. For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception.", "history": "Added in API level 1", "FullName": "public SAXParseException (String message, String publicId, String systemId, int lineNumber, int columnNumber, Exception e)"}, "SAXParseException(java.lang.String,org.xml.sax.Locator)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The error or warning message."], ["@B_org#xml#sax#Locator_E@", "Locator: The locator object for the error or warning (may be null)."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator_E@"], "Permissions": [], "Description": "Create a new SAXParseException from a message and a Locator. This constructor is especially useful when an application is creating its own exception from within a @B_org#xml#sax#ContentHandler_E@ callback.", "history": "Added in API level 1", "FullName": "public SAXParseException (String message, Locator locator)"}, "getLineNumber()": {"Returns": [["int", "An integer representing the line number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getLineNumber_E@"], "Permissions": [], "Description": "The line number of the end of the text where the exception occurred. The first line is line 1.", "history": "Added in API level 1", "FullName": "public int getLineNumber ()"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the public identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getPublicId_E@"], "Permissions": [], "Description": "Get the public identifier of the entity where the exception occurred.", "history": "Added in API level 1", "FullName": "public String getPublicId ()"}, "getColumnNumber()": {"Returns": [["int", "An integer representing the column number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getColumnNumber_E@"], "Permissions": [], "Description": "The column number of the end of the text where the exception occurred. The first column in a line is position 1.", "history": "Added in API level 1", "FullName": "public int getColumnNumber ()"}, "SAXParseException(java.lang.String,java.lang.String,java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The error or warning message."], ["@B_java#lang#String_E@", "String: The public identifier of the entity that generated the error or warning."], ["@B_java#lang#String_E@", "String: The system identifier of the entity that generated the error or warning."], ["int", "int: The line number of the end of the text that caused the error or warning."], ["int", "int: The column number of the end of the text that cause the error or warning."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new SAXParseException. This constructor is most useful for parser writers. All parameters except the message are as if they were provided by a @B_org#xml#sax#Locator_E@. For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception.", "history": "Added in API level 1", "FullName": "public SAXParseException (String message, String publicId, String systemId, int lineNumber, int columnNumber)"}, "SAXParseException(java.lang.String,org.xml.sax.Locator,java.lang.Exception)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The error or warning message, or null to use the message from the embedded exception."], ["@B_org#xml#sax#Locator_E@", "Locator: The locator object for the error or warning (may be null)."], ["@B_java#lang#Exception_E@", "Exception: Any exception."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator_E@"], "Permissions": [], "Description": "Wrap an existing exception in a SAXParseException. This constructor is especially useful when an application is creating its own exception from within a @B_org#xml#sax#ContentHandler_E@ callback, and needs to wrap an existing exception that is not a subclass of @B_org#xml#sax#SAXException_E@.", "history": "Added in API level 1", "FullName": "public SAXParseException (String message, Locator locator, Exception e)"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@", "@B_org#xml#sax#SAXException_E@"], "ClassName": "org.xml.sax.SAXParseException", "ClassDesc": "Encapsulate an XML parse error or warning. This exception may include information for locating the error in the original XML document, as if it came from a @B_org#xml#sax#Locator_E@ object. Note that although the application will receive a SAXParseException as the argument to the handlers in the @B_org#xml#sax#ErrorHandler_E@ interface, the application is not actually required to throw the exception; instead, it can simply read the information in it and take a different action. Since this exception is a subclass of @B_org#xml#sax#SAXException_E@, it inherits the ability to wrap another exception."}