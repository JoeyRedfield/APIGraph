{"Functions": {"setOnAccessibilityEventListener(android.app.UiAutomation.OnAccessibilityEventListener)": {"Returns": [], "Parameters": [["@B_android#app#UiAutomation#OnAccessibilityEventListener_E@", "UiAutomation.OnAccessibilityEventListener: The callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback for observing the stream of @B_android#view#accessibility#AccessibilityEvent_E@s. The callbacks are delivered on the main application thread.", "history": "Added in API level 18", "FullName": "public void setOnAccessibilityEventListener (UiAutomation.OnAccessibilityEventListener listener)"}, "getWindowContentFrameStats(int)": {"Returns": [["@B_android#view#WindowContentFrameStats_E@", "The window frame statistics, or null if the window is not present."]], "Parameters": [["int", "int: The window id."]], "Throws": [], "SeeAlso": ["@B_android#view#WindowContentFrameStats_E@", "@B_android#app#UiAutomation#clearWindowContentFrameStats_E@", "@B_android#app#UiAutomation#getWindows_E@", "@B_android#view#accessibility#AccessibilityWindowInfo#getId_E@"], "Permissions": [], "Description": "Gets the frame statistics for a given window. These statistics contain information about the most recently rendered content frames. A typical usage requires clearing the window frame statistics via @B_android#app#UiAutomation#clearWindowContentFrameStats_E@ followed by an interaction with the UI and finally getting the window frame statistics via calling this method.", "history": "Added in API level 21", "FullName": "public WindowContentFrameStats getWindowContentFrameStats (int windowId)"}, "revokeRuntimePermission(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to which to grant."], ["@B_java#lang#String_E@", "String: The permission to grant."]], "Throws": [["@B_java#lang#SecurityException_E@", "if unable to revoke the permission."]], "SeeAlso": [], "Permissions": [], "Description": "Revokes a runtime permission from a package.", "history": "Added in API level 28", "FullName": "public void revokeRuntimePermission (String packageName, String permission)"}, "grantRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to which to grant."], ["@B_java#lang#String_E@", "String: The permission to grant."], ["@B_android#os#UserHandle_E@", "UserHandle no parameter comment"]], "Throws": [["@B_java#lang#SecurityException_E@", "if unable to grant the permission."]], "SeeAlso": [], "Permissions": [], "Description": "Grants a runtime permission to a package for a user.", "history": "Added in API level 28", "FullName": "public void grantRuntimePermissionAsUser (String packageName, String permission, UserHandle userHandle)"}, "getServiceInfo()": {"Returns": [["@B_android#accessibilityservice#AccessibilityServiceInfo_E@", "The accessibility service info."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityServiceInfo_E@"], "Permissions": [], "Description": "Gets the an @B_android#accessibilityservice#AccessibilityServiceInfo_E@ describing this UiAutomation. This method is useful if one wants to change some of the dynamically configurable properties at runtime.", "history": "Added in API level 18", "FullName": "public AccessibilityServiceInfo getServiceInfo ()"}, "performGlobalAction(int)": {"Returns": [["boolean", "Whether the action was successfully performed."]], "Parameters": [["int", "int: The action to perform."]], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityService_E@"], "Permissions": [], "Description": "Performs a global action. Such an action can be performed at any moment regardless of the current application or user location in that application. For example going back, going home, opening recents, etc.", "history": "Added in API level 18", "FullName": "public boolean performGlobalAction (int action)"}, "grantRuntimePermission(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to which to grant."], ["@B_java#lang#String_E@", "String: The permission to grant."]], "Throws": [["@B_java#lang#SecurityException_E@", "if unable to grant the permission."]], "SeeAlso": [], "Permissions": [], "Description": "Grants a runtime permission to a package.", "history": "Added in API level 28", "FullName": "public void grantRuntimePermission (String packageName, String permission)"}, "revokeRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to which to grant."], ["@B_java#lang#String_E@", "String: The permission to grant."], ["@B_android#os#UserHandle_E@", "UserHandle no parameter comment"]], "Throws": [["@B_java#lang#SecurityException_E@", "if unable to revoke the permission."]], "SeeAlso": [], "Permissions": [], "Description": "Revokes a runtime permission from a package.", "history": "Added in API level 28", "FullName": "public void revokeRuntimePermissionAsUser (String packageName, String permission, UserHandle userHandle)"}, "clearWindowContentFrameStats(int)": {"Returns": [["boolean", "Whether the window is present and its frame statistics were cleared."]], "Parameters": [["int", "int: The window id."]], "Throws": [], "SeeAlso": ["@B_android#view#WindowContentFrameStats_E@", "@B_android#app#UiAutomation#getWindowContentFrameStats_E@", "@B_android#app#UiAutomation#getWindows_E@", "@B_android#view#accessibility#AccessibilityWindowInfo#getId_E@"], "Permissions": [], "Description": "Clears the frame statistics for the content of a given window. These statistics contain information about the most recently rendered content frames.", "history": "Added in API level 21", "FullName": "public boolean clearWindowContentFrameStats (int windowId)"}, "waitForIdle(long,long)": {"Returns": [], "Parameters": [["long", "long: The timeout in milliseconds between two events to consider the device idle."], ["long", "long: The maximal global timeout in milliseconds in which to wait for an idle state."]], "Throws": [["@B_java#util#concurrent#TimeoutException_E@", "If no idle state was detected within globalTimeoutMillis."]], "SeeAlso": [], "Permissions": [], "Description": "Waits for the accessibility event stream to become idle, which is not to have received an accessibility event within idleTimeoutMillis. The total time spent to wait for an idle accessibility event stream is bounded by the globalTimeoutMillis.", "history": "Added in API level 18", "FullName": "public void waitForIdle (long idleTimeoutMillis, long globalTimeoutMillis)"}, "takeScreenshot()": {"Returns": [["@B_android#graphics#Bitmap_E@", "The screenshot bitmap on success, null otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Takes a screenshot.", "history": "Added in API level 18", "FullName": "public Bitmap takeScreenshot ()"}, "getRootInActiveWindow()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The root info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the root @B_android#view#accessibility#AccessibilityNodeInfo_E@ in the active window.", "history": "Added in API level 18", "FullName": "public AccessibilityNodeInfo getRootInActiveWindow ()"}, "setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)": {"Returns": [], "Parameters": [["@B_android#accessibilityservice#AccessibilityServiceInfo_E@", "AccessibilityServiceInfo: The info."]], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityServiceInfo_E@"], "Permissions": [], "Description": "Sets the @B_android#accessibilityservice#AccessibilityServiceInfo_E@ that describes how this UiAutomation will be handled by the platform accessibility layer.", "history": "Added in API level 18", "FullName": "public void setServiceInfo (AccessibilityServiceInfo info)"}, "getWindows()": {"Returns": [["@B_java#util#List_E@", "The windows if there are windows such, otherwise an empty list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the windows on the screen. This method returns only the windows that a sighted user can interact with, as opposed to all windows. For example, if there is a modal dialog shown and the user cannot touch anything behind it, then only the modal window will be reported (assuming it is the top one). For convenience the returned windows are ordered in a descending layer order, which is the windows that are higher in the Z-order are reported first. @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS_E@ flag.", "history": "Added in API level 21", "FullName": "public List<AccessibilityWindowInfo> getWindows ()"}, "executeShellCommand(java.lang.String)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "A file descriptor to the standard output stream."]], "Parameters": [["@B_java#lang#String_E@", "String: The command to execute."]], "Throws": [], "SeeAlso": ["@B_android#app#UiAutomation#adoptShellPermissionIdentity_E@"], "Permissions": [], "Description": "Executes a shell command. This method returns a file descriptor that points to the standard output stream. The command execution is similar to running \"adb shell", "history": "Added in API level 21", "FullName": "public ParcelFileDescriptor executeShellCommand (String command)"}, "setRotation(int)": {"Returns": [["boolean", "Whether the rotation was set successfully."]], "Parameters": [["int", "int: The desired rotation."]], "Throws": [], "SeeAlso": ["@B_android#app#UiAutomation_E@"], "Permissions": [], "Description": "Sets the device rotation. A client can freeze the rotation in desired state or freeze the rotation to its current state or unfreeze the rotation (rotating the device changes its rotation state).", "history": "Added in API level 18", "FullName": "public boolean setRotation (int rotation)"}, "setRunAsMonkey(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to run in a \"monkey\" mode or not. Default is not."]], "Throws": [], "SeeAlso": ["@B_android#app#ActivityManager#isUserAMonkey_E@"], "Permissions": [], "Description": "Sets whether this UiAutomation to run in a \"monkey\" mode. Applications can query whether they are executed in a \"monkey\" mode, i.e. run by a test framework, and avoid doing potentially undesirable actions such as calling 911 or posting on public forums etc.", "history": "Added in API level 18", "FullName": "public void setRunAsMonkey (boolean enable)"}, "waitForIdle(long, long)": {"Returns": [], "Parameters": [["long", "long: The timeout in milliseconds between two events to consider the device idle."], ["long", "long: The maximal global timeout in milliseconds in which to wait for an idle state."]], "Throws": [["@B_java#util#concurrent#TimeoutException_E@", "If no idle state was detected within globalTimeoutMillis."]], "SeeAlso": [], "Permissions": [], "Description": "Waits for the accessibility event stream to become idle, which is not to have received an accessibility event within idleTimeoutMillis. The total time spent to wait for an idle accessibility event stream is bounded by the globalTimeoutMillis.", "history": "added in API level 18", "FullName": "public void waitForIdle (long idleTimeoutMillis, long globalTimeoutMillis)"}, "dropShellPermissionIdentity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#UiAutomation#adoptShellPermissionIdentity_E@"], "Permissions": [], "Description": "Drop the shell permission identity adopted by a previous call to @B_android#app#UiAutomation#adoptShellPermissionIdentity_E@. If you did not adopt the shell permission identity this method would be a no-op.", "history": "Added in API level 29", "FullName": "public void dropShellPermissionIdentity ()"}, "injectInputEvent(android.view.InputEvent,boolean)": {"Returns": [["boolean", "Whether event injection succeeded."]], "Parameters": [["@B_android#view#InputEvent_E@", "InputEvent: The event to inject."], ["boolean", "boolean: Whether to inject the event synchronously."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A method for injecting an arbitrary input event.", "history": "Added in API level 18", "FullName": "public boolean injectInputEvent (InputEvent event, boolean sync)"}, "findFocus(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The node info of the focused view or null."]], "Parameters": [["int", "int: The focus to find. One of @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_INPUT_E@ or @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Find the view that has the specified focus type. The search is performed across all windows. @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS_E@ flag. Otherwise, the search will be performed only in the active window.", "history": "Added in API level 21", "FullName": "public AccessibilityNodeInfo findFocus (int focus)"}, "getWindowAnimationFrameStats()": {"Returns": [["@B_android#view#WindowAnimationFrameStats_E@", "The window animation frame statistics."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#WindowAnimationFrameStats_E@", "@B_android#app#UiAutomation#clearWindowAnimationFrameStats_E@", "@B_android#R#styleable#WindowAnimation_E@"], "Permissions": [], "Description": "Gets the window animation frame statistics. These statistics contain information about the most recently rendered window animation frames, i.e. for window transition animations. A typical usage requires clearing the window animation frame statistics via @B_android#app#UiAutomation#clearWindowAnimationFrameStats_E@ followed by an interaction that causes a window transition which uses a window animation and finally getting the window animation frame statistics by calling this method.", "history": "Added in API level 21", "FullName": "public WindowAnimationFrameStats getWindowAnimationFrameStats ()"}, "adoptShellPermissionIdentity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#UiAutomation#adoptShellPermissionIdentity_E@", "@B_android#app#UiAutomation#dropShellPermissionIdentity_E@"], "Permissions": [], "Description": "Adopt the permission identity of the shell UID for all permissions. This allows you to call APIs protected permissions which normal apps cannot hold but are granted to the shell UID. If you already adopted all shell permissions by calling this method or @B_android#app#UiAutomation#adoptShellPermissionIdentity_E@ a subsequent call would be a no-op. Note that your permission state becomes that of the shell UID and it is not a combination of your and the shell UID permissions.", "history": "Added in API level 29", "FullName": "public void adoptShellPermissionIdentity ()"}, "injectInputEvent(android.view.InputEvent, boolean)": {"Returns": [["boolean", "Whether event injection succeeded."]], "Parameters": [["@B_android#view#InputEvent_E@", "InputEvent: The event to inject."], ["boolean", "boolean: Whether to inject the event synchronously."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A method for injecting an arbitrary input event.", "history": "added in API level 18", "FullName": "public boolean injectInputEvent (InputEvent event, boolean sync)"}, "adoptShellPermissionIdentity(java.lang.String...)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The permissions to adopt or null to adopt all. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#app#UiAutomation#adoptShellPermissionIdentity_E@", "@B_android#app#UiAutomation#dropShellPermissionIdentity_E@"], "Permissions": [], "Description": "Adopt the permission identity of the shell UID only for the provided permissions. This allows you to call APIs protected permissions which normal apps cannot hold but are granted to the shell UID. If you already adopted the specified shell permissions by calling this method or @B_android#app#UiAutomation#adoptShellPermissionIdentity_E@ a subsequent call would be a no-op. Note that your permission state becomes that of the shell UID and it is not a combination of your and the shell UID permissions.", "history": "Added in API level 29", "FullName": "public void adoptShellPermissionIdentity (String... permissions)"}, "executeAndWaitForEvent(java.lang.Runnable,android.app.UiAutomation.AccessibilityEventFilter,long)": {"Returns": [["@B_android#view#accessibility#AccessibilityEvent_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The command to execute."], ["@B_android#app#UiAutomation#AccessibilityEventFilter_E@", "UiAutomation.AccessibilityEventFilter: Filter that recognizes the expected event."], ["long", "long: The wait timeout in milliseconds."]], "Throws": [["@B_java#util#concurrent#TimeoutException_E@", "If the expected event is not received within the timeout."]], "SeeAlso": [], "Permissions": [], "Description": "Executes a command and waits for a specific accessibility event up to a given wait timeout. To detect a sequence of events one can implement a filter that keeps track of seen events of the expected sequence and returns true after the last event of that sequence is received.", "history": "Added in API level 18", "FullName": "public AccessibilityEvent executeAndWaitForEvent (Runnable command, UiAutomation.AccessibilityEventFilter filter, long timeoutMillis)"}, "clearWindowAnimationFrameStats()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#WindowAnimationFrameStats_E@", "@B_android#app#UiAutomation#getWindowAnimationFrameStats_E@", "@B_android#R#styleable#WindowAnimation_E@"], "Permissions": [], "Description": "Clears the window animation rendering statistics. These statistics contain information about the most recently rendered window animation frames, i.e. for window transition animations.", "history": "Added in API level 21", "FullName": "public void clearWindowAnimationFrameStats ()"}}, "Inheritance": [], "ClassName": "android.app.UiAutomation", "ClassDesc": "Class for interacting with the device's UI by simulation user actions and introspection of the screen content. It relies on the platform accessibility APIs to introspect the screen and to perform some actions on the remote view tree. It also allows injecting of arbitrary raw input events simulating user interaction with keyboards and touch devices. One can think of a UiAutomation as a special type of @B_android#accessibilityservice#AccessibilityService_E@ which does not provide hooks for the service life cycle and exposes other APIs that are useful for UI test automation. The APIs exposed by this class are low-level to maximize flexibility when developing UI test automation tools and libraries. Generally, a UiAutomation client should be using a higher-level library or implement high-level functions. For example, performing a tap on the screen requires construction and injecting of a touch down and up events which have to be delivered to the system by a call to @B_android#app#UiAutomation#injectInputEvent_E@. The APIs exposed by this class operate across applications enabling a client to write tests that cover use cases spanning over multiple applications. For example, going to the settings application to change a setting and then interacting with another application whose behavior depends on that setting."}