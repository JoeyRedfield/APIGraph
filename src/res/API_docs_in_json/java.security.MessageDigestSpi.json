{"Functions": {"engineDigest()": {"Returns": [["byte[]", "the array of bytes for the resulting hash value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. Once engineDigest has been called, the engine should be reset (see @B_java#security#MessageDigestSpi#engineReset_E@). Resetting is the responsibility of the engine implementor.", "history": "Added in API level 1", "FullName": "protected abstract byte[] engineDigest ()"}, "engineGetDigestLength()": {"Returns": [["int", "the digest length in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the digest length in bytes. This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.) The default behavior is to return 0. This method may be overridden by a provider to return the digest length.", "history": "Added in API level 1", "FullName": "protected int engineGetDigestLength ()"}, "engineReset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the digest for further use.", "history": "Added in API level 1", "FullName": "protected abstract void engineReset ()"}, "MessageDigestSpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public MessageDigestSpi ()"}, "engineDigest(byte[],int,int)": {"Returns": [["int", "the length of the digest stored in the output buffer."]], "Parameters": [["byte[]", "byte: the output buffer in which to store the digest"], ["int", "int: offset to start from in the output buffer"], ["int", "int: number of bytes within buf allotted for the digest. Both this default implementation and the SUN provider do not return partial digests. The presence of this parameter is solely for consistency in our API's. If the value of this parameter is less than the actual digest length, the method will throw a DigestException. This parameter is ignored if its value is greater than or equal to the actual digest length."]], "Throws": [["@B_java#security#DigestException_E@", "if an error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. Once engineDigest has been called, the engine should be reset (see @B_java#security#MessageDigestSpi#engineReset_E@). Resetting is the responsibility of the engine implementor. This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method.", "history": "Added in API level 1", "FullName": "protected int engineDigest (byte[] buf, int offset, int len)"}, "engineUpdate(byte)": {"Returns": [], "Parameters": [["byte", "byte: the byte to use for the update."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified byte.", "history": "Added in API level 1", "FullName": "protected abstract void engineUpdate (byte input)"}, "engineUpdate(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes to use for the update."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified array of bytes, starting at the specified offset.", "history": "added in API level 1", "FullName": "protected abstract void engineUpdate (byte[] input, int offset, int len)"}, "engineDigest(byte[], int, int)": {"Returns": [["int", "the length of the digest stored in the output buffer."]], "Parameters": [["byte[]", "byte: the output buffer in which to store the digest"], ["int", "int: offset to start from in the output buffer"], ["int", "int: number of bytes within buf allotted for the digest. Both this default implementation and the SUN provider do not return partial digests. The presence of this parameter is solely for consistency in our API's. If the value of this parameter is less than the actual digest length, the method will throw a DigestException. This parameter is ignored if its value is greater than or equal to the actual digest length."]], "Throws": [["@B_java#security#DigestException_E@", "if an error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. Once engineDigest has been called, the engine should be reset (see @B_java#security#MessageDigestSpi#engineReset_E@). Resetting is the responsibility of the engine implementor. This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method.", "history": "added in API level 1", "FullName": "protected int engineDigest (byte[] buf, int offset, int len)"}, "engineUpdate(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes to use for the update."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified array of bytes, starting at the specified offset.", "history": "Added in API level 1", "FullName": "protected abstract void engineUpdate (byte[] input, int offset, int len)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone if the implementation is cloneable."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "if this is called on an implementation that does not support Cloneable."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone if the implementation is cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "engineUpdate(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the digest using the specified ByteBuffer. The digest is updated using the input.remaining() bytes starting at input.position(). Upon return, the buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 1", "FullName": "protected void engineUpdate (ByteBuffer input)"}}, "Inheritance": [], "ClassName": "java.security.MessageDigestSpi", "ClassDesc": "This class defines the MessageDigest class, which provides the functionality of a message digest algorithm, such as MD5 or SHA. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. All the abstract methods in this class must be implemented by a cryptographic service provider who wishes to supply the implementation of a particular message digest algorithm. Implementations are free to implement the Cloneable interface."}