{"Functions": {"onHeaderClick(android.preference.PreferenceActivity.Header,int)": {"Returns": [], "Parameters": [["@B_android#preference#PreferenceActivity#Header_E@", "PreferenceActivity.Header: The header that was selected."], ["int", "int: The header's position in the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user selects an item in the header list. The default implementation will call either @B_android#preference#PreferenceActivity#startWithFragment_E@ or @B_android#preference#PreferenceActivity#switchToHeader_E@ as appropriate.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void onHeaderClick (PreferenceActivity.Header header, int position)"}, "findPreference(java.lang.CharSequence)": {"Returns": [["@B_android#preference#Preference_E@", "The @B_android#preference#Preference_E@ with the key, or null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The key of the preference to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#preference#PreferenceGroup#findPreference_E@"], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Finds a @B_android#preference#Preference_E@ based on its key.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public Preference findPreference (CharSequence key)"}, "invalidateHeaders()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call when you need to change the headers being displayed. Will result in onBuildHeaders() later being called to retrieve the new list.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void invalidateHeaders ()"}, "isMultiPane()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this activity is showing multiple panes -- the headers and a preference fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean isMultiPane ()"}, "onGetInitialHeader()": {"Returns": [["@B_android#preference#PreferenceActivity#Header_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to determine the initial header to be shown. The default implementation simply returns the fragment of the first header. Note that the returned Header object does not actually need to exist in your header list -- whatever its fragment is will simply be used to show for the initial UI.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public PreferenceActivity.Header onGetInitialHeader ()"}, "onIsMultiPane()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to determine if the activity should run in multi-pane mode. The default implementation returns true if the screen is large enough.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean onIsMultiPane ()"}, "addPreferencesFromResource(int)": {"Returns": [], "Parameters": [["int", "int: The XML resource ID to inflate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Inflates the given XML resource and adds the preference hierarchy to the current preference hierarchy.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void addPreferencesFromResource (int preferencesResId)"}, "startPreferencePanel(java.lang.String,android.os.Bundle,int,java.lang.CharSequence,android.app.Fragment,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Full name of the class implementing the fragment."], ["@B_android#os#Bundle_E@", "Bundle: Any desired arguments to supply to the fragment."], ["int", "int: Optional resource identifier of the title of this fragment."], ["@B_java#lang#CharSequence_E@", "CharSequence: Optional text of the title of this fragment."], ["@B_android#app#Fragment_E@", "Fragment: Optional fragment that result data should be sent to. If non-null, resultTo.onActivityResult() will be called when this preference panel is done. The launched panel must use @B_android#preference#PreferenceActivity#finishPreferencePanel_E@ when done."], ["int", "int: If resultTo is non-null, this is the caller's request code to be received with the result."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a new fragment containing a preference panel. If the preferences are being displayed in multi-pane mode, the given fragment class will be instantiated and placed in the appropriate pane. If running in single-pane mode, a new activity will be launched in which to show the fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void startPreferencePanel (String fragmentClass, Bundle args, int titleRes, CharSequence titleText, Fragment resultTo, int resultRequestCode)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the screen state (current list and other views) when the content changes.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public void onContentChanged ()"}, "onActivityResult(int,int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it. The @B_android#app#Activity#RESULT_CANCELED_E@ if the activity explicitly returned that, didn't return any result, or crashed during its operation. You will receive this call immediately before onResume() when your activity is re-starting. This method is never invoked if your activity sets @B_android#R#styleable#AndroidManifestActivity_noHistory_E@ to true.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onActivityResult (int requestCode, int resultCode, Intent data)"}, "onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#preference#PreferenceFragment_E@", "PreferenceFragment no parameter comment"], ["@B_android#preference#Preference_E@", "Preference no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user has clicked on a Preference that has a fragment class name associated with it. The implementation to should instantiate and switch to an instance of the given fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean onPreferenceStartFragment (PreferenceFragment caller, Preference pref)"}, "onIsHidingHeaders()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to determine whether the header list should be hidden. The default implementation returns the value given in @B_android#preference#PreferenceActivity#EXTRA_NO_HEADERS_E@ or false if it is not supplied. This is set to false, for example, when the activity is being re-launched to show a particular preference activity.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean onIsHidingHeaders ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to retrieve per-instance state from an activity before being killed so that the state can be restored in @B_android#app#Activity#onCreate_E@ or @B_android#app#Activity#onRestoreInstanceState_E@ (the @B_android#os#Bundle_E@ populated by this method will be passed to both). This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state. For example, if activity B is launched in front of activity A, and at some point activity A is killed to reclaim resources, activity A will have a chance to save the current state of its user interface via this method so that when the user returns to activity A, the state of the user interface can be restored via @B_android#app#Activity#onCreate_E@ or @B_android#app#Activity#onRestoreInstanceState_E@. Do not confuse this method with activity lifecycle callbacks such as @B_android#app#Activity#onPause_E@, which is always called when the user no longer actively interacts with an activity, or @B_android#app#Activity#onStop_E@ which is called when activity becomes invisible. One example of when @B_android#app#Activity#onPause_E@ and @B_android#app#Activity#onStop_E@ is called and not this method is when a user navigates back from activity B to activity A: there is no need to call @B_android#app#Activity#onSaveInstanceState_E@ on B because that particular instance will never be restored, so the system avoids calling it. An example when @B_android#app#Activity#onPause_E@ is called and not @B_android#app#Activity#onSaveInstanceState_E@ is when activity B is launched in front of activity A: the system may avoid calling @B_android#app#Activity#onSaveInstanceState_E@ on activity A if it isn't killed during the lifetime of B since the state of the user interface of A will stay intact. The default implementation takes care of most of the UI per-instance state for you by calling @B_android#view#View#onSaveInstanceState_E@ on each view in the hierarchy that has an id, and by saving the id of the currently focused view (all of which is restored by the default implementation of @B_android#app#Activity#onRestoreInstanceState_E@). If you override this method to save additional information not captured by each individual view, you will likely want to call through to the default implementation, otherwise be prepared to save all of the state of each view yourself. If called, this method will occur after @B_android#app#Activity#onStop_E@ for applications targeting platforms starting with @B_android#os#Build#VERSION_CODES#P_E@. For applications targeting earlier platform versions this method will occur before @B_android#app#Activity#onStop_E@ and there are no guarantees about whether it will occur before or after @B_android#app#Activity#onPause_E@.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onSaveInstanceState (Bundle outState)"}, "setPreferenceScreen(android.preference.PreferenceScreen)": {"Returns": [], "Parameters": [["@B_android#preference#PreferenceScreen_E@", "PreferenceScreen: The root @B_android#preference#PreferenceScreen_E@ of the preference hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Sets the root of the preference hierarchy that this activity is showing.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setPreferenceScreen (PreferenceScreen preferenceScreen)"}, "addPreferencesFromIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The @B_android#content#Intent_E@ to query activities."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Adds preferences from activities that match the given @B_android#content#Intent_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void addPreferencesFromIntent (Intent intent)"}, "onBackPressed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the activity has detected the user's press of the back key. The default implementation simply finishes the current activity, but you can override this to do whatever you want.", "history": "Added in API level 5 Deprecated in API level 29", "FullName": "public void onBackPressed ()"}, "finishPreferencePanel(android.app.Fragment,int,android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: The fragment that is asking to be finished."], ["int", "int: Optional result code to send back to the original launching fragment."], ["@B_android#content#Intent_E@", "Intent: Optional result data to send back to the original launching fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a preference panel fragment to finish itself.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void finishPreferencePanel (Fragment caller, int resultCode, Intent resultData)"}, "getPreferenceScreen()": {"Returns": [["@B_android#preference#PreferenceScreen_E@", "The @B_android#preference#PreferenceScreen_E@ that is the root of the preference hierarchy."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Gets the root of the preference hierarchy that this activity is showing.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public PreferenceScreen getPreferenceScreen ()"}, "showBreadCrumbs(java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the base title of the bread crumbs for the current preferences. This will normally be called for you. See @B_android#app#FragmentBreadCrumbs_E@ for more information.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void showBreadCrumbs (CharSequence title, CharSequence shortTitle)"}, "PreferenceActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public PreferenceActivity ()"}, "startPreferenceFragment(android.app.Fragment,boolean)": {"Returns": [], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: The fragment to start"], ["boolean", "boolean: If true, the current fragment will be pushed onto the back stack. If false, the current fragment will be replaced."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a new fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void startPreferenceFragment (Fragment fragment, boolean push)"}, "startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"], ["@B_android#app#Fragment_E@", "Fragment no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#preference#PreferenceActivity#startWithFragment_E@ but uses a 0 titleRes.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void startWithFragment (String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode)"}, "switchToHeader(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the fragment to display."], ["@B_android#os#Bundle_E@", "Bundle: Optional arguments to supply to the fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When in two-pane mode, switch the fragment pane to show the given preference fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void switchToHeader (String fragmentName, Bundle args)"}, "setListFooter(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a footer that should be shown at the bottom of the header list.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void setListFooter (View view)"}, "onBuildHeaders(java.util.List<android.preference.PreferenceActivity.Header>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list in which to place the headers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the activity needs its list of headers build. By implementing this and adding at least one item to the list, you will cause the activity to run in its modern fragment mode. Note that this function may not always be called; for example, if the activity has been asked to display a particular fragment without the header list, there is no need to build the headers. Typical implementations will use @B_android#preference#PreferenceActivity#loadHeadersFromResource_E@ to fill in the list from a resource.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void onBuildHeaders (List<PreferenceActivity.Header> target)"}, "onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)": {"Returns": [["@B_android#content#Intent_E@", "Returns an Intent that can be launched to display the given fragment."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the fragment to display."], ["@B_android#os#Bundle_E@", "Bundle: Optional arguments to supply to the fragment."], ["int", "int: Optional resource ID of title to show for this item."], ["int", "int: Optional resource ID of short title to show for this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#preference#PreferenceActivity#startWithFragment_E@ when in single-pane mode, to build an Intent to launch a new activity showing the selected fragment. The default implementation constructs an Intent that re-launches the current activity with the appropriate arguments to display the fragment.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public Intent onBuildStartFragmentIntent (String fragmentName, Bundle args, int titleRes, int shortTitleRes)"}, "onOptionsItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "boolean Return false to allow normal menu processing to proceed, true to consume it here."]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Derived classes should call through to the base class for it to perform the default menu handling.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean onOptionsItemSelected (MenuItem item)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when you are no longer visible to the user. You will next receive either @B_android#app#Activity#onRestart_E@, @B_android#app#Activity#onDestroy_E@, or nothing, depending on later user activity. This is a good place to stop refreshing UI, running animations and other visual things. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onStop ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform any final cleanup before an activity is destroyed. This can happen either because the activity is finishing (someone called @B_android#app#Activity#finish_E@ on it), or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the @B_android#app#Activity#isFinishing_E@ method. Note: do not count on this method being called as a place for saving data! For example, if an activity is editing data in a content provider, those edits should be committed in either @B_android#app#Activity#onPause_E@ or @B_android#app#Activity#onSaveInstanceState_E@, not here. This method is usually implemented to free resources like threads that are associated with an activity, so that a destroyed activity does not leave such things around while the rest of its application is still running. There are situations where the system will simply kill the activity's hosting process without calling this method (or any others) in it, so it should not be used to do things that are intended to remain around after the process goes away. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onDestroy ()"}, "onNewIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The new intent that was started for the activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called for activities that set launchMode to \"singleTop\" in their package, or if a client used the @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@ flag when calling @B_android#app#Activity#startActivity_E@. In either case, when the activity is re-launched while at the top of the activity stack instead of a new instance of the activity being started, onNewIntent() will be called on the existing instance with the Intent that was used to re-launch it. An activity can never receive a new intent in the resumed state. You can count on @B_android#app#Activity#onResume_E@ being called after this method, though not necessarily immediately after the completion this callback. If the activity was resumed, it will be paused and new intent will be delivered, followed by @B_android#app#Activity#onResume_E@. If the activity wasn't in the resumed state, then new intent can be delivered immediately, with @B_android#app#Activity#onResume_E@ called sometime later when activity becomes active again. Note that @B_android#app#Activity#getIntent_E@ still returns the original Intent. You can use @B_android#app#Activity#setIntent_E@ to update it to this new Intent.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onNewIntent (Intent intent)"}, "onRestoreInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the data most recently supplied in @B_android#preference#PreferenceActivity#onSaveInstanceState_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures the list view has been created before Activity restores all of the view states.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onRestoreInstanceState (Bundle state)"}, "onGetNewHeader()": {"Returns": [["@B_android#preference#PreferenceActivity#Header_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after the header list has been updated (@B_android#preference#PreferenceActivity#onBuildHeaders_E@ has been called and returned due to @B_android#preference#PreferenceActivity#invalidateHeaders_E@) to specify the header that should now be selected. The default implementation returns null to keep whatever header is currently selected.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public PreferenceActivity.Header onGetNewHeader ()"}, "loadHeadersFromResource(int,java.util.List<android.preference.PreferenceActivity.Header>)": {"Returns": [], "Parameters": [["int", "int: The XML resource to load and parse."], ["@B_java#util#List_E@", "List: The list in which the parsed headers should be placed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse the given XML file as a header description, adding each parsed Header into the target list.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void loadHeadersFromResource (int resid, List<PreferenceActivity.Header> target)"}, "onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#preference#PreferenceScreen_E@", "PreferenceScreen no parameter comment"], ["@B_android#preference#Preference_E@", "Preference no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean onPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference)"}, "onListItemClick(android.widget.ListView,android.view.View,int,long)": {"Returns": [], "Parameters": [["@B_android#widget#ListView_E@", "ListView: The ListView where the click happened"], ["@B_android#view#View_E@", "View: The view that was clicked within the ListView"], ["int", "int: The position of the view in the list"], ["long", "long: The row id of the item that was clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when an item in the list is selected. Subclasses should override. Subclasses can call getListView().getItemAtPosition(position) if they need to access the data associated with the selected item.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onListItemClick (ListView l, View v, int position, long id)"}, "setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the title for the breadcrumb"], ["@B_java#lang#CharSequence_E@", "CharSequence: the short title for the breadcrumb"], ["@B_android#view#View#OnClickListener_E@", "View.OnClickListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should be called after onCreate to ensure that the breadcrumbs, if any, were created. This prepends a title to the fragment breadcrumbs and attaches a listener to any clicks on the parent entry.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void setParentTitle (CharSequence title, CharSequence shortTitle, View.OnClickListener listener)"}, "hasHeaders()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this activity is currently showing the header list.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean hasHeaders ()"}, "startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the fragment to display."], ["@B_android#os#Bundle_E@", "Bundle: Optional arguments to supply to the fragment."], ["@B_android#app#Fragment_E@", "Fragment: Option fragment that should receive the result of the activity launch."], ["int", "int: If resultTo is non-null, this is the request code in which to report the result."], ["int", "int: Resource ID of string to display for the title of this set of preferences."], ["int", "int: Resource ID of string to display for the short title of this set of preferences."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a new instance of this activity, showing only the given preference fragment. When launched in this mode, the header list will be hidden and the given preference fragment will be instantiated and fill the entire activity.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void startWithFragment (String fragmentName, Bundle args, Fragment resultTo, int resultRequestCode, int titleRes, int shortTitleRes)"}, "isValidFragment(java.lang.String)": {"Returns": [["boolean", "true if the fragment class name is valid for this Activity and false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the class name of the Fragment about to be attached to this activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses should override this method and verify that the given fragment is a valid type to be attached to this activity. The default implementation returns true for apps built for android:targetSdkVersion older than @B_android#os#Build#VERSION_CODES#KITKAT_E@. For later versions, it will throw an exception.", "history": "Added in API level 19 Deprecated in API level 29", "FullName": "protected boolean isValidFragment (String fragmentName)"}, "switchToHeader(android.preference.PreferenceActivity.Header)": {"Returns": [], "Parameters": [["@B_android#preference#PreferenceActivity#Header_E@", "PreferenceActivity.Header: The new header to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When in two-pane mode, switch to the fragment pane to show the given preference fragment.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void switchToHeader (PreferenceActivity.Header header)"}, "getPreferenceManager()": {"Returns": [["@B_android#preference#PreferenceManager_E@", "The @B_android#preference#PreferenceManager_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is not relevant for a modern fragment-based PreferenceActivity. Returns the @B_android#preference#PreferenceManager_E@ used by this activity.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public PreferenceManager getPreferenceManager ()"}, "onActivityResult(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it. The @B_android#app#Activity#RESULT_CANCELED_E@ if the activity explicitly returned that, didn't return any result, or crashed during its operation. You will receive this call immediately before onResume() when your activity is re-starting. This method is never invoked if your activity sets @B_android#R#styleable#AndroidManifestActivity_noHistory_E@ to true.", "history": "added in API level 1", "FullName": "protected void onActivityResult (int requestCode, int resultCode, Intent data)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the activity is starting. This is where most initialization should go: calling @B_android#app#Activity#setContentView_E@ to inflate the activity's UI, using @B_android#app#Activity#findViewById_E@ to programmatically interact with widgets in the UI, calling @B_android#app#Activity#managedQuery_E@ to retrieve cursors for data being displayed, etc. You can call @B_android#app#Activity#finish_E@ from within this function, in which case onDestroy() will be immediately called after @B_android#app#Activity#onCreate_E@ without any of the rest of the activity lifecycle (@B_android#app#Activity#onStart_E@, @B_android#app#Activity#onResume_E@, @B_android#app#Activity#onPause_E@, etc) executing. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. This method must be called from the If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "protected void onCreate (Bundle savedInstanceState)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@", "@B_android#app#ListActivity_E@"], "ClassName": "android.preference.PreferenceActivity", "ClassDesc": "Use the This is the base class for an activity to show a hierarchy of preferences to the user. Prior to @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@ this class only allowed the display of a single set of preference; this functionality should now be found in the new @B_android#preference#PreferenceFragment_E@ class. If you are using PreferenceActivity in its old mode, the documentation there applies to the deprecated APIs here. This activity shows one or more headers of preferences, each of which is associated with a @B_android#preference#PreferenceFragment_E@ to display the preferences of that header. The actual layout and display of these associations can however vary; currently there are two major approaches it may take: On a small screen it may display only the headers as a single list when first launched. Selecting one of the header items will only show the PreferenceFragment of that header (on Android N and lower a new Activity is launched). On a large screen it may display both the headers and current PreferenceFragment together as panes. Selecting a header item switches to showing the correct PreferenceFragment for that item. Subclasses of PreferenceActivity should implement @B_android#preference#PreferenceActivity#onBuildHeaders_E@ to populate the header list with the desired items. Doing this implicitly switches the class into its new \"headers + fragments\" mode rather than the old style of just showing a single preferences list."}