{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "readFromParcel(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readFromParcel (Parcel source)"}, "isValid()": {"Returns": [["boolean", "True if it holds a physical surface, so lockCanvas() will succeed. Otherwise returns false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this object holds a valid surface.", "history": "Added in API level 1", "FullName": "public boolean isValid ()"}, "unlockCanvas(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This API has been removed and is not supported. Do not use.", "history": "Added in API level 1 Deprecated in API level 17", "FullName": "public void unlockCanvas (Canvas canvas)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "Surface(android.graphics.SurfaceTexture)": {"Returns": [], "Parameters": [["@B_android#graphics#SurfaceTexture_E@", "SurfaceTexture: The @B_android#graphics#SurfaceTexture_E@ that is updated by this Surface."]], "Throws": [["@B_android#view#Surface#OutOfResourcesException_E@", "if the surface could not be created."]], "SeeAlso": [], "Permissions": [], "Description": "Create Surface from a @B_android#graphics#SurfaceTexture_E@. Images drawn to the Surface will be made available to the @B_android#graphics#SurfaceTexture_E@, which can attach them to an OpenGL ES texture via @B_android#graphics#SurfaceTexture#updateTexImage_E@. Please note that holding onto the Surface created here is not enough to keep the provided SurfaceTexture from being reclaimed. In that sense, the Surface will act like a @B_java#lang#ref#WeakReference_E@ to the SurfaceTexture.", "history": "Added in API level 14", "FullName": "public Surface (SurfaceTexture surfaceTexture)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "lockCanvas(android.graphics.Rect)": {"Returns": [["@B_android#graphics#Canvas_E@", "A canvas for drawing into the surface."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: A rectangle that represents the dirty region that the caller wants to redraw. This function may choose to expand the dirty rectangle if for example the surface has been resized or if the previous contents of the surface were not available. The caller must redraw the entire dirty region as represented by the contents of the inOutDirty rectangle upon return from this function. The caller may also pass null instead, in the case where the entire surface should be redrawn."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the inOutDirty rectangle is not valid."], ["@B_android#view#Surface#OutOfResourcesException_E@", "If the canvas cannot be locked."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a @B_android#graphics#Canvas_E@ for drawing into this surface. After drawing into the provided @B_android#graphics#Canvas_E@, the caller must invoke @B_android#view#Surface#unlockCanvasAndPost_E@ to post the new contents to the surface.", "history": "Added in API level 1", "FullName": "public Canvas lockCanvas (Rect inOutDirty)"}, "lockHardwareCanvas()": {"Returns": [["@B_android#graphics#Canvas_E@", "A canvas for drawing into the surface."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the canvas cannot be locked."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a @B_android#graphics#Canvas_E@ for drawing into this surface. After drawing into the provided @B_android#graphics#Canvas_E@, the caller must invoke @B_android#view#Surface#unlockCanvasAndPost_E@ to post the new contents to the surface. Unlike @B_android#view#Surface#lockCanvas_E@ this will return a hardware-accelerated canvas. See the @B_android#view#Surface#lockHardwareCanvas_E@ is called as the buffer is not preserved between frames. Partial updates are not supported.", "history": "Added in API level 23", "FullName": "public Canvas lockHardwareCanvas ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Release the local reference to the server-side surface. Always call release() when you're done with a Surface. This will make the surface invalid.", "history": "Added in API level 14", "FullName": "public void release ()"}, "Surface(android.view.SurfaceControl)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceControl_E@", "SurfaceControl: The SurfaceControl to assosciate this Surface with This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Surface assosciated with a given @B_android#view#SurfaceControl_E@. Buffers submitted to this surface will be displayed by the system compositor according to the parameters specified by the control. Multiple surfaces may be constructed from one SurfaceControl, but only one can be connected (e.g. have an active EGL context) at a time.", "history": "Added in API level 29", "FullName": "public Surface (SurfaceControl from)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "unlockCanvasAndPost(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas previously obtained from @B_android#view#Surface#lockCanvas_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Posts the new contents of the @B_android#graphics#Canvas_E@ to the surface and releases the @B_android#graphics#Canvas_E@.", "history": "Added in API level 1", "FullName": "public void unlockCanvasAndPost (Canvas canvas)"}}, "Inheritance": [], "ClassName": "android.view.Surface", "ClassDesc": "Handle onto a raw buffer that is being managed by the screen compositor. A Surface is generally created by or from a consumer of image buffers (such as a @B_android#graphics#SurfaceTexture_E@, @B_android#media#MediaRecorder_E@, or @B_android#renderscript#Allocation_E@), and is handed to some kind of producer (such as @B_android#opengl#EGL14#eglCreateWindowSurface_E@, @B_android#media#MediaPlayer#setSurface_E@, or @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@) to draw into. @B_java#lang#ref#WeakReference_E@ to the consumer it is associated with. By itself it will not keep its parent consumer from being reclaimed."}