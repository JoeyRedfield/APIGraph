{"Functions": {"dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 1", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "TabHost(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TabHost (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "newTabSpec(java.lang.String)": {"Returns": [["@B_android#widget#TabHost#TabSpec_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: tag for the tab specification, must be non-null This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the passed tag is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_android#widget#TabHost#TabSpec_E@ associated with this tab host.", "history": "Added in API level 1", "FullName": "public TabHost.TabSpec newTabSpec (String tag)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setup(android.app.LocalActivityManager)": {"Returns": [], "Parameters": [["@B_android#app#LocalActivityManager_E@", "LocalActivityManager: Used to launch activities for tab content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If you are using @B_android#widget#TabHost#TabSpec#setContent_E@, this must be called since the activityGroup is needed to launch the local activity. This is done for you if you extend @B_android#app#TabActivity_E@.", "history": "Added in API level 1", "FullName": "public void setup (LocalActivityManager activityGroup)"}, "setup()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call setup() before adding tabs if loading TabHost using findViewById(). @B_android#app#TabActivity_E@. Example:", "history": "Added in API level 1", "FullName": "public void setup ()"}, "getTabWidget()": {"Returns": [["@B_android#widget#TabWidget_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabWidget getTabWidget ()"}, "clearAllTabs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all tabs from the tab widget associated with this tab host.", "history": "Added in API level 1", "FullName": "public void clearAllTabs ()"}, "onTouchModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the view hierarchy is now in touch mode, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method to be invoked when the touch mode changes.", "history": "Added in API level 1", "FullName": "public void onTouchModeChanged (boolean isInTouchMode)"}, "getCurrentTabTag()": {"Returns": [["@B_java#lang#String_E@", "the tag for the current tab, may be null if no tab is set as current"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tag for the current tab.", "history": "Added in API level 1", "FullName": "public String getCurrentTabTag ()"}, "TabHost(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabHost (Context context)"}, "setCurrentTab(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setCurrentTab (int index)"}, "addTab(android.widget.TabHost.TabSpec)": {"Returns": [], "Parameters": [["@B_android#widget#TabHost#TabSpec_E@", "TabHost.TabSpec: Specifies how to create the indicator and content."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the passed tab spec has null indicator strategy and / or null content strategy."]], "SeeAlso": [], "Permissions": [], "Description": "Add a tab.", "history": "Added in API level 1", "FullName": "public void addTab (TabHost.TabSpec tabSpec)"}, "getTabContentView()": {"Returns": [["@B_android#widget#FrameLayout_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the FrameLayout which holds tab content", "history": "Added in API level 1", "FullName": "public FrameLayout getTabContentView ()"}, "TabHost(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabHost (Context context, AttributeSet attrs)"}, "sendAccessibilityEvent(int)": {"Returns": [], "Parameters": [["int", "The type of the event to send, as defined by several types from @B_android#view#accessibility#AccessibilityEvent_E@, such as @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_CLICKED_E@ or @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect. The default implementation calls @B_android#view#View#onInitializeAccessibilityEvent_E@ first to populate information about the event source (this View), then calls @B_android#view#View#dispatchPopulateAccessibilityEvent_E@ to populate the text content of the event source including its descendants, and last calls @B_android#view#ViewParent#requestSendAccessibilityEvent_E@ on its parent to resuest sending of the event to interested parties. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#sendAccessibilityEvent_E@ is responsible for handling this call.", "history": "Added in API level 4", "FullName": "public void sendAccessibilityEvent (int eventType)"}, "dispatchWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses window focus. ViewGroups should override to route to their children.", "history": "Added in API level 1", "FullName": "public void dispatchWindowFocusChanged (boolean hasFocus)"}, "getCurrentView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public View getCurrentView ()"}, "getCurrentTab()": {"Returns": [["int", "the current tab, may be null if no tab is set as current"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current tab.", "history": "Added in API level 1", "FullName": "public int getCurrentTab ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "TabHost(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TabHost (Context context, AttributeSet attrs, int defStyleAttr)"}, "setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener)": {"Returns": [], "Parameters": [["@B_android#widget#TabHost#OnTabChangeListener_E@", "TabHost.OnTabChangeListener: The callback that will run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the selected state of any of the items in this list changes", "history": "Added in API level 1", "FullName": "public void setOnTabChangedListener (TabHost.OnTabChangeListener l)"}, "setCurrentTabByTag(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the tag for the tab to set as current"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current tab based on its tag.", "history": "Added in API level 1", "FullName": "public void setCurrentTabByTag (String tag)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getCurrentTabView()": {"Returns": [["@B_android#view#View_E@", "the view for the current tab, may be null if no tab is set as current"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the view for the current tab.", "history": "Added in API level 1", "FullName": "public View getCurrentTabView ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#FrameLayout_E@"], "ClassName": "android.widget.TabHost", "ClassDesc": "Container for a tabbed window view. This object holds two children: a set of tab labels that the user clicks to select a specific tab, and a FrameLayout object that displays the contents of that page. The individual elements are typically controlled using this container object, rather than setting values on the child elements themselves."}