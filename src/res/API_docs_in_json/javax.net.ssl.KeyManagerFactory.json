{"Functions": {"getDefaultAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the default algorithm name as specified by the ssl.KeyManagerFactory.algorithm security property, or an implementation-specific default if no such property exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Security_E@"], "Permissions": [], "Description": "Obtains the default KeyManagerFactory algorithm name. The default algorithm can be changed at runtime by setting the value of the ssl.KeyManagerFactory.algorithm security property to the desired algorithm name.", "history": "Added in API level 1", "FullName": "public static final String getDefaultAlgorithm ()"}, "init(javax.net.ssl.ManagerFactoryParameters)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#ManagerFactoryParameters_E@", "ManagerFactoryParameters: an implementation of a provider-specific parameter specification"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if an error is encountered"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this factory with a source of provider-specific key material. In some cases, initialization parameters other than a keystore and password may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate ManagerFactoryParameters as defined by the provider. The provider can then call the specified methods in the ManagerFactoryParameters implementation to obtain the needed information.", "history": "Added in API level 1", "FullName": "public final void init (ManagerFactoryParameters spec)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this KeyManagerFactory object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this KeyManagerFactory object. This is the same name that was specified in one of the getInstance calls that created this KeyManagerFactory object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "init(java.security.KeyStore, char[])": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore: the key store or null"], ["char[]", "char: the password for recovering keys in the KeyStore"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if this operation fails"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the specified algorithm is not available from the specified provider."], ["@B_java#security#UnrecoverableKeyException_E@", "if the key cannot be recovered (e.g. the given password is wrong)."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this factory with a source of key material. The provider typically uses a KeyStore for obtaining key material for use during secure socket negotiations. The KeyStore is generally password-protected. For more flexible initialization, please see @B_javax#net#ssl#KeyManagerFactory#init_E@.", "history": "added in API level 1", "FullName": "public final void init (KeyStore ks, char[] password)"}, "KeyManagerFactory(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#KeyManagerFactorySpi_E@", "KeyManagerFactorySpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a KeyManagerFactory object.", "history": "Added in API level 1", "FullName": "protected KeyManagerFactory (KeyManagerFactorySpi factorySpi, Provider provider, String algorithm)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this KeyManagerFactory object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this KeyManagerFactory object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#net#ssl#KeyManagerFactory_E@", "the new KeyManagerFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: an instance of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyManagerFactorySpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if provider is null."], ["@B_java#lang#NullPointerException_E@", "if algorithm is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyManagerFactory object that acts as a factory for key managers. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final KeyManagerFactory getInstance (String algorithm, Provider provider)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#net#ssl#KeyManagerFactory_E@", "the new KeyManagerFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyManagerFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."], ["@B_java#lang#NullPointerException_E@", "if algorithm is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyManagerFactory object that acts as a factory for key managers. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final KeyManagerFactory getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#net#ssl#KeyManagerFactory_E@", "the new KeyManagerFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a KeyManagerFactorySpi implementation for the specified algorithm."], ["@B_java#lang#NullPointerException_E@", "if algorithm is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyManagerFactory object that acts as a factory for key managers. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final KeyManagerFactory getInstance (String algorithm)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#net#ssl#KeyManagerFactory_E@", "the new KeyManagerFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyManagerFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."], ["@B_java#lang#NullPointerException_E@", "if algorithm is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyManagerFactory object that acts as a factory for key managers. A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final KeyManagerFactory getInstance (String algorithm, String provider)"}, "getKeyManagers()": {"Returns": [["@B_javax#net#ssl#KeyManager_E@", "the key managers"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the KeyManagerFactory is not initialized"]], "SeeAlso": [], "Permissions": [], "Description": "Returns one key manager for each type of key material.", "history": "Added in API level 1", "FullName": "public final KeyManager[] getKeyManagers ()"}, "init(java.security.KeyStore,char[])": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore: the key store or null"], ["char[]", "char: the password for recovering keys in the KeyStore"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if this operation fails"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the specified algorithm is not available from the specified provider."], ["@B_java#security#UnrecoverableKeyException_E@", "if the key cannot be recovered (e.g. the given password is wrong)."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this factory with a source of key material. The provider typically uses a KeyStore for obtaining key material for use during secure socket negotiations. The KeyStore is generally password-protected. For more flexible initialization, please see @B_javax#net#ssl#KeyManagerFactory#init_E@.", "history": "Added in API level 1", "FullName": "public final void init (KeyStore ks, char[] password)"}}, "Inheritance": [], "ClassName": "javax.net.ssl.KeyManagerFactory", "ClassDesc": "This class acts as a factory for key managers based on a source of key material. Each key manager manages a specific type of key material for use by secure sockets. The key material is based on a KeyStore and/or provider specific sources. Android provides the following KeyManagerFactory algorithms:"}