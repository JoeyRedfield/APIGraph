{"Functions": {"join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {"Returns": [["@B_java#nio#channels#MembershipKey_E@", "The membership key"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The multicast address to join"], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: The network interface on which to join the group"], ["@B_java#net#InetAddress_E@", "InetAddress: The source address"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the group parameter is not a @B_java#net#InetAddress#isMulticastAddress_E@ address, the source parameter is not a unicast address, the group parameter is an address type that is not supported by this channel, or the source parameter is not the same address type as the group"], ["@B_java#lang#IllegalStateException_E@", "If the channel is currently a member of the group on the given interface to receive all datagrams"], ["@B_java#lang#UnsupportedOperationException_E@", "If the channel's socket is not an Internet Protocol socket or source filtering is not supported"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is set, and its @B_java#lang#SecurityManager#checkMulticast_E@ method denies access to the multiast group"]], "SeeAlso": [], "Permissions": [], "Description": "Joins a multicast group to begin receiving datagrams sent to the group from a given source address. If this channel is currently a member of the group on the given interface to receive datagrams from the given source address then the membership key, representing that membership, is returned. Otherwise this channel joins the group and the resulting new membership key is returned. The resulting membership key is @B_java#nio#channels#MembershipKey#sourceAddress_E@. Membership is cumulative and this method may be invoked again with the same group and interface to allow receiving datagrams sent by other source addresses to the group.", "history": "Added in API level 26", "FullName": "public abstract MembershipKey join (InetAddress group, NetworkInterface interf, InetAddress source)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. If the channel is a member of a multicast group then the membership is @B_java#nio#channels#MembershipKey#drop_E@. Upon return, the @B_java#nio#channels#MembershipKey_E@ will be @B_java#nio#channels#MembershipKey#isValid_E@. This method otherwise behaves exactly as specified by the @B_java#nio#channels#Channel_E@ interface.", "history": "Added in API level 26", "FullName": "public abstract void close ()"}, "join(java.net.InetAddress,java.net.NetworkInterface)": {"Returns": [["@B_java#nio#channels#MembershipKey_E@", "The membership key"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The multicast address to join"], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: The network interface on which to join the group"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the group parameter is not a @B_java#net#InetAddress#isMulticastAddress_E@ address, or the group parameter is an address type that is not supported by this channel"], ["@B_java#lang#IllegalStateException_E@", "If the channel already has source-specific membership of the group on the interface"], ["@B_java#lang#UnsupportedOperationException_E@", "If the channel's socket is not an Internet Protocol socket"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is set, and its @B_java#lang#SecurityManager#checkMulticast_E@ method denies access to the multiast group"]], "SeeAlso": [], "Permissions": [], "Description": "Joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key. If this channel is currently a member of the group on the given interface to receive all datagrams then the membership key, representing that membership, is returned. Otherwise this channel joins the group and the resulting new membership key is returned. The resulting membership key is not @B_java#nio#channels#MembershipKey#sourceAddress_E@. A multicast channel may join several multicast groups, including the same group on more than one interface. An implementation may impose a limit on the number of groups that may be joined at the same time.", "history": "Added in API level 26", "FullName": "public abstract MembershipKey join (InetAddress group, NetworkInterface interf)"}}, "Inheritance": [], "ClassName": "java.nio.channels.MulticastChannel", "ClassDesc": "A network channel that supports Internet Protocol (IP) multicasting. IP multicasting is the transmission of IP datagrams to members of a group that is zero or more hosts identified by a single destination address. In the case of a channel to an @B_java#net#StandardProtocolFamily#INET_E@ socket, the underlying operating system supports @B_java#net#StandardProtocolFamily#INET6_E@ socket, the equivalent standards are The @B_java#nio#channels#MulticastChannel#join_E@ method is used to join a group and receive all multicast datagrams sent to the group. A channel may join several multicast groups and may join the same group on several @B_java#net#NetworkInterface_E@. Membership is dropped by invoking the @B_java#nio#channels#MembershipKey#drop_E@ method on the returned @B_java#nio#channels#MembershipKey_E@. If the underlying platform supports source filtering then the @B_java#nio#channels#MembershipKey#block_E@ and @B_java#nio#channels#MembershipKey#unblock_E@ methods can be used to block or unblock multicast datagrams from particular source addresses. The @B_java#nio#channels#MulticastChannel#join_E@ method is used to begin receiving datagrams sent to a group whose source address matches a given source address. This method throws @B_java#lang#UnsupportedOperationException_E@ if the underlying platform does not support source filtering. Membership is cumulative and this method may be invoked again with the same group and interface to allow receiving datagrams from other source addresses. The method returns a @B_java#nio#channels#MembershipKey_E@ that represents membership to receive datagrams from the given source address. Invoking the key's @B_java#nio#channels#MembershipKey#drop_E@ method drops membership so that datagrams from the source address can no longer be received."}