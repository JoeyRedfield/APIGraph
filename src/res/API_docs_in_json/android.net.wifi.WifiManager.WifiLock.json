{"Functions": {"isHeld()": {"Returns": [["boolean", "true if this WifiLock is held, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this WifiLock is currently held.", "history": "Added in API level 1", "FullName": "public boolean isHeld ()"}, "setReferenceCounted(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this WifiLock should keep a reference count"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether this is a reference-counted or non-reference-counted WifiLock. Reference-counted WifiLocks keep track of the number of calls to @B_android#net#wifi#WifiManager#WifiLock#acquire_E@ and @B_android#net#wifi#WifiManager#WifiLock#release_E@, and only allow the radio to sleep when every call to @B_android#net#wifi#WifiManager#WifiLock#acquire_E@ has been balanced with a call to @B_android#net#wifi#WifiManager#WifiLock#release_E@. Non-reference-counted WifiLocks lock the radio whenever @B_android#net#wifi#WifiManager#WifiLock#acquire_E@ is called and it is unlocked, and unlock the radio whenever @B_android#net#wifi#WifiManager#WifiLock#release_E@ is called and it is locked.", "history": "Added in API level 1", "FullName": "public void setReferenceCounted (boolean refCounted)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle. If this WifiLock is reference-counted, each call to release will decrement the reference count, and the radio will be unlocked only when the reference count reaches zero. If the reference count goes below zero (that is, if release is called a greater number of times than @B_android#net#wifi#WifiManager#WifiLock#acquire_E@), an exception is thrown. If this WifiLock is not reference-counted, the first call to release (after the radio was locked using @B_android#net#wifi#WifiManager#WifiLock#acquire_E@) will unlock the radio, and subsequent calls will be ignored.", "history": "Added in API level 1", "FullName": "public void release ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "setWorkSource(android.os.WorkSource)": {"Returns": [], "Parameters": [["@B_android#os#WorkSource_E@", "WorkSource no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public void setWorkSource (WorkSource ws)"}, "acquire()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Locks the Wi-Fi radio on until @B_android#net#wifi#WifiManager#WifiLock#release_E@ is called. If this WifiLock is reference-counted, each call to acquire will increment the reference count, and the radio will remain locked as long as the reference count is above zero. If this WifiLock is not reference-counted, the first call to acquire will lock the radio, but subsequent calls will be ignored. Only one call to @B_android#net#wifi#WifiManager#WifiLock#release_E@ will be required, regardless of the number of times that acquire is called.", "history": "Added in API level 1", "FullName": "public void acquire ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.WifiManager.WifiLock", "ClassDesc": "Allows an application to keep the Wi-Fi radio awake. Normally the Wi-Fi radio may turn off when the user has not used the device in a while. Acquiring a WifiLock will keep the radio on until the lock is released. Multiple applications may hold WifiLocks, and the radio will only be allowed to turn off when no WifiLocks are held in any application. Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or could function over a mobile network, if available. A program that needs to download large files should hold a WifiLock to ensure that the download will complete, but a program whose network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely affecting battery life. Note that WifiLocks cannot override the user-level \"Wi-Fi Enabled\" setting, nor Airplane Mode. They simply keep the radio from turning off when Wi-Fi is already on but the device is idle. Any application using a WifiLock must request the android.permission.WAKE_LOCK permission in an <uses-permission> element of the application's manifest."}