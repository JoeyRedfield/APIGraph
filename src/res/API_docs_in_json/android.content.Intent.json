{"Functions": {"hasExtra(java.lang.String)": {"Returns": [["boolean", "true if the given extra is present."]], "Parameters": [["@B_java#lang#String_E@", "String: the extra's name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an extra value is associated with the given name.", "history": "Added in API level 1", "FullName": "public boolean hasExtra (String name)"}, "toURI()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#content#Intent#toUri_E@ instead. Call @B_android#content#Intent#toUri_E@ with 0 flags.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String toURI ()"}, "putExtra(java.lang.String, short[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["short[]", "short: The short array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getShortArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, short[] value)"}, "resolveActivityInfo(android.content.pm.PackageManager,int)": {"Returns": [["@B_android#content#pm#ActivityInfo_E@", "PackageManager.ActivityInfo"]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: The package manager with which to resolve the Intent. This value must never be null."], ["int", "int: Addition information to retrieve as per @B_android#content#pm#PackageManager#getActivityInfo_E@. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#resolveActivity_E@"], "Permissions": [], "Description": "Resolve the Intent into an @B_android#content#pm#ActivityInfo_E@ describing the activity that should execute the intent. Resolution follows the same rules as described for @B_android#content#Intent#resolveActivity_E@, but you get back the completely information about the resolved activity instead of just its class name.", "history": "Added in API level 1", "FullName": "public ActivityInfo resolveActivityInfo (PackageManager pm, int flags)"}, "getAction()": {"Returns": [["@B_java#lang#String_E@", "The action of this intent or null if none is specified."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setAction_E@"], "Permissions": [], "Description": "Retrieve the general action to be performed, such as @B_android#content#Intent#ACTION_VIEW_E@. The action describes the general way the rest of the information in the intent should be interpreted -- most importantly, what to do with the data returned by @B_android#content#Intent#getData_E@.", "history": "Added in API level 1", "FullName": "public String getAction ()"}, "putExtra(java.lang.String, byte[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["byte[]", "byte: The byte array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getByteArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, byte[] value)"}, "getBundleExtra(java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "the value of an item previously added with putExtra(), or null if no Bundle value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public Bundle getBundleExtra (String name)"}, "putExtra(java.lang.String, double[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["double[]", "double: The double array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getDoubleArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, double[] value)"}, "getComponent()": {"Returns": [["@B_android#content#ComponentName_E@", "The name of the application component to handle the intent."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#resolveActivity_E@", "@B_android#content#Intent#setComponent_E@"], "Permissions": [], "Description": "Retrieve the concrete component associated with the intent. When receiving an intent, this is the component that was found to best handle it (that is, yourself) and will always be non-null; in all other cases it will be null unless explicitly set.", "history": "Added in API level 1", "FullName": "public ComponentName getComponent ()"}, "getShortExtra(java.lang.String, short)": {"Returns": [["short", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["short", "short: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public short getShortExtra (String name, short defaultValue)"}, "filterHashCode()": {"Returns": [["int", "Returns the hash value of the action, data, type, class, and categories."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#filterEquals_E@"], "Permissions": [], "Description": "Generate hash code that matches semantics of filterEquals().", "history": "Added in API level 1", "FullName": "public int filterHashCode ()"}, "putExtra(java.lang.String, float[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["float[]", "float: The float array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getFloatArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, float[] value)"}, "getLongExtra(java.lang.String,long)": {"Returns": [["long", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["long", "long: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public long getLongExtra (String name, long defaultValue)"}, "getCategories()": {"Returns": [["@B_java#util#Set_E@", "The set of categories you can examine. Do not modify!"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#hasCategory_E@", "@B_android#content#Intent#addCategory_E@"], "Permissions": [], "Description": "Return the set of all categories in the intent. If there are no categories, returns NULL.", "history": "Added in API level 1", "FullName": "public Set<String> getCategories ()"}, "putExtra(java.lang.String,char)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["char", "char: The char data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, char value)"}, "putExtra(java.lang.String,long)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["long", "long: The long data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getLongExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, long value)"}, "toUri(int)": {"Returns": [["@B_java#lang#String_E@", "Returns a URI encoding URI string describing the entire contents of the Intent."]], "Parameters": [["int", "int: Additional operating flags. Value is either 0 or a combination of @B_android#content#Intent#URI_ALLOW_UNSAFE_E@, @B_android#content#Intent#URI_ANDROID_APP_SCHEME_E@, and @B_android#content#Intent#URI_INTENT_SCHEME_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert this Intent into a String holding a URI representation of it. The returned URI string has been properly URI encoded, so it can be used with @B_android#net#Uri#parse_E@. The URI contains the Intent's data as the base URI, with an additional fragment describing the action, categories, type, flags, package, component, and extras. You can convert the returned string back to an Intent with @B_android#content#Intent#getIntent_E@.", "history": "Added in API level 4", "FullName": "public String toUri (int flags)"}, "putExtra(java.lang.String,char[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["char[]", "char: The char array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, char[] value)"}, "resolveType(android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "The MIME type of this intent."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getType_E@", "@B_android#content#Intent#resolveType_E@"], "Permissions": [], "Description": "Return the MIME data type of this intent. If the type field is explicitly set, that is simply returned. Otherwise, if the data is set, the type of that data is returned. If neither fields are set, a null is returned.", "history": "Added in API level 1", "FullName": "public String resolveType (Context context)"}, "putExtra(java.lang.String,int[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["int[]", "int: The int array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getIntArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, int[] value)"}, "getBooleanArrayExtra(java.lang.String)": {"Returns": [["boolean[]", "the value of an item previously added with putExtra(), or null if no boolean array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public boolean[] getBooleanArrayExtra (String name)"}, "putExtra(java.lang.String, android.os.Parcelable)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getParcelableExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, Parcelable value)"}, "setClipData(android.content.ClipData)": {"Returns": [], "Parameters": [["@B_android#content#ClipData_E@", "ClipData: The new clip to set. May be null to clear the current clip. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a @B_android#content#ClipData_E@ associated with this Intent. This replaces any previously set ClipData. The ClipData in an intent is not used for Intent matching or other such operations. Semantically it is like extras, used to transmit additional data with the Intent. The main feature of using this over the extras for data is that @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ and @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@ will operate on any URI items included in the clip data. This is useful, in particular, if you want to transmit an Intent containing multiple content: URIs for which the recipient may not have global permission to access the content provider. If the ClipData contains items that are themselves Intents, any grant flags in those Intents will be ignored. Only the top-level flags of the main Intent are respected, and will be applied to all Uri or Intent items in the clip (or sub-items of the clip). The MIME type, label, and icon in the ClipData object are not directly used by Intent. Applications should generally rely on the MIME type of the Intent itself, not what it may find in the ClipData. A common practice is to construct a ClipData for use with an Intent with a MIME type of \"*/*\".", "history": "Added in API level 16", "FullName": "public void setClipData (ClipData clip)"}, "fillIn(android.content.Intent, int)": {"Returns": [["int", "Returns a bit mask of @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@ and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@ indicating which fields were changed. Value is either 0 or combination of FILL_IN_ACTION, FILL_IN_DATA, FILL_IN_CATEGORIES, FILL_IN_COMPONENT, FILL_IN_PACKAGE, FILL_IN_SOURCE_BOUNDS, FILL_IN_SELECTOR or FILL_IN_CLIP_DATA."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: Another Intent whose values are to be used to fill in the current one.This value must never be null."], ["int", "int: Options to control which fields can be filled in.Value is either 0 or combination of FILL_IN_ACTION, FILL_IN_DATA, FILL_IN_CATEGORIES, FILL_IN_COMPONENT, FILL_IN_PACKAGE, FILL_IN_SOURCE_BOUNDS, FILL_IN_SELECTOR or FILL_IN_CLIP_DATA."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the contents of action, as set by @B_android#content#Intent#setAction_E@. data Uri and MIME type, as set by @B_android#content#Intent#setData_E@, @B_android#content#Intent#setType_E@, or @B_android#content#Intent#setDataAndType_E@. categories, as set by @B_android#content#Intent#addCategory_E@. package, as set by @B_android#content#Intent#setPackage_E@. component, as set by @B_android#content#Intent#setComponent_E@ or related methods. source bounds, as set by @B_android#content#Intent#setSourceBounds_E@. selector, as set by @B_android#content#Intent#setSelector_E@. clip data, as set by @B_android#content#Intent#setClipData_E@. each top-level name in the associated extras. In addition, you can use the @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@ to override the restriction where the corresponding field will not be replaced if it is already set. Note: The component field will only be copied if @B_android#content#Intent#FILL_IN_COMPONENT_E@ is explicitly specified. The selector will only be copied if @B_android#content#Intent#FILL_IN_SELECTOR_E@ is explicitly specified. For example, consider Intent A with {data=\"foo\", categories=\"bar\"} and Intent B with {action=\"gotit\", data-type=\"some/thing\", categories=\"one\",\"two\"}. Calling A.fillIn(B, Intent.FILL_IN_DATA) will result in A now containing: {action=\"gotit\", data-type=\"some/thing\", categories=\"bar\"}.", "history": "added in API level 1", "FullName": "public int fillIn (Intent other, int flags)"}, "hasFileDescriptors()": {"Returns": [["boolean", "true if the Intent contains a parcelled file descriptor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the Intent's extras contain a parcelled file descriptor.", "history": "Added in API level 1", "FullName": "public boolean hasFileDescriptors ()"}, "getLongArrayExtra(java.lang.String)": {"Returns": [["long[]", "the value of an item previously added with putExtra(), or null if no long array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public long[] getLongArrayExtra (String name)"}, "putIntegerArrayListExtra(java.lang.String,java.util.ArrayList<java.lang.Integer>)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#util#ArrayList_E@", "ArrayList: The ArrayList data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getIntegerArrayListExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putIntegerArrayListExtra (String name, ArrayList<Integer> value)"}, "putExtra(java.lang.String, char)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["char", "char: The char data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, char value)"}, "putExtra(java.lang.String, java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#String_E@", "String: The String data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getStringExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, String value)"}, "putExtra(java.lang.String,boolean)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["boolean", "boolean: The boolean data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBooleanExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, boolean value)"}, "getByteArrayExtra(java.lang.String)": {"Returns": [["byte[]", "the value of an item previously added with putExtra(), or null if no byte array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public byte[] getByteArrayExtra (String name)"}, "putParcelableArrayListExtra(java.lang.String,java.util.ArrayList<?extendsandroid.os.Parcelable>)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#util#ArrayList_E@", "ArrayList: The ArrayList data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getParcelableArrayListExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putParcelableArrayListExtra (String name, ArrayList<? extends Parcelable> value)"}, "getDoubleArrayExtra(java.lang.String)": {"Returns": [["double[]", "the value of an item previously added with putExtra(), or null if no double array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public double[] getDoubleArrayExtra (String name)"}, "removeFlags(int)": {"Returns": [], "Parameters": [["int", "int: The flags to remove. Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_FROM_BACKGROUND_E@, @B_android#content#Intent#FLAG_DEBUG_LOG_RESOLUTION_E@, @B_android#content#Intent#FLAG_EXCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_INCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@, android.content.Intent.FLAG_DEBUG_TRIAGED_MISSING, android.content.Intent.FLAG_IGNORE_EPHEMERAL, @B_android#content#Intent#FLAG_ACTIVITY_MATCH_EXTERNAL_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_MULTIPLE_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_FORWARD_RESULT_E@, @B_android#content#Intent#FLAG_ACTIVITY_PREVIOUS_IS_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_DOCUMENT_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_USER_ACTION_E@, @B_android#content#Intent#FLAG_ACTIVITY_REORDER_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_ANIMATION_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_TASK_ON_HOME_E@, @B_android#content#Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCH_ADJACENT_E@, @B_android#content#Intent#FLAG_RECEIVER_REGISTERED_ONLY_E@, @B_android#content#Intent#FLAG_RECEIVER_REPLACE_PENDING_E@, @B_android#content#Intent#FLAG_RECEIVER_FOREGROUND_E@, @B_android#content#Intent#FLAG_RECEIVER_NO_ABORT_E@, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT, android.content.Intent.FLAG_RECEIVER_BOOT_UPGRADE, android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_FROM_SHELL, @B_android#content#Intent#FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS_E@, and android.content.Intent.FLAG_RECEIVER_OFFLOAD"]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setFlags_E@", "@B_android#content#Intent#getFlags_E@", "@B_android#content#Intent#addFlags_E@"], "Permissions": [], "Description": "Remove these flags from the intent.", "history": "Added in API level 26", "FullName": "public void removeFlags (int flags)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "replaceExtras(android.content.Intent)": {"Returns": [["@B_android#content#Intent_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The exact extras contained in this Intent are copied into the target intent, replacing any that were previously there. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completely replace the extras in the Intent with the extras in the given Intent.", "history": "Added in API level 3", "FullName": "public Intent replaceExtras (Intent src)"}, "setData(android.net.Uri)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri of the data this intent is now targeting. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getData_E@", "@B_android#content#Intent#setDataAndNormalize_E@", "@B_android#net#Uri#normalizeScheme_E@"], "Permissions": [], "Description": "Set the data this intent is operating on. This method automatically clears any type that was previously set by @B_android#content#Intent#setType_E@ or @B_android#content#Intent#setTypeAndNormalize_E@. Note: scheme matching in the Android framework is case-sensitive, unlike the formal RFC. As a result, you should always write your Uri with a lower case scheme, or use @B_android#net#Uri#normalizeScheme_E@ or @B_android#content#Intent#setDataAndNormalize_E@ to ensure that the scheme is converted to lower case.", "history": "Added in API level 1", "FullName": "public Intent setData (Uri data)"}, "getIntegerArrayListExtra(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "the value of an item previously added with putIntegerArrayListExtra(), or null if no ArrayList value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putIntegerArrayListExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public ArrayList<Integer> getIntegerArrayListExtra (String name)"}, "getIntentOld(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#net#URISyntaxException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static Intent getIntentOld (String uri)"}, "getSerializableExtra(java.lang.String)": {"Returns": [["@B_java#io#Serializable_E@", "the value of an item previously added with putExtra(), or null if no Serializable value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public Serializable getSerializableExtra (String name)"}, "Intent(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The Intent action, such as ACTION_VIEW."], ["@B_android#net#Uri_E@", "Uri: The Intent data URI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intent with a given action and for a given data url. Note that the action must be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION. Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC. As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.", "history": "Added in API level 1", "FullName": "public Intent (String action, Uri uri)"}, "Intent(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The Intent action, such as ACTION_VIEW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intent with a given action. All other fields (data, type, class) are null. Note that the action must be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION.", "history": "Added in API level 1", "FullName": "public Intent (String action)"}, "setSelector(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired selector Intent; set to null to not use a special selector. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a selector for this Intent. This is a modification to the kinds of things the Intent will match. If the selector is set, it will be used when trying to find entities that can handle the Intent, instead of the main contents of the Intent. This allows you build an Intent containing a generic protocol while targeting it more specifically. An example of where this may be used is with things like @B_android#content#Intent#CATEGORY_APP_BROWSER_E@. This category allows you to build an Intent that will launch the Browser application. However, the correct main entry point of an application is actually @B_android#content#Intent#ACTION_MAIN_E@ @B_android#content#Intent#CATEGORY_LAUNCHER_E@ with @B_android#content#Intent#setComponent_E@ used to specify the actual Activity to launch. If you launch the browser with something different, undesired behavior may happen if the user has previously or later launches it the normal way, since they do not match. Instead, you can build an Intent with the MAIN action (but no ComponentName yet specified) and set a selector with @B_android#content#Intent#ACTION_MAIN_E@ and @B_android#content#Intent#CATEGORY_APP_BROWSER_E@ to point it specifically to the browser activity. Setting a selector does not impact the behavior of @B_android#content#Intent#filterEquals_E@ and @B_android#content#Intent#filterHashCode_E@. This is part of the desired behavior of a selector -- it does not impact the base meaning of the Intent, just what kinds of things will be matched against it when determining who can handle it. You can not use both a selector and @B_android#content#Intent#setPackage_E@ on the same base Intent.", "history": "Added in API level 15", "FullName": "public void setSelector (Intent selector)"}, "getClipData()": {"Returns": [["@B_android#content#ClipData_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setClipData_E@"], "Permissions": [], "Description": "Return the @B_android#content#ClipData_E@ associated with this Intent. If there is none, returns null. See @B_android#content#Intent#setClipData_E@ for more information.", "history": "Added in API level 16", "FullName": "public ClipData getClipData ()"}, "makeMainSelectorActivity(java.lang.String,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns a newly created Intent that can be used to launch the activity as a main application entry."]], "Parameters": [["@B_java#lang#String_E@", "String: The action name of the Intent's selector."], ["@B_java#lang#String_E@", "String: The name of a category to add to the Intent's selector."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setSelector_E@"], "Permissions": [], "Description": "Make an Intent for the main activity of an application, without specifying a specific activity to run but giving a selector to find the activity. This results in a final Intent that is structured the same as when the application is launched from Home. For anything else that wants to launch an application in the same way, it is important that they use an Intent structured the same way, and can use this function to ensure this is the case. The returned Intent has @B_android#content#Intent#ACTION_MAIN_E@ as its action, and includes the category @B_android#content#Intent#CATEGORY_LAUNCHER_E@. This does not have @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@ set, though typically you will want to do that through @B_android#content#Intent#addFlags_E@ on the returned Intent.", "history": "Added in API level 15", "FullName": "public static Intent makeMainSelectorActivity (String selectorAction, String selectorCategory)"}, "setFlags(int)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["int", "int: The desired flags. Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_FROM_BACKGROUND_E@, @B_android#content#Intent#FLAG_DEBUG_LOG_RESOLUTION_E@, @B_android#content#Intent#FLAG_EXCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_INCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@, android.content.Intent.FLAG_DEBUG_TRIAGED_MISSING, android.content.Intent.FLAG_IGNORE_EPHEMERAL, @B_android#content#Intent#FLAG_ACTIVITY_MATCH_EXTERNAL_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_MULTIPLE_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_FORWARD_RESULT_E@, @B_android#content#Intent#FLAG_ACTIVITY_PREVIOUS_IS_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_DOCUMENT_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_USER_ACTION_E@, @B_android#content#Intent#FLAG_ACTIVITY_REORDER_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_ANIMATION_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_TASK_ON_HOME_E@, @B_android#content#Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCH_ADJACENT_E@, @B_android#content#Intent#FLAG_RECEIVER_REGISTERED_ONLY_E@, @B_android#content#Intent#FLAG_RECEIVER_REPLACE_PENDING_E@, @B_android#content#Intent#FLAG_RECEIVER_FOREGROUND_E@, @B_android#content#Intent#FLAG_RECEIVER_NO_ABORT_E@, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT, android.content.Intent.FLAG_RECEIVER_BOOT_UPGRADE, android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_FROM_SHELL, @B_android#content#Intent#FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS_E@, and android.content.Intent.FLAG_RECEIVER_OFFLOAD"]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getFlags_E@", "@B_android#content#Intent#addFlags_E@", "@B_android#content#Intent#removeFlags_E@"], "Permissions": [], "Description": "Set special flags controlling how this intent is handled. Most values here depend on the type of component being executed by the Intent, specifically the FLAG_ACTIVITY_* flags are all for use with @B_android#content#Context#startActivity_E@ and the FLAG_RECEIVER_* flags are all for use with @B_android#content#Context#sendBroadcast_E@. See the", "history": "Added in API level 1", "FullName": "public Intent setFlags (int flags)"}, "putExtra(java.lang.String, boolean)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["boolean", "boolean: The boolean data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBooleanExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, boolean value)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "putExtra(java.lang.String, boolean[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["boolean[]", "boolean: The boolean array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBooleanArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, boolean[] value)"}, "putExtra(java.lang.String,double[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["double[]", "double: The double array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getDoubleArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, double[] value)"}, "putExtra(java.lang.String, long)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["long", "long: The long data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getLongExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, long value)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "getFloatExtra(java.lang.String,float)": {"Returns": [["float", "the value of an item previously added with putExtra(), or the default value if no such item is present"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["float", "float: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public float getFloatExtra (String name, float defaultValue)"}, "putExtra(java.lang.String,java.lang.String[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#String_E@", "String: The String array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getStringArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, String[] value)"}, "setClass(android.content.Context,java.lang.Class<?>)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: A Context of the application package implementing this class. This value must never be null."], ["@B_java#lang#Class_E@", "Class: The class name to set, equivalent to setClassName(context, cls.getName()). This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setComponent_E@"], "Permissions": [], "Description": "Convenience for calling @B_android#content#Intent#setComponent_E@ with the name returned by a @B_java#lang#Class_E@ object.", "history": "Added in API level 1", "FullName": "public Intent setClass (Context packageContext, Class<?> cls)"}, "getData()": {"Returns": [["@B_android#net#Uri_E@", "The URI of the data this intent is targeting or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getScheme_E@", "@B_android#content#Intent#setData_E@"], "Permissions": [], "Description": "Retrieve data this intent is operating on. This URI specifies the name of the data; often it uses the content: scheme, specifying data in a content provider. Other schemes may be handled by specific activities, such as http: by the web browser.", "history": "Added in API level 1", "FullName": "public Uri getData ()"}, "putExtras(android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "This value will never be null."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The Bundle of extras to add to this intent. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@", "@B_android#content#Intent#removeExtra_E@"], "Permissions": [], "Description": "Add a set of extended data to the intent. The keys must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtras (Bundle extras)"}, "getByteExtra(java.lang.String, byte)": {"Returns": [["byte", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["byte", "byte: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public byte getByteExtra (String name, byte defaultValue)"}, "getCharExtra(java.lang.String,char)": {"Returns": [["char", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["char", "char: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public char getCharExtra (String name, char defaultValue)"}, "putExtras(android.content.Intent)": {"Returns": [["@B_android#content#Intent_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: Contains the extras to copy. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Copy all extras in 'src' in to this intent.", "history": "Added in API level 1", "FullName": "public Intent putExtras (Intent src)"}, "replaceExtras(android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The new set of extras in the Intent, or null to erase all extras. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completely replace the extras in the Intent with the given Bundle of extras.", "history": "Added in API level 3", "FullName": "public Intent replaceExtras (Bundle extras)"}, "getIntExtra(java.lang.String, int)": {"Returns": [["int", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["int", "int: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public int getIntExtra (String name, int defaultValue)"}, "resolveActivity(android.content.pm.PackageManager)": {"Returns": [["@B_android#content#ComponentName_E@", "Name of the component implementing an activity that can display the intent."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: The package manager with which to resolve the Intent. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setComponent_E@", "@B_android#content#Intent#getComponent_E@", "@B_android#content#Intent#resolveActivityInfo_E@"], "Permissions": [], "Description": "Return the Activity component that should be used to handle this intent. The appropriate component is determined based on the information in the intent, evaluated as follows: If @B_android#content#Intent#getComponent_E@ returns an explicit class, that is returned without any further consideration. The activity must handle the @B_android#content#Intent#CATEGORY_DEFAULT_E@ Intent category to be considered. If @B_android#content#Intent#getAction_E@ is non-NULL, the activity must handle this action. If @B_android#content#Intent#resolveType_E@ returns non-NULL, the activity must handle this type. If @B_android#content#Intent#addCategory_E@ has added any categories, the activity must handle ALL of the categories specified. If @B_android#content#Intent#getPackage_E@ is non-NULL, only activity components in that application package will be considered. If there are no activities that satisfy all of these conditions, a null string is returned. If multiple activities are found to satisfy the intent, the one with the highest priority will be used. If there are multiple activities with the same priority, the system will either pick the best activity based on user preference, or resolve to a system class that will allow the user to pick an activity and forward from there. This method is implemented simply by calling @B_android#content#pm#PackageManager#resolveActivity_E@ with the \"defaultOnly\" parameter true. This API is called for you as part of starting an activity from an intent. You do not normally need to call it yourself.", "history": "Added in API level 1", "FullName": "public ComponentName resolveActivity (PackageManager pm)"}, "getCharSequenceArrayListExtra(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "the value of an item previously added with putCharSequenceArrayListExtra, or null if no ArrayList value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putCharSequenceArrayListExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 8", "FullName": "public ArrayList<CharSequence> getCharSequenceArrayListExtra (String name)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "putExtra(java.lang.String,double)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["double", "double: The double data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getDoubleExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, double value)"}, "putExtra(java.lang.String, char[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["char[]", "char: The char array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, char[] value)"}, "putExtra(java.lang.String,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#String_E@", "String: The String data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getStringExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, String value)"}, "cloneFilter()": {"Returns": [["@B_android#content#Intent_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make a clone of only the parts of the Intent that are relevant for filter matching: the action, data, type, component, and categories.", "history": "Added in API level 1", "FullName": "public Intent cloneFilter ()"}, "putExtra(java.lang.String,java.io.Serializable)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#io#Serializable_E@", "Serializable: The Serializable data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getSerializableExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, Serializable value)"}, "getCharExtra(java.lang.String, char)": {"Returns": [["char", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["char", "char: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public char getCharExtra (String name, char defaultValue)"}, "getIdentifier()": {"Returns": [["@B_java#lang#String_E@", "The identifier of this intent or null if none is specified."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setIdentifier_E@"], "Permissions": [], "Description": "Retrieve the identifier for this Intent. If non-null, this is an arbitrary identity of the Intent to distinguish it from other Intents.", "history": "Added in API level 29", "FullName": "public String getIdentifier ()"}, "putExtra(java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_android#os#Bundle_E@", "Bundle: The Bundle data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBundleExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, Bundle value)"}, "Intent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy constructor.", "history": "Added in API level 1", "FullName": "public Intent (Intent o)"}, "setTypeAndNormalize(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The MIME type of the data being handled by this intent. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getType_E@", "@B_android#content#Intent#setData_E@", "@B_android#content#Intent#normalizeMimeType_E@"], "Permissions": [], "Description": "Normalize and set an explicit MIME data type. This is used to create intents that only specify a type and not data, for example to indicate the type of data to return. This method automatically clears any data that was previously set (for example by @B_android#content#Intent#setData_E@). The MIME type is normalized using @B_android#content#Intent#normalizeMimeType_E@ before it is set, so really this is just a convenience method for", "history": "Added in API level 16", "FullName": "public Intent setTypeAndNormalize (String type)"}, "putExtra(java.lang.String, double)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["double", "double: The double data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getDoubleExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, double value)"}, "putExtra(java.lang.String,android.os.Parcelable[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable[] data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getParcelableArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, Parcelable[] value)"}, "putExtra(java.lang.String, android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_android#os#Bundle_E@", "Bundle: The Bundle data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBundleExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, Bundle value)"}, "getParcelableArrayListExtra(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "the value of an item previously added with putParcelableArrayListExtra(), or null if no ArrayList value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putParcelableArrayListExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public ArrayList<T> getParcelableArrayListExtra (String name)"}, "putExtra(java.lang.String, java.lang.String[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#String_E@", "String: The String array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getStringArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, String[] value)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "If a type was manually set, it is returned; else null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#resolveType_E@", "@B_android#content#Intent#setType_E@"], "Permissions": [], "Description": "Retrieve any explicit MIME type included in the intent. This is usually null, as the type is determined by the intent data.", "history": "Added in API level 1", "FullName": "public String getType ()"}, "parseUri(java.lang.String, int)": {"Returns": [["@B_android#content#Intent_E@", "Intent The newly created Intent object."]], "Parameters": [["@B_java#lang#String_E@", "String: The URI to turn into an Intent."], ["int", "int: Additional processing flags.Value is either 0 or combination of URI_ALLOW_UNSAFE, URI_ANDROID_APP_SCHEME or URI_INTENT_SCHEME."]], "Throws": [["@B_java#net#URISyntaxException_E@", "Throws URISyntaxError if the basic URI syntax it bad (as parsed by the Uri class) or the Intent data within the URI is invalid."]], "SeeAlso": ["@B_android#content#Intent#toUri_E@"], "Permissions": [], "Description": "Create an intent from a URI. This URI may encode the action, category, and other intent fields, if it was returned by @B_android#content#Intent#toUri_E@. If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. The URI given here must not be relative -- that is, it must include the scheme and full path.", "history": "added in API level 4", "FullName": "public static Intent parseUri (String uri, int flags)"}, "putExtra(java.lang.String, int[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["int[]", "int: The int array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getIntArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, int[] value)"}, "setPackage(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the application package to handle the intent, or null to allow any application package. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getPackage_E@", "@B_android#content#Intent#resolveActivity_E@"], "Permissions": [], "Description": "(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to. If left to the default value of null, all components in all applications will considered. If non-null, the Intent can only match the components in the given application package.", "history": "Added in API level 4", "FullName": "public Intent setPackage (String packageName)"}, "putExtra(java.lang.String, java.lang.CharSequence)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#CharSequence_E@", "CharSequence: The CharSequence data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharSequenceExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, CharSequence value)"}, "putExtra(java.lang.String,int)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["int", "int: The integer data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getIntExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, int value)"}, "getIntArrayExtra(java.lang.String)": {"Returns": [["int[]", "the value of an item previously added with putExtra(), or null if no int array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public int[] getIntArrayExtra (String name)"}, "Intent(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class<?>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The Intent action, such as ACTION_VIEW."], ["@B_android#net#Uri_E@", "Uri: The Intent data URI."], ["@B_android#content#Context_E@", "Context: A Context of the application package implementing this class."], ["@B_java#lang#Class_E@", "Class: The component class that is to be used for the intent."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#Intent_E@", "@B_android#content#Intent#setClass_E@", "@B_android#content#Intent#setComponent_E@"], "Permissions": [], "Description": "Create an intent for a specific component with a specified action and data. This is equivalent to using @B_android#content#Intent#Intent_E@ to construct the Intent and then calling @B_android#content#Intent#setClass_E@ to set its class. Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC. As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.", "history": "Added in API level 1", "FullName": "public Intent (String action, Uri uri, Context packageContext, Class<?> cls)"}, "getDataString()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The same as @B_android#content#Intent#getData_E@, but returns the URI as an encoded String.", "history": "Added in API level 1", "FullName": "public String getDataString ()"}, "putExtra(java.lang.String,byte)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["byte", "byte: The byte data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getByteExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, byte value)"}, "removeCategory(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The category to remove."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#addCategory_E@"], "Permissions": [], "Description": "Remove a category from an intent.", "history": "Added in API level 1", "FullName": "public void removeCategory (String category)"}, "getScheme()": {"Returns": [["@B_java#lang#String_E@", "The scheme of this intent."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getData_E@"], "Permissions": [], "Description": "Return the scheme portion of the intent's data. If the data is null or does not include a scheme, null is returned. Otherwise, the scheme prefix without the final ':' is returned, i.e. \"http\". This is the same as calling getData().getScheme() (and checking for null data).", "history": "Added in API level 1", "FullName": "public String getScheme ()"}, "Intent(android.content.Context,java.lang.Class<?>)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: A Context of the application package implementing this class."], ["@B_java#lang#Class_E@", "Class: The component class that is to be used for the intent."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setClass_E@", "@B_android#content#Intent#setComponent_E@", "@B_android#content#Intent#Intent_E@"], "Permissions": [], "Description": "Create an intent for a specific component. All other fields (action, data, type, class) are null, though they can be modified later with explicit calls. This provides a convenient way to create an intent that is intended to execute a hard-coded class name, rather than relying on the system to find an appropriate class for you; see @B_android#content#Intent#setComponent_E@ for more information on the repercussions of this.", "history": "Added in API level 1", "FullName": "public Intent (Context packageContext, Class<?> cls)"}, "getSelector()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setSelector_E@"], "Permissions": [], "Description": "Return the specific selector associated with this Intent. If there is none, returns null. See @B_android#content#Intent#setSelector_E@ for more information.", "history": "Added in API level 15", "FullName": "public Intent getSelector ()"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "the map of all extras previously added with putExtra(), or null if none have been added."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a map of extended data from the intent.", "history": "Added in API level 1", "FullName": "public Bundle getExtras ()"}, "putExtra(java.lang.String, int)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["int", "int: The integer data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getIntExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, int value)"}, "putExtra(java.lang.String,short[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["short[]", "short: The short array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getShortArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, short[] value)"}, "setClassName(java.lang.String, java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package implementing the desired component.This value must never be null."], ["@B_java#lang#String_E@", "String: The name of a class inside of the application package that will be used as the component for this Intent.This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setComponent_E@", "@B_android#content#Intent#setClass_E@"], "Permissions": [], "Description": "Convenience for calling @B_android#content#Intent#setComponent_E@ with an explicit application package name and class name.", "history": "added in API level 1", "FullName": "public Intent setClassName (String packageName, String className)"}, "fillIn(android.content.Intent,int)": {"Returns": [["int", "Returns a bit mask of @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@ and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@ indicating which fields were changed. Value is either 0 or a combination of @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: Another Intent whose values are to be used to fill in the current one. This value must never be null."], ["int", "int: Options to control which fields can be filled in. Value is either 0 or a combination of @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the contents of action, as set by @B_android#content#Intent#setAction_E@. data Uri and MIME type, as set by @B_android#content#Intent#setData_E@, @B_android#content#Intent#setType_E@, or @B_android#content#Intent#setDataAndType_E@. identifier, as set by @B_android#content#Intent#setIdentifier_E@. categories, as set by @B_android#content#Intent#addCategory_E@. package, as set by @B_android#content#Intent#setPackage_E@. component, as set by @B_android#content#Intent#setComponent_E@ or related methods. source bounds, as set by @B_android#content#Intent#setSourceBounds_E@. selector, as set by @B_android#content#Intent#setSelector_E@. clip data, as set by @B_android#content#Intent#setClipData_E@. each top-level name in the associated extras. In addition, you can use the @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_IDENTIFIER_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@ to override the restriction where the corresponding field will not be replaced if it is already set. Note: The component field will only be copied if @B_android#content#Intent#FILL_IN_COMPONENT_E@ is explicitly specified. The selector will only be copied if @B_android#content#Intent#FILL_IN_SELECTOR_E@ is explicitly specified. For example, consider Intent A with {data=\"foo\", categories=\"bar\"} and Intent B with {action=\"gotit\", data-type=\"some/thing\", categories=\"one\",\"two\"}. Calling A.fillIn(B, Intent.FILL_IN_DATA) will result in A now containing: {action=\"gotit\", data-type=\"some/thing\", categories=\"bar\"}.", "history": "Added in API level 1", "FullName": "public int fillIn (Intent other, int flags)"}, "getParcelableArrayExtra(java.lang.String)": {"Returns": [["@B_android#os#Parcelable_E@", "the value of an item previously added with putExtra(), or null if no Parcelable[] value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public Parcelable[] getParcelableArrayExtra (String name)"}, "setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri of the data this intent is now targeting. This value must never be null."], ["@B_java#lang#String_E@", "String: The MIME type of the data being handled by this intent. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setType_E@", "@B_android#content#Intent#setData_E@", "@B_android#content#Intent#setDataAndType_E@", "@B_android#content#Intent#normalizeMimeType_E@", "@B_android#net#Uri#normalizeScheme_E@"], "Permissions": [], "Description": "(Usually optional) Normalize and set both the data Uri and an explicit MIME data type. This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. The data Uri and the MIME type are normalize using @B_android#net#Uri#normalizeScheme_E@ and @B_android#content#Intent#normalizeMimeType_E@ before they are set, so really this is just a convenience method for", "history": "Added in API level 16", "FullName": "public Intent setDataAndTypeAndNormalize (Uri data, String type)"}, "hasCategory(java.lang.String)": {"Returns": [["boolean", "boolean True if the intent contains the category, else false."]], "Parameters": [["@B_java#lang#String_E@", "String: The category to check."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getCategories_E@", "@B_android#content#Intent#addCategory_E@"], "Permissions": [], "Description": "Check if a category exists in the intent.", "history": "Added in API level 1", "FullName": "public boolean hasCategory (String category)"}, "setDataAndNormalize(android.net.Uri)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri of the data this intent is now targeting. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getData_E@", "@B_android#content#Intent#setType_E@", "@B_android#net#Uri#normalizeScheme_E@"], "Permissions": [], "Description": "Normalize and set the data this intent is operating on. This method automatically clears any type that was previously set (for example, by @B_android#content#Intent#setType_E@). The data Uri is normalized using @B_android#net#Uri#normalizeScheme_E@ before it is set, so really this is just a convenience method for", "history": "Added in API level 16", "FullName": "public Intent setDataAndNormalize (Uri data)"}, "getStringExtra(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of an item previously added with putExtra(), or null if no String value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public String getStringExtra (String name)"}, "getIntExtra(java.lang.String,int)": {"Returns": [["int", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["int", "int: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public int getIntExtra (String name, int defaultValue)"}, "getShortArrayExtra(java.lang.String)": {"Returns": [["short[]", "the value of an item previously added with putExtra(), or null if no short array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public short[] getShortArrayExtra (String name)"}, "putExtra(java.lang.String,byte[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["byte[]", "byte: The byte array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getByteArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, byte[] value)"}, "putExtra(java.lang.String,android.os.Parcelable)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getParcelableExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, Parcelable value)"}, "putExtra(java.lang.String,java.lang.CharSequence)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#CharSequence_E@", "CharSequence: The CharSequence data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharSequenceExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, CharSequence value)"}, "setComponent(android.content.ComponentName)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the application component to handle the intent, or null to let the system find one for you. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setClass_E@", "@B_android#content#Intent#setClassName_E@", "@B_android#content#Intent#getComponent_E@", "@B_android#content#Intent#resolveActivity_E@"], "Permissions": [], "Description": "(Usually optional) Explicitly set the component to handle the intent. If left with the default value of null, the system will determine the appropriate class to use based on the other fields (action, data, type, categories) in the Intent. If this class is defined, the specified class will always be used regardless of the other fields. You should only set this value when you know you absolutely want a specific class to be used; otherwise it is better to let the system find the appropriate class so that you will respect the installed applications and user preferences.", "history": "Added in API level 1", "FullName": "public Intent setComponent (ComponentName component)"}, "putExtra(java.lang.String,java.lang.CharSequence[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#lang#CharSequence_E@", "CharSequence: The CharSequence array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharSequenceArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 8", "FullName": "public Intent putExtra (String name, CharSequence[] value)"}, "getFloatArrayExtra(java.lang.String)": {"Returns": [["float[]", "the value of an item previously added with putExtra(), or null if no float array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public float[] getFloatArrayExtra (String name)"}, "getPackage()": {"Returns": [["@B_java#lang#String_E@", "The name of the application package for the Intent."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#resolveActivity_E@", "@B_android#content#Intent#setPackage_E@"], "Permissions": [], "Description": "Retrieve the application package name this Intent is limited to. When resolving an Intent, if non-null this limits the resolution to only components in the given application package.", "history": "Added in API level 4", "FullName": "public String getPackage ()"}, "getSourceBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the bounds of the sender of this intent, in screen coordinates. This can be used as a hint to the receiver for animations and the like. Null means that there is no source bounds.", "history": "Added in API level 7", "FullName": "public Rect getSourceBounds ()"}, "putExtra(java.lang.String, float)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["float", "float: The float data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getFloatExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, float value)"}, "getLongExtra(java.lang.String, long)": {"Returns": [["long", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["long", "long: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public long getLongExtra (String name, long defaultValue)"}, "filterEquals(android.content.Intent)": {"Returns": [["boolean", "Returns true if action, data, type, class, and categories are the same."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The other Intent to compare against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if two intents are the same for the purposes of intent resolution (filtering). That is, if their action, data, type, identity, class, and categories are the same. This does not compare any extra data included in the intents. Note that technically when actually matching against an @B_android#content#IntentFilter_E@ the identifier is ignored, while here it is directly compared for equality like the other fields.", "history": "Added in API level 1", "FullName": "public boolean filterEquals (Intent other)"}, "createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)": {"Returns": [["@B_android#content#Intent_E@", "Return a new Intent object that you can hand to @B_android#content#Context#startActivity_E@ and related methods."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that the user will be selecting an activity to perform."], ["@B_java#lang#CharSequence_E@", "CharSequence: Optional title that will be displayed in the chooser, only when the target action is not ACTION_SEND or ACTION_SEND_MULTIPLE."], ["@B_android#content#IntentSender_E@", "IntentSender: Optional IntentSender to be called when a choice is made."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for creating a @B_android#content#Intent#ACTION_CHOOSER_E@ Intent. Builds a new @B_android#content#Intent#ACTION_CHOOSER_E@ Intent that wraps the given target intent, also optionally supplying a title. If the target intent has specified @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ or @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, then these flags will also be set in the returned chooser intent, with its ClipData set appropriately: either a direct reflection of @B_android#content#Intent#getClipData_E@ if that is non-null, or a new ClipData built from @B_android#content#Intent#getData_E@. The caller may optionally supply an @B_android#content#IntentSender_E@ to receive a callback when the user makes a choice. This can be useful if the calling application wants to remember the last chosen target and surface it as a more prominent or one-touch affordance elsewhere in the UI for next time.", "history": "Added in API level 22", "FullName": "public static Intent createChooser (Intent target, CharSequence title, IntentSender sender)"}, "putExtra(java.lang.String,long[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["long[]", "long: The byte array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getLongArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, long[] value)"}, "getDoubleExtra(java.lang.String,double)": {"Returns": [["double", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["double", "double: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public double getDoubleExtra (String name, double defaultValue)"}, "setClassName(android.content.Context,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: A Context of the application package implementing this class. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of a class inside of the application package that will be used as the component for this Intent. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setComponent_E@", "@B_android#content#Intent#setClass_E@"], "Permissions": [], "Description": "Convenience for calling @B_android#content#Intent#setComponent_E@ with an explicit class name.", "history": "Added in API level 1", "FullName": "public Intent setClassName (Context packageContext, String className)"}, "getDoubleExtra(java.lang.String, double)": {"Returns": [["double", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["double", "double: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public double getDoubleExtra (String name, double defaultValue)"}, "Intent()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an empty intent.", "history": "Added in API level 1", "FullName": "public Intent ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "setIdentifier(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The identifier for this Intent. The contents of the string have no meaning to the system, except whether they are exactly the same as another identifier. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getIdentifier_E@"], "Permissions": [], "Description": "Set an identifier for this Intent. If set, this provides a unique identity for this Intent, allowing it to be unique from other Intents that would otherwise look the same. In particular, this will be used by @B_android#content#Intent#filterEquals_E@ to determine if two Intents are the same as with other fields like @B_android#content#Intent#setAction_E@. However, unlike those fields, the identifier is never used for matching against an @B_android#content#IntentFilter_E@; it is as if the identifier has not been set on the Intent. This can be used, for example, to make this Intent unique from other Intents that are otherwise the same, for use in creating a @B_android#app#PendingIntent_E@. (Be aware however that the receiver of the PendingIntent will see whatever you put in here.) The structure of this string is completely undefined by the platform, however if you are going to be exposing identifier strings across different applications you may need to define your own structure if there is no central party defining the contents of this field.", "history": "Added in API level 29", "FullName": "public Intent setIdentifier (String identifier)"}, "getStringArrayListExtra(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "the value of an item previously added with putStringArrayListExtra(), or null if no ArrayList value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putStringArrayListExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public ArrayList<String> getStringArrayListExtra (String name)"}, "Intent(java.lang.String, android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The Intent action, such as ACTION_VIEW."], ["@B_android#net#Uri_E@", "Uri: The Intent data URI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intent with a given action and for a given data url. Note that the action must be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION. Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC. As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.", "history": "added in API level 1", "FullName": "public Intent (String action, Uri uri)"}, "createChooser(android.content.Intent,java.lang.CharSequence)": {"Returns": [["@B_android#content#Intent_E@", "Return a new Intent object that you can hand to @B_android#content#Context#startActivity_E@ and related methods."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that the user will be selecting an activity to perform."], ["@B_java#lang#CharSequence_E@", "CharSequence: Optional title that will be displayed in the chooser, only when the target action is not ACTION_SEND or ACTION_SEND_MULTIPLE."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for creating a @B_android#content#Intent#ACTION_CHOOSER_E@ Intent. Builds a new @B_android#content#Intent#ACTION_CHOOSER_E@ Intent that wraps the given target intent, also optionally supplying a title. If the target intent has specified @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ or @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, then these flags will also be set in the returned chooser intent, with its ClipData set appropriately: either a direct reflection of @B_android#content#Intent#getClipData_E@ if that is non-null, or a new ClipData built from @B_android#content#Intent#getData_E@.", "history": "Added in API level 1", "FullName": "public static Intent createChooser (Intent target, CharSequence title)"}, "getFlags()": {"Returns": [["int", "The currently set flags. Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_FROM_BACKGROUND_E@, @B_android#content#Intent#FLAG_DEBUG_LOG_RESOLUTION_E@, @B_android#content#Intent#FLAG_EXCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_INCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@, android.content.Intent.FLAG_DEBUG_TRIAGED_MISSING, android.content.Intent.FLAG_IGNORE_EPHEMERAL, @B_android#content#Intent#FLAG_ACTIVITY_MATCH_EXTERNAL_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_MULTIPLE_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_FORWARD_RESULT_E@, @B_android#content#Intent#FLAG_ACTIVITY_PREVIOUS_IS_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_DOCUMENT_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_USER_ACTION_E@, @B_android#content#Intent#FLAG_ACTIVITY_REORDER_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_ANIMATION_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_TASK_ON_HOME_E@, @B_android#content#Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCH_ADJACENT_E@, @B_android#content#Intent#FLAG_RECEIVER_REGISTERED_ONLY_E@, @B_android#content#Intent#FLAG_RECEIVER_REPLACE_PENDING_E@, @B_android#content#Intent#FLAG_RECEIVER_FOREGROUND_E@, @B_android#content#Intent#FLAG_RECEIVER_NO_ABORT_E@, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT, android.content.Intent.FLAG_RECEIVER_BOOT_UPGRADE, android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_FROM_SHELL, @B_android#content#Intent#FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS_E@, and android.content.Intent.FLAG_RECEIVER_OFFLOAD"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setFlags_E@", "@B_android#content#Intent#addFlags_E@", "@B_android#content#Intent#removeFlags_E@"], "Permissions": [], "Description": "Retrieve any special flags associated with this intent. You will normally just set them with @B_android#content#Intent#setFlags_E@ and let the system take the appropriate action with them.", "history": "Added in API level 1", "FullName": "public int getFlags ()"}, "resolveType(android.content.ContentResolver)": {"Returns": [["@B_java#lang#String_E@", "The MIME type of this intent."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: A ContentResolver that can be used to determine the MIME type of the intent's data. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getType_E@", "@B_android#content#Intent#resolveType_E@"], "Permissions": [], "Description": "Return the MIME data type of this intent. If the type field is explicitly set, that is simply returned. Otherwise, if the data is set, the type of that data is returned. If neither fields are set, a null is returned.", "history": "Added in API level 1", "FullName": "public String resolveType (ContentResolver resolver)"}, "getFloatExtra(java.lang.String, float)": {"Returns": [["float", "the value of an item previously added with putExtra(), or the default value if no such item is present"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["float", "float: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public float getFloatExtra (String name, float defaultValue)"}, "getStringArrayExtra(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of an item previously added with putExtra(), or null if no String array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public String[] getStringArrayExtra (String name)"}, "getBooleanExtra(java.lang.String, boolean)": {"Returns": [["boolean", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["boolean", "boolean: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "added in API level 1", "FullName": "public boolean getBooleanExtra (String name, boolean defaultValue)"}, "makeMainActivity(android.content.ComponentName)": {"Returns": [["@B_android#content#Intent_E@", "Returns a newly created Intent that can be used to launch the activity as a main application entry."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The main activity component that this Intent will launch."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setClass_E@", "@B_android#content#Intent#setComponent_E@"], "Permissions": [], "Description": "Create an intent to launch the main (root) activity of a task. This is the Intent that is started when the application's is launched from Home. For anything else that wants to launch an application in the same way, it is important that they use an Intent structured the same way, and can use this function to ensure this is the case. The returned Intent has the given Activity component as its explicit component, @B_android#content#Intent#ACTION_MAIN_E@ as its action, and includes the category @B_android#content#Intent#CATEGORY_LAUNCHER_E@. This does not have @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@ set, though typically you will want to do that through @B_android#content#Intent#addFlags_E@ on the returned Intent.", "history": "Added in API level 11", "FullName": "public static Intent makeMainActivity (ComponentName mainActivity)"}, "readFromParcel(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readFromParcel (Parcel in)"}, "makeRestartActivityTask(android.content.ComponentName)": {"Returns": [["@B_android#content#Intent_E@", "Returns a newly created Intent that can be used to relaunch the activity's task in its root state."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The activity component that is the root of the task; this is the activity that has been published in the application's manifest as the main launcher icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make an Intent that can be used to re-launch an application's task in its base state. This is like @B_android#content#Intent#makeMainActivity_E@, but also sets the flags @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@ and @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TASK_E@.", "history": "Added in API level 11", "FullName": "public static Intent makeRestartActivityTask (ComponentName mainActivity)"}, "putExtra(java.lang.String,boolean[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["boolean[]", "boolean: The boolean array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getBooleanArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, boolean[] value)"}, "addCategory(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The desired category. This can be either one of the predefined Intent categories, or a custom category in your own namespace."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#hasCategory_E@", "@B_android#content#Intent#removeCategory_E@"], "Permissions": [], "Description": "Add a new category to the intent. Categories provide additional detail about the action the intent performs. When resolving an intent, only activities that provide all of the requested categories will be used.", "history": "Added in API level 1", "FullName": "public Intent addCategory (String category)"}, "removeExtra(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Remove extended data from the intent.", "history": "Added in API level 1", "FullName": "public void removeExtra (String name)"}, "setClassName(java.lang.String,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package implementing the desired component. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of a class inside of the application package that will be used as the component for this Intent. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setComponent_E@", "@B_android#content#Intent#setClass_E@"], "Permissions": [], "Description": "Convenience for calling @B_android#content#Intent#setComponent_E@ with an explicit application package name and class name.", "history": "Added in API level 1", "FullName": "public Intent setClassName (String packageName, String className)"}, "putExtra(java.lang.String, java.io.Serializable)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#io#Serializable_E@", "Serializable: The Serializable data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getSerializableExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, Serializable value)"}, "setExtrasClassLoader(java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: a ClassLoader, or null to use the default loader at the time of unmarshalling. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent.", "history": "Added in API level 1", "FullName": "public void setExtrasClassLoader (ClassLoader loader)"}, "putExtra(java.lang.String,short)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["short", "short: The short data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getShortExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, short value)"}, "setDataAndType(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri of the data this intent is now targeting. This value may be null."], ["@B_java#lang#String_E@", "String: The MIME type of the data being handled by this intent. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setType_E@", "@B_android#content#Intent#setData_E@", "@B_android#content#Intent#normalizeMimeType_E@", "@B_android#net#Uri#normalizeScheme_E@", "@B_android#content#Intent#setDataAndTypeAndNormalize_E@"], "Permissions": [], "Description": "(Usually optional) Set the data for the intent along with an explicit MIME data type. This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. Note: MIME type and Uri scheme matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, or use @B_android#content#Intent#normalizeMimeType_E@ or @B_android#net#Uri#normalizeScheme_E@ or @B_android#content#Intent#setDataAndTypeAndNormalize_E@ to ensure that they are converted to lower case.", "history": "Added in API level 1", "FullName": "public Intent setDataAndType (Uri data, String type)"}, "getCharArrayExtra(java.lang.String)": {"Returns": [["char[]", "the value of an item previously added with putExtra(), or null if no char array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public char[] getCharArrayExtra (String name)"}, "putExtra(java.lang.String,float)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["float", "float: The float data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getFloatExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, float value)"}, "setAction(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: An action name, such as ACTION_VIEW. Application-specific actions should be prefixed with the vendor's package name. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getAction_E@"], "Permissions": [], "Description": "Set the general action to be performed.", "history": "Added in API level 1", "FullName": "public Intent setAction (String action)"}, "resolveTypeIfNeeded(android.content.ContentResolver)": {"Returns": [["@B_java#lang#String_E@", "The MIME type of this intent, or null if it is unknown or not needed."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: A ContentResolver that can be used to determine the MIME type of the intent's data. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the MIME data type of this intent, only if it will be needed for intent resolution. This is not generally useful for application code; it is used by the frameworks for communicating with back-end system services.", "history": "Added in API level 1", "FullName": "public String resolveTypeIfNeeded (ContentResolver resolver)"}, "getCharSequenceArrayExtra(java.lang.String)": {"Returns": [["@B_java#lang#CharSequence_E@", "the value of an item previously added with putExtra(), or null if no CharSequence array value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 8", "FullName": "public CharSequence[] getCharSequenceArrayExtra (String name)"}, "putStringArrayListExtra(java.lang.String,java.util.ArrayList<java.lang.String>)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#util#ArrayList_E@", "ArrayList: The ArrayList data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getStringArrayListExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putStringArrayListExtra (String name, ArrayList<String> value)"}, "putExtra(java.lang.String, long[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["long[]", "long: The byte array data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getLongArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, long[] value)"}, "setType(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The MIME type of the data being handled by this intent. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#getType_E@", "@B_android#content#Intent#setTypeAndNormalize_E@", "@B_android#content#Intent#setDataAndType_E@", "@B_android#content#Intent#normalizeMimeType_E@"], "Permissions": [], "Description": "Set an explicit MIME data type. This is used to create intents that only specify a type and not data, for example to indicate the type of data to return. This method automatically clears any data that was previously set (for example by @B_android#content#Intent#setData_E@). Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types. As a result, you should always write your MIME types with lower case letters, or use @B_android#content#Intent#normalizeMimeType_E@ or @B_android#content#Intent#setTypeAndNormalize_E@ to ensure that it is converted to lower case.", "history": "Added in API level 1", "FullName": "public Intent setType (String type)"}, "putExtra(java.lang.String, short)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["short", "short: The short data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getShortExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, short value)"}, "getCharSequenceExtra(java.lang.String)": {"Returns": [["@B_java#lang#CharSequence_E@", "the value of an item previously added with putExtra(), or null if no CharSequence value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public CharSequence getCharSequenceExtra (String name)"}, "setSourceBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the bounds of the sender of this intent, in screen coordinates. This can be used as a hint to the receiver for animations and the like. Null means that there is no source bounds.", "history": "Added in API level 7", "FullName": "public void setSourceBounds (Rect r)"}, "addFlags(int)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["int", "int: The new flags to set. Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_FROM_BACKGROUND_E@, @B_android#content#Intent#FLAG_DEBUG_LOG_RESOLUTION_E@, @B_android#content#Intent#FLAG_EXCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_INCLUDE_STOPPED_PACKAGES_E@, @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@, android.content.Intent.FLAG_DEBUG_TRIAGED_MISSING, android.content.Intent.FLAG_IGNORE_EPHEMERAL, @B_android#content#Intent#FLAG_ACTIVITY_MATCH_EXTERNAL_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_MULTIPLE_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_FORWARD_RESULT_E@, @B_android#content#Intent#FLAG_ACTIVITY_PREVIOUS_IS_TOP_E@, @B_android#content#Intent#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NEW_DOCUMENT_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_USER_ACTION_E@, @B_android#content#Intent#FLAG_ACTIVITY_REORDER_TO_FRONT_E@, @B_android#content#Intent#FLAG_ACTIVITY_NO_ANIMATION_E@, @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TASK_E@, @B_android#content#Intent#FLAG_ACTIVITY_TASK_ON_HOME_E@, @B_android#content#Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS_E@, @B_android#content#Intent#FLAG_ACTIVITY_LAUNCH_ADJACENT_E@, @B_android#content#Intent#FLAG_RECEIVER_REGISTERED_ONLY_E@, @B_android#content#Intent#FLAG_RECEIVER_REPLACE_PENDING_E@, @B_android#content#Intent#FLAG_RECEIVER_FOREGROUND_E@, @B_android#content#Intent#FLAG_RECEIVER_NO_ABORT_E@, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT, android.content.Intent.FLAG_RECEIVER_BOOT_UPGRADE, android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND, android.content.Intent.FLAG_RECEIVER_FROM_SHELL, @B_android#content#Intent#FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS_E@, and android.content.Intent.FLAG_RECEIVER_OFFLOAD"]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setFlags_E@", "@B_android#content#Intent#getFlags_E@", "@B_android#content#Intent#removeFlags_E@"], "Permissions": [], "Description": "Add additional flags to the intent (or with existing flags value).", "history": "Added in API level 1", "FullName": "public Intent addFlags (int flags)"}, "putExtra(java.lang.String,float[])": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["float[]", "float: The float array data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getFloatArrayExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 1", "FullName": "public Intent putExtra (String name, float[] value)"}, "putExtra(java.lang.String, byte)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["byte", "byte: The byte data value."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getByteExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "added in API level 1", "FullName": "public Intent putExtra (String name, byte value)"}, "normalizeMimeType(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "normalized MIME data type, or null if the input was null"]], "Parameters": [["@B_java#lang#String_E@", "String: MIME data type to normalize This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setType_E@", "@B_android#content#Intent#setTypeAndNormalize_E@"], "Permissions": [], "Description": "Normalize a MIME data type. A normalized MIME type has white-space trimmed, content-type parameters removed, and is lower-case. This aligns the type with Android best practices for intent filtering. For example, \"text/plain; charset=utf-8\" becomes \"text/plain\". \"text/x-vCard\" becomes \"text/x-vcard\". All MIME types received from outside Android (such as user input, or external sources like Bluetooth, NFC, or the Internet) should be normalized before they are used to create an Intent.", "history": "Added in API level 16", "FullName": "public static String normalizeMimeType (String type)"}, "parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)": {"Returns": [["@B_android#content#Intent_E@", "An Intent object matching the XML data. This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The Resources to use when inflating resources. This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: The XML parser pointing at an \"intent\" tag. This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The AttributeSet interface for retrieving extended attribute data at the current parser location."]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If there was an XML parsing error."], ["@B_java#io#IOException_E@", "If there was an I/O error."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the \"intent\" element (and its children) from XML and instantiates an Intent object. The given XML parser should be located at the tag where parsing should start (often named \"intent\"), from which the basic action, data, type, and package and class name will be retrieved. The function will then parse in to any child elements, looking for", "history": "Added in API level 1", "FullName": "public static Intent parseIntent (Resources resources, XmlPullParser parser, AttributeSet attrs)"}, "parseUri(java.lang.String,int)": {"Returns": [["@B_android#content#Intent_E@", "Intent The newly created Intent object."]], "Parameters": [["@B_java#lang#String_E@", "String: The URI to turn into an Intent."], ["int", "int: Additional processing flags. Value is either 0 or a combination of @B_android#content#Intent#URI_ALLOW_UNSAFE_E@, @B_android#content#Intent#URI_ANDROID_APP_SCHEME_E@, and @B_android#content#Intent#URI_INTENT_SCHEME_E@"]], "Throws": [["@B_java#net#URISyntaxException_E@", "Throws URISyntaxError if the basic URI syntax it bad (as parsed by the Uri class) or the Intent data within the URI is invalid."]], "SeeAlso": ["@B_android#content#Intent#toUri_E@"], "Permissions": [], "Description": "Create an intent from a URI. This URI may encode the action, category, and other intent fields, if it was returned by @B_android#content#Intent#toUri_E@. If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. The URI given here must not be relative -- that is, it must include the scheme and full path.", "history": "Added in API level 4", "FullName": "public static Intent parseUri (String uri, int flags)"}, "setDataAndType(android.net.Uri, java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement.This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri of the data this intent is now targeting.This value may be null."], ["@B_java#lang#String_E@", "String: The MIME type of the data being handled by this intent.This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setType_E@", "@B_android#content#Intent#setData_E@", "@B_android#content#Intent#normalizeMimeType_E@", "@B_android#net#Uri#normalizeScheme_E@", "@B_android#content#Intent#setDataAndTypeAndNormalize_E@"], "Permissions": [], "Description": "(Usually optional) Set the data for the intent along with an explicit MIME data type. This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. Note: MIME type and Uri scheme matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, or use @B_android#content#Intent#normalizeMimeType_E@ or @B_android#net#Uri#normalizeScheme_E@ or @B_android#content#Intent#setDataAndTypeAndNormalize_E@ to ensure that they are converted to lower case.", "history": "added in API level 1", "FullName": "public Intent setDataAndType (Uri data, String type)"}, "getBooleanExtra(java.lang.String,boolean)": {"Returns": [["boolean", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["boolean", "boolean: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public boolean getBooleanExtra (String name, boolean defaultValue)"}, "getIntent(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#net#URISyntaxException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#content#Intent#parseUri_E@ instead. Call @B_android#content#Intent#parseUri_E@ with 0 flags.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static Intent getIntent (String uri)"}, "putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList<java.lang.CharSequence>)": {"Returns": [["@B_android#content#Intent_E@", "Returns the same Intent object, for chaining multiple calls into a single statement. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the extra data, with package prefix."], ["@B_java#util#ArrayList_E@", "ArrayList: The ArrayList data value. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtras_E@", "@B_android#content#Intent#removeExtra_E@", "@B_android#content#Intent#getCharSequenceArrayListExtra_E@"], "Permissions": [], "Description": "Add extended data to the intent. The name must include a package prefix, for example the app com.android.contacts would use names like \"com.android.contacts.ShowAll\".", "history": "Added in API level 8", "FullName": "public Intent putCharSequenceArrayListExtra (String name, ArrayList<CharSequence> value)"}, "getShortExtra(java.lang.String,short)": {"Returns": [["short", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["short", "short: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public short getShortExtra (String name, short defaultValue)"}, "getParcelableExtra(java.lang.String)": {"Returns": [["T", "the value of an item previously added with putExtra(), or null if no Parcelable value was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public T getParcelableExtra (String name)"}, "getByteExtra(java.lang.String,byte)": {"Returns": [["byte", "the value of an item previously added with putExtra(), or the default value if none was found."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired item."], ["byte", "byte: the value to be returned if no value of the desired type is stored with the given name."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent#putExtra_E@"], "Permissions": [], "Description": "Retrieve extended data from the intent.", "history": "Added in API level 1", "FullName": "public byte getByteExtra (String name, byte defaultValue)"}}, "Inheritance": [], "ClassName": "android.content.Intent", "ClassDesc": "An intent is an abstract description of an operation to be performed. It can be used with @B_android#content#Context#startActivity_E@ to launch an @B_android#app#Activity_E@, @B_android#content#Context#sendBroadcast_E@ to send it to any interested @B_android#content#BroadcastReceiver_E@ components, and @B_android#content#Context#startService_E@ or @B_android#content#Context#bindService_E@ to communicate with a background @B_android#app#Service_E@. An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed. The primary pieces of information in an intent are: @B_android#content#Intent#ACTION_VIEW_E@, @B_android#content#Intent#ACTION_EDIT_E@, @B_android#content#Intent#ACTION_MAIN_E@, etc. @B_android#net#Uri_E@. Some examples of action/data pairs are: In addition to these primary attributes, there are a number of secondary attributes that you can also include with an intent: @B_android#content#Intent#CATEGORY_LAUNCHER_E@ means it should appear in the Launcher as a top-level application, while @B_android#content#Intent#CATEGORY_ALTERNATIVE_E@ means it should be included in a list of alternative actions the user can perform on a piece of data. @B_android#os#Bundle_E@ of any additional information. This can be used to provide extended information to the component. For example, if we have a action to send an e-mail message, we could also include extra pieces of data here to supply a subject, body, etc. Here are some examples of other operations you can specify as intents using these additional parameters: @B_android#content#ContentResolver#openInputStream_E@, allowing the user to pick one of them and then some data inside of it and returning the resulting URI to the caller. This can be used, for example, in an e-mail application to allow the user to pick some data to include as an attachment. There are a variety of standard Intent action and category constants defined in the Intent class, but applications can also define their own. These strings use Java-style scoping, to ensure they are unique -- for example, the standard @B_android#content#Intent#ACTION_VIEW_E@ is called \"android.intent.action.VIEW\". Put together, the set of actions, data types, categories, and extra data defines a language for the system allowing for the expression of phrases such as \"call john smith's cell\". As applications are added to the system, they can extend this language by adding new actions, types, and categories, or they can modify the behavior of existing phrases by supplying their own activities that handle them. There are two primary forms of intents you will use. @B_android#content#Intent#setComponent_E@ or @B_android#content#Intent#setClass_E@), which provides the exact class to be run. Often these will not include any other information, simply being a way for an application to launch various internal activities it has as the user interacts with the application. When using implicit intents, given such an arbitrary intent we need to know what to do with it. This is handled by the process of Intent resolution, which maps an Intent to an @B_android#app#Activity_E@, @B_android#content#BroadcastReceiver_E@, or @B_android#app#Service_E@ (or sometimes two or more activities/receivers) that can handle it. The intent resolution mechanism basically revolves around matching an Intent against all of the <intent-filter> descriptions in the installed application packages. (Plus, in the case of broadcasts, any @B_android#content#BroadcastReceiver_E@ objects explicitly registered with @B_android#content#Context#registerReceiver_E@.) More details on this can be found in the documentation on the @B_android#content#IntentFilter_E@ class. There are three pieces of information in the Intent that are used for resolution: the action, type, and category. Using this information, a query is done on the @B_android#content#pm#PackageManager_E@ for a component that can handle the intent. The appropriate component is determined based on the intent information supplied in the AndroidManifest.xml file as follows: The The For data that is not a content: URI and where no explicit type is included in the Intent, instead the http: or mailto:) is considered. Again like the action, if we are matching a scheme it must be listed by the component as one it can handle. The all be listed by the activity as categories it handles. That is, if you include the categories @B_android#content#Intent#CATEGORY_LAUNCHER_E@ and @B_android#content#Intent#CATEGORY_ALTERNATIVE_E@, then you will only resolve to components with an intent that lists both of those categories. Activities will very often need to support the @B_android#content#Intent#CATEGORY_DEFAULT_E@ so that they can be found by @B_android#content#Context#startActivity_E@. For example, consider the Note Pad sample application that allows a user to browse through a list of notes data and view details about individual items. Text in italics indicates places where you would replace a name with one specific to your own package. The first activity, com.android.notepad.NotesList, serves as our main entry into the app. It can do three things as described by its three intent templates: Given these capabilities, the following intents will resolve to the NotesList activity: The second activity, com.android.notepad.NoteEditor, shows the user a single note entry and allows them to edit it. It can do two things as described by its two intent templates: Given these capabilities, the following intents will resolve to the NoteEditor activity: The last activity, com.android.notepad.TitleEditor, allows the user to edit the title of a note. This could be implemented as a class that the application directly invokes (by explicitly setting its component in the Intent), but here we show a way you can publish alternative operations on existing data: In the single intent template here, we have created our own private action called com.android.notepad.action.EDIT_TITLE which means to edit the title of a note. It must be invoked on a specific note (data type vnd.android.cursor.item/vnd.google.note) like the previous view and edit actions, but here displays and edits the title contained in the note data. In addition to supporting the default category as usual, our title editor also supports two other standard categories: ALTERNATIVE and SELECTED_ALTERNATIVE. Implementing these categories allows others to find the special action it provides without directly knowing about it, through the @B_android#content#pm#PackageManager#queryIntentActivityOptions_E@ method, or more often to build dynamic menu items with @B_android#view#Menu#addIntentOptions_E@. Note that in the intent template here was also supply an explicit name for the template (via android:label=\"@string/resolve_title\") to better control what the user sees when presented with this activity as an alternative action to the data they are viewing. Given these capabilities, the following intent will resolve to the TitleEditor activity: These are the current standard actions that Intent defines for launching activities (usually through @B_android#content#Context#startActivity_E@. The most important, and by far most frequently used, are @B_android#content#Intent#ACTION_MAIN_E@ and @B_android#content#Intent#ACTION_EDIT_E@. @B_android#content#Intent#ACTION_MAIN_E@ @B_android#content#Intent#ACTION_VIEW_E@ @B_android#content#Intent#ACTION_ATTACH_DATA_E@ @B_android#content#Intent#ACTION_EDIT_E@ @B_android#content#Intent#ACTION_PICK_E@ @B_android#content#Intent#ACTION_CHOOSER_E@ @B_android#content#Intent#ACTION_GET_CONTENT_E@ @B_android#content#Intent#ACTION_DIAL_E@ @B_android#content#Intent#ACTION_CALL_E@ @B_android#content#Intent#ACTION_SEND_E@ @B_android#content#Intent#ACTION_SENDTO_E@ @B_android#content#Intent#ACTION_ANSWER_E@ @B_android#content#Intent#ACTION_INSERT_E@ @B_android#content#Intent#ACTION_DELETE_E@ @B_android#content#Intent#ACTION_RUN_E@ @B_android#content#Intent#ACTION_SYNC_E@ @B_android#content#Intent#ACTION_PICK_ACTIVITY_E@ @B_android#content#Intent#ACTION_SEARCH_E@ @B_android#content#Intent#ACTION_WEB_SEARCH_E@ @B_android#content#Intent#ACTION_FACTORY_TEST_E@ These are the current standard actions that Intent defines for receiving broadcasts (usually through @B_android#content#Context#registerReceiver_E@ or a <receiver> tag in a manifest). @B_android#content#Intent#ACTION_TIME_TICK_E@ @B_android#content#Intent#ACTION_TIME_CHANGED_E@ @B_android#content#Intent#ACTION_TIMEZONE_CHANGED_E@ @B_android#content#Intent#ACTION_BOOT_COMPLETED_E@ @B_android#content#Intent#ACTION_PACKAGE_ADDED_E@ @B_android#content#Intent#ACTION_PACKAGE_CHANGED_E@ @B_android#content#Intent#ACTION_PACKAGE_REMOVED_E@ @B_android#content#Intent#ACTION_PACKAGE_RESTARTED_E@ @B_android#content#Intent#ACTION_PACKAGE_DATA_CLEARED_E@ @B_android#content#Intent#ACTION_PACKAGES_SUSPENDED_E@ @B_android#content#Intent#ACTION_PACKAGES_UNSUSPENDED_E@ @B_android#content#Intent#ACTION_UID_REMOVED_E@ @B_android#content#Intent#ACTION_BATTERY_CHANGED_E@ @B_android#content#Intent#ACTION_POWER_CONNECTED_E@ @B_android#content#Intent#ACTION_POWER_DISCONNECTED_E@ @B_android#content#Intent#ACTION_SHUTDOWN_E@ These are the current standard categories that can be used to further clarify an Intent via @B_android#content#Intent#addCategory_E@. @B_android#content#Intent#CATEGORY_DEFAULT_E@ @B_android#content#Intent#CATEGORY_BROWSABLE_E@ @B_android#content#Intent#CATEGORY_TAB_E@ @B_android#content#Intent#CATEGORY_ALTERNATIVE_E@ @B_android#content#Intent#CATEGORY_SELECTED_ALTERNATIVE_E@ @B_android#content#Intent#CATEGORY_LAUNCHER_E@ @B_android#content#Intent#CATEGORY_INFO_E@ @B_android#content#Intent#CATEGORY_HOME_E@ @B_android#content#Intent#CATEGORY_PREFERENCE_E@ @B_android#content#Intent#CATEGORY_TEST_E@ @B_android#content#Intent#CATEGORY_CAR_DOCK_E@ @B_android#content#Intent#CATEGORY_DESK_DOCK_E@ @B_android#content#Intent#CATEGORY_LE_DESK_DOCK_E@ @B_android#content#Intent#CATEGORY_HE_DESK_DOCK_E@ @B_android#content#Intent#CATEGORY_CAR_MODE_E@ @B_android#content#Intent#CATEGORY_APP_MARKET_E@ @B_android#content#Intent#CATEGORY_VR_HOME_E@ These are the current standard fields that can be used as extra data via @B_android#content#Intent#putExtra_E@. @B_android#content#Intent#EXTRA_ALARM_COUNT_E@ @B_android#content#Intent#EXTRA_BCC_E@ @B_android#content#Intent#EXTRA_CC_E@ @B_android#content#Intent#EXTRA_CHANGED_COMPONENT_NAME_E@ @B_android#content#Intent#EXTRA_DATA_REMOVED_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_HE_DESK_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_LE_DESK_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_CAR_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_DESK_E@ @B_android#content#Intent#EXTRA_DOCK_STATE_UNDOCKED_E@ @B_android#content#Intent#EXTRA_DONT_KILL_APP_E@ @B_android#content#Intent#EXTRA_EMAIL_E@ @B_android#content#Intent#EXTRA_INITIAL_INTENTS_E@ @B_android#content#Intent#EXTRA_INTENT_E@ @B_android#content#Intent#EXTRA_KEY_EVENT_E@ @B_android#content#Intent#EXTRA_ORIGINATING_URI_E@ @B_android#content#Intent#EXTRA_PHONE_NUMBER_E@ @B_android#content#Intent#EXTRA_REFERRER_E@ @B_android#content#Intent#EXTRA_REMOTE_INTENT_TOKEN_E@ @B_android#content#Intent#EXTRA_REPLACING_E@ @B_android#content#Intent#EXTRA_SHORTCUT_ICON_E@ @B_android#content#Intent#EXTRA_SHORTCUT_ICON_RESOURCE_E@ @B_android#content#Intent#EXTRA_SHORTCUT_INTENT_E@ @B_android#content#Intent#EXTRA_STREAM_E@ @B_android#content#Intent#EXTRA_SHORTCUT_NAME_E@ @B_android#content#Intent#EXTRA_SUBJECT_E@ @B_android#content#Intent#EXTRA_TEMPLATE_E@ @B_android#content#Intent#EXTRA_TEXT_E@ @B_android#content#Intent#EXTRA_TITLE_E@ @B_android#content#Intent#EXTRA_UID_E@ These are the possible flags that can be used in the Intent via @B_android#content#Intent#setFlags_E@ and @B_android#content#Intent#addFlags_E@. See @B_android#content#Intent#setFlags_E@ for a list of all possible flags."}