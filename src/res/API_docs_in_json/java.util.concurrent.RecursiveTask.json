{"Functions": {"compute()": {"Returns": [["V", "the result of the computation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The main computation performed by this task.", "history": "Added in API level 21", "FullName": "protected abstract V compute ()"}, "exec()": {"Returns": [["boolean", "true if this task is known to have completed normally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements execution conventions for RecursiveTask.", "history": "Added in API level 21", "FullName": "protected final boolean exec ()"}, "RecursiveTask()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public RecursiveTask ()"}, "setRawResult(V)": {"Returns": [], "Parameters": [["V", "V: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forces the given value to be returned as a result. This method is designed to support extensions, and should not in general be called otherwise.", "history": "Added in API level 21", "FullName": "protected final void setRawResult (V value)"}, "getRawResult()": {"Returns": [["V", "the result, or null if not completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result that would be returned by @B_java#util#concurrent#ForkJoinTask#join_E@, even if this task completed abnormally, or null if this task is not known to have been completed. This method is designed to aid debugging, as well as to support extensions. Its use in any other context is discouraged.", "history": "Added in API level 21", "FullName": "public final V getRawResult ()"}}, "Inheritance": ["@B_java#util#concurrent#ForkJoinTask_E@"], "ClassName": "java.util.concurrent.RecursiveTask<V>", "ClassDesc": "A recursive result-bearing @B_java#util#concurrent#ForkJoinTask_E@. For a classic example, here is a task computing Fibonacci numbers:"}