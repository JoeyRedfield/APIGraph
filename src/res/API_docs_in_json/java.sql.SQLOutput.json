{"Functions": {"writeAsciiStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a stream of ASCII characters.", "history": "Added in API level 1", "FullName": "public abstract void writeAsciiStream (InputStream x)"}, "writeNString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a String in the Java programming language. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the stream.", "history": "Added in API level 9", "FullName": "public abstract void writeNString (String x)"}, "writeBytes(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as an array of bytes. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeBytes (byte[] x)"}, "writeLong(long)": {"Returns": [], "Parameters": [["long", "long: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java long. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeLong (long x)"}, "writeClob(java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#sql#Clob_E@", "Clob: a Clob object representing data of an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL CLOB value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeClob (Clob x)"}, "writeArray(java.sql.Array)": {"Returns": [], "Parameters": [["@B_java#sql#Array_E@", "Array: an Array object representing data of an SQL ARRAY type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL ARRAY value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeArray (Array x)"}, "writeString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeString (String x)"}, "writeShort(short)": {"Returns": [], "Parameters": [["short", "short: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java short. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeShort (short x)"}, "writeByte(byte)": {"Returns": [], "Parameters": [["byte", "byte: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java byte. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeByte (byte x)"}, "writeBoolean(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java boolean. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeBoolean (boolean x)"}, "writeSQLXML(java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object representing data of an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object or if there is an error processing the XML value. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL XML value to the stream.", "history": "Added in API level 9", "FullName": "public abstract void writeSQLXML (SQLXML x)"}, "writeInt(int)": {"Returns": [], "Parameters": [["int", "int: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java int. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeInt (int x)"}, "writeBigDecimal(java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a java.math.BigDecimal object. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeBigDecimal (BigDecimal x)"}, "writeBinaryStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a stream of uninterpreted bytes.", "history": "Added in API level 1", "FullName": "public abstract void writeBinaryStream (InputStream x)"}, "writeTimestamp(java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#sql#Timestamp_E@", "Timestamp: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a java.sql.Timestamp object. Writes the next attribute to the stream as a java.sql.Date object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeTimestamp (Timestamp x)"}, "writeTime(java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#sql#Time_E@", "Time: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a java.sql.Time object. Writes the next attribute to the stream as a java.sql.Date object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeTime (Time x)"}, "writeNClob(java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#sql#NClob_E@", "NClob: a NClob object representing data of an SQL NCLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL NCLOB value to the stream.", "history": "Added in API level 9", "FullName": "public abstract void writeNClob (NClob x)"}, "writeStruct(java.sql.Struct)": {"Returns": [], "Parameters": [["@B_java#sql#Struct_E@", "Struct: a Struct object representing data of an SQL structured type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL structured type value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeStruct (Struct x)"}, "writeDouble(double)": {"Returns": [], "Parameters": [["double", "double: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java double. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeDouble (double x)"}, "writeDate(java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#sql#Date_E@", "Date: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a java.sql.Date object. Writes the next attribute to the stream as a java.sql.Date object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeDate (Date x)"}, "writeCharacterStream(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a stream of Unicode characters.", "history": "Added in API level 1", "FullName": "public abstract void writeCharacterStream (Reader x)"}, "writeURL(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: a java.net.URL object representing the data of SQL DATALINK type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a SQL DATALINK value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeURL (URL x)"}, "writeRef(java.sql.Ref)": {"Returns": [], "Parameters": [["@B_java#sql#Ref_E@", "Ref: a Ref object representing data of an SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL REF value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeRef (Ref x)"}, "writeFloat(float)": {"Returns": [], "Parameters": [["float", "float: the value to pass to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the next attribute to the stream as a Java float. Writes the next attribute to the stream as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract void writeFloat (float x)"}, "writeObject(java.sql.SQLData)": {"Returns": [], "Parameters": [["@B_java#sql#SQLData_E@", "SQLData: the object representing data of an SQL structured or distinct type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes to the stream the data contained in the given SQLData object. When the SQLData object is null, this method writes an SQL NULL to the stream. Otherwise, it calls the SQLData.writeSQL method of the given object, which writes the object's attributes to the stream. The implementation of the method SQLData.writeSQ calls the appropriate SQLOutput writer method(s) for writing each of the object's attributes in order. The attributes must be read from an SQLInput input stream and written to an SQLOutput output stream in the same order in which they were listed in the SQL definition of the user-defined type.", "history": "Added in API level 1", "FullName": "public abstract void writeObject (SQLData x)"}, "writeRowId(java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#sql#RowId_E@", "RowId: a RowId object representing data of an SQL ROWID value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL ROWID value to the stream.", "history": "Added in API level 9", "FullName": "public abstract void writeRowId (RowId x)"}, "writeBlob(java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#sql#Blob_E@", "Blob: a Blob object representing data of an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an SQL BLOB value to the stream.", "history": "Added in API level 1", "FullName": "public abstract void writeBlob (Blob x)"}}, "Inheritance": [], "ClassName": "java.sql.SQLOutput", "ClassDesc": "The output stream for writing the attributes of a user-defined type back to the database. This interface, used only for custom mapping, is used by the driver, and its methods are never directly invoked by a programmer. When an object of a class implementing the interface SQLData is passed as an argument to an SQL statement, the JDBC driver calls the method SQLData.getSQLType to determine the kind of SQL datum being passed to the database. The driver then creates an instance of SQLOutput and passes it to the method SQLData.writeSQL. The method writeSQL in turn calls the appropriate SQLOutput writeBoolean, writeCharacterStream, and so on) to write data from the SQLData object to the SQLOutput output stream as the representation of an SQL user-defined type."}