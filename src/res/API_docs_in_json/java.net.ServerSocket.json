{"Functions": {"accept()": {"Returns": [["@B_java#net#Socket_E@", "the new Socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when waiting for a connection."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkAccept method doesn't allow the operation."], ["@B_java#net#SocketTimeoutException_E@", "if a timeout was previously set with setSoTimeout and the timeout has been reached."], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "if this socket has an associated channel, the channel is in non-blocking mode, and there is no connection ready to be accepted"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkAccept_E@"], "Permissions": [], "Description": "Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made. A new Socket s is created and, if there is a security manager, the security manager's checkAccept method is called with s.getInetAddress().getHostAddress() and s.getPort() as its arguments to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public Socket accept ()"}, "setSoTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the specified timeout, in milliseconds"]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#ServerSocket#getSoTimeout_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_TIMEOUT_E@ with the specified timeout, in milliseconds. With this option set to a non-zero timeout, a call to accept() for this ServerSocket will block for only this amount of time. If the timeout expires, a > 0. A timeout of zero is interpreted as an infinite timeout.", "history": "Added in API level 1", "FullName": "public void setSoTimeout (int timeout)"}, "setPerformancePreferences(int,int,int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this ServerSocket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been bound will have no effect. This implies that in order to use this capability requires the socket to be created with the no-argument constructor.", "history": "Added in API level 1", "FullName": "public void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "getInetAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the address to which this socket is bound, or the loopback address if denied by the security manager, or null if the socket is unbound."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Returns the local address of this server socket. If the socket was bound prior to being @B_java#net#ServerSocket#close_E@, then this method will continue to return the local address after the socket is closed. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, the @B_java#net#InetAddress#getLoopbackAddress_E@ address is returned.", "history": "Added in API level 1", "FullName": "public InetAddress getInetAddress ()"}, "bind(java.net.SocketAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The IP address and port number to bind to."], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if the bind operation fails, or if the socket is already bound."], ["@B_java#lang#SecurityException_E@", "if a SecurityManager is present and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the ServerSocket to a specific address (IP address and port number). If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "added in API level 1", "FullName": "public void bind (SocketAddress endpoint, int backlog)"}, "ServerSocket(int)": {"Returns": [], "Parameters": [["int", "int: the port number, or 0 to use a port number that is automatically allocated."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when opening the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#net#ServerSocket#setSocketFactory_E@", "@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Creates a server socket, bound to the specified port. A port number of 0 means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling @B_java#net#ServerSocket#getLocalPort_E@. The maximum queue length for incoming connection indications (a request to connect) is set to 50. If a connection indication arrives when the queue is full, the connection is refused. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public ServerSocket (int port)"}, "bind(java.net.SocketAddress)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The IP address and port number to bind to."]], "Throws": [["@B_java#io#IOException_E@", "if the bind operation fails, or if the socket is already bound."], ["@B_java#lang#SecurityException_E@", "if a SecurityManager is present and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the ServerSocket to a specific address (IP address and port number). If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket.", "history": "Added in API level 1", "FullName": "public void bind (SocketAddress endpoint)"}, "ServerSocket(int,int)": {"Returns": [], "Parameters": [["int", "int: the port number, or 0 to use a port number that is automatically allocated."], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when opening the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#net#ServerSocket#setSocketFactory_E@", "@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Creates a server socket and binds it to the specified local port number, with the specified backlog. A port number of 0 means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling @B_java#net#ServerSocket#getLocalPort_E@. The maximum queue length for incoming connection indications (a request to connect) is set to the backlog parameter. If a connection indication arrives when the queue is full, the connection is refused. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "Added in API level 1", "FullName": "public ServerSocket (int port, int backlog)"}, "ServerSocket(int,int,java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the port number, or 0 to use a port number that is automatically allocated."], ["int", "int: requested maximum length of the queue of incoming connections."], ["@B_java#net#InetAddress_E@", "InetAddress: the local InetAddress the server will bind to"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#io#IOException_E@", "if an I/O error occurs when opening the socket."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#SocketOptions_E@", "@B_java#net#SocketImpl_E@", "@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Create a server with the specified port, listen backlog, and local IP address to bind to. The 0 means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling @B_java#net#ServerSocket#getLocalPort_E@. If there is a security manager, this method calls its checkListen method with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "Added in API level 1", "FullName": "public ServerSocket (int port, int backlog, InetAddress bindAddr)"}, "setReceiveBufferSize(int)": {"Returns": [], "Parameters": [["int", "int: the size to which to set the receive buffer size. This value must be greater than 0."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."], ["@B_java#lang#IllegalArgumentException_E@", "if the value is 0 or is negative."]], "SeeAlso": ["@B_java#net#ServerSocket#getReceiveBufferSize_E@"], "Permissions": [], "Description": "Sets a default proposed value for the @B_java#net#SocketOptions#SO_RCVBUF_E@ option for sockets accepted from this ServerSocket. The value actually set in the accepted socket must be determined by calling @B_java#net#Socket#getReceiveBufferSize_E@ after the socket is returned by @B_java#net#ServerSocket#accept_E@. The value of @B_java#net#SocketOptions#SO_RCVBUF_E@ is used both to set the size of the internal socket receive buffer, and to set the size of the TCP receive window that is advertized to the remote peer. It is possible to change the value subsequently, by calling @B_java#net#Socket#setReceiveBufferSize_E@. However, if the application wishes to allow a receive window larger than 64K bytes, as defined by RFC1323 then the proposed value must be set in the ServerSocket Failure to do this will not cause an error, and the buffer size may be set to the requested value but the TCP receive window in sockets accepted from this ServerSocket will be no larger than 64K bytes.", "history": "Added in API level 1", "FullName": "public void setReceiveBufferSize (int size)"}, "setReuseAddress(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to enable or disable the socket option"]], "Throws": [["@B_java#net#SocketException_E@", "if an error occurs enabling or disabling the @B_java#net#SocketOptions#SO_REUSEADDR_E@ socket option, or the socket is closed."]], "SeeAlso": ["@B_java#net#ServerSocket#getReuseAddress_E@", "@B_java#net#ServerSocket#bind_E@", "@B_java#net#ServerSocket#isBound_E@", "@B_java#net#ServerSocket#isClosed_E@"], "Permissions": [], "Description": "Enable/disable the @B_java#net#SocketOptions#SO_REUSEADDR_E@ socket option. When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or port. Enabling @B_java#net#SocketOptions#SO_REUSEADDR_E@ prior to binding the socket using @B_java#net#ServerSocket#bind_E@ allows the socket to be bound even though a previous connection is in a timeout state. When a ServerSocket is created the initial setting of @B_java#net#SocketOptions#SO_REUSEADDR_E@ is not defined. Applications can use @B_java#net#ServerSocket#getReuseAddress_E@ to determine the initial setting of @B_java#net#SocketOptions#SO_REUSEADDR_E@. The behaviour when @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled or disabled after a socket is bound (See @B_java#net#ServerSocket#isBound_E@) is not defined.", "history": "Added in API level 1", "FullName": "public void setReuseAddress (boolean on)"}, "setPerformancePreferences(int, int, int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this ServerSocket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been bound will have no effect. This implies that in order to use this capability requires the socket to be created with the no-argument constructor.", "history": "added in API level 1", "FullName": "public void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "getSoTimeout()": {"Returns": [["int", "the @B_java#net#SocketOptions#SO_TIMEOUT_E@ value"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": ["@B_java#net#ServerSocket#setSoTimeout_E@"], "Permissions": [], "Description": "Retrieve setting for @B_java#net#SocketOptions#SO_TIMEOUT_E@. 0 returns implies that the option is disabled (i.e., timeout of infinity).", "history": "Added in API level 1", "FullName": "public int getSoTimeout ()"}, "isBound()": {"Returns": [["boolean", "true if the ServerSocket successfully bound to an address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the binding state of the ServerSocket.", "history": "Added in API level 1", "FullName": "public boolean isBound ()"}, "setSocketFactory(java.net.SocketImplFactory)": {"Returns": [], "Parameters": [["@B_java#net#SocketImplFactory_E@", "SocketImplFactory: the desired factory."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when setting the socket factory."], ["@B_java#net#SocketException_E@", "if the factory has already been defined."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkSetFactory_E@"], "Permissions": [], "Description": "Sets the server socket implementation factory for the application. The factory can be specified only once. When an application creates a new server socket, the socket implementation factory's createSocketImpl method is called to create the actual socket implementation. Passing null to the method is a no-op unless the factory was already set. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setSocketFactory (SocketImplFactory fac)"}, "isClosed()": {"Returns": [["boolean", "true if the socket has been closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the closed state of the ServerSocket.", "history": "Added in API level 1", "FullName": "public boolean isClosed ()"}, "ServerSocket(int, int, java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the port number, or 0 to use a port number that is automatically allocated."], ["int", "int: requested maximum length of the queue of incoming connections."], ["@B_java#net#InetAddress_E@", "InetAddress: the local InetAddress the server will bind to"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#io#IOException_E@", "if an I/O error occurs when opening the socket."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#SocketOptions_E@", "@B_java#net#SocketImpl_E@", "@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Create a server with the specified port, listen backlog, and local IP address to bind to. The 0 means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling @B_java#net#ServerSocket#getLocalPort_E@. If there is a security manager, this method calls its checkListen method with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "added in API level 1", "FullName": "public ServerSocket (int port, int backlog, InetAddress bindAddr)"}, "bind(java.net.SocketAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The IP address and port number to bind to."], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if the bind operation fails, or if the socket is already bound."], ["@B_java#lang#SecurityException_E@", "if a SecurityManager is present and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the ServerSocket to a specific address (IP address and port number). If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "Added in API level 1", "FullName": "public void bind (SocketAddress endpoint, int backlog)"}, "getChannel()": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "the server-socket channel associated with this socket, or null if this socket was not created for a channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique @B_java#nio#channels#ServerSocketChannel_E@ object associated with this socket, if any. A server socket will have a channel if, and only if, the channel itself was created via the @B_java#nio#channels#ServerSocketChannel#open_E@ method.", "history": "Added in API level 1", "FullName": "public ServerSocketChannel getChannel ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when closing the socket."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this socket. Any thread currently blocked in @B_java#net#ServerSocket#accept_E@ will throw a @B_java#net#SocketException_E@. If this socket has an associated channel then the channel is closed as well.", "history": "Added in API level 1", "FullName": "public void close ()"}, "ServerSocket()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "IO error when opening the socket."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an unbound server socket.", "history": "Added in API level 1", "FullName": "public ServerSocket ()"}, "getReceiveBufferSize()": {"Returns": [["int", "the value of the @B_java#net#SocketOptions#SO_RCVBUF_E@ option for this Socket."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#ServerSocket#setReceiveBufferSize_E@"], "Permissions": [], "Description": "Gets the value of the @B_java#net#SocketOptions#SO_RCVBUF_E@ option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket. Note, the value actually set in the accepted socket is determined by calling @B_java#net#Socket#getReceiveBufferSize_E@.", "history": "Added in API level 1", "FullName": "public int getReceiveBufferSize ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this socket."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the implementation address and implementation port of this socket as a String. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address is returned as the implementation address.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "ServerSocket(int, int)": {"Returns": [], "Parameters": [["int", "int: the port number, or 0 to use a port number that is automatically allocated."], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when opening the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#net#ServerSocket#setSocketFactory_E@", "@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Creates a server socket and binds it to the specified local port number, with the specified backlog. A port number of 0 means that the port number is automatically allocated, typically from an ephemeral port range. This port number can then be retrieved by calling @B_java#net#ServerSocket#getLocalPort_E@. The maximum queue length for incoming connection indications (a request to connect) is set to the backlog parameter. If a connection indication arrives when the queue is full, the connection is refused. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used.", "history": "added in API level 1", "FullName": "public ServerSocket (int port, int backlog)"}, "getReuseAddress()": {"Returns": [["boolean", "a boolean indicating whether or not @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#ServerSocket#setReuseAddress_E@"], "Permissions": [], "Description": "Tests if @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled.", "history": "Added in API level 1", "FullName": "public boolean getReuseAddress ()"}, "getLocalSocketAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "a SocketAddress representing the local endpoint of this socket, or a SocketAddress representing the loopback address if denied by the security manager, or null if the socket is not bound yet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#ServerSocket#getInetAddress_E@", "@B_java#net#ServerSocket#getLocalPort_E@", "@B_java#net#ServerSocket#bind_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Returns the address of the endpoint this socket is bound to. If the socket was bound prior to being @B_java#net#ServerSocket#close_E@, then this method will continue to return the address of the endpoint after the socket is closed. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port to which the socket is bound is returned.", "history": "Added in API level 1", "FullName": "public SocketAddress getLocalSocketAddress ()"}, "implAccept(java.net.Socket)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket: the Socket"]], "Throws": [["@B_java#nio#channels#IllegalBlockingModeException_E@", "if this socket has an associated channel, and the channel is in non-blocking mode"], ["@B_java#io#IOException_E@", "if an I/O error occurs when waiting for a connection."]], "SeeAlso": [], "Permissions": [], "Description": "Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket. So a FooServerSocket will typically hand this method an", "history": "Added in API level 1", "FullName": "protected final void implAccept (Socket s)"}, "getLocalPort()": {"Returns": [["int", "the port number to which this socket is listening or -1 if the socket is not bound yet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the port number on which this socket is listening. If the socket was bound prior to being @B_java#net#ServerSocket#close_E@, then this method will continue to return the port number after the socket is closed.", "history": "Added in API level 1", "FullName": "public int getLocalPort ()"}}, "Inheritance": [], "ClassName": "java.net.ServerSocket", "ClassDesc": "This class implements server sockets. A server socket waits for requests to come in over the network. It performs some operation based on that request, and then possibly returns a result to the requester. The actual work of the server socket is performed by an instance of the SocketImpl class. An application can change the socket factory that creates the socket implementation to configure itself to create sockets appropriate to the local firewall."}