{"Functions": {"setUserRestrictions(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This will no longer work. Device owners and profile owners should use @B_android#app#admin#DevicePolicyManager#addUserRestriction_E@ instead.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setUserRestrictions (Bundle restrictions)"}, "supportsMultipleUsers()": {"Returns": [["boolean", "whether the device supports multiple users."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this device supports multiple users with their own login and customizable space.", "history": "Added in API level 24", "FullName": "public static boolean supportsMultipleUsers ()"}, "getUserRestrictions()": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle containing all the restrictions."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the user-wide restrictions imposed on this user.", "history": "Added in API level 18", "FullName": "public Bundle getUserRestrictions ()"}, "isQuietModeEnabled(android.os.UserHandle)": {"Returns": [["boolean", "true if the profile is in quiet mode, false otherwise."]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: The user handle of the profile to be queried."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the given profile is in quiet mode or not. Notes: Quiet mode is only supported for managed profiles.", "history": "Added in API level 24", "FullName": "public boolean isQuietModeEnabled (UserHandle userHandle)"}, "getUserRestrictions(android.os.UserHandle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle containing all the restrictions."]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: the UserHandle of the user for whom to retrieve the restrictions."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the user-wide restrictions imposed on the user specified by userHandle.", "history": "Added in API level 18", "FullName": "public Bundle getUserRestrictions (UserHandle userHandle)"}, "isUserUnlocked()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@", "@B_android#content#Context#createDeviceProtectedStorageContext_E@"], "Permissions": [], "Description": "Return whether the calling user is running in an \"unlocked\" state. On devices with direct boot, a user is unlocked only after they've entered their credentials (such as a lock pattern or PIN). On devices without direct boot, a user is unlocked as soon as it starts. When a user is locked, only device-protected data storage is available. When a user is unlocked, both device-protected and credential-protected private app data storage is available.", "history": "Added in API level 24", "FullName": "public boolean isUserUnlocked ()"}, "getUserCreationTime(android.os.UserHandle)": {"Returns": [["long", "creation time in milliseconds since Epoch time."]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: user handle of the user or a managed profile associated with the calling user."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns creation time of the user or of a managed profile associated with the calling user.", "history": "Added in API level 23", "FullName": "public long getUserCreationTime (UserHandle userHandle)"}, "createUserCreationIntent(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)": {"Returns": [["@B_android#content#Intent_E@", "An Intent that can be launched from an Activity."]], "Parameters": [["@B_java#lang#String_E@", "String: Optional name to assign to the user. This value may be null."], ["@B_java#lang#String_E@", "String: Optional account name that will be used by the setup wizard to initialize the user. This value may be null."], ["@B_java#lang#String_E@", "String: Optional account type for the account to be created. This is required if the account name is specified. This value may be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: Optional bundle of data to be passed in during account creation in the new user via @B_android#accounts#AccountManager#addAccount_E@. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#UserManager_E@", "@B_android#os#UserManager#supportsMultipleUsers_E@"], "Permissions": [], "Description": "Returns an intent to create a user for the provided name and account name. The name and account name will be used when the setup process for the new user is started. The intent should be launched using startActivityForResult and the return result will indicate if the user consented to adding a new user and if the operation succeeded. Any errors in creating the user will be returned in the result code. If the user cancels the request, the return result will be @B_android#app#Activity#RESULT_CANCELED_E@. On success, the result code will be @B_android#app#Activity#RESULT_OK_E@. Use @B_android#os#UserManager#supportsMultipleUsers_E@ to first check if the device supports this operation at all. The new user is created but not initialized. After switching into the user for the first time, the preferred user name and account information are used by the setup process for that user.", "history": "Added in API level 24", "FullName": "public static Intent createUserCreationIntent (String userName, String accountName, String accountType, PersistableBundle accountOptions)"}, "getUserName()": {"Returns": [["@B_java#lang#String_E@", "the user name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the user name of the user making this call. This call is only available to applications on the system image; it requires the android.permission.MANAGE_USERS or android.permission.GET_ACCOUNTS_PRIVILEGED permissions.", "history": "Added in API level 17", "FullName": "public String getUserName ()"}, "getUserCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of users currently created on the device. This API is not for use by third-party apps. It requires the MANAGE_USERS permission.", "history": "Added in API level 17", "FullName": "public int getUserCount ()"}, "isSystemUser()": {"Returns": [["boolean", "whether this process is running under the system user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to check if this process is running under the system user. The system user is the initial user that is implicitly created on first boot and hosts most of the system services.", "history": "Added in API level 23", "FullName": "public boolean isSystemUser ()"}, "isUserRunning(android.os.UserHandle)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: The user to retrieve the running state for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the given user is actively running. This means that the user is in the \"started\" state, not \"stopped\" -- it is currently allowed to run code through scheduled alarms, receiving broadcasts, etc. A started user may be either the current foreground user or a background user; the result here does not distinguish between the two. Note prior to Android Nougat MR1 (SDK version <= 24; @B_android#os#Build#VERSION_CODES#N_E@, this API required a system permission in order to check other profile's status. Since Android Nougat MR1 (SDK version >= 25; @B_android#os#Build#VERSION_CODES#N_MR1_E@), the restriction has been relaxed, and now it'll accept any @B_android#os#UserHandle_E@ within the same profile group as the caller.", "history": "Added in API level 17", "FullName": "public boolean isUserRunning (UserHandle user)"}, "setUserRestrictions(android.os.Bundle,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"], ["@B_android#os#UserHandle_E@", "UserHandle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This will no longer work. Device owners and profile owners should use @B_android#app#admin#DevicePolicyManager#addUserRestriction_E@ instead.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setUserRestrictions (Bundle restrictions, UserHandle userHandle)"}, "isDemoUser()": {"Returns": [["boolean", "whether the caller is a demo user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the calling app is running in a demo user. When running in a demo user, apps can be more helpful to the user, or explain their features in more detail.", "history": "Added in API level 25", "FullName": "public boolean isDemoUser ()"}, "getUserForSerialNumber(long)": {"Returns": [["@B_android#os#UserHandle_E@", "Return the user associated with the serial number, or null if there is not one."]], "Parameters": [["long", "long: The serial number of the user that is being retrieved."]], "Throws": [], "SeeAlso": ["@B_android#os#UserManager#getSerialNumberForUser_E@"], "Permissions": [], "Description": "Return the user associated with a serial number previously returned by @B_android#os#UserManager#getSerialNumberForUser_E@.", "history": "Added in API level 17", "FullName": "public UserHandle getUserForSerialNumber (long serialNumber)"}, "setRestrictionsChallenge(java.lang.String)": {"Returns": [["boolean", "Returns true if the challenge PIN was set successfully."]], "Parameters": [["@B_java#lang#String_E@", "String: the PIN to use for challenge dialogs."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The restrictions PIN functionality is no longer provided by the system. This method is preserved for backwards compatibility reasons and always returns false. Sets a new challenge PIN for restrictions. This is only for use by pre-installed apps and requires the MANAGE_USERS permission.", "history": "Added in API level 19 Deprecated in API level 23", "FullName": "public boolean setRestrictionsChallenge (String newPin)"}, "hasUserRestriction(java.lang.String)": {"Returns": [["boolean", "true if the current user has the given restriction, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The string key representing the restriction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the current user has been disallowed from performing certain actions or setting certain settings.", "history": "Added in API level 21", "FullName": "public boolean hasUserRestriction (String restrictionKey)"}, "getSerialNumberForUser(android.os.UserHandle)": {"Returns": [["long", "The serial number of the given user; returns -1 if the given UserHandle does not exist."]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: The user whose serial number is to be retrieved."]], "Throws": [], "SeeAlso": ["@B_android#os#UserManager#getUserForSerialNumber_E@"], "Permissions": [], "Description": "Return the serial number for a user. This is a device-unique number assigned to that user; if the user is deleted and then a new user created, the new users will not be given the same serial number.", "history": "Added in API level 17", "FullName": "public long getSerialNumberForUser (UserHandle user)"}, "isUserUnlocked(android.os.UserHandle)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: to retrieve the unlocked state for."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@", "@B_android#content#Context#createDeviceProtectedStorageContext_E@"], "Permissions": [], "Description": "Return whether the given user is running in an \"unlocked\" state. On devices with direct boot, a user is unlocked only after they've entered their credentials (such as a lock pattern or PIN). On devices without direct boot, a user is unlocked as soon as it starts. When a user is locked, only device-protected data storage is available. When a user is unlocked, both device-protected and credential-protected private app data storage is available. Requires android.permission.MANAGE_USERS or android.permission.INTERACT_ACROSS_USERS, otherwise specified @B_android#os#UserHandle_E@ must be the calling user or a managed profile associated with it.", "history": "Added in API level 24", "FullName": "public boolean isUserUnlocked (UserHandle user)"}, "setUserRestriction(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key of the restriction"], ["boolean", "boolean: the value for the restriction"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#app#admin#DevicePolicyManager#addUserRestriction_E@ or @B_android#app#admin#DevicePolicyManager#clearUserRestriction_E@ instead. Sets the value of a specific restriction. Requires the MANAGE_USERS permission.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void setUserRestriction (String key, boolean value)"}, "getApplicationRestrictions(java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "a @B_android#os#Bundle_E@ with the restrictions for that package, or an empty @B_android#os#Bundle_E@ if there are no saved restrictions."]], "Parameters": [["@B_java#lang#String_E@", "String: the package name of the calling application"]], "Throws": [], "SeeAlso": ["@B_android#os#UserManager_E@"], "Permissions": [], "Description": "Returns a @B_android#os#Bundle_E@ containing any saved application restrictions for this user, for the given package name. Only an application with this package name can call this method. The returned @B_android#os#Bundle_E@ consists of key-value pairs, as defined by the application, where the types of values may be: boolean int String or String[] From @B_android#os#Build#VERSION_CODES#M_E@, Bundle or Bundle[] NOTE: The method performs disk I/O and shouldn't be called on the main thread This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 18", "FullName": "public Bundle getApplicationRestrictions (String packageName)"}, "isUserAGoat()": {"Returns": [["boolean", "Returns true if the user making this call is a goat."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to determine whether the user making this call is subject to teleportations. As of @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this method can now automatically identify goats using advanced goat recognition technology.", "history": "Added in API level 17", "FullName": "public boolean isUserAGoat ()"}, "getUserProfiles()": {"Returns": [["@B_java#util#List_E@", "A non-empty list of UserHandles associated with the calling user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of UserHandles for profiles associated with the user that the calling process is running on, including the user itself.", "history": "Added in API level 21", "FullName": "public List<UserHandle> getUserProfiles ()"}, "isUserRunningOrStopping(android.os.UserHandle)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#UserHandle_E@", "UserHandle: The user to retrieve the running state for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the given user is actively running or stopping. This is like @B_android#os#UserManager#isUserRunning_E@, but will also return true if the user had been running but is in the process of being stopped (but is not yet fully stopped, and still running some code). Note prior to Android Nougat MR1 (SDK version <= 24; @B_android#os#Build#VERSION_CODES#N_E@, this API required a system permission in order to check other profile's status. Since Android Nougat MR1 (SDK version >= 25; @B_android#os#Build#VERSION_CODES#N_MR1_E@), the restriction has been relaxed, and now it'll accept any @B_android#os#UserHandle_E@ within the same profile group as the caller.", "history": "Added in API level 17", "FullName": "public boolean isUserRunningOrStopping (UserHandle user)"}, "requestQuietModeEnabled(boolean,android.os.UserHandle)": {"Returns": [["boolean", "false if user's credential is needed in order to turn off quiet mode, true otherwise"]], "Parameters": [["boolean", "boolean: whether quiet mode should be enabled or disabled"], ["@B_android#os#UserHandle_E@", "UserHandle: user handle of the profile This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is invalid"], ["@B_java#lang#IllegalArgumentException_E@", "if userHandle is not a managed profile"]], "SeeAlso": ["@B_android#os#UserManager#isQuietModeEnabled_E@"], "Permissions": [], "Description": "Enables or disables quiet mode for a managed profile. If quiet mode is enabled, apps in a managed profile don't run, generate notifications, or consume data or battery. If a user's credential is needed to turn off quiet mode, a confirm credential screen will be shown to the user. The change may not happen instantly, however apps can listen for @B_android#content#Intent#ACTION_MANAGED_PROFILE_AVAILABLE_E@ and @B_android#content#Intent#ACTION_MANAGED_PROFILE_UNAVAILABLE_E@ broadcasts in order to be notified of the change of the quiet mode. Apps can also check the current state of quiet mode by calling @B_android#os#UserManager#isQuietModeEnabled_E@. The caller must either be the foreground default launcher or have one of these permissions: MANAGE_USERS or MODIFY_QUIET_MODE.", "history": "Added in API level 28", "FullName": "public boolean requestQuietModeEnabled (boolean enableQuietMode, UserHandle userHandle)"}, "setUserRestriction(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key of the restriction"], ["boolean", "boolean: the value for the restriction"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#app#admin#DevicePolicyManager#addUserRestriction_E@ or @B_android#app#admin#DevicePolicyManager#clearUserRestriction_E@ instead. Sets the value of a specific restriction. Requires the MANAGE_USERS permission.", "history": "added in API level 18", "FullName": "public void setUserRestriction (String key, boolean value)"}}, "Inheritance": [], "ClassName": "android.os.UserManager", "ClassDesc": "Manages users and user details on a multi-user system. There are two major categories of users: fully customizable users with their own login, and managed profiles that share a workspace with a related user. Users are different from accounts, which are managed by @B_android#accounts#AccountManager_E@. Each user can have their own set of accounts. See @B_android#app#admin#DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE_E@ for more on managed profiles."}