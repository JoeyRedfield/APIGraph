{"Functions": {"freeMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Memory caches are automatically dropped when no longer needed, and in response to system memory pressure. Informs this WebView that memory is low so that it can free any available memory.", "history": "Added in API level 7 Deprecated in API level 19", "FullName": "public void freeMemory ()"}, "zoomBy(float)": {"Returns": [], "Parameters": [["float", "float: the zoom factor to apply. The zoom factor will be clamped to the WebView's zoom limits. This value must be in the range 0.01 to 100.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a zoom operation in this WebView.", "history": "Added in API level 21", "FullName": "public void zoomBy (float zoomFactor)"}, "getAccessibilityNodeProvider()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeProvider_E@", "The provider."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to @B_android#accessibilityservice#AccessibilityService_E@s that explore the window content. If this method returns an instance, this instance is responsible for managing @B_android#view#accessibility#AccessibilityNodeInfo_E@s describing the virtual sub-tree rooted at this View including the one representing the View itself. Similarly the returned instance is responsible for performing accessibility actions on any virtual view or the root view itself. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#getAccessibilityNodeProvider_E@ is responsible for handling this call.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeProvider getAccessibilityNodeProvider ()"}, "WebView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: an Activity Context to access application assets"], ["@B_android#util#AttributeSet_E@", "AttributeSet: an AttributeSet passed to our parent"], ["int", "int: an attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new WebView with layout parameters and a default style.", "history": "Added in API level 1", "FullName": "public WebView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onChildViewRemoved(android.view.View,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view from which the child was removed"], ["@B_android#view#View_E@", "View: the child removed from the hierarchy"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "WebView no longer needs to implement ViewGroup.OnHierarchyChangeListener. This method does nothing now. Called when a child is removed from a parent view.", "history": "Added in API level 1", "FullName": "public void onChildViewRemoved (View p, View child)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "restorePicture(android.os.Bundle, java.io.File)": {"Returns": [["", "true if the picture was successfully restored"]], "Parameters": [["@B_android#os#Bundle_E@", "a Bundle containing the saved display data"], ["@B_java#io#File_E@", "the file where the picture data was stored"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restores the display data that was saved in @B_android#webkit#WebView#savePicture_E@. Used in conjunction with @B_android#webkit#WebView#restoreState_E@. Note that this will not work if this WebView is hardware accelerated.", "history": "Since: API Level 3", "FullName": "public boolean restorePicture (Bundle b, File src)"}, "saveWebArchive(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the filename where the archive should be placed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the current view as a web archive.", "history": "Added in API level 11", "FullName": "public void saveWebArchive (String filename)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new resource configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the current configuration of the resources being used by the application have changed. You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics. You only need to use this if you are not relying on the normal @B_android#app#Activity_E@ mechanism of recreating the activity instance upon a configuration change.", "history": "Added in API level 8", "FullName": "protected void onConfigurationChanged (Configuration newConfig)"}, "clearView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use WebView.loadUrl(\"about:blank\") to reliably reset the view state and release page resources (including any running JavaScript). Clears this WebView so that onDraw() will draw nothing but white background, and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public void clearView ()"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "computeHorizontalScrollRange()": {"Returns": [["int", "the total horizontal range represented by the horizontal scrollbar"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal range that the horizontal scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollExtent_E@ and @B_android#view#View#computeHorizontalScrollOffset_E@. The default range is the drawing width of this view.", "history": "Added in API level 1", "FullName": "protected int computeHorizontalScrollRange ()"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "autofill(android.util.SparseArray<android.view.autofill.AutofillValue>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: map of values to be autofilled, keyed by virtual child id. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically fills the content of the virtual children within this view. Views with virtual children support the Autofill Framework mainly by: Providing the metadata defining what the virtual children mean and how they can be autofilled. Implementing the methods that autofill the virtual children. @B_android#view#View#onProvideAutofillVirtualStructure_E@ is responsible for the former, this method is responsible for the latter - see @B_android#view#View#autofill_E@ and @B_android#view#View#onProvideAutofillVirtualStructure_E@ for more info about autofill. If a child value is updated asynchronously, the next call to @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ must happen ?android:attr/autofilledHighlight should be drawn over it until the data changes.", "history": "Added in API level 26", "FullName": "public void autofill (SparseArray<AutofillValue> values)"}, "getTitle()": {"Returns": [["@B_java#lang#String_E@", "the title for the current page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the title for the current page. This is the title of the current page until WebViewClient.onReceivedTitle is called.", "history": "Added in API level 1", "FullName": "public String getTitle ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)": {"Returns": [], "Parameters": [["@B_android#webkit#WebViewRenderProcessClient_E@", "WebViewRenderProcessClient: the @B_android#webkit#WebViewRenderProcessClient_E@ object. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the renderer client object associated with this WebView. See @B_android#webkit#WebView#setWebViewRenderProcessClient_E@ for details. @B_android#webkit#WebViewRenderProcessClient_E@ callbacks will run on the thread that this WebView was initialized on.", "history": "Added in API level 29", "FullName": "public void setWebViewRenderProcessClient (WebViewRenderProcessClient webViewRenderProcessClient)"}, "evaluateJavascript(java.lang.String,android.webkit.ValueCallback<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the JavaScript to execute."], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: A callback to be invoked when the script execution completes with the result of the execution (if any). May be null if no notification of the result is required. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously evaluates JavaScript in the context of the currently displayed page. If non-null, resultCallback will be invoked with any result returned from that execution. This method must be called on the UI thread and the callback will be made on the UI thread. Compatibility note. Applications targeting @B_android#os#Build#VERSION_CODES#N_E@ or later, JavaScript state from an empty WebView is no longer persisted across navigations like @B_android#webkit#WebView#loadUrl_E@. For example, global variables and functions defined before calling @B_android#webkit#WebView#loadUrl_E@ will not exist in the loaded page. Applications should use @B_android#webkit#WebView#addJavascriptInterface_E@ instead to persist JavaScript objects across navigations.", "history": "Added in API level 19", "FullName": "public void evaluateJavascript (String script, ValueCallback<String> resultCallback)"}, "enablePlatformNotifications()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables platform notifications of data state and proxy changes. Notifications are enabled by default.", "history": "Since: API Level 1", "FullName": "public static void enablePlatformNotifications ()"}, "WebView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: an Activity Context to access application assets"], ["@B_android#util#AttributeSet_E@", "AttributeSet: an AttributeSet passed to our parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new WebView with layout parameters.", "history": "Added in API level 1", "FullName": "public WebView (Context context, AttributeSet attrs)"}, "postUrl(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the resource to load"], ["byte[]", "byte: the data will be passed to \"POST\" request, which must be be \"application/x-www-form-urlencoded\" encoded."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the URL with postData using \"POST\" method into this WebView. If url is not a network URL, it will be loaded with @B_android#webkit#WebView#loadUrl_E@ instead, ignoring the postData param.", "history": "added in API level 5", "FullName": "public void postUrl (String url, byte[] postData)"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int ow, int oh)"}, "setRendererPriorityPolicy(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the minimum priority at which this WebView desires the renderer process to be bound. Value is @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@, @B_android#webkit#WebView#RENDERER_PRIORITY_BOUND_E@, or @B_android#webkit#WebView#RENDERER_PRIORITY_IMPORTANT_E@"], ["boolean", "boolean: if true, this flag specifies that when this WebView is not visible, it will be treated as if it had requested a priority of @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the renderer priority policy for this @B_android#webkit#WebView_E@. The priority policy will be used to determine whether an out of process renderer should be considered to be a target for OOM killing. Because a renderer can be associated with more than one WebView, the final priority it is computed as the maximum of any attached WebViews. When a WebView is destroyed it will cease to be considerered when calculating the renderer priority. Once no WebViews remain associated with the renderer, the priority of the renderer will be reduced to @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@. The default policy is to set the priority to @B_android#webkit#WebView#RENDERER_PRIORITY_IMPORTANT_E@ regardless of visibility, and this should not be changed unless the caller also handles renderer crashes with @B_android#webkit#WebViewClient#onRenderProcessGone_E@. Any other setting will result in WebView renderers being killed by the system more aggressively than the application.", "history": "Added in API level 26", "FullName": "public void setRendererPriorityPolicy (int rendererRequestedPriority, boolean waivedWhenNotVisible)"}, "requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)": {"Returns": [["boolean", "Whether the group scrolled to handle the operation"]], "Parameters": [["@B_android#view#View_E@", "View: The direct child making the request."], ["@B_android#graphics#Rect_E@", "Rect: The rectangle in the child's coordinates the child wishes to be on the screen."], ["boolean", "boolean: True to forbid animated or delayed scrolling, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child of this group wants a particular rectangle to be positioned onto the screen. @B_android#view#ViewGroup_E@s overriding this can trust that: child will be a direct child of this group rectangle will be in the child's content coordinates @B_android#view#ViewGroup_E@s overriding this should uphold the contract: nothing will change if the rectangle is already visible the view port will be scrolled only just enough to make the rectangle visible", "history": "Added in API level 1", "FullName": "public boolean requestChildRectangleOnScreen (View child, Rect rect, boolean immediate)"}, "setLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters for this view, cannot be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the layout parameters associated with this view. These supply parameters to the", "history": "Added in API level 1", "FullName": "public void setLayoutParams (ViewGroup.LayoutParams params)"}, "setWebContentsDebuggingEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to enable web contents debugging"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application. This flag can be enabled in order to facilitate debugging of web layouts and JavaScript code running inside WebViews. Please refer to WebView documentation for the debugging guide. The default is false.", "history": "Added in API level 19", "FullName": "public static void setWebContentsDebuggingEnabled (boolean enabled)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle trackball motion events. The relative movement of the trackball since the last event can be retrieve with @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@. These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).", "history": "Added in API level 1", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "computeVerticalScrollOffset()": {"Returns": [["int", "the vertical offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollOffset ()"}, "onProvideVirtualStructure(android.view.ViewStructure)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when assist structure is being retrieved from a view as part of @B_android#app#Activity#onProvideAssistData_E@ to generate additional virtual structure under this view. The defaullt implementation uses @B_android#view#View#getAccessibilityNodeProvider_E@ to try to generate this from the view's virtual accessibility nodes, if any. You can override this for a more optimal implementation providing this data.", "history": "Added in API level 23", "FullName": "public void onProvideVirtualStructure (ViewStructure structure)"}, "isVisibleToUserForAutofill(int)": {"Returns": [["boolean", "Whether the view is visible on the screen."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes whether this virtual autofill view is visible to the user. true, but views providing a virtual hierarchy view must override it.", "history": "Added in API level 28", "FullName": "public boolean isVisibleToUserForAutofill (int virtualId)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "capturePicture()": {"Returns": [["@B_android#graphics#Picture_E@", "a picture that captures the current contents of this WebView"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebView#onDraw_E@ to obtain a bitmap snapshot of the WebView, or @B_android#webkit#WebView#saveWebArchive_E@ to save the content to a file. Gets a new picture that captures the current contents of this WebView. The picture is of the entire document being displayed, and is not limited to the area currently displayed by this WebView. Also, the picture is a static copy and is unaffected by later changes to the content being displayed. Note that due to internal changes, for API levels between @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@ and @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_E@ inclusive, the picture does not include fixed position elements or scrollable divs. Note that from @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR1_E@ the returned picture should only be drawn into bitmap-backed Canvas - using any other type of Canvas will involve additional conversion at a cost in memory and performance.", "history": "Added in API level 1 Deprecated in API level 19", "FullName": "public Picture capturePicture ()"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "Added in API level 14", "FullName": "public boolean shouldDelayChildPressedState ()"}, "getRendererRequestedPriority()": {"Returns": [["int", "the requested renderer priority policy. Value is @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@, @B_android#webkit#WebView#RENDERER_PRIORITY_BOUND_E@, or @B_android#webkit#WebView#RENDERER_PRIORITY_IMPORTANT_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the requested renderer priority for this WebView.", "history": "Added in API level 26", "FullName": "public int getRendererRequestedPriority ()"}, "pageDown(boolean)": {"Returns": [["boolean", "true if the page was scrolled"]], "Parameters": [["boolean", "boolean: true to jump to bottom of page"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scrolls the contents of this WebView down by half the page size.", "history": "Added in API level 1", "FullName": "public boolean pageDown (boolean bottom)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onWindowVisibilityChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new visibility of the window. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing has change its visibility (between @B_android#view#View#GONE_E@, @B_android#view#View#INVISIBLE_E@, and @B_android#view#View#VISIBLE_E@). Note that this tells you whether or not your window is being made visible to the window manager; this does not tell you whether or not your window is obscured by other windows on the screen, even if it is itself visible.", "history": "Added in API level 1", "FullName": "protected void onWindowVisibilityChanged (int visibility)"}, "findFocus()": {"Returns": [["@B_android#view#View_E@", "The view that currently has focus, or null if no focused view can be found."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the view in the hierarchy rooted at this view that currently has focus.", "history": "Added in API level 1", "FullName": "public View findFocus ()"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call. The default implementation will delegate @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_FORWARD_E@ to nested scrolling parents if @B_android#view#View#isNestedScrollingEnabled_E@ on this view.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "createPrintDocumentAdapter(java.lang.String)": {"Returns": [["@B_android#print#PrintDocumentAdapter_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The user-facing name of the printed document. See @B_android#print#PrintDocumentInfo_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PrintDocumentAdapter that provides the content of this WebView for printing. The adapter works by converting the WebView contents to a PDF stream. The WebView cannot be drawn during the conversion process - any such draws are undefined. It is recommended to use a dedicated off screen WebView for the printing. If necessary, an application may temporarily hide a visible WebView by using a custom PrintDocumentAdapter instance wrapped around the object returned and observing the onStart and onFinish methods. See @B_android#print#PrintDocumentAdapter_E@ for more information.", "history": "Added in API level 21", "FullName": "public PrintDocumentAdapter createPrintDocumentAdapter (String documentName)"}, "setMapTrackballToArrowKeys(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Only the default case, true, will be supported in a future version.", "history": "Added in API level 1 Deprecated in API level 17", "FullName": "public void setMapTrackballToArrowKeys (boolean setMap)"}, "onHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the view handled the hover event."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event that describes the hover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@, @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@, or @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@ when the pointer enters the bounds of the view. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@ when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls @B_android#view#View#setHovered_E@ to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events.", "history": "Added in API level 14", "FullName": "public boolean onHoverEvent (MotionEvent event)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setRendererPriorityPolicy(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the minimum priority at which this WebView desires the renderer process to be bound.Value is RENDERER_PRIORITY_WAIVED, RENDERER_PRIORITY_BOUND or RENDERER_PRIORITY_IMPORTANT."], ["boolean", "boolean: if true, this flag specifies that when this WebView is not visible, it will be treated as if it had requested a priority of @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the renderer priority policy for this @B_android#webkit#WebView_E@. The priority policy will be used to determine whether an out of process renderer should be considered to be a target for OOM killing. Because a renderer can be associated with more than one WebView, the final priority it is computed as the maximum of any attached WebViews. When a WebView is destroyed it will cease to be considerered when calculating the renderer priority. Once no WebViews remain associated with the renderer, the priority of the renderer will be reduced to @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@. The default policy is to set the priority to @B_android#webkit#WebView#RENDERER_PRIORITY_IMPORTANT_E@ regardless of visibility, and this should not be changed unless the caller also handles renderer crashes with @B_android#webkit#WebViewClient#onRenderProcessGone_E@. Any other setting will result in WebView renderers being killed by the system more aggressively than the application.", "history": "added in API level 26", "FullName": "public void setRendererPriorityPolicy (int rendererRequestedPriority, boolean waivedWhenNotVisible)"}, "setPictureListener(android.webkit.WebView.PictureListener)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView#PictureListener_E@", "WebView.PictureListener: an implementation of WebView.PictureListener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. Sets the Picture listener. This is an interface used to receive notifications of a new Picture.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setPictureListener (WebView.PictureListener listener)"}, "setHorizontalScrollbarOverlay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if horizontal scrollbar should have overlay style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method has no effect. Specifies whether the horizontal scrollbar has overlay style.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setHorizontalScrollbarOverlay (boolean overlay)"}, "setNetworkAvailable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a boolean indicating if network is available"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs WebView of the network state. This is used to set the JavaScript property window.navigator.isOnline and generates the online/offline event as specified in HTML5, sec. 5.7.7", "history": "Added in API level 3", "FullName": "public void setNetworkAvailable (boolean networkUp)"}, "getProgress()": {"Returns": [["int", "the progress for the current page between 0 and 100"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the progress for the current page.", "history": "Added in API level 1", "FullName": "public int getProgress ()"}, "postVisualStateCallback(long,android.webkit.WebView.VisualStateCallback)": {"Returns": [], "Parameters": [["long", "long: An id that will be returned in the callback to allow callers to match requests with callbacks."], ["@B_android#webkit#WebView#VisualStateCallback_E@", "WebView.VisualStateCallback: The callback to be invoked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Posts a @B_android#webkit#WebView#VisualStateCallback_E@, which will be called when the current state of the WebView is ready to be drawn. Because updates to the DOM are processed asynchronously, updates to the DOM may not immediately be reflected visually by subsequent @B_android#webkit#WebView#onDraw_E@ invocations. The @B_android#webkit#WebView#VisualStateCallback_E@ provides a mechanism to notify the caller when the contents of the DOM at the current time are ready to be drawn the next time the @B_android#webkit#WebView_E@ draws. The next draw after the callback completes is guaranteed to reflect all the updates to the DOM up to the point at which the @B_android#webkit#WebView#VisualStateCallback_E@ was posted, but it may also contain updates applied after the callback was posted. The state of the DOM covered by this API includes the following: primitive HTML elements (div, img, span, etc..) images CSS animations WebGL canvas It does not include the state of: the video tag To guarantee that the @B_android#webkit#WebView_E@ will successfully render the first frame after the @B_android#webkit#WebView#VisualStateCallback#onComplete_E@ method has been called a set of conditions must be met: If the @B_android#webkit#WebView_E@'s visibility is set to @B_android#view#View#VISIBLE_E@ then the @B_android#webkit#WebView_E@ must be attached to the view hierarchy. If the @B_android#webkit#WebView_E@'s visibility is set to @B_android#view#View#INVISIBLE_E@ then the @B_android#webkit#WebView_E@ must be attached to the view hierarchy and must be made @B_android#view#View#VISIBLE_E@ from the @B_android#webkit#WebView#VisualStateCallback#onComplete_E@ method. If the @B_android#webkit#WebView_E@'s visibility is set to @B_android#view#View#GONE_E@ then the @B_android#webkit#WebView_E@ must be attached to the view hierarchy and its @B_android#widget#AbsoluteLayout#LayoutParams_E@'s width and height need to be set to fixed values and must be made @B_android#view#View#VISIBLE_E@ from the @B_android#webkit#WebView#VisualStateCallback#onComplete_E@ method. When using this API it is also recommended to enable pre-rasterization if the @B_android#webkit#WebView_E@ is off screen to avoid flickering. See @B_android#webkit#WebSettings#setOffscreenPreRaster_E@ for more details and do consider its caveats.", "history": "Added in API level 23", "FullName": "public void postVisualStateCallback (long requestId, WebView.VisualStateCallback callback)"}, "overlayVerticalScrollbar()": {"Returns": [["boolean", "false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. Gets whether vertical scrollbar has overlay style.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public boolean overlayVerticalScrollbar ()"}, "stopLoading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops the current load.", "history": "Added in API level 1", "FullName": "public void stopLoading ()"}, "getWebViewRenderProcessClient()": {"Returns": [["@B_android#webkit#WebViewRenderProcessClient_E@", "the @B_android#webkit#WebViewRenderProcessClient_E@ object associated with this WebView, if one has been set via @B_android#webkit#WebView#setWebViewRenderProcessClient_E@ or null otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the renderer client object associated with this WebView.", "history": "Added in API level 29", "FullName": "public WebViewRenderProcessClient getWebViewRenderProcessClient ()"}, "restoreState(android.os.Bundle)": {"Returns": [["@B_android#webkit#WebBackForwardList_E@", "the restored back/forward list or null if restoreState failed"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the incoming Bundle of state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restores the state of this WebView from the given Bundle. This method is intended for use in @B_android#app#Activity#onRestoreInstanceState_E@ and should be called to restore the state of this WebView. If it is called after this WebView has had a chance to build state (load pages, create a back/forward list, etc.) there may be undesirable side-effects. Please note that this method no longer restores the display data for this WebView.", "history": "Added in API level 1", "FullName": "public WebBackForwardList restoreState (Bundle inState)"}, "getWebViewRenderProcess()": {"Returns": [["@B_android#webkit#WebViewRenderProcess_E@", "the @B_android#webkit#WebViewRenderProcess_E@ renderer handle associated with this @B_android#webkit#WebView_E@, or null if WebView is not runing in multiprocess mode."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a handle to the WebView renderer process associated with this WebView. In @B_android#os#Build#VERSION_CODES#O_E@ and above, WebView may run in \"multiprocess\" mode. In multiprocess mode, rendering of web content is performed by a sandboxed renderer process separate to the application process. This renderer process may be shared with other WebViews in the application, but is not shared with other application processes. If WebView is running in multiprocess mode, this method returns a handle to the renderer process associated with the WebView, which can be used to control the renderer process.", "history": "Added in API level 29", "FullName": "public WebViewRenderProcess getWebViewRenderProcess ()"}, "WebView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: an Activity Context to access application assets"], ["@B_android#util#AttributeSet_E@", "AttributeSet: an AttributeSet passed to our parent"], ["int", "int: an attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: a resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new WebView with layout parameters and a default style.", "history": "Added in API level 21", "FullName": "public WebView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "overlayHorizontalScrollbar()": {"Returns": [["boolean", "true"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. Gets whether horizontal scrollbar has overlay style.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public boolean overlayHorizontalScrollbar ()"}, "canGoForward()": {"Returns": [["boolean", "true if this WebView has a forward history item"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this WebView has a forward history item.", "history": "Added in API level 1", "FullName": "public boolean canGoForward ()"}, "onGlobalFocusChanged(android.view.View,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The previously focused view, if any."], ["@B_android#view#View_E@", "View: The newly focused View, if any."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "WebView should not have implemented ViewTreeObserver.OnGlobalFocusChangeListener. This method does nothing now. Callback method to be invoked when the focus changes in the view tree. When the view tree transitions from touch mode to non-touch mode, oldFocus is null. When the view tree transitions from non-touch mode to touch mode, newFocus is null. When focus changes in non-touch mode (without transition from or to touch mode) either oldFocus or newFocus can be null.", "history": "Added in API level 1", "FullName": "public void onGlobalFocusChanged (View oldFocus, View newFocus)"}, "getSettings()": {"Returns": [["@B_android#webkit#WebSettings_E@", "a WebSettings object that can be used to control this WebView's settings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the WebSettings object used to control the settings for this WebView.", "history": "Added in API level 1", "FullName": "public WebSettings getSettings ()"}, "onVisibilityChanged(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view. This value must never be null."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "computeVerticalScrollRange()": {"Returns": [["int", "the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollExtent_E@ and @B_android#view#View#computeVerticalScrollOffset_E@.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollRange ()"}, "canGoBackOrForward(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the negative or positive number of steps to move the history"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the page can go back or forward the given number of steps.", "history": "Added in API level 1", "FullName": "public boolean canGoBackOrForward (int steps)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean focused, int direction, Rect previouslyFocusedRect)"}, "enableSlowWholeDocumentDraw()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For apps targeting the L release, WebView has a new default behavior that reduces memory footprint and increases performance by intelligently choosing the portion of the HTML document that needs to be drawn. These optimizations are transparent to the developers. However, under certain circumstances, an App developer may want to disable them:", "history": "Added in API level 21", "FullName": "public static void enableSlowWholeDocumentDraw ()"}, "requestFocus(int, android.graphics.Rect)": {"Returns": [["boolean", "Whether this view or one of its descendants actually took focus."]], "Parameters": [["int", "int: One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle (in this View's coordinate system) to give a finer grained hint about where focus is coming from. May be null if there is no hint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. The rectangle can help give larger views a finer grained hint about where focus is coming from, and therefore, where to show selection, or forward focus change internally. A view will not actually take focus if it is not focusable (@B_android#view#View#isFocusable_E@ returns false), or if it is focusable and it is not focusable in touch mode (@B_android#view#View#isFocusableInTouchMode_E@) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has @B_android#view#ViewGroup#getDescendantFocusability_E@ equal to @B_android#view#ViewGroup#FOCUS_BLOCK_DESCENDANTS_E@. See also @B_android#view#View#focusSearch_E@, which is what you call to say that you have focus, and you want your parent to look for the next one. You may wish to override this method if your custom @B_android#view#View_E@ has an internal @B_android#view#View_E@ that it wishes to forward the request to. Looks for a view to give focus to respecting the setting specified by @B_android#view#ViewGroup#getDescendantFocusability_E@. Uses @B_android#view#ViewGroup#onRequestFocusInDescendants_E@ to find focus within the children of this group when appropriate.", "history": "added in API level 1", "FullName": "public boolean requestFocus (int direction, Rect previouslyFocusedRect)"}, "showFindDialog(java.lang.String,boolean)": {"Returns": [["boolean", "true if the find dialog is shown, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: if non-null, will be the initial text to search for. Otherwise, the last String searched for in this WebView will be used to start. This value may be null."], ["boolean", "boolean: if true, show the IME, assuming the user will begin typing. If false and text is non-null, perform a find all."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method does not work reliably on all Android versions; implementing a custom find dialog using WebView.findAllAsync() provides a more robust solution. Starts an ActionMode for finding text in this WebView. Only works if this WebView is attached to the view system.", "history": "Added in API level 11 Deprecated in API level 18", "FullName": "public boolean showFindDialog (String text, boolean showIme)"}, "debugDump()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Since: API Level 1", "FullName": "public void debugDump ()"}, "clearMatches()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the highlighting surrounding text matches created by @B_android#webkit#WebView#findAllAsync_E@.", "history": "Added in API level 3", "FullName": "public void clearMatches ()"}, "onScrollChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current horizontal scroll origin."], ["int", "int: Current vertical scroll origin."], ["int", "int: Previous horizontal scroll origin."], ["int", "int: Previous vertical scroll origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). This is typically as a result of @B_android#view#View#scrollBy_E@ or @B_android#view#View#scrollTo_E@ having been called.", "history": "added in API level 1", "FullName": "protected void onScrollChanged (int l, int t, int oldl, int oldt)"}, "onOverScrolled(int, int, boolean, boolean)": {"Returns": [], "Parameters": [["int", "int: New X scroll value in pixels"], ["int", "int: New Y scroll value in pixels"], ["boolean", "boolean: True if scrollX was clamped to an over-scroll boundary"], ["boolean", "boolean: True if scrollY was clamped to an over-scroll boundary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#overScrollBy_E@ to respond to the results of an over-scroll operation.", "history": "added in API level 9", "FullName": "protected void onOverScrolled (int scrollX, int scrollY, boolean clampedX, boolean clampedY)"}, "loadUrl(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the resource to load"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the given URL. Also see compatibility note on @B_android#webkit#WebView#evaluateJavascript_E@.", "history": "Added in API level 1", "FullName": "public void loadUrl (String url)"}, "requestImageRef(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: the message to be dispatched with the result of the request as the data member with \"url\" as key. The result can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests the URL of the image last touched by the user. msg will be sent to its target with a String representing the URL as its object.", "history": "Added in API level 1", "FullName": "public void requestImageRef (Message msg)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Since: API Level 1", "FullName": "protected void finalize ()"}, "requestFocusNodeHref(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: the message to be dispatched with the result of the request. The message data contains three keys. \"url\" returns the anchor's href attribute. \"title\" returns the anchor's text. \"src\" returns the image's src attribute. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests the anchor or image element URL at the last tapped point. If hrefMsg is null, this method returns immediately and does not dispatch hrefMsg to its target. If the tapped point hits an image, an anchor, or an image in an anchor, the message associates strings in named keys in its data. The value paired with the key may be an empty string.", "history": "Added in API level 1", "FullName": "public void requestFocusNodeHref (Message hrefMsg)"}, "WebView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: an Activity Context to access application assets"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new WebView with an Activity Context object.", "history": "Added in API level 1", "FullName": "public WebView (Context context)"}, "getHitTestResult()": {"Returns": [["@B_android#webkit#WebView#HitTestResult_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a HitTestResult based on the current cursor node. If a HTML::a tag is found and the anchor has a non-JavaScript URL, the HitTestResult type is set to SRC_ANCHOR_TYPE and the URL is set in the \"extra\" field. If the anchor does not have a URL or if it is a JavaScript URL, the type will be UNKNOWN_TYPE and the URL has to be retrieved through @B_android#webkit#WebView#requestFocusNodeHref_E@ asynchronously. If a HTML::img tag is found, the HitTestResult type is set to IMAGE_TYPE and the URL is set in the \"extra\" field. A type of SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a URL that has an image as a child node. If a phone number is found, the HitTestResult type is set to PHONE_TYPE and the phone number is set in the \"extra\" field of HitTestResult. If a map address is found, the HitTestResult type is set to GEO_TYPE and the address is set in the \"extra\" field of HitTestResult. If an email address is found, the HitTestResult type is set to EMAIL_TYPE and the email is set in the \"extra\" field of HitTestResult. Otherwise, HitTestResult type is set to UNKNOWN_TYPE.", "history": "Added in API level 1", "FullName": "public WebView.HitTestResult getHitTestResult ()"}, "setLayerType(int, android.graphics.Paint)": {"Returns": [], "Parameters": [["int", "int: The type of layer to use with this view, must be one of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is @B_android#view#View#LAYER_TYPE_NONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the type of layer backing this view. The layer can be @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@. A layer is associated with an optional @B_android#graphics#Paint_E@ instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer: @B_android#graphics#Paint#getAlpha_E@ @B_android#graphics#Paint#getXfermode_E@ @B_android#graphics#Paint#getColorFilter_E@ If this view has an alpha value set to < 1.0 by calling @B_android#view#View#setAlpha_E@, the alpha value of the layer's paint is superseded by this view's alpha value. Refer to the documentation of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ and @B_android#view#View#LAYER_TYPE_HARDWARE_E@ for more information on when and how to use layers.", "history": "added in API level 11", "FullName": "public void setLayerType (int layerType, Paint paint)"}, "clearFormData()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the autocomplete popup from the currently focused form field, if present. Note this only affects the display of the autocomplete popup, it does not remove any saved form data from this WebView's store. To do that, use @B_android#webkit#WebViewDatabase#clearFormData_E@.", "history": "Added in API level 1", "FullName": "public void clearFormData ()"}, "onScrollChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current horizontal scroll origin."], ["int", "int: Current vertical scroll origin."], ["int", "int: Previous horizontal scroll origin."], ["int", "int: Previous vertical scroll origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). This is typically as a result of @B_android#view#View#scrollBy_E@ or @B_android#view#View#scrollTo_E@ having been called.", "history": "Added in API level 1", "FullName": "protected void onScrollChanged (int l, int t, int oldl, int oldt)"}, "goBackOrForward(int)": {"Returns": [], "Parameters": [["int", "int: the number of steps to take back or forward in the back forward list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Goes to the history item that is the number of steps away from the current item. Steps is negative if backward and positive if forward.", "history": "Added in API level 1", "FullName": "public void goBackOrForward (int steps)"}, "getHandler()": {"Returns": [["@B_android#os#Handler_E@", "A handler associated with the thread running the View. This handler can be used to pump events in the UI events queue."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Handler getHandler ()"}, "getWebViewClassLoader()": {"Returns": [["@B_java#lang#ClassLoader_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#lang#ClassLoader_E@ used to load internal WebView classes. This method is meant for use by the WebView Support Library, there is no reason to use this method otherwise.", "history": "Added in API level 28", "FullName": "public static ClassLoader getWebViewClassLoader ()"}, "canZoomOut()": {"Returns": [["boolean", "true if this WebView can be zoomed out"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer @B_android#webkit#WebViewClient#onScaleChanged_E@. Gets whether this WebView can be zoomed out.", "history": "Added in API level 11 Deprecated in API level 17", "FullName": "public boolean canZoomOut ()"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onCheckIsTextEditor()": {"Returns": [["boolean", "Returns true if this view is a text editor, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. Subclasses should override this if they implement @B_android#view#View#onCreateInputConnection_E@ to return true if a call on that method would return a non-null InputConnection, and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view. The default implementation always returns false. This does not mean that its @B_android#view#View#onCreateInputConnection_E@ will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.", "history": "Added in API level 3", "FullName": "public boolean onCheckIsTextEditor ()"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "clearCache(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if false, only the RAM cache is cleared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the resource cache. Note that the cache is per-application, so this will clear the cache for all WebViews used.", "history": "Added in API level 1", "FullName": "public void clearCache (boolean includeDiskFiles)"}, "flingScroll(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void flingScroll (int vx, int vy)"}, "addJavascriptInterface(java.lang.Object,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the Java object to inject into this WebView's JavaScript context. null values are ignored."], ["@B_java#lang#String_E@", "String: the name used to expose the object in JavaScript"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Injects the supplied Java object into this WebView. The object is injected into all frames of the web page, including all the iframes, using the supplied name. This allows the Java object's methods to be accessed from JavaScript. For applications targeted to API level @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR1_E@ and above, only public methods that are annotated with @B_android#webkit#JavascriptInterface_E@ can be accessed from JavaScript. For applications targeted to API level @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ or below, all public methods (including the inherited ones) can be accessed, see the important security note below for implications. Note that injected objects will not appear in JavaScript until the page is next (re)loaded. JavaScript should be enabled before injecting the object. For example: This method can be used to allow JavaScript to control the host application. This is a powerful feature, but also presents a security risk for apps targeting @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ or earlier. Apps that target a version later than @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ are still vulnerable if the app runs on a device running Android earlier than 4.2. The most secure way to use this method is to target @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR1_E@ and to ensure the method is called only when running on Android 4.2 or later. With these older versions, JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing untrusted content could allow an attacker to manipulate the host application in unintended ways, executing Java code with the permissions of the host application. Use extreme care when using this method in a WebView which could contain untrusted content. JavaScript interacts with Java object on a private, background thread of this WebView. Care is therefore required to maintain thread safety. Because the object is exposed to all the frames, any frame could obtain the object name and call methods on it. There is no way to tell the calling frame's origin from the app side, so the app must not assume that the caller is trustworthy unless the app can guarantee that no third party content is ever loaded into the WebView even inside an iframe. The Java object's fields are not accessible. For applications targeted to API level @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ and above, methods of injected Java objects are enumerable from JavaScript.", "history": "Added in API level 1", "FullName": "public void addJavascriptInterface (Object object, String name)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "Added in API level 1", "FullName": "public void computeScroll ()"}, "onCreateInputConnection(android.view.inputmethod.EditorInfo)": {"Returns": [["@B_android#view#inputmethod#InputConnection_E@", "no returns description in source"]], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Fill in with attribute information about the connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new InputConnection for an InputMethod to interact with the WebView. This is similar to @B_android#view#View#onCreateInputConnection_E@ but note that WebView calls InputConnection methods on a thread other than the UI thread. If these methods are overridden, then the overriding methods should respect thread restrictions when calling View methods or accessing data.", "history": "Added in API level 3", "FullName": "public InputConnection onCreateInputConnection (EditorInfo outAttrs)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 1", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does a best-effort attempt to pause any processing that can be paused safely, such as animations and geolocation. Note that this call does not pause JavaScript. To pause JavaScript globally, use @B_android#webkit#WebView#pauseTimers_E@. To resume WebView, call @B_android#webkit#WebView#onResume_E@.", "history": "Added in API level 11", "FullName": "public void onPause ()"}, "WebView(android.content.Context,android.util.AttributeSet,int,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: an Activity Context to access application assets"], ["@B_android#util#AttributeSet_E@", "AttributeSet: an AttributeSet passed to our parent"], ["int", "int: an attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["boolean", "boolean: whether this WebView will be initialized in private mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Private browsing is no longer supported directly via WebView and will be removed in a future release. Prefer using @B_android#webkit#WebSettings_E@, @B_android#webkit#WebViewDatabase_E@, @B_android#webkit#CookieManager_E@ and @B_android#webkit#WebStorage_E@ for fine-grained control of privacy data. Constructs a new WebView with layout parameters and a default style.", "history": "Added in API level 11", "FullName": "public WebView (Context context, AttributeSet attrs, int defStyleAttr, boolean privateBrowsing)"}, "canGoBack()": {"Returns": [["boolean", "true if this WebView has a back history item"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this WebView has a back history item.", "history": "Added in API level 1", "FullName": "public boolean canGoBack ()"}, "removeJavascriptInterface(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name used to expose the object in JavaScript This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously injected Java object from this WebView. Note that the removal will not be reflected in JavaScript until the page is next (re)loaded. See @B_android#webkit#WebView#addJavascriptInterface_E@.", "history": "Added in API level 11", "FullName": "public void removeJavascriptInterface (String name)"}, "getVisibleTitleHeight()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the visible height (in pixels) of the embedded title bar (if any).", "history": "Since: API Level 11", "FullName": "public int getVisibleTitleHeight ()"}, "getCurrentWebViewPackage()": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "the current WebView package, or null if there is none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If WebView has already been loaded into the current process this method will return the package that was used to load it. Otherwise, the package that would be used if the WebView was loaded right now will be returned; this does not cause WebView to be loaded, so this information may become outdated at any time. The WebView package changes either when the current WebView package is updated, disabled, or uninstalled. It can also be changed through a Developer Setting. If the WebView package changes, any app process that has loaded WebView will be killed. The next time the app starts and loads WebView it will use the new WebView package instead.", "history": "Added in API level 26", "FullName": "public static PackageInfo getCurrentWebViewPackage ()"}, "postWebMessage(android.webkit.WebMessage,android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#webkit#WebMessage_E@", "WebMessage: the WebMessage"], ["@B_android#net#Uri_E@", "Uri: the target origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Post a message to main frame. The embedded application can restrict the messages to a certain target origin. See A target origin can be set as a wildcard (\"*\"). However this is not recommended. See the page above for security issues. Content loaded via @B_android#webkit#WebView#loadData_E@ will not have a valid origin, and thus cannot be sent messages securely. If you need to send messages using this function, you should use @B_android#webkit#WebView#loadDataWithBaseURL_E@ with a valid HTTP or HTTPS baseUrl to define a valid origin that can be used for messaging.", "history": "Added in API level 23", "FullName": "public void postWebMessage (WebMessage message, Uri targetOrigin)"}, "loadUrl(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the resource to load"], ["@B_java#util#Map_E@", "Map: the additional headers to be used in the HTTP request for this URL, specified as a map from name to value. Note that if this map contains any of the headers that are set by default by this WebView, such as those controlling caching, accept types or the User-Agent, their values may be overridden by this WebView's defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the given URL with the specified additional HTTP headers. Also see compatibility note on @B_android#webkit#WebView#evaluateJavascript_E@.", "history": "Added in API level 8", "FullName": "public void loadUrl (String url, Map<String, String> additionalHttpHeaders)"}, "setCertificate(android.net.http.SslCertificate)": {"Returns": [], "Parameters": [["@B_android#net#http#SslCertificate_E@", "SslCertificate no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calling this function has no useful effect, and will be ignored in future releases. Sets the SSL certificate for the main top-level page.", "history": "Added in API level 1 Deprecated in API level 17", "FullName": "public void setCertificate (SslCertificate certificate)"}, "resumeTimers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes all layout, parsing, and JavaScript timers for all WebViews. This will resume dispatching all timers.", "history": "Added in API level 1", "FullName": "public void resumeTimers ()"}, "createPrintDocumentAdapter()": {"Returns": [["@B_android#print#PrintDocumentAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebView#createPrintDocumentAdapter_E@ which requires user to provide a print document name.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public PrintDocumentAdapter createPrintDocumentAdapter ()"}, "setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the Executor on which @B_android#webkit#WebViewRenderProcessClient_E@ callbacks will execute. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#webkit#WebViewRenderProcessClient_E@", "WebViewRenderProcessClient: the @B_android#webkit#WebViewRenderProcessClient_E@ object. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the renderer client object associated with this WebView. The renderer client encapsulates callbacks relevant to WebView renderer state. See @B_android#webkit#WebViewRenderProcessClient_E@ for details. Although many WebView instances may share a single underlying renderer, and renderers may live either in the application process, or in a sandboxed process that is isolated from the application process, instances of @B_android#webkit#WebViewRenderProcessClient_E@ are set per-WebView. Callbacks represent renderer events from the perspective of this WebView, and may or may not be correlated with renderer events affecting other WebViews.", "history": "Added in API level 29", "FullName": "public void setWebViewRenderProcessClient (Executor executor, WebViewRenderProcessClient webViewRenderProcessClient)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event being processed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle generic motion events. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The @B_android#view#MotionEvent#getSource_E@ of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ are delivered to the view under the pointer. All other generic motion events are delivered to the focused view.", "history": "Added in API level 12", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "requestFocus(int,android.graphics.Rect)": {"Returns": [["boolean", "Whether this view or one of its descendants actually took focus."]], "Parameters": [["int", "int: One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle (in this View's coordinate system) to give a finer grained hint about where focus is coming from. May be null if there is no hint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. The rectangle can help give larger views a finer grained hint about where focus is coming from, and therefore, where to show selection, or forward focus change internally. A view will not actually take focus if it is not focusable (@B_android#view#View#isFocusable_E@ returns false), or if it is focusable and it is not focusable in touch mode (@B_android#view#View#isFocusableInTouchMode_E@) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has @B_android#view#ViewGroup#getDescendantFocusability_E@ equal to @B_android#view#ViewGroup#FOCUS_BLOCK_DESCENDANTS_E@. See also @B_android#view#View#focusSearch_E@, which is what you call to say that you have focus, and you want your parent to look for the next one. You may wish to override this method if your custom @B_android#view#View_E@ has an internal @B_android#view#View_E@ that it wishes to forward the request to. Looks for a view to give focus to respecting the setting specified by @B_android#view#ViewGroup#getDescendantFocusability_E@. Uses @B_android#view#ViewGroup#onRequestFocusInDescendants_E@ to find focus within the children of this group when appropriate.", "history": "Added in API level 1", "FullName": "public boolean requestFocus (int direction, Rect previouslyFocusedRect)"}, "setWebChromeClient(android.webkit.WebChromeClient)": {"Returns": [], "Parameters": [["@B_android#webkit#WebChromeClient_E@", "WebChromeClient: an implementation of WebChromeClient"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#getWebChromeClient_E@"], "Permissions": [], "Description": "Sets the chrome handler. This is an implementation of WebChromeClient for use in handling JavaScript dialogs, favicons, titles, and the progress. This will replace the current handler.", "history": "Added in API level 1", "FullName": "public void setWebChromeClient (WebChromeClient client)"}, "zoomIn()": {"Returns": [["boolean", "true if zoom in succeeds, false if no zoom changes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs zoom in in this WebView.", "history": "Added in API level 1", "FullName": "public boolean zoomIn ()"}, "goForward()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Goes forward in the history of this WebView.", "history": "Added in API level 1", "FullName": "public void goForward ()"}, "flingScroll(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void flingScroll (int vx, int vy)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "reload()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reloads the current URL.", "history": "Added in API level 1", "FullName": "public void reload ()"}, "findAll(java.lang.String)": {"Returns": [["int", "the number of occurrences of the String \"find\" that were found"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to find"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#setFindListener_E@"], "Permissions": [], "Description": "@B_android#webkit#WebView#findAllAsync_E@ is preferred. Finds all instances of find on the page and highlights them. Notifies any registered @B_android#webkit#WebView#FindListener_E@.", "history": "Added in API level 3 Deprecated in API level 16", "FullName": "public int findAll (String find)"}, "clearClientCertPreferences(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: A runnable to be invoked when client certs are cleared. The runnable will be called in UI thread. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the client certificate preferences stored in response to proceeding/cancelling client cert requests. Note that WebView automatically clears these preferences when the system keychain is updated. The preferences are shared by all the WebViews that are created by the embedder application.", "history": "Added in API level 21", "FullName": "public static void clearClientCertPreferences (Runnable onCleared)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "findHierarchyView(java.lang.String, int)": {"Returns": [["", "the View to capture from, or null if not found"]], "Parameters": [["@B_java#lang#String_E@", "The className of the view to find"], ["int", "The hashCode of the view to find"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a View to enable grabbing screenshots from custom children returned in dumpViewHierarchyWithProperties.", "history": "", "FullName": "public abstract View findHierarchyView (String className, int hashCode)"}, "loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL to use as the page's base URL. If null defaults to 'about:blank'. This value may be null."], ["@B_java#lang#String_E@", "String: a String of data in the given encoding"], ["@B_java#lang#String_E@", "String: the MIME type of the data, e.g. 'text/html'. This value may be null."], ["@B_java#lang#String_E@", "String: the encoding of the data This value may be null."], ["@B_java#lang#String_E@", "String: the URL to use as the history entry. If null defaults to 'about:blank'. If non-null, this must be a valid URL. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the given data into this WebView, using baseUrl as the base URL for the content. The base URL is used both to resolve relative URLs and when applying JavaScript's same origin policy. The historyUrl is used for the history entry. The mimeType parameter specifies the format of the data. If WebView can't handle the specified MIME type, it will download the data. If null, defaults to 'text/html'. Note that content specified in this way can access local device files (via 'file' scheme URLs) only if baseUrl specifies a scheme other than 'http', 'https', 'ftp', 'ftps', 'about' or 'javascript'. If the base URL uses the data scheme, this method is equivalent to calling @B_android#webkit#WebView#loadData_E@ and the historyUrl is ignored, and the data will be treated as part of a data: URL, including the requirement that the content be URL-encoded or base64 encoded. If the base URL uses any other scheme, then the data will be loaded into the WebView as a plain string (i.e. not part of a data URL) and any URL-encoded entities in the string will not be decoded. Note that the baseUrl is sent in the 'Referer' HTTP header when requesting subresources (images, etc.) of the page loaded using this method. If a valid HTTP or HTTPS base URL is not specified in baseUrl, then content loaded using this method will have a window.origin value of \"null\". This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example, event sources in DOM event handlers or web messages), because malicious content can also create frames with a null origin. If you need to identify the main frame's origin in a trustworthy way, you should use a valid HTTP or HTTPS base URL to set the origin.", "history": "Added in API level 1", "FullName": "public void loadDataWithBaseURL (String baseUrl, String data, String mimeType, String encoding, String historyUrl)"}, "getSafeBrowsingPrivacyPolicyUrl()": {"Returns": [["@B_android#net#Uri_E@", "the url pointing to a privacy policy document which can be displayed to users. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a URL pointing to the privacy policy for Safe Browsing reporting.", "history": "Added in API level 27", "FullName": "public static Uri getSafeBrowsingPrivacyPolicyUrl ()"}, "showFindDialog(java.lang.String, boolean)": {"Returns": [["boolean", "true if the find dialog is shown, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: if non-null, will be the initial text to search for. Otherwise, the last String searched for in this WebView will be used to start."], ["boolean", "boolean: if true, show the IME, assuming the user will begin typing. If false and text is non-null, perform a find all."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method does not work reliably on all Android versions; implementing a custom find dialog using WebView.findAllAsync() provides a more robust solution. Starts an ActionMode for finding text in this WebView. Only works if this WebView is attached to the view system.", "history": "added in API level 11", "FullName": "public boolean showFindDialog (String text, boolean showIme)"}, "setBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: the color of the background"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the background color for this view.", "history": "Added in API level 1", "FullName": "public void setBackgroundColor (int color)"}, "setLayerType(int,android.graphics.Paint)": {"Returns": [], "Parameters": [["int", "int: The type of layer to use with this view, must be one of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@ Value is @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@, or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is @B_android#view#View#LAYER_TYPE_NONE_E@ This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the type of layer backing this view. The layer can be @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@. A layer is associated with an optional @B_android#graphics#Paint_E@ instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer: @B_android#graphics#Paint#getAlpha_E@ @B_android#graphics#Paint#getXfermode_E@ @B_android#graphics#Paint#getColorFilter_E@ If this view has an alpha value set to < 1.0 by calling @B_android#view#View#setAlpha_E@, the alpha value of the layer's paint is superseded by this view's alpha value. Refer to the documentation of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ and @B_android#view#View#LAYER_TYPE_HARDWARE_E@ for more information on when and how to use layers.", "history": "Added in API level 11", "FullName": "public void setLayerType (int layerType, Paint paint)"}, "postUrl(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the resource to load"], ["byte[]", "byte: the data will be passed to \"POST\" request, which must be be \"application/x-www-form-urlencoded\" encoded."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the URL with postData using \"POST\" method into this WebView. If url is not a network URL, it will be loaded with @B_android#webkit#WebView#loadUrl_E@ instead, ignoring the postData param.", "history": "Added in API level 5", "FullName": "public void postUrl (String url, byte[] postData)"}, "setTextClassifier(android.view.textclassifier.TextClassifier)": {"Returns": [], "Parameters": [["@B_android#view#textclassifier#TextClassifier_E@", "TextClassifier: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#view#textclassifier#TextClassifier_E@ for this WebView.", "history": "Added in API level 27", "FullName": "public void setTextClassifier (TextClassifier textClassifier)"}, "startSafeBrowsing(android.content.Context,android.webkit.ValueCallback<java.lang.Boolean>)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Application Context. This value must never be null."], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: will be called on the UI thread with true if initialization is successful, false otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts Safe Browsing initialization. URL loads are not guaranteed to be protected by Safe Browsing until after callback is invoked with true. Safe Browsing is not fully supported on all devices. For those devices callback will receive false. This should not be called if Safe Browsing has been disabled by manifest tag or @B_android#webkit#WebSettings#setSafeBrowsingEnabled_E@. This prepares resources used for Safe Browsing. This should be called with the Application Context (and will always use the Application context to do its work regardless).", "history": "Added in API level 27", "FullName": "public static void startSafeBrowsing (Context context, ValueCallback<Boolean> callback)"}, "setDownloadListener(android.webkit.DownloadListener)": {"Returns": [], "Parameters": [["@B_android#webkit#DownloadListener_E@", "DownloadListener: an implementation of DownloadListener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the interface to be used when content can not be handled by the rendering engine, and should be downloaded instead. This will replace the current handler.", "history": "Added in API level 1", "FullName": "public void setDownloadListener (DownloadListener listener)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int ow, int oh)"}, "documentHasImages(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: the message that will be dispatched with the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the document to see if it contains any image references. The message object will be dispatched with arg1 being set to 1 if images were found and 0 if the document does not reference any images.", "history": "Added in API level 1", "FullName": "public void documentHasImages (Message response)"}, "performLongClick()": {"Returns": [["boolean", "true if one of the above receivers consumed the event, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls this view's OnLongClickListener, if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event.", "history": "Added in API level 1", "FullName": "public boolean performLongClick ()"}, "copyBackForwardList()": {"Returns": [["@B_android#webkit#WebBackForwardList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the WebBackForwardList for this WebView. This contains the back/forward list for use in querying each item in the history stack. This is a copy of the private WebBackForwardList so it contains only a snapshot of the current state. Multiple calls to this method may return different objects. The object returned from this method will not be updated to reflect any new state.", "history": "Added in API level 1", "FullName": "public WebBackForwardList copyBackForwardList ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "disablePlatformNotifications()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables platform notifications of data state and proxy changes. Notifications are enabled by default.", "history": "Since: API Level 1", "FullName": "public static void disablePlatformNotifications ()"}, "getWebViewLooper()": {"Returns": [["@B_android#os#Looper_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#os#Looper_E@ corresponding to the thread on which WebView calls must be made.", "history": "Added in API level 28", "FullName": "public Looper getWebViewLooper ()"}, "getTextClassifier()": {"Returns": [["@B_android#view#textclassifier#TextClassifier_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#view#textclassifier#TextClassifier_E@ used by this WebView. If no TextClassifier has been set, this WebView uses the default set by the system.", "history": "Added in API level 27", "FullName": "public TextClassifier getTextClassifier ()"}, "clearSslPreferences()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the SSL preferences table stored in response to proceeding with SSL certificate errors.", "history": "Added in API level 1", "FullName": "public void clearSslPreferences ()"}, "setInitialScale(int)": {"Returns": [], "Parameters": [["int", "int: the initial scale in percent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the initial scale for this WebView. 0 means default. The behavior for the default scale depends on the state of @B_android#webkit#WebSettings#getUseWideViewPort_E@ and @B_android#webkit#WebSettings#getLoadWithOverviewMode_E@. If the content fits into the WebView control by width, then the zoom is set to 100%. For wide content, the behavior depends on the state of @B_android#webkit#WebSettings#getLoadWithOverviewMode_E@. If its value is true, the content will be zoomed out to be fit by width into the WebView control, otherwise not. If initial scale is greater than 0, WebView starts with this value as initial scale. Please note that unlike the scale properties in the viewport meta tag, this method doesn't take the screen density into account.", "history": "Added in API level 1", "FullName": "public void setInitialScale (int scaleInPercent)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroys the internal state of this WebView. This method should be called after this WebView has been removed from the view system. No other methods may be called on this WebView after destroy.", "history": "Added in API level 1", "FullName": "public void destroy ()"}, "canZoomIn()": {"Returns": [["boolean", "true if this WebView can be zoomed in"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer @B_android#webkit#WebViewClient#onScaleChanged_E@. Gets whether this WebView can be zoomed in.", "history": "Added in API level 11 Deprecated in API level 17", "FullName": "public boolean canZoomIn ()"}, "setSafeBrowsingWhitelist(java.util.List<java.lang.String>,android.webkit.ValueCallback<java.lang.Boolean>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list of hosts This value must never be null."], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: will be called with true if hosts are successfully added to the whitelist. It will be called with false if any hosts are malformed. The callback will be run on the UI thread This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the list of hosts (domain names/IP addresses) that are exempt from SafeBrowsing checks. The list is global for all the WebViews. Each rule should take one of these: All other rules, including wildcards, are invalid. The correct syntax for hosts is defined by", "history": "Added in API level 27", "FullName": "public static void setSafeBrowsingWhitelist (List<String> hosts, ValueCallback<Boolean> callback)"}, "getScale()": {"Returns": [["float", "the current scale"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer @B_android#webkit#WebViewClient#onScaleChanged_E@. Gets the current scale of this WebView.", "history": "Added in API level 1 Deprecated in API level 17", "FullName": "public float getScale ()"}, "getUrl()": {"Returns": [["@B_java#lang#String_E@", "the URL for the current page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the URL for the current page. This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun, the current page may not have changed.", "history": "Added in API level 1", "FullName": "public String getUrl ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "getRendererPriorityWaivedWhenNotVisible()": {"Returns": [["boolean", "whether this WebView requests a priority of @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@ when not visible."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this WebView requests a priority of @B_android#webkit#WebView#RENDERER_PRIORITY_WAIVED_E@ when not visible.", "history": "Added in API level 26", "FullName": "public boolean getRendererPriorityWaivedWhenNotVisible ()"}, "onProvideAutofillVirtualStructure(android.view.ViewStructure,int)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure: fill in with virtual children data for autofill purposes."], ["int", "int: optional flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates a @B_android#view#ViewStructure_E@ containing virtual children to fullfil an autofill request. This method should be used when the view manages a virtual structure under this view. For example, a view that draws input fields using @B_android#view#View#draw_E@. When implementing this method, subclasses must follow the rules below: Add virtual children by calling the @B_android#view#ViewStructure#newChild_E@ or @B_android#view#ViewStructure#asyncNewChild_E@ methods, where the id is an unique id identifying the children in the virtual structure. The children hierarchy can have multiple levels if necessary, but ideally it should exclude intermediate levels that are irrelevant for autofill; that would improve the autofill performance. Also implement @B_android#view#View#autofill_E@ to autofill the virtual children. Set the autofill properties of the child structure as defined by @B_android#view#View#onProvideAutofillStructure_E@, using @B_android#view#ViewStructure#setAutofillId_E@ to set its autofill id. Call @B_android#view#autofill#AutofillManager#notifyViewEntered_E@ and/or @B_android#view#autofill#AutofillManager#notifyViewExited_E@ when the focused virtual child changed. Override @B_android#view#View#isVisibleToUserForAutofill_E@ to allow the platform to query whether a given virtual view is visible to the user in order to support triggering save when all views of interest go away. Call @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ when the value of a virtual child changed. Call @B_android#view#autofill#AutofillManager#notifyViewVisibilityChanged_E@ when the visibility of a virtual child changed. Call @B_android#view#autofill#AutofillManager#notifyViewClicked_E@ when a virtual child is clicked. Call @B_android#view#autofill#AutofillManager#commit_E@ when the autofill context of the view structure changed and the current context should be committed (for example, when the user tapped a SUBMIT button in an HTML page). Call @B_android#view#autofill#AutofillManager#cancel_E@ when the autofill context of the view structure changed and the current context should be canceled (for example, when the user tapped a CANCEL button in an HTML page). Provide ways for users to manually request autofill by calling @B_android#view#autofill#AutofillManager#requestAutofill_E@. The left and top values set in @B_android#view#ViewStructure#setDimens_E@ must be relative to the next @B_android#view#View#isImportantForAutofill_E@ predecessor view included in the structure. Views with virtual children support the Autofill Framework mainly by: Providing the metadata defining what the virtual children mean and how they can be autofilled. Implementing the methods that autofill the virtual children. This method is responsible for the former; @B_android#view#View#autofill_E@ is responsible for the latter. The @B_android#view#ViewStructure_E@ traditionally represents a @B_android#view#View_E@, while for web pages it represent HTML nodes. Hence, it's necessary to \"map\" the HTML properties in a way that is understood by the @B_android#service#autofill#AutofillService_E@ implementations: If the WebView implementation can determine that the value of a field was set statically (for example, not through Javascript), it should also call structure.setDataIsSensitive(false). For example, an HTML form with 2 fields for username and password: Would map to:", "history": "Added in API level 26", "FullName": "public void onProvideAutofillVirtualStructure (ViewStructure structure, int flags)"}, "pageUp(boolean)": {"Returns": [["boolean", "true if the page was scrolled"]], "Parameters": [["boolean", "boolean: true to jump to the top of the page"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scrolls the contents of this WebView up by half the view size.", "history": "Added in API level 1", "FullName": "public boolean pageUp (boolean top)"}, "findAddress(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the address, or if no address is found, null"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to search for addresses"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is superseded by @B_android#view#textclassifier#TextClassifier#generateLinks_E@. Avoid using this method even when targeting API levels where no alternative is available. Gets the first substring which appears to be the address of a physical location. Only addresses in the United States can be detected, which must consist of: a house number a street name a street type (Road, Circle, etc), either spelled out or abbreviated a city name a state or territory, either spelled out or two-letter abbr an optional 5 digit or 9 digit zip code All names must be correctly capitalized, and the zip code, if present, must be valid for the state. The street type must be a standard USPS spelling or abbreviation. The state or territory must also be spelled or abbreviated using USPS standards. The house number may not exceed five digits. @B_android#os#Build#VERSION_CODES#O_MR1_E@ and earlier, it also causes the entire WebView implementation to be loaded and initialized, which can throw @B_android#util#AndroidRuntimeException_E@ or other exceptions if the WebView implementation is currently being updated.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public static String findAddress (String addr)"}, "onFinishTemporaryDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after @B_android#view#View#onStartTemporaryDetach_E@ when the container is done changing the view.", "history": "Added in API level 3", "FullName": "public void onFinishTemporaryDetach ()"}, "clearHistory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells this WebView to clear its internal back/forward list.", "history": "Added in API level 1", "FullName": "public void clearHistory ()"}, "invokeZoomPicker()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invokes the graphical zoom picker widget for this WebView. This will result in the zoom widget appearing on the screen to control the zoom level of this WebView.", "history": "Added in API level 1", "FullName": "public void invokeZoomPicker ()"}, "computeVerticalScrollExtent()": {"Returns": [["int", "the vertical extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollOffset_E@. The default extent is the drawing height of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollExtent ()"}, "getZoomControls()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a view containing zoom controls i.e. +/- buttons. The caller is in charge of installing this view to the view hierarchy. This view will become visible when the user starts scrolling via touch and fade away if the user does not interact with it. API version 3 introduces a built-in zoom mechanism that is shown automatically by the MapView. This is the preferred approach for showing the zoom UI.", "history": "Since: API Level 1", "FullName": "public View getZoomControls ()"}, "getOriginalUrl()": {"Returns": [["@B_java#lang#String_E@", "the URL that was originally requested for the current page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the original URL for the current page. This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun, the current page may not have changed. Also, there may have been redirects resulting in a different URL to that originally requested.", "history": "Added in API level 3", "FullName": "public String getOriginalUrl ()"}, "findAllAsync(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string to find."]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#setFindListener_E@"], "Permissions": [], "Description": "Finds all instances of find on the page and highlights them, asynchronously. Notifies any registered @B_android#webkit#WebView#FindListener_E@. Successive calls to this will cancel any pending searches.", "history": "Added in API level 16", "FullName": "public void findAllAsync (String find)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "onStartTemporaryDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when a container is going to temporarily detach a child, with @B_android#view#ViewGroup#detachViewFromParent_E@. It will either be followed by @B_android#view#View#onFinishTemporaryDetach_E@ or @B_android#view#View#onDetachedFromWindow_E@ when the container is done.", "history": "Added in API level 3", "FullName": "public void onStartTemporaryDetach ()"}, "onChildViewAdded(android.view.View,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view in which a child was added"], ["@B_android#view#View_E@", "View: the new child view added in the hierarchy"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "WebView no longer needs to implement ViewGroup.OnHierarchyChangeListener. This method does nothing now. Called when a new child is added to a parent view.", "history": "Added in API level 1", "FullName": "public void onChildViewAdded (View parent, View child)"}, "setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host to which the credentials apply"], ["@B_java#lang#String_E@", "String: the realm to which the credentials apply"], ["@B_java#lang#String_E@", "String: the username"], ["@B_java#lang#String_E@", "String: the password"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebViewDatabase#setHttpAuthUsernamePassword_E@ instead Stores HTTP authentication credentials for a given host and realm to the @B_android#webkit#WebViewDatabase_E@ instance.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void setHttpAuthUsernamePassword (String host, String realm, String username, String password)"}, "getCertificate()": {"Returns": [["@B_android#net#http#SslCertificate_E@", "the SSL certificate for the main top-level page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the SSL certificate for the main top-level page or null if there is no certificate (the site is not secure).", "history": "Added in API level 1", "FullName": "public SslCertificate getCertificate ()"}, "pauseTimers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pauses all layout, parsing, and JavaScript timers for all WebViews. This is a global requests, not restricted to just this WebView. This can be useful if the application has been paused.", "history": "Added in API level 1", "FullName": "public void pauseTimers ()"}, "onOverScrolled(int,int,boolean,boolean)": {"Returns": [], "Parameters": [["int", "int: New X scroll value in pixels"], ["int", "int: New Y scroll value in pixels"], ["boolean", "boolean: True if scrollX was clamped to an over-scroll boundary"], ["boolean", "boolean: True if scrollY was clamped to an over-scroll boundary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#overScrollBy_E@ to respond to the results of an over-scroll operation.", "history": "Added in API level 9", "FullName": "protected void onOverScrolled (int scrollX, int scrollY, boolean clampedX, boolean clampedY)"}, "isPrivateBrowsingEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether private browsing is enabled in this WebView.", "history": "Added in API level 11", "FullName": "public boolean isPrivateBrowsingEnabled ()"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "Added in API level 1", "FullName": "public void onWindowFocusChanged (boolean hasWindowFocus)"}, "goBack()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Goes back in the history of this WebView.", "history": "Added in API level 1", "FullName": "public void goBack ()"}, "zoomOut()": {"Returns": [["boolean", "true if zoom out succeeds, false if no zoom changes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs zoom out in this WebView.", "history": "Added in API level 1", "FullName": "public boolean zoomOut ()"}, "getWebViewClient()": {"Returns": [["@B_android#webkit#WebViewClient_E@", "the WebViewClient, or a default client if not yet set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#setWebViewClient_E@"], "Permissions": [], "Description": "Gets the WebViewClient.", "history": "Added in API level 26", "FullName": "public WebViewClient getWebViewClient ()"}, "setScrollBarStyle(int)": {"Returns": [], "Parameters": [["int", "int: the style of the scrollbars. Should be one of SCROLLBARS_INSIDE_OVERLAY, SCROLLBARS_INSIDE_INSET, SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET. Value is @B_android#view#View#SCROLLBARS_INSIDE_OVERLAY_E@, @B_android#view#View#SCROLLBARS_INSIDE_INSET_E@, @B_android#view#View#SCROLLBARS_OUTSIDE_OVERLAY_E@, or @B_android#view#View#SCROLLBARS_OUTSIDE_INSET_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the style of the scrollbars. The scrollbars can be overlaid or inset. When inset, they add to the padding of the view. And the scrollbars can be drawn inside the padding area or on the edge of the view. For example, if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable, you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to appear at the edge of the view, ignoring the padding, then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.", "history": "Added in API level 1", "FullName": "public void setScrollBarStyle (int style)"}, "savePassword(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host that required the credentials"], ["@B_java#lang#String_E@", "String: the username for the given host"], ["@B_java#lang#String_E@", "String: the password for the given host"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebViewDatabase#clearUsernamePassword_E@", "@B_android#webkit#WebViewDatabase#hasUsernamePassword_E@"], "Permissions": [], "Description": "Saving passwords in WebView will not be supported in future versions. Sets a username and password pair for the specified host. This data is used by the WebView to autocomplete username and password fields in web forms. Note that this is unrelated to the credentials used for HTTP authentication.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public void savePassword (String host, String username, String password)"}, "setWebViewClient(android.webkit.WebViewClient)": {"Returns": [], "Parameters": [["@B_android#webkit#WebViewClient_E@", "WebViewClient: an implementation of WebViewClient"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#getWebViewClient_E@"], "Permissions": [], "Description": "Sets the WebViewClient that will receive various notifications and requests. This will replace the current handler.", "history": "Added in API level 1", "FullName": "public void setWebViewClient (WebViewClient client)"}, "setVerticalScrollbarOverlay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if vertical scrollbar should have overlay style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method has no effect. Specifies whether the vertical scrollbar has overlay style.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setVerticalScrollbarOverlay (boolean overlay)"}, "setOverScrollMode(int)": {"Returns": [], "Parameters": [["int", "int: The new over-scroll mode for this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the over-scroll mode for this view. Valid over-scroll modes are @B_android#view#View#OVER_SCROLL_ALWAYS_E@, @B_android#view#View#OVER_SCROLL_IF_CONTENT_SCROLLS_E@ (allow over-scrolling only if the view content is larger than the container), or @B_android#view#View#OVER_SCROLL_NEVER_E@. Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.", "history": "Added in API level 9", "FullName": "public void setOverScrollMode (int mode)"}, "onDragEvent(android.view.DragEvent)": {"Returns": [["boolean", "true if the method was successful, otherwise false. The method should return true in response to an action type of DragEvent.ACTION_DRAG_STARTED to receive drag events for the current operation. The method should also return true in response to an action type of DragEvent.ACTION_DROP if it consumed the drop, or false if it didn't. For all other events, the return value is ignored."]], "Parameters": [["@B_android#view#DragEvent_E@", "DragEvent: The @B_android#view#DragEvent_E@ sent by the system. The @B_android#view#DragEvent#getAction_E@ method returns an action type constant defined in DragEvent, indicating the type of drag event represented by this object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles drag events sent by the system following a call to @B_android#view#View#startDragAndDrop_E@. When the system calls this method, it passes a @B_android#view#DragEvent_E@ object. A call to @B_android#view#DragEvent#getAction_E@ returns one of the action type constants defined in DragEvent. The method uses these to determine what is happening in the drag and drop operation.", "history": "Added in API level 11", "FullName": "public boolean onDragEvent (DragEvent event)"}, "computeHorizontalScrollOffset()": {"Returns": [["int", "the horizontal offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollRange_E@ and @B_android#view#View#computeHorizontalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 1", "FullName": "protected int computeHorizontalScrollOffset ()"}, "saveState(android.os.Bundle)": {"Returns": [["@B_android#webkit#WebBackForwardList_E@", "the same copy of the back/forward list used to save the state, null if the method fails."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the Bundle to store this WebView's state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the state of this WebView used in @B_android#app#Activity#onSaveInstanceState_E@. Please note that this method no longer stores the display data for this WebView. The previous behavior could potentially leak files if @B_android#webkit#WebView#restoreState_E@ was never called.", "history": "Added in API level 1", "FullName": "public WebBackForwardList saveState (Bundle outState)"}, "getContentHeight()": {"Returns": [["int", "the height of the HTML content"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the height of the HTML content.", "history": "Added in API level 1", "FullName": "public int getContentHeight ()"}, "getHttpAuthUsernamePassword(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the credentials as a String array, if found. The first element is the username and the second element is the password. null if no credentials are found."]], "Parameters": [["@B_java#lang#String_E@", "String: the host to which the credentials apply"], ["@B_java#lang#String_E@", "String: the realm to which the credentials apply"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebViewDatabase#getHttpAuthUsernamePassword_E@ instead Retrieves HTTP authentication credentials for a given host and realm from the @B_android#webkit#WebViewDatabase_E@ instance.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public String[] getHttpAuthUsernamePassword (String host, String realm)"}, "savePicture(android.os.Bundle, java.io.File)": {"Returns": [["", "true if the picture was successfully saved"]], "Parameters": [["@B_android#os#Bundle_E@", "a Bundle to store the display data"], ["@B_java#io#File_E@", "the file to store the serialized picture data. Will be overwritten with this WebView's picture data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the current display data to the Bundle given. Used in conjunction with @B_android#webkit#WebView#saveState_E@.", "history": "Since: API Level 3", "FullName": "public boolean savePicture (Bundle b, File dest)"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes a WebView after a previous call to @B_android#webkit#WebView#onPause_E@.", "history": "Added in API level 11", "FullName": "public void onResume ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the filename where the archive should be placed"], ["boolean", "boolean: if false, takes basename to be a file. If true, basename is assumed to be a directory in which a filename will be chosen according to the URL of the current page."], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: called after the web archive has been saved. The parameter for onReceiveValue will either be the filename under which the file was saved, or null if saving the file failed. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the current view as a web archive.", "history": "Added in API level 11", "FullName": "public void saveWebArchive (String basename, boolean autoname, ValueCallback<String> callback)"}, "setFindListener(android.webkit.WebView.FindListener)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView#FindListener_E@", "WebView.FindListener: an implementation of @B_android#webkit#WebView#FindListener_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the listener to be notified as find-on-page operations progress. This will replace the current listener.", "history": "Added in API level 16", "FullName": "public void setFindListener (WebView.FindListener listener)"}, "disableWebView()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if WebView has already been initialized in the current process."]], "SeeAlso": [], "Permissions": [], "Description": "Indicate that the current process does not intend to use WebView, and that an exception should be thrown if a WebView is created or any other methods in the android.webkit package are used. Applications with multiple processes may wish to call this in processes that are not intended to use WebView to avoid accidentally incurring the memory usage of initializing WebView in long-lived processes that have no need for it, and to prevent potential data directory conflicts (see @B_android#webkit#WebView#setDataDirectorySuffix_E@). For example, an audio player application with one process for its activities and another process for its playback service may wish to call this method in the playback service's @B_android#app#Service#onCreate_E@.", "history": "Added in API level 28", "FullName": "public static void disableWebView ()"}, "loadData(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String of data in the given encoding"], ["@B_java#lang#String_E@", "String: the MIME type of the data, e.g. 'text/html'. This value may be null."], ["@B_java#lang#String_E@", "String: the encoding of the data This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the given data into this WebView using a 'data' scheme URL. Note that JavaScript's same origin policy means that script running in a page loaded using this method will be unable to access content loaded using any scheme other than 'data', including 'http(s)'. To avoid this restriction, use @B_android#webkit#WebView#loadDataWithBaseURL_E@ with an appropriate base URL. The encoding parameter specifies whether the data is base64 or URL encoded. If the data is base64 encoded, the value of the encoding parameter must be \"base64\". HTML can be encoded with @B_android#util#Base64#encodeToString_E@ like so: For all other values of encoding (including null) it is assumed that the data uses ASCII encoding for octets inside the range of safe URL characters and use the standard %xx hex encoding of URLs for octets outside that range. See @B_android#os#Build#VERSION_CODES#Q_E@ or later must either use base64 or encode any # characters in the content as %23, otherwise they will be treated as the end of the content and the remaining text used as a document fragment identifier. The mimeType parameter specifies the format of the data. If WebView can't handle the specified MIME type, it will download the data. If null, defaults to 'text/html'. The 'data' scheme URL formed by this method uses the default US-ASCII charset. If you need to set a different charset, you should form a 'data' scheme URL which explicitly specifies a charset parameter in the mediatype portion of the URL and call @B_android#webkit#WebView#loadUrl_E@ instead. Note that the charset obtained from the mediatype portion of a data URL always overrides that specified in the HTML or XML document itself. Content loaded using this method will have a window.origin value of \"null\". This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example, event sources in DOM event handlers or web messages), because malicious content can also create frames with a null origin. If you need to identify the main frame's origin in a trustworthy way, you should use @B_android#webkit#WebView#loadDataWithBaseURL_E@ with a valid HTTP or HTTPS base URL to set the origin.", "history": "Added in API level 1", "FullName": "public void loadData (String data, String mimeType, String encoding)"}, "createWebMessageChannel()": {"Returns": [["@B_android#webkit#WebMessagePort_E@", "the two message ports that form the message channel."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a message channel to communicate with JS and returns the message ports that represent the endpoints of this message channel. The HTML5 message channel functionality is described The returned message channels are entangled and already in started state.", "history": "Added in API level 23", "FullName": "public WebMessagePort[] createWebMessageChannel ()"}, "getWebChromeClient()": {"Returns": [["@B_android#webkit#WebChromeClient_E@", "the WebChromeClient, or null if not yet set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#setWebChromeClient_E@"], "Permissions": [], "Description": "Gets the chrome handler.", "history": "Added in API level 26", "FullName": "public WebChromeClient getWebChromeClient ()"}, "setDataDirectorySuffix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The directory name suffix to be used for the current process. Must not contain a path separator."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if WebView has already been initialized in the current process."], ["@B_java#lang#IllegalArgumentException_E@", "if the suffix contains a path separator."]], "SeeAlso": [], "Permissions": [], "Description": "Define the directory used to store WebView data for the current process. The provided suffix will be used when constructing data and cache directory paths. If this API is not called, no suffix will be used. Each directory can be used by only one process in the application. If more than one process in an app wishes to use WebView, only one process can use the default directory, and other processes must call this API to define a unique suffix. This means that different processes in the same application cannot directly share WebView-related data, since the data directories must be distinct. Applications that use this API may have to explicitly pass data between processes. For example, login cookies may have to be copied from one process's cookie jar to the other using @B_android#webkit#CookieManager_E@ if both processes' WebViews are intended to be logged in. Most applications should simply ensure that all components of the app that rely on WebView are in the same process, to avoid needing multiple data directories. The @B_android#webkit#WebView#disableWebView_E@ method can be used to ensure that the other processes do not use WebView by accident in this case. This API must be called before any instances of WebView are created in this process and before any other methods in the android.webkit package are called by this process.", "history": "Added in API level 28", "FullName": "public static void setDataDirectorySuffix (String suffix)"}, "findNext(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the direction to search"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#setFindListener_E@"], "Permissions": [], "Description": "Highlights and scrolls to the next match found by @B_android#webkit#WebView#findAllAsync_E@, wrapping around page boundaries as necessary. Notifies any registered @B_android#webkit#WebView#FindListener_E@. If @B_android#webkit#WebView#findAllAsync_E@ has not been called yet, or if @B_android#webkit#WebView#clearMatches_E@ has been called since the last find operation, this function does nothing.", "history": "Added in API level 3", "FullName": "public void findNext (boolean forward)"}, "getFavicon()": {"Returns": [["@B_android#graphics#Bitmap_E@", "the favicon for the current page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the favicon for the current page. This is the favicon of the current page until WebViewClient.onReceivedIcon is called.", "history": "Added in API level 1", "FullName": "public Bitmap getFavicon ()"}, "emulateShiftHeld()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts this WebView into text selection mode. Do not rely on this functionality; it will be deprecated in the future.", "history": "Since: API Level 8", "FullName": "public void emulateShiftHeld ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AbsoluteLayout_E@"], "ClassName": "android.webkit.WebView", "ClassDesc": "A View that displays web pages. In most cases, we recommend using a standard web browser, like Chrome, to deliver content to the user. To learn more about web browsers, read the guide on WebView objects allow you to display web content as part of your activity layout, but lack some of the features of fully-developed browsers. A WebView is useful when you need increased control over the UI and advanced configuration options that will allow you to embed web pages in a specially-designed environment for your app. To learn more about WebView and alternatives for serving web content, read the documentation on"}