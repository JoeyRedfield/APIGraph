{"Functions": {"getTickMarkTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the tick mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setTickMarkTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the tick mark drawable, if specified.", "history": "Added in API level 24", "FullName": "public PorterDuff.Mode getTickMarkTintMode ()"}, "setSplitTrack(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the track should be split by the thumb"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the track should be split by the thumb. When true, the thumb's optical bounds will be clipped out of the track drawable, then the thumb will be drawn into the resulting gap.", "history": "Added in API level 21", "FullName": "public void setSplitTrack (boolean splitTrack)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "getThumbTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setThumbTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the thumb drawable, if specified.", "history": "Added in API level 21", "FullName": "public ColorStateList getThumbTintList ()"}, "setMin(int)": {"Returns": [], "Parameters": [["int", "int: the lower range of this progress bar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the lower range of the progress bar to", "history": "Added in API level 26", "FullName": "public void setMin (int min)"}, "AbsSeekBar(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AbsSeekBar (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getTickMarkTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the tick mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setTickMarkTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the tick mark drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getTickMarkTintBlendMode ()"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call. The default implementation will delegate @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_FORWARD_E@ to nested scrolling parents if @B_android#view#View#isNestedScrollingEnabled_E@ on this view.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "AbsSeekBar(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsSeekBar (Context context)"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "getThumbTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setThumbTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the thumb drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getThumbTintBlendMode ()"}, "setThumbTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getThumbTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the thumb drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#AbsSeekBar#setThumb_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setThumbTintList (ColorStateList tint)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "setMax(int)": {"Returns": [], "Parameters": [["int", "int: the upper range of this progress bar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the upper range of the progress bar", "history": "Added in API level 1", "FullName": "public void setMax (int max)"}, "getThumb()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current thumb drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the drawable used to represent the scroll thumb - the component that the user can drag back and forth indicating the current value by its position.", "history": "Added in API level 16", "FullName": "public Drawable getThumb ()"}, "getTickMark()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable displayed at each progress position"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Drawable getTickMark ()"}, "setThumbOffset(int)": {"Returns": [], "Parameters": [["int", "int: The offset amount in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the thumb offset that allows the thumb to extend out of the range of the track.", "history": "Added in API level 1", "FullName": "public void setThumbOffset (int thumbOffset)"}, "setSystemGestureExclusionRects(java.util.List<android.graphics.Rect>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a list of areas within this view's post-layout coordinate space where the system should not intercept touch or other pointing device gestures. This method should be called by @B_android#view#View#onLayout_E@ or @B_android#view#View#onDraw_E@. Use this to tell the system which specific sub-areas of a view need to receive gesture input in order to function correctly in the presence of global system gestures that may conflict. For example, if the system wishes to capture swipe-in-from-screen-edge gestures to provide system-level navigation functionality, a view such as a navigation drawer container can mark the left (or starting) edge of itself as requiring gesture capture priority using this API. The system may then choose to relax its own gesture recognition to allow the app to consume the user's gesture. It is not necessary for an app to register exclusion rects for broadly spanning regions such as the entirety of a ScrollView or for simple press and release click targets such as Button. Mark an exclusion rect when interacting with a view requires a precision touch gesture in a small area in either the X or Y dimension, such as an edge swipe or dragging a SeekBar thumb. Do not modify the provided list after this method is called. Note: the system will put a limit of 200dp on the vertical extent of the exclusions it takes into account. The limit does not apply while the navigation bar is @B_android#view#View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY_E@ hidden, nor to the @B_android#inputmethodservice#InputMethodService_E@ and @B_android#content#Intent#CATEGORY_HOME_E@.", "history": "Added in API level 29", "FullName": "public void setSystemGestureExclusionRects (List<Rect> rects)"}, "setTickMarkTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getTickMarkTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#AbsSeekBar#setTickMarkTintList_E@} to the tick mark drawable. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setTickMarkTintBlendMode (BlendMode blendMode)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getThumbOffset()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setThumbOffset_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getThumbOffset ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "getThumbTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setThumbTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the thumb drawable, if specified.", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getThumbTintMode ()"}, "setTickMarkTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getTickMarkTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the tick mark drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#AbsSeekBar#setTickMark_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 24", "FullName": "public void setTickMarkTintList (ColorStateList tint)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setThumbTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getThumbTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#AbsSeekBar#setThumbTintList_E@} to the thumb drawable. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setThumbTintBlendMode (BlendMode blendMode)"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "getSplitTrack()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the track should be split by the thumb.", "history": "Added in API level 21", "FullName": "public boolean getSplitTrack ()"}, "AbsSeekBar(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsSeekBar (Context context, AttributeSet attrs)"}, "setThumb(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable representing the thumb"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the thumb that will be drawn at the end of the progress meter within the SeekBar. If the thumb is a valid drawable (i.e. not null), half its width will be used as the new thumb offset (@see #setThumbOffset(int)).", "history": "Added in API level 1", "FullName": "public void setThumb (Drawable thumb)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "setTickMarkTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getTickMarkTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#AbsSeekBar#setTickMarkTintList_E@} to the tick mark drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 24", "FullName": "public void setTickMarkTintMode (PorterDuff.Mode tintMode)"}, "AbsSeekBar(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbsSeekBar (Context context, AttributeSet attrs, int defStyleAttr)"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "setKeyProgressIncrement(int)": {"Returns": [], "Parameters": [["int", "int: The amount to increment or decrement when the user presses the arrow keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the amount of progress changed via the arrow keys.", "history": "Added in API level 3", "FullName": "public void setKeyProgressIncrement (int increment)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setTickMark(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to display at each progress position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable displayed at each progress position, e.g. at each possible thumb position.", "history": "Added in API level 24", "FullName": "public void setTickMark (Drawable tickMark)"}, "getKeyProgressIncrement()": {"Returns": [["int", "The amount to increment or decrement when the user presses the arrow keys. This will be positive."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of progress changed via the arrow keys. By default, this will be a value that is derived from the progress range.", "history": "Added in API level 3", "FullName": "public int getKeyProgressIncrement ()"}, "getTickMarkTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the tick mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#setTickMarkTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the tick mark drawable, if specified.", "history": "Added in API level 24", "FullName": "public ColorStateList getTickMarkTintList ()"}, "setThumbTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#AbsSeekBar#getThumbTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#AbsSeekBar#setThumbTintList_E@} to the thumb drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setThumbTintMode (PorterDuff.Mode tintMode)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#ProgressBar_E@"], "ClassName": "android.widget.AbsSeekBar", "ClassDesc": "AbsSeekBar extends the capabilities of ProgressBar by adding a draggable thumb."}