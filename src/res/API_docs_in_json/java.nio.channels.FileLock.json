{"Functions": {"size()": {"Returns": [["long", "The size of the locked region"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the locked region in bytes. A locked region need not be contained within, or even overlap, the actual underlying file, so the value returned by this method may exceed the file's current size.", "history": "Added in API level 1", "FullName": "public final long size ()"}, "FileLock(java.nio.channels.FileChannel,long,long,boolean)": {"Returns": [], "Parameters": [["@B_java#nio#channels#FileChannel_E@", "FileChannel: The file channel upon whose file this lock is held"], ["long", "long: The position within the file at which the locked region starts; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true if this lock is shared, false if it is exclusive"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected FileLock (FileChannel channel, long position, long size, boolean shared)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "This method invokes the @B_java#nio#channels#FileLock#release_E@ method. It was added to the class so that it could be used in conjunction with the automatic resource management block construct.", "history": "Added in API level 19", "FullName": "public final void close ()"}, "isShared()": {"Returns": [["boolean", "true if lock is shared, false if it is exclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this lock is shared.", "history": "Added in API level 1", "FullName": "public final boolean isShared ()"}, "FileLock(java.nio.channels.AsynchronousFileChannel,long,long,boolean)": {"Returns": [], "Parameters": [["@B_java#nio#channels#AsynchronousFileChannel_E@", "AsynchronousFileChannel: The channel upon whose file this lock is held"], ["long", "long: The position within the file at which the locked region starts; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true if this lock is shared, false if it is exclusive"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected FileLock (AsynchronousFileChannel channel, long position, long size, boolean shared)"}, "channel()": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "The file channel, or null if the file lock was not acquired by a file channel."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the file channel upon whose file this lock was acquired. This method has been superseded by the @B_java#nio#channels#FileLock#acquiredBy_E@ method.", "history": "Added in API level 1", "FullName": "public final FileChannel channel ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A descriptive string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing the range, type, and validity of this lock.", "history": "Added in API level 1", "FullName": "public final String toString ()"}, "acquiredBy()": {"Returns": [["@B_java#nio#channels#Channel_E@", "The channel upon whose file this lock was acquired."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the channel upon whose file this lock was acquired.", "history": "Added in API level 24", "FullName": "public Channel acquiredBy ()"}, "position()": {"Returns": [["long", "The position"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position within the file of the first byte of the locked region. A locked region need not be contained within, or even overlap, the actual underlying file, so the value returned by this method may exceed the file's current size.", "history": "Added in API level 1", "FullName": "public final long position ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If the channel that was used to acquire this lock is no longer open"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Releases this lock. If this lock object is valid then invoking this method releases the lock and renders the object invalid. If this lock object is invalid then invoking this method has no effect.", "history": "Added in API level 1", "FullName": "public abstract void release ()"}, "isValid()": {"Returns": [["boolean", "true if, and only if, this lock is valid"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this lock is valid. A lock object remains valid until it is released or the associated file channel is closed, whichever comes first.", "history": "Added in API level 1", "FullName": "public abstract boolean isValid ()"}, "overlaps(long,long)": {"Returns": [["boolean", "true if, and only if, this lock and the given lock range overlap by at least one byte"]], "Parameters": [["long", "long: The starting position of the lock range"], ["long", "long: The size of the lock range"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this lock overlaps the given lock range.", "history": "Added in API level 1", "FullName": "public final boolean overlaps (long position, long size)"}, "overlaps(long, long)": {"Returns": [["boolean", "true if, and only if, this lock and the given lock range overlap by at least one byte"]], "Parameters": [["long", "long: The starting position of the lock range"], ["long", "long: The size of the lock range"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this lock overlaps the given lock range.", "history": "added in API level 1", "FullName": "public final boolean overlaps (long position, long size)"}}, "Inheritance": [], "ClassName": "java.nio.channels.FileLock", "ClassDesc": "A token representing a lock on a region of a file. A file-lock object is created each time a lock is acquired on a file via one of the @B_java#nio#channels#FileChannel#lock_E@ or @B_java#nio#channels#FileChannel#tryLock_E@ methods of the @B_java#nio#channels#FileChannel_E@ class, or the @B_java#nio#channels#AsynchronousFileChannel#lock_E@ or @B_java#nio#channels#AsynchronousFileChannel#tryLock_E@ methods of the @B_java#nio#channels#AsynchronousFileChannel_E@ class. A file-lock object is initially valid. It remains valid until the lock is released by invoking the @B_java#nio#channels#FileLock#release_E@ method, by closing the channel that was used to acquire it, or by the termination of the Java virtual machine, whichever comes first. The validity of a lock may be tested by invoking its @B_java#nio#channels#FileLock#isValid_E@ method. A file lock is either Whether a lock is exclusive or shared may be determined by invoking its @B_java#nio#channels#FileLock#isShared_E@ method. Some platforms do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. The locks held on a particular file by a single Java virtual machine do not overlap. The @B_java#nio#channels#FileLock#overlaps_E@ method may be used to test whether a candidate lock range overlaps an existing lock. A file-lock object records the file channel upon whose file the lock is held, the type and validity of the lock, and the position and size of the locked region. Only the validity of a lock is subject to change over time; all other aspects of a lock's state are immutable. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine. File-lock objects are safe for use by multiple concurrent threads. This file-locking API is intended to map directly to the native locking facility of the underlying operating system. Thus the locks held on a file should be visible to all programs that have access to the file, regardless of the language in which those programs are written. Whether or not a lock actually prevents another program from accessing the content of the locked region is system-dependent and therefore unspecified. The native file-locking facilities of some systems are merely On some systems, acquiring a mandatory lock on a region of a file prevents that region from being @B_java#nio#channels#FileChannel#map_E@, and vice versa. Programs that combine locking and mapping should be prepared for this combination to fail. On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file regardless of whether the locks were acquired via that channel or via another channel open on the same file. It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given file. Some network filesystems permit file locking to be used with memory-mapped files only when the locked regions are page-aligned and a whole multiple of the underlying hardware's page size. Some network filesystems do not implement file locks on regions that extend past a certain position, often 2"}