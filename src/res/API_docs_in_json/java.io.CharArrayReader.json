{"Functions": {"skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#io#IOException_E@", "If the stream is closed, or an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips characters. Returns the number of characters that were skipped. The n parameter may be negative, even though the skip method of the @B_java#io#Reader_E@ superclass throws an exception in this case. If n is negative, then this method does nothing and returns 0.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "CharArrayReader(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Input buffer (not copied)"], ["int", "int: Offset of the first char to read"], ["int", "int: Number of chars to read"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If offset is negative or greater than buf.length, or if length is negative, or if the sum of these two values is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CharArrayReader from the specified array of chars. The resulting reader will start reading at the given", "history": "Added in API level 1", "FullName": "public CharArrayReader (char[] buf, int offset, int length)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream to the most recent mark, or to the beginning if it has never been marked.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read(char[], int, int)": {"Returns": [["int", "The actual number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "added in API level 1", "FullName": "public int read (char[] b, int off, int len)"}, "read()": {"Returns": [["int", "The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "CharArrayReader(char[])": {"Returns": [], "Parameters": [["char[]", "char: Input buffer (not copied)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CharArrayReader from the specified array of chars.", "history": "Added in API level 1", "FullName": "public CharArrayReader (char[] buf)"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read. Character-array readers are always ready to be read.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. Because the stream's input comes from a character array, there is no actual limit; hence this argument is ignored."]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream. Subsequent calls to reset() will reposition the stream to this point.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "read(char[],int,int)": {"Returns": [["int", "The actual number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "Added in API level 1", "FullName": "public int read (char[] b, int off, int len)"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation, which it does.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "CharArrayReader(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Input buffer (not copied)"], ["int", "int: Offset of the first char to read"], ["int", "int: Number of chars to read"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If offset is negative or greater than buf.length, or if length is negative, or if the sum of these two values is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CharArrayReader from the specified array of chars. The resulting reader will start reading at the given", "history": "added in API level 1", "FullName": "public CharArrayReader (char[] buf, int offset, int length)"}}, "Inheritance": ["@B_java#io#Reader_E@"], "ClassName": "java.io.CharArrayReader", "ClassDesc": "This class implements a character buffer that can be used as a character-input stream."}