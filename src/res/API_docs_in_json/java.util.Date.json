{"Functions": {"setMinutes(int)": {"Returns": [], "Parameters": [["int", "int: the value of the minutes."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes). Sets the minutes of this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setMinutes (int minutes)"}, "getYear()": {"Returns": [["int", "the year represented by this date, minus 1900."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.YEAR) - 1900. Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getYear ()"}, "from(java.time.Instant)": {"Returns": [["@B_java#util#Date_E@", "a Date representing the same point on the time-line as the provided instant"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to convert"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if instant is null."], ["@B_java#lang#IllegalArgumentException_E@", "if the instant is too large to represent as a Date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Date from an Instant object. Instant uses a precision of nanoseconds, whereas Date uses a precision of milliseconds. The conversion will trancate any excess precision information as though the amount in nanoseconds was subject to integer division by one million. Instant can store points on the time-line further in the future and further in the past than Date. In this scenario, this method will throw an exception.", "history": "Added in API level 26", "FullName": "public static Date from (Instant instant)"}, "Date(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min). Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year, month, date, hrs, and min arguments, in the local time zone.", "history": "Added in API level 1", "FullName": "public Date (int year, int month, int date, int hrs, int min)"}, "after(java.util.Date)": {"Returns": [["boolean", "true if and only if the instant represented by this Date object is strictly later than the instant represented by when; false otherwise."]], "Parameters": [["@B_java#util#Date_E@", "Date: a date."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if when is null."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if this date is after the specified date.", "history": "Added in API level 1", "FullName": "public boolean after (Date when)"}, "before(java.util.Date)": {"Returns": [["boolean", "true if and only if the instant of time represented by this Date object is strictly earlier than the instant represented by when; false otherwise."]], "Parameters": [["@B_java#util#Date_E@", "Date: a date."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if when is null."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if this date is before the specified date.", "history": "Added in API level 1", "FullName": "public boolean before (Date when)"}, "setMonth(int)": {"Returns": [], "Parameters": [["int", "int: the month value between 0-11."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month). Sets the month of this date to the specified value. This", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setMonth (int month)"}, "getMonth()": {"Returns": [["int", "the month represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH). Returns a number representing the month that contains or begins with the instant in time represented by this 0 and 11, with the value 0 representing January.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getMonth ()"}, "getTimezoneOffset()": {"Returns": [["int", "the time-zone offset, in minutes, for the current time zone."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@", "@B_java#util#TimeZone#getDefault_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000). Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object. For example, in Massachusetts, five time zones west of Greenwich: This method produces the same result as if it computed:", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getTimezoneOffset ()"}, "getDate()": {"Returns": [["int", "the day of the month represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH). Returns the day of the month represented by this 1 and 31 representing the day of the month that contains or begins with the instant in time represented by this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getDate ()"}, "Date(long)": {"Returns": [], "Parameters": [["long", "long: the milliseconds since January 1, 1970, 00:00:00 GMT."]], "Throws": [], "SeeAlso": ["@B_java#lang#System#currentTimeMillis_E@"], "Permissions": [], "Description": "Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.", "history": "Added in API level 1", "FullName": "public Date (long date)"}, "parse(java.lang.String)": {"Returns": [["long", "the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: a string to be parsed as a date."]], "Throws": [], "SeeAlso": ["@B_java#text#DateFormat_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by DateFormat.parse(String s). Attempts to interpret the string It accepts many syntaxes; in particular, it recognizes the IETF standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also understands the continental U.S. time-zone abbreviations, but for general use, a time-zone offset should be used: \"Sat, 12 Aug 1995 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich meridian). If no time zone is specified, the local time zone is assumed. GMT and UTC are considered equivalent. The string A consecutive sequence of decimal digits is treated as a decimal number: If a number is preceded by The number is regarded as a year number if one of the following conditions is true: The number is equal to or greater than 70 and followed by a space, comma, slash, or end of string The number is less than 70, and both a month and a day of the month have already been recognized If the recognized year number is less than 100, it is interpreted as an abbreviated year relative to a century of which dates are within 80 years before and 19 years after the time when the Date class is initialized. After adjusting the year number, 1900 is subtracted from it. For example, if the current year is 1999 then years in the range 19 to 99 are assumed to mean 1919 to 1999, while years from 0 to 18 are assumed to mean 2000 to 2018. Note that this is slightly different from the interpretation of years less than 100 that is used in @B_java#text#SimpleDateFormat_E@. If the number is followed by a colon, it is regarded as an hour, unless an hour has already been recognized, in which case it is regarded as a minute. If the number is followed by a slash, it is regarded as a month (it is decreased by 1 to produce a number in the range If the number is followed by whitespace, a comma, a hyphen, or end of string, then if an hour has been recognized but not a minute, it is regarded as a minute; otherwise, if a minute has been recognized but not a second, it is regarded as a second; otherwise, it is regarded as a day of the month. A consecutive sequence of letters is regarded as a word and treated as follows: A word that matches A word that matches Any word that matches any prefix of Otherwise, any word that matches any prefix of Any word that matches Any word that matches Once the entire string s has been scanned, it is converted to a time result in one of two ways. If a time zone or time-zone offset has been recognized, then the year, month, day of month, hour, minute, and second are interpreted in UTC and then the time-zone offset is applied. Otherwise, the year, month, day of month, hour, minute, and second are interpreted in the local time zone.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static long parse (String s)"}, "Date(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date). Allocates a Date object and initializes it so that it represents midnight, local time, at the beginning of the day specified by the year, month, and date arguments.", "history": "Added in API level 1", "FullName": "public Date (int year, int month, int date)"}, "Date(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min). Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year, month, date, hrs, and min arguments, in the local time zone.", "history": "added in API level 1", "FullName": "public Date (int year, int month, int date, int hrs, int min)"}, "setYear(int)": {"Returns": [], "Parameters": [["int", "int: the year value."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900). Sets the year of this Date object is modified so that it represents a point in time within the specified year, with the month, date, hour, minute, and second the same as before, as interpreted in the local time zone. (Of course, if the date was February 29, for example, and the year is set to a non-leap year, then the new date will be treated as if it were on March 1.)", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setYear (int year)"}, "UTC(int, int, int, int, int, int)": {"Returns": [["long", "the number of milliseconds since January 1, 1970, 00:00:00 GMT for the date and time specified by the arguments."]], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."], ["int", "int: the seconds between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime(). Determines the date and time based on the arguments. The arguments are interpreted as a year, month, day of the month, hour of the day, minute within the hour, and second within the minute, exactly as for the", "history": "added in API level 1", "FullName": "public static long UTC (int year, int month, int date, int hrs, int min, int sec)"}, "getDay()": {"Returns": [["int", "the day of the week represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_WEEK). Returns the day of the week represented by this date. The returned value (", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getDay ()"}, "toInstant()": {"Returns": [["@B_java#time#Instant_E@", "an instant representing the same point on the time-line as this Date object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this Date object to an Instant. The conversion creates an Instant that represents the same point on the time-line as this Date.", "history": "Added in API level 26", "FullName": "public Instant toInstant ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": ["@B_java#util#Date#getTime_E@"], "Permissions": [], "Description": "Compares two dates for equality. The result is true if and only if the argument is not null and is a Date object that represents the same point in time, to the millisecond, as this object. Thus, two Date objects are equal if and only if the getTime method returns the same long value for both.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "Date(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string representation of the date."]], "Throws": [], "SeeAlso": ["@B_java#text#DateFormat_E@", "@B_java#util#Date#parse_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by DateFormat.parse(String s). Allocates a Date object and initializes it so that it represents the date and time indicated by the string s, which is interpreted as if by the @B_java#util#Date#parse_E@ method.", "history": "Added in API level 1", "FullName": "public Date (String s)"}, "setDate(int)": {"Returns": [], "Parameters": [["int", "int: the day of the month value between 1-31."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date). Sets the day of the month of this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setDate (int date)"}, "Date(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."], ["int", "int: the seconds between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec). Allocates a Date object and initializes it so that it represents the instant at the start of the second specified by the year, month, date, hrs, min, and sec arguments, in the local time zone.", "history": "added in API level 1", "FullName": "public Date (int year, int month, int date, int hrs, int min, int sec)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this object. The result is the exclusive OR of the two halves of the primitive @B_java#util#Date#getTime_E@ method. That is, the hash code is the value of the expression:", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "toGMTString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date, using the Internet GMT conventions."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DateFormat_E@", "@B_java#util#Date#toString_E@", "@B_java#util#Date#toLocaleString_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by DateFormat.format(Date date), using a GMT TimeZone. Creates a string representation of this The result does not depend on the local time zone.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String toGMTString ()"}, "toLocaleString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date, using the locale conventions."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DateFormat_E@", "@B_java#util#Date#toString_E@", "@B_java#util#Date#toGMTString_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by DateFormat.format(Date date). Creates a string representation of this %c\" format supported by the strftime() function of ISO C.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String toLocaleString ()"}, "compareTo(java.util.Date)": {"Returns": [["int", "the value 0 if the argument Date is equal to this Date; a value less than 0 if this Date is before the Date argument; and a value greater than 0 if this Date is after the Date argument."]], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if anotherDate is null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares two Dates for ordering.", "history": "Added in API level 1", "FullName": "public int compareTo (Date anotherDate)"}, "Date()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#System#currentTimeMillis_E@"], "Permissions": [], "Description": "Allocates a Date object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond.", "history": "Added in API level 1", "FullName": "public Date ()"}, "getSeconds()": {"Returns": [["int", "the number of seconds past the minute represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.SECOND). Returns the number of seconds past the minute represented by this date. The value returned is between 0 and 61. The values 60 and 61 can only occur on those Java Virtual Machines that take leap seconds into account.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getSeconds ()"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: the number of milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.", "history": "Added in API level 1", "FullName": "public void setTime (long time)"}, "getHours()": {"Returns": [["int", "the hour represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY). Returns the hour represented by this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getHours ()"}, "setSeconds(int)": {"Returns": [], "Parameters": [["int", "int: the seconds value."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds). Sets the seconds of this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setSeconds (int seconds)"}, "getMinutes()": {"Returns": [["int", "the number of minutes past the hour represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE). Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone. The value returned is between 0 and 59.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getMinutes ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a copy of this object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Date#toLocaleString_E@", "@B_java#util#Date#toGMTString_E@"], "Permissions": [], "Description": "Converts this Date object to a String of the form:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getTime()": {"Returns": [["long", "the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this", "history": "Added in API level 1", "FullName": "public long getTime ()"}, "setHours(int)": {"Returns": [], "Parameters": [["int", "int: the hour value."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours). Sets the hour of this", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setHours (int hours)"}, "Date(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date). Allocates a Date object and initializes it so that it represents midnight, local time, at the beginning of the day specified by the year, month, and date arguments.", "history": "added in API level 1", "FullName": "public Date (int year, int month, int date)"}, "UTC(int,int,int,int,int,int)": {"Returns": [["long", "the number of milliseconds since January 1, 1970, 00:00:00 GMT for the date and time specified by the arguments."]], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."], ["int", "int: the seconds between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime(). Determines the date and time based on the arguments. The arguments are interpreted as a year, month, day of the month, hour of the day, minute within the hour, and second within the minute, exactly as for the", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static long UTC (int year, int month, int date, int hrs, int min, int sec)"}, "Date(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900."], ["int", "int: the month between 0-11."], ["int", "int: the day of the month between 1-31."], ["int", "int: the hours between 0-23."], ["int", "int: the minutes between 0-59."], ["int", "int: the seconds between 0-59."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec). Allocates a Date object and initializes it so that it represents the instant at the start of the second specified by the year, month, date, hrs, min, and sec arguments, in the local time zone.", "history": "Added in API level 1", "FullName": "public Date (int year, int month, int date, int hrs, int min, int sec)"}}, "Inheritance": [], "ClassName": "java.util.Date", "ClassDesc": "The class Date represents a specific instant in time, with millisecond precision. Prior to JDK 1.1, the class Date had two additional functions. It allowed the interpretation of dates as year, month, day, hour, minute, and second values. It also allowed the formatting and parsing of date strings. Unfortunately, the API for these functions was not amenable to internationalization. As of JDK 1.1, the Calendar class should be used to convert between dates and time fields and the DateFormat class should be used to format and parse date strings. The corresponding methods in Date are deprecated. Although the Date class is intended to reflect coordinated universal time (UTC), it may not do so exactly, depending on the host environment of the Java Virtual Machine. Nearly all modern operating systems assume that 1 day = 24 \u00d7 60 \u00d7 60 = 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a \"leap second.\" The leap second is always added as the last second of the day, and always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second. Most computer clocks are not accurate enough to be able to reflect the leap-second distinction. Some computer standards are defined in terms of Greenwich mean time (GMT), which is equivalent to universal time (UT). GMT is the \"civil\" name for the standard; UT is the \"scientific\" name for the same standard. The distinction between UTC and UT is that UTC is based on an atomic clock and UT is based on astronomical observations, which for all practical purposes is an invisibly fine hair to split. Because the earth's rotation is not uniform (it slows down and speeds up in complicated ways), UT does not always flow uniformly. Leap seconds are introduced as needed into UTC so as to keep UTC within 0.9 seconds of UT1, which is a version of UT with certain corrections applied. There are other time and date systems as well; for example, the time scale used by the satellite-based global positioning system (GPS) is synchronized to UTC but is and their definitions of \"Systems of Time\" at: In all methods of class Date that accept or return year, month, date, hours, minutes, and seconds values, the following representations are used: A year - 1900. A month is represented by an integer from 0 to 11; 0 is January, 1 is February, and so forth; thus 11 is December. A date (day of month) is represented by an integer from 1 to 31 in the usual manner. An hour is represented by an integer from 0 to 23. Thus, the hour from midnight to 1 a.m. is hour 0, and the hour from noon to 1 p.m. is hour 12. A minute is represented by an integer from 0 to 59 in the usual manner. A second is represented by an integer from 0 to 61; the values 60 and 61 occur only for leap seconds and even then only in Java implementations that actually track leap seconds correctly. Because of the manner in which leap seconds are currently introduced, it is extremely unlikely that two leap seconds will occur in the same minute, but this specification follows the date and time conventions for ISO C. In all cases, arguments given to methods for these purposes need not fall within the indicated ranges; for example, a date may be specified as January 32 and is interpreted as meaning February 1."}