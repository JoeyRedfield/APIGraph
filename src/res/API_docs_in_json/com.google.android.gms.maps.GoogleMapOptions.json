{"Functions": {"getZOrderOnTop()": {"Returns": [["", "the zOrderOnTop option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getZOrderOnTop ()"}, "scrollGesturesEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether scroll gestures should be enabled. See @B_com#google#android#gms#maps#UiSettings#setScrollGesturesEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions scrollGesturesEnabled (boolean enabled)"}, "GoogleMapOptions()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new GoogleMapOptions object.", "history": "", "FullName": "public GoogleMapOptions ()"}, "zoomGesturesEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether zoom gestures should be enabled. See @B_com#google#android#gms#maps#UiSettings#setZoomGesturesEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions zoomGesturesEnabled (boolean enabled)"}, "mapType(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a change to the initial map type.", "history": "", "FullName": "public GoogleMapOptions mapType (int mapType)"}, "useViewLifecycleInFragment(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When using a @B_com#google#android#gms#maps#MapFragment_E@, this flag specifies whether the lifecycle of the map should be tied to the fragment's view or the fragment itself. The default value is false, tying the lifecycle of the map to the fragment. Using the lifecycle of the fragment allows faster rendering of the map when the fragment is detached and reattached, because the underlying GL context is preserved. This has the cost that detaching the fragment, but not destroying it, will not release memory used by the map. Using the lifecycle of a fragment's view means that a map is not reused when the fragment is detached and reattached. This will cause the map to re-render from scratch, which can take a few seconds. It also means that while a fragment is detached, and therefore has no view, all @B_com#google#android#gms#maps#GoogleMap_E@ methods will throw @B_java#lang#NullPointerException_E@.", "history": "", "FullName": "public GoogleMapOptions useViewLifecycleInFragment (boolean useViewLifecycleInFragment)"}, "camera(com.google.android.gms.maps.model.CameraPosition)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a the initial camera position for the map.", "history": "", "FullName": "public GoogleMapOptions camera (CameraPosition camera)"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "compassEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the compass should be enabled. See @B_com#google#android#gms#maps#UiSettings#setCompassEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions compassEnabled (boolean enabled)"}, "getZoomGesturesEnabled()": {"Returns": [["", "the zoomGesturesEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getZoomGesturesEnabled ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "zoomControlsEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the zoom controls should be enabled. See @B_com#google#android#gms#maps#UiSettings#setZoomControlsEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions zoomControlsEnabled (boolean enabled)"}, "tiltGesturesEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether tilt gestures should be enabled. See @B_com#google#android#gms#maps#UiSettings#setTiltGesturesEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions tiltGesturesEnabled (boolean enabled)"}, "getCompassEnabled()": {"Returns": [["", "the compassEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getCompassEnabled ()"}, "getRotateGesturesEnabled()": {"Returns": [["", "the rotateGesturesEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getRotateGesturesEnabled ()"}, "getTiltGesturesEnabled()": {"Returns": [["", "the tiltGesturesEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getTiltGesturesEnabled ()"}, "rotateGesturesEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether rotate gestures should be enabled. See @B_com#google#android#gms#maps#UiSettings#setRotateGesturesEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions rotateGesturesEnabled (boolean enabled)"}, "liteMode(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the map should be created in lite mode. The default value is false. If lite mode is enabled, maps will load as static images. This improves performance in the case where a lot of maps need to be displayed at the same time, for example in a scrolling list, however lite-mode maps cannot be panned or zoomed by the user, or tilted or rotated at all.", "history": "", "FullName": "public GoogleMapOptions liteMode (boolean enabled)"}, "getMapToolbarEnabled()": {"Returns": [["", "the mapToolbarEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getMapToolbarEnabled ()"}, "mapToolbarEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the mapToolbar should be enabled. See @B_com#google#android#gms#maps#UiSettings#setMapToolbarEnabled_E@ for more details. The default value is true.", "history": "", "FullName": "public GoogleMapOptions mapToolbarEnabled (boolean enabled)"}, "getZoomControlsEnabled()": {"Returns": [["", "the zoomControlsEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getZoomControlsEnabled ()"}, "getScrollGesturesEnabled()": {"Returns": [["", "the scrollGesturesEnabled option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getScrollGesturesEnabled ()"}, "getLiteMode()": {"Returns": [["", "the liteMode option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getLiteMode ()"}, "getMapType()": {"Returns": [["", "the mapType option, or -1 if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getMapType ()"}, "createFromAttributes(android.content.Context, android.util.AttributeSet)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a GoogleMapsOptions from the attribute set", "history": "", "FullName": "public static GoogleMapOptions createFromAttributes (Context context, AttributeSet attrs)"}, "zOrderOnTop(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the map view's surface is placed on top of its window. See @B_android#view#SurfaceView#setZOrderOnTop_E@ for more details. Note that this will cover all other views that could appear on the map (e.g., the zoom controls, the my location button).", "history": "", "FullName": "public GoogleMapOptions zOrderOnTop (boolean zOrderOnTop)"}, "getCamera()": {"Returns": [["", "the camera option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public CameraPosition getCamera ()"}, "getUseViewLifecycleInFragment()": {"Returns": [["", "the useViewLifecycleInFragment option, or null if unspecified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Boolean getUseViewLifecycleInFragment ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.GoogleMapOptions", "ClassDesc": "Defines configuration GoogleMapOptions for a @B_com#google#android#gms#maps#GoogleMap_E@. These options can be used when adding a map to your application programmatically (as opposed to via XML). If you are using a @B_com#google#android#gms#maps#MapFragment_E@, you can pass these options in using the static factory method @B_com#google#android#gms#maps#MapFragment#newInstance_E@. If you are using a @B_com#google#android#gms#maps#MapView_E@, you can pass these options in using the constructor @B_com#google#android#gms#maps#MapView#MapView_E@. If you add a map using XML, then you can apply these options using custom XML tags."}