{"Functions": {"getExtension(char)": {"Returns": [["@B_java#lang#String_E@", "The extension, or null if this locale defines no extension for the specified key."]], "Parameters": [["char", "char: the extension key"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if key is not well-formed"]], "SeeAlso": ["@B_android#icu#util#ULocale_E@"], "Permissions": [], "Description": "Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key. To be well-formed, the key must be one of [0-9A-Za-z]. Keys are case-insensitive, so for example 'z' and 'Z' represent the same extension.", "history": "Added in API level 24", "FullName": "public String getExtension (char key)"}, "getDisplayName(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale whose name is to be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayName (String localeID, ULocale displayLocale)"}, "getScript()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayScript_E@"], "Permissions": [], "Description": "Returns the script code for this locale, which might be the empty string.", "history": "Added in API level 24", "FullName": "public String getScript ()"}, "getVariant(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayVariant_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getVariant (String localeID)"}, "getUnicodeLocaleKeys()": {"Returns": [["@B_java#util#Set_E@", "The set of Unicode locale keys, or the empty set if this locale has no Unicode locale keywords."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none. The returned set is immutable. Keys are all lower case.", "history": "Added in API level 24", "FullName": "public Set<String> getUnicodeLocaleKeys ()"}, "getISO3Language()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if the three-letter language abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a three-letter abbreviation for this locale's language. If the locale doesn't specify a language, returns the empty string. Otherwise, returns a lowercase ISO 639-2/T language code. The ISO 639-2 language codes can be found on-line at", "history": "Added in API level 24", "FullName": "public String getISO3Language ()"}, "minimizeSubtags(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#ULocale_E@", "The minimized ULocale instance."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: The ULocale to minimize"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale minimizeSubtags (ULocale loc)"}, "getDisplayCountry()": {"Returns": [["@B_java#lang#String_E@", "the localized country name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns this locale's country localized for display in the default DISPLAY locale. @B_android#icu#text#LocaleDisplayNames_E@ instead.", "history": "Added in API level 24", "FullName": "public String getDisplayCountry ()"}, "toLegacyKey(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the well-formed legacy key, or null if the specified keyword cannot be mapped to a well-formed legacy key."]], "Parameters": [["@B_java#lang#String_E@", "String: the input locale keyword (either BCP 47 Unicode locale extension key or legacy key)."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#toUnicodeLocaleKey_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String toLegacyKey (String keyword)"}, "getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized value name."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword whose value is to be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getDisplayKeywordValue (String keyword, ULocale displayLocale)"}, "addLikelySubtags(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#ULocale_E@", "The maximized ULocale instance."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: The ULocale to maximize"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale addLikelySubtags (ULocale loc)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this Locale is equal to the specified object."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the other object is another ULocale with the same full name. Note that since names are not canonicalized, two ULocales that function identically might not compare equal.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "isRightToLeft()": {"Returns": [["boolean", "true if the locale's script is written right-to-left"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#util#ULocale#addLikelySubtags_E@. If no likely script is known, then false is returned. A script is right-to-left according to the CLDR script metadata which corresponds to whether the script's letters have Bidi_Class=R or AL. Returns true for \"ar\" and \"en-Hebr\", false for \"zh\" and \"fa-Cyrl\".", "history": "Added in API level 24", "FullName": "public boolean isRightToLeft ()"}, "getDisplayCountry(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized country name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose country will be displayed"], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#LocaleDisplayNames_E@ instead. This is a cover for the ICU4C API.", "history": "Added in API level 24", "FullName": "public static String getDisplayCountry (String localeID, String displayLocaleID)"}, "getDisplayKeyword(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized keyword name."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the keyword."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getKeywords_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayKeyword (String keyword, ULocale displayLocale)"}, "getDisplayLanguageWithDialect(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getDisplayLanguageWithDialect (ULocale displayLocale)"}, "ULocale(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#ULocale_E@"], "Permissions": [], "Description": "Convenience overload of ULocale(String, String, String) for compatibility with java.util.Locale.", "history": "added in API level 24", "FullName": "public ULocale (String a, String b)"}, "getBaseName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the base name as a String."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale ID as a string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#util#ULocale#getName_E@, but without keywords.", "history": "Added in API level 24", "FullName": "public static String getBaseName (String localeID)"}, "toLegacyType(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the well-formed legacy type, or null if the specified keyword value cannot be mapped to a well-formed legacy type."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale keyword (either legacy keyword such as \"collation\" or BCP 47 Unicode locale extension key such as \"co\")."], ["@B_java#lang#String_E@", "String: the locale keyword value (either BCP 47 Unicode locale extension type such as \"phonebk\" or legacy keyword value such as \"phonebook\")."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#toUnicodeLocaleType_E@"], "Permissions": [], "Description": "When the specified keyword is not recognized, but the specified value satisfies the syntax of legacy key, or when the specified keyword allows 'variable' type and the specified value satisfies the syntax, the lower-case version of the input value will be returned. For example, toLegacyType(\"Foo\", \"Bar\") returns \"bar\", toLegacyType(\"vt\", \"00A4\") returns \"00a4\".", "history": "Added in API level 24", "FullName": "public static String toLegacyType (String keyword, String value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this object.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "getDisplayVariant(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized variant name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose variant will be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayVariant (String localeID, ULocale displayLocale)"}, "getDisplayLanguageWithDialect()": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale. If a dialect name is present in the data, then it is returned.", "history": "Added in API level 24", "FullName": "public String getDisplayLanguageWithDialect ()"}, "getVariant()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayVariant_E@"], "Permissions": [], "Description": "Returns the variant code for this locale, which might be the empty string.", "history": "Added in API level 24", "FullName": "public String getVariant ()"}, "setKeywordValue(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the updated locale id"]], "Parameters": [["@B_java#lang#String_E@", "String: the locale id to modify"], ["@B_java#lang#String_E@", "String: the keyword to add/remove, or null to remove all keywords."], ["@B_java#lang#String_E@", "String: the value to add/set, or null to remove this particular keyword."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a locale id, a keyword, and a value, return a new locale id with an updated keyword and value. If the keyword is null, this removes all keywords from the locale id. Otherwise, if the value is null, this removes the value for this keyword from the locale id. Otherwise, this adds/replaces the value for this keyword in the locale id. The keyword and value must not be empty. Related: @B_android#icu#util#ULocale#getBaseName_E@ returns the locale ID string with all keywords removed.", "history": "Added in API level 24", "FullName": "public static String setKeywordValue (String localeID, String keyword, String value)"}, "getCountry()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayCountry_E@"], "Permissions": [], "Description": "Returns the country/region code for this locale, which will either be the empty string or an uppercase ISO 3166 2-letter code.", "history": "Added in API level 24", "FullName": "public String getCountry ()"}, "getDisplayLanguage()": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns this locale's language localized for display in the default DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getDisplayLanguage ()"}, "ULocale(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: first component of the locale id"], ["@B_java#lang#String_E@", "String: second component of the locale id"], ["@B_java#lang#String_E@", "String: third component of the locale id"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#ULocale_E@"], "Permissions": [], "Description": "Constructs a ULocale from a localeID constructed from the three 'fields' a, b, and c. These fields are concatenated using underscores to form a localeID of the form a_b_c, which is then handled like the localeID passed to ULocale(String localeID). Java locale strings consisting of language, country, and variant will be handled by this form, since the country code (being shorter than four letters long) will not be interpreted as a script code. If a script code is present, the final argument ('c') will be interpreted as the country code. It is recommended that this constructor only be used to ease porting, and that clients instead use the single-argument constructor when constructing a ULocale from a localeID.", "history": "Added in API level 24", "FullName": "public ULocale (String a, String b, String c)"}, "getLineOrientation()": {"Returns": [["@B_java#lang#String_E@", "The locale's layout orientation for lines."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getLineOrientation ()"}, "getDisplayCountry(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized country name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale's country localized for display in the provided locale. @B_android#icu#text#LocaleDisplayNames_E@ instead.", "history": "Added in API level 24", "FullName": "public String getDisplayCountry (ULocale displayLocale)"}, "ULocale(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string representation of the locale, e.g: \"en_US\", \"sy_Cyrl_YU\", \"zh__pinyin\", \"es_ES@currency=EUR;collation=traditional\""]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This constructor does not canonicalize the localeID. So, for example, \"zh__pinyin\" remains unchanged instead of converting to \"zh@collation=pinyin\". By default ICU only recognizes the latter as specifying pinyin collation. Use @B_android#icu#util#ULocale#createCanonical_E@ or @B_android#icu#util#ULocale#canonicalize_E@ if you need to canonicalize the localeID.", "history": "Added in API level 24", "FullName": "public ULocale (String localeID)"}, "getName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "String the full name of the localeID"]], "Parameters": [["@B_java#lang#String_E@", "String: the localeID as a string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getName (String localeID)"}, "getDisplayName(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale name localized for display in the provided locale.", "history": "Added in API level 24", "FullName": "public String getDisplayName (ULocale displayLocale)"}, "getDisplayKeywordValue(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized value name."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword whose value is to be displayed."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getDisplayKeywordValue (String keyword)"}, "getDisplayScript(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized script name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale's script localized for display in the provided locale.", "history": "Added in API level 24", "FullName": "public String getDisplayScript (ULocale displayLocale)"}, "acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "one of the locales from the availableLocales list, or null if none match"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: list of acceptable locales"], ["@B_android#icu#util#ULocale_E@", "ULocale: list of available locales. One of these will be returned."], ["boolean[]", "boolean: if non-null, a 1-element array containing a boolean to be set with the fallback status"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale acceptLanguage (ULocale[] acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)"}, "toUnicodeLocaleType(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the well-formed BCP47 Unicode locale extension type, or null if the locale keyword value cannot be mapped to a well-formed BCP 47 Unicode locale extension type."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale keyword (either legacy key such as \"collation\" or BCP 47 Unicode locale extension key such as \"co\")."], ["@B_java#lang#String_E@", "String: the locale keyword value (either legacy type such as \"phonebook\" or BCP 47 Unicode locale extension type such as \"phonebk\")."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#toLegacyType_E@"], "Permissions": [], "Description": "When the specified keyword is not recognized, but the specified value satisfies the syntax of the BCP 47 Unicode locale extension type, or when the specified keyword allows 'variable' type and the specified value satisfies the syntax, the lower-case version of the input value will be returned. For example, toUnicodeLocaleType(\"Foo\", \"Bar\") returns \"bar\", toUnicodeLocaleType(\"variableTop\", \"00A4\") returns \"00a4\".", "history": "Added in API level 24", "FullName": "public static String toUnicodeLocaleType (String keyword, String value)"}, "getDisplayKeyword(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized keyword name."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to be displayed."], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the keyword."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getKeywords_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayKeyword (String keyword, String displayLocaleID)"}, "getISOLanguages()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of all 2-letter language codes defined in ISO 639. Can be used to create Locales. [NOTE: ISO 639 is not a stable standard-- some languages' codes have changed. The list this function returns includes both the new and the old codes for the languages whose codes have changed.]", "history": "Added in API level 24", "FullName": "public static String[] getISOLanguages ()"}, "getDisplayName(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale whose name is to be displayed."], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayName (String localeID, String displayLocaleID)"}, "getDisplayCountry(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized country name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose country will be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#LocaleDisplayNames_E@ instead. This is a cover for the ICU4C API.", "history": "Added in API level 24", "FullName": "public static String getDisplayCountry (String localeID, ULocale displayLocale)"}, "getDefault()": {"Returns": [["@B_android#icu#util#ULocale_E@", "the default ULocale."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current default ULocale. The default ULocale is synchronized to the default Java Locale. This method checks the current default Java Locale and returns an equivalent ULocale.", "history": "Added in API level 24", "FullName": "public static ULocale getDefault ()"}, "acceptLanguage(android.icu.util.ULocale[],boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "one of the locales from the ULocale.getAvailableLocales() list, or null if none match"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: ordered array of acceptable locales (preferred are listed first)"], ["boolean[]", "boolean: if non-null, a 1-element array containing a boolean to be set with the fallback status"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale acceptLanguage (ULocale[] acceptLanguageList, boolean[] fallback)"}, "createCanonical(java.lang.String)": {"Returns": [["@B_android#icu#util#ULocale_E@", "the locale created from the canonical version of the ID."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale id to canonicalize"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale createCanonical (String nonCanonicalID)"}, "getDisplayKeyword(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized keyword name."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to be displayed."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getKeywords_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale.", "history": "Added in API level 24", "FullName": "public static String getDisplayKeyword (String keyword)"}, "getScript(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayScript_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getScript (String localeID)"}, "getISOCountries()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of all 2-letter country codes defined in ISO 3166. Can be used to create Locales.", "history": "Added in API level 24", "FullName": "public static String[] getISOCountries ()"}, "setKeywordValue(java.lang.String,java.lang.String)": {"Returns": [["@B_android#icu#util#ULocale_E@", "the updated locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to add/remove, or null to remove all keywords."], ["@B_java#lang#String_E@", "String: the value to add/set, or null to remove this particular keyword."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Related: @B_android#icu#util#ULocale#getBaseName_E@ returns the locale ID string with all keywords removed.", "history": "Added in API level 24", "FullName": "public ULocale setKeywordValue (String keyword, String value)"}, "toLanguageTag()": {"Returns": [["@B_java#lang#String_E@", "a BCP47 language tag representing the locale"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#forLanguageTag_E@"], "Permissions": [], "Description": "Returns a well-formed IETF BCP 47 language tag representing this locale. If this ULocale has a language, script, country, or variant that does not satisfy the IETF BCP 47 language tag syntax requirements, this method handles these fields as described below: if all sub-segments match [0-9a-zA-Z]{1,8} (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first ill-formed sub-segment and all following will be appended to the private use subtag. The first appended subtag will be \"lvariant\", followed by the sub-segments in order, separated by hyphen. For example, \"x-lvariant-WIN\", \"Oracle-x-lvariant-JDK-Standard-Edition\". if any sub-segment does not match [0-9a-zA-Z]{1,8}, the variant will be truncated and the problematic sub-segment and all following sub-segments will be omitted. If the remainder is non-empty, it will be emitted as a private use subtag as above (even if the remainder turns out to be well-formed). For example, \"Solaris_isjustthecoolestthing\" is emitted as \"x-lvariant-Solaris\", not as \"solaris\".", "history": "Added in API level 24", "FullName": "public String toLanguageTag ()"}, "getDisplayNameWithDialect()": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale. If a dialect name is present in the locale data, then it is returned.", "history": "Added in API level 24", "FullName": "public String getDisplayNameWithDialect ()"}, "getAvailableLocales()": {"Returns": [["@B_android#icu#util#ULocale_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ULocale, not Locale. Returns a list of all installed locales.", "history": "Added in API level 24", "FullName": "public static ULocale[] getAvailableLocales ()"}, "getKeywordValue(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the keyword, or null."]], "Parameters": [["@B_java#lang#String_E@", "String: name of the keyword whose value is desired. Case insensitive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getKeywordValue (String keywordName)"}, "getDisplayNameWithDialect(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale whose name is to be displayed."], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayNameWithDialect (String localeID, String displayLocaleID)"}, "getDisplayLanguageWithDialect(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose language will be displayed"], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayLanguageWithDialect (String localeID, String displayLocaleID)"}, "getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized value name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose keyword value is to be displayed."], ["@B_java#lang#String_E@", "String: the keyword whose value is to be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the id of the locale in which to display the value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayKeywordValue (String localeID, String keyword, ULocale displayLocale)"}, "acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "one of the locales from the availableLocales list, or null if none match"]], "Parameters": [["@B_java#lang#String_E@", "String: list in HTTP \"Accept-Language:\" format of acceptable locales"], ["@B_android#icu#util#ULocale_E@", "ULocale: list of available locales. One of these will be returned."], ["boolean[]", "boolean: if non-null, a 1-element array containing a boolean to be set with the fallback status"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale acceptLanguage (String acceptLanguageList, ULocale[] availableLocales, boolean[] fallback)"}, "getISO3Language(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if the three-letter language abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getISO3Language (String localeID)"}, "getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose language will be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayLanguageWithDialect (String localeID, ULocale displayLocale)"}, "getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized value name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose keyword value is to be displayed."], ["@B_java#lang#String_E@", "String: the keyword whose value is to be displayed."], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayKeywordValue (String localeID, String keyword, String displayLocaleID)"}, "acceptLanguage(java.lang.String,boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "one of the locales from the ULocale.getAvailableLocales() list, or null if none match"]], "Parameters": [["@B_java#lang#String_E@", "String: list in HTTP \"Accept-Language:\" format of acceptable locales"], ["boolean[]", "boolean: if non-null, a 1-element array containing a boolean to be set with the fallback status"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static ULocale acceptLanguage (String acceptLanguageList, boolean[] fallback)"}, "getLanguage()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayLanguage_E@"], "Permissions": [], "Description": "Returns the language code for this locale, which will either be the empty string or a lowercase ISO 639 code.", "history": "Added in API level 24", "FullName": "public String getLanguage ()"}, "getDisplayLanguage(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale's language localized for display in the provided locale.", "history": "Added in API level 24", "FullName": "public String getDisplayLanguage (ULocale displayLocale)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "String the full name of the localeID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hashCode.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "getUnicodeLocaleAttributes()": {"Returns": [["@B_java#util#Set_E@", "The set of attributes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes. The returned set is unmodifiable.", "history": "Added in API level 24", "FullName": "public Set<String> getUnicodeLocaleAttributes ()"}, "toLocale()": {"Returns": [["@B_java#util#Locale_E@", "a @B_java#util#Locale_E@ that either exactly represents this object or is the closest approximation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_java#util#Locale_E@.", "history": "Added in API level 24", "FullName": "public Locale toLocale ()"}, "getDisplayLanguage(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose language will be displayed"], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayLanguage (String localeID, String displayLocaleID)"}, "getFallback()": {"Returns": [["@B_android#icu#util#ULocale_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public ULocale getFallback ()"}, "getISO3Country()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if the three-letter country abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a three-letter abbreviation for this locale's country/region. If the locale doesn't specify a country, returns the empty string. Otherwise, returns an uppercase ISO 3166 3-letter country code.", "history": "Added in API level 24", "FullName": "public String getISO3Country ()"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns this locale name localized for display in the default DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getDisplayName ()"}, "getCharacterOrientation()": {"Returns": [["@B_java#lang#String_E@", "The locale's layout orientation for characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getCharacterOrientation ()"}, "getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale whose name is to be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayNameWithDialect (String localeID, ULocale displayLocale)"}, "getBaseName()": {"Returns": [["@B_java#lang#String_E@", "the base name as a String."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#util#ULocale#getName_E@, but without keywords.", "history": "Added in API level 24", "FullName": "public String getBaseName ()"}, "getDisplayScript()": {"Returns": [["@B_java#lang#String_E@", "the localized script name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns this locale's script localized for display in the default DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getDisplayScript ()"}, "toLegacyType(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the well-formed legacy type, or null if the specified keyword value cannot be mapped to a well-formed legacy type."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale keyword (either legacy keyword such as \"collation\" or BCP 47 Unicode locale extension key such as \"co\")."], ["@B_java#lang#String_E@", "String: the locale keyword value (either BCP 47 Unicode locale extension type such as \"phonebk\" or legacy keyword value such as \"phonebook\")."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#toUnicodeLocaleType_E@"], "Permissions": [], "Description": "When the specified keyword is not recognized, but the specified value satisfies the syntax of legacy key, or when the specified keyword allows 'variable' type and the specified value satisfies the syntax, the lower-case version of the input value will be returned. For example, toLegacyType(\"Foo\", \"Bar\") returns \"bar\", toLegacyType(\"vt\", \"00A4\") returns \"00a4\".", "history": "added in API level 24", "FullName": "public static String toLegacyType (String keyword, String value)"}, "getExtensionKeys()": {"Returns": [["@B_java#util#Set_E@", "the set of extension keys, or the empty set if this locale has no extensions"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of extension keys associated with this locale, or the empty set if it has no extensions. The returned set is unmodifiable. The keys will all be lower-case.", "history": "Added in API level 24", "FullName": "public Set<Character> getExtensionKeys ()"}, "getDisplayNameWithDialect(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getDisplayNameWithDialect (ULocale displayLocale)"}, "getDisplayVariant(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized variant name."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale's variant localized for display in the provided locale.", "history": "Added in API level 24", "FullName": "public String getDisplayVariant (ULocale displayLocale)"}, "getDisplayScript(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized script name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose script will be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayScript (String localeID, ULocale displayLocale)"}, "getKeywordValue(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "String the value of the keyword as a string"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String: name of the keyword whose value is desired. Case insensitive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getKeywordValue (String localeID, String keywordName)"}, "toUnicodeLocaleKey(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the well-formed BCP 47 Unicode locale extension key, or null if the specified locale keyword cannot be mapped to a well-formed BCP 47 Unicode locale extension key."]], "Parameters": [["@B_java#lang#String_E@", "String: the input locale keyword (either legacy key such as \"collation\" or BCP 47 Unicode locale extension key such as \"co\")."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#toLegacyKey_E@"], "Permissions": [], "Description": "When the specified keyword is unknown, but satisfies the BCP syntax, then the lower-case version of the input keyword will be returned. For example, toUnicodeLocaleKey(\"ZZ\") returns \"zz\".", "history": "Added in API level 24", "FullName": "public static String toUnicodeLocaleKey (String keyword)"}, "getDisplayVariant(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized variant name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose variant will be displayed"], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayVariant (String localeID, String displayLocaleID)"}, "getDisplayLanguage(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the localized language name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose language will be displayed."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayLanguage (String localeID, ULocale displayLocale)"}, "getCountry(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The locale identification string."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayCountry_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getCountry (String localeID)"}, "getFallback(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getFallback (String localeID)"}, "getDefault(android.icu.util.ULocale.Category)": {"Returns": [["@B_android#icu#util#ULocale_E@", "the default ULocale for the specified category."]], "Parameters": [["@B_android#icu#util#ULocale#Category_E@", "ULocale.Category: the category"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current default ULocale for the specified category.", "history": "Added in API level 24", "FullName": "public static ULocale getDefault (ULocale.Category category)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is for compatibility with Locale-- in actuality, since ULocale is immutable, there is no reason to clone it, so this API returns 'this'.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "ULocale(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#ULocale_E@"], "Permissions": [], "Description": "Convenience overload of ULocale(String, String, String) for compatibility with java.util.Locale.", "history": "Added in API level 24", "FullName": "public ULocale (String a, String b)"}, "getDisplayName(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized locale name."]], "Parameters": [["@B_java#lang#String_E@", "String: the locale whose name is to be displayed."], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the locale name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public static String getDisplayName (String localeID, String displayLocaleID)"}, "getKeywords(java.lang.String)": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the keywords in the specified locale, or null if there are no keywords."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static Iterator<String> getKeywords (String localeID)"}, "compareTo(android.icu.util.ULocale)": {"Returns": [["int", "a negative integer, zero, or a positive integer as this ULocale is less than, equal to, or greater than the specified ULocale."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the ULocale to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares two ULocale for ordering.", "history": "Added in API level 24", "FullName": "public int compareTo (ULocale other)"}, "getISO3Country(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if the three-letter country abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getISO3Country (String localeID)"}, "acceptLanguage(java.lang.String, boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "one of the locales from the ULocale.getAvailableLocales() list, or null if none match"]], "Parameters": [["@B_java#lang#String_E@", "String: list in HTTP \"Accept-Language:\" format of acceptable locales"], ["boolean[]", "boolean: if non-null, a 1-element array containing a boolean to be set with the fallback status"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public static ULocale acceptLanguage (String acceptLanguageList, boolean[] fallback)"}, "getDisplayScript(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized script name."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the locale whose script will be displayed"], ["@B_java#lang#String_E@", "String: the id of the locale in which to display the name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayScript (String localeID, String displayLocaleID)"}, "forLocale(java.util.Locale)": {"Returns": [["@B_android#icu#util#ULocale_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: a @B_java#util#Locale_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_java#util#Locale_E@. The ULocale is canonicalized.", "history": "Added in API level 24", "FullName": "public static ULocale forLocale (Locale loc)"}, "getUnicodeLocaleType(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The Unicode locale type associated with the key, or null if the locale does not define the key."]], "Parameters": [["@B_java#lang#String_E@", "String: the Unicode locale key"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the key is not well-formed"], ["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Unicode locale type associated with the specified Unicode locale key for this locale. Returns the empty string for keys that are defined with no type. Returns null if the key is not defined. Keys are case-insensitive. The key must be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is thrown.", "history": "Added in API level 24", "FullName": "public String getUnicodeLocaleType (String key)"}, "getKeywords()": {"Returns": [["@B_java#util#Iterator_E@", "iterator over keywords, or null if there are no keywords."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Iterator<String> getKeywords ()"}, "getDisplayVariant()": {"Returns": [["@B_java#lang#String_E@", "the localized variant name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns this locale's variant localized for display in the default DISPLAY locale.", "history": "Added in API level 24", "FullName": "public String getDisplayVariant ()"}, "forLanguageTag(java.lang.String)": {"Returns": [["@B_android#icu#util#ULocale_E@", "The locale that best represents the language tag."]], "Parameters": [["@B_java#lang#String_E@", "String: the language tag"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if languageTag is null"]], "SeeAlso": ["@B_android#icu#util#ULocale#toLanguageTag_E@", "@B_android#icu#util#ULocale#Builder#setLanguageTag_E@"], "Permissions": [], "Description": "Returns a locale for the specified IETF BCP 47 language tag string. If the specified language tag contains any ill-formed subtags, the first such subtag and all following subtags are ignored. Compare to @B_android#icu#util#ULocale#Builder#setLanguageTag_E@ which throws an exception in this case. The following The language code \"und\" is mapped to language \"\". The portion of a private use subtag prefixed by \"lvariant\", if any, is removed and appended to the variant field in the result locale (without case normalization). If it is then empty, the private use subtag is discarded: When the languageTag argument contains an extlang subtag, the first such subtag is used as the language, and the primary language subtag and other extlang subtags are ignored: Case is normalized. Language is normalized to lower case, script to title case, country to upper case, variant to upper case, and extensions to lower case. This implements the 'Language-Tag' production of BCP47, and so supports grandfathered (regular and irregular) as well as private use language tags. Stand alone private use tags are represented as empty language and extension 'x-whatever', and grandfathered tags are converted to their canonical replacements where they exist. Grandfathered tags with canonical replacements are as follows: Grandfathered tags with no modern replacement will be converted as follows: For a list of all grandfathered tags, see the IANA Language Subtag Registry (search for \"Type: grandfathered\"). toLanguageTag and forLanguageTag will round-trip.", "history": "Added in API level 24", "FullName": "public static ULocale forLanguageTag (String languageTag)"}, "getLanguage(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#getDisplayLanguage_E@"], "Permissions": [], "Description": "Returns the language code for the locale ID, which will either be the empty string or a lowercase ISO 639 code.", "history": "Added in API level 24", "FullName": "public static String getLanguage (String localeID)"}, "canonicalize(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the canonicalized id"]], "Parameters": [["@B_java#lang#String_E@", "String: the locale id"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String canonicalize (String localeID)"}}, "Inheritance": [], "ClassName": "android.icu.util.ULocale", "ClassDesc": "@B_java#util#Locale_E@. Methods, fields, and other functionality specific to ICU are labeled '@B_java#util#Locale_E@ that provides additional support for ICU protocol. In ICU 3.0 this class is enhanced to support RFC 3066 language identifiers. Many classes and services in ICU follow a factory idiom, in which a factory method or object responds to a client request with an object. The request includes a locale (the ULocale performs language, script, country, variant, and keywords are properly cased (lower, title, upper, upper, and lower case respectively) hyphens used as separators are converted to underscores three-letter language and country ids are converted to two-letter equivalents where available surrounding spaces are removed from keywords and values if there are multiple keywords, they are put in sorted order Canonicalization additionally performs the following: POSIX ids are converted to ICU format IDs 'grandfathered' 3066 ids are converted to ICU standard form 'PREEURO' and 'EURO' variants are converted to currency keyword form, with the currency id appropriate to the country of the locale (for PREEURO) or EUR (for EURO). All ULocale constructors automatically normalize the locale id. To handle POSIX ids, canonicalize can be called to convert the id to canonical form, or the canonicalInstance factory method can be called. Note: The"}