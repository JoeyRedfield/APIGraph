{"Functions": {"setRef(int,java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: an object representing data of an SQL REF type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Ref value. The driver will convert this to the appropriate REF(<structured-type>) value.", "history": "Added in API level 1", "FullName": "public abstract void setRef (int i, Ref x)"}, "setTimestamp(java.lang.String,java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x)"}, "setNull(int,int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully qualified name of an SQL UDT or the type name of the SQL structured type being referenced by a REF type; ignored if the parameter is not a UDT or REF type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's SQL command to SQL NULL. This version of the method setNull should be used for SQL user-defined types (UDTs) and REF type parameters. Examples of UDTs include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. REF parameter. In the case of a UDT, the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for UDT and REF parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the typeName parameter is ignored.", "history": "Added in API level 1", "FullName": "public abstract void setNull (int paramIndex, int sqlType, String typeName)"}, "setFloat(int, float)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java float value. The driver converts this to an SQL REAL value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setFloat (int parameterIndex, float x)"}, "setClob(java.lang.String,java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Clob x)"}, "setBlob(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement or if parameterIndex does not correspond to a parameter marker in the SQL statement,"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream)"}, "setBoolean(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getBoolean_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setBoolean (String parameterName, boolean x)"}, "setMaxFieldSize(int)": {"Returns": [], "Parameters": [["int", "int: the new max column size limit in bytes; zero means unlimited"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getMaxFieldSize_E@"], "Permissions": [], "Description": "Sets the maximum number of bytes that can be returned for a column value to the given number of bytes. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, VARCHAR, LONGVARCHAR, NCHAR and NVARCHAR columns. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256.", "history": "Added in API level 1", "FullName": "public abstract void setMaxFieldSize (int max)"}, "setDouble(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getDouble_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setDouble (String parameterName, double x)"}, "setBinaryStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x)"}, "setInt(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getInt_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setInt (String parameterName, int x)"}, "setArray(int,java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: an object representing an SQL array"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Array value. The driver will convert this to the ARRAY value that the Array object represents before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setArray (int i, Array x)"}, "setAsciiStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x)"}, "setUsername(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a user name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getUsername_E@"], "Permissions": [], "Description": "Sets the username property for this RowSet object to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setUsername (String name)"}, "isReadOnly()": {"Returns": [["boolean", "true if this RowSet object is read-only; false if it is updatable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setReadOnly_E@"], "Permissions": [], "Description": "Retrieves whether this RowSet object is read-only. If updates are possible, the default is for a rowset to be updatable. Attempts to update a read-only rowset will result in an SQLException being thrown.", "history": "Added in API level 1", "FullName": "public abstract boolean isReadOnly ()"}, "setDate(int, java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Date value. The driver converts this to an SQL DATE value before sending it to the database, using the default java.util.Calendar to calculate the date.", "history": "added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x)"}, "setLong(int, long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java long value. The driver converts this to an SQL BIGINT value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setLong (int parameterIndex, long x)"}, "setTimestamp(java.lang.String, java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x)"}, "setObject(java.lang.String,java.lang.Object,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#ResultSet#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "Added in API level 9", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType)"}, "setNCharacterStream(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value, long length)"}, "setRowId(java.lang.String,java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setRowId (String parameterName, RowId x)"}, "setNull(java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types.", "history": "Added in API level 9", "FullName": "public abstract void setNull (String parameterName, int sqlType, String typeName)"}, "setString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java String value. Before sending it to the database, the driver converts this to an SQL VARCHAR or LONGVARCHAR value, depending on the argument's size relative to the driver's limits on VARCHAR values.", "history": "added in API level 1", "FullName": "public abstract void setString (int parameterIndex, String x)"}, "setClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement, if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB", "history": "added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader, long length)"}, "setClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader, long length)"}, "setBytes(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java array of byte values. Before sending it to the database, the driver converts this to an SQL VARBINARY or LONGVARBINARY value, depending on the argument's size relative to the driver's limits on VARBINARY values.", "history": "Added in API level 1", "FullName": "public abstract void setBytes (int parameterIndex, byte[] x)"}, "setBlob(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero; if the number of bytes in the inputstream does not match the specfied length; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length, otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream, long length)"}, "setLong(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getLong_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setLong (String parameterName, long x)"}, "setQueryTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the new query timeout limit in seconds; zero means that there is no limit"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getQueryTimeout_E@"], "Permissions": [], "Description": "Sets the maximum time the driver will wait for a statement to execute to the given number of seconds. If this limit is exceeded, an SQLException is thrown.", "history": "Added in API level 1", "FullName": "public abstract void setQueryTimeout (int seconds)"}, "setObject(int,java.lang.Object,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. This method is like setObject above, but the scale used is the scale of the second parameter. Scalar values have a scale of zero. Literal values have the scale present in the literal. Even though it is supported, it is not recommended that this method be called with floating point input values.", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType)"}, "setEscapeProcessing(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable escape processing; false to disable it"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getEscapeProcessing_E@"], "Permissions": [], "Description": "Sets escape processing for this RowSet object on or off. If escape scanning is on (the default), the driver will do escape substitution before sending an SQL statement to the database.", "history": "Added in API level 1", "FullName": "public abstract void setEscapeProcessing (boolean enable)"}, "setReadOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if read-only; false if updatable"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#isReadOnly_E@"], "Permissions": [], "Description": "Sets whether this RowSet object is read-only to the given boolean.", "history": "Added in API level 1", "FullName": "public abstract void setReadOnly (boolean value)"}, "getEscapeProcessing()": {"Returns": [["boolean", "true if escape processing is enabled; false if it is disabled"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setEscapeProcessing_E@"], "Permissions": [], "Description": "Retrieves whether escape processing is enabled for this RowSet object. If escape scanning is enabled, which is the default, the driver will do escape substitution before sending an SQL statement to the database.", "history": "Added in API level 1", "FullName": "public abstract boolean getEscapeProcessing ()"}, "setBlob(java.lang.String, java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setBlob (String parameterName, Blob x)"}, "setCharacterStream(int, java.io.Reader, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the Reader object that contains the UNICODE data to be set"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.Reader value. It may be more practical to send a very large UNICODE value via a java.io.Reader rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "added in API level 1", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, int length)"}, "setAsciiStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (String parameterName, InputStream x)"}, "getQueryTimeout()": {"Returns": [["int", "the current query timeout limit in seconds; zero means unlimited"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setQueryTimeout_E@"], "Permissions": [], "Description": "Retrieves the maximum number of seconds the driver will wait for a statement to execute. If this limit is exceeded, an SQLException is thrown.", "history": "Added in API level 1", "FullName": "public abstract int getQueryTimeout ()"}, "setBlob(java.lang.String, java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream)"}, "setString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java String value. Before sending it to the database, the driver converts this to an SQL VARCHAR or LONGVARCHAR value, depending on the argument's size relative to the driver's limits on VARCHAR values.", "history": "Added in API level 1", "FullName": "public abstract void setString (int parameterIndex, String x)"}, "setSQLXML(int,java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed result set, the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object or if there is an error processing the XML value. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setSQLXML (int parameterIndex, SQLXML xmlObject)"}, "setTimestamp(int,java.sql.Timestamp,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use for calculating the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given java.sql.Timestamp value. The driver will convert this to an SQL TIMESTAMP value, using the given java.util.Calendar object to calculate it, before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setTimestamp (int parameterIndex, Timestamp x, Calendar cal)"}, "setAsciiStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (String parameterName, InputStream x, int length)"}, "addRowSetListener(javax.sql.RowSetListener)": {"Returns": [], "Parameters": [["@B_javax#sql#RowSetListener_E@", "RowSetListener: a component that has implemented the RowSetListener interface and wants to be notified when events occur on this RowSet object"]], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#removeRowSetListener_E@"], "Permissions": [], "Description": "Registers the given listener so that it will be notified of events that occur on this RowSet object.", "history": "Added in API level 1", "FullName": "public abstract void addRowSetListener (RowSetListener listener)"}, "setDouble(int,double)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java double value. The driver converts this to an SQL DOUBLE value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setDouble (int parameterIndex, double x)"}, "getUsername()": {"Returns": [["@B_java#lang#String_E@", "the username property"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setUsername_E@"], "Permissions": [], "Description": "Retrieves the username used to create a database connection for this RowSet object. The username property is set at run time before calling the method execute. It is not usually part of the serialized state of a RowSet object.", "history": "Added in API level 1", "FullName": "public abstract String getUsername ()"}, "setShort(java.lang.String, short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getShort_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setShort (String parameterName, short x)"}, "setNClob(java.lang.String,java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the column to be set"], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, NClob value)"}, "setNClob(java.lang.String, java.io.Reader, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader, long length)"}, "setTime(java.lang.String,java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setTime (String parameterName, Time x)"}, "setNClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader)"}, "setObject(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed CallableStatement or if the given Object parameter is ambiguous"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.", "history": "Added in API level 9", "FullName": "public abstract void setObject (String parameterName, Object x)"}, "setTime(int, java.sql.Time, java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use for calculating the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given java.sql.Time value. The driver will convert this to an SQL TIME value, using the given java.util.Calendar object to calculate it, before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x, Calendar cal)"}, "setNull(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "Added in API level 9", "FullName": "public abstract void setNull (String parameterName, int sqlType)"}, "setInt(int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java int value. The driver converts this to an SQL INTEGER value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setInt (int parameterIndex, int x)"}, "setURL(int,java.net.URL)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#net#URL_E@", "URL: the java.net.URL object to be set"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setURL (int parameterIndex, URL x)"}, "setBoolean(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java boolean value. The driver converts this to an SQL BIT value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBoolean (int parameterIndex, boolean x)"}, "getCommand()": {"Returns": [["@B_java#lang#String_E@", "the command string; may be null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setCommand_E@"], "Permissions": [], "Description": "Retrieves this RowSet object's command property. The command property contains a command string, which must be an SQL query, that can be executed to fill the rowset with data. The default value is null.", "history": "Added in API level 1", "FullName": "public abstract String getCommand ()"}, "setMaxRows(int)": {"Returns": [], "Parameters": [["int", "int: the new maximum number of rows; zero means unlimited"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getMaxRows_E@"], "Permissions": [], "Description": "Sets the maximum number of rows that this RowSet object can contain to the specified number. If the limit is exceeded, the excess rows are silently dropped.", "history": "Added in API level 1", "FullName": "public abstract void setMaxRows (int max)"}, "setDataSourceName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the logical name of the data source for this RowSet object; may be null"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getDataSourceName_E@"], "Permissions": [], "Description": "Sets the data source name property for this RowSet object to the given String. The value of the data source name property can be used to do a lookup of a DataSource object that has been registered with a naming service. After being retrieved, the DataSource object can be used to create a connection to the data source that it represents.", "history": "Added in API level 1", "FullName": "public abstract void setDataSourceName (String name)"}, "setBoolean(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java boolean value. The driver converts this to an SQL BIT value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBoolean (int parameterIndex, boolean x)"}, "setBlob(int, java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: an object representing a BLOB"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Blob value. The driver will convert this to the BLOB value that the Blob object represents before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBlob (int i, Blob x)"}, "setDate(int,java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Date value. The driver converts this to an SQL DATE value before sending it to the database, using the default java.util.Calendar to calculate the date.", "history": "Added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x)"}, "setNull(int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a SQL type code defined by java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's SQL command to SQL NULL.", "history": "Added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType)"}, "setNClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader, long length)"}, "setBlob(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement, if parameterIndex does not correspond to a parameter marker in the SQL statement, if the length specified is less than zero or if the number of bytes in the inputstream does not match the specfied length."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "Added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream, long length)"}, "setBlob(java.lang.String,java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, Blob x)"}, "setRowId(int,java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database", "history": "Added in API level 9", "FullName": "public abstract void setRowId (int parameterIndex, RowId x)"}, "setBinaryStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large binary value via a java.io.InputStream rather than as a LONGVARBINARY parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "Added in API level 1", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, int length)"}, "setDate(java.lang.String,java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setDate (String parameterName, Date x)"}, "setNString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the column to be set"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR", "history": "added in API level 9", "FullName": "public abstract void setNString (String parameterName, String value)"}, "setShort(int,short)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java short value. The driver converts this to an SQL SMALLINT value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setShort (int parameterIndex, short x)"}, "setTransactionIsolation(int)": {"Returns": [], "Parameters": [["int", "int: the transaction isolation level; one of Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or Connection.TRANSACTION_SERIALIZABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getTransactionIsolation_E@"], "Permissions": [], "Description": "Sets the transaction isolation level for this RowSet obejct.", "history": "Added in API level 1", "FullName": "public abstract void setTransactionIsolation (int level)"}, "setNCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value)"}, "setObject(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed CallableStatement or if the given Object parameter is ambiguous"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.", "history": "added in API level 9", "FullName": "public abstract void setObject (String parameterName, Object x)"}, "setCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (String parameterName, Reader reader)"}, "setPassword(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the password string"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getPassword_E@"], "Permissions": [], "Description": "Sets the database password for this RowSet object to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setPassword (String password)"}, "setRef(int, java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: an object representing data of an SQL REF type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Ref value. The driver will convert this to the appropriate REF(<structured-type>) value.", "history": "added in API level 1", "FullName": "public abstract void setRef (int i, Ref x)"}, "setByte(int,byte)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java byte value. The driver converts this to an SQL TINYINT value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setByte (int parameterIndex, byte x)"}, "setObject(int, java.lang.Object, int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Java Object. For integral values, the java.lang equivalent objects should be used (for example, an instance of the class Integer for an int). If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified * by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the targetSqlType before being sent to the database. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass datatabase-specific abstract data types.", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType, int scaleOrLength)"}, "setBinaryStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x)"}, "setNClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader)"}, "setDouble(int, double)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java double value. The driver converts this to an SQL DOUBLE value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setDouble (int parameterIndex, double x)"}, "setBigDecimal(java.lang.String,java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getBigDecimal_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setBigDecimal (String parameterName, BigDecimal x)"}, "setInt(int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java int value. The driver converts this to an SQL INTEGER value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setInt (int parameterIndex, int x)"}, "setTime(int,java.sql.Time,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use for calculating the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given java.sql.Time value. The driver will convert this to an SQL TIME value, using the given java.util.Calendar object to calculate it, before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x, Calendar cal)"}, "setClob(int, java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: an object representing a CLOB"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Clob value. The driver will convert this to the CLOB value that the Clob object represents before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setClob (int i, Clob x)"}, "setBigDecimal(int, java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.math.BigDeciaml value. The driver converts this to an SQL NUMERIC value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBigDecimal (int parameterIndex, BigDecimal x)"}, "setNClob(java.lang.String, java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the column to be set"], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, NClob value)"}, "setBlob(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream)"}, "setInt(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getInt_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setInt (String parameterName, int x)"}, "setBigDecimal(int,java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.math.BigDeciaml value. The driver converts this to an SQL NUMERIC value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBigDecimal (int parameterIndex, BigDecimal x)"}, "setTime(int,java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Time value. The driver converts this to an SQL TIME value before sending it to the database, using the default java.util.Calendar to calculate it.", "history": "Added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x)"}, "setDate(int, java.sql.Date, java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use for calculating the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given java.sql.Date value. The driver will convert this to an SQL DATE value, using the given java.util.Calendar object to calculate the date.", "history": "added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x, Calendar cal)"}, "getPassword()": {"Returns": [["@B_java#lang#String_E@", "the password for making a database connection"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setPassword_E@"], "Permissions": [], "Description": "Retrieves the password used to create a database connection. The password property is set at run time before calling the method execute. It is not usually part of the serialized state of a RowSet object.", "history": "Added in API level 1", "FullName": "public abstract String getPassword ()"}, "setTime(java.lang.String,java.sql.Time,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 9", "FullName": "public abstract void setTime (String parameterName, Time x, Calendar cal)"}, "setNCharacterStream(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value, long length)"}, "setObject(java.lang.String, java.lang.Object, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#ResultSet#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "added in API level 9", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType)"}, "setAsciiStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x)"}, "setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 9", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x, Calendar cal)"}, "setBinaryStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large binary value via a java.io.InputStream rather than as a LONGVARBINARY parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "added in API level 1", "FullName": "public abstract void setBinaryStream (int parameterIndex, InputStream x, int length)"}, "setUrl(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string value; may be null"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getUrl_E@"], "Permissions": [], "Description": "Sets the URL this RowSet object will use when it uses the DriverManager to create a connection. Setting this property is optional. If a URL is used, a JDBC driver that accepts the URL must be loaded before the rowset is used to connect to a database. The rowset will use the URL internally to create a database connection when reading or writing data. Either a URL or a data source name is used to create a connection, whichever was set to non null value most recently.", "history": "Added in API level 1", "FullName": "public abstract void setUrl (String url)"}, "setAsciiStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large ASCII value via a java.io.InputStream rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "Added in API level 1", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, int length)"}, "setBlob(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement or if parameterIndex does not correspond to a parameter marker in the SQL statement,"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream)"}, "setLong(int,long)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java long value. The driver converts this to an SQL BIGINT value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setLong (int parameterIndex, long x)"}, "setFloat(int,float)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java float value. The driver converts this to an SQL REAL value before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setFloat (int parameterIndex, float x)"}, "setNClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader)"}, "setDate(java.lang.String,java.sql.Date,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 9", "FullName": "public abstract void setDate (String parameterName, Date x, Calendar cal)"}, "setByte(int, byte)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java byte value. The driver converts this to an SQL TINYINT value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setByte (int parameterIndex, byte x)"}, "removeRowSetListener(javax.sql.RowSetListener)": {"Returns": [], "Parameters": [["@B_javax#sql#RowSetListener_E@", "RowSetListener: a component that has been registered as a listener for this RowSet object"]], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#addRowSetListener_E@"], "Permissions": [], "Description": "Removes the specified listener from the list of components that will be notified when an event occurs on this RowSet object.", "history": "Added in API level 1", "FullName": "public abstract void removeRowSetListener (RowSetListener listener)"}, "setNClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader)"}, "setCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader)"}, "setNString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setNString (int parameterIndex, String value)"}, "setTime(java.lang.String, java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setTime (String parameterName, Time x)"}, "setNString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the column to be set"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR", "history": "Added in API level 9", "FullName": "public abstract void setNString (String parameterName, String value)"}, "setBinaryStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (String parameterName, InputStream x)"}, "setObject(int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: The object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. The JDBC specification provides a standard mapping from Java Object types to SQL types. The driver will convert the given Java object to its standard SQL mapping before sending it to the database. Note that this method may be used to pass datatabase-specific abstract data types by using a driver-specific Java type. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. An exception is thrown if there is an ambiguity, for example, if the object is of a class implementing more than one of these interfaces.", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x)"}, "setCharacterStream(java.lang.String,java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the UNICODE data used as the designated parameter"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (String parameterName, Reader reader, int length)"}, "setNull(int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a SQL type code defined by java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's SQL command to SQL NULL.", "history": "added in API level 1", "FullName": "public abstract void setNull (int parameterIndex, int sqlType)"}, "setShort(java.lang.String,short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getShort_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setShort (String parameterName, short x)"}, "setClob(int,java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: an object representing a CLOB"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Clob value. The driver will convert this to the CLOB value that the Clob object represents before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setClob (int i, Clob x)"}, "setAsciiStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large ASCII value via a java.io.InputStream rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "added in API level 1", "FullName": "public abstract void setAsciiStream (int parameterIndex, InputStream x, int length)"}, "setBoolean(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getBoolean_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setBoolean (String parameterName, boolean x)"}, "setNClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader, long length)"}, "setCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader)"}, "setBlob(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement, if parameterIndex does not correspond to a parameter marker in the SQL statement, if the length specified is less than zero or if the number of bytes in the inputstream does not match the specfied length."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "added in API level 9", "FullName": "public abstract void setBlob (int parameterIndex, InputStream inputStream, long length)"}, "setTypeMap(java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: a java.util.Map object containing the names of SQL user-defined types and the Java classes to which they are to be mapped"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getTypeMap_E@"], "Permissions": [], "Description": "Installs the given java.util.Map object as the default type map for this RowSet object. This type map will be used unless another type map is supplied as a method parameter.", "history": "Added in API level 1", "FullName": "public abstract void setTypeMap (Map<String, Class<?>> map)"}, "setFloat(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getFloat_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setFloat (String parameterName, float x)"}, "setConcurrency(int)": {"Returns": [], "Parameters": [["int", "int: one of the ResultSet constants specifying a concurrency level: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#ResultSet#getConcurrency_E@"], "Permissions": [], "Description": "Sets the concurrency of this RowSet object to the given concurrency level. This method is used to change the concurrency level of a rowset, which is by default ResultSet.CONCUR_READ_ONLY", "history": "Added in API level 1", "FullName": "public abstract void setConcurrency (int concurrency)"}, "setBytes(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java array of byte values. Before sending it to the database, the driver converts this to an SQL VARBINARY or LONGVARBINARY value, depending on the argument's size relative to the driver's limits on VARBINARY values.", "history": "added in API level 1", "FullName": "public abstract void setBytes (int parameterIndex, byte[] x)"}, "setBlob(int,java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: an object representing a BLOB"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Blob value. The driver will convert this to the BLOB value that the Blob object represents before sending it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBlob (int i, Blob x)"}, "setObject(java.lang.String,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@", "@B_java#sql#ResultSet#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass datatabase- specific abstract data types.", "history": "Added in API level 9", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType, int scale)"}, "execute()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or any of the properties necessary for making a connection and creating a statement have not been set"]], "SeeAlso": [], "Permissions": [], "Description": "Fills this RowSet object with data. The execute method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. The execute method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout. If the required properties have not been set, an exception is thrown. If this method is successful, the current contents of the rowset are discarded and the rowset's metadata is also (re)set. If there are outstanding updates, they are ignored. If this RowSet object does not maintain a continuous connection with its source of data, it may use a reader (a RowSetReader object) to fill itself with data. In this case, a reader will have been registered with this RowSet object, and the method execute will call on the reader's readData method as part of its implementation.", "history": "Added in API level 1", "FullName": "public abstract void execute ()"}, "setClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatementor if parameterIndex does not correspond to a parameter marker in the SQL statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader)"}, "setTime(int, java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Time value. The driver converts this to an SQL TIME value before sending it to the database, using the default java.util.Calendar to calculate it.", "history": "added in API level 1", "FullName": "public abstract void setTime (int parameterIndex, Time x)"}, "setDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getDouble_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setDouble (String parameterName, double x)"}, "setSQLXML(java.lang.String,java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed result set, the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object or if there is an error processing the XML value. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setSQLXML (String parameterName, SQLXML xmlObject)"}, "setClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatement, if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB", "history": "Added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader, long length)"}, "setByte(java.lang.String, byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getByte_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setByte (String parameterName, byte x)"}, "setNString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated paramter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument's size relative to the driver's limits on NVARCHAR values) when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setNString (int parameterIndex, String value)"}, "getUrl()": {"Returns": [["@B_java#lang#String_E@", "a string url"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setUrl_E@"], "Permissions": [], "Description": "Retrieves the url property this RowSet object will use to create a connection if it uses the DriverManager instead of a DataSource object to establish the connection. The default value is null.", "history": "Added in API level 1", "FullName": "public abstract String getUrl ()"}, "setSQLXML(int, java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed result set, the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object or if there is an error processing the XML value. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setSQLXML (int parameterIndex, SQLXML xmlObject)"}, "setString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getString_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setString (String parameterName, String x)"}, "setType(int)": {"Returns": [], "Parameters": [["int", "int: one of the ResultSet constants specifying a type: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#ResultSet#getType_E@"], "Permissions": [], "Description": "Sets the type of this RowSet object to the given type. This method is used to change the type of a rowset, which is by default read-only and non-scrollable.", "history": "Added in API level 1", "FullName": "public abstract void setType (int type)"}, "clearParameters()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Clears the parameters set for this RowSet object's command. In general, parameter values remain in force for repeated use of a RowSet object. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values, which can be done by calling the method clearParameters.", "history": "Added in API level 1", "FullName": "public abstract void clearParameters ()"}, "getMaxFieldSize()": {"Returns": [["int", "the current maximum column size limit; zero means that there is no limit"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setMaxFieldSize_E@"], "Permissions": [], "Description": "Retrieves the maximum number of bytes that may be returned for certain column values. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, VARCHAR, LONGVARCHAR, NCHAR and NVARCHAR columns. If the limit is exceeded, the excess data is silently discarded.", "history": "Added in API level 1", "FullName": "public abstract int getMaxFieldSize ()"}, "getTypeMap()": {"Returns": [["@B_java#util#Map_E@", "a java.util.Map object containing the names of SQL user-defined types and the Java classes to which they are to be mapped"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setTypeMap_E@"], "Permissions": [], "Description": "Retrieves the Map object associated with this RowSet object, which specifies the custom mapping of SQL user-defined types, if any. The default is for the type map to be empty.", "history": "Added in API level 1", "FullName": "public abstract Map<String, Class<?>> getTypeMap ()"}, "setCharacterStream(int,java.io.Reader,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the Reader object that contains the UNICODE data to be set"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.io.Reader value. It may be more practical to send a very large UNICODE value via a java.io.Reader rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file.", "history": "Added in API level 1", "FullName": "public abstract void setCharacterStream (int parameterIndex, Reader reader, int length)"}, "setNull(java.lang.String, int, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types.", "history": "added in API level 9", "FullName": "public abstract void setNull (String parameterName, int sqlType, String typeName)"}, "setClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader)"}, "setRowId(java.lang.String, java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setRowId (String parameterName, RowId x)"}, "getMaxRows()": {"Returns": [["int", "the current maximum number of rows that this RowSet object can contain; zero means unlimited"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#setMaxRows_E@"], "Permissions": [], "Description": "Retrieves the maximum number of rows that this RowSet object can contain. If the limit is exceeded, the excess rows are silently dropped.", "history": "Added in API level 1", "FullName": "public abstract int getMaxRows ()"}, "setArray(int, java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: an object representing an SQL array"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Array value. The driver will convert this to the ARRAY value that the Array object represents before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setArray (int i, Array x)"}, "setNCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (int parameterIndex, Reader value)"}, "setObject(int,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given Java Object. For integral values, the java.lang equivalent objects should be used (for example, an instance of the class Integer for an int). If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified * by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the targetSqlType before being sent to the database. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass datatabase-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType, int scaleOrLength)"}, "getDataSourceName()": {"Returns": [["@B_java#lang#String_E@", "a data source name"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setDataSourceName_E@", "@B_javax#sql#RowSet#setUrl_E@"], "Permissions": [], "Description": "Retrieves the logical name that identifies the data source for this RowSet object.", "history": "Added in API level 1", "FullName": "public abstract String getDataSourceName ()"}, "setDate(int,java.sql.Date,java.util.Calendar)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use for calculating the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with the given java.sql.Date value. The driver will convert this to an SQL DATE value, using the given java.util.Calendar object to calculate the date.", "history": "Added in API level 1", "FullName": "public abstract void setDate (int parameterIndex, Date x, Calendar cal)"}, "setCommand(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the SQL query that will be used to get the data for this RowSet object; may be null"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_javax#sql#RowSet#getCommand_E@"], "Permissions": [], "Description": "Sets this RowSet object's command property to the given SQL query. This property is optional when a rowset gets its data from a data source that does not support commands, such as a spreadsheet.", "history": "Added in API level 1", "FullName": "public abstract void setCommand (String cmd)"}, "setURL(int, java.net.URL)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#net#URL_E@", "URL: the java.net.URL object to be set"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setURL (int parameterIndex, URL x)"}, "setNClob(int,java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, NClob value)"}, "setBytes(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getBytes_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setBytes (String parameterName, byte[] x)"}, "setTimestamp(int, java.sql.Timestamp)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value before sending it to the database, using the default java.util.Calendar to calculate it.", "history": "added in API level 1", "FullName": "public abstract void setTimestamp (int parameterIndex, Timestamp x)"}, "setShort(int, short)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given Java short value. The driver converts this to an SQL SMALLINT value before sending it to the database.", "history": "added in API level 1", "FullName": "public abstract void setShort (int parameterIndex, short x)"}, "setNCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (String parameterName, Reader value)"}, "setClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader)"}, "setNClob(int, java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: of the first parameter is 1, the second is 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, NClob value)"}, "setClob(java.lang.String, java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Clob x)"}, "setClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed PreparedStatementor if parameterIndex does not correspond to a parameter marker in the SQL statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setClob (int parameterIndex, Reader reader)"}, "setClob(java.lang.String, java.io.Reader, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader, long length)"}, "setNull(int, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully qualified name of an SQL UDT or the type name of the SQL structured type being referenced by a REF type; ignored if the parameter is not a UDT or REF type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's SQL command to SQL NULL. This version of the method setNull should be used for SQL user-defined types (UDTs) and REF type parameters. Examples of UDTs include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. REF parameter. In the case of a UDT, the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for UDT and REF parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the typeName parameter is ignored.", "history": "added in API level 1", "FullName": "public abstract void setNull (int paramIndex, int sqlType, String typeName)"}, "setDate(java.lang.String, java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setDate (String parameterName, Date x)"}, "setBinaryStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (String parameterName, InputStream x, int length)"}, "setString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getString_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setString (String parameterName, String x)"}, "setNClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed PreparedStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB", "history": "added in API level 9", "FullName": "public abstract void setNClob (int parameterIndex, Reader reader, long length)"}, "setBytes(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getBytes_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setBytes (String parameterName, byte[] x)"}, "getTransactionIsolation()": {"Returns": [["int", "the transaction isolation level; one of Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or Connection.TRANSACTION_SERIALIZABLE"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#sql#RowSet#setTransactionIsolation_E@"], "Permissions": [], "Description": "Retrieves the transaction isolation level set for this RowSet object.", "history": "Added in API level 1", "FullName": "public abstract int getTransactionIsolation ()"}, "setRowId(int, java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database", "history": "added in API level 9", "FullName": "public abstract void setRowId (int parameterIndex, RowId x)"}, "setByte(java.lang.String,byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getByte_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setByte (String parameterName, byte x)"}, "setTimestamp(int,java.sql.Timestamp)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value before sending it to the database, using the default java.util.Calendar to calculate it.", "history": "Added in API level 1", "FullName": "public abstract void setTimestamp (int parameterIndex, Timestamp x)"}, "setObject(int, java.lang.Object, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. This method is like setObject above, but the scale used is the scale of the second parameter. Scalar values have a scale of zero. Literal values have the scale present in the literal. Even though it is supported, it is not recommended that this method be called with floating point input values.", "history": "added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x, int targetSqlType)"}, "setLong(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getLong_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setLong (String parameterName, long x)"}, "setNCharacterStream(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the column to be set"], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (String parameterName, Reader value, long length)"}, "setObject(int,java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The first parameter is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: The object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. The JDBC specification provides a standard mapping from Java Object types to SQL types. The driver will convert the given Java object to its standard SQL mapping before sending it to the database. Note that this method may be used to pass datatabase-specific abstract data types by using a driver-specific Java type. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. An exception is thrown if there is an ambiguity, for example, if the object is of a class implementing more than one of these interfaces.", "history": "Added in API level 1", "FullName": "public abstract void setObject (int parameterIndex, Object x)"}, "setNull(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "added in API level 9", "FullName": "public abstract void setNull (String parameterName, int sqlType)"}, "setFloat(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#ResultSet#getFloat_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setFloat (String parameterName, float x)"}, "setSQLXML(java.lang.String, java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed result set, the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object or if there is an error processing the XML value. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setSQLXML (String parameterName, SQLXML xmlObject)"}}, "Inheritance": [], "ClassName": "javax.sql.RowSet", "ClassDesc": "The interface that adds support to the JDBC API for the JavaBeans The RowSet interface provides a set of JavaBeans properties that allow a RowSet instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods (setInt, setBytes, setString, and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case. The RowSet interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value. The RowSet interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a RowSet implementation is a layer of software that executes \"on top\" of a JDBC driver. Implementations of the RowSet interface can be provided by anyone, including JDBC driver vendors who want to provide a RowSet implementation as part of their JDBC products. A RowSet object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a A disconnected rowset may have a reader (a RowSetReader object) and a writer (a RowSetWriter object) associated with it. The reader may be implemented in many different ways to populate a rowset with data, including getting data from a non-relational data source. The writer can also be implemented in many different ways to propagate changes made to the rowset's data back to the underlying data source. Rowsets are easy to use. The RowSet interface extends the standard java.sql.ResultSet interface. The RowSetMetaData interface extends the java.sql.ResultSetMetaData interface. Thus, developers familiar with the JDBC API will have to learn a minimal number of new APIs to use rowsets. In addition, third-party software tools that work with JDBC ResultSet objects will also easily be made to work with rowsets."}