{"Functions": {"throwIfCannotDraw(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void throwIfCannotDraw (Bitmap bitmap)"}, "restoreToCount(int)": {"Returns": [], "Parameters": [["int", "int: The save level to restore to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save().", "history": "Added in API level 1", "FullName": "public void restoreToCount (int saveCount)"}, "drawRect(android.graphics.Rect,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to be drawn. This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the rectangle This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawRect (Rect r, Paint paint)"}, "saveLayerAlpha(android.graphics.RectF, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The maximum size the offscreen bitmap needs to be (in local coordinates)This value may be null."], ["int", "int: The alpha to apply to the offscreen when it is drawn during restore()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Canvas#saveLayer_E@ but instead of taking a entire Paint object it takes only the alpha parameter.", "history": "added in API level 21", "FullName": "public int saveLayerAlpha (RectF bounds, int alpha)"}, "clipPath(android.graphics.Path)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to intersect with the current clip This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified path.", "history": "Added in API level 1", "FullName": "public boolean clipPath (Path path)"}, "drawColor(long,android.graphics.BlendMode)": {"Returns": [], "Parameters": [["long", "long: the ColorLong to draw onto the canvas. See the @B_android#graphics#Color_E@ class for details about ColorLongs."], ["@B_android#graphics#BlendMode_E@", "BlendMode: the blendmode to apply to the color This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the color space encoded in the ColorLong is invalid or unknown."]], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode.", "history": "Added in API level 29", "FullName": "public void drawColor (long color, BlendMode mode)"}, "rotate(float)": {"Returns": [], "Parameters": [["float", "float: The amount to rotate, in degrees"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified rotation.", "history": "Added in API level 1", "FullName": "public void rotate (float degrees)"}, "save()": {"Returns": [["int", "The value to pass to restoreToCount() to balance this save()"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect, clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated.", "history": "Added in API level 1", "FullName": "public int save ()"}, "saveLayer(float,float,float,float,android.graphics.Paint)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Canvas#saveLayer_E@ that takes the four float coordinates of the bounds rectangle.", "history": "Added in API level 21", "FullName": "public int saveLayer (float left, float top, float right, float bottom, Paint paint)"}, "drawLines(float[], android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float no parameter comment This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint no parameter comment This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void drawLines (float[] pts, Paint paint)"}, "drawRect(android.graphics.RectF,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rect to be drawn This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the rect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawRect (RectF rect, Paint paint)"}, "drawLines(float[],int,int,android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float: Array of points to draw [x0 y0 x1 y1 x2 y2 ...] This value must never be null."], ["int", "int: Number of values in the array to skip before drawing."], ["int", "int: The number of values in the array to process, after skipping \"offset\" of them. Since each line uses 4 values, the number of \"lines\" that are drawn is really (count >> 2)."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the points This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.", "history": "Added in API level 1", "FullName": "public void drawLines (float[] pts, int offset, int count, Paint paint)"}, "scale(float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale in X"], ["float", "float: The amount to scale in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified scale.", "history": "Added in API level 1", "FullName": "public void scale (float sx, float sy)"}, "drawColor(long)": {"Returns": [], "Parameters": [["long", "long: the ColorLong to draw onto the canvas. See the @B_android#graphics#Color_E@ class for details about ColorLongs."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the color space encoded in the ColorLong is invalid or unknown."]], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode.", "history": "Added in API level 29", "FullName": "public void drawColor (long color)"}, "saveLayerAlpha(android.graphics.RectF, int, int)": {"Returns": [["int", "value to pass to restoreToCount() to balance this call"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The maximum size the offscreen bitmap needs to be (in local coordinates)This value may be null."], ["int", "int: The alpha to apply to the offscreen when it is drawn during restore()"], ["int", "int: see _SAVE_FLAG constants, generally @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@ is recommended for performance reasons."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#saveLayerAlpha_E@ instead. This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen bitmap. @B_android#view#View#LAYER_TYPE_HARDWARE_E@ on a View to apply an xfermode, color filter, or alpha, as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen bitmap. Only when the balancing call to restore() is made, is that offscreen buffer drawn back to the current target of the Canvas (either the screen, it's target Bitmap, or the previous layer). The alpha parameter is applied when the offscreen bitmap is drawn back when restore() is called. As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ the only valid saveFlags is @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@. All other flags are ignored.", "history": "added in API level 1", "FullName": "public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags)"}, "saveLayerAlpha(float, float, float, float, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Canvas#saveLayerAlpha_E@ that takes the four float coordinates of the bounds rectangle.", "history": "added in API level 21", "FullName": "public int saveLayerAlpha (float left, float top, float right, float bottom, int alpha)"}, "drawPosText(java.lang.String,float[],android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The text to be drawn This value must never be null."], ["float[]", "float: Array of [x,y] positions, used to position each character This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. It also doesn't handle supplementary characters (eg emoji). Draw the text in the array, with each character's origin specified by the pos array.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void drawPosText (String text, float[] pos, Paint paint)"}, "drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to be drawn This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: May be null. The subset of the bitmap to be drawn This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: The rectangle that the bitmap will be scaled/translated to fit into This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: May be null. The paint used to draw the bitmap This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied.", "history": "Added in API level 1", "FullName": "public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint)"}, "drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to be drawn This value must never be null."], ["int", "int: The index of the first character in text to draw"], ["int", "int: (end - 1) is the index of the last character in text to draw"], ["float", "float: The x-coordinate of origin for where to draw the text"], ["float", "float: The y-coordinate of origin for where to draw the text"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint.", "history": "Added in API level 1", "FullName": "public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint)"}, "drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to draw using the mesh This value must never be null."], ["int", "int: The number of columns in the mesh. Nothing is drawn if this is 0"], ["int", "int: The number of rows in the mesh. Nothing is drawn if this is 0"], ["float[]", "float: Array of x,y pairs, specifying where the mesh should be drawn. There must be at least (meshWidth+1) * (meshHeight+1) * 2 + vertOffset values in the array This value must never be null."], ["int", "int: Number of verts elements to skip before drawing"], ["int[]", "int: May be null. Specifies a color at each vertex, which is interpolated across the cell, and whose values are multiplied by the corresponding bitmap colors. If not null, there must be at least (meshWidth+1) * (meshHeight+1) + colorOffset values in the array. This value may be null."], ["int", "int: Number of color elements to skip before drawing"], ["@B_android#graphics#Paint_E@", "Paint: May be null. The paint used to draw the bitmap This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed across the top of the bitmap from left to right. A more general version of this method is drawVertices(). Prior to API level @B_android#os#Build#VERSION_CODES#P_E@ vertOffset and colorOffset were ignored, effectively treating them as zeros. In API level @B_android#os#Build#VERSION_CODES#P_E@ and above these parameters will be respected.", "history": "Added in API level 1", "FullName": "public void drawBitmapMesh (Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, Paint paint)"}, "drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["char[]", "char: The text to be drawn This value must never be null."], ["int", "int: The starting index within the text to be drawn"], ["int", "int: Starting from index, the number of characters to draw"], ["@B_android#graphics#Path_E@", "Path: The path the text should follow for its baseline This value must never be null."], ["float", "float: The distance along the path to add to the text's starting position"], ["float", "float: The distance above(-) or below(+) the path to position the text"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determines where along the path to start the text.", "history": "Added in API level 1", "FullName": "public void drawTextOnPath (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)"}, "drawOval(android.graphics.RectF,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangle bounds of the oval to be drawn This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawOval (RectF oval, Paint paint)"}, "drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"], ["boolean", "boolean: If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the arc This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.)", "history": "Added in API level 21", "FullName": "public void drawArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)"}, "Canvas()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is @B_android#graphics#Bitmap#DENSITY_NONE_E@; this will typically be replaced when a target bitmap is set for the canvas.", "history": "Added in API level 1", "FullName": "public Canvas ()"}, "rotate(float,float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to rotate, in degrees"], ["float", "float: The x-coord for the pivot point (unchanged by the rotation)"], ["float", "float: The y-coord for the pivot point (unchanged by the rotation)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified rotation.", "history": "Added in API level 1", "FullName": "public final void rotate (float degrees, float px, float py)"}, "clipRect(int, int, int, int)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["int", "int: The left side of the rectangle to intersect with the current clip"], ["int", "int: The top of the rectangle to intersect with the current clip"], ["int", "int: The right side of the rectangle to intersect with the current clip"], ["int", "int: The bottom of the rectangle to intersect with the current clip"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "added in API level 1", "FullName": "public boolean clipRect (int left, int top, int right, int bottom)"}, "drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to draw This value must never be null."], ["@B_android#graphics#Matrix_E@", "Matrix: The matrix used to transform the bitmap when it is drawn This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: May be null. The paint used to draw the bitmap This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the bitmap using the specified matrix.", "history": "Added in API level 1", "FullName": "public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint)"}, "clipPath(android.graphics.Path,android.graphics.Region.Op)": {"Returns": [["boolean", "true if the resulting is non-empty"]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to operate on the current clip This value must never be null."], ["@B_android#graphics#Region#Op_E@", "Region.Op: How the clip is modified This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Region.Op values other than @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are @B_android#graphics#Canvas#clipPath_E@ and @B_android#graphics#Canvas#clipOutPath_E@; As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ only @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ are valid Region.Op parameters. Modify the current clip with the specified path.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean clipPath (Path path, Region.Op op)"}, "drawPicture(android.graphics.Picture,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Picture_E@", "Picture: This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the picture, stretched to fit into the dst rectangle.", "history": "Added in API level 1", "FullName": "public void drawPicture (Picture picture, Rect dst)"}, "setDrawFilter(android.graphics.DrawFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#DrawFilter_E@", "DrawFilter: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setDrawFilter (DrawFilter filter)"}, "scale(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale in X"], ["float", "float: The amount to scale in Y"], ["float", "float: The x-coord for the pivot point (unchanged by the scale)"], ["float", "float: The y-coord for the pivot point (unchanged by the scale)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified scale.", "history": "Added in API level 1", "FullName": "public final void scale (float sx, float sy, float px, float py)"}, "drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The outer rectangular bounds of the roundRect to be drawn This value must never be null."], ["float", "float: The x-radius of the oval used to round the corners on the outer rectangle"], ["float", "float: The y-radius of the oval used to round the corners on the outer rectangle"], ["@B_android#graphics#RectF_E@", "RectF: The inner rectangular bounds of the roundRect to be drawn This value must never be null."], ["float", "float: The x-radius of the oval used to round the corners on the inner rectangle"], ["float", "float: The y-radius of the oval used to round the corners on the outer rectangle"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the double roundRect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws a double rounded rectangle using the specified paint. The resultant round rect will be filled in the area defined between the outer and inner rectangular bounds if the @B_android#graphics#Paint_E@ configured with @B_android#graphics#Paint#Style#FILL_E@. Otherwise if @B_android#graphics#Paint#Style#STROKE_E@ is used, then 2 rounded rect strokes will be drawn at the outer and inner rounded rectangles", "history": "Added in API level 29", "FullName": "public void drawDoubleRoundRect (RectF outer, float outerRx, float outerRy, RectF inner, float innerRx, float innerRy, Paint paint)"}, "clipOutRect(float, float, float, float)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["float", "float: The left side of the rectangle used in the difference operation"], ["float", "float: The top of the rectangle used in the difference operation"], ["float", "float: The right side of the rectangle used in the difference operation"], ["float", "float: The bottom of the rectangle used in the difference operation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "added in API level 26", "FullName": "public boolean clipOutRect (float left, float top, float right, float bottom)"}, "clipOutPath(android.graphics.Path)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path used in the difference operation This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified path.", "history": "Added in API level 26", "FullName": "public boolean clipOutPath (Path path)"}, "drawRGB(int,int,int)": {"Returns": [], "Parameters": [["int", "int: red component (0..255) of the color to draw onto the canvas"], ["int", "int: green component (0..255) of the color to draw onto the canvas"], ["int", "int: blue component (0..255) of the color to draw onto the canvas"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode.", "history": "Added in API level 1", "FullName": "public void drawRGB (int r, int g, int b)"}, "disableZ()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables Z support, preventing any RenderNodes drawn after this point from being visually reordered or having shadows rendered. Note: This is not impacted by any @B_android#graphics#Canvas#save_E@ or @B_android#graphics#Canvas#restore_E@ calls as it is not considered to be part of the current matrix or clip. See @B_android#graphics#Canvas#enableZ_E@", "history": "Added in API level 29", "FullName": "public void disableZ ()"}, "getMatrix(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#graphics#Canvas#isHardwareAccelerated_E@ canvases may have any matrix when passed to a View or Drawable, as it is implementation defined where in the hierarchy such canvases are created. It is recommended in such cases to either draw contents irrespective of the current matrix, or to track relevant transform state outside of the canvas. Return, in ctm, the current transformation matrix. This does not alter the matrix in the canvas, but just returns a copy of it.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void getMatrix (Matrix ctm)"}, "clipOutRect(android.graphics.RectF)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangle to perform a difference op with the current clip. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 26", "FullName": "public boolean clipOutRect (RectF rect)"}, "drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to be drawn This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: May be null. The subset of the bitmap to be drawn This value may be null."], ["@B_android#graphics#RectF_E@", "RectF: The rectangle that the bitmap will be scaled/translated to fit into This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: May be null. The paint used to draw the bitmap This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied.", "history": "Added in API level 1", "FullName": "public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)"}, "drawRect(float,float,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float: The left side of the rectangle to be drawn"], ["float", "float: The top side of the rectangle to be drawn"], ["float", "float: The right side of the rectangle to be drawn"], ["float", "float: The bottom side of the rectangle to be drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the rect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawRect (float left, float top, float right, float bottom, Paint paint)"}, "drawColor(int)": {"Returns": [], "Parameters": [["int", "int: the color to draw onto the canvas"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode.", "history": "Added in API level 1", "FullName": "public void drawColor (int color)"}, "drawARGB(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: alpha component (0..255) of the color to draw onto the canvas"], ["int", "int: red component (0..255) of the color to draw onto the canvas"], ["int", "int: green component (0..255) of the color to draw onto the canvas"], ["int", "int: blue component (0..255) of the color to draw onto the canvas"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode.", "history": "Added in API level 1", "FullName": "public void drawARGB (int a, int r, int g, int b)"}, "quickReject(android.graphics.RectF,android.graphics.Canvas.EdgeType)": {"Returns": [["boolean", "true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: the rect to compare with the current clip This value must never be null."], ["@B_android#graphics#Canvas#EdgeType_E@", "Canvas.EdgeType: @B_android#graphics#Canvas#EdgeType#AA_E@ if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (@B_android#graphics#Canvas#EdgeType#BW_E@). This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).", "history": "Added in API level 1", "FullName": "public boolean quickReject (RectF rect, Canvas.EdgeType type)"}, "drawPath(android.graphics.Path,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to be drawn This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the path This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawPath (Path path, Paint paint)"}, "clipOutRect(int, int, int, int)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["int", "int: The left side of the rectangle used in the difference operation"], ["int", "int: The top of the rectangle used in the difference operation"], ["int", "int: The right side of the rectangle used in the difference operation"], ["int", "int: The bottom of the rectangle used in the difference operation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "added in API level 26", "FullName": "public boolean clipOutRect (int left, int top, int right, int bottom)"}, "skew(float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to skew in X"], ["float", "float: The amount to skew in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified skew.", "history": "Added in API level 1", "FullName": "public void skew (float sx, float sy)"}, "getMaximumBitmapWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#getMaximumBitmapHeight_E@"], "Permissions": [], "Description": "Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error.", "history": "Added in API level 14", "FullName": "public int getMaximumBitmapWidth ()"}, "drawColor(int,android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["int", "int: the color to draw onto the canvas"], ["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the porter-duff mode to apply to the color This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.", "history": "Added in API level 1", "FullName": "public void drawColor (int color, PorterDuff.Mode mode)"}, "Canvas(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: Specifies a mutable bitmap for the canvas to draw into. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density.", "history": "Added in API level 1", "FullName": "public Canvas (Bitmap bitmap)"}, "drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#text#MeasuredText_E@", "MeasuredText: the text to render This value must never be null."], ["int", "int: the start of the text to render. Data before this position can be used for shaping context."], ["int", "int: the end of the text to render. Data at or after this position can be used for shaping context."], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index of the end of the shaping context"], ["float", "float: the x position at which to draw the text"], ["float", "float: the y position at which to draw the text"], ["boolean", "boolean: whether the run is in RTL direction"], ["@B_android#graphics#Paint_E@", "Paint: the paint This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw a run of text, all in a single direction, with optional context for complex text shaping. See @B_android#graphics#Canvas#drawTextRun_E@ for more details. This method uses a @B_android#graphics#text#MeasuredText_E@ rather than CharSequence to represent the string.", "history": "Added in API level 29", "FullName": "public void drawTextRun (MeasuredText text, int start, int end, int contextStart, int contextEnd, float x, float y, boolean isRtl, Paint paint)"}, "quickReject(float,float,float,float,android.graphics.Canvas.EdgeType)": {"Returns": [["boolean", "true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip"]], "Parameters": [["float", "float: The left side of the rectangle to compare with the current clip"], ["float", "float: The top of the rectangle to compare with the current clip"], ["float", "float: The right side of the rectangle to compare with the current clip"], ["float", "float: The bottom of the rectangle to compare with the current clip"], ["@B_android#graphics#Canvas#EdgeType_E@", "Canvas.EdgeType: @B_android#graphics#Canvas#EdgeType#AA_E@ if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (@B_android#graphics#Canvas#EdgeType#BW_E@). This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).", "history": "Added in API level 1", "FullName": "public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type)"}, "concat(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The matrix to preconcatenate with the current matrix This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified matrix. If the specified matrix is null, this method does nothing.", "history": "Added in API level 1", "FullName": "public void concat (Matrix matrix)"}, "isHardwareAccelerated()": {"Returns": [["boolean", "True if drawing operations are hardware accelerated, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this Canvas uses hardware acceleration. Note that this method does not define what type of hardware acceleration may or may not be used.", "history": "Added in API level 11", "FullName": "public boolean isHardwareAccelerated ()"}, "drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["int[]", "int: This value must never be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Usage with a @B_android#graphics#Canvas#isHardwareAccelerated_E@ canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data. Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void drawBitmap (int[] colors, int offset, int stride, int x, int y, int width, int height, boolean hasAlpha, Paint paint)"}, "saveLayerAlpha(android.graphics.RectF,int,int)": {"Returns": [["int", "value to pass to restoreToCount() to balance this call"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The maximum size the offscreen bitmap needs to be (in local coordinates) This value may be null."], ["int", "int: The alpha to apply to the offscreen when it is drawn during restore()"], ["int", "int: see _SAVE_FLAG constants, generally @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@ is recommended for performance reasons. Value is either 0 or @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#saveLayerAlpha_E@ instead. This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen bitmap. @B_android#view#View#LAYER_TYPE_HARDWARE_E@ on a View to apply an xfermode, color filter, or alpha, as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen bitmap. Only when the balancing call to restore() is made, is that offscreen buffer drawn back to the current target of the Canvas (either the screen, it's target Bitmap, or the previous layer). The alpha parameter is applied when the offscreen bitmap is drawn back when restore() is called. As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ the only valid saveFlags is @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@. All other flags are ignored.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags)"}, "clipRect(android.graphics.Rect,android.graphics.Region.Op)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to intersect with the current clip. This value must never be null."], ["@B_android#graphics#Region#Op_E@", "Region.Op: How the clip is modified This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Region.Op values other than @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are @B_android#graphics#Canvas#clipRect_E@ and @B_android#graphics#Canvas#clipOutRect_E@; As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ only @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ are valid Region.Op parameters. Modify the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean clipRect (Rect rect, Region.Op op)"}, "saveLayerAlpha(float,float,float,float,int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"], ["int", "int: Value is either 0 or @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#saveLayerAlpha_E@ instead. Helper for saveLayerAlpha() that takes 4 values instead of a RectF. As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ the only valid saveFlags is @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@. All other flags are ignored.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public int saveLayerAlpha (float left, float top, float right, float bottom, int alpha, int saveFlags)"}, "clipOutRect(int,int,int,int)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["int", "int: The left side of the rectangle used in the difference operation"], ["int", "int: The top of the rectangle used in the difference operation"], ["int", "int: The right side of the rectangle used in the difference operation"], ["int", "int: The bottom of the rectangle used in the difference operation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 26", "FullName": "public boolean clipOutRect (int left, int top, int right, int bottom)"}, "translate(float, float)": {"Returns": [], "Parameters": [["float", "float: The distance to translate in X"], ["float", "float: The distance to translate in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified translation", "history": "added in API level 1", "FullName": "public void translate (float dx, float dy)"}, "saveLayerAlpha(android.graphics.RectF,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The maximum size the offscreen bitmap needs to be (in local coordinates) This value may be null."], ["int", "int: The alpha to apply to the offscreen when it is drawn during restore()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Canvas#saveLayer_E@ but instead of taking a entire Paint object it takes only the alpha parameter.", "history": "Added in API level 21", "FullName": "public int saveLayerAlpha (RectF bounds, int alpha)"}, "getSaveCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of matrix/clip states on the Canvas' private stack. This will equal # save() calls - # restore() calls.", "history": "Added in API level 1", "FullName": "public int getSaveCount ()"}, "drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangular bounds of the roundRect to be drawn This value must never be null."], ["float", "float: The x-radius of the oval used to round the corners"], ["float", "float: The y-radius of the oval used to round the corners"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the roundRect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawRoundRect (RectF rect, float rx, float ry, Paint paint)"}, "clipRect(android.graphics.RectF,android.graphics.Region.Op)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rect to intersect with the current clip This value must never be null."], ["@B_android#graphics#Region#Op_E@", "Region.Op: How the clip is modified This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Region.Op values other than @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are @B_android#graphics#Canvas#clipRect_E@ and @B_android#graphics#Canvas#clipOutRect_E@; As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ only @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ are valid Region.Op parameters. Modify the current clip with the specified rectangle.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean clipRect (RectF rect, Region.Op op)"}, "drawRGB(int, int, int)": {"Returns": [], "Parameters": [["int", "int: red component (0..255) of the color to draw onto the canvas"], ["int", "int: green component (0..255) of the color to draw onto the canvas"], ["int", "int: blue component (0..255) of the color to draw onto the canvas"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode.", "history": "added in API level 1", "FullName": "public void drawRGB (int r, int g, int b)"}, "getDrawFilter()": {"Returns": [["@B_android#graphics#DrawFilter_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DrawFilter getDrawFilter ()"}, "rotate(float, float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to rotate, in degrees"], ["float", "float: The x-coord for the pivot point (unchanged by the rotation)"], ["float", "float: The y-coord for the pivot point (unchanged by the rotation)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified rotation.", "history": "added in API level 1", "FullName": "public final void rotate (float degrees, float px, float py)"}, "saveLayer(float,float,float,float,android.graphics.Paint,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: This value may be null."], ["int", "int: Value is either 0 or @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#saveLayer_E@ instead. Helper version of saveLayer() that takes 4 values rather than a RectF. As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ the only valid saveFlags is @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@. All other flags are ignored.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public int saveLayer (float left, float top, float right, float bottom, Paint paint, int saveFlags)"}, "drawVertices(android.graphics.Canvas.VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas#VertexMode_E@", "Canvas.VertexMode: How to interpret the array of vertices This value must never be null."], ["int", "int: The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2."], ["float[]", "float: Array of vertices for the mesh This value must never be null."], ["int", "int: Number of values in the verts to skip before drawing."], ["float[]", "float: May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) This value may be null."], ["int", "int: Number of values in texs to skip before drawing."], ["int[]", "int: May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. This value may be null."], ["int", "int: Number of values in colors to skip before drawing."], ["short[]", "short: If not null, array of indices to reference into the vertex (texs, colors) array. This value may be null."], ["int", "int no parameter comment"], ["int", "int: number of entries in the indices array (if not null)."], ["@B_android#graphics#Paint_E@", "Paint: Specifies the shader to use if the texs array is non-null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order.", "history": "Added in API level 1", "FullName": "public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint)"}, "drawPoints(float[],int,int,android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float: Array of points to draw [x0 y0 x1 y1 x2 y2 ...]"], ["int", "int: Number of values to skip before starting to draw."], ["int", "int: The number of values to process, after skipping offset of them. Since one point uses two values, the number of \"points\" that are drawn is really (count >> 1)."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the points This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle.", "history": "Added in API level 1", "FullName": "public void drawPoints (float[] pts, int offset, int count, Paint paint)"}, "skew(float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to skew in X"], ["float", "float: The amount to skew in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified skew.", "history": "added in API level 1", "FullName": "public void skew (float sx, float sy)"}, "clipRect(android.graphics.RectF)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangle to intersect with the current clip. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1", "FullName": "public boolean clipRect (RectF rect)"}, "getMaximumBitmapHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#getMaximumBitmapWidth_E@"], "Permissions": [], "Description": "Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error.", "history": "Added in API level 14", "FullName": "public int getMaximumBitmapHeight ()"}, "drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The outer rectangular bounds of the roundRect to be drawn This value must never be null."], ["float[]", "float: Array of 8 float representing the x, y corner radii for top left, top right, bottom right, bottom left corners respectively on the outer rounded rectangle This value must never be null."], ["@B_android#graphics#RectF_E@", "RectF: The inner rectangular bounds of the roundRect to be drawn This value must never be null."], ["float[]", "float: Array of 8 float representing the x, y corner radii for top left, top right, bottom right, bottom left corners respectively on the outer rounded rectangle This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the double roundRect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws a double rounded rectangle using the specified paint. The resultant round rect will be filled in the area defined between the outer and inner rectangular bounds if the @B_android#graphics#Paint_E@ configured with @B_android#graphics#Paint#Style#FILL_E@. Otherwise if @B_android#graphics#Paint#Style#STROKE_E@ is used, then 2 rounded rect strokes will be drawn at the outer and inner rounded rectangles", "history": "Added in API level 29", "FullName": "public void drawDoubleRoundRect (RectF outer, float[] outerRadii, RectF inner, float[] innerRadii, Paint paint)"}, "drawCircle(float,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the center of the circle to be drawn"], ["float", "float: The y-coordinate of the center of the circle to be drawn"], ["float", "float: The radius of the circle to be drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the circle This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified circle using the specified paint. If radius is <= 0, then nothing will be drawn. The circle will be filled or framed based on the Style in the paint.", "history": "Added in API level 1", "FullName": "public void drawCircle (float cx, float cy, float radius, Paint paint)"}, "drawColor(int,android.graphics.BlendMode)": {"Returns": [], "Parameters": [["int", "int: the color to draw onto the canvas"], ["@B_android#graphics#BlendMode_E@", "BlendMode: the blendmode to apply to the color This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode.", "history": "Added in API level 29", "FullName": "public void drawColor (int color, BlendMode mode)"}, "enableZ()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables Z support which defaults to disabled. This allows for RenderNodes drawn with @B_android#graphics#Canvas#drawRenderNode_E@ to be re-arranged based off of their @B_android#graphics#RenderNode#getElevation_E@ and @B_android#graphics#RenderNode#getTranslationZ_E@ values. It also enables rendering of shadows for RenderNodes with an elevation or translationZ. Any draw reordering will not be moved before this call. A typical usage of this might look something like: @B_android#graphics#Canvas#save_E@ or @B_android#graphics#Canvas#restore_E@ calls as it is not considered to be part of the current matrix or clip. See @B_android#graphics#Canvas#disableZ_E@", "history": "Added in API level 29", "FullName": "public void enableZ ()"}, "clipRect(int,int,int,int)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["int", "int: The left side of the rectangle to intersect with the current clip"], ["int", "int: The top of the rectangle to intersect with the current clip"], ["int", "int: The right side of the rectangle to intersect with the current clip"], ["int", "int: The bottom of the rectangle to intersect with the current clip"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1", "FullName": "public boolean clipRect (int left, int top, int right, int bottom)"}, "saveLayerAlpha(float,float,float,float,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Canvas#saveLayerAlpha_E@ that takes the four float coordinates of the bounds rectangle.", "history": "Added in API level 21", "FullName": "public int saveLayerAlpha (float left, float top, float right, float bottom, int alpha)"}, "drawPoints(float[],android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float: This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for drawPoints() that assumes you want to draw the entire array", "history": "Added in API level 1", "FullName": "public void drawPoints (float[] pts, Paint paint)"}, "drawPosText(char[],int,int,float[],android.graphics.Paint)": {"Returns": [], "Parameters": [["char[]", "char: The text to be drawn This value must never be null."], ["int", "int: The index of the first character to draw"], ["int", "int: The number of characters to draw, starting from index."], ["float[]", "float: Array of [x,y] positions, used to position each character This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. It also doesn't handle supplementary characters (eg emoji). Draw the text in the array, with each character's origin specified by the pos array.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint)"}, "drawText(char[],int,int,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["char[]", "char: The text to be drawn This value must never be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["float", "float: The x-coordinate of the origin of the text being drawn"], ["float", "float: The y-coordinate of the baseline of the text being drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.", "history": "Added in API level 1", "FullName": "public void drawText (char[] text, int index, int count, float x, float y, Paint paint)"}, "setBitmap(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: Specifies a mutable bitmap for the canvas to draw into. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#setDensity_E@", "@B_android#graphics#Canvas#getDensity_E@"], "Permissions": [], "Description": "Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset. Additionally, the canvas' target density is updated to match that of the bitmap. Prior to API level @B_android#os#Build#VERSION_CODES#O_E@ the current matrix and clip stack were preserved.", "history": "Added in API level 1", "FullName": "public void setBitmap (Bitmap bitmap)"}, "drawColor(int, android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["int", "int: the color to draw with"], ["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the porter-duff mode to apply to the color This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.", "history": "added in API level 1", "FullName": "public void drawColor (int color, PorterDuff.Mode mode)"}, "clipOutRect(float,float,float,float)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["float", "float: The left side of the rectangle used in the difference operation"], ["float", "float: The top of the rectangle used in the difference operation"], ["float", "float: The right side of the rectangle used in the difference operation"], ["float", "float: The bottom of the rectangle used in the difference operation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 26", "FullName": "public boolean clipOutRect (float left, float top, float right, float bottom)"}, "drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval used to define the shape and size of the arc This value must never be null."], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"], ["boolean", "boolean: If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the arc This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.)", "history": "Added in API level 1", "FullName": "public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)"}, "getClipBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "the clip bounds, or [0, 0, 0, 0] if the clip is empty. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the bounds of the current clip (in local coordinates).", "history": "Added in API level 1", "FullName": "public final Rect getClipBounds ()"}, "getHeight()": {"Returns": [["int", "the height of the current drawing layer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the height of the current drawing layer", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "drawARGB(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: alpha component (0..255) of the color to draw onto the canvas"], ["int", "int: red component (0..255) of the color to draw onto the canvas"], ["int", "int: green component (0..255) of the color to draw onto the canvas"], ["int", "int: blue component (0..255) of the color to draw onto the canvas"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode.", "history": "added in API level 1", "FullName": "public void drawARGB (int a, int r, int g, int b)"}, "clipRegion(android.graphics.Region)": {"Returns": [["boolean", "true if the resulting is non-empty"]], "Parameters": [["@B_android#graphics#Region_E@", "Region: The region to operate on the current clip, based on op"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unlike all other clip calls this API does not respect the current matrix. Use @B_android#graphics#Canvas#clipRect_E@ as an alternative. Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed.", "history": "Added in API level 1", "FullName": "boolean clipRegion (Region region)"}, "getClipBounds(android.graphics.Rect)": {"Returns": [["boolean", "true if the current clip is non-empty."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: Return the clip bounds here. If it is null, ignore it but still return true if the current clip is non-empty. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the bounds of the current clip (in local coordinates) in the bounds parameter, and return true if it is non-empty. This can be useful in a way similar to quickReject, in that it tells you that drawing outside of these bounds will be clipped out.", "history": "Added in API level 1", "FullName": "public boolean getClipBounds (Rect bounds)"}, "saveLayer(android.graphics.RectF,android.graphics.Paint,int)": {"Returns": [["int", "value to pass to restoreToCount() to balance this save()"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) This value may be null."], ["@B_android#graphics#Paint_E@", "Paint: This is copied, and is applied to the offscreen when restore() is called. This value may be null."], ["int", "int: see _SAVE_FLAG constants, generally @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@ is recommended for performance reasons. Value is either 0 or @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#saveLayer_E@ instead. This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen bitmap. @B_android#view#View#LAYER_TYPE_HARDWARE_E@ on a View to apply an xfermode, color filter, or alpha, as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen bitmap. Only when the balancing call to restore() is made, is that offscreen buffer drawn back to the current target of the Canvas (either the screen, it's target Bitmap, or the previous layer). Attributes of the Paint - @B_android#graphics#Paint#getAlpha_E@, @B_android#graphics#Paint#getXfermode_E@, and @B_android#graphics#Paint#getColorFilter_E@ are applied when the offscreen bitmap is drawn back when restore() is called. As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ the only valid saveFlags is @B_android#graphics#Canvas#ALL_SAVE_FLAG_E@. All other flags are ignored.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public int saveLayer (RectF bounds, Paint paint, int saveFlags)"}, "save(int)": {"Returns": [["int", "The value to pass to restoreToCount() to balance this save()"]], "Parameters": [["int", "int: flag bits that specify which parts of the Canvas state to save/restore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#Canvas#save_E@ instead. Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect, clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated.", "history": "added in API level 1", "FullName": "int save (int saveFlags)"}, "quickReject(android.graphics.Path,android.graphics.Canvas.EdgeType)": {"Returns": [["boolean", "true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip"]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to compare with the current clip This value must never be null."], ["@B_android#graphics#Canvas#EdgeType_E@", "Canvas.EdgeType: @B_android#graphics#Canvas#EdgeType#AA_E@ if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (@B_android#graphics#Canvas#EdgeType#BW_E@). This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not).", "history": "Added in API level 1", "FullName": "public boolean quickReject (Path path, Canvas.EdgeType type)"}, "saveLayer(android.graphics.RectF,android.graphics.Paint)": {"Returns": [["int", "value to pass to restoreToCount() to balance this save()"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: May be null. The maximum size the offscreen render target needs to be (in local coordinates) This value may be null."], ["@B_android#graphics#Paint_E@", "Paint: This is copied, and is applied to the offscreen when restore() is called. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen rendering target. @B_android#view#View#LAYER_TYPE_HARDWARE_E@ on a View to apply an xfermode, color filter, or alpha, as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen rendering target. Only when the balancing call to restore() is made, is that offscreen buffer drawn back to the current target of the Canvas (which can potentially be a previous layer if these calls are nested). Attributes of the Paint - @B_android#graphics#Paint#getAlpha_E@, @B_android#graphics#Paint#getXfermode_E@, and @B_android#graphics#Paint#getColorFilter_E@ are applied when the offscreen rendering target is drawn back when restore() is called.", "history": "Added in API level 21", "FullName": "public int saveLayer (RectF bounds, Paint paint)"}, "drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The text to be drawn This value must never be null."], ["@B_android#graphics#Path_E@", "Path: The path the text should follow for its baseline This value must never be null."], ["float", "float: The distance along the path to add to the text's starting position"], ["float", "float: The distance above(-) or below(+) the path to position the text"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determines where along the path to start the text.", "history": "Added in API level 1", "FullName": "public void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint)"}, "drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render This value must never be null."], ["int", "int: the start of the text to render. Data before this position can be used for shaping context."], ["int", "int: the end of the text to render. Data at or after this position can be used for shaping context."], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index of the end of the shaping context"], ["float", "float: the x position at which to draw the text"], ["float", "float: the y position at which to draw the text"], ["boolean", "boolean: whether the run is in RTL direction"], ["@B_android#graphics#Paint_E@", "Paint: the paint This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#drawTextRun_E@"], "Permissions": [], "Description": "Draw a run of text, all in a single direction, with optional context for complex text shaping. The run of text includes the characters from start to end in the text. In addition, the range contextStart to contextEnd is used as context for the purpose of complex text shaping, such as Arabic text potentially shaped differently based on the text next to it. All text outside the range contextStart..contextEnd is ignored. The text between start and end will be laid out and drawn. The context range is useful for contextual shaping, e.g. Kerning, Arabic contextural form. The direction of the run is explicitly specified by isRtl. Thus, this method is suitable only for runs of a single direction. Alignment of the text is as determined by the Paint's TextAlign value. Further, 0 <= contextStart <= start <= end <= contextEnd <= text.length must hold on entry. Also see @B_android#graphics#Paint#getRunAdvance_E@ for a corresponding method to measure the text; the advance width of the text drawn matches the value obtained from that method.", "history": "Added in API level 23", "FullName": "public void drawTextRun (CharSequence text, int start, int end, int contextStart, int contextEnd, float x, float y, boolean isRtl, Paint paint)"}, "getDensity()": {"Returns": [["int", "Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or @B_android#graphics#Bitmap#DENSITY_NONE_E@ if there is not one.", "history": "Added in API level 4", "FullName": "public int getDensity ()"}, "getWidth()": {"Returns": [["int", "the width of the current drawing layer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the width of the current drawing layer", "history": "Added in API level 1", "FullName": "public int getWidth ()"}, "drawPoint(float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for drawPoints() for drawing a single point.", "history": "Added in API level 1", "FullName": "public void drawPoint (float x, float y, Paint paint)"}, "drawText(java.lang.String,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The text to be drawn This value must never be null."], ["float", "float: The x-coordinate of the origin of the text being drawn"], ["float", "float: The y-coordinate of the baseline of the text being drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.", "history": "Added in API level 1", "FullName": "public void drawText (String text, float x, float y, Paint paint)"}, "setMatrix(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The matrix to replace the current matrix with. If it is null, set the current matrix to identity. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#concat_E@"], "Permissions": [], "Description": "Completely replace the current matrix with the specified matrix. If the matrix parameter is null, then the current matrix is reset to identity. @B_android#graphics#Canvas#concat_E@, @B_android#graphics#Canvas#scale_E@, @B_android#graphics#Canvas#translate_E@ and @B_android#graphics#Canvas#rotate_E@ instead of this method.", "history": "Added in API level 1", "FullName": "public void setMatrix (Matrix matrix)"}, "clipRect(float,float,float,float,android.graphics.Region.Op)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["float", "float: The left side of the rectangle to intersect with the current clip"], ["float", "float: The top of the rectangle to intersect with the current clip"], ["float", "float: The right side of the rectangle to intersect with the current clip"], ["float", "float: The bottom of the rectangle to intersect with the current clip"], ["@B_android#graphics#Region#Op_E@", "Region.Op: How the clip is modified This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Region.Op values other than @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are @B_android#graphics#Canvas#clipRect_E@ and @B_android#graphics#Canvas#clipOutRect_E@; As of API Level API level @B_android#os#Build#VERSION_CODES#P_E@ only @B_android#graphics#Region#Op#INTERSECT_E@ and @B_android#graphics#Region#Op#DIFFERENCE_E@ are valid Region.Op parameters. Modify the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean clipRect (float left, float top, float right, float bottom, Region.Op op)"}, "drawOval(float,float,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.", "history": "Added in API level 21", "FullName": "public void drawOval (float left, float top, float right, float bottom, Paint paint)"}, "isOpaque()": {"Returns": [["boolean", "true if the device that the current layer draws into is opaque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha).", "history": "Added in API level 1", "FullName": "public boolean isOpaque ()"}, "checkRange(int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected static final void checkRange (int length, int offset, int count)"}, "restore()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.", "history": "Added in API level 1", "FullName": "public void restore ()"}, "clipRect(android.graphics.Rect)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to intersect with the current clip. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1", "FullName": "public boolean clipRect (Rect rect)"}, "getMatrix()": {"Returns": [["@B_android#graphics#Matrix_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#graphics#Canvas#isHardwareAccelerated_E@ canvases may have any matrix when passed to a View or Drawable, as it is implementation defined where in the hierarchy such canvases are created. It is recommended in such cases to either draw contents irrespective of the current matrix, or to track relevant transform state outside of the canvas. Return a new matrix with a copy of the canvas' current transformation matrix.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public final Matrix getMatrix ()"}, "drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["int[]", "int: Array of colors representing the pixels of the bitmap This value must never be null."], ["int", "int: Offset into the array of colors for the first pixel"], ["int", "int: The number of colors in the array between rows (must be >= width or <= -width)."], ["float", "float: The X coordinate for where to draw the bitmap"], ["float", "float: The Y coordinate for where to draw the bitmap"], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["boolean", "boolean: True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel)."], ["@B_android#graphics#Paint_E@", "Paint: May be null. The paint used to draw the bitmap This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Usage with a @B_android#graphics#Canvas#isHardwareAccelerated_E@ canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data. Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint)"}, "drawLine(float,float,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the start point of the line"], ["float", "float: The y-coordinate of the start point of the line"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the line This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always \"framed\", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn.", "history": "Added in API level 1", "FullName": "public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint)"}, "setDensity(int)": {"Returns": [], "Parameters": [["int", "int: The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use @B_android#graphics#Bitmap#DENSITY_NONE_E@ to disable bitmap scaling."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Canvas#getDensity_E@", "@B_android#graphics#Bitmap#setDensity_E@"], "Permissions": [], "Description": "Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via @B_android#graphics#Bitmap#setDensity_E@.", "history": "Added in API level 4", "FullName": "public void setDensity (int density)"}, "drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)": {"Returns": [], "Parameters": [["char[]", "char: the text to render This value must never be null."], ["int", "int: the start of the text to render"], ["int", "int: the count of chars to render"], ["int", "int: the start of the context for shaping. Must be no greater than index."], ["int", "int: the number of characters in the context for shaping. contexIndex + contextCount must be no less than index + count."], ["float", "float: the x position at which to draw the text"], ["float", "float: the y position at which to draw the text"], ["boolean", "boolean: whether the run is in RTL direction"], ["@B_android#graphics#Paint_E@", "Paint: the paint This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw a run of text, all in a single direction, with optional context for complex text shaping. See @B_android#graphics#Canvas#drawTextRun_E@ for more details. This method uses a character array rather than CharSequence to represent the string. Also, to be consistent with the pattern established in @B_android#graphics#Canvas#drawText_E@, in this method count and contextCount are used rather than offsets of the end position; count = end - start, contextCount = contextEnd - contextStart.", "history": "Added in API level 23", "FullName": "public void drawTextRun (char[] text, int index, int count, int contextIndex, int contextCount, float x, float y, boolean isRtl, Paint paint)"}, "drawPaint(android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: The paint used to draw onto the canvas This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.", "history": "Added in API level 1", "FullName": "public void drawPaint (Paint paint)"}, "scale(float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale in X"], ["float", "float: The amount to scale in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified scale.", "history": "added in API level 1", "FullName": "public void scale (float sx, float sy)"}, "clipRect(float,float,float,float)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["float", "float: The left side of the rectangle to intersect with the current clip"], ["float", "float: The top of the rectangle to intersect with the current clip"], ["float", "float: The right side of the rectangle to intersect with the current clip"], ["float", "float: The bottom of the rectangle to intersect with the current clip"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 1", "FullName": "public boolean clipRect (float left, float top, float right, float bottom)"}, "drawText(java.lang.String,int,int,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The text to be drawn This value must never be null."], ["int", "int: The index of the first character in text to draw"], ["int", "int: (end - 1) is the index of the last character in text to draw"], ["float", "float: The x-coordinate of the origin of the text being drawn"], ["float", "float: The y-coordinate of the baseline of the text being drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used for the text (e.g. color, size, style) This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.", "history": "Added in API level 1", "FullName": "public void drawText (String text, int start, int end, float x, float y, Paint paint)"}, "clipOutRect(android.graphics.Rect)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to perform a difference op with the current clip. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the clip to the difference of the current clip and the specified rectangle, which is expressed in local coordinates.", "history": "Added in API level 26", "FullName": "public boolean clipOutRect (Rect rect)"}, "drawPicture(android.graphics.Picture)": {"Returns": [], "Parameters": [["@B_android#graphics#Picture_E@", "Picture: The picture to be drawn This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. @B_android#graphics#Picture#endRecording_E@ in order to prepare for playback.", "history": "Added in API level 1", "FullName": "public void drawPicture (Picture picture)"}, "drawLines(float[],android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float: This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void drawLines (float[] pts, Paint paint)"}, "drawPicture(android.graphics.Picture,android.graphics.RectF)": {"Returns": [], "Parameters": [["@B_android#graphics#Picture_E@", "Picture: This value must never be null."], ["@B_android#graphics#RectF_E@", "RectF: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the picture, stretched to fit into the dst rectangle.", "history": "Added in API level 1", "FullName": "public void drawPicture (Picture picture, RectF dst)"}, "drawPoint(float, float, android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint no parameter comment This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for drawPoints() for drawing a single point.", "history": "added in API level 1", "FullName": "public void drawPoint (float x, float y, Paint paint)"}, "drawPoints(float[], android.graphics.Paint)": {"Returns": [], "Parameters": [["float[]", "float no parameter comment This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint no parameter comment This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for drawPoints() that assumes you want to draw the entire array", "history": "added in API level 1", "FullName": "public void drawPoints (float[] pts, Paint paint)"}, "clipRect(float, float, float, float)": {"Returns": [["boolean", "true if the resulting clip is non-empty"]], "Parameters": [["float", "float: The left side of the rectangle to intersect with the current clip"], ["float", "float: The top of the rectangle to intersect with the current clip"], ["float", "float: The right side of the rectangle to intersect with the current clip"], ["float", "float: The bottom of the rectangle to intersect with the current clip"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Intersect the current clip with the specified rectangle, which is expressed in local coordinates.", "history": "added in API level 1", "FullName": "public boolean clipRect (float left, float top, float right, float bottom)"}, "drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to be drawn This value must never be null."], ["float", "float: The position of the left side of the bitmap being drawn"], ["float", "float: The position of the top side of the bitmap being drawn"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the bitmap (may be null) This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.", "history": "Added in API level 1", "FullName": "public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint)"}, "translate(float,float)": {"Returns": [], "Parameters": [["float", "float: The distance to translate in X"], ["float", "float: The distance to translate in Y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified translation", "history": "Added in API level 1", "FullName": "public void translate (float dx, float dy)"}, "drawRenderNode(android.graphics.RenderNode)": {"Returns": [], "Parameters": [["@B_android#graphics#RenderNode_E@", "RenderNode: The RenderNode to draw, must be non-null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws the given RenderNode. This is only supported in hardware rendering, which can be verified by asserting that @B_android#graphics#Canvas#isHardwareAccelerated_E@ is true. If @B_android#graphics#Canvas#isHardwareAccelerated_E@ is false then this throws an exception. See @B_android#graphics#RenderNode_E@ for more information on what a RenderNode is and how to use it.", "history": "Added in API level 29", "FullName": "public void drawRenderNode (RenderNode renderNode)"}, "scale(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale in X"], ["float", "float: The amount to scale in Y"], ["float", "float: The x-coord for the pivot point (unchanged by the scale)"], ["float", "float: The y-coord for the pivot point (unchanged by the scale)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcat the current matrix with the specified scale.", "history": "added in API level 1", "FullName": "public final void scale (float sx, float sy, float px, float py)"}, "drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: The x-radius of the oval used to round the corners"], ["float", "float: The y-radius of the oval used to round the corners"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to draw the roundRect This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.", "history": "Added in API level 21", "FullName": "public void drawRoundRect (float left, float top, float right, float bottom, float rx, float ry, Paint paint)"}}, "Inheritance": [], "ClassName": "android.graphics.Canvas", "ClassDesc": "The Canvas class holds the \"draw\" calls. To draw something, you need 4 basic components: A Bitmap to hold the pixels, a Canvas to host the draw calls (writing into the bitmap), a drawing primitive (e.g. Rect, Path, text, Bitmap), and a paint (to describe the colors and styles for the drawing)."}