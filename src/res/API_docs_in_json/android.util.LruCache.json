{"Functions": {"evictionCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of values that have been evicted.", "history": "Added in API level 12", "FullName": "public final int evictionCount ()"}, "LruCache(int)": {"Returns": [], "Parameters": [["int", "int: for caches that do not override @B_android#util#LruCache#sizeOf_E@, this is the maximum number of entries in the cache. For all other caches, this is the maximum sum of the sizes of the entries in this cache."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public LruCache (int maxSize)"}, "sizeOf(K, V)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["K", "K no parameter comment"], ["V", "V no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the entry for key and value in user-defined units. The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries. An entry's size must not change while it is in the cache.", "history": "added in API level 12", "FullName": "protected int sizeOf (K key, V value)"}, "get(K)": {"Returns": [["V", "no returns description in source"]], "Parameters": [["K", "K no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value for key if it exists in the cache or can be created by #create. If a value was returned, it is moved to the head of the queue. This returns null if a value is not cached and cannot be created.", "history": "Added in API level 12", "FullName": "public final V get (K key)"}, "resize(int)": {"Returns": [], "Parameters": [["int", "int: The new maximum size."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the size of the cache.", "history": "Added in API level 21", "FullName": "public void resize (int maxSize)"}, "putCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of times @B_android#util#LruCache#put_E@ was called.", "history": "Added in API level 12", "FullName": "public final int putCount ()"}, "put(K, V)": {"Returns": [["V", "the previous value mapped by key."]], "Parameters": [["K", "K no parameter comment"], ["V", "V no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Caches value for key. The value is moved to the head of the queue.", "history": "added in API level 12", "FullName": "public final V put (K key, V value)"}, "maxSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For caches that do not override @B_android#util#LruCache#sizeOf_E@, this returns the maximum number of entries in the cache. For all other caches, this returns the maximum sum of the sizes of the entries in this cache.", "history": "Added in API level 12", "FullName": "public final int maxSize ()"}, "trimToSize(int)": {"Returns": [], "Parameters": [["int", "int: the maximum size of the cache before returning. May be -1 to evict even 0-sized elements."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the eldest entries until the total of remaining entries is at or below the requested size.", "history": "Added in API level 17", "FullName": "public void trimToSize (int maxSize)"}, "snapshot()": {"Returns": [["@B_java#util#Map_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed.", "history": "Added in API level 12", "FullName": "public final Map<K, V> snapshot ()"}, "remove(K)": {"Returns": [["V", "the previous value mapped by key."]], "Parameters": [["K", "K no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for key if it exists.", "history": "Added in API level 12", "FullName": "public final V remove (K key)"}, "size()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For caches that do not override @B_android#util#LruCache#sizeOf_E@, this returns the number of entries in the cache. For all other caches, this returns the sum of the sizes of the entries in this cache.", "history": "Added in API level 12", "FullName": "public final int size ()"}, "evictAll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the cache, calling @B_android#util#LruCache#entryRemoved_E@ on each removed entry.", "history": "Added in API level 12", "FullName": "public final void evictAll ()"}, "sizeOf(K,V)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["K", "K no parameter comment"], ["V", "V no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the entry for key and value in user-defined units. The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries. An entry's size must not change while it is in the cache.", "history": "Added in API level 12", "FullName": "protected int sizeOf (K key, V value)"}, "entryRemoved(boolean, K, V, V)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the entry is being removed to make space, false if the removal was caused by a @B_android#util#LruCache#put_E@ or @B_android#util#LruCache#remove_E@."], ["K", "K no parameter comment"], ["V", "V no parameter comment"], ["V", "V: the new value for key, if it exists. If non-null, this removal was caused by a @B_android#util#LruCache#put_E@. Otherwise it was caused by an eviction or a @B_android#util#LruCache#remove_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to @B_android#util#LruCache#remove_E@, or replaced by a call to @B_android#util#LruCache#put_E@. The default implementation does nothing. The method is called without synchronization: other threads may access the cache while this method is executing.", "history": "added in API level 12", "FullName": "protected void entryRemoved (boolean evicted, K key, V oldValue, V newValue)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 12", "FullName": "public final String toString ()"}, "missCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of times @B_android#util#LruCache#get_E@ returned null or required a new value to be created.", "history": "Added in API level 12", "FullName": "public final int missCount ()"}, "put(K,V)": {"Returns": [["V", "the previous value mapped by key."]], "Parameters": [["K", "K no parameter comment"], ["V", "V no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Caches value for key. The value is moved to the head of the queue.", "history": "Added in API level 12", "FullName": "public final V put (K key, V value)"}, "createCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of times @B_android#util#LruCache#create_E@ returned a value.", "history": "Added in API level 12", "FullName": "public final int createCount ()"}, "create(K)": {"Returns": [["V", "no returns description in source"]], "Parameters": [["K", "K no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null. The method is called without synchronization: other threads may access the cache while this method is executing. If a value for key exists in the cache when this method returns, the created value will be released with @B_android#util#LruCache#entryRemoved_E@ and discarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls @B_android#util#LruCache#put_E@ while another is creating a value for the same key.", "history": "Added in API level 12", "FullName": "protected V create (K key)"}, "entryRemoved(boolean,K,V,V)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the entry is being removed to make space, false if the removal was caused by a @B_android#util#LruCache#put_E@ or @B_android#util#LruCache#remove_E@."], ["K", "K no parameter comment"], ["V", "V no parameter comment"], ["V", "V: the new value for key, if it exists. If non-null, this removal was caused by a @B_android#util#LruCache#put_E@. Otherwise it was caused by an eviction or a @B_android#util#LruCache#remove_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to @B_android#util#LruCache#remove_E@, or replaced by a call to @B_android#util#LruCache#put_E@. The default implementation does nothing. The method is called without synchronization: other threads may access the cache while this method is executing.", "history": "Added in API level 12", "FullName": "protected void entryRemoved (boolean evicted, K key, V oldValue, V newValue)"}, "hitCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of times @B_android#util#LruCache#get_E@ returned a value that was already present in the cache.", "history": "Added in API level 12", "FullName": "public final int hitCount ()"}}, "Inheritance": [], "ClassName": "android.util.LruCache<K, V>", "ClassDesc": "A cache that holds strong references to a limited number of values. Each time a value is accessed, it is moved to the head of a queue. When a value is added to a full cache, the value at the end of that queue is evicted and may become eligible for garbage collection. If your cached values hold resources that need to be explicitly released, override @B_android#util#LruCache#entryRemoved_E@. If a cache miss should be computed on demand for the corresponding keys, override @B_android#util#LruCache#create_E@. This simplifies the calling code, allowing it to assume a value will always be returned, even when there's a cache miss. By default, the cache size is measured in the number of entries. Override @B_android#util#LruCache#sizeOf_E@ to size the cache in different units. For example, this cache is limited to 4MiB of bitmaps: This class is thread-safe. Perform multiple cache operations atomically by synchronizing on the cache: This class does not allow null to be used as a key or value. A return value of null from @B_android#util#LruCache#get_E@, @B_android#util#LruCache#put_E@ or @B_android#util#LruCache#remove_E@ is unambiguous: the key was not in the cache. This class appeared in Android 3.1 (Honeycomb MR1); it's available as part of"}