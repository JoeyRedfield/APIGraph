{"Functions": {"getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the name of the algorithm associated with this KeyFactory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the algorithm associated with this KeyFactory.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#KeyFactory_E@", "the new KeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested key algorithm. See the KeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyFactorySpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyFactory object that converts public/private keys of the specified algorithm. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static KeyFactory getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this key factory object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this key factory object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "generatePublic(java.security.spec.KeySpec)": {"Returns": [["@B_java#security#PublicKey_E@", "the public key."]], "Parameters": [["@B_java#security#spec#KeySpec_E@", "KeySpec: the specification (key material) of the public key."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the given key specification is inappropriate for this key factory to produce a public key."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a public key object from the provided key specification (key material).", "history": "Added in API level 1", "FullName": "public final PublicKey generatePublic (KeySpec keySpec)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#KeyFactory_E@", "the new KeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested key algorithm. See the KeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyFactory object that converts public/private keys of the specified algorithm. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static KeyFactory getInstance (String algorithm, String provider)"}, "translateKey(java.security.Key)": {"Returns": [["@B_java#security#Key_E@", "the translated key."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key whose provider is unknown or untrusted."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key cannot be processed by this key factory."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.", "history": "Added in API level 1", "FullName": "public final Key translateKey (Key key)"}, "generatePrivate(java.security.spec.KeySpec)": {"Returns": [["@B_java#security#PrivateKey_E@", "the private key."]], "Parameters": [["@B_java#security#spec#KeySpec_E@", "KeySpec: the specification (key material) of the private key."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the given key specification is inappropriate for this key factory to produce a private key."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a private key object from the provided key specification (key material).", "history": "Added in API level 1", "FullName": "public final PrivateKey generatePrivate (KeySpec keySpec)"}, "KeyFactory(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#KeyFactorySpi_E@", "KeyFactorySpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the name of the algorithm to associate with this KeyFactory"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a KeyFactory object.", "history": "Added in API level 1", "FullName": "protected KeyFactory (KeyFactorySpi keyFacSpi, Provider provider, String algorithm)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#KeyFactory_E@", "the new KeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested key algorithm. See the KeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a KeyFactorySpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyFactory object that converts public/private keys of the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyFactory getInstance (String algorithm)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#KeyFactory_E@", "the new KeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested key algorithm. See the KeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyFactory object that converts public/private keys of the specified algorithm. A new KeyFactory object encapsulating the KeyFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyFactory getInstance (String algorithm, String provider)"}, "getKeySpec(java.security.Key,java.lang.Class<T>)": {"Returns": [["T", "the underlying key specification (key material) in an instance of the requested specification class."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key."], ["@B_java#lang#Class_E@", "Class: the specification class in which the key material should be returned."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the requested key specification is inappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specification (key material) of the given key object. keySpec identifies the specification class in which the key material should be returned. It could, for example, be DSAPublicKeySpec.class, to indicate that the key material should be returned in an instance of the DSAPublicKeySpec class.", "history": "Added in API level 1", "FullName": "public final T getKeySpec (Key key, Class<T> keySpec)"}, "getKeySpec(java.security.Key, java.lang.Class<T>)": {"Returns": [["T", "the underlying key specification (key material) in an instance of the requested specification class."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key."], ["@B_java#lang#Class_E@", "Class: the specification class in which the key material should be returned."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the requested key specification is inappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specification (key material) of the given key object. keySpec identifies the specification class in which the key material should be returned. It could, for example, be DSAPublicKeySpec.class, to indicate that the key material should be returned in an instance of the DSAPublicKeySpec class.", "history": "added in API level 1", "FullName": "public final T getKeySpec (Key key, Class<T> keySpec)"}}, "Inheritance": [], "ClassName": "java.security.KeyFactory", "ClassDesc": "Key factories are used to convert Key) into Key factories are bi-directional. That is, they allow you to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. Multiple compatible key specifications may exist for the same key. For example, a DSA public key may be specified using DSAPublicKeySpec or X509EncodedKeySpec. A key factory can be used to translate between compatible key specifications. The following is an example of how to use a key factory in order to instantiate a DSA public key from its encoding. Assume Alice has received a digital signature from Bob. Bob also sent her his public key (in encoded format) to verify his signature. Alice then performs the following actions: Android provides the following KeyFactory algorithms:"}