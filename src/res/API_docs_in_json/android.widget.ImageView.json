{"Functions": {"setFrame(int,int,int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setImageIcon(android.graphics.drawable.Icon)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Icon_E@", "Icon: an Icon holding the desired image, or null to clear the content This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the content of this ImageView to the specified Icon. Depending on the Icon type, this may do Bitmap reading and decoding on the UI thread, which can cause UI jank. If that's a concern, consider using @B_android#graphics#drawable#Icon#loadDrawableAsync_E@ and then @B_android#widget#ImageView#setImageDrawable_E@ instead.", "history": "Added in API level 23", "FullName": "public void setImageIcon (Icon icon)"}, "getCropToPadding()": {"Returns": [["boolean", "whether this ImageView crops to padding"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setCropToPadding_E@"], "Permissions": [], "Description": "Return whether this ImageView crops to padding.", "history": "Added in API level 16", "FullName": "public boolean getCropToPadding ()"}, "ImageView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getBaselineAlignBottom()": {"Returns": [["boolean", "True if the ImageView's baseline is considered the bottom of the view, false if otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setBaselineAlignBottom_E@"], "Permissions": [], "Description": "Checks whether this view's baseline is considered the bottom of the view.", "history": "Added in API level 11", "FullName": "public boolean getBaselineAlignBottom ()"}, "getScaleType()": {"Returns": [["@B_android#widget#ImageView#ScaleType_E@", "The ScaleType used to scale the image."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#ScaleType_E@"], "Permissions": [], "Description": "Returns the current ScaleType that is used to scale the bounds of an image to the bounds of the ImageView.", "history": "Added in API level 1", "FullName": "public ImageView.ScaleType getScaleType ()"}, "animateTransform(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The transformation parameters in matrix form. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a temporary transformation @B_android#graphics#Matrix_E@ to the view's drawable when it is drawn. Allows custom scaling, translation, and perspective distortion during an animation. This method is a lightweight analogue of @B_android#widget#ImageView#setImageMatrix_E@ to use only during animations as this matrix will be cleared after the next drawable update or view's bounds change.", "history": "Added in API level 29", "FullName": "public void animateTransform (Matrix matrix)"}, "setColorFilter(int,android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["int", "int: Color tint to apply."], ["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: How to apply the color. The standard mode is @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a tinting option for the image.", "history": "Added in API level 1", "FullName": "public final void setColorFilter (int color, PorterDuff.Mode mode)"}, "setMaxHeight(int)": {"Returns": [], "Parameters": [["int", "int: maximum height for this view"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getMaxHeight_E@"], "Permissions": [], "Description": "An optional argument to supply a maximum height for this view. Only valid if @B_android#widget#ImageView#setAdjustViewBounds_E@ has been set to true. To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT. Note that this view could be still smaller than 100 x 100 using this approach if the original image is small. To set an image to a fixed size, specify that size in the layout params and then use @B_android#widget#ImageView#setScaleType_E@ to determine how to fit the image within the bounds.", "history": "Added in API level 1", "FullName": "public void setMaxHeight (int maxHeight)"}, "setSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the view must be selected, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selection state of this view. A view can be selected or not. Note that selection is not the same as focus. Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.", "history": "Added in API level 1", "FullName": "public void setSelected (boolean selected)"}, "setBaseline(int)": {"Returns": [], "Parameters": [["int", "int: The baseline to use, or -1 if none is to be provided."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setBaseline_E@"], "Permissions": [], "Description": "Set the offset of the widget's text baseline from the widget's top boundary. This value is overridden by the @B_android#widget#ImageView#setBaselineAlignBottom_E@ property.", "history": "Added in API level 11", "FullName": "public void setBaseline (int baseline)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary.", "history": "Added in API level 1", "FullName": "public int getBaseline ()"}, "ImageView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ImageView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: the alpha value that should be applied to the image"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use #setImageAlpha(int) instead Sets the alpha value that should be applied to the image.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setAlpha (int alpha)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "setImageBitmap(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a Bitmap as the content of this ImageView.", "history": "Added in API level 1", "FullName": "public void setImageBitmap (Bitmap bm)"}, "getImageAlpha()": {"Returns": [["int", "the alpha value that will be applied to the drawable of this ImageView (between 0 and 255 inclusive, with 0 being transparent and 255 being opaque)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageAlpha_E@"], "Permissions": [], "Description": "Returns the alpha that will be applied to the drawable of this ImageView.", "history": "Added in API level 16", "FullName": "public int getImageAlpha ()"}, "setCropToPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether this ImageView will crop to padding"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getCropToPadding_E@"], "Permissions": [], "Description": "Sets whether this ImageView will crop to padding.", "history": "Added in API level 16", "FullName": "public void setCropToPadding (boolean cropToPadding)"}, "getImageTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the image Drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageTintBlendMode_E@"], "Permissions": [], "Description": "Gets the blending mode used to apply the tint to the image Drawable", "history": "Added in API level 29", "FullName": "public BlendMode getImageTintBlendMode ()"}, "setImageResource(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable as the content of this ImageView. This does Bitmap reading and decoding on the UI thread, which can cause a latency hiccup. If that's a concern, consider using @B_android#widget#ImageView#setImageDrawable_E@ or @B_android#widget#ImageView#setImageBitmap_E@ and @B_android#graphics#BitmapFactory_E@ instead.", "history": "Added in API level 1", "FullName": "public void setImageResource (int resId)"}, "setFrame(int, int, int, int)": {"Returns": [["boolean", "true if the new size and position are different than the previous ones"]], "Parameters": [["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a size and position to this view. This is called from layout.", "history": "added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onSetAlpha(int)": {"Returns": [["", "true if the view can draw with the specified alpha."]], "Parameters": [["int", "The alpha (0..255) to apply to the view's drawing"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked if there is a Transform that involves alpha. Subclass that can draw themselves with the specified alpha should return true, and then respect that alpha when their onDraw() is called. If this returns false then the view may be redirected to draw into an offscreen buffer to fulfill the request, which will look fine, but may be slower than if the subclass handles it internally. The default implementation returns false.", "history": "Since: API Level 1", "FullName": "protected boolean onSetAlpha (int alpha)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 1", "FullName": "public int[] onCreateDrawableState (int extraSpace)"}, "getMaxWidth()": {"Returns": [["int", "The maximum width of this view"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setMaxWidth_E@"], "Permissions": [], "Description": "The maximum width of this view.", "history": "Added in API level 16", "FullName": "public int getMaxWidth ()"}, "setImageURI(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the Uri of an image, or null to clear the content This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the content of this ImageView to the specified Uri. Note that you use this method to load images from a local Uri only. To learn how to display images from a remote Uri see: This does Bitmap reading and decoding on the UI thread, which can cause a latency hiccup. If that's a concern, consider using @B_android#widget#ImageView#setImageDrawable_E@ or @B_android#widget#ImageView#setImageBitmap_E@ and @B_android#graphics#BitmapFactory_E@ instead. On devices running SDK < 24, this method will fail to apply correct density scaling to images loaded from @B_android#content#ContentResolver#SCHEME_CONTENT_E@ and @B_android#content#ContentResolver#SCHEME_FILE_E@ schemes. Applications running on devices with SDK >= 24 targetSdkVersion in their manifest as 24 or above for density scaling to be applied to images loaded from these schemes.", "history": "Added in API level 1", "FullName": "public void setImageURI (Uri uri)"}, "setImageMatrix(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The transformation parameters in matrix form."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a transformation @B_android#graphics#Matrix_E@ that is applied to the view's drawable when it is drawn. Allows custom scaling, translation, and perspective distortion.", "history": "Added in API level 1", "FullName": "public void setImageMatrix (Matrix matrix)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "isOpaque()": {"Returns": [["boolean", "True if this View is guaranteed to be fully opaque, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this View is opaque. An opaque View guarantees that it will draw all the pixels overlapping its bounds using a fully opaque color. Subclasses of View should override this method whenever possible to indicate whether an instance is opaque. Opaque Views are treated in a special way by the View hierarchy, possibly allowing it to perform optimizations during invalidate/draw passes.", "history": "Added in API level 7", "FullName": "public boolean isOpaque ()"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable dr)"}, "setImageState(int[], boolean)": {"Returns": [], "Parameters": [["int[]", "int: the state to set for the StateListDrawable"], ["boolean", "boolean: if true, merges the state values for the state you specify into the current state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the state of the current @B_android#graphics#drawable#StateListDrawable_E@. For more information about State List Drawables, see:", "history": "added in API level 1", "FullName": "public void setImageState (int[] state, boolean merge)"}, "setColorFilter(int)": {"Returns": [], "Parameters": [["int", "int: Color tint to apply."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a tinting option for the image. Assumes @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@ blending mode.", "history": "Added in API level 8", "FullName": "public final void setColorFilter (int color)"}, "setImageState(int[],boolean)": {"Returns": [], "Parameters": [["int[]", "int: the state to set for the StateListDrawable"], ["boolean", "boolean: if true, merges the state values for the state you specify into the current state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the state of the current @B_android#graphics#drawable#StateListDrawable_E@. For more information about State List Drawables, see:", "history": "Added in API level 1", "FullName": "public void setImageState (int[] state, boolean merge)"}, "setImageTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getImageTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ImageView#setImageTintList_E@} to the image drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setImageTintMode (PorterDuff.Mode tintMode)"}, "getImageTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the image Drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageTintMode_E@"], "Permissions": [], "Description": "Gets the blending mode used to apply the tint to the image Drawable", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getImageTintMode ()"}, "setImageAlpha(int)": {"Returns": [], "Parameters": [["int", "int: the alpha value that should be applied to the image (between 0 and 255 inclusive, with 0 being transparent and 255 being opaque)"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getImageAlpha_E@"], "Permissions": [], "Description": "Sets the alpha value that should be applied to the image.", "history": "Added in API level 16", "FullName": "public void setImageAlpha (int alpha)"}, "getAdjustViewBounds()": {"Returns": [["boolean", "whether to adjust the bounds of this view to preserve the original aspect ratio of the drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setAdjustViewBounds_E@"], "Permissions": [], "Description": "True when ImageView is adjusting its bounds to preserve the aspect ratio of its drawable", "history": "Added in API level 16", "FullName": "public boolean getAdjustViewBounds ()"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "Added in API level 16", "FullName": "public boolean hasOverlappingRendering ()"}, "setImageTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getImageTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the image drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#ImageView#setImageDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@. Note: The default tint mode used by this setter is NOT consistent with the default tint mode used by the @B_android#R#styleable#ImageView_tint_E@ attribute. If the android:tint attribute is specified, the default tint mode will be set to @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@ to ensure consistency with earlier versions of the platform.", "history": "Added in API level 21", "FullName": "public void setImageTintList (ColorStateList tint)"}, "setImageLevel(int)": {"Returns": [], "Parameters": [["int", "int: The new level for the image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the image level, when it is constructed from a @B_android#graphics#drawable#LevelListDrawable_E@.", "history": "Added in API level 1", "FullName": "public void setImageLevel (int level)"}, "ImageView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageView (Context context)"}, "getMaxHeight()": {"Returns": [["int", "The maximum height of this view"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setMaxHeight_E@"], "Permissions": [], "Description": "The maximum height of this view.", "history": "Added in API level 16", "FullName": "public int getMaxHeight ()"}, "getImageTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the image drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageTintList_E@"], "Permissions": [], "Description": "Get the current @B_android#content#res#ColorStateList_E@ used to tint the image Drawable, or null if no tint is applied.", "history": "Added in API level 21", "FullName": "public ColorStateList getImageTintList ()"}, "setBaselineAlignBottom(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the image view will be baseline aligned by its bottom edge."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the baseline of this view to the bottom of the view. Setting this value overrides any calls to setBaseline.", "history": "Added in API level 11", "FullName": "public void setBaselineAlignBottom (boolean aligned)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "getDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the view's drawable, or null if no drawable has been assigned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current Drawable, or null if no Drawable has been assigned.", "history": "Added in API level 1", "FullName": "public Drawable getDrawable ()"}, "invalidateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidates the specified Drawable.", "history": "Added in API level 1", "FullName": "public void invalidateDrawable (Drawable dr)"}, "setAdjustViewBounds(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to adjust the bounds of this view to preserve the original aspect ratio of the drawable."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getAdjustViewBounds_E@"], "Permissions": [], "Description": "Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable. @B_android#view#View#MeasureSpec_E@ and @B_android#widget#RelativeLayout_E@ behavior.", "history": "Added in API level 1", "FullName": "public void setAdjustViewBounds (boolean adjustViewBounds)"}, "clearColorFilter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setColorFilter_E@", "@B_android#widget#ImageView#getColorFilter_E@"], "Permissions": [], "Description": "Removes the image's @B_android#graphics#ColorFilter_E@.", "history": "Added in API level 1", "FullName": "public final void clearColorFilter ()"}, "setMaxWidth(int)": {"Returns": [], "Parameters": [["int", "int: maximum width for this view"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getMaxWidth_E@"], "Permissions": [], "Description": "An optional argument to supply a maximum width for this view. Only valid if @B_android#widget#ImageView#setAdjustViewBounds_E@ has been set to true. To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT. Note that this view could be still smaller than 100 x 100 using this approach if the original image is small. To set an image to a fixed size, specify that size in the layout params and then use @B_android#widget#ImageView#setScaleType_E@ to determine how to fit the image within the bounds.", "history": "Added in API level 1", "FullName": "public void setMaxWidth (int maxWidth)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getImageMatrix()": {"Returns": [["@B_android#graphics#Matrix_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the view's optional matrix. This is applied to the view's drawable when it is drawn. If there is no matrix, this method will return an identity matrix. Do not change this matrix in place but make a copy. If you want a different matrix applied to the drawable, be sure to call setImageMatrix().", "history": "Added in API level 1", "FullName": "public Matrix getImageMatrix ()"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the visibility state of this view.", "history": "Added in API level 1", "FullName": "public void setVisibility (int visibility)"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the active color filter for this ImageView"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setColorFilter_E@"], "Permissions": [], "Description": "Returns the active color filter for this ImageView.", "history": "Added in API level 16", "FullName": "public ColorFilter getColorFilter ()"}, "ImageView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageView (Context context, AttributeSet attrs)"}, "setImageDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the Drawable to set, or null to clear the content This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable as the content of this ImageView.", "history": "Added in API level 1", "FullName": "public void setImageDrawable (Drawable drawable)"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: the colorfilter to apply (may be null)"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getColorFilter_E@"], "Permissions": [], "Description": "Apply an arbitrary colorfilter to the image.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter cf)"}, "onVisibilityAggregated(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this view and all of its ancestors are @B_android#view#View#VISIBLE_E@ and this view's window is also visible"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 24", "FullName": "public void onVisibilityAggregated (boolean isVisible)"}, "setImageTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#getImageTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ImageView#setImageTintList_E@} to the image drawable. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setImageTintBlendMode (BlendMode blendMode)"}, "setScaleType(android.widget.ImageView.ScaleType)": {"Returns": [], "Parameters": [["@B_android#widget#ImageView#ScaleType_E@", "ImageView.ScaleType: The desired scaling mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls how the image should be resized or moved to match the size of this ImageView.", "history": "Added in API level 1", "FullName": "public void setScaleType (ImageView.ScaleType scaleType)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.widget.ImageView", "ClassDesc": "Displays image resources, for example @B_android#graphics#Bitmap_E@ or @B_android#graphics#drawable#Drawable_E@ resources. ImageView is also commonly used to The following XML snippet is a common example of using an ImageView to display an image resource: To learn more about Drawables, see:"}