{"Functions": {"getDimension(android.util.DisplayMetrics)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate metrics depending on its unit."]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to use in the conversion -- supplies display density and scaling information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the data for this value as a dimension. Only use for values whose type is @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 1", "FullName": "public float getDimension (DisplayMetrics metrics)"}, "getFraction(float,float)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate base value depending on its unit."]], "Parameters": [["float", "float: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["float", "float: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the data for this value as a fraction. Only use for values whose type is @B_android#util#TypedValue#TYPE_FRACTION_E@.", "history": "Added in API level 1", "FullName": "public float getFraction (float base, float pbase)"}, "complexToDimensionPixelSize(int,android.util.DisplayMetrics)": {"Returns": [["int", "The number of pixels specified by the data and its desired multiplier and units."]], "Parameters": [["int", "int: A complex data value holding a unit, magnitude, and mantissa."], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to use in the conversion -- supplies display density and scaling information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a complex data value holding a dimension to its final value as an integer pixel size. This is the same as @B_android#util#TypedValue#complexToDimension_E@, except the raw floating point value is converted to an integer (pixel) value for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. The given @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 1", "FullName": "public static int complexToDimensionPixelSize (int data, DisplayMetrics metrics)"}, "coerceToString(int, int)": {"Returns": [["@B_java#lang#String_E@", "String The coerced string value. If the value is null or the type is not known, null is returned."]], "Parameters": [["int", "int: The data type identifier."], ["int", "int: The data value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform type conversion as per @B_android#util#TypedValue#coerceToString_E@ on an explicitly supplied type and data.", "history": "added in API level 1", "FullName": "public static final String coerceToString (int type, int data)"}, "coerceToString()": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The coerced string value. If the value is null or the type is not known, null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Regardless of the actual type of the value, try to convert it to a string value. For example, a color type will be converted to a string of the form #aarrggbb.", "history": "Added in API level 1", "FullName": "public final CharSequence coerceToString ()"}, "complexToDimensionPixelOffset(int,android.util.DisplayMetrics)": {"Returns": [["int", "The number of pixels specified by the data and its desired multiplier and units."]], "Parameters": [["int", "int: A complex data value holding a unit, magnitude, and mantissa."], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to use in the conversion -- supplies display density and scaling information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a complex data value holding a dimension to its final value as an integer pixel offset. This is the same as @B_android#util#TypedValue#complexToDimension_E@, except the raw floating point value is truncated to an integer (pixel) value. The given @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 1", "FullName": "public static int complexToDimensionPixelOffset (int data, DisplayMetrics metrics)"}, "coerceToString(int,int)": {"Returns": [["@B_java#lang#String_E@", "String The coerced string value. If the value is null or the type is not known, null is returned."]], "Parameters": [["int", "int: The data type identifier."], ["int", "int: The data value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform type conversion as per @B_android#util#TypedValue#coerceToString_E@ on an explicitly supplied type and data.", "history": "Added in API level 1", "FullName": "public static final String coerceToString (int type, int data)"}, "TypedValue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public TypedValue ()"}, "getComplexUnit()": {"Returns": [["int", "The complex unit type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the complex unit type for this value. For example, a dimen type with value 12sp will return @B_android#util#TypedValue#COMPLEX_UNIT_SP_E@. Only use for values whose type is @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 22", "FullName": "public int getComplexUnit ()"}, "complexToDimension(int,android.util.DisplayMetrics)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate metrics depending on its unit."]], "Parameters": [["int", "int: A complex data value holding a unit, magnitude, and mantissa."], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to use in the conversion -- supplies display density and scaling information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a complex data value holding a dimension to its final floating point value. The given @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 1", "FullName": "public static float complexToDimension (int data, DisplayMetrics metrics)"}, "setTo(android.util.TypedValue)": {"Returns": [], "Parameters": [["@B_android#util#TypedValue_E@", "TypedValue no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setTo (TypedValue other)"}, "getFloat()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the data for this value as a float. Only use for values whose type is @B_android#util#TypedValue#TYPE_FLOAT_E@.", "history": "added in API level 1", "FullName": "public final float getFloat ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "complexToFloat(int)": {"Returns": [["float", "A floating point value corresponding to the complex data."]], "Parameters": [["int", "int: A complex data value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the base value from a complex data integer. This uses the @B_android#util#TypedValue#COMPLEX_MANTISSA_MASK_E@ and @B_android#util#TypedValue#COMPLEX_RADIX_MASK_E@ fields of the data to compute a floating point representation of the number they describe. The units are ignored.", "history": "Added in API level 1", "FullName": "public static float complexToFloat (int complex)"}, "isColorType()": {"Returns": [["boolean", "true if this value is a color"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if a value is a color. This works by comparing @B_android#util#TypedValue#type_E@ to @B_android#util#TypedValue#TYPE_FIRST_COLOR_INT_E@ and @B_android#util#TypedValue#TYPE_LAST_COLOR_INT_E@.", "history": "Added in API level 29", "FullName": "public boolean isColorType ()"}, "complexToFraction(int, float, float)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate base value depending on its unit."]], "Parameters": [["int", "int: A complex data value holding a unit, magnitude, and mantissa."], ["float", "float: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["float", "float: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a complex data value holding a fraction to its final floating point value. The given @B_android#util#TypedValue#TYPE_FRACTION_E@.", "history": "added in API level 1", "FullName": "public static float complexToFraction (int data, float base, float pbase)"}, "getFraction(float, float)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate base value depending on its unit."]], "Parameters": [["float", "float: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["float", "float: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the data for this value as a fraction. Only use for values whose type is @B_android#util#TypedValue#TYPE_FRACTION_E@.", "history": "added in API level 1", "FullName": "public float getFraction (float base, float pbase)"}, "applyDimension(int,float,android.util.DisplayMetrics)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate metrics depending on its unit."]], "Parameters": [["int", "int: The unit to convert from."], ["float", "float: The value to apply the unit to."], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to use in the conversion -- supplies display density and scaling information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts an unpacked complex data value holding a dimension to its final floating point value. The two parameters @B_android#util#TypedValue#TYPE_DIMENSION_E@.", "history": "Added in API level 1", "FullName": "public static float applyDimension (int unit, float value, DisplayMetrics metrics)"}, "complexToFraction(int,float,float)": {"Returns": [["float", "The complex floating point value multiplied by the appropriate base value depending on its unit."]], "Parameters": [["int", "int: A complex data value holding a unit, magnitude, and mantissa."], ["float", "float: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["float", "float: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a complex data value holding a fraction to its final floating point value. The given @B_android#util#TypedValue#TYPE_FRACTION_E@.", "history": "Added in API level 1", "FullName": "public static float complexToFraction (int data, float base, float pbase)"}}, "Inheritance": [], "ClassName": "android.util.TypedValue", "ClassDesc": "Container for a dynamically typed data value. Primarily used with @B_android#content#res#Resources_E@ for holding resource values."}