{"Functions": {"rLineTo(float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the previous point on this contour, to specify a line"], ["float", "float: The amount to add to the y-coordinate of the previous point on this contour, to specify a line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as lineTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "Added in API level 1", "FullName": "public void rLineTo (float dx, float dy)"}, "rCubicTo(float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as cubicTo, but the coordinates are considered relative to the current point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "Added in API level 1", "FullName": "public void rCubicTo (float x1, float y1, float x2, float y2, float x3, float y3)"}, "rCubicTo(float, float, float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as cubicTo, but the coordinates are considered relative to the current point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "added in API level 1", "FullName": "public void rCubicTo (float x1, float y1, float x2, float y2, float x3, float y3)"}, "addPath(android.graphics.Path)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path that is appended to the current path This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a copy of src to the path", "history": "Added in API level 1", "FullName": "public void addPath (Path src)"}, "incReserve(int)": {"Returns": [], "Parameters": [["int", "int: The number of extra points that may be added to this path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hint to the path to prepare for adding more points. This can allow the path to more efficiently allocate its storage.", "history": "Added in API level 1", "FullName": "public void incReserve (int extraPtCount)"}, "lineTo(float,float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the end of a line"], ["float", "float: The y-coordinate of the end of a line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "Added in API level 1", "FullName": "public void lineTo (float x, float y)"}, "addOval(float,float,float,float,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the oval's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed oval contour to the path", "history": "Added in API level 21", "FullName": "public void addOval (float left, float top, float right, float bottom, Path.Direction dir)"}, "addArc(float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the specified arc to the path as a new contour.", "history": "Added in API level 21", "FullName": "public void addArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle)"}, "addArc(android.graphics.RectF,float,float)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval defining the shape and size of the arc This value must never be null."], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the specified arc to the path as a new contour.", "history": "Added in API level 1", "FullName": "public void addArc (RectF oval, float startAngle, float sweepAngle)"}, "offset(float,float)": {"Returns": [], "Parameters": [["float", "float: The amount in the X direction to offset the entire path"], ["float", "float: The amount in the Y direction to offset the entire path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the path by (dx,dy)", "history": "Added in API level 1", "FullName": "public void offset (float dx, float dy)"}, "isInverseFillType()": {"Returns": [["boolean", "true if the filltype is one of the INVERSE variants"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the filltype is one of the INVERSE variants", "history": "Added in API level 1", "FullName": "public boolean isInverseFillType ()"}, "rLineTo(float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the previous point on this contour, to specify a line"], ["float", "float: The amount to add to the y-coordinate of the previous point on this contour, to specify a line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as lineTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "added in API level 1", "FullName": "public void rLineTo (float dx, float dy)"}, "addRect(float,float,float,float,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["float", "float: The left side of a rectangle to add to the path"], ["float", "float: The top of a rectangle to add to the path"], ["float", "float: The right side of a rectangle to add to the path"], ["float", "float: The bottom of a rectangle to add to the path"], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed rectangle contour to the path", "history": "Added in API level 1", "FullName": "public void addRect (float left, float top, float right, float bottom, Path.Direction dir)"}, "cubicTo(float,float,float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the 1st control point on a cubic curve"], ["float", "float: The y-coordinate of the 1st control point on a cubic curve"], ["float", "float: The x-coordinate of the 2nd control point on a cubic curve"], ["float", "float: The y-coordinate of the 2nd control point on a cubic curve"], ["float", "float: The x-coordinate of the end point on a cubic curve"], ["float", "float: The y-coordinate of the end point on a cubic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "Added in API level 1", "FullName": "public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3)"}, "setLastPoint(float,float)": {"Returns": [], "Parameters": [["float", "float: The new X coordinate for the last point"], ["float", "float: The new Y coordinate for the last point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the last point of the path.", "history": "Added in API level 1", "FullName": "public void setLastPoint (float dx, float dy)"}, "addPath(android.graphics.Path,float,float)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to add as a new contour This value must never be null."], ["float", "float: The amount to translate the path in X as it is added"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a copy of src to the path, offset by (dx,dy)", "history": "Added in API level 1", "FullName": "public void addPath (Path src, float dx, float dy)"}, "transform(android.graphics.Matrix,android.graphics.Path)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The matrix to apply to the path This value must never be null."], ["@B_android#graphics#Path_E@", "Path: The transformed path is written here. If dst is null, then the the original path is modified This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transform the points in this path by matrix, and write the answer into dst. If dst is null, then the the original path is modified.", "history": "Added in API level 1", "FullName": "public void transform (Matrix matrix, Path dst)"}, "addRoundRect(float,float,float,float,float[],android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float[]", "float: Array of 8 values, 4 pairs of [X,Y] radii This value must never be null."], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the round-rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed round-rectangle contour to the path. Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left", "history": "Added in API level 21", "FullName": "public void addRoundRect (float left, float top, float right, float bottom, float[] radii, Path.Direction dir)"}, "isConvex()": {"Returns": [["boolean", "True if the path is convex."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the path's convexity, as defined by the content of the path. A path is convex if it has a single contour, and only ever curves in a single direction. This function will calculate the convexity of the path from its control points, and cache the result.", "history": "Added in API level 21", "FullName": "public boolean isConvex ()"}, "setLastPoint(float, float)": {"Returns": [], "Parameters": [["float", "float: The new X coordinate for the last point"], ["float", "float: The new Y coordinate for the last point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the last point of the path.", "history": "added in API level 1", "FullName": "public void setLastPoint (float dx, float dy)"}, "computeBounds(android.graphics.RectF,boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: Returns the computed bounds of the path's control points. This value must never be null."], ["boolean", "boolean: This parameter is no longer used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the bounds of the control points of the path, and write the answer into bounds. If the path contains 0 or 1 points, the bounds is set to (0,0,0,0)", "history": "Added in API level 1", "FullName": "public void computeBounds (RectF bounds, boolean exact)"}, "addPath(android.graphics.Path, float, float)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to add as a new contour"], ["float", "float: The amount to translate the path in X as it is added"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a copy of src to the path, offset by (dx,dy)", "history": "added in API level 1", "FullName": "public void addPath (Path src, float dx, float dy)"}, "Path(android.graphics.Path)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to copy from when initializing the new path This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new path, copying the contents from the src path.", "history": "Added in API level 1", "FullName": "public Path (Path src)"}, "approximate(float)": {"Returns": [["float[]", "An array of components for points approximating the Path. This value will never be null."]], "Parameters": [["float", "float: The acceptable error for a line on the Path. Typically this would be 0.5 so that the error is less than half a pixel. Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Approximate the Path with a series of line segments. This returns float[] with the array containing point components. There are three components for each point, in order: Fraction along the length of the path that the point resides The x coordinate of the point The y coordinate of the point Two points may share the same fraction along its length when there is a move action within the Path.", "history": "Added in API level 26", "FullName": "public float[] approximate (float acceptableError)"}, "rMoveTo(float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the end of the previous contour, to specify the start of a new contour"], ["float", "float: The amount to add to the y-coordinate of the end of the previous contour, to specify the start of a new contour"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the beginning of the next contour relative to the last point on the previous contour. If there is no previous contour, this is treated the same as moveTo().", "history": "added in API level 1", "FullName": "public void rMoveTo (float dx, float dy)"}, "moveTo(float, float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the start of a new contour"], ["float", "float: The y-coordinate of the start of a new contour"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the beginning of the next contour to the point (x,y).", "history": "added in API level 1", "FullName": "public void moveTo (float x, float y)"}, "quadTo(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the control point on a quadratic curve"], ["float", "float: The y-coordinate of the control point on a quadratic curve"], ["float", "float: The x-coordinate of the end point on a quadratic curve"], ["float", "float: The y-coordinate of the end point on a quadratic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "Added in API level 1", "FullName": "public void quadTo (float x1, float y1, float x2, float y2)"}, "lineTo(float, float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the end of a line"], ["float", "float: The y-coordinate of the end of a line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "added in API level 1", "FullName": "public void lineTo (float x, float y)"}, "addArc(android.graphics.RectF, float, float)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval defining the shape and size of the arc"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the specified arc to the path as a new contour.", "history": "added in API level 1", "FullName": "public void addArc (RectF oval, float startAngle, float sweepAngle)"}, "moveTo(float,float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the start of a new contour"], ["float", "float: The y-coordinate of the start of a new contour"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the beginning of the next contour to the point (x,y).", "history": "Added in API level 1", "FullName": "public void moveTo (float x, float y)"}, "addPath(android.graphics.Path,android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path to add as a new contour This value must never be null."], ["@B_android#graphics#Matrix_E@", "Matrix: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a copy of src to the path, transformed by matrix", "history": "Added in API level 1", "FullName": "public void addPath (Path src, Matrix matrix)"}, "set(android.graphics.Path)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replace the contents of this with the contents of src.", "history": "Added in API level 1", "FullName": "public void set (Path src)"}, "op(android.graphics.Path,android.graphics.Path,android.graphics.Path.Op)": {"Returns": [["boolean", "True if operation succeeded, false otherwise and this path remains unmodified."]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The first operand (for difference, the minuend) This value must never be null."], ["@B_android#graphics#Path_E@", "Path: The second operand (for difference, the subtrahend) This value must never be null."], ["@B_android#graphics#Path#Op_E@", "Path.Op: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Path#Op_E@", "@B_android#graphics#Path#op_E@"], "Permissions": [], "Description": "Set this path to the result of applying the Op to the two specified paths. The resulting path will be constructed from non-overlapping contours. The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.", "history": "Added in API level 19", "FullName": "public boolean op (Path path1, Path path2, Path.Op op)"}, "rQuadTo(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the last point on this contour, for the control point of a quadratic curve"], ["float", "float: The amount to add to the y-coordinate of the last point on this contour, for the control point of a quadratic curve"], ["float", "float: The amount to add to the x-coordinate of the last point on this contour, for the end point of a quadratic curve"], ["float", "float: The amount to add to the y-coordinate of the last point on this contour, for the end point of a quadratic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as quadTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "Added in API level 1", "FullName": "public void rQuadTo (float dx1, float dy1, float dx2, float dy2)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 1", "FullName": "void finalize ()"}, "Path()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an empty path", "history": "Added in API level 1", "FullName": "public Path ()"}, "arcTo(android.graphics.RectF,float,float,boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval defining shape and size of the arc This value must never be null."], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise, treated mod 360."], ["boolean", "boolean: If true, always begin a new contour with the arc"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.", "history": "Added in API level 1", "FullName": "public void arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)"}, "addRect(android.graphics.RectF,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangle to add as a closed contour to the path This value must never be null."], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed rectangle contour to the path", "history": "Added in API level 1", "FullName": "public void addRect (RectF rect, Path.Direction dir)"}, "cubicTo(float, float, float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the 1st control point on a cubic curve"], ["float", "float: The y-coordinate of the 1st control point on a cubic curve"], ["float", "float: The x-coordinate of the 2nd control point on a cubic curve"], ["float", "float: The y-coordinate of the 2nd control point on a cubic curve"], ["float", "float: The x-coordinate of the end point on a cubic curve"], ["float", "float: The y-coordinate of the end point on a cubic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "added in API level 1", "FullName": "public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3)"}, "arcTo(android.graphics.RectF, float, float)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval defining shape and size of the arc"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.", "history": "added in API level 1", "FullName": "public void arcTo (RectF oval, float startAngle, float sweepAngle)"}, "isRect(android.graphics.RectF)": {"Returns": [["boolean", "true if the path specifies a rectangle"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: If not null, returns the bounds of the path if it specifies a rectangle This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the path specifies a rectangle. If so, and if rect is not null, set rect to the bounds of the path. If the path does not specify a rectangle, return false and ignore rect.", "history": "Added in API level 1", "FullName": "public boolean isRect (RectF rect)"}, "addRoundRect(float,float,float,float,float,float,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: The x-radius of the rounded corners on the round-rectangle"], ["float", "float: The y-radius of the rounded corners on the round-rectangle"], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the round-rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed round-rectangle contour to the path", "history": "Added in API level 21", "FullName": "public void addRoundRect (float left, float top, float right, float bottom, float rx, float ry, Path.Direction dir)"}, "addOval(android.graphics.RectF,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of the oval to add as a closed contour to the path This value must never be null."], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the oval's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed oval contour to the path", "history": "Added in API level 1", "FullName": "public void addOval (RectF oval, Path.Direction dir)"}, "addRoundRect(android.graphics.RectF,float,float,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of a round-rectangle to add to the path This value must never be null."], ["float", "float: The x-radius of the rounded corners on the round-rectangle"], ["float", "float: The y-radius of the rounded corners on the round-rectangle"], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the round-rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed round-rectangle contour to the path", "history": "Added in API level 1", "FullName": "public void addRoundRect (RectF rect, float rx, float ry, Path.Direction dir)"}, "addRoundRect(android.graphics.RectF,float[],android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of a round-rectangle to add to the path This value must never be null."], ["float[]", "float: Array of 8 values, 4 pairs of [X,Y] radii This value must never be null."], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the round-rectangle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed round-rectangle contour to the path. Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left", "history": "Added in API level 1", "FullName": "public void addRoundRect (RectF rect, float[] radii, Path.Direction dir)"}, "rMoveTo(float,float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the end of the previous contour, to specify the start of a new contour"], ["float", "float: The amount to add to the y-coordinate of the end of the previous contour, to specify the start of a new contour"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the beginning of the next contour relative to the last point on the previous contour. If there is no previous contour, this is treated the same as moveTo().", "history": "Added in API level 1", "FullName": "public void rMoveTo (float dx, float dy)"}, "offset(float, float, android.graphics.Path)": {"Returns": [], "Parameters": [["float", "float: The amount in the X direction to offset the entire path"], ["float", "float: The amount in the Y direction to offset the entire path"], ["@B_android#graphics#Path_E@", "Path: The translated path is written here. If this is null, then the original path is modified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the path by (dx,dy)", "history": "added in API level 1", "FullName": "public void offset (float dx, float dy, Path dst)"}, "quadTo(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the control point on a quadratic curve"], ["float", "float: The y-coordinate of the control point on a quadratic curve"], ["float", "float: The x-coordinate of the end point on a quadratic curve"], ["float", "float: The y-coordinate of the end point on a quadratic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).", "history": "added in API level 1", "FullName": "public void quadTo (float x1, float y1, float x2, float y2)"}, "transform(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The matrix to apply to the path This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transform the points in this path by matrix.", "history": "Added in API level 1", "FullName": "public void transform (Matrix matrix)"}, "addCircle(float,float,float,android.graphics.Path.Direction)": {"Returns": [], "Parameters": [["float", "float: The x-coordinate of the center of a circle to add to the path"], ["float", "float: The y-coordinate of the center of a circle to add to the path"], ["float", "float: The radius of a circle to add to the path"], ["@B_android#graphics#Path#Direction_E@", "Path.Direction: The direction to wind the circle's contour This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a closed circle contour to the path", "history": "Added in API level 1", "FullName": "public void addCircle (float x, float y, float radius, Path.Direction dir)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear any lines and curves from the path, making it empty. This does NOT change the fill-type setting.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "getFillType()": {"Returns": [["@B_android#graphics#Path#FillType_E@", "the path's fill type This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the path's fill type. This defines how \"inside\" is computed. The default value is WINDING.", "history": "Added in API level 1", "FullName": "public Path.FillType getFillType ()"}, "isEmpty()": {"Returns": [["boolean", "true if the path is empty (contains no lines or curves)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the path is empty (contains no lines or curves)", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "rewind()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse.", "history": "Added in API level 1", "FullName": "public void rewind ()"}, "arcTo(android.graphics.RectF,float,float)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The bounds of oval defining shape and size of the arc This value must never be null."], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.", "history": "Added in API level 1", "FullName": "public void arcTo (RectF oval, float startAngle, float sweepAngle)"}, "offset(float, float)": {"Returns": [], "Parameters": [["float", "float: The amount in the X direction to offset the entire path"], ["float", "float: The amount in the Y direction to offset the entire path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the path by (dx,dy)", "history": "added in API level 1", "FullName": "public void offset (float dx, float dy)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the current contour. If the current point is not equal to the first point of the contour, a line segment is automatically added.", "history": "Added in API level 1", "FullName": "public void close ()"}, "computeBounds(android.graphics.RectF, boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: Returns the computed bounds of the path's control points."], ["boolean", "boolean: This parameter is no longer used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the bounds of the control points of the path, and write the answer into bounds. If the path contains 0 or 1 points, the bounds is set to (0,0,0,0)", "history": "added in API level 1", "FullName": "public void computeBounds (RectF bounds, boolean exact)"}, "setFillType(android.graphics.Path.FillType)": {"Returns": [], "Parameters": [["@B_android#graphics#Path#FillType_E@", "Path.FillType: The new fill type for this path This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the path's fill type. This defines how \"inside\" is computed.", "history": "Added in API level 1", "FullName": "public void setFillType (Path.FillType ft)"}, "arcTo(float,float,float,float,float,float,boolean)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise, treated mod 360."], ["boolean", "boolean: If true, always begin a new contour with the arc"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.", "history": "Added in API level 21", "FullName": "public void arcTo (float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)"}, "rQuadTo(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The amount to add to the x-coordinate of the last point on this contour, for the control point of a quadratic curve"], ["float", "float: The amount to add to the y-coordinate of the last point on this contour, for the control point of a quadratic curve"], ["float", "float: The amount to add to the x-coordinate of the last point on this contour, for the end point of a quadratic curve"], ["float", "float: The amount to add to the y-coordinate of the last point on this contour, for the end point of a quadratic curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as quadTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.", "history": "added in API level 1", "FullName": "public void rQuadTo (float dx1, float dy1, float dx2, float dy2)"}, "toggleInverseFillType()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Toggles the INVERSE state of the filltype", "history": "Added in API level 1", "FullName": "public void toggleInverseFillType ()"}, "offset(float,float,android.graphics.Path)": {"Returns": [], "Parameters": [["float", "float: The amount in the X direction to offset the entire path"], ["float", "float: The amount in the Y direction to offset the entire path"], ["@B_android#graphics#Path_E@", "Path: The translated path is written here. If this is null, then the original path is modified. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the path by (dx,dy)", "history": "Added in API level 1", "FullName": "public void offset (float dx, float dy, Path dst)"}, "addArc(float, float, float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float: Starting angle (in degrees) where the arc begins"], ["float", "float: Sweep angle (in degrees) measured clockwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the specified arc to the path as a new contour.", "history": "added in API level 21", "FullName": "public void addArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle)"}, "op(android.graphics.Path,android.graphics.Path.Op)": {"Returns": [["boolean", "True if operation succeeded, false otherwise and this path remains unmodified."]], "Parameters": [["@B_android#graphics#Path_E@", "Path: The second operand (for difference, the subtrahend) This value must never be null."], ["@B_android#graphics#Path#Op_E@", "Path.Op: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Path#Op_E@", "@B_android#graphics#Path#op_E@"], "Permissions": [], "Description": "Set this path to the result of applying the Op to this path and the specified path. The resulting path will be constructed from non-overlapping contours. The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.", "history": "Added in API level 19", "FullName": "public boolean op (Path path, Path.Op op)"}}, "Inheritance": [], "ClassName": "android.graphics.Path", "ClassDesc": "The Path class encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves. It can be drawn with canvas.drawPath(path, paint), either filled or stroked (based on the paint's Style), or it can be used for clipping or to draw text on a path."}