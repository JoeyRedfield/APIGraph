{"Functions": {"maxBy(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the maximal value"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.", "history": "added in API level 24", "FullName": "public static Collector<T, ?, Optional<T>> maxBy (Comparator<? super T> comparator)"}, "toConcurrentMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to the input elements"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: the mapping function to produce values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toMap_E@", "@B_java#util#stream#Collectors#toConcurrentMap_E@"], "Permissions": [], "Description": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), an IllegalStateException is thrown when the collection operation is performed. If the mapped keys may have duplicates, use @B_java#util#stream#Collectors#toConcurrentMap_E@ instead.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)"}, "groupingByConcurrent(java.util.function.Function<?superT,?extendsK>,java.util.function.Supplier<M>,java.util.stream.Collector<?superT,A,D>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector implementing the cascaded group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a classifier function mapping input elements to keys"], ["@B_java#util#function#Supplier_E@", "Supplier: a function which, when called, produces a new empty ConcurrentMap of the desired type"], ["@B_java#util#stream#Collector_E@", "Collector: a Collector implementing the downstream reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingByConcurrent_E@", "@B_java#util#stream#Collectors#groupingBy_E@"], "Permissions": [], "Description": "Returns a concurrent Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector. The ConcurrentMap produced by the Collector is created with the supplied factory function. This is a @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@ and @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ Collector. The classification function maps elements to some key type K. The downstream collector operates on elements of type T and produces a result of type D. The resulting collector produces a Map<K, D>. For example, to compute the set of last names of people in each city, where the city names are sorted:", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, M> groupingByConcurrent (Function<? super T, ? extends K> classifier, Supplier<M> mapFactory, Collector<? super T, A, D> downstream)"}, "partitioningBy(java.util.function.Predicate<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the partitioning operation"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate used for classifying input elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#partitioningBy_E@"], "Permissions": [], "Description": "Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>. There are no guarantees on the type, mutability, serializability, or thread-safety of the Map returned.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<Boolean, List<T>>> partitioningBy (Predicate<? super T> predicate)"}, "toConcurrentMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: a mapping function to produce values"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a merge function, used to resolve collisions between values associated with the same key, as supplied to @B_java#util#Map#merge_E@"], ["@B_java#util#function#Supplier_E@", "Supplier: a function which returns a new, empty Map into which the results will be inserted"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toConcurrentMap_E@", "@B_java#util#stream#Collectors#toMap_E@"], "Permissions": [], "Description": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), the value mapping function is applied to each equal element, and the results are merged using the provided merging function. The ConcurrentMap is created by a provided supplier function. This is a @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@ and @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ Collector.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, M> toConcurrentMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)"}, "reducing(java.util.function.BinaryOperator<T>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which implements the reduction operation"]], "Parameters": [["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a BinaryOperator<T> used to reduce the input elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#reducing_E@"], "Permissions": [], "Description": "Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator. The result is described as an Optional<T>.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Optional<T>> reducing (BinaryOperator<T> op)"}, "toMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>,java.util.function.BinaryOperator<U>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects elements into a Map whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: a mapping function to produce values"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a merge function, used to resolve collisions between values associated with the same key, as supplied to @B_java#util#Map#merge_E@"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toMap_E@", "@B_java#util#stream#Collectors#toConcurrentMap_E@"], "Permissions": [], "Description": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), the value mapping function is applied to each equal element, and the results are merged using the provided merging function.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<K, U>> toMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)"}, "groupingByConcurrent(java.util.function.Function<?superT,?extendsK>,java.util.stream.Collector<?superT,A,D>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector implementing the cascaded group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a classifier function mapping input elements to keys"], ["@B_java#util#stream#Collector_E@", "Collector: a Collector implementing the downstream reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingBy_E@", "@B_java#util#stream#Collectors#groupingByConcurrent_E@"], "Permissions": [], "Description": "Returns a concurrent Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector. This is a @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@ and @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ Collector. The classification function maps elements to some key type K. The downstream collector operates on elements of type T and produces a result of type D. The resulting collector produces a Map<K, D>. For example, to compute the set of last names of people in each city, where the city names are sorted:", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, ConcurrentMap<K, D>> groupingByConcurrent (Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)"}, "summarizingDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the summary-statistics reduction"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a mapping function to apply to each element"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#summarizingLong_E@", "@B_java#util#stream#Collectors#summarizingInt_E@"], "Permissions": [], "Description": "Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, DoubleSummaryStatistics> summarizingDouble (ToDoubleFunction<? super T> mapper)"}, "summingInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the sum of a integer-valued function applied to the input elements. If no elements are present, the result is 0.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Integer> summingInt (ToIntFunction<? super T> mapper)"}, "groupingByConcurrent(java.util.function.Function<?superT,?extendsK>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector implementing the group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a classifier function mapping input elements to keys"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingBy_E@", "@B_java#util#stream#Collectors#groupingByConcurrent_E@"], "Permissions": [], "Description": "Returns a concurrent Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function. This is a @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@ and @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ Collector. The classification function maps elements to some key type K. The collector produces a ConcurrentMap<K, List<T>> whose keys are the values resulting from applying the classification function to the input elements, and whose corresponding values are Lists containing the input elements which map to the associated key under the classification function. There are no guarantees on the type, mutability, or serializability of the Map or List objects returned, or of the thread-safety of the List objects returned.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, ConcurrentMap<K, List<T>>> groupingByConcurrent (Function<? super T, ? extends K> classifier)"}, "joining(java.lang.CharSequence)": {"Returns": [["@B_java#util#stream#Collector_E@", "A Collector which concatenates CharSequence elements, separated by the specified delimiter, in encounter order"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the delimiter to be used between each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order.", "history": "Added in API level 24", "FullName": "public static Collector<CharSequence, ?, String> joining (CharSequence delimiter)"}, "toConcurrentMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>,java.util.function.BinaryOperator<U>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a concurrent, unordered Collector which collects elements into a ConcurrentMap whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: a mapping function to produce values"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a merge function, used to resolve collisions between values associated with the same key, as supplied to @B_java#util#Map#merge_E@"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toConcurrentMap_E@", "@B_java#util#stream#Collectors#toMap_E@"], "Permissions": [], "Description": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), the value mapping function is applied to each equal element, and the results are merged using the provided merging function.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)"}, "maxBy(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the maximal value"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Optional<T>> maxBy (Comparator<? super T> comparator)"}, "averagingDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements. If no elements are present, the result is 0. The average returned can vary depending upon the order in which values are recorded, due to accumulated rounding error in addition of values of differing magnitudes. Values sorted by increasing absolute magnitude tend to yield more accurate results. If any recorded value is a NaN or the sum is at any point a NaN then the average will be NaN.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Double> averagingDouble (ToDoubleFunction<? super T> mapper)"}, "collectingAndThen(java.util.stream.Collector<T,A,R>,java.util.function.Function<R,RR>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a collector which performs the action of the downstream collector, followed by an additional finishing step"]], "Parameters": [["@B_java#util#stream#Collector_E@", "Collector: a collector"], ["@B_java#util#function#Function_E@", "Function: a function to be applied to the final result of the downstream collector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adapts a Collector to perform an additional finishing transformation. For example, one could adapt the @B_java#util#stream#Collectors#toList_E@ collector to always produce an immutable list with:", "history": "Added in API level 24", "FullName": "public static Collector<T, A, RR> collectingAndThen (Collector<T, A, R> downstream, Function<R, RR> finisher)"}, "joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [["@B_java#util#stream#Collector_E@", "A Collector which concatenates CharSequence elements, separated by the specified delimiter, in encounter order"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the delimiter to be used between each element"], ["@B_java#lang#CharSequence_E@", "CharSequence: the sequence of characters to be used at the beginning of the joined result"], ["@B_java#lang#CharSequence_E@", "CharSequence: the sequence of characters to be used at the end of the joined result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order.", "history": "Added in API level 24", "FullName": "public static Collector<CharSequence, ?, String> joining (CharSequence delimiter, CharSequence prefix, CharSequence suffix)"}, "toMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects elements into a Map whose keys and values are the result of applying mapping functions to the input elements"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: a mapping function to produce values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toMap_E@", "@B_java#util#stream#Collectors#toConcurrentMap_E@"], "Permissions": [], "Description": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), an IllegalStateException is thrown when the collection operation is performed. If the mapped keys may have duplicates, use @B_java#util#stream#Collectors#toMap_E@ instead.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<K, U>> toMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)"}, "groupingBy(java.util.function.Function<?superT,?extendsK>,java.util.stream.Collector<?superT,A,D>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the cascaded group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a classifier function mapping input elements to keys"], ["@B_java#util#stream#Collector_E@", "Collector: a Collector implementing the downstream reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingBy_E@", "@B_java#util#stream#Collectors#groupingByConcurrent_E@"], "Permissions": [], "Description": "Returns a Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector. The classification function maps elements to some key type K. The downstream collector operates on elements of type T and produces a result of type D. The resulting collector produces a Map<K, D>. There are no guarantees on the type, mutability, serializability, or thread-safety of the Map returned. For example, to compute the set of last names of people in each city:", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<K, D>> groupingBy (Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)"}, "mapping(java.util.function.Function<?superT,?extendsU>,java.util.stream.Collector<?superU,A,R>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a collector which applies the mapping function to the input elements and provides the mapped results to the downstream collector"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a function to be applied to the input elements"], ["@B_java#util#stream#Collector_E@", "Collector: a collector which will accept mapped values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, R> mapping (Function<? super T, ? extends U> mapper, Collector<? super U, A, R> downstream)"}, "reducing(U,java.util.function.Function<?superT,?extendsU>,java.util.function.BinaryOperator<U>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the map-reduce operation"]], "Parameters": [["U", "U: the identity value for the reduction (also, the value that is returned when there are no input elements)"], ["@B_java#util#function#Function_E@", "Function: a mapping function to apply to each input value"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a BinaryOperator<U> used to reduce the mapped values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#reducing_E@"], "Permissions": [], "Description": "Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator. This is a generalization of @B_java#util#stream#Collectors#reducing_E@ which allows a transformation of the elements before reduction.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, U> reducing (U identity, Function<? super T, ? extends U> mapper, BinaryOperator<U> op)"}, "partitioningBy(java.util.function.Predicate<?superT>,java.util.stream.Collector<?superT,A,D>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the cascaded partitioning operation"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate used for classifying input elements"], ["@B_java#util#stream#Collector_E@", "Collector: a Collector implementing the downstream reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#partitioningBy_E@"], "Permissions": [], "Description": "Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction. There are no guarantees on the type, mutability, serializability, or thread-safety of the Map returned.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<Boolean, D>> partitioningBy (Predicate<? super T> predicate, Collector<? super T, A, D> downstream)"}, "toCollection(java.util.function.Supplier<C>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects all the input elements into a Collection, in encounter order"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a Supplier which returns a new, empty Collection of the appropriate type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that accumulates the input elements into a new Collection, in encounter order. The Collection is created by the provided factory.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, C> toCollection (Supplier<C> collectionFactory)"}, "summingLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the sum of a long-valued function applied to the input elements. If no elements are present, the result is 0.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Long> summingLong (ToLongFunction<? super T> mapper)"}, "averagingInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements. If no elements are present, the result is 0.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Double> averagingInt (ToIntFunction<? super T> mapper)"}, "groupingBy(java.util.function.Function<?superT,?extendsK>,java.util.function.Supplier<M>,java.util.stream.Collector<?superT,A,D>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the cascaded group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a classifier function mapping input elements to keys"], ["@B_java#util#function#Supplier_E@", "Supplier: a function which, when called, produces a new empty Map of the desired type"], ["@B_java#util#stream#Collector_E@", "Collector: a Collector implementing the downstream reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingBy_E@", "@B_java#util#stream#Collectors#groupingByConcurrent_E@"], "Permissions": [], "Description": "Returns a Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector. The Map produced by the Collector is created with the supplied factory function. The classification function maps elements to some key type K. The downstream collector operates on elements of type T and produces a result of type D. The resulting collector produces a Map<K, D>. For example, to compute the set of last names of people in each city, where the city names are sorted:", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, M> groupingBy (Function<? super T, ? extends K> classifier, Supplier<M> mapFactory, Collector<? super T, A, D> downstream)"}, "averagingLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements. If no elements are present, the result is 0.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Double> averagingLong (ToLongFunction<? super T> mapper)"}, "counting()": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that counts the input elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector accepting elements of type T that counts the number of input elements. If no elements are present, the result is 0.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Long> counting ()"}, "summingDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the sum of a derived property"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a function extracting the property to be summed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the sum of a double-valued function applied to the input elements. If no elements are present, the result is 0. The sum returned can vary depending upon the order in which values are recorded, due to accumulated rounding error in addition of values of differing magnitudes. Values sorted by increasing absolute magnitude tend to yield more accurate results. If any recorded value is a NaN or the sum is at any point a NaN then the sum will be NaN.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Double> summingDouble (ToDoubleFunction<? super T> mapper)"}, "reducing(T, java.util.function.BinaryOperator<T>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which implements the reduction operation"]], "Parameters": [["T", "T: the identity value for the reduction (also, the value that is returned when there are no input elements)"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a BinaryOperator<T> used to reduce the input elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#reducing_E@"], "Permissions": [], "Description": "Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.", "history": "added in API level 24", "FullName": "public static Collector<T, ?, T> reducing (T identity, BinaryOperator<T> op)"}, "minBy(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the minimal value"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Optional<T>> minBy (Comparator<? super T> comparator)"}, "reducing(T,java.util.function.BinaryOperator<T>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which implements the reduction operation"]], "Parameters": [["T", "T: the identity value for the reduction (also, the value that is returned when there are no input elements)"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a BinaryOperator<T> used to reduce the input elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#reducing_E@"], "Permissions": [], "Description": "Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, T> reducing (T identity, BinaryOperator<T> op)"}, "summarizingInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the summary-statistics reduction"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a mapping function to apply to each element"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#summarizingDouble_E@", "@B_java#util#stream#Collectors#summarizingLong_E@"], "Permissions": [], "Description": "Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, IntSummaryStatistics> summarizingInt (ToIntFunction<? super T> mapper)"}, "minBy(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that produces the minimal value"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>.", "history": "added in API level 24", "FullName": "public static Collector<T, ?, Optional<T>> minBy (Comparator<? super T> comparator)"}, "toSet()": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects all the input elements into a Set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that accumulates the input elements into a new Set. There are no guarantees on the type, mutability, serializability, or thread-safety of the Set returned; if more control over the returned Set is required, use @B_java#util#stream#Collectors#toCollection_E@. This is an @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ Collector.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Set<T>> toSet ()"}, "toList()": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects all the input elements into a List, in encounter order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that accumulates the input elements into a new List. There are no guarantees on the type, mutability, serializability, or thread-safety of the List returned; if more control over the returned List is required, use @B_java#util#stream#Collectors#toCollection_E@.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, List<T>> toList ()"}, "toMap(java.util.function.Function<?superT,?extendsK>,java.util.function.Function<?superT,?extendsU>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector which collects elements into a Map whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a mapping function to produce keys"], ["@B_java#util#function#Function_E@", "Function: a mapping function to produce values"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a merge function, used to resolve collisions between values associated with the same key, as supplied to @B_java#util#Map#merge_E@"], ["@B_java#util#function#Supplier_E@", "Supplier: a function which returns a new, empty Map into which the results will be inserted"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#toMap_E@", "@B_java#util#stream#Collectors#toConcurrentMap_E@"], "Permissions": [], "Description": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to @B_java#lang#Object#equals_E@), the value mapping function is applied to each equal element, and the results are merged using the provided merging function. The Map is created by a provided supplier function.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, M> toMap (Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)"}, "groupingBy(java.util.function.Function<?superT,?extendsK>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the group-by operation"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the classifier function mapping input elements to keys"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#groupingBy_E@", "@B_java#util#stream#Collectors#groupingByConcurrent_E@"], "Permissions": [], "Description": "Returns a Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map. The classification function maps elements to some key type K. The collector produces a Map<K, List<T>> whose keys are the values resulting from applying the classification function to the input elements, and whose corresponding values are Lists containing the input elements which map to the associated key under the classification function. There are no guarantees on the type, mutability, serializability, or thread-safety of the Map or List objects returned.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, Map<K, List<T>>> groupingBy (Function<? super T, ? extends K> classifier)"}, "joining()": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector that concatenates the input elements into a String, in encounter order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collector that concatenates the input elements into a String, in encounter order.", "history": "Added in API level 24", "FullName": "public static Collector<CharSequence, ?, String> joining ()"}, "summarizingLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#stream#Collector_E@", "a Collector implementing the summary-statistics reduction"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: the mapping function to apply to each element"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Collectors#summarizingDouble_E@", "@B_java#util#stream#Collectors#summarizingInt_E@"], "Permissions": [], "Description": "Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.", "history": "Added in API level 24", "FullName": "public static Collector<T, ?, LongSummaryStatistics> summarizingLong (ToLongFunction<? super T> mapper)"}}, "Inheritance": [], "ClassName": "java.util.stream.Collectors", "ClassDesc": "Implementations of @B_java#util#stream#Collector_E@ that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc. The following are examples of using the predefined collectors to perform common mutable reduction tasks:"}