{"Functions": {"interrupted()": {"Returns": [["boolean", "true if the current thread has been interrupted; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#isInterrupted_E@"], "Permissions": [], "Description": "Tests whether the current thread has been interrupted. The A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.", "history": "Added in API level 1", "FullName": "public static boolean interrupted ()"}, "dumpStack()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Throwable#printStackTrace_E@"], "Permissions": [], "Description": "Prints a stack trace of the current thread to the standard error stream. This method is used only for debugging.", "history": "Added in API level 1", "FullName": "public static void dumpStack ()"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "This method was originally designed to destroy this thread without any cleanup. Any monitors it held would have remained locked. However, the method was never implemented. If if were to be implemented, it would be deadlock-prone in much the manner of @B_java#lang#Thread#suspend_E@. If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again. If another thread ever attempted to lock this resource, deadlock would result. Such deadlocks typically manifest themselves as \"frozen\" processes. For more information, see Throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void destroy ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalThreadStateException_E@", "if the thread was already started."]], "SeeAlso": ["@B_java#lang#Thread#run_E@", "@B_java#lang#Thread#stop_E@"], "Permissions": [], "Description": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread. The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method). It is never legal to start a thread more than once. In particular, a thread may not be restarted once it has completed execution.", "history": "Added in API level 1", "FullName": "public void start ()"}, "getDefaultUncaughtExceptionHandler()": {"Returns": [["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "the default uncaught exception handler for all threads"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#setDefaultUncaughtExceptionHandler_E@"], "Permissions": [], "Description": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is", "history": "Added in API level 1", "FullName": "public static Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler ()"}, "Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager#getThreadGroup. If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."], ["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group or cannot override the context class loader methods."]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group. If there is a security manager, its @B_java#lang#SecurityManager#checkAccess_E@ method is invoked with the ThreadGroup as its argument. In addition, its checkPermission method is invoked with the RuntimePermission(\"enableContextClassLoaderOverride\") permission when invoked directly or indirectly by the constructor of a subclass which overrides the getContextClassLoader or setContextClassLoader methods. The priority of the newly created thread is set equal to the priority of the thread creating it, that is, the currently running thread. The method The newly created thread is initially marked as being a daemon thread if and only if the thread creating it is currently marked as a daemon thread. The method", "history": "Added in API level 1", "FullName": "public Thread (ThreadGroup group, Runnable target, String name)"}, "setContextClassLoader(java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: the context ClassLoader for this Thread, or null indicating the system class loader (or, failing that, the bootstrap class loader)"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot set the context ClassLoader"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the context ClassLoader for this Thread. The context ClassLoader can be set when a thread is created, and allows the creator of the thread to provide the appropriate class loader, through getContextClassLoader, to code running in the thread when loading classes and resources. If a security manager is present, its @B_java#lang#SecurityManager#checkPermission_E@ method is invoked with a @B_java#lang#RuntimePermission_E@(\"setContextClassLoader\") permission to see if setting the context ClassLoader is permitted.", "history": "Added in API level 1", "FullName": "public void setContextClassLoader (ClassLoader cl)"}, "getId()": {"Returns": [["long", "this thread's ID."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier of this Thread. The thread ID is a positive", "history": "Added in API level 1", "FullName": "public long getId ()"}, "getAllStackTraces()": {"Returns": [["@B_java#util#Map_E@", "a Map from Thread to an array of StackTraceElement that represents the stack trace of the corresponding thread."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow getting the stack trace of thread."]], "SeeAlso": ["@B_java#lang#Thread#getStackTrace_E@", "@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@", "@B_java#lang#Throwable#getStackTrace_E@"], "Permissions": [], "Description": "Returns a map of stack traces for all live threads. The map keys are threads and each map value is an array of @B_java#lang#Thread#getStackTrace_E@ method. The threads may be executing while this method is called. The stack trace of each thread only represents a snapshot and each stack trace may be obtained at different time. A zero-length array will be returned in the map value if the virtual machine has no stack trace information about a thread. If there is a security manager, then the security manager's", "history": "Added in API level 1", "FullName": "public static Map<Thread, StackTraceElement[]> getAllStackTraces ()"}, "isDaemon()": {"Returns": [["boolean", "true if this thread is a daemon thread; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#setDaemon_E@"], "Permissions": [], "Description": "Tests if this thread is a daemon thread.", "history": "Added in API level 1", "FullName": "public final boolean isDaemon ()"}, "Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager#getThreadGroup. If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."], ["@B_java#lang#String_E@", "String: the name of the new thread"], ["long", "long: the desired stack size for the new thread, or zero to indicate that this parameter is to be ignored."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified This constructor is identical to @B_java#lang#Thread#Thread_E@ with the exception of the fact that it allows the thread stack size to be specified. The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread's stack. On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a @B_java#lang#StackOverflowError_E@. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an @B_java#lang#OutOfMemoryError_E@ (or other internal error). The details of the relationship between the value of the The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely). Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor. Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.", "history": "Added in API level 1", "FullName": "public Thread (ThreadGroup group, Runnable target, String name, long stackSize)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "this thread's name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#setName_E@"], "Permissions": [], "Description": "Returns this thread's name.", "history": "Added in API level 1", "FullName": "public final String getName ()"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method was originally designed to force a thread to stop and throw a ThreadDeath as an exception. It was inherently unsafe. Stopping a thread with Thread.stop causes it to unlock all of the monitors that it has locked (as a natural consequence of the unchecked ThreadDeath exception propagating up the stack). If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, potentially resulting in arbitrary behavior. Many uses of stop should be replaced by code that simply modifies some variable to indicate that the target thread should stop running. The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running. If the target thread waits for long periods (on a condition variable, for example), the interrupt method should be used to interrupt the wait. For more information, see Throws UnsupportedOperationException.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void stop ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this thread."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this thread, including the thread's name, priority, and thread group.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getContextClassLoader()": {"Returns": [["@B_java#lang#ClassLoader_E@", "the context ClassLoader for this Thread, or null indicating the system class loader (or, failing that, the bootstrap class loader)"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot get the context ClassLoader"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the context ClassLoader for this Thread. The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources. If not If a security manager is present, and the invoker's class loader is not null and is not the same as or an ancestor of the context class loader, then this method invokes the security manager's @B_java#lang#SecurityManager#checkPermission_E@ method with a @B_java#lang#RuntimePermission_E@(\"getClassLoader\") permission to verify that retrieval of the context class loader is permitted.", "history": "Added in API level 1", "FullName": "public ClassLoader getContextClassLoader ()"}, "getState()": {"Returns": [["@B_java#lang#Thread#State_E@", "this thread's state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public Thread.State getState ()"}, "Thread(java.lang.ThreadGroup,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager#getThreadGroup. If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (group, null, name).", "history": "Added in API level 1", "FullName": "public Thread (ThreadGroup group, String name)"}, "Thread(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this classes run method does nothing."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (null, target, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+", "history": "Added in API level 1", "FullName": "public Thread (Runnable target)"}, "checkAccess()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to access this thread."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkAccess_E@"], "Permissions": [], "Description": "Determines if the currently running thread has permission to modify this thread. If there is a security manager, its checkAccess method is called with this thread as its argument. This may result in throwing a SecurityException.", "history": "Added in API level 1", "FullName": "public final void checkAccess ()"}, "holdsLock(java.lang.Object)": {"Returns": [["boolean", "true if the current thread holds the monitor lock on the specified object."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object on which to test lock ownership"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns This method is designed to allow a program to assert that the current thread already holds a specified lock:", "history": "Added in API level 1", "FullName": "public static boolean holdsLock (Object obj)"}, "countStackFrames()": {"Returns": [["int", "the number of stack frames in this thread."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalThreadStateException_E@", "if this thread is not suspended."]], "SeeAlso": [], "Permissions": [], "Description": "The definition of this call depends on @B_java#lang#Thread#suspend_E@, which is deprecated. Further, the results of this call were never well-defined. Counts the number of stack frames in this thread. The thread must be suspended.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int countStackFrames ()"}, "stop(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: ignored"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method was originally designed to force a thread to stop and throw a given Throwable as an exception. It was inherently unsafe (see @B_java#lang#Thread#stop_E@ for details), and furthermore could be used to generate exceptions that the target thread was not prepared to handle. For more information, see Throws UnsupportedOperationException.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void stop (Throwable obj)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned. Construct a new Thread instead.", "history": "Added in API level 1", "FullName": "protected Object clone ()"}, "Thread()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (null, null, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+", "history": "Added in API level 1", "FullName": "public Thread ()"}, "getStackTrace()": {"Returns": [["@B_java#lang#StackTraceElement_E@", "an array of StackTraceElement, each represents one stack frame."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow getting the stack trace of thread."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@", "@B_java#lang#Throwable#getStackTrace_E@"], "Permissions": [], "Description": "Returns an array of stack trace elements representing the stack dump of this thread. This method will return a zero-length array if this thread has not started, has started but has not yet been scheduled to run by the system, or has terminated. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. If there is a security manager, and this thread is not the current thread, then the security manager's Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method.", "history": "Added in API level 1", "FullName": "public StackTraceElement[] getStackTrace ()"}, "join(long)": {"Returns": [], "Parameters": [["long", "long: the time to wait in milliseconds"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Waits at most millis milliseconds for this thread to die. A timeout of 0 means to wait forever. This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.", "history": "Added in API level 1", "FullName": "public final void join (long millis)"}, "join()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Waits for this thread to die. An invocation of this method behaves in exactly the same way as the invocation", "history": "Added in API level 1", "FullName": "public final void join ()"}, "Thread(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (null, null, name).", "history": "Added in API level 1", "FullName": "public Thread (String name)"}, "setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)": {"Returns": [], "Parameters": [["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "Thread.UncaughtExceptionHandler: the object to use as the default uncaught exception handler. If null then there is no default handler."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager is present and it denies RuntimePermission (\"setDefaultUncaughtExceptionHandler\")"]], "SeeAlso": ["@B_java#lang#Thread#setUncaughtExceptionHandler_E@", "@B_java#lang#Thread#getUncaughtExceptionHandler_E@", "@B_java#lang#ThreadGroup#uncaughtException_E@"], "Permissions": [], "Description": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread. Uncaught exception handling is controlled first by the thread, then by the thread's @B_java#lang#ThreadGroup_E@ object and finally by the default uncaught exception handler. If the thread does not have an explicit uncaught exception handler set, and the thread's thread group (including parent thread groups) does not specialize its By setting the default uncaught exception handler, an application can change the way in which uncaught exceptions are handled (such as logging to a specific device, or file) for those threads that would already accept whatever \"default\" behavior the system provided. Note that the default uncaught exception handler should not usually defer to the thread's", "history": "Added in API level 1", "FullName": "public static void setDefaultUncaughtExceptionHandler (Thread.UncaughtExceptionHandler eh)"}, "sleep(long, int)": {"Returns": [], "Parameters": [["long", "long: the length of time to sleep in milliseconds"], ["int", "int: 0-999999 additional nanoseconds to sleep"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative, or the value of nanos is not in the range 0-999999"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.", "history": "added in API level 1", "FullName": "public static void sleep (long millis, int nanos)"}, "join(long, int)": {"Returns": [], "Parameters": [["long", "long: the time to wait in milliseconds"], ["int", "int: 0-999999 additional nanoseconds to wait"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative, or the value of nanos is not in the range 0-999999"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die. This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.", "history": "added in API level 1", "FullName": "public final void join (long millis, int nanos)"}, "Thread(java.lang.Runnable,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."], ["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (null, target, name).", "history": "Added in API level 1", "FullName": "public Thread (Runnable target, String name)"}, "setDaemon(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, marks this thread as a daemon thread"]], "Throws": [["@B_java#lang#IllegalThreadStateException_E@", "if this thread is alive"], ["@B_java#lang#SecurityException_E@", "if @B_java#lang#Thread#checkAccess_E@ determines that the current thread cannot modify this thread"]], "SeeAlso": [], "Permissions": [], "Description": "Marks this thread as either a This method must be invoked before the thread is started.", "history": "Added in API level 1", "FullName": "public final void setDaemon (boolean on)"}, "sleep(long,int)": {"Returns": [], "Parameters": [["long", "long: the length of time to sleep in milliseconds"], ["int", "int: 0-999999 additional nanoseconds to sleep"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative, or the value of nanos is not in the range 0-999999"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.", "history": "Added in API level 1", "FullName": "public static void sleep (long millis, int nanos)"}, "Thread(java.lang.ThreadGroup,java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager#getThreadGroup. If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (group, target, gname) ,where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+", "history": "Added in API level 1", "FullName": "public Thread (ThreadGroup group, Runnable target)"}, "Thread(java.lang.ThreadGroup, java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager.getThreadGroup(). If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (group, target, gname) ,where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+", "history": "added in API level 1", "FullName": "public Thread (ThreadGroup group, Runnable target)"}, "setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)": {"Returns": [], "Parameters": [["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "Thread.UncaughtExceptionHandler: the object to use as this thread's uncaught exception handler. If null then this thread has no explicit handler."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread is not allowed to modify this thread."]], "SeeAlso": ["@B_java#lang#Thread#setDefaultUncaughtExceptionHandler_E@", "@B_java#lang#ThreadGroup#uncaughtException_E@"], "Permissions": [], "Description": "Set the handler invoked when this thread abruptly terminates due to an uncaught exception. A thread can take full control of how it responds to uncaught exceptions by having its uncaught exception handler explicitly set. If no such handler is set then the thread's", "history": "Added in API level 1", "FullName": "public void setUncaughtExceptionHandler (Thread.UncaughtExceptionHandler eh)"}, "sleep(long)": {"Returns": [], "Parameters": [["long", "long: the length of time to sleep in milliseconds"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.", "history": "Added in API level 1", "FullName": "public static void sleep (long millis)"}, "run()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#start_E@", "@B_java#lang#Thread#stop_E@", "@B_java#lang#Thread#Thread_E@"], "Permissions": [], "Description": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns. Subclasses of Thread should override this method.", "history": "Added in API level 1", "FullName": "public void run ()"}, "Thread(java.lang.ThreadGroup, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#ThreadGroup_E@", "ThreadGroup: the thread group. If null and there is a security manager, the group is determined by SecurityManager.getThreadGroup(). If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread's thread group."], ["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot create a thread in the specified thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (group, null, name).", "history": "added in API level 1", "FullName": "public Thread (ThreadGroup group, String name)"}, "join(long,int)": {"Returns": [], "Parameters": [["long", "long: the time to wait in milliseconds"], ["int", "int: 0-999999 additional nanoseconds to wait"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value of millis is negative, or the value of nanos is not in the range 0-999999"], ["@B_java#lang#InterruptedException_E@", "if any thread has interrupted the current thread. The interrupted status of the current thread is cleared when this exception is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die. This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.", "history": "Added in API level 1", "FullName": "public final void join (long millis, int nanos)"}, "interrupt()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread"]], "SeeAlso": [], "Permissions": [], "Description": "Interrupts this thread. Unless the current thread is interrupting itself, which is always permitted, the @B_java#lang#Thread#checkAccess_E@ method of this thread is invoked, which may cause a @B_java#lang#SecurityException_E@ to be thrown. If this thread is blocked in an invocation of the @B_java#lang#Object#wait_E@, @B_java#lang#Object#wait_E@, or @B_java#lang#Object#wait_E@ methods of the @B_java#lang#Object_E@ class, or of the @B_java#lang#Thread#join_E@, @B_java#lang#Thread#join_E@, @B_java#lang#Thread#join_E@, @B_java#lang#Thread#sleep_E@, or @B_java#lang#Thread#sleep_E@, methods of this class, then its interrupt status will be cleared and it will receive an @B_java#lang#InterruptedException_E@. If this thread is blocked in an I/O operation upon an @B_java#nio#channels#InterruptibleChannel_E@ then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a @B_java#nio#channels#ClosedByInterruptException_E@. If this thread is blocked in a @B_java#nio#channels#Selector_E@ then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's @B_java#nio#channels#Selector#wakeup_E@ method were invoked. If none of the previous conditions hold then this thread's interrupt status will be set. Interrupting a thread that is not alive need not have any effect.", "history": "Added in API level 1", "FullName": "public void interrupt ()"}, "currentThread()": {"Returns": [["@B_java#lang#Thread_E@", "the currently executing thread."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reference to the currently executing thread object.", "history": "Added in API level 1", "FullName": "public static Thread currentThread ()"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "This method exists solely for use with @B_java#lang#Thread#suspend_E@, which has been deprecated because it is deadlock-prone. For more information, see Throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void resume ()"}, "activeCount()": {"Returns": [["int", "an estimate of the number of active threads in the current thread's thread group and in any other thread group that has the current thread's thread group as an ancestor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of active threads in the current thread's The value returned is only an estimate because the number of threads may change dynamically while this method traverses internal data structures, and might be affected by the presence of certain system threads. This method is intended primarily for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public static int activeCount ()"}, "Thread(java.lang.Runnable, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the object whose run method is invoked when this thread is started. If null, this thread's run method is invoked."], ["@B_java#lang#String_E@", "String: the name of the new thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new Thread object. This constructor has the same effect as (null, target, name).", "history": "added in API level 1", "FullName": "public Thread (Runnable target, String name)"}, "yield()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint. Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the @B_java#util#concurrent#locks#package-summary_E@ package.", "history": "Added in API level 1", "FullName": "public static void yield ()"}, "getPriority()": {"Returns": [["int", "this thread's priority."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#setPriority_E@"], "Permissions": [], "Description": "Returns this thread's priority.", "history": "Added in API level 1", "FullName": "public final int getPriority ()"}, "isAlive()": {"Returns": [["boolean", "true if this thread is alive; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this thread is alive. A thread is alive if it has been started and has not yet died.", "history": "Added in API level 1", "FullName": "public final boolean isAlive ()"}, "getThreadGroup()": {"Returns": [["@B_java#lang#ThreadGroup_E@", "this thread's thread group."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thread group to which this thread belongs. This method returns null if this thread has died (been stopped).", "history": "Added in API level 1", "FullName": "public final ThreadGroup getThreadGroup ()"}, "getUncaughtExceptionHandler()": {"Returns": [["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "the uncaught exception handler for this thread"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's", "history": "Added in API level 1", "FullName": "public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler ()"}, "isInterrupted()": {"Returns": [["boolean", "true if this thread has been interrupted; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Thread#interrupted_E@"], "Permissions": [], "Description": "Tests whether this thread has been interrupted. The A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.", "history": "Added in API level 1", "FullName": "public boolean isInterrupted ()"}, "suspend()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "This method was designed to suspend the Thread but it was inherently deadlock-prone. If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed. If the thread that would resume the target thread attempts to lock this monitor prior to calling resume, deadlock results. Such deadlocks typically manifest themselves as \"frozen\" processes. For more information, see Throws @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void suspend ()"}, "setName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new name for this thread."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread."]], "SeeAlso": ["@B_java#lang#Thread#getName_E@", "@B_java#lang#Thread#checkAccess_E@"], "Permissions": [], "Description": "Changes the name of this thread to be equal to the argument name. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException.", "history": "Added in API level 1", "FullName": "public final void setName (String name)"}, "enumerate(java.lang.Thread[])": {"Returns": [["int", "the number of threads put into the array"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: an array into which to put the list of threads"]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_java#lang#ThreadGroup#checkAccess_E@ determines that the current thread cannot access its thread group"]], "SeeAlso": [], "Permissions": [], "Description": "Copies into the specified array every active thread in the current thread's thread group and its subgroups. This method simply invokes the @B_java#lang#ThreadGroup#enumerate_E@ method of the current thread's thread group. An application might use the tarray. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.", "history": "Added in API level 1", "FullName": "public static int enumerate (Thread[] tarray)"}, "setPriority(int)": {"Returns": [], "Parameters": [["int", "int: priority to set this thread to"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the priority is not in the range MIN_PRIORITY to MAX_PRIORITY."], ["@B_java#lang#SecurityException_E@", "if the current thread cannot modify this thread."]], "SeeAlso": ["@B_java#lang#Thread#getPriority_E@", "@B_java#lang#Thread#checkAccess_E@", "@B_java#lang#Thread#getThreadGroup_E@", "@B_java#lang#Thread_E@", "@B_java#lang#ThreadGroup#getMaxPriority_E@"], "Permissions": [], "Description": "Changes the priority of this thread. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException. Otherwise, the priority of this thread is set to the smaller of the specified newPriority and the maximum permitted priority of the thread's thread group.", "history": "Added in API level 1", "FullName": "public final void setPriority (int newPriority)"}}, "Inheritance": [], "ClassName": "java.lang.Thread", "ClassDesc": "A Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon. When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs: The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place. All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method. There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started. For example, a thread that computes primes larger than a stated value could be written as follows: The following code would then create a thread and start it running: The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started. The same example in this other style looks like the following: The following code would then create a thread and start it running: Every thread has a name for identification purposes. More than one thread may have the same name. If a name is not specified when a thread is created, a new name is generated for it. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a @B_java#lang#NullPointerException_E@ to be thrown."}