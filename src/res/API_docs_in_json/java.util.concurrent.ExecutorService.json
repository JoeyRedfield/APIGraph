{"Functions": {"submit(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "Added in API level 1", "FullName": "public abstract Future<T> submit (Runnable task, T result)"}, "invokeAny(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>)": {"Returns": [["T", "the result returned by one of the tasks"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#NullPointerException_E@", "if tasks or any element task subject to execution is null"], ["@B_java#lang#IllegalArgumentException_E@", "if tasks is empty"], ["@B_java#util#concurrent#ExecutionException_E@", "if no task successfully completes"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if tasks cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract T invokeAny (Collection<? extends Callable<T>> tasks)"}, "awaitTermination(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if this executor terminated and false if the timeout elapsed before termination"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.", "history": "Added in API level 1", "FullName": "public abstract boolean awaitTermination (long timeout, TimeUnit unit)"}, "isTerminated()": {"Returns": [["boolean", "true if all tasks have completed following shut down"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if all tasks have completed following shut down. Note that isTerminated is never true unless either shutdown or shutdownNow was called first.", "history": "Added in API level 1", "FullName": "public abstract boolean isTerminated ()"}, "shutdownNow()": {"Returns": [["@B_java#util#List_E@", "list of tasks that never commenced execution"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. This method does not wait for actively executing tasks to terminate. Use @B_java#util#concurrent#ExecutorService#awaitTermination_E@ to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. For example, typical implementations will cancel via @B_java#lang#Thread#interrupt_E@, so any task that fails to respond to interrupts may never terminate.", "history": "Added in API level 1", "FullName": "public abstract List<Runnable> shutdownNow ()"}, "submit(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return null upon successful completion.", "history": "Added in API level 1", "FullName": "public abstract Future<?> submit (Runnable task)"}, "invokeAll(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>)": {"Returns": [["@B_java#util#List_E@", "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting, in which case unfinished tasks are cancelled"], ["@B_java#lang#NullPointerException_E@", "if tasks or any of its elements are null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if any task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning a list of Futures holding their status and results when all complete. @B_java#util#concurrent#Future#isDone_E@ is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks)"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use @B_java#util#concurrent#ExecutorService#awaitTermination_E@ to do that.", "history": "Added in API level 1", "FullName": "public abstract void shutdown ()"}, "submit(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "added in API level 1", "FullName": "public abstract Future<T> submit (Runnable task, T result)"}, "isShutdown()": {"Returns": [["boolean", "true if this executor has been shut down"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executor has been shut down.", "history": "Added in API level 1", "FullName": "public abstract boolean isShutdown ()"}, "invokeAny(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)": {"Returns": [["T", "the result returned by one of the tasks"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#NullPointerException_E@", "if tasks, or unit, or any element task subject to execution is null"], ["@B_java#util#concurrent#TimeoutException_E@", "if the given timeout elapses before any task successfully completes"], ["@B_java#util#concurrent#ExecutionException_E@", "if no task successfully completes"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if tasks cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract T invokeAny (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"}, "invokeAll(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#List_E@", "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting, in which case unfinished tasks are cancelled"], ["@B_java#lang#NullPointerException_E@", "if tasks, any of its elements, or unit are null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if any task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. @B_java#util#concurrent#Future#isDone_E@ is true for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"}, "submit(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's get method will return the task's result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result = exec.submit(aCallable).get(); Note: The @B_java#util#concurrent#Executors_E@ class includes a set of methods that can convert some other common closure-like objects, for example, @B_java#security#PrivilegedAction_E@ to @B_java#util#concurrent#Callable_E@ form so they can be submitted.", "history": "Added in API level 1", "FullName": "public abstract Future<T> submit (Callable<T> task)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ExecutorService", "ClassDesc": "An @B_java#util#concurrent#Executor_E@ that provides methods to manage termination and methods that can produce a @B_java#util#concurrent#Future_E@ for tracking progress of one or more asynchronous tasks. An ExecutorService can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an ExecutorService. The @B_java#util#concurrent#ExecutorService#shutdown_E@ method will allow previously submitted tasks to execute before terminating, while the @B_java#util#concurrent#ExecutorService#shutdownNow_E@ method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused ExecutorService should be shut down to allow reclamation of its resources. Method submit extends base method @B_java#util#concurrent#Executor#execute_E@ by creating and returning a @B_java#util#concurrent#Future_E@ that can be used to cancel execution and/or wait for completion. Methods invokeAny and invokeAll perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete. (Class @B_java#util#concurrent#ExecutorCompletionService_E@ can be used to write customized variants of these methods.) The @B_java#util#concurrent#Executors_E@ class provides factory methods for the executor services provided in this package. @B_java#util#concurrent#Executors#newFixedThreadPool_E@ factory method: ExecutorService in two phases, first by calling shutdown to reject incoming tasks, and then calling shutdownNow, if necessary, to cancel any lingering tasks: Memory consistency effects: Actions in a thread prior to the submission of a Runnable or Callable task to an ExecutorService Future.get()."}