{"Functions": {"willPauseWhenDucked()": {"Returns": [["boolean", "the duck/pause behavior."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the application that would use this AudioFocusRequest would pause when it is requested to duck.", "history": "Added in API level 26", "FullName": "public boolean willPauseWhenDucked ()"}, "getAudioAttributes()": {"Returns": [["@B_android#media#AudioAttributes_E@", "non-null @B_android#media#AudioAttributes_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#media#AudioAttributes_E@ set for this AudioFocusRequest, or the default attributes if none were set.", "history": "Added in API level 26", "FullName": "public AudioAttributes getAudioAttributes ()"}, "getFocusGain()": {"Returns": [["int", "one of @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@, and @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of audio focus request configured for this AudioFocusRequest.", "history": "Added in API level 26", "FullName": "public int getFocusGain ()"}, "acceptsDelayedFocusGain()": {"Returns": [["boolean", "whether delayed focus gain is supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the application that would use this AudioFocusRequest supports a focus gain granted after a temporary request failure.", "history": "Added in API level 26", "FullName": "public boolean acceptsDelayedFocusGain ()"}}, "Inheritance": [], "ClassName": "android.media.AudioFocusRequest", "ClassDesc": "A class to encapsulate information about an audio focus request. An AudioFocusRequest instance is built by @B_android#media#AudioFocusRequest#Builder_E@, and is used to request and abandon audio focus, respectively with @B_android#media#AudioManager#requestAudioFocus_E@ and @B_android#media#AudioManager#abandonAudioFocusRequest_E@. Audio focus is a concept introduced in API 8. It is used to convey the fact that a user can only focus on a single audio stream at a time, e.g. listening to music or a podcast, but not both at the same time. In some cases, multiple audio streams can be playing at the same time, but there is only one the user would really listen to (focus on), while the other plays in the background. An example of this is driving directions being spoken while music plays at a reduced volume (a.k.a. ducking). When an application requests audio focus, it expresses its intention to \u201cown\u201d audio focus to play audio. Let\u2019s review the different types of focus requests, the return value after a request, and the responses to a loss. Note: applications should not play anything until granted focus. There are four focus request types. A successful focus request with each will yield different behaviors by the system and the other application that previously held audio focus. @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@ expresses the fact that your application is now the sole source of audio that the user is listening to. The duration of the audio playback is unknown, and is possibly very long: after the user finishes interacting with your application, (s)he doesn\u2019t expect another audio stream to resume. Examples of uses of this focus gain are for music playback, for a game or a video player. @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_E@ is for a situation when you know your application is temporarily grabbing focus from the current owner, but the user expects playback to go back to where it was once your application no longer requires audio focus. An example is for playing an alarm, or during a VoIP call. The playback is known to be finite: the alarm will time-out or be dismissed, the VoIP call has a beginning and an end. When any of those events ends, and if the user was listening to music when it started, the user expects music to resume, but didn\u2019t wish to listen to both at the same time. @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@: this focus request type is similar to AUDIOFOCUS_GAIN_TRANSIENT for the temporary aspect of the focus request, but it also expresses the fact during the time you own focus, you allow another application to keep playing at a reduced volume, \u201cducked\u201d. Examples are when playing driving directions or notifications, it\u2019s ok for music to keep playing, but not loud enough that it would prevent the directions to be hard to understand. A typical attenuation by the \u201cducked\u201d application is a factor of 0.2f (or -14dB), that can for instance be applied with MediaPlayer.setVolume(0.2f) when using this class for playback. @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_E@ is also for a temporary request, but also expresses that your application expects the device to not play anything else. This is typically used if you are doing audio recording or speech recognition, and don\u2019t want for examples notifications to be played by the system during that time. An AudioFocusRequest instance always contains one of the four types of requests explained above. It is passed when building an AudioFocusRequest instance with its builder in the @B_android#media#AudioFocusRequest#Builder_E@ constructor @B_android#media#AudioFocusRequest#Builder#AudioFocusRequest#Builder_E@, or with @B_android#media#AudioFocusRequest#Builder#setFocusGain_E@ after copying an existing instance with @B_android#media#AudioFocusRequest#Builder#AudioFocusRequest#Builder_E@. Any focus request is qualified by the @B_android#media#AudioAttributes_E@ (see @B_android#media#AudioFocusRequest#Builder#setAudioAttributes_E@) that describe the audio use case that will follow the request (once it's successful or granted). It is recommended to use the same AudioAttributes for the request as the attributes you are using for audio/media playback. If no attributes are set, default attributes of @B_android#media#AudioAttributes#USAGE_MEDIA_E@ are used. Audio focus can be \"locked\" by the system for a number of reasons: during a phone call, when the car to which the device is connected plays an emergency message... To support these situations, the application can request to be notified when its request is fulfilled, by flagging its request as accepting delayed focus, with @B_android#media#AudioFocusRequest#Builder#setAcceptsDelayedFocusGain_E@. If focus is requested while being locked by the system, @B_android#media#AudioManager#requestAudioFocus_E@ will return @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_DELAYED_E@. When focus isn't locked anymore, the focus listener set with @B_android#media#AudioFocusRequest#Builder#setOnAudioFocusChangeListener_E@ or with @B_android#media#AudioFocusRequest#Builder#setOnAudioFocusChangeListener_E@ will be called to notify the application it now owns audio focus. When an application requested audio focus with @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@, the system will duck the current focus owner. Note: this behavior is @B_android#media#AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK_E@. But ducking is not always the behavior expected by the user. A typical example is when the device plays driving directions while the user is listening to an audio book or podcast, and expects the audio playback to pause, instead of duck, as it is hard to understand a navigation prompt and spoken content at the same time. Therefore the system will not automatically duck when it detects it would be ducking spoken content: such content is detected when the AudioAttributes of the player are qualified by @B_android#media#AudioAttributes#CONTENT_TYPE_SPEECH_E@. Refer for instance to @B_android#media#AudioAttributes#Builder#setContentType_E@ and @B_android#media#MediaPlayer#setAudioAttributes_E@ if you are writing a media playback application for audio book, podcasts... Since the system will not automatically duck applications that play speech, it calls their focus listener instead to notify them of @B_android#media#AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK_E@, so they can pause instead. Note that this behavior is independent of the use of AudioFocusRequest, but tied to the use of AudioAttributes. If your application requires pausing instead of ducking for any other reason than playing speech, you can also declare so with @B_android#media#AudioFocusRequest#Builder#setWillPauseWhenDucked_E@, which will cause the system to call your focus listener instead of automatically ducking. The example below covers the following steps to be found in any application that would play audio, and use audio focus. Here we play an audio book, and our application is intended to pause rather than duck when it loses focus. These steps consist in: Creating AudioAttributes to be used for the playback and the focus request. Configuring and creating the AudioFocusRequest instance that defines the intended focus behaviors. Requesting audio focus and checking the return code to see if playback can happen right away, or is delayed. Implementing a focus change listener to respond to focus gains and losses."}