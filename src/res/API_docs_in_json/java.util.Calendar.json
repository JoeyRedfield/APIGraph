{"Functions": {"getCalendarType()": {"Returns": [["@B_java#lang#String_E@", "the LDML-defined calendar type or the class name of this Calendar instance"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#Builder#setLocale_E@", "@B_java#util#Locale#Builder#setUnicodeLocaleKeyword_E@"], "Permissions": [], "Description": "Returns the calendar type of this Calendar. Calendar types are defined by the Unicode Locale Data Markup Language (LDML) specification. The default implementation of this method returns the class name of this Calendar instance. Any subclasses that implement LDML-defined calendar systems should override this method to return appropriate calendar types.", "history": "Added in API level 26", "FullName": "public String getCalendarType ()"}, "getDisplayName(int, int, java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the given field in the given style, or null if no string representation is applicable."]], "Parameters": [["int", "int: the calendar field for which the string representation is returned"], ["int", "int: the style applied to the string representation; one of @B_java#util#Calendar#SHORT_FORMAT_E@ (@B_java#util#Calendar#SHORT_E@), @B_java#util#Calendar#SHORT_STANDALONE_E@, @B_java#util#Calendar#LONG_FORMAT_E@ (@B_java#util#Calendar#LONG_E@), @B_java#util#Calendar#LONG_STANDALONE_E@, @B_java#util#Calendar#NARROW_FORMAT_E@, or @B_java#util#Calendar#NARROW_STANDALONE_E@."], ["@B_java#util#Locale_E@", "Locale: the locale for the string representation (any calendar types specified by locale are ignored)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values"], ["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of the calendar field value in the given style and locale. If no string representation is applicable, null is returned. This method calls @B_java#util#Calendar#get_E@ to get the calendar field value if the string representation is applicable to the given calendar field. For example, if this Calendar is a GregorianCalendar and its date is 2005-01-01, then the string representation of the @B_java#util#Calendar#MONTH_E@ field would be \"January\" in the long style in an English locale or \"Jan\" in the short style. However, no string representation would be available for the @B_java#util#Calendar#DAY_OF_MONTH_E@ field, and this method would return null. The default implementation supports the calendar fields for which a @B_java#text#DateFormatSymbols_E@ has names in the given locale.", "history": "added in API level 9", "FullName": "public String getDisplayName (int field, int style, Locale locale)"}, "getDisplayNames(int, int, java.util.Locale)": {"Returns": [["@B_java#util#Map_E@", "a Map containing all display names in style and locale and their field values, or null if no display names are defined for field"]], "Parameters": [["int", "int: the calendar field for which the display names are returned"], ["int", "int: the style applied to the string representation; one of @B_java#util#Calendar#SHORT_FORMAT_E@ (@B_java#util#Calendar#SHORT_E@), @B_java#util#Calendar#SHORT_STANDALONE_E@, @B_java#util#Calendar#LONG_FORMAT_E@ (@B_java#util#Calendar#LONG_E@), @B_java#util#Calendar#LONG_STANDALONE_E@, @B_java#util#Calendar#NARROW_FORMAT_E@, or @B_java#util#Calendar#NARROW_STANDALONE_E@"], ["@B_java#util#Locale_E@", "Locale: the locale for the display names"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values"], ["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values. For example, if this Calendar is a @B_java#util#GregorianCalendar_E@, the returned map would contain \"Jan\" to @B_java#util#Calendar#JANUARY_E@, \"Feb\" to @B_java#util#Calendar#FEBRUARY_E@, and so on, in the Narrow names may not be unique due to use of single characters, such as \"S\" for Sunday and Saturday. In that case narrow names are not included in the returned Map. The values of other calendar fields may be taken into account to determine a set of display names. For example, if this Calendar is a lunisolar calendar system and the year value given by the @B_java#util#Calendar#YEAR_E@ field has a leap month, this method would return month names containing the leap month name, and month names are mapped to their values specific for the year. The default implementation supports display names contained in a @B_java#text#DateFormatSymbols_E@. For example, if field is @B_java#util#Calendar#MONTH_E@ and style is @B_java#util#Calendar#ALL_STYLES_E@, this method returns a Map containing all strings returned by @B_java#text#DateFormatSymbols#getShortMonths_E@ and @B_java#text#DateFormatSymbols#getMonths_E@.", "history": "added in API level 9", "FullName": "public Map<String, Integer> getDisplayNames (int field, int style, Locale locale)"}, "after(java.lang.Object)": {"Returns": [["boolean", "true if the time of this Calendar is after the time represented by when; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Object to be compared"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#compareTo_E@"], "Permissions": [], "Description": "Returns whether this Calendar represents a time after the time represented by the specified Object. This method is equivalent to: when is a Calendar instance. Otherwise, the method returns false.", "history": "Added in API level 1", "FullName": "public boolean after (Object when)"}, "getWeekYear()": {"Returns": [["int", "the week year of this Calendar"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if any week year numbering isn't supported in this Calendar."]], "SeeAlso": ["@B_java#util#Calendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Returns the week year represented by this Calendar. The week year is in sync with the week cycle. The The default implementation of this method throws an @B_java#lang#UnsupportedOperationException_E@.", "history": "Added in API level 24", "FullName": "public int getWeekYear ()"}, "getTimeInMillis()": {"Returns": [["long", "the current time as UTC milliseconds from the epoch."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getTime_E@", "@B_java#util#Calendar#setTimeInMillis_E@"], "Permissions": [], "Description": "Returns this Calendar's time value in milliseconds.", "history": "Added in API level 1", "FullName": "public long getTimeInMillis ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is equal to obj; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Calendar to the specified Object. The result is true if and only if the argument is a Calendar object of the same calendar system that represents the same time value (millisecond offset from the Calendar parameters as this object. The Calendar parameters are the values represented by the isLenient, getFirstDayOfWeek, getMinimalDaysInFirstWeek and getTimeZone methods. If there is any difference in those parameters between the two Calendars, this method returns false. Use the @B_java#util#Calendar#compareTo_E@ method to compare only the time values.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "Calendar(java.util.TimeZone, java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a calendar with the specified time zone and locale.", "history": "added in API level 1", "FullName": "protected Calendar (TimeZone zone, Locale aLocale)"}, "set(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field."], ["int", "int: the value used to set the MINUTE calendar field."], ["int", "int: the value used to set the SECOND calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND. Previous values of other fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "added in API level 1", "FullName": "public final void set (int year, int month, int date, int hourOfDay, int minute, int second)"}, "setTimeInMillis(long)": {"Returns": [], "Parameters": [["long", "long: the new time in UTC milliseconds from the epoch."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setTime_E@", "@B_java#util#Calendar#getTimeInMillis_E@"], "Permissions": [], "Description": "Sets this Calendar's current time from the given long value.", "history": "Added in API level 1", "FullName": "public void setTimeInMillis (long millis)"}, "internalGet(int)": {"Returns": [["int", "the value for the given calendar field."]], "Parameters": [["int", "int: the given calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#get_E@"], "Permissions": [], "Description": "Returns the value of the given calendar field. This method does not involve normalization or validation of the field value.", "history": "Added in API level 1", "FullName": "protected final int internalGet (int field)"}, "getGreatestMinimum(int)": {"Returns": [["int", "the highest minimum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimum_E@", "@B_java#util#Calendar#getMaximum_E@", "@B_java#util#Calendar#getLeastMaximum_E@", "@B_java#util#Calendar#getActualMinimum_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the highest minimum value for the given calendar field of this Calendar instance. The highest minimum value is defined as the largest value returned by @B_java#util#Calendar#getActualMinimum_E@ for any possible time value. The greatest minimum value depends on calendar system specific parameters of the instance.", "history": "Added in API level 1", "FullName": "public abstract int getGreatestMinimum (int field)"}, "toInstant()": {"Returns": [["@B_java#time#Instant_E@", "the instant representing the same point on the time-line"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this object to an @B_java#time#Instant_E@. The conversion creates an Instant that represents the same point on the time-line as this Calendar.", "history": "Added in API level 26", "FullName": "public final Instant toInstant ()"}, "getMaximum(int)": {"Returns": [["int", "the maximum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimum_E@", "@B_java#util#Calendar#getGreatestMinimum_E@", "@B_java#util#Calendar#getLeastMaximum_E@", "@B_java#util#Calendar#getActualMinimum_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the maximum value for the given calendar field of this Calendar instance. The maximum value is defined as the largest value returned by the @B_java#util#Calendar#get_E@ method for any possible time value. The maximum value depends on calendar system specific parameters of the instance.", "history": "Added in API level 1", "FullName": "public abstract int getMaximum (int field)"}, "getMinimalDaysInFirstWeek()": {"Returns": [["int", "the minimal days required in the first week of the year."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1. If the minimal days required must be a full week, this method returns 7.", "history": "Added in API level 1", "FullName": "public int getMinimalDaysInFirstWeek ()"}, "set(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH. Previous values of other calendar fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "added in API level 1", "FullName": "public final void set (int year, int month, int date)"}, "roll(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["boolean", "boolean: indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. For example, to roll the current date up by one day, you can achieve it by calling: roll(Calendar.DATE, true). When rolling on the year or Calendar.YEAR field, it will roll the year value in the range between 1 and the value returned by calling getMaximum(Calendar.YEAR). When rolling on the month or Calendar.MONTH field, other fields like date might conflict and, need to be changed. For instance, rolling the month on the date 01/31/96 will result in 02/29/96. When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will roll the hour value in the range between 0 and 23, which is zero-based.", "history": "Added in API level 1", "FullName": "public abstract void roll (int field, boolean up)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this calendar.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getMinimum(int)": {"Returns": [["int", "the minimum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMaximum_E@", "@B_java#util#Calendar#getGreatestMinimum_E@", "@B_java#util#Calendar#getLeastMaximum_E@", "@B_java#util#Calendar#getActualMinimum_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the minimum value for the given calendar field of this Calendar instance. The minimum value is defined as the smallest value returned by the @B_java#util#Calendar#get_E@ method for any possible time value. The minimum value depends on calendar system specific parameters of the instance.", "history": "Added in API level 1", "FullName": "public abstract int getMinimum (int field)"}, "roll(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the signed amount to add to the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#roll_E@", "@B_java#util#Calendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds the specified (signed) amount to the specified calendar field without changing larger fields. A negative amount means to roll down. NOTE: This default implementation on Calendar just repeatedly calls the version of @B_java#util#Calendar#roll_E@ that rolls by one unit. This may not always do the right thing. For example, if the DAY_OF_MONTH field is 31, rolling through February will leave it set to 28. The GregorianCalendar version of this function takes care of this problem. Other subclasses should also provide overrides of this function that do the right thing.", "history": "Added in API level 1", "FullName": "public void roll (int field, int amount)"}, "getDisplayNames(int,int,java.util.Locale)": {"Returns": [["@B_java#util#Map_E@", "a Map containing all display names in style and locale and their field values, or null if no display names are defined for field"]], "Parameters": [["int", "int: the calendar field for which the display names are returned"], ["int", "int: the style applied to the string representation; one of @B_java#util#Calendar#SHORT_FORMAT_E@ (@B_java#util#Calendar#SHORT_E@), @B_java#util#Calendar#SHORT_STANDALONE_E@, @B_java#util#Calendar#LONG_FORMAT_E@ (@B_java#util#Calendar#LONG_E@), @B_java#util#Calendar#LONG_STANDALONE_E@, @B_java#util#Calendar#NARROW_FORMAT_E@, or @B_java#util#Calendar#NARROW_STANDALONE_E@"], ["@B_java#util#Locale_E@", "Locale: the locale for the display names"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values"], ["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values. For example, if this Calendar is a @B_java#util#GregorianCalendar_E@, the returned map would contain \"Jan\" to @B_java#util#Calendar#JANUARY_E@, \"Feb\" to @B_java#util#Calendar#FEBRUARY_E@, and so on, in the Narrow names may not be unique due to use of single characters, such as \"S\" for Sunday and Saturday. In that case narrow names are not included in the returned Map. The values of other calendar fields may be taken into account to determine a set of display names. For example, if this Calendar is a lunisolar calendar system and the year value given by the @B_java#util#Calendar#YEAR_E@ field has a leap month, this method would return month names containing the leap month name, and month names are mapped to their values specific for the year. The default implementation supports display names contained in a @B_java#text#DateFormatSymbols_E@. For example, if field is @B_java#util#Calendar#MONTH_E@ and style is @B_java#util#Calendar#ALL_STYLES_E@, this method returns a Map containing all strings returned by @B_java#text#DateFormatSymbols#getShortMonths_E@ and @B_java#text#DateFormatSymbols#getMonths_E@.", "history": "Added in API level 9", "FullName": "public Map<String, Integer> getDisplayNames (int field, int style, Locale locale)"}, "complete()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fills in any unset fields in the calendar fields. First, the @B_java#util#Calendar#computeTime_E@ method is called if the time value (millisecond offset from the @B_java#util#Calendar#computeFields_E@ method is called to calculate all calendar field values.", "history": "Added in API level 1", "FullName": "protected void complete ()"}, "isSet(int)": {"Returns": [["boolean", "true if the given calendar field has a value set; false otherwise."]], "Parameters": [["int", "int: the calendar field to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.", "history": "Added in API level 1", "FullName": "public final boolean isSet (int field)"}, "computeFields()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#computeTime_E@"], "Permissions": [], "Description": "Converts the current millisecond time value @B_java#util#Calendar#time_E@ to calendar field values in @B_java#util#Calendar#fields_E@. This allows you to sync up the calendar field values with a new time that is set for the calendar. The time is not recomputed first; to recompute the time, then the fields, call the @B_java#util#Calendar#complete_E@ method.", "history": "Added in API level 1", "FullName": "protected abstract void computeFields ()"}, "getTimeZone()": {"Returns": [["@B_java#util#TimeZone_E@", "the time zone object associated with this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time zone.", "history": "Added in API level 1", "FullName": "public TimeZone getTimeZone ()"}, "roll(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["boolean", "boolean: indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. For example, to roll the current date up by one day, you can achieve it by calling: roll(Calendar.DATE, true). When rolling on the year or Calendar.YEAR field, it will roll the year value in the range between 1 and the value returned by calling getMaximum(Calendar.YEAR). When rolling on the month or Calendar.MONTH field, other fields like date might conflict and, need to be changed. For instance, rolling the month on the date 01/31/96 will result in 02/29/96. When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will roll the hour value in the range between 0 and 23, which is zero-based.", "history": "added in API level 1", "FullName": "public abstract void roll (int field, boolean up)"}, "set(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field."], ["int", "int: the value used to set the MINUTE calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE. Previous values of other fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "Added in API level 1", "FullName": "public final void set (int year, int month, int date, int hourOfDay, int minute)"}, "set(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field."], ["int", "int: the value used to set the MINUTE calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE. Previous values of other fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "added in API level 1", "FullName": "public final void set (int year, int month, int date, int hourOfDay, int minute)"}, "set(int, int)": {"Returns": [], "Parameters": [["int", "int: the given calendar field."], ["int", "int: the value to be set for the given calendar field."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the specified field is out of range (field < 0 || field >= FIELD_COUNT). in non-lenient mode."]], "SeeAlso": ["@B_java#util#Calendar#set_E@", "@B_java#util#Calendar#get_E@"], "Permissions": [], "Description": "Sets the given calendar field to the given value. The value is not interpreted by this method regardless of the leniency mode.", "history": "added in API level 1", "FullName": "public void set (int field, int value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation of this calendar. This method is intended to be used only for debugging purposes, and the format of the returned string may vary between implementations. The returned string may be empty but may not be null.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "get(int)": {"Returns": [["int", "the value for the given calendar field."]], "Parameters": [["int", "int: the given calendar field."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the specified field is out of range (field < 0 || field >= FIELD_COUNT)."]], "SeeAlso": ["@B_java#util#Calendar#set_E@", "@B_java#util#Calendar#complete_E@"], "Permissions": [], "Description": "Returns the value of the given calendar field. In lenient mode, all calendar fields are normalized. In non-lenient mode, all calendar fields are validated and this method throws an exception if any calendar fields have out-of-range values. The normalization and validation are handled by the @B_java#util#Calendar#complete_E@ method, which process is calendar system dependent.", "history": "Added in API level 1", "FullName": "public int get (int field)"}, "Calendar(java.util.TimeZone,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a calendar with the specified time zone and locale.", "history": "Added in API level 1", "FullName": "protected Calendar (TimeZone zone, Locale aLocale)"}, "getActualMaximum(int)": {"Returns": [["int", "the maximum of the given calendar field for the time value of this Calendar"]], "Parameters": [["int", "int: the calendar field"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimum_E@", "@B_java#util#Calendar#getMaximum_E@", "@B_java#util#Calendar#getGreatestMinimum_E@", "@B_java#util#Calendar#getLeastMaximum_E@", "@B_java#util#Calendar#getActualMinimum_E@"], "Permissions": [], "Description": "Returns the maximum value that the specified calendar field could have, given the time value of this Calendar. For example, the actual maximum value of the MONTH field is 12 in some years, and 13 in other years in the Hebrew calendar system. The default implementation of this method uses an iterative algorithm to determine the actual maximum value for the calendar field. Subclasses should, if possible, override this with a more efficient implementation.", "history": "Added in API level 1", "FullName": "public int getActualMaximum (int field)"}, "getInstance(java.util.Locale)": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a calendar using the default time zone and specified locale. The Calendar returned is based on the current time in the default time zone with the given locale.", "history": "Added in API level 1", "FullName": "public static Calendar getInstance (Locale aLocale)"}, "clear(int)": {"Returns": [], "Parameters": [["int", "int: the calendar field to be cleared."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#clear_E@"], "Permissions": [], "Description": "Sets the given calendar field value and the time value (millisecond offset from the Calendar undefined. This means that @B_java#util#Calendar#isSet_E@ will return false, and the date and time calculations will treat the field as if it had never been set. A Calendar implementation class may use the field's specific default value for date and time calculations. The @B_java#util#Calendar#HOUR_OF_DAY_E@, @B_java#util#Calendar#HOUR_E@ and @B_java#util#Calendar#AM_PM_E@ fields are handled independently and the Calendar. Use @B_java#util#Calendar#set_E@ to reset the hour value.", "history": "Added in API level 1", "FullName": "public final void clear (int field)"}, "set(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field."], ["int", "int: the value used to set the MINUTE calendar field."], ["int", "int: the value used to set the SECOND calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND. Previous values of other fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "Added in API level 1", "FullName": "public final void set (int year, int month, int date, int hourOfDay, int minute, int second)"}, "before(java.lang.Object)": {"Returns": [["boolean", "true if the time of this Calendar is before the time represented by when; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Object to be compared"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#compareTo_E@"], "Permissions": [], "Description": "Returns whether this Calendar represents a time before the time represented by the specified Object. This method is equivalent to: when is a Calendar instance. Otherwise, the method returns false.", "history": "Added in API level 1", "FullName": "public boolean before (Object when)"}, "setFirstDayOfWeek(int)": {"Returns": [], "Parameters": [["int", "int: the given first day of the week."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.", "history": "Added in API level 1", "FullName": "public void setFirstDayOfWeek (int value)"}, "setTime(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the given Date."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getTime_E@", "@B_java#util#Calendar#setTimeInMillis_E@"], "Permissions": [], "Description": "Sets this Calendar's time with the given Date. Note: Calling setTime() with Date(Long.MAX_VALUE) or Date(Long.MIN_VALUE) may yield incorrect field values from get().", "history": "Added in API level 1", "FullName": "public final void setTime (Date date)"}, "setWeekDate(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the given date specifiers is invalid or any of the calendar fields are inconsistent with the given date specifiers in non-lenient mode"], ["@B_java#lang#UnsupportedOperationException_E@", "if any week year numbering isn't supported in this Calendar."]], "SeeAlso": ["@B_java#util#Calendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets the date of this Calendar with the the given date specifiers - week year, week of year, and day of week. Unlike the set method, all of the calendar fields and time values are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode. The default implementation of this method throws an UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public void setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "isLenient()": {"Returns": [["boolean", "true if the interpretation mode of this calendar is lenient; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setLenient_E@"], "Permissions": [], "Description": "Tells whether date/time interpretation is to be lenient.", "history": "Added in API level 1", "FullName": "public boolean isLenient ()"}, "roll(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the signed amount to add to the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#roll_E@", "@B_java#util#Calendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds the specified (signed) amount to the specified calendar field without changing larger fields. A negative amount means to roll down. NOTE: This default implementation on Calendar just repeatedly calls the version of @B_java#util#Calendar#roll_E@ that rolls by one unit. This may not always do the right thing. For example, if the DAY_OF_MONTH field is 31, rolling through February will leave it set to 28. The GregorianCalendar version of this function takes care of this problem. Other subclasses should also provide overrides of this function that do the right thing.", "history": "added in API level 1", "FullName": "public void roll (int field, int amount)"}, "getInstance(java.util.TimeZone)": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the time zone to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a calendar using the specified time zone and default locale. The Calendar returned is based on the current time in the given time zone with the default @B_java#util#Locale#Category#FORMAT_E@ locale.", "history": "Added in API level 1", "FullName": "public static Calendar getInstance (TimeZone zone)"}, "Calendar()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#getDefault_E@"], "Permissions": [], "Description": "Constructs a Calendar with the default time zone and the default @B_java#util#Locale#Category#FORMAT_E@ locale.", "history": "Added in API level 1", "FullName": "protected Calendar ()"}, "setTimeZone(java.util.TimeZone)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone with the given time zone value.", "history": "Added in API level 1", "FullName": "public void setTimeZone (TimeZone value)"}, "getInstance(java.util.TimeZone, java.util.Locale)": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a calendar with the specified time zone and locale. The Calendar returned is based on the current time in the given time zone with the given locale.", "history": "added in API level 1", "FullName": "public static Calendar getInstance (TimeZone zone, Locale aLocale)"}, "getActualMinimum(int)": {"Returns": [["int", "the minimum of the given calendar field for the time value of this Calendar"]], "Parameters": [["int", "int: the calendar field"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimum_E@", "@B_java#util#Calendar#getMaximum_E@", "@B_java#util#Calendar#getGreatestMinimum_E@", "@B_java#util#Calendar#getLeastMaximum_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the minimum value that the specified calendar field could have, given the time value of this Calendar. The default implementation of this method uses an iterative algorithm to determine the actual minimum value for the calendar field. Subclasses should, if possible, override this with a more efficient implementation - in many cases, they can simply return getMinimum().", "history": "Added in API level 1", "FullName": "public int getActualMinimum (int field)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#clear_E@"], "Permissions": [], "Description": "Sets all the calendar field values and the time value (millisecond offset from the Calendar undefined. This means that @B_java#util#Calendar#isSet_E@ will return false for all the calendar fields, and the date and time calculations will treat the fields as if they had never been set. A Calendar implementation class may use its specific default field values for date/time calculations. For example, GregorianCalendar uses 1970 if the YEAR field value is undefined.", "history": "Added in API level 1", "FullName": "public final void clear ()"}, "set(int,int)": {"Returns": [], "Parameters": [["int", "int: the given calendar field."], ["int", "int: the value to be set for the given calendar field."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the specified field is out of range (field < 0 || field >= FIELD_COUNT). in non-lenient mode."]], "SeeAlso": ["@B_java#util#Calendar#set_E@", "@B_java#util#Calendar#get_E@"], "Permissions": [], "Description": "Sets the given calendar field to the given value. The value is not interpreted by this method regardless of the leniency mode.", "history": "Added in API level 1", "FullName": "public void set (int field, int value)"}, "getFirstDayOfWeek()": {"Returns": [["int", "the first day of the week."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.", "history": "Added in API level 1", "FullName": "public int getFirstDayOfWeek ()"}, "compareTo(java.util.Calendar)": {"Returns": [["int", "the value 0 if the time represented by the argument is equal to the time represented by this Calendar; a value less than 0 if the time of this Calendar is before the time represented by the argument; and a value greater than 0 if the time of this Calendar is after the time represented by the argument."]], "Parameters": [["@B_java#util#Calendar_E@", "Calendar: the Calendar to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified Calendar is null."], ["@B_java#lang#IllegalArgumentException_E@", "if the time value of the specified Calendar object can't be obtained due to any invalid calendar values."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the time values (millisecond offsets from the Calendar objects.", "history": "Added in API level 1", "FullName": "public int compareTo (Calendar anotherCalendar)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a copy of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getLeastMaximum(int)": {"Returns": [["int", "the lowest maximum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimum_E@", "@B_java#util#Calendar#getMaximum_E@", "@B_java#util#Calendar#getGreatestMinimum_E@", "@B_java#util#Calendar#getActualMinimum_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the lowest maximum value for the given calendar field of this Calendar instance. The lowest maximum value is defined as the smallest value returned by @B_java#util#Calendar#getActualMaximum_E@ for any possible time value. The least maximum value depends on calendar system specific parameters of the instance. For example, a Calendar for the Gregorian calendar system returns 28 for the DAY_OF_MONTH field, because the 28th is the last day of the shortest month of this calendar, February in a common year.", "history": "Added in API level 1", "FullName": "public abstract int getLeastMaximum (int field)"}, "getAvailableCalendarTypes()": {"Returns": [["@B_java#util#Set_E@", "an unmodifiable Set containing all available calendar types"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getCalendarType_E@", "@B_java#util#Calendar#Builder#setCalendarType_E@", "@B_java#util#Locale#getUnicodeLocaleType_E@"], "Permissions": [], "Description": "Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment. The available calendar types can be used for the Set returned contains at least \"gregory\". The calendar types don't include aliases, such as \"gregorian\" for \"gregory\".", "history": "Added in API level 26", "FullName": "public static Set<String> getAvailableCalendarTypes ()"}, "setMinimalDaysInFirstWeek(int)": {"Returns": [], "Parameters": [["int", "int: the given minimal days required in the first week of the year."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1. If it must be a full week, use value 7.", "history": "Added in API level 1", "FullName": "public void setMinimalDaysInFirstWeek (int value)"}, "getInstance()": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a calendar using the default time zone and locale. The Calendar returned is based on the current time in the default time zone with the default @B_java#util#Locale#Category#FORMAT_E@ locale.", "history": "Added in API level 1", "FullName": "public static Calendar getInstance ()"}, "getDisplayName(int,int,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the given field in the given style, or null if no string representation is applicable."]], "Parameters": [["int", "int: the calendar field for which the string representation is returned"], ["int", "int: the style applied to the string representation; one of @B_java#util#Calendar#SHORT_FORMAT_E@ (@B_java#util#Calendar#SHORT_E@), @B_java#util#Calendar#SHORT_STANDALONE_E@, @B_java#util#Calendar#LONG_FORMAT_E@ (@B_java#util#Calendar#LONG_E@), @B_java#util#Calendar#LONG_STANDALONE_E@, @B_java#util#Calendar#NARROW_FORMAT_E@, or @B_java#util#Calendar#NARROW_STANDALONE_E@."], ["@B_java#util#Locale_E@", "Locale: the locale for the string representation (any calendar types specified by locale are ignored)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field or style is invalid, or if this Calendar is non-lenient and any of the calendar fields have invalid values"], ["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of the calendar field value in the given style and locale. If no string representation is applicable, null is returned. This method calls @B_java#util#Calendar#get_E@ to get the calendar field value if the string representation is applicable to the given calendar field. For example, if this Calendar is a GregorianCalendar and its date is 2005-01-01, then the string representation of the @B_java#util#Calendar#MONTH_E@ field would be \"January\" in the long style in an English locale or \"Jan\" in the short style. However, no string representation would be available for the @B_java#util#Calendar#DAY_OF_MONTH_E@ field, and this method would return null. The default implementation supports the calendar fields for which a @B_java#text#DateFormatSymbols_E@ has names in the given locale.", "history": "Added in API level 9", "FullName": "public String getDisplayName (int field, int style, Locale locale)"}, "isWeekDateSupported()": {"Returns": [["boolean", "true if this Calendar supports week dates; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#getWeekYear_E@", "@B_java#util#Calendar#setWeekDate_E@", "@B_java#util#Calendar#getWeeksInWeekYear_E@"], "Permissions": [], "Description": "Returns whether this Calendar supports week dates. The default implementation of this method returns false.", "history": "Added in API level 24", "FullName": "public boolean isWeekDateSupported ()"}, "add(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the amount of date or time to be added to the field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#roll_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules. For example, to subtract 5 days from the current time of the calendar, you can achieve it by calling: add(Calendar.DAY_OF_MONTH, -5).", "history": "Added in API level 1", "FullName": "public abstract void add (int field, int amount)"}, "setLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the lenient mode is to be turned on; false if it is to be turned off."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#isLenient_E@", "@B_java#text#DateFormat#setLenient_E@"], "Permissions": [], "Description": "Specifies whether or not date/time interpretation is to be lenient. With lenient interpretation, a date such as \"February 942, 1996\" will be treated as being equivalent to the 941st day after February 1, 1996. With strict (non-lenient) interpretation, such dates will cause an exception to be thrown. The default is lenient.", "history": "Added in API level 1", "FullName": "public void setLenient (boolean lenient)"}, "getInstance(java.util.TimeZone,java.util.Locale)": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar."]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the time zone to use"], ["@B_java#util#Locale_E@", "Locale: the locale for the week data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a calendar with the specified time zone and locale. The Calendar returned is based on the current time in the given time zone with the given locale.", "history": "Added in API level 1", "FullName": "public static Calendar getInstance (TimeZone zone, Locale aLocale)"}, "getTime()": {"Returns": [["@B_java#util#Date_E@", "a Date representing the time value."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setTime_E@", "@B_java#util#Calendar#getTimeInMillis_E@"], "Permissions": [], "Description": "Returns a Date object representing this Calendar's time value (millisecond offset from the", "history": "Added in API level 1", "FullName": "public final Date getTime ()"}, "set(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field."], ["int", "int: the value used to set the MONTH calendar field. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH. Previous values of other calendar fields are retained. If this is not desired, call @B_java#util#Calendar#clear_E@ first.", "history": "Added in API level 1", "FullName": "public final void set (int year, int month, int date)"}, "computeTime()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#complete_E@", "@B_java#util#Calendar#computeFields_E@"], "Permissions": [], "Description": "Converts the current calendar field values in @B_java#util#Calendar#fields_E@ to the millisecond time value @B_java#util#Calendar#time_E@.", "history": "Added in API level 1", "FullName": "protected abstract void computeTime ()"}, "add(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the amount of date or time to be added to the field."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#roll_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules. For example, to subtract 5 days from the current time of the calendar, you can achieve it by calling: add(Calendar.DAY_OF_MONTH, -5).", "history": "added in API level 1", "FullName": "public abstract void add (int field, int amount)"}, "setWeekDate(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the given date specifiers is invalid or any of the calendar fields are inconsistent with the given date specifiers in non-lenient mode"], ["@B_java#lang#UnsupportedOperationException_E@", "if any week year numbering isn't supported in this Calendar."]], "SeeAlso": ["@B_java#util#Calendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets the date of this Calendar with the the given date specifiers - week year, week of year, and day of week. Unlike the set method, all of the calendar fields and time values are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode. The default implementation of this method throws an UnsupportedOperationException.", "history": "added in API level 24", "FullName": "public void setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "getWeeksInWeekYear()": {"Returns": [["int", "the number of weeks in the week year."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if any week year numbering isn't supported in this Calendar."]], "SeeAlso": ["@B_java#util#Calendar_E@", "@B_java#util#Calendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getWeekYear_E@", "@B_java#util#Calendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the number of weeks in the week year represented by this Calendar. The default implementation of this method throws an UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public int getWeeksInWeekYear ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of locales for which localized Calendar instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. The array returned must contain at least a Locale instance equal to @B_java#util#Locale#US_E@.", "history": "Added in API level 1", "FullName": "public static Locale[] getAvailableLocales ()"}}, "Inheritance": [], "ClassName": "java.util.Calendar", "ClassDesc": "The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of @B_java#util#Calendar#fields_E@ such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week. An instant in time can be represented by a millisecond value that is an offset from the The class also provides additional fields and methods for implementing a concrete calendar system outside the package. Those fields and methods are defined as protected. Like other locale-sensitive classes, Calendar provides a class method, getInstance, for getting a generally useful object of this type. Calendar's getInstance method returns a Calendar object whose calendar fields have been initialized with the current date and time: A Calendar object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). Calendar defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value MONTH == JANUARY for all calendars. Other values are defined by the concrete subclass, such as ERA. See individual field documentation and subclass documentation for details. The calendar field values can be set by calling the set methods. Any field values set in a Calendar will not be interpreted until it needs to calculate its time value (milliseconds from the Epoch) or values of the calendar fields. Calling the get, getTimeInMillis, getTime, add and roll involves such calculation. Calendar has two modes for interpreting the calendar fields, lenient and non-lenient. When a Calendar is in lenient mode, it accepts a wider range of calendar field values than it produces. When a Calendar recomputes calendar field values for return by get(), all of the calendar fields are normalized. For example, a lenient GregorianCalendar interprets MONTH == JANUARY, DAY_OF_MONTH == 32 as February 1. When a Calendar is in non-lenient mode, it throws an exception if there is any inconsistency in its calendar fields. For example, a GregorianCalendar always produces DAY_OF_MONTH values between 1 and the length of the month. A non-lenient GregorianCalendar throws an exception upon calculating its time or calendar field values if any out-of-range field value has been set. Calendar defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data when a Calendar is constructed. They may also be specified explicitly through the methods for setting their values. When setting or getting the WEEK_OF_MONTH or WEEK_OF_YEAR fields, Calendar must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on getFirstDayOfWeek() and containing at least getMinimalDaysInFirstWeek() days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by get() may be different. For example, a specific Calendar subclass may designate the week before week 1 of a year as week n of the previous year. Calendar will resolve calendar field values to determine the date and time in the following way. If there are any calendar fields whose values haven't been set in the selected field combination, Calendar uses their default values. The default value of each field may vary by concrete calendar systems. For example, in GregorianCalendar, the default of a field is the same as that of the start of the Epoch: i.e., YEAR = 1970, MONTH = JANUARY, DAY_OF_MONTH = 1, etc. The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use @B_java#text#DateFormat_E@ to format dates. set(), add(), and roll(). f to value. In addition, it sets an internal member variable to indicate that calendar field f has been changed. Although calendar field f is changed immediately, the calendar's time value in milliseconds is not recomputed until the next call to get(), getTime(), getTimeInMillis(), add(), or roll() is made. Thus, multiple calls to set() do not trigger multiple, unnecessary computations. As a result of changing a calendar field using set(), other calendar fields may also change, depending on the calendar field, the calendar field value, and the calendar system. In addition, get(f) will not necessarily return value set by the call to the set method after the calendar fields have been recomputed. The specifics are determined by the concrete calendar class. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling set(Calendar.MONTH, Calendar.SEPTEMBER) sets the date to September 31, 1999. This is a temporary internal representation that resolves to October 1, 1999 if getTime()is then called. However, a call to set(Calendar.DAY_OF_MONTH, 30) before the call to getTime() sets the date to September 30, 1999, since no recomputation occurs after set() itself. delta to field f. This is equivalent to calling set(f, get(f) + delta) with two adjustments: In addition, unlike set(), add() forces an immediate recomputation of the calendar's milliseconds and all fields. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling add(Calendar.MONTH, 13) sets the calendar to September 30, 2000. MONTH field to September, since adding 13 months to August gives September of the next year. Since DAY_OF_MONTH cannot be 31 in September in a GregorianCalendar, DAY_OF_MONTH to 30, the closest possible value. Although it is a smaller field, DAY_OF_WEEK is not adjusted by rule 2, since it is expected to change when the month changes in a GregorianCalendar. delta to field f without changing larger fields. This is equivalent to calling add(f, delta) with the following adjustment: Example: See @B_java#util#GregorianCalendar#roll_E@. add() and roll(), consider a user interface component with increment and decrement buttons for the month, day, and year, and an underlying GregorianCalendar. If the interface reads January 31, 1999 and the user presses the month increment button, what should it read? If the underlying implementation uses set(), it might read March 3, 1999. A better result would be February 28, 1999. Furthermore, if the user presses the month increment button again, it should read March 31, 1999, not March 28, 1999. By saving the original date and using either add() or roll(), depending on whether larger fields should be affected, the user interface can behave as most users will intuitively expect."}