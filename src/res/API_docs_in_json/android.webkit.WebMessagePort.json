{"Functions": {"postMessage(android.webkit.WebMessage)": {"Returns": [], "Parameters": [["@B_android#webkit#WebMessage_E@", "WebMessage: the message from Java to JS."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If message port is already transferred or closed."]], "SeeAlso": [], "Permissions": [], "Description": "Post a WebMessage to the entangled port.", "history": "Added in API level 23", "FullName": "public abstract void postMessage (WebMessage message)"}, "setWebMessageCallback(android.webkit.WebMessagePort.WebMessageCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#webkit#WebMessagePort#WebMessageCallback_E@", "WebMessagePort.WebMessageCallback: the message callback."], ["@B_android#os#Handler_E@", "Handler: the handler to receive the message messages."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback to receive message events on the handler that is provided by the application.", "history": "Added in API level 23", "FullName": "public abstract void setWebMessageCallback (WebMessagePort.WebMessageCallback callback, Handler handler)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the message port and free any resources associated with it.", "history": "Added in API level 23", "FullName": "public abstract void close ()"}, "setWebMessageCallback(android.webkit.WebMessagePort.WebMessageCallback)": {"Returns": [], "Parameters": [["@B_android#webkit#WebMessagePort#WebMessageCallback_E@", "WebMessagePort.WebMessageCallback: the message callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback to receive message events on the main thread.", "history": "Added in API level 23", "FullName": "public abstract void setWebMessageCallback (WebMessagePort.WebMessageCallback callback)"}}, "Inheritance": [], "ClassName": "android.webkit.WebMessagePort", "ClassDesc": "The Java representation of the A Message port represents one endpoint of a Message Channel. In Android webview, there is no separate Message Channel object. When a message channel is created, both ports are tangled to each other and started, and then returned in a MessagePort array, see @B_android#webkit#WebView#createWebMessageChannel_E@ for creating a message channel. When a message port is first created or received via transfer, it does not have a WebMessageCallback to receive web messages. The messages are queued until a WebMessageCallback is set. A message port should be closed when it is not used by the embedder application anymore. A closed port cannot be transferred or cannot be reopened to send messages. Close can be called multiple times. When a port is transferred to JS, it cannot be used to send or receive messages at the Java side anymore. Different from HTML5 Spec, a port cannot be transferred if one of these has ever happened: i. a message callback was set, ii. a message was posted on it. A transferred port cannot be closed by the application, since the ownership is also transferred. It is possible to transfer both ports of a channel to JS, for example for communication between subframes."}