{"Functions": {"setApplicationProtocols(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an ordered array of application protocols, with protocols[0] being the most preferred. If the array is empty (zero-length), protocol indications will not be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if protocols is null, or if any element in a non-empty array is null or an empty (zero-length) string"]], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#getApplicationProtocols_E@"], "Permissions": [], "Description": "Sets the prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS protocols. If application-layer protocols are supported by the underlying SSL/TLS implementation, this method configures which values can be negotiated by protocols such as If this end of the connection is expected to offer application protocol values, all protocols configured by this method will be sent to the peer. If this end of the connection is expected to select the application protocol value, the protocols configured by this method are compared with those sent by the peer. The first matched value becomes the negotiated value. If none of the protocols were actually requested by the peer, the underlying protocol will determine what action to take. (For example, ALPN will send a \"no_application_protocol\" alert and terminate the connection.)", "history": "Added in API level 29", "FullName": "public void setApplicationProtocols (String[] protocols)"}, "setEndpointIdentificationAlgorithm(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The standard string name of the endpoint identification algorithm (or null). See Appendix A in the Java Cryptography Architecture API Specification & Reference for information about standard algorithm names."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#X509ExtendedTrustManager_E@"], "Permissions": [], "Description": "Sets the endpoint identification algorithm. If the algorithm parameter is non-null or non-empty, the endpoint identification/verification procedures must be handled during SSL/TLS handshaking. This is to prevent man-in-the-middle attacks.", "history": "Added in API level 24", "FullName": "public void setEndpointIdentificationAlgorithm (String algorithm)"}, "setServerNames(java.util.List<javax.net.ssl.SNIServerName>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list of desired @B_javax#net#ssl#SNIServerName_E@s (or null)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the serverNames contains null element"], ["@B_java#lang#IllegalArgumentException_E@", "if the serverNames contains more than one name of the same name type"]], "SeeAlso": ["@B_javax#net#ssl#SNIServerName_E@", "@B_javax#net#ssl#SSLParameters#getServerNames_E@"], "Permissions": [], "Description": "Sets the desired @B_javax#net#ssl#SNIServerName_E@s of the Server Name Indication (SNI) parameter. This method is only useful to @B_javax#net#ssl#SSLSocket_E@s or @B_javax#net#ssl#SSLEngine_E@s operating in client mode. Note that the serverNames list is cloned to protect against subsequent modification.", "history": "Added in API level 24", "FullName": "public final void setServerNames (List<SNIServerName> serverNames)"}, "SSLParameters(java.lang.String[],java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the array of ciphersuites (or null)"], ["@B_java#lang#String_E@", "String: the array of protocols (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs SSLParameters from the specified array of ciphersuites and protocols. Calling this constructor is equivalent to calling the no-args constructor followed by setCipherSuites(cipherSuites); setProtocols(protocols);.", "history": "Added in API level 9", "FullName": "public SSLParameters (String[] cipherSuites, String[] protocols)"}, "setCipherSuites(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the array of ciphersuites (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the array of ciphersuites.", "history": "Added in API level 9", "FullName": "public void setCipherSuites (String[] cipherSuites)"}, "getAlgorithmConstraints()": {"Returns": [["@B_java#security#AlgorithmConstraints_E@", "the cryptographic algorithm constraints, or null if the constraints have not been set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#setAlgorithmConstraints_E@"], "Permissions": [], "Description": "Returns the cryptographic algorithm constraints.", "history": "Added in API level 24", "FullName": "public AlgorithmConstraints getAlgorithmConstraints ()"}, "setUseCipherSuitesOrder(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether local cipher suites order in #getCipherSuites should be honored during SSL/TLS handshaking."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#getUseCipherSuitesOrder_E@"], "Permissions": [], "Description": "Sets whether the local cipher suites preference should be honored.", "history": "Added in API level 24", "FullName": "public final void setUseCipherSuitesOrder (boolean honorOrder)"}, "setSNIMatchers(java.util.Collection<javax.net.ssl.SNIMatcher>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of @B_javax#net#ssl#SNIMatcher_E@s (or null)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the matchers contains null element"], ["@B_java#lang#IllegalArgumentException_E@", "if the matchers contains more than one name of the same name type"]], "SeeAlso": ["@B_java#util#Collection_E@", "@B_javax#net#ssl#SNIMatcher_E@", "@B_javax#net#ssl#SSLParameters#getSNIMatchers_E@"], "Permissions": [], "Description": "Sets the @B_javax#net#ssl#SNIMatcher_E@s of the Server Name Indication (SNI) parameter. This method is only useful to @B_javax#net#ssl#SSLSocket_E@s or @B_javax#net#ssl#SSLEngine_E@s operating in server mode. Note that the matchers collection is cloned to protect against subsequent modification.", "history": "Added in API level 24", "FullName": "public final void setSNIMatchers (Collection<SNIMatcher> matchers)"}, "setWantClientAuth(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether client authentication should be requested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether client authentication should be requested. Calling this method clears the needClientAuth flag.", "history": "Added in API level 9", "FullName": "public void setWantClientAuth (boolean wantClientAuth)"}, "getCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "a copy of the array of ciphersuites or null if none have been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the array of ciphersuites or null if none have been set.", "history": "Added in API level 9", "FullName": "public String[] getCipherSuites ()"}, "SSLParameters(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the array of ciphersuites (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs SSLParameters from the specified array of ciphersuites. Calling this constructor is equivalent to calling the no-args constructor followed by setCipherSuites(cipherSuites);.", "history": "Added in API level 9", "FullName": "public SSLParameters (String[] cipherSuites)"}, "getApplicationProtocols()": {"Returns": [["@B_java#lang#String_E@", "a non-null, possibly zero-length array of application protocol Strings. The array is ordered based on protocol preference, with protocols[0] being the most preferred."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#setApplicationProtocols_E@"], "Permissions": [], "Description": "Returns a prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS protocols. The array could be empty (zero-length), in which case protocol indications will not be used. This method will return a new array each time it is invoked.", "history": "Added in API level 29", "FullName": "public String[] getApplicationProtocols ()"}, "getProtocols()": {"Returns": [["@B_java#lang#String_E@", "a copy of the array of protocols or null if none have been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the array of protocols or null if none have been set.", "history": "Added in API level 9", "FullName": "public String[] getProtocols ()"}, "getWantClientAuth()": {"Returns": [["boolean", "whether client authentication should be requested."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether client authentication should be requested.", "history": "Added in API level 9", "FullName": "public boolean getWantClientAuth ()"}, "setNeedClientAuth(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether client authentication should be required"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether client authentication should be required. Calling this method clears the wantClientAuth flag.", "history": "Added in API level 9", "FullName": "public void setNeedClientAuth (boolean needClientAuth)"}, "getEndpointIdentificationAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the endpoint identification algorithm, or null if none has been set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#X509ExtendedTrustManager_E@", "@B_javax#net#ssl#SSLParameters#setEndpointIdentificationAlgorithm_E@"], "Permissions": [], "Description": "Gets the endpoint identification algorithm.", "history": "Added in API level 24", "FullName": "public String getEndpointIdentificationAlgorithm ()"}, "setProtocols(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the array of protocols (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the array of protocols.", "history": "Added in API level 9", "FullName": "public void setProtocols (String[] protocols)"}, "getServerNames()": {"Returns": [["@B_java#util#List_E@", "null or an immutable list of non-null @B_javax#net#ssl#SNIServerName_E@s"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#List_E@", "@B_javax#net#ssl#SSLParameters#setServerNames_E@"], "Permissions": [], "Description": "Returns a @B_java#util#List_E@ containing all @B_javax#net#ssl#SNIServerName_E@s of the Server Name Indication (SNI) parameter, or null if none has been set. This method is only useful to @B_javax#net#ssl#SSLSocket_E@s or @B_javax#net#ssl#SSLEngine_E@s operating in client mode. For SSL/TLS connections, the underlying SSL/TLS provider may specify a default value for a certain server name type. In client mode, it is recommended that, by default, providers should include the server name indication whenever the server can be located by a supported server name type. It is recommended that providers initialize default Server Name Indications when creating SSLSocket/SSLEngines. In the following examples, the server name could be represented by an instance of @B_javax#net#ssl#SNIHostName_E@ which has been initialized with the hostname \"www.example.com\" and type @B_javax#net#ssl#StandardConstants#SNI_HOST_NAME_E@.", "history": "Added in API level 24", "FullName": "public final List<SNIServerName> getServerNames ()"}, "setAlgorithmConstraints(java.security.AlgorithmConstraints)": {"Returns": [], "Parameters": [["@B_java#security#AlgorithmConstraints_E@", "AlgorithmConstraints: the algorithm constraints (or null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment. If the constraints parameter is non-null, every cryptographic algorithm, key and algorithm parameters used in the SSL/TLS handshake must be permitted by the constraints.", "history": "Added in API level 24", "FullName": "public void setAlgorithmConstraints (AlgorithmConstraints constraints)"}, "getUseCipherSuitesOrder()": {"Returns": [["boolean", "whether local cipher suites order in #getCipherSuites should be honored during SSL/TLS handshaking."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#setUseCipherSuitesOrder_E@"], "Permissions": [], "Description": "Returns whether the local cipher suites preference should be honored.", "history": "Added in API level 24", "FullName": "public final boolean getUseCipherSuitesOrder ()"}, "getSNIMatchers()": {"Returns": [["@B_java#util#Collection_E@", "null or an immutable collection of non-null @B_javax#net#ssl#SNIMatcher_E@s"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SNIMatcher_E@", "@B_javax#net#ssl#SSLParameters#setSNIMatchers_E@"], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ containing all @B_javax#net#ssl#SNIMatcher_E@s of the Server Name Indication (SNI) parameter, or null if none has been set. This method is only useful to @B_javax#net#ssl#SSLSocket_E@s or @B_javax#net#ssl#SSLEngine_E@s operating in server mode. For better interoperability, providers generally will not define default matchers so that by default servers will ignore the SNI extension and continue the handshake.", "history": "Added in API level 24", "FullName": "public final Collection<SNIMatcher> getSNIMatchers ()"}, "SSLParameters()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs SSLParameters. The values of cipherSuites, protocols, cryptographic algorithm constraints, endpoint identification algorithm, server names and server name matchers are set to null, useCipherSuitesOrder, wantClientAuth and needClientAuth are set to false.", "history": "Added in API level 9", "FullName": "public SSLParameters ()"}, "getNeedClientAuth()": {"Returns": [["boolean", "whether client authentication should be required."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether client authentication should be required.", "history": "Added in API level 9", "FullName": "public boolean getNeedClientAuth ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SSLParameters", "ClassDesc": "Encapsulates parameters for an SSL/TLS connection. The parameters are the list of ciphersuites to be accepted in an SSL/TLS handshake, the list of protocols to be allowed, the endpoint identification algorithm during SSL/TLS handshaking, the Server Name Indication (SNI), the algorithm constraints and whether SSL/TLS servers should request or require client authentication, etc. SSLParameters can be created via the constructors in this class. Objects can also be obtained using the getSSLParameters() methods in @B_javax#net#ssl#SSLSocket#getSSLParameters_E@ and @B_javax#net#ssl#SSLServerSocket#getSSLParameters_E@ and @B_javax#net#ssl#SSLEngine#getSSLParameters_E@ or the @B_javax#net#ssl#SSLContext#getDefaultSSLParameters_E@ and @B_javax#net#ssl#SSLContext#getSupportedSSLParameters_E@ methods in SSLContext. SSLParameters can be applied to a connection via the methods @B_javax#net#ssl#SSLSocket#setSSLParameters_E@ and @B_javax#net#ssl#SSLServerSocket#setSSLParameters_E@ and @B_javax#net#ssl#SSLEngine#setSSLParameters_E@."}