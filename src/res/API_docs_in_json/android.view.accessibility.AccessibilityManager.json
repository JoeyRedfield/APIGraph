{"Functions": {"isEnabled()": {"Returns": [["boolean", "True if accessibility is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the accessibility in the system is enabled.", "history": "Added in API level 4", "FullName": "public boolean isEnabled ()"}, "addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@", "AccessibilityManager.TouchExplorationStateChangeListener: The listener. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be called back, or null for a callback on the process's main handler. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an @B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@ for changes in the global touch exploration state of the system. If the listener has already been registered, the handler used to call it back is updated.", "history": "Added in API level 26", "FullName": "public void addTouchExplorationStateChangeListener (AccessibilityManager.TouchExplorationStateChangeListener listener, Handler handler)"}, "removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)": {"Returns": [["boolean", "True if listener was previously registered."]], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@", "AccessibilityManager.TouchExplorationStateChangeListener: The listener. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a @B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@.", "history": "Added in API level 19", "FullName": "public boolean removeTouchExplorationStateChangeListener (AccessibilityManager.TouchExplorationStateChangeListener listener)"}, "isTouchExplorationEnabled()": {"Returns": [["boolean", "True if touch exploration is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the touch exploration in the system is enabled.", "history": "Added in API level 14", "FullName": "public boolean isTouchExplorationEnabled ()"}, "isAccessibilityButtonSupported()": {"Returns": [["boolean", "true if the accessibility button is supported on this device, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the accessibility button within the system navigation area is supported.", "history": "Added in API level 27", "FullName": "public static boolean isAccessibilityButtonSupported ()"}, "getEnabledAccessibilityServiceList(int)": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list with @B_android#accessibilityservice#AccessibilityServiceInfo_E@s."]], "Parameters": [["int", "int: The feedback type flags."]], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityServiceInfo_E@"], "Permissions": [], "Description": "Returns the @B_android#accessibilityservice#AccessibilityServiceInfo_E@s of the enabled accessibility services for a given feedback type.", "history": "Added in API level 14", "FullName": "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList (int feedbackTypeFlags)"}, "addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@", "AccessibilityManager.AccessibilityStateChangeListener: The listener. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be called back, or null for a callback on the process's main handler. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an @B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@ for changes in the global accessibility state of the system. If the listener has already been registered, the handler used to call it back is updated.", "history": "Added in API level 26", "FullName": "public void addAccessibilityStateChangeListener (AccessibilityManager.AccessibilityStateChangeListener listener, Handler handler)"}, "sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event to send."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if accessibility is not enabled. Note: The preferred mechanism for sending custom accessibility events is through calling @B_android#view#ViewParent#requestSendAccessibilityEvent_E@ instead of this method to allow predecessors to augment/filter events sent by their descendants."]], "SeeAlso": [], "Permissions": [], "Description": "Sends an @B_android#view#accessibility#AccessibilityEvent_E@.", "history": "Added in API level 4", "FullName": "public void sendAccessibilityEvent (AccessibilityEvent event)"}, "addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)": {"Returns": [["boolean", "Always returns true."]], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@", "AccessibilityManager.TouchExplorationStateChangeListener: The listener. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a @B_android#view#accessibility#AccessibilityManager#TouchExplorationStateChangeListener_E@ for changes in the global touch exploration state of the system. Equivalent to calling @B_android#view#accessibility#AccessibilityManager#addTouchExplorationStateChangeListener_E@ with a null handler.", "history": "Added in API level 19", "FullName": "public boolean addTouchExplorationStateChangeListener (AccessibilityManager.TouchExplorationStateChangeListener listener)"}, "getInstalledAccessibilityServiceList()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list with @B_android#accessibilityservice#AccessibilityServiceInfo_E@s."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#accessibilityservice#AccessibilityServiceInfo_E@s of the installed accessibility services.", "history": "Added in API level 14", "FullName": "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList ()"}, "addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)": {"Returns": [["boolean", "Always returns true."]], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@", "AccessibilityManager.AccessibilityStateChangeListener: The listener. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an @B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@ for changes in the global accessibility state of the system. Equivalent to calling @B_android#view#accessibility#AccessibilityManager#addAccessibilityStateChangeListener_E@ with a null handler.", "history": "Added in API level 14", "FullName": "public boolean addAccessibilityStateChangeListener (AccessibilityManager.AccessibilityStateChangeListener listener)"}, "getRecommendedTimeoutMillis(int,int)": {"Returns": [["int", "The recommended UI timeout for the current user in milliseconds."]], "Parameters": [["int", "int: The timeout appropriate for users with no accessibility needs."], ["int", "int: The combination of flags @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_ICONS_E@, @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_TEXT_E@ or @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_CONTROLS_E@ to indicate the contents of UI. Value is either 0 or a combination of @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_ICONS_E@, @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_TEXT_E@, and @B_android#view#accessibility#AccessibilityManager#FLAG_CONTENT_CONTROLS_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the recommended timeout for changes to the UI needed by this user. Controls should remain on the screen for at least this long to give users time to react. Some users may need extra time to review the controls, or to reach them, or to activate assistive technology to activate the controls automatically. Use the combination of content flags to indicate contents of UI. For example, use FLAG_CONTENT_ICONS | FLAG_CONTENT_TEXT for message notification which contains icons and text, or use FLAG_CONTENT_TEXT | FLAG_CONTENT_CONTROLS for button dialog which contains text and button controls.", "history": "Added in API level 29", "FullName": "public int getRecommendedTimeoutMillis (int originalTimeout, int uiContentFlags)"}, "removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityRequestPreparer_E@", "AccessibilityRequestPreparer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a @B_android#view#accessibility#AccessibilityRequestPreparer_E@.", "history": "Added in API level 27", "FullName": "public void removeAccessibilityRequestPreparer (AccessibilityRequestPreparer preparer)"}, "removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)": {"Returns": [["boolean", "True if the listener was previously registered."]], "Parameters": [["@B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@", "AccessibilityManager.AccessibilityStateChangeListener: The listener. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters an @B_android#view#accessibility#AccessibilityManager#AccessibilityStateChangeListener_E@.", "history": "Added in API level 14", "FullName": "public boolean removeAccessibilityStateChangeListener (AccessibilityManager.AccessibilityStateChangeListener listener)"}, "interrupt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests feedback interruption from all accessibility services.", "history": "Added in API level 4", "FullName": "public void interrupt ()"}, "getAccessibilityServiceList()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list with @B_android#content#pm#ServiceInfo_E@s."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityManager#getInstalledAccessibilityServiceList_E@ Returns the @B_android#content#pm#ServiceInfo_E@s of the installed accessibility services.", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public List<ServiceInfo> getAccessibilityServiceList ()"}, "addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityRequestPreparer_E@", "AccessibilityRequestPreparer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a @B_android#view#accessibility#AccessibilityRequestPreparer_E@.", "history": "Added in API level 27", "FullName": "public void addAccessibilityRequestPreparer (AccessibilityRequestPreparer preparer)"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityManager", "ClassDesc": "System level service that serves as an event dispatch for @B_android#view#accessibility#AccessibilityEvent_E@s, and provides facilities for querying the accessibility state of the system. Accessibility events are generated when something notable happens in the user interface, for example an @B_android#app#Activity_E@ starts, the focus or selection of a @B_android#view#View_E@ changes etc. Parties interested in handling accessibility events implement and register an accessibility service which extends @B_android#accessibilityservice#AccessibilityService_E@."}