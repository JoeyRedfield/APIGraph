{"Functions": {"getReverseLayout()": {"Returns": [["boolean", "True if layout is reversed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@"], "Permissions": [], "Description": "Returns whether views are laid out in reverse order or not. Not that this value is not affected by RecyclerView's layout direction.", "history": "added in version 22.0.0", "FullName": "boolean getReverseLayout ()"}, "setSpanCount(int)": {"Returns": [], "Parameters": [["int", "int: Number of spans to layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of spans for the layout. This will invalidate all of the span assignments for Views. Calling this method will automatically result in a new layout request unless the spanCount parameter is equal to current span count.", "history": "added in version 22.0.0", "FullName": "void setSpanCount (int spanCount)"}, "supportsPredictiveItemAnimations()": {"Returns": [["boolean", "true if predictive item animations should be enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this LayoutManager supports automatic item animations. A LayoutManager wishing to support item animations should obey certain rules as outlined in @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@. The default return value is false, so subclasses of LayoutManager will not get predictive item animations by default. Whether item animations are enabled in a RecyclerView is determined both by the return value from this method and the @B_android#support#v7#widget#RecyclerView#setItemAnimator_E@ set on the RecyclerView itself. If the RecyclerView has a non-null ItemAnimator but this method returns false, then simple item animations will be enabled, in which views that are moving onto or off of the screen are simply faded in/out. If the RecyclerView has a non-null ItemAnimator and this method returns true, then there will be two calls to @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ to setup up the information needed to more intelligently predict where appearing and disappearing views should be animated from/to.", "history": "added in version 22.0.0", "FullName": "boolean supportsPredictiveItemAnimations ()"}, "assertNotInLayoutOrScroll(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The message for the exception. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if RecyclerView is in the middle of a layout or scroll and throws an @B_java#lang#IllegalStateException_E@ if it", "history": "added in version 22.0.0", "FullName": "void assertNotInLayoutOrScroll (String message)"}, "scrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scroll to the specified adapter position. Actual position of the item on the screen depends on the LayoutManager implementation.", "history": "added in version 22.0.0", "FullName": "void scrollToPosition (int position)"}, "setGapStrategy(int)": {"Returns": [], "Parameters": [["int", "int: The new gap handling strategy. Should be @B_android#support#v7#widget#StaggeredGridLayoutManager#GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS_E@ or @B_android#support#v7#widget#StaggeredGridLayoutManager#GAP_HANDLING_NONE_E@."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#getGapStrategy_E@"], "Permissions": [], "Description": "Sets the gap handling strategy for StaggeredGridLayoutManager. If the gapStrategy parameter is different than the current strategy, calling this method will trigger a layout request.", "history": "added in version 22.0.0", "FullName": "void setGapStrategy (int gapStrategy)"}, "computeScrollVectorForPosition(int)": {"Returns": [["@B_android#graphics#PointF_E@", "the scroll vector for a given position."]], "Parameters": [["int", "int: the target position to which the returned vector should point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should calculate the vector that points to the direction where the target position can be found. This method is used by the @B_android#support#v7#widget#LinearSmoothScroller_E@ to initiate a scroll towards the target position. The magnitude of the vector is not important. It is always normalized before being used by the @B_android#support#v7#widget#LinearSmoothScroller_E@. LayoutManager should not check whether the position exists in the adapter or not.", "history": "added in version 24.2.0", "FullName": "PointF computeScrollVectorForPosition (int targetPosition)"}, "findFirstVisibleItemPositions(int[])": {"Returns": [["int[]", "The adapter position of the first visible item in each span. If a span does not have any items, @B_android#support#v7#widget#RecyclerView#NO_POSITION_E@ is returned for that span."]], "Parameters": [["int[]", "int: An array to put the results into. If you don't provide any, LayoutManager will create a new one."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#findFirstCompletelyVisibleItemPositions_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager#findLastVisibleItemPositions_E@"], "Permissions": [], "Description": "Returns the adapter position of the first visible view for each span. Note that, this value is not affected by layout orientation or item order traversal. (@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@). Views are sorted by their positions in the adapter, not in the layout. If RecyclerView has item decorators, they will be considered in calculations as well. StaggeredGridLayoutManager may pre-cache some views that are not necessarily visible. Those views are ignored in this method.", "history": "added in version 22.0.0", "FullName": "int[] findFirstVisibleItemPositions (int[] into)"}, "offsetChildrenHorizontal(int)": {"Returns": [], "Parameters": [["int", "int: Pixels to offset by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis.", "history": "added in version 22.0.0", "FullName": "void offsetChildrenHorizontal (int dx)"}, "findLastVisibleItemPositions(int[])": {"Returns": [["int[]", "The adapter position of the last visible item in each span. If a span does not have any items, @B_android#support#v7#widget#RecyclerView#NO_POSITION_E@ is returned for that span."]], "Parameters": [["int[]", "int: An array to put the results into. If you don't provide any, LayoutManager will create a new one."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#findLastCompletelyVisibleItemPositions_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager#findFirstVisibleItemPositions_E@"], "Permissions": [], "Description": "Returns the adapter position of the last visible view for each span. Note that, this value is not affected by layout orientation or item order traversal. (@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@). Views are sorted by their positions in the adapter, not in the layout. If RecyclerView has item decorators, they will be considered in calculations as well. StaggeredGridLayoutManager may pre-cache some views that are not necessarily visible. Those views are ignored in this method.", "history": "added in version 22.0.0", "FullName": "int[] findLastVisibleItemPositions (int[] into)"}, "findFirstCompletelyVisibleItemPositions(int[])": {"Returns": [["int[]", "The adapter position of the first fully visible item in each span. If a span does not have any items, @B_android#support#v7#widget#RecyclerView#NO_POSITION_E@ is returned for that span."]], "Parameters": [["int[]", "int: An array to put the results into. If you don't provide any, LayoutManager will create a new one."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#findFirstVisibleItemPositions_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager#findLastCompletelyVisibleItemPositions_E@"], "Permissions": [], "Description": "Returns the adapter position of the first completely visible view for each span. Note that, this value is not affected by layout orientation or item order traversal. (@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@). Views are sorted by their positions in the adapter, not in the layout. If RecyclerView has item decorators, they will be considered in calculations as well. StaggeredGridLayoutManager may pre-cache some views that are not necessarily visible. Those views are ignored in this method.", "history": "added in version 22.0.0", "FullName": "int[] findFirstCompletelyVisibleItemPositions (int[] into)"}, "canScrollVertically()": {"Returns": [["boolean", "True if this LayoutManager can scroll the current contents vertically"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if vertical scrolling is currently supported. The default implementation returns false.", "history": "added in version 22.0.0", "FullName": "boolean canScrollVertically ()"}, "setReverseLayout(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether layout should be in reverse or not"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether LayoutManager should start laying out items from the end of the UI. The order items are traversed is not affected by this call. For vertical layout, if it is set to true, first item will be at the bottom of the list. For horizontal layouts, it depends on the layout direction. When set to true, If @B_android#support#v7#widget#RecyclerView_E@ is LTR, than it will layout from RTL, if @B_android#support#v7#widget#RecyclerView_E@} is RTL, it will layout from LTR.", "history": "added in version 22.0.0", "FullName": "void setReverseLayout (boolean reverseLayout)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "StaggeredGridLayoutManager(int, int)": {"Returns": [], "Parameters": [["int", "int: If orientation is vertical, spanCount is number of columns. If orientation is horizontal, spanCount is number of rows."], ["int", "int: @B_android#support#v7#widget#StaggeredGridLayoutManager#VERTICAL_E@ or @B_android#support#v7#widget#StaggeredGridLayoutManager#HORIZONTAL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a StaggeredGridLayoutManager with given parameters.", "history": "added in version 22.0.0", "FullName": "StaggeredGridLayoutManager (int spanCount, int orientation)"}, "invalidateSpanAssignments()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For consistency, StaggeredGridLayoutManager keeps a mapping between spans and items. If you need to cancel current assignments, you can call this method which will clear all assignments and request a new layout.", "history": "added in version 22.0.0", "FullName": "void invalidateSpanAssignments ()"}, "getGapStrategy()": {"Returns": [["int", "Current gap handling strategy."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#setGapStrategy_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager_E@"], "Permissions": [], "Description": "Returns the current gap handling strategy for StaggeredGridLayoutManager. Staggered grid may have gaps in the layout due to changes in the adapter. To avoid gaps, StaggeredGridLayoutManager provides 2 options. Check @B_android#support#v7#widget#StaggeredGridLayoutManager#GAP_HANDLING_NONE_E@ and @B_android#support#v7#widget#StaggeredGridLayoutManager#GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS_E@ for details. By default, StaggeredGridLayoutManager uses @B_android#support#v7#widget#StaggeredGridLayoutManager#GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS_E@.", "history": "added in version 22.0.0", "FullName": "int getGapStrategy ()"}, "getOrientation()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getOrientation ()"}, "onScrollStateChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new scroll state for RecyclerView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "RecyclerView calls this method to notify LayoutManager that scroll state has changed.", "history": "added in version 22.0.0", "FullName": "void onScrollStateChanged (int state)"}, "scrollToPositionWithOffset(int, int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the reference item."], ["int", "int: The distance (in pixels) between the start edge of the item view and start edge of the RecyclerView."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager#scrollToPosition_E@"], "Permissions": [], "Description": "Scroll to the specified adapter position with the given offset from layout start. Note that scroll position change will not be reflected until the next layout call. If you are just trying to make a position visible, use @B_android#support#v7#widget#StaggeredGridLayoutManager#scrollToPosition_E@.", "history": "added in version 22.0.0", "FullName": "void scrollToPositionWithOffset (int position, int offset)"}, "getSpanCount()": {"Returns": [["int", "Number of spans in the layout"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of spans laid out by StaggeredGridLayoutManager.", "history": "added in version 22.0.0", "FullName": "int getSpanCount ()"}, "canScrollHorizontally()": {"Returns": [["boolean", "True if this LayoutManager can scroll the current contents horizontally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if horizontal scrolling is currently supported. The default implementation returns false.", "history": "added in version 22.0.0", "FullName": "boolean canScrollHorizontally ()"}, "findLastCompletelyVisibleItemPositions(int[])": {"Returns": [["int[]", "The adapter position of the last fully visible item in each span. If a span does not have any items, @B_android#support#v7#widget#RecyclerView#NO_POSITION_E@ is returned for that span."]], "Parameters": [["int[]", "int: An array to put the results into. If you don't provide any, LayoutManager will create a new one."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#StaggeredGridLayoutManager#findFirstCompletelyVisibleItemPositions_E@", "@B_android#support#v7#widget#StaggeredGridLayoutManager#findLastVisibleItemPositions_E@"], "Permissions": [], "Description": "Returns the adapter position of the last completely visible view for each span. Note that, this value is not affected by layout orientation or item order traversal. (@B_android#support#v7#widget#StaggeredGridLayoutManager#setReverseLayout_E@). Views are sorted by their positions in the adapter, not in the layout. If RecyclerView has item decorators, they will be considered in calculations as well. StaggeredGridLayoutManager may pre-cache some views that are not necessarily visible. Those views are ignored in this method.", "history": "added in version 22.0.0", "FullName": "int[] findLastCompletelyVisibleItemPositions (int[] into)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Necessary information for LayoutManager to be able to restore its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the LayoutManager should save its state. This is a good time to save your scroll position, configuration and anything else that may be required to restore the same layout state if the LayoutManager is recreated. RecyclerView does NOT verify if the LayoutManager has changed between state save and restore. This will let you share information between your LayoutManagers but it is also your responsibility to make sure they use the same parcelable class.", "history": "added in version 22.0.0", "FullName": "Parcelable onSaveInstanceState ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#RecyclerView#LayoutParams_E@", "A new LayoutParams for a child view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a default LayoutParams object for a child of the RecyclerView. LayoutManagers will often want to use a custom LayoutParams type to store extra information specific to the layout. Client code should subclass @B_android#support#v7#widget#RecyclerView#LayoutParams_E@ for this purpose. Important: if you use your own custom LayoutParams type you must also override @B_android#support#v7#widget#RecyclerView#LayoutManager#checkLayoutParams_E@, @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@ and @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@.", "history": "added in version 22.0.0", "FullName": "RecyclerView.LayoutParams generateDefaultLayoutParams ()"}, "offsetChildrenVertical(int)": {"Returns": [], "Parameters": [["int", "int: Pixels to offset by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis.", "history": "added in version 22.0.0", "FullName": "void offsetChildrenVertical (int dy)"}, "setOrientation(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#support#v7#widget#StaggeredGridLayoutManager#HORIZONTAL_E@ or @B_android#support#v7#widget#StaggeredGridLayoutManager#VERTICAL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the orientation of the layout. StaggeredGridLayoutManager will do its best to keep scroll position if this method is called after views are laid out.", "history": "added in version 22.0.0", "FullName": "void setOrientation (int orientation)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v7#widget#RecyclerView#LayoutManager_E@"], "ClassName": "android.support.v7.widget.StaggeredGridLayoutManager", "ClassDesc": "A LayoutManager that lays out children in a staggered grid formation. It supports horizontal & vertical layout as well as an ability to layout children in reverse. Staggered grids are likely to have gaps at the edges of the layout. To avoid these gaps, StaggeredGridLayoutManager can offset spans independently or move items between spans. You can control this behavior via @B_android#support#v7#widget#StaggeredGridLayoutManager#setGapStrategy_E@."}