{"Functions": {"onPrintJobQueued(android.printservice.PrintJob)": {"Returns": [], "Parameters": [["@B_android#printservice#PrintJob_E@", "PrintJob: The new queued print job."]], "Throws": [], "SeeAlso": ["@B_android#printservice#PrintJob#isQueued_E@", "@B_android#printservice#PrintService#getActivePrintJobs_E@"], "Permissions": [], "Description": "Called when there is a queued print job for one of the printers managed by this print service.", "history": "Added in API level 19", "FullName": "protected abstract void onPrintJobQueued (PrintJob printJob)"}, "getActivePrintJobs()": {"Returns": [["@B_java#util#List_E@", "The active print jobs."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#printservice#PrintJob#isQueued_E@", "@B_android#printservice#PrintJob#isStarted_E@"], "Permissions": [], "Description": "Gets the active print jobs for the printers managed by this service. Active print jobs are ones that are not in a final state, i.e. whose state is queued or started.", "history": "Added in API level 19", "FullName": "public final List<PrintJob> getActivePrintJobs ()"}, "attachBaseContext(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The new base context for this wrapper."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the base context for this ContextWrapper. All calls will then be delegated to the base context. Throws IllegalStateException if a base context has already been set.", "history": "Added in API level 19", "FullName": "protected final void attachBaseContext (Context base)"}, "onRequestCancelPrintJob(android.printservice.PrintJob)": {"Returns": [], "Parameters": [["@B_android#printservice#PrintJob_E@", "PrintJob: The print job to cancel."]], "Throws": [], "SeeAlso": ["@B_android#printservice#PrintJob#cancel_E@", "@B_android#printservice#PrintJob#isCancelled_E@"], "Permissions": [], "Description": "Called when cancellation of a print job is requested. The service should do best effort to fulfill the request. After the cancellation is performed, the print job should be marked as cancelled state by calling @B_android#printservice#PrintJob#cancel_E@.", "history": "Added in API level 19", "FullName": "protected abstract void onRequestCancelPrintJob (PrintJob printJob)"}, "onDisconnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system has disconnected from this service.", "history": "Added in API level 19", "FullName": "protected void onDisconnected ()"}, "PrintService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 19", "FullName": "public PrintService ()"}, "generatePrinterId(java.lang.String)": {"Returns": [["@B_android#print#PrinterId_E@", "Global printer id. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: A locally unique id in the context of your print service."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a global printer id given the printer's locally unique one.", "history": "Added in API level 19", "FullName": "public final PrinterId generatePrinterId (String localId)"}, "onConnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system has connected to this service.", "history": "Added in API level 19", "FullName": "protected void onConnected ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 19", "FullName": "public final IBinder onBind (Intent intent)"}, "onCreatePrinterDiscoverySession()": {"Returns": [["@B_android#printservice#PrinterDiscoverySession_E@", "The created session. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#printservice#PrinterDiscoverySession_E@"], "Permissions": [], "Description": "Callback asking you to create a new @B_android#printservice#PrinterDiscoverySession_E@.", "history": "Added in API level 19", "FullName": "protected abstract PrinterDiscoverySession onCreatePrinterDiscoverySession ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.printservice.PrintService", "ClassDesc": "This is the base class for implementing print services. A print service knows how to discover and interact one or more printers via one or more protocols. A print service is responsible for discovering printers, adding discovered printers, removing added printers, and updating added printers. When the system is interested in printers managed by your service it will call @B_android#printservice#PrintService#onCreatePrinterDiscoverySession_E@ from which you must return a new @B_android#printservice#PrinterDiscoverySession_E@ instance. The returned session encapsulates the interaction between the system and your service during printer discovery. For description of this interaction refer to the documentation for @B_android#printservice#PrinterDiscoverySession_E@. For every printer discovery session all printers have to be added since system does not retain printers across sessions. Hence, each printer known to this print service should be added only once during a discovery session. Only an already added printer can be removed or updated. Removed printers can be added again. When a new print job targeted to a printer managed by this print service is is queued, i.e. ready for processing by the print service, you will receive a call to @B_android#printservice#PrintService#onPrintJobQueued_E@. The print service may handle the print job immediately or schedule that for an appropriate time in the future. The list of all active print jobs for this service is obtained by calling @B_android#printservice#PrintService#getActivePrintJobs_E@. Active print jobs are ones that are queued or started. A print service is responsible for setting a print job's state as appropriate while processing it. Initially, a print job is queued, i.e. @B_android#printservice#PrintJob#isQueued_E@ returns true, which means that the document to be printed is spooled by the system and the print service can begin processing it. You can obtain the printed document by calling @B_android#printservice#PrintJob#getDocument_E@ whose data is accessed via @B_android#printservice#PrintDocument#getData_E@. After the print service starts printing the data it should set the print job's state to started by calling @B_android#printservice#PrintJob#start_E@ after which @B_android#printservice#PrintJob#isStarted_E@ would return true. Upon successful completion, the print job should be marked as completed by calling @B_android#printservice#PrintJob#complete_E@ after which @B_android#printservice#PrintJob#isCompleted_E@ would return true. In case of a failure, the print job should be marked as failed by calling @B_android#printservice#PrintJob#fail_E@ after which @B_android#printservice#PrintJob#isFailed_E@ would return true. If a print job is queued or started and the user requests to cancel it, the print service will receive a call to @B_android#printservice#PrintService#onRequestCancelPrintJob_E@ which requests from the service to do best effort in canceling the job. In case the job is successfully canceled, its state has to be marked as cancelled by calling @B_android#printservice#PrintJob#cancel_E@ after which @B_android#printservice#PrintJob#isCancelled_E@ would return true. The lifecycle of a print service is managed exclusively by the system and follows the established service lifecycle. Additionally, starting or stopping a print service is triggered exclusively by an explicit user action through enabling or disabling it in the device settings. After the system binds to a print service, it calls @B_android#printservice#PrintService#onConnected_E@. This method can be overriden by clients to perform post binding setup. Also after the system unbinds from a print service, it calls @B_android#printservice#PrintService#onDisconnected_E@. This method can be overriden by clients to perform post unbinding cleanup. Your should not do any work after the system disconnected from your print service since the service can be killed at any time to reclaim memory. The system will not disconnect from a print service if there are active print jobs for the printers managed by it. A print service is declared as any other service in an AndroidManifest.xml but it must also specify that it handles the @B_android#content#Intent_E@ with action @B_android#printservice#PrintService#SERVICE_INTERFACE_E@. Failure to declare this intent will cause the system to ignore the print service. Additionally, a print service must request the @B_android#Manifest#permission#BIND_PRINT_SERVICE_E@ permission to ensure that only the system can bind to it. Failure to declare this intent will cause the system to ignore the print service. Following is an example declaration: A print service can be configured by specifying an optional settings activity which exposes service specific settings, an optional add printers activity which is used for manual addition of printers, vendor name ,etc. It is a responsibility of the system to launch the settings and add printers activities when appropriate. A print service is configured by providing a @B_android#printservice#PrintService#SERVICE_META_DATA_E@ entry in the manifest when declaring the service. A service declaration with a meta-data tag is presented below: For more details for how to configure your print service via the meta-data refer to @B_android#printservice#PrintService#SERVICE_META_DATA_E@ and <print-service>."}