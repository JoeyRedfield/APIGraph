{"Functions": {"onMenuItemSelected(int,android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "Added in API level 17", "FullName": "public boolean onMenuItemSelected (int featureId, MenuItem item)"}, "setContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view."]], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setContentView_E@"], "Permissions": [], "Description": "Sets a view to be the content view for this Dream. Behaves similarly to @B_android#app#Activity#setContentView_E@ in an activity. Note: This requires a window, so you should usually call it during @B_android#service#dreams#DreamService#onAttachedToWindow_E@ and never earlier (you @B_android#service#dreams#DreamService#onCreate_E@).", "history": "Added in API level 17", "FullName": "public void setContentView (View view, ViewGroup.LayoutParams params)"}, "onCreatePanelMenu(int,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "Added in API level 17", "FullName": "public boolean onCreatePanelMenu (int featureId, Menu menu)"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "added in API level 17", "FullName": "public void onPanelClosed (int featureId, Menu menu)"}, "requireViewById(int)": {"Returns": [["T", "a view with given ID This value will never be null."]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#requireViewById_E@", "@B_android#service#dreams#DreamService#findViewById_E@"], "Permissions": [], "Description": "Finds a view that was identified by the id attribute from the XML that was processed in @B_android#service#dreams#DreamService#onCreate_E@, or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy. Note: Requires a window, do not call before @B_android#service#dreams#DreamService#onAttachedToWindow_E@", "history": "Added in API level 28", "FullName": "public final T requireViewById (int id)"}, "setFullscreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the fullscreen flag will be set; else it will be cleared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls @B_android#view#WindowManager#LayoutParams#FLAG_FULLSCREEN_E@ on the dream's window.", "history": "Added in API level 17", "FullName": "public void setFullscreen (boolean fullscreen)"}, "findViewById(int)": {"Returns": [["T", "The view if found or null otherwise."]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#findViewById_E@", "@B_android#service#dreams#DreamService#requireViewById_E@"], "Permissions": [], "Description": "Finds a view that was identified by the id attribute from the XML that was processed in @B_android#service#dreams#DreamService#onCreate_E@. Note: Requires a window, do not call before @B_android#service#dreams#DreamService#onAttachedToWindow_E@", "history": "Added in API level 17", "FullName": "public T findViewById (int id)"}, "isFullscreen()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setFullscreen_E@"], "Permissions": [], "Description": "Returns whether or not this dream is in fullscreen mode. Defaults to false.", "history": "Added in API level 17", "FullName": "public boolean isFullscreen ()"}, "onPreparePanel(int,android.view.View,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#View_E@", "View: The View that was returned by onCreatePanelView(). This value may be null."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prepare a panel to be displayed. This is called right before the panel window is shown, every time it is shown.", "history": "Added in API level 17", "FullName": "public boolean onPreparePanel (int featureId, View view, Menu menu)"}, "onPanelClosed(int,android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "Added in API level 17", "FullName": "public void onPanelClosed (int featureId, Menu menu)"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "added in API level 17", "FullName": "public boolean onMenuItemSelected (int featureId, MenuItem item)"}, "isInteractive()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setInteractive_E@"], "Permissions": [], "Description": "Returns whether or not this dream is interactive. Defaults to false.", "history": "Added in API level 17", "FullName": "public boolean isInteractive ()"}, "getWindow()": {"Returns": [["@B_android#view#Window_E@", "The current window, or null if the dream is not started."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current @B_android#view#Window_E@ for the dream. Behaves similarly to @B_android#app#Activity#getWindow_E@.", "history": "Added in API level 17", "FullName": "public Window getWindow ()"}, "onSearchRequested()": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user signals the desire to start a search.", "history": "Added in API level 17", "FullName": "public boolean onSearchRequested ()"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch screen event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process touch screen events. At the very least your implementation must call @B_android#view#Window#superDispatchTouchEvent_E@ to do the standard touch screen processing.", "history": "Added in API level 17", "FullName": "public boolean dispatchTouchEvent (MotionEvent event)"}, "dispatchKeyShortcutEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key shortcut event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process a key shortcut event. At the very least your implementation must call @B_android#view#Window#superDispatchKeyShortcutEvent_E@ to do the standard key shortcut processing.", "history": "Added in API level 17", "FullName": "public boolean dispatchKeyShortcutEvent (KeyEvent event)"}, "onActionModeFinished(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The mode that was just finished."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been finished. The appropriate mode callback method will have already been invoked.", "history": "Added in API level 17", "FullName": "public void onActionModeFinished (ActionMode mode)"}, "onMenuOpened(int, android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "added in API level 17", "FullName": "public boolean onMenuOpened (int featureId, Menu menu)"}, "onActionModeStarted(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The new mode that has just been started."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been started. The appropriate mode callback method will have already been invoked.", "history": "Added in API level 17", "FullName": "public void onActionModeStarted (ActionMode mode)"}, "addContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a view to the Dream's window, leaving other content views in place. Note: Requires a window, do not call before @B_android#service#dreams#DreamService#onAttachedToWindow_E@", "history": "Added in API level 17", "FullName": "public void addContentView (View view, ViewGroup.LayoutParams params)"}, "onWindowAttributesChanged(android.view.WindowManager.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager#LayoutParams_E@", "WindowManager.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called whenever the current window attributes change.", "history": "Added in API level 17", "FullName": "public void onWindowAttributesChanged (WindowManager.LayoutParams attrs)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 17", "FullName": "public final IBinder onBind (Intent intent)"}, "onCreatePanelView(int)": {"Returns": [["@B_android#view#View_E@", "view The top-level view to place in the panel."]], "Parameters": [["int", "int: Which panel is being created."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instantiate the view to display in the panel for 'featureId'. You can return null, in which case the default content (typically a menu) will be created for you.", "history": "Added in API level 17", "FullName": "public View onCreatePanelView (int featureId)"}, "getWindowManager()": {"Returns": [["@B_android#view#WindowManager_E@", "The current window manager, or null if the dream is not started."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current @B_android#view#WindowManager_E@ for the dream. Behaves similarly to @B_android#app#Activity#getWindowManager_E@.", "history": "Added in API level 17", "FullName": "public WindowManager getWindowManager ()"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this Dream is constructed.", "history": "Added in API level 17", "FullName": "public void onCreate ()"}, "onWindowStartingActionMode(android.view.ActionMode.Callback)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all. This is equivalent to @B_android#view#Window#Callback#onWindowStartingActionMode_E@ with type @B_android#view#ActionMode#TYPE_PRIMARY_E@.", "history": "Added in API level 17", "FullName": "public ActionMode onWindowStartingActionMode (ActionMode.Callback callback)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the window now has focus."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the window focus changes. See @B_android#view#View#onWindowFocusChanged_E@ for more information.", "history": "Added in API level 17", "FullName": "public void onWindowFocusChanged (boolean hasFocus)"}, "DreamService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 17", "FullName": "public DreamService ()"}, "dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)": {"Returns": [["boolean", "boolean Return true if event population was completed."]], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process population of @B_android#view#accessibility#AccessibilityEvent_E@s.", "history": "Added in API level 17", "FullName": "public boolean dispatchPopulateAccessibilityEvent (AccessibilityEvent event)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the content view of the screen changes (due to a call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#addContentView_E@).", "history": "Added in API level 17", "FullName": "public void onContentChanged ()"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process key events. At the very least your implementation must call @B_android#view#Window#superDispatchKeyEvent_E@ to do the standard key processing.", "history": "Added in API level 17", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "onCreatePanelMenu(int, android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "added in API level 17", "FullName": "public boolean onCreatePanelMenu (int featureId, Menu menu)"}, "wakeUp()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wakes the dream up gently. Calls @B_android#service#dreams#DreamService#onWakeUp_E@ to give the dream a chance to perform an exit transition. When the transition is over, the dream should call @B_android#service#dreams#DreamService#finish_E@.", "history": "Added in API level 21", "FullName": "public final void wakeUp ()"}, "dispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The trackball event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process trackball events. At the very least your implementation must call @B_android#view#Window#superDispatchTrackballEvent_E@ to do the standard trackball processing.", "history": "Added in API level 17", "FullName": "public boolean dispatchTrackballEvent (MotionEvent event)"}, "onMenuOpened(int,android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "Added in API level 17", "FullName": "public boolean onMenuOpened (int featureId, Menu menu)"}, "onWindowStartingActionMode(android.view.ActionMode.Callback,int)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"], ["int", "int: One of @B_android#view#ActionMode#TYPE_PRIMARY_E@ or @B_android#view#ActionMode#TYPE_FLOATING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all.", "history": "Added in API level 23", "FullName": "public ActionMode onWindowStartingActionMode (ActionMode.Callback callback, int type)"}, "setContentView(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID to be inflated."]], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setContentView_E@"], "Permissions": [], "Description": "Inflates a layout resource and set it to be the content view for this Dream. Behaves similarly to @B_android#app#Activity#setContentView_E@. Note: Requires a window, do not call before @B_android#service#dreams#DreamService#onAttachedToWindow_E@", "history": "Added in API level 17", "FullName": "public void setContentView (int layoutResID)"}, "onDreamingStopped()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this Dream is stopped, either by external request or by calling finish(), before the window has been removed.", "history": "Added in API level 17", "FullName": "public void onDreamingStopped ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been detached from the window manager. See @B_android#view#View#onDetachedFromWindow_E@ for more information.", "history": "Added in API level 17", "FullName": "public void onDetachedFromWindow ()"}, "finish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops the dream and detaches from the window. When the dream ends, the system will be allowed to go to sleep fully unless there is a reason for it to be awake such as recent user activity or wake locks being held.", "history": "Added in API level 17", "FullName": "public final void finish ()"}, "onSearchRequested(android.view.SearchEvent)": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [["@B_android#view#SearchEvent_E@", "SearchEvent: A @B_android#view#SearchEvent_E@ describing the signal to start a search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user signals the desire to start a search.", "history": "Added in API level 23", "FullName": "public boolean onSearchRequested (SearchEvent event)"}, "onDreamingStarted()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the dream's window has been created and is visible and animation may now begin.", "history": "Added in API level 17", "FullName": "public void onDreamingStarted ()"}, "isScreenBright()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setScreenBright_E@"], "Permissions": [], "Description": "Returns whether or not this dream keeps the screen bright while dreaming. Defaults to false, allowing the screen to dim if necessary.", "history": "Added in API level 17", "FullName": "public boolean isScreenBright ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads, registered receivers, etc) at this point. Upon return, there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.", "history": "Added in API level 17", "FullName": "public void onDestroy ()"}, "setScreenBright(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to keep the screen bright while dreaming."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this dream as keeping the screen bright while dreaming.", "history": "Added in API level 17", "FullName": "public void setScreenBright (boolean screenBright)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#service#dreams#DreamService#setContentView_E@"], "Permissions": [], "Description": "Sets a view to be the content view for this Dream. Behaves similarly to @B_android#app#Activity#setContentView_E@ in an activity, including using @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ as the layout height and width of the view. Note: This requires a window, so you should usually call it during @B_android#service#dreams#DreamService#onAttachedToWindow_E@ and never earlier (you @B_android#service#dreams#DreamService#onCreate_E@).", "history": "Added in API level 17", "FullName": "public void setContentView (View view)"}, "setInteractive(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this dream will handle input events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this dream as interactive to receive input events. Non-interactive dreams (default) will dismiss on the first input event. Interactive dreams should call @B_android#service#dreams#DreamService#finish_E@ to dismiss themselves.", "history": "Added in API level 17", "FullName": "public void setInteractive (boolean interactive)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been attached to the window manager. See @B_android#view#View#onAttachedToWindow_E@ for more information.", "history": "Added in API level 17", "FullName": "public void onAttachedToWindow ()"}, "dispatchGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process generic motion events. At the very least your implementation must call @B_android#view#Window#superDispatchGenericMotionEvent_E@ to do the standard processing.", "history": "Added in API level 17", "FullName": "public boolean dispatchGenericMotionEvent (MotionEvent event)"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Service's state into the given stream. This gets invoked if you run \"adb shell dumpsys activity service <yourservicename>\" (note that for this command to work, the service must be running, and you must specify a fully-qualified service name). This is distinct from \"dumpsys <servicename>\", which only works for named system services and which invokes the @B_android#os#IBinder#dump_E@ method on the @B_android#os#IBinder_E@ interface registered with ServiceManager.", "history": "Added in API level 17", "FullName": "protected void dump (FileDescriptor fd, PrintWriter pw, String[] args)"}, "onWakeUp()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the dream is being asked to stop itself and wake. The default implementation simply calls @B_android#service#dreams#DreamService#finish_E@ which ends the dream immediately. Subclasses may override this function to perform a smooth exit transition then call @B_android#service#dreams#DreamService#finish_E@ afterwards. Note that the dream will only be given a short period of time (currently about five seconds) to wake up. If the dream does not finish itself in a timely manner then the system will forcibly finish it once the time allowance is up.", "history": "Added in API level 21", "FullName": "public void onWakeUp ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.dreams.DreamService", "ClassDesc": "Extend this class to implement a custom dream (available to the user as a \"Daydream\"). Dreams are interactive screensavers launched when a charging device is idle, or docked in a desk dock. Dreams provide another modality for apps to express themselves, tailored for an exhibition/lean-back experience. The DreamService lifecycle is as follows: In addition, onCreate and onDestroy (from the Service interface) will also be called, but initialization and teardown should be done by overriding the hooks above. To be available to the system, your DreamService should be declared in the manifest as follows: If specified with the <meta-data> element, additional information for the dream is defined using the @B_android#R#styleable#Dream_E@ element in a separate XML file. Currently, the only addtional information you can provide is for a settings activity that allows the user to configure the dream behavior. For example: res/xml/my_dream.xml This makes a Settings button available alongside your dream's listing in the system settings, which when pressed opens the specified activity. To specify your dream layout, call @B_android#service#dreams#DreamService#setContentView_E@, typically during the @B_android#service#dreams#DreamService#onAttachedToWindow_E@ callback. For example: When targeting api level 21 and above, you must declare the service in your manifest file with the @B_android#Manifest#permission#BIND_DREAM_SERVICE_E@ permission. For example:"}