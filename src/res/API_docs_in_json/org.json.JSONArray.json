{"Functions": {"put(long)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends value to the end of this array.", "history": "Added in API level 1", "FullName": "public JSONArray put (long value)"}, "opt(int)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index, or null if the array has no value at index.", "history": "Added in API level 1", "FullName": "public Object opt (int index)"}, "put(int,double)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["double", "double: a finite value. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "Added in API level 1", "FullName": "public JSONArray put (int index, double value)"}, "toString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: the number of spaces to indent for each level of nesting."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Encodes this array as a human readable JSON string for debugging, such as:", "history": "Added in API level 1", "FullName": "public String toString (int indentSpaces)"}, "put(int, double)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["double", "double: a finite value. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "added in API level 1", "FullName": "public JSONArray put (int index, double value)"}, "getLong(int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value at index doesn't exist or cannot be coerced to a long."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a long or can be coerced to a long.", "history": "Added in API level 1", "FullName": "public long getLong (int index)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "getBoolean(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value at index doesn't exist or cannot be coerced to a boolean."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean.", "history": "Added in API level 1", "FullName": "public boolean getBoolean (int index)"}, "put(int, boolean)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "added in API level 1", "FullName": "public JSONArray put (int index, boolean value)"}, "optBoolean(int,boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean. Returns fallback otherwise.", "history": "Added in API level 1", "FullName": "public boolean optBoolean (int index, boolean fallback)"}, "put(int, java.lang.Object)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#Object_E@", "Object: a @B_org#json#JSONObject_E@, @B_org#json#JSONArray_E@, String, Boolean, Integer, Long, Double, @B_org#json#JSONObject#NULL_E@, or null. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "added in API level 1", "FullName": "public JSONArray put (int index, Object value)"}, "JSONArray(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a JSON-encoded string containing an array."]], "Throws": [["@B_org#json#JSONException_E@", "if the parse fails or doesn't yield a JSONArray."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JSONArray with values from the JSON string.", "history": "Added in API level 1", "FullName": "public JSONArray (String json)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "put(int,java.lang.Object)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#Object_E@", "Object: a @B_org#json#JSONObject_E@, @B_org#json#JSONArray_E@, String, Boolean, Integer, Long, Double, @B_org#json#JSONObject#NULL_E@, or null. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "Added in API level 1", "FullName": "public JSONArray put (int index, Object value)"}, "put(int,long)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["long", "long no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "Added in API level 1", "FullName": "public JSONArray put (int index, long value)"}, "getInt(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value at index doesn't exist or cannot be coerced to a int."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is an int or can be coerced to an int.", "history": "Added in API level 1", "FullName": "public int getInt (int index)"}, "put(int)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends value to the end of this array.", "history": "Added in API level 1", "FullName": "public JSONArray put (int value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encodes this array as a compact JSON string, such as:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "put(double)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["double", "double: a finite value. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@."]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Appends value to the end of this array.", "history": "Added in API level 1", "FullName": "public JSONArray put (double value)"}, "put(boolean)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends value to the end of this array.", "history": "Added in API level 1", "FullName": "public JSONArray put (boolean value)"}, "getJSONArray(int)": {"Returns": [["@B_org#json#JSONArray_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value doesn't exist or is not a JSONArray."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a JSONArray.", "history": "Added in API level 1", "FullName": "public JSONArray getJSONArray (int index)"}, "optBoolean(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean. Returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean optBoolean (int index)"}, "isNull(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this array has no value at index, or if its value is the null reference or @B_org#json#JSONObject#NULL_E@.", "history": "Added in API level 1", "FullName": "public boolean isNull (int index)"}, "length()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of values in this array.", "history": "Added in API level 1", "FullName": "public int length ()"}, "put(int,int)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "Added in API level 1", "FullName": "public JSONArray put (int index, int value)"}, "optString(int,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists, coercing it if necessary. Returns fallback if no such value exists.", "history": "Added in API level 1", "FullName": "public String optString (int index, String fallback)"}, "remove(int)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns the value at index, or null if the array has no value at index.", "history": "Added in API level 19", "FullName": "public Object remove (int index)"}, "join(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new string by alternating this array's values with separator. This array's string values are quoted and have their special characters escaped. For example, the array containing the strings '12\" pizza', 'taco' and 'soda' joined on '+' returns this:", "history": "Added in API level 1", "FullName": "public String join (String separator)"}, "optInt(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is an int or can be coerced to an int. Returns fallback otherwise.", "history": "added in API level 1", "FullName": "public int optInt (int index, int fallback)"}, "toJSONObject(org.json.JSONArray)": {"Returns": [["@B_org#json#JSONObject_E@", "no returns description in source"]], "Parameters": [["@B_org#json#JSONArray_E@", "JSONArray no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new object whose values are the values in this array, and whose names are the values in names. Names and values are paired up by index from 0 through to the shorter array's length. Names that are not strings will be coerced to strings. This method returns null if either array is empty.", "history": "Added in API level 1", "FullName": "public JSONObject toJSONObject (JSONArray names)"}, "JSONArray(org.json.JSONTokener)": {"Returns": [], "Parameters": [["@B_org#json#JSONTokener_E@", "JSONTokener: a tokener whose nextValue() method will yield a JSONArray."]], "Throws": [["@B_org#json#JSONException_E@", "if the parse fails or doesn't yield a JSONArray."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JSONArray with values from the next array in the tokener.", "history": "Added in API level 1", "FullName": "public JSONArray (JSONTokener readFrom)"}, "optJSONObject(int)": {"Returns": [["@B_org#json#JSONObject_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a JSONObject. Returns null otherwise.", "history": "Added in API level 1", "FullName": "public JSONObject optJSONObject (int index)"}, "optString(int, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists, coercing it if necessary. Returns fallback if no such value exists.", "history": "added in API level 1", "FullName": "public String optString (int index, String fallback)"}, "put(java.lang.Object)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["@B_java#lang#Object_E@", "Object: a @B_org#json#JSONObject_E@, @B_org#json#JSONArray_E@, String, Boolean, Integer, Long, Double, @B_org#json#JSONObject#NULL_E@, or null. May not be @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@. Unsupported values are not permitted and will cause the array to be in an inconsistent state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends value to the end of this array.", "history": "Added in API level 1", "FullName": "public JSONArray put (Object value)"}, "optDouble(int)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a double or can be coerced to a double. Returns NaN otherwise.", "history": "Added in API level 1", "FullName": "public double optDouble (int index)"}, "JSONArray(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JSONArray with values from the given primitive array.", "history": "Added in API level 19", "FullName": "public JSONArray (Object array)"}, "optString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists, coercing it if necessary. Returns the empty string if no such value exists.", "history": "Added in API level 1", "FullName": "public String optString (int index)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if no such value exists."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists, coercing it if necessary.", "history": "Added in API level 1", "FullName": "public String getString (int index)"}, "optLong(int, long)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a long or can be coerced to a long. Returns fallback otherwise.", "history": "added in API level 1", "FullName": "public long optLong (int index, long fallback)"}, "optDouble(int,double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a double or can be coerced to a double. Returns fallback otherwise.", "history": "Added in API level 1", "FullName": "public double optDouble (int index, double fallback)"}, "JSONArray()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a JSONArray with no values.", "history": "Added in API level 1", "FullName": "public JSONArray ()"}, "getDouble(int)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value at index doesn't exist or cannot be coerced to a double."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a double or can be coerced to a double.", "history": "Added in API level 1", "FullName": "public double getDouble (int index)"}, "put(int,boolean)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "Added in API level 1", "FullName": "public JSONArray put (int index, boolean value)"}, "optLong(int,long)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a long or can be coerced to a long. Returns fallback otherwise.", "history": "Added in API level 1", "FullName": "public long optLong (int index, long fallback)"}, "getJSONObject(int)": {"Returns": [["@B_org#json#JSONObject_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if the value doesn't exist or is not a JSONObject."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a JSONObject.", "history": "Added in API level 1", "FullName": "public JSONObject getJSONObject (int index)"}, "optLong(int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a long or can be coerced to a long. Returns 0 otherwise.", "history": "Added in API level 1", "FullName": "public long optLong (int index)"}, "optBoolean(int, boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a boolean or can be coerced to a boolean. Returns fallback otherwise.", "history": "added in API level 1", "FullName": "public boolean optBoolean (int index, boolean fallback)"}, "optDouble(int, double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a double or can be coerced to a double. Returns fallback otherwise.", "history": "added in API level 1", "FullName": "public double optDouble (int index, double fallback)"}, "optInt(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is an int or can be coerced to an int. Returns 0 otherwise.", "history": "Added in API level 1", "FullName": "public int optInt (int index)"}, "get(int)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", "if this array has no value at index, or if that value is the null reference. This method returns normally if the value is JSONObject#NULL."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index.", "history": "Added in API level 1", "FullName": "public Object get (int index)"}, "optInt(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is an int or can be coerced to an int. Returns fallback otherwise.", "history": "Added in API level 1", "FullName": "public int optInt (int index, int fallback)"}, "put(int, long)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["long", "long no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "added in API level 1", "FullName": "public JSONArray put (int index, long value)"}, "optJSONArray(int)": {"Returns": [["@B_org#json#JSONArray_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at index if it exists and is a JSONArray. Returns null otherwise.", "history": "Added in API level 1", "FullName": "public JSONArray optJSONArray (int index)"}, "put(int, int)": {"Returns": [["@B_org#json#JSONArray_E@", "this array."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_org#json#JSONException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced.", "history": "added in API level 1", "FullName": "public JSONArray put (int index, int value)"}, "JSONArray(java.util.Collection)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: a collection whose values are of supported types. Unsupported values are not permitted and will yield an array in an inconsistent state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JSONArray by copying all values from the given collection.", "history": "Added in API level 1", "FullName": "public JSONArray (Collection copyFrom)"}}, "Inheritance": [], "ClassName": "org.json.JSONArray", "ClassDesc": "A dense indexed sequence of values. Values may be any mix of @B_org#json#JSONObject_E@, other @B_org#json#JSONArray_E@, Strings, Booleans, Integers, Longs, Doubles, null or @B_org#json#JSONObject#NULL_E@. Values may not be @B_java#lang#Double#isNaN_E@, @B_java#lang#Double#isInfinite_E@, or of any type not listed here. JSONArray has the same type coercion behavior and optional/mandatory accessors as @B_org#json#JSONObject_E@. See that class' documentation for details. null reference, and the sentinel value @B_org#json#JSONObject#NULL_E@. In particular, get fails if the requested index holds the null reference, but succeeds if it holds JSONObject.NULL. Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overridable methods is not specified. See"}