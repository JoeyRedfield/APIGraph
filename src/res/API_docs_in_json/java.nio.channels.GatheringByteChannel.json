{"Functions": {"write(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the write operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the write operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffers. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs)"}, "write(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the write operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the write operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. An attempt is made to write up to Suppose that a byte sequence of length Unless otherwise specified, a write operation will return only after writing all of the This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "write(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the write operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the write operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. An attempt is made to write up to Suppose that a byte sequence of length Unless otherwise specified, a write operation will return only after writing all of the This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "Added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}}, "Inheritance": [], "ClassName": "java.nio.channels.GatheringByteChannel", "ClassDesc": "A channel that can write bytes from a sequence of buffers. A @B_java#nio#channels#ScatteringByteChannel_E@ interface."}