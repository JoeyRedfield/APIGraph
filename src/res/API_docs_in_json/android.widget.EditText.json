{"Functions": {"EditText(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public EditText (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getDefaultEditable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options.", "history": "Added in API level 1", "FullName": "protected boolean getDefaultEditable ()"}, "getFreezesText()": {"Returns": [["boolean", "Returns true if text is included, false if it isn't."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this text view is including its entire text contents in frozen icicles. For @B_android#widget#EditText_E@ it always returns true.", "history": "Added in API level 1", "FullName": "public boolean getFreezesText ()"}, "EditText(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public EditText (Context context, AttributeSet attrs, int defStyleAttr)"}, "EditText(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public EditText (Context context, AttributeSet attrs)"}, "setEllipsize(android.text.TextUtils.TruncateAt)": {"Returns": [], "Parameters": [["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: Type of ellipsis to be applied."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the value of ellipsis parameter is @B_android#text#TextUtils#TruncateAt#MARQUEE_E@."]], "SeeAlso": ["@B_android#widget#TextView#setEllipsize_E@"], "Permissions": [], "Description": "Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. @B_android#text#TextUtils#TruncateAt#MARQUEE_E@ is not supported.", "history": "Added in API level 1", "FullName": "public void setEllipsize (TextUtils.TruncateAt ellipsis)"}, "setSelection(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#setSelection_E@.", "history": "Added in API level 1", "FullName": "public void setSelection (int start, int stop)"}, "getText()": {"Returns": [["@B_android#text#Editable_E@", "The text displayed by the text view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text that TextView is displaying. If @B_android#widget#TextView#setText_E@ was called with an argument of @B_android#widget#TextView#BufferType#SPANNABLE_E@ or @B_android#widget#TextView#BufferType#EDITABLE_E@, you can cast the return value from this method to Spannable or Editable, respectively. The content of the return value should not be modified. If you want a modifiable one, you should make your own copy first.", "history": "Added in API level 1", "FullName": "public Editable getText ()"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call. The default implementation will delegate @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_FORWARD_E@ to nested scrolling parents if @B_android#view#View#isNestedScrollingEnabled_E@ on this view.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "extendSelection(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#extendSelection_E@.", "history": "Added in API level 1", "FullName": "public void extendSelection (int index)"}, "setText(java.lang.CharSequence,android.widget.TextView.BufferType)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be displayed"], ["@B_android#widget#TextView#BufferType_E@", "TextView.BufferType: a @B_android#widget#TextView#BufferType_E@ which defines whether the text is stored as a static text, styleable/spannable text, or editable text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text to be displayed and the @B_android#widget#TextView#BufferType_E@. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@. Subclasses overriding this method should ensure that the following post condition holds, in order to guarantee the safety of the view's measurement and layout operations: regardless of the input, after calling #setText both mText and mTransformed will be different from null.", "history": "Added in API level 1", "FullName": "public void setText (CharSequence text, TextView.BufferType type)"}, "getDefaultMovementMethod()": {"Returns": [["@B_android#text#method#MovementMethod_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses override this to specify a default movement method.", "history": "Added in API level 1", "FullName": "protected MovementMethod getDefaultMovementMethod ()"}, "setSelection(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#setSelection_E@.", "history": "added in API level 1", "FullName": "public void setSelection (int start, int stop)"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#setSelection_E@.", "history": "Added in API level 1", "FullName": "public void setSelection (int index)"}, "selectAll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#selectAll_E@.", "history": "Added in API level 1", "FullName": "public void selectAll ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "EditText(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public EditText (Context context)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@"], "ClassName": "android.widget.EditText", "ClassDesc": "A user interface element for entering and modifying text. When you define an edit text widget, you must specify the @B_android#R#styleable#TextView_inputType_E@ attribute. For example, for plain text input set inputType to \"text\": See the @B_android#R#styleable#TextView_inputType_E@ settings. You also can receive callbacks as a user changes text by adding a @B_android#text#TextWatcher_E@ to the edit text. This is useful when you want to add auto-save functionality as changes are made, or validate the format of user input, for example. You add a text watcher using the @B_android#widget#TextView#addTextChangedListener_E@ method. This widget does not support auto-sizing text. See @B_android#R#styleable#EditText_E@, @B_android#R#styleable#TextView_E@, @B_android#R#styleable#View_E@"}