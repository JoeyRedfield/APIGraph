{"Functions": {"onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 14", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses of TextureView cannot do their own rendering with the @B_android#graphics#Canvas_E@ object.", "history": "Added in API level 14", "FullName": "public final void draw (Canvas canvas)"}, "setLayerPaint(android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the @B_android#graphics#Paint_E@ object used with the current layer (used only if the current layer type is not set to @B_android#view#View#LAYER_TYPE_NONE_E@). Changed properties of the Paint provided to @B_android#view#View#setLayerType_E@ will be used the next time the View is redrawn, but @B_android#view#View#setLayerPaint_E@ must be called to ensure that the view gets redrawn immediately. A layer is associated with an optional @B_android#graphics#Paint_E@ instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer: @B_android#graphics#Paint#getAlpha_E@ @B_android#graphics#Paint#getXfermode_E@ @B_android#graphics#Paint#getColorFilter_E@ If this view has an alpha value set to < 1.0 by calling @B_android#view#View#setAlpha_E@, the alpha value of the layer's paint is superseded by this view's alpha value.", "history": "Added in API level 17", "FullName": "public void setLayerPaint (Paint paint)"}, "isOpaque()": {"Returns": [["boolean", "True if this View is guaranteed to be fully opaque, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this View is opaque. An opaque View guarantees that it will draw all the pixels overlapping its bounds using a fully opaque color. Subclasses of View should override this method whenever possible to indicate whether an instance is opaque. Opaque Views are treated in a special way by the View hierarchy, possibly allowing it to perform optimizations during invalidate/draw passes.", "history": "Added in API level 14", "FullName": "public boolean isOpaque ()"}, "getBitmap(int,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A valid @B_android#graphics#Bitmap#Config#ARGB_8888_E@ bitmap, or null if the surface texture is not available or width is <= 0 or height is <= 0"]], "Parameters": [["int", "int: The width of the bitmap to create"], ["int", "int: The height of the bitmap to create"]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#isAvailable_E@", "@B_android#view#TextureView#getBitmap_E@"], "Permissions": [], "Description": "Returns a @B_android#graphics#Bitmap_E@ representation of the content of the associated surface texture. If the surface texture is not available, this method returns null. The bitmap returned by this method uses the @B_android#graphics#Bitmap#Config#ARGB_8888_E@ pixel format. @B_android#view#TextureView#onDraw_E@ for instance). If an error occurs during the copy, an empty bitmap will be returned.", "history": "Added in API level 14", "FullName": "public Bitmap getBitmap (int width, int height)"}, "TextureView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to associate this view with."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TextureView.", "history": "Added in API level 14", "FullName": "public TextureView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getLayerType()": {"Returns": [["int", "@B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@ Value is @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@, or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns @B_android#view#View#LAYER_TYPE_HARDWARE_E@.", "history": "Added in API level 14", "FullName": "public int getLayerType ()"}, "setLayerType(int,android.graphics.Paint)": {"Returns": [], "Parameters": [["int", "int: The type of layer to use with this view, must be one of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is @B_android#view#View#LAYER_TYPE_NONE_E@ This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The layer type of a TextureView is ignored since a TextureView is always considered to act as a hardware layer. The optional paint supplied to this method will however be taken into account when rendering the content of this TextureView.", "history": "Added in API level 14", "FullName": "public void setLayerType (int layerType, Paint paint)"}, "getSurfaceTexture()": {"Returns": [["@B_android#graphics#SurfaceTexture_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#isAvailable_E@"], "Permissions": [], "Description": "Returns the @B_android#graphics#SurfaceTexture_E@ used by this view. This method may return null if the view is not attached to a window or if the surface texture has not been initialized yet.", "history": "Added in API level 14", "FullName": "public SurfaceTexture getSurfaceTexture ()"}, "TextureView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to associate this view with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TextureView.", "history": "Added in API level 14", "FullName": "public TextureView (Context context)"}, "getBitmap(android.graphics.Bitmap)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The bitmap specified as a parameter"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to copy the content of the surface texture into, cannot be null, all configurations are supported"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the hardware rendering context cannot be acquired to capture the bitmap"]], "SeeAlso": ["@B_android#view#TextureView#isAvailable_E@", "@B_android#view#TextureView#getBitmap_E@"], "Permissions": [], "Description": "Copies the content of this view's surface texture into the specified bitmap. If the surface texture is not available, the copy is not executed. The content of the surface texture will be scaled to fit exactly inside the specified bitmap. @B_android#view#TextureView#onDraw_E@ for instance). If an error occurs, the bitmap is left unchanged.", "history": "Added in API level 14", "FullName": "public Bitmap getBitmap (Bitmap bitmap)"}, "setTransform(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The transform to apply to the content of this view."]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#getTransform_E@", "@B_android#view#TextureView#isOpaque_E@", "@B_android#view#TextureView#setOpaque_E@"], "Permissions": [], "Description": "Sets the transform to associate with this texture view. The specified transform applies to the underlying surface texture and does not affect the size or position of the view itself, only of its content. Some transforms might prevent the content from drawing all the pixels contained within this view's bounds. In such situations, make sure this texture view is not marked opaque.", "history": "Added in API level 14", "FullName": "public void setTransform (Matrix transform)"}, "getTransform(android.graphics.Matrix)": {"Returns": [["@B_android#graphics#Matrix_E@", "The specified matrix if not null or a new @B_android#graphics#Matrix_E@ instance otherwise."]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The @B_android#graphics#Matrix_E@ in which to copy the current transform. Can be null."]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#setTransform_E@"], "Permissions": [], "Description": "Returns the transform associated with this texture view.", "history": "Added in API level 14", "FullName": "public Matrix getTransform (Matrix transform)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 14", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "TextureView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to associate this view with."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TextureView.", "history": "Added in API level 21", "FullName": "public TextureView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "isAvailable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the @B_android#graphics#SurfaceTexture_E@ associated with this TextureView is available for rendering. When this method returns true, @B_android#view#TextureView#getSurfaceTexture_E@ returns a valid surface texture.", "history": "Added in API level 14", "FullName": "public boolean isAvailable ()"}, "setLayerType(int, android.graphics.Paint)": {"Returns": [], "Parameters": [["int", "int: The type of layer to use with this view, must be one of @B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"], ["@B_android#graphics#Paint_E@", "Paint: The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is @B_android#view#View#LAYER_TYPE_NONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The layer type of a TextureView is ignored since a TextureView is always considered to act as a hardware layer. The optional paint supplied to this method will however be taken into account when rendering the content of this TextureView.", "history": "added in API level 14", "FullName": "public void setLayerType (int layerType, Paint paint)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "Added in API level 14", "FullName": "protected void onDetachedFromWindow ()"}, "unlockCanvasAndPost(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas previously returned by lockCanvas()"]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#lockCanvas_E@"], "Permissions": [], "Description": "Finish editing pixels in the surface. After this call, the surface's current pixels will be shown on the screen, but its content is lost, in particular there is no guarantee that the content of the Surface will remain unchanged when lockCanvas() is called again.", "history": "Added in API level 14", "FullName": "public void unlockCanvasAndPost (Canvas canvas)"}, "TextureView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to associate this view with."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TextureView.", "history": "Added in API level 14", "FullName": "public TextureView (Context context, AttributeSet attrs)"}, "onVisibilityChanged(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view. This value must never be null."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 14", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "setSurfaceTexture(android.graphics.SurfaceTexture)": {"Returns": [], "Parameters": [["@B_android#graphics#SurfaceTexture_E@", "SurfaceTexture: The @B_android#graphics#SurfaceTexture_E@ that the view should use."]], "Throws": [], "SeeAlso": ["@B_android#graphics#SurfaceTexture#detachFromGLContext_E@"], "Permissions": [], "Description": "Set the @B_android#graphics#SurfaceTexture_E@ for this view to use. If a @B_android#graphics#SurfaceTexture_E@ is already being used by this view, it is immediately released and not usable any more. The @B_android#view#TextureView#SurfaceTextureListener#onSurfaceTextureDestroyed_E@ callback is @B_android#graphics#SurfaceTexture_E@. Similarly, the @B_android#view#TextureView#SurfaceTextureListener#onSurfaceTextureAvailable_E@ callback is @B_android#graphics#SurfaceTexture_E@ passed to setSurfaceTexture. The @B_android#graphics#SurfaceTexture_E@ object must be detached from all OpenGL ES contexts prior to calling this method.", "history": "Added in API level 16", "FullName": "public void setSurfaceTexture (SurfaceTexture surfaceTexture)"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#View#setBackground_E@ instead", "history": "Added in API level 14", "FullName": "public void setBackgroundDrawable (Drawable background)"}, "setForeground(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the Drawable to be drawn on top of the children"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Supply a Drawable that is to be rendered on top of all of the content in the view.", "history": "Added in API level 23", "FullName": "public void setForeground (Drawable foreground)"}, "getBitmap()": {"Returns": [["@B_android#graphics#Bitmap_E@", "A valid @B_android#graphics#Bitmap#Config#ARGB_8888_E@ bitmap, or null if the surface texture is not available or the width <= 0 or the height <= 0"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#isAvailable_E@", "@B_android#view#TextureView#getBitmap_E@"], "Permissions": [], "Description": "Returns a @B_android#graphics#Bitmap_E@ representation of the content of the associated surface texture. If the surface texture is not available, this method returns null. The bitmap returned by this method uses the @B_android#graphics#Bitmap#Config#ARGB_8888_E@ pixel format and its dimensions are the same as this view's. @B_android#view#TextureView#onDraw_E@ for instance). If an error occurs during the copy, an empty bitmap will be returned.", "history": "Added in API level 14", "FullName": "public Bitmap getBitmap ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "protected void onAttachedToWindow ()"}, "lockCanvas(android.graphics.Rect)": {"Returns": [["@B_android#graphics#Canvas_E@", "A Canvas used to draw into the surface."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: Area of the surface that will be modified."]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#lockCanvas_E@", "@B_android#view#TextureView#unlockCanvasAndPost_E@", "@B_android#view#TextureView#isAvailable_E@"], "Permissions": [], "Description": "Just like @B_android#view#TextureView#lockCanvas_E@ but allows specification of a dirty rectangle. Every pixel within that rectangle must be written; however pixels outside the dirty rectangle will be preserved by the next call to lockCanvas(). This method can return null if the underlying surface texture is not available (see @B_android#view#TextureView#isAvailable_E@ or if the surface texture is already connected to an image producer (for instance: the camera, OpenGL, a media player, etc.)", "history": "Added in API level 14", "FullName": "public Canvas lockCanvas (Rect dirty)"}, "setOpaque(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the content of this TextureView is opaque, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the content of this TextureView is opaque. The content is assumed to be opaque by default.", "history": "Added in API level 14", "FullName": "public void setOpaque (boolean opaque)"}, "setSurfaceTextureListener(android.view.TextureView.SurfaceTextureListener)": {"Returns": [], "Parameters": [["@B_android#view#TextureView#SurfaceTextureListener_E@", "TextureView.SurfaceTextureListener no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#getSurfaceTextureListener_E@", "@B_android#view#TextureView#SurfaceTextureListener_E@"], "Permissions": [], "Description": "Sets the @B_android#view#TextureView#SurfaceTextureListener_E@ used to listen to surface texture events.", "history": "Added in API level 14", "FullName": "public void setSurfaceTextureListener (TextureView.SurfaceTextureListener listener)"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "added in API level 14", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "getBitmap(int, int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A valid @B_android#graphics#Bitmap#Config#ARGB_8888_E@ bitmap, or null if the surface texture is not available or width is <= 0 or height is <= 0"]], "Parameters": [["int", "int: The width of the bitmap to create"], ["int", "int: The height of the bitmap to create"]], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#isAvailable_E@", "@B_android#view#TextureView#getBitmap_E@"], "Permissions": [], "Description": "Returns a @B_android#graphics#Bitmap_E@ representation of the content of the associated surface texture. If the surface texture is not available, this method returns null. The bitmap returned by this method uses the @B_android#graphics#Bitmap#Config#ARGB_8888_E@ pixel format. @B_android#view#TextureView#onDraw_E@ for instance). If an error occurs during the copy, an empty bitmap will be returned.", "history": "added in API level 14", "FullName": "public Bitmap getBitmap (int width, int height)"}, "getSurfaceTextureListener()": {"Returns": [["@B_android#view#TextureView#SurfaceTextureListener_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#setSurfaceTextureListener_E@", "@B_android#view#TextureView#SurfaceTextureListener_E@"], "Permissions": [], "Description": "Returns the @B_android#view#TextureView#SurfaceTextureListener_E@ currently associated with this texture view.", "history": "Added in API level 14", "FullName": "public TextureView.SurfaceTextureListener getSurfaceTextureListener ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses of TextureView cannot do their own rendering with the @B_android#graphics#Canvas_E@ object.", "history": "Added in API level 14", "FullName": "protected final void onDraw (Canvas canvas)"}, "lockCanvas()": {"Returns": [["@B_android#graphics#Canvas_E@", "A Canvas used to draw into the surface."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#TextureView#lockCanvas_E@", "@B_android#view#TextureView#unlockCanvasAndPost_E@"], "Permissions": [], "Description": "Start editing the pixels in the surface. The returned Canvas can be used to draw into the surface's bitmap. A null is returned if the surface has not been created or otherwise cannot be edited. You will usually need to implement @B_android#view#TextureView#SurfaceTextureListener#onSurfaceTextureAvailable_E@ to find out when the Surface is available for use. The content of the Surface is never preserved between unlockCanvas() and lockCanvas(), for this reason, every pixel within the Surface area must be written. The only exception to this rule is when a dirty rectangle is specified, in which case, non-dirty pixels will be preserved. This method can only be used if the underlying surface is not already owned by another producer. For instance, if the TextureView is being used to render the camera's preview you cannot invoke this method.", "history": "Added in API level 14", "FullName": "public Canvas lockCanvas ()"}, "buildLayer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calling this method has no effect.", "history": "Added in API level 14", "FullName": "public void buildLayer ()"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.view.TextureView", "ClassDesc": "A TextureView can be used to display a content stream. Such a content stream can for instance be a video or an OpenGL scene. The content stream can come from the application's process as well as a remote process. TextureView can only be used in a hardware accelerated window. When rendered in software, TextureView will draw nothing. Unlike @B_android#view#SurfaceView_E@, TextureView does not create a separate window but behaves as a regular View. This key difference allows a TextureView to be moved, transformed, animated, etc. For instance, you can make a TextureView semi-translucent by calling myView.setAlpha(0.5f). Using a TextureView is simple: all you need to do is get its @B_android#graphics#SurfaceTexture_E@. The @B_android#graphics#SurfaceTexture_E@ can then be used to render content. The following example demonstrates how to render the camera preview into a TextureView: A TextureView's SurfaceTexture can be obtained either by invoking @B_android#view#TextureView#getSurfaceTexture_E@ or by using a @B_android#view#TextureView#SurfaceTextureListener_E@. It is important to know that a SurfaceTexture is available only after the TextureView is attached to a window (and @B_android#view#TextureView#onAttachedToWindow_E@ has been invoked.) It is therefore highly recommended you use a listener to be notified when the SurfaceTexture becomes available. It is important to note that only one producer can use the TextureView. For instance, if you use a TextureView to display the camera preview, you cannot use @B_android#view#TextureView#lockCanvas_E@ to draw onto the TextureView at the same time."}