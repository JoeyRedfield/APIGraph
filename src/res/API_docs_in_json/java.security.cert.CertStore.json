{"Functions": {"getCRLs(java.security.cert.CRLSelector)": {"Returns": [["@B_java#util#Collection_E@", "A Collection of CRLs that match the specified selector (never null)"]], "Parameters": [["@B_java#security#cert#CRLSelector_E@", "CRLSelector: A CRLSelector used to select which CRLs should be returned. Specify null to return all CRLs (if supported)."]], "Throws": [["@B_java#security#cert#CertStoreException_E@", "if an exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collection of CRLs that match the specified selector. If no CRLs match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain CRLs that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the CRLs it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CRLSelector is provided that includes specific criteria that can be used to find the CRLs. Issuer names and/or the certificate to be checked are especially useful.", "history": "Added in API level 1", "FullName": "public final Collection<? extends CRL> getCRLs (CRLSelector selector)"}, "CertStore(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertStoreSpi_E@", "CertStoreSpi: the provider implementation"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the type"], ["@B_java#security#cert#CertStoreParameters_E@", "CertStoreParameters: the initialization parameters (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CertStore object of the given type, and encapsulates the given provider implementation (SPI object) in it.", "history": "Added in API level 1", "FullName": "protected CertStore (CertStoreSpi storeSpi, Provider provider, String type, CertStoreParameters params)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the type of this CertStore"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this CertStore.", "history": "Added in API level 1", "FullName": "public final String getType ()"}, "getInstance(java.lang.String,java.security.cert.CertStoreParameters)": {"Returns": [["@B_java#security#cert#CertStore_E@", "a CertStore object that implements the specified CertStore type."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertStore type. See the CertStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard types."], ["@B_java#security#cert#CertStoreParameters_E@", "CertStoreParameters: the initialization parameters (may be null)."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a CertStoreSpi implementation for the specified type."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified initialization parameters are inappropriate for this CertStore."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertStore object encapsulating the CertStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.", "history": "Added in API level 1", "FullName": "public static CertStore getInstance (String type, CertStoreParameters params)"}, "getCertStoreParameters()": {"Returns": [["@B_java#security#cert#CertStoreParameters_E@", "the parameters used to initialize this CertStore (may be null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameters used to initialize this CertStore. Note that the CertStoreParameters object is cloned before it is returned.", "history": "Added in API level 1", "FullName": "public final CertStoreParameters getCertStoreParameters ()"}, "getCertificates(java.security.cert.CertSelector)": {"Returns": [["@B_java#util#Collection_E@", "A Collection of Certificates that match the specified selector (never null)"]], "Parameters": [["@B_java#security#cert#CertSelector_E@", "CertSelector: A CertSelector used to select which Certificates should be returned. Specify null to return all Certificates (if supported)."]], "Throws": [["@B_java#security#cert#CertStoreException_E@", "if an exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collection of Certificates that match the specified selector. If no Certificates match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain Certificates that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the Certificates it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CertSelector is provided that includes specific criteria that can be used to find the certificates. Issuer and/or subject names are especially useful criteria.", "history": "Added in API level 1", "FullName": "public final Collection<? extends Certificate> getCertificates (CertSelector selector)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this CertStore"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this CertStore.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)": {"Returns": [["@B_java#security#cert#CertStore_E@", "a CertStore object that implements the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the requested CertStore type. See the CertStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard types."], ["@B_java#security#cert#CertStoreParameters_E@", "CertStoreParameters: the initialization parameters (may be null)."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertStoreSpi implementation for the specified type is not available from the specified Provider object."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified initialization parameters are inappropriate for this CertStore"], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertStore object that implements the specified CertStore type. A new CertStore object encapsulating the CertStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.", "history": "Added in API level 1", "FullName": "public static CertStore getInstance (String type, CertStoreParameters params, Provider provider)"}, "getDefaultType()": {"Returns": [["@B_java#lang#String_E@", "the default CertStore type as specified by the certstore.type security property, or the string \"LDAP\" if no such property exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Security_E@"], "Permissions": [], "Description": "Returns the default CertStore type as specified by the certstore.type security property, or the string \"LDAP\" if no such property exists. The default CertStore type can be used by applications that do not want to use a hard-coded type when calling one of the getInstance methods, and want to provide a default CertStore type in case a user does not specify its own. The default CertStore type can be changed by setting the value of the certstore.type security property to the desired type.", "history": "Added in API level 1", "FullName": "public static final String getDefaultType ()"}, "getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)": {"Returns": [["@B_java#security#cert#CertStore_E@", "a CertStore object that implements the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the requested CertStore type. See the CertStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard types."], ["@B_java#security#cert#CertStoreParameters_E@", "CertStoreParameters: the initialization parameters (may be null)."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertStoreSpi implementation for the specified type is not available from the specified provider."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified initialization parameters are inappropriate for this CertStore."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertStore object that implements the specified CertStore type. A new CertStore object encapsulating the CertStoreSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.", "history": "Added in API level 1", "FullName": "public static CertStore getInstance (String type, CertStoreParameters params, String provider)"}}, "Inheritance": [], "ClassName": "java.security.cert.CertStore", "ClassDesc": "A class for retrieving Certificates and CRLs from a repository. This class uses a provider-based architecture. To create a CertStore, call one of the static getInstance methods, passing in the type of CertStore desired, any applicable initialization parameters and optionally the name of the provider desired. Once the CertStore has been created, it can be used to retrieve Certificates and CRLs by calling its @B_java#security#cert#CertStore#getCertificates_E@ and @B_java#security#cert#CertStore#getCRLs_E@ methods. Unlike a @B_java#security#KeyStore_E@, which provides access to a cache of private keys and trusted certificates, a CertStore is designed to provide access to a potentially vast repository of untrusted certificates and CRLs. For example, an LDAP implementation of CertStore provides access to certificates and CRLs stored in one or more directories using the LDAP protocol and the schema as defined in the RFC service attribute. Android provides the following CertStore types: All public methods of CertStore objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single CertStore object (or more than one) with no ill effects. This allows a CertPathBuilder to search for a CRL while simultaneously searching for further certificates, for instance. The static methods of this class are also guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects."}