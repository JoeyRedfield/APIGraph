{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Comparison operator on two Messenger objects, such that true is returned then they both point to the same Handler.", "history": "Added in API level 1", "FullName": "public boolean equals (Object otherObj)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "readMessengerOrNullFromParcel(android.os.Parcel)": {"Returns": [["@B_android#os#Messenger_E@", "Returns the Messenger read from the Parcel, or null if null had been written."]], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel containing the written Messenger."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for reading either a Messenger or null pointer from a Parcel. You must have previously written the Messenger with @B_android#os#Messenger#writeMessengerOrNullToParcel_E@.", "history": "Added in API level 1", "FullName": "public static Messenger readMessengerOrNullFromParcel (Parcel in)"}, "Messenger(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The IBinder this Messenger should communicate with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Messenger from a raw IBinder, which had previously been retrieved with @B_android#os#Messenger#getBinder_E@.", "history": "Added in API level 1", "FullName": "public Messenger (IBinder target)"}, "Messenger(android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#os#Handler_E@", "Handler: The Handler that will receive sent messages."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new Messenger pointing to the given Handler. Any Message objects sent through this Messenger will appear in the Handler as if @B_android#os#Handler#sendMessage_E@ had been called directly.", "history": "Added in API level 1", "FullName": "public Messenger (Handler target)"}, "writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Messenger_E@", "Messenger: The Messenger to write, or null."], ["@B_android#os#Parcel_E@", "Parcel: Where to write the Messenger."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for writing either a Messenger or null pointer to a Parcel. You must use this with @B_android#os#Messenger#readMessengerOrNullFromParcel_E@ for later reading it.", "history": "Added in API level 1", "FullName": "public static void writeMessengerOrNullToParcel (Messenger messenger, Parcel out)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "getBinder()": {"Returns": [["@B_android#os#IBinder_E@", "Returns the IBinder backing this Messenger."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the IBinder that this Messenger is using to communicate with its associated Handler.", "history": "Added in API level 1", "FullName": "public IBinder getBinder ()"}, "send(android.os.Message)": {"Returns": [], "Parameters": [["@B_android#os#Message_E@", "Message: The Message to send. Usually retrieved through @B_android#os#Message#obtain_E@."]], "Throws": [["@B_android#os#RemoteException_E@", "Throws DeadObjectException if the target Handler no longer exists."]], "SeeAlso": [], "Permissions": [], "Description": "Send a Message to this Messenger's Handler.", "history": "Added in API level 1", "FullName": "public void send (Message message)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.os.Messenger", "ClassDesc": "Reference to a Handler, which others can use to send messages to it. This allows for the implementation of message-based communication across processes, by creating a Messenger pointing to a Handler in one process, and handing that Messenger to another process. Note: the implementation underneath is just a simple wrapper around a @B_android#os#Binder_E@ that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc."}