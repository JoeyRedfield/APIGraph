{"Functions": {"onGetSupportedVoiceActions(java.util.Set<java.lang.String>)": {"Returns": [["@B_java#util#Set_E@", "Returns a subset of checked voice actions. Additional voice actions in the returned set will be ignored. Returns empty set if no actions are supported. This value will never be null."]], "Parameters": [["@B_java#util#Set_E@", "Set: A set of checked voice actions. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to query for what extended voice actions this service supports. This method will be called when the system checks the supported actions of this @B_android#service#voice#VoiceInteractionService_E@. Supported actions may be delivered to @B_android#service#voice#VoiceInteractionSession_E@ later to request a session to perform an action. Voice actions are defined in support libraries and could vary based on platform context. For example, car related voice actions will be defined in car support libraries.", "history": "Added in API level 29", "FullName": "public Set<String> onGetSupportedVoiceActions (Set<String> voiceActions)"}, "onLaunchVoiceAssistFromKeyguard()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user has activated an affordance to launch voice assist from the Keyguard. This method will only be called if the VoiceInteractionService has set @B_android#R#attr#supportsLaunchVoiceAssistFromKeyguard_E@ and the Keyguard is showing. A valid implementation must start a new activity that should use @B_android#view#WindowManager#LayoutParams#FLAG_SHOW_WHEN_LOCKED_E@ to display on top of the lock screen.", "history": "Added in API level 23", "FullName": "public void onLaunchVoiceAssistFromKeyguard ()"}, "onShutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called during service de-initialization to tell you when the system is shutting the service down. At this point this service may no longer be the active @B_android#service#voice#VoiceInteractionService_E@.", "history": "Added in API level 21", "FullName": "public void onShutdown ()"}, "getDisabledShowContext()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value set by @B_android#service#voice#VoiceInteractionService#setDisabledShowContext_E@.", "history": "Added in API level 23", "FullName": "public int getDisabledShowContext ()"}, "setDisabledShowContext(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set contextual options you would always like to have disabled when a session is shown. The flags may be any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@.", "history": "Added in API level 23", "FullName": "public void setDisabledShowContext (int flags)"}, "showSession(android.os.Bundle,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary arguments that will be propagated to the session."], ["int", "int: Indicates additional optional behavior that should be performed. May be any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@ to request that the system generate and deliver assist data on the current foreground app as part of showing the session UI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the associated @B_android#service#voice#VoiceInteractionSession_E@ be shown to the user, starting it if necessary.", "history": "Added in API level 23", "FullName": "public void showSession (Bundle args, int flags)"}, "VoiceInteractionService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public VoiceInteractionService ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 21", "FullName": "public IBinder onBind (Intent intent)"}, "createAlwaysOnHotwordDetector(java.lang.String,java.util.Locale,android.service.voice.AlwaysOnHotwordDetector.Callback)": {"Returns": [["@B_android#service#voice#AlwaysOnHotwordDetector_E@", "An always-on hotword detector for the given keyphrase and locale."]], "Parameters": [["@B_java#lang#String_E@", "String: The keyphrase that's being used, for example \"Hello Android\"."], ["@B_java#util#Locale_E@", "Locale: The locale for which the enrollment needs to be performed."], ["@B_android#service#voice#AlwaysOnHotwordDetector#Callback_E@", "AlwaysOnHotwordDetector.Callback: The callback to notify of detection events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#service#voice#AlwaysOnHotwordDetector_E@ for the given keyphrase and locale. This instance must be retained and used by the client. Calling this a second time invalidates the previously created hotword detector which can no longer be used to manage recognition.", "history": "Added in API level 21", "FullName": "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector (String keyphrase, Locale locale, AlwaysOnHotwordDetector.Callback callback)"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Service's state into the given stream. This gets invoked if you run \"adb shell dumpsys activity service <yourservicename>\" (note that for this command to work, the service must be running, and you must specify a fully-qualified service name). This is distinct from \"dumpsys <servicename>\", which only works for named system services and which invokes the @B_android#os#IBinder#dump_E@ method on the @B_android#os#IBinder_E@ interface registered with ServiceManager.", "history": "Added in API level 21", "FullName": "protected void dump (FileDescriptor fd, PrintWriter pw, String[] args)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the service is first created. Do not call this method directly.", "history": "added in API level 21", "FullName": "public void onCreate ()"}, "showSession(android.os.Bundle, int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary arguments that will be propagated to the session."], ["int", "int: Indicates additional optional behavior that should be performed. May be any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@ to request that the system generate and deliver assist data on the current foreground app as part of showing the session UI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the associated @B_android#service#voice#VoiceInteractionSession_E@ be shown to the user, starting it if necessary.", "history": "added in API level 23", "FullName": "public void showSession (Bundle args, int flags)"}, "setUiHints(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arguments used to show UI. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide hints to be reflected in the system UI.", "history": "Added in API level 29", "FullName": "public final void setUiHints (Bundle hints)"}, "onReady()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called during service initialization to tell you when the system is ready to receive interaction from it. You should generally do initialization here rather than in @B_android#app#Service#onCreate_E@. Methods such as @B_android#service#voice#VoiceInteractionService#showSession_E@ and @B_android#service#voice#VoiceInteractionService#createAlwaysOnHotwordDetector_E@ will not be operational until this point.", "history": "Added in API level 21", "FullName": "public void onReady ()"}, "isActiveService(android.content.Context,android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#content#ComponentName_E@", "ComponentName no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the given service component is the currently active VoiceInteractionService.", "history": "Added in API level 21", "FullName": "public static boolean isActiveService (Context context, ComponentName service)"}, "startSession(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Arbitrary arguments that will be propagated to the session."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiate the execution of a new @B_android#service#voice#VoiceInteractionSession_E@.", "history": "Added in API level 21", "FullName": "public void startSession (Bundle args)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.voice.VoiceInteractionService", "ClassDesc": "Top-level service of the current global voice interactor, which is providing support for hotwording, the back-end of a @B_android#app#VoiceInteractor_E@, etc. The current VoiceInteractionService that has been selected by the user is kept always running by the system, to allow it to do things like listen for hotwords in the background to instigate voice interactions. Because this service is always running, it should be kept as lightweight as possible. Heavy-weight operations (including showing UI) should be implemented in the associated @B_android#service#voice#VoiceInteractionSessionService_E@ when an actual voice interaction is taking place, and that service should run in a separate process from this one."}