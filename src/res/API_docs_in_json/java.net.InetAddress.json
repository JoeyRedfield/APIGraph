{"Functions": {"getByAddress(byte[])": {"Returns": [["@B_java#net#InetAddress_E@", "an InetAddress object created from the raw IP address."]], "Parameters": [["byte[]", "byte: the raw IP address in network byte order"]], "Throws": [["@B_java#net#UnknownHostException_E@", "if IP address is of illegal length"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an InetAddress object given the raw IP address . The argument is in network byte order: the highest order byte of the address is in getAddress()[0]. This method doesn't block, i.e. no reverse name service lookup is performed. IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long", "history": "Added in API level 1", "FullName": "public static InetAddress getByAddress (byte[] addr)"}, "isMCOrgLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has organization scope.", "history": "Added in API level 1", "FullName": "public boolean isMCOrgLocal ()"}, "isReachable(java.net.NetworkInterface,int,int)": {"Returns": [["boolean", "a booleanindicating if the address is reachable."]], "Parameters": [["@B_java#net#NetworkInterface_E@", "NetworkInterface: the NetworkInterface through which the test will be done, or null for any interface"], ["int", "int: the maximum numbers of hops to try or 0 for the default"], ["int", "int: the time, in milliseconds, before the call aborts"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either timeout or ttl are negative."], ["@B_java#io#IOException_E@", "if a network error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Test whether that address is reachable. Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. Android implementation attempts ICMP ECHO REQUESTs first, on failure it will fall back to TCP ECHO REQUESTs. Success on either protocol will return true. The network interface and ttl parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the ttl will result in an IllegalArgumentException being thrown. The timeout value, in milliseconds, indicates the maximum amount of time the try should take. If the operation times out before getting an answer, the host is deemed unreachable. A negative value will result in an IllegalArgumentException being thrown.", "history": "Added in API level 1", "FullName": "public boolean isReachable (NetworkInterface netif, int ttl, int timeout)"}, "getAddress()": {"Returns": [["byte[]", "the raw IP address of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw IP address of this InetAddress object. The result is in network byte order: the highest order byte of the address is in getAddress()[0].", "history": "Added in API level 1", "FullName": "public byte[] getAddress ()"}, "isSiteLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is a site local address.", "history": "Added in API level 1", "FullName": "public boolean isSiteLocalAddress ()"}, "isMCGlobal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has global scope.", "history": "Added in API level 1", "FullName": "public boolean isMCGlobal ()"}, "isAnyLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the Inetaddress is a wildcard address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress in a wildcard address.", "history": "Added in API level 1", "FullName": "public boolean isAnyLocalAddress ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against."]], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress#getAddress_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getLocalHost()": {"Returns": [["@B_java#net#InetAddress_E@", "the address of the local host."]], "Parameters": [], "Throws": [["@B_java#net#UnknownHostException_E@", "if the local host name could not be resolved into an address."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#InetAddress#getByName_E@"], "Permissions": [], "Description": "Returns the address of the local host. This is achieved by retrieving the name of the host from the system, then resolving that name into an InetAddress. Note: The resolved address may be cached for a short period of time. If there is a security manager, its checkConnect method is called with the local host name and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the loopback address is returned.", "history": "Added in API level 1", "FullName": "public static InetAddress getLocalHost ()"}, "isMCSiteLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has site scope.", "history": "Added in API level 1", "FullName": "public boolean isMCSiteLocal ()"}, "isLinkLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is an link local address.", "history": "Added in API level 1", "FullName": "public boolean isLinkLocalAddress ()"}, "getHostName()": {"Returns": [["@B_java#lang#String_E@", "the host name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress#getCanonicalHostName_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Gets the host name for this IP address. If this InetAddress was created with a host name, this host name will be remembered and returned; otherwise, a reverse name lookup will be performed and the result will be returned based on the system configured name lookup service. If a lookup of the name service is required, call @B_java#net#InetAddress#getCanonicalHostName_E@. If there is a security manager, its checkConnect method is first called with the hostname and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, it will return the textual representation of the IP address.", "history": "Added in API level 1", "FullName": "public String getHostName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this IP address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this IP address.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getLoopbackAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the InetAddress loopback instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the loopback address. The InetAddress returned will represent the IPv4 loopback address, 127.0.0.1, or the IPv6 loopback address, ::1. The IPv4 loopback address returned is only one of many in the form 127.*.*.*", "history": "Added in API level 19", "FullName": "public static InetAddress getLoopbackAddress ()"}, "getAllByName(java.lang.String)": {"Returns": [["@B_java#net#InetAddress_E@", "an array of all the IP addresses for a given host name."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the host, or null."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if no IP address for the host could be found, or if a scope_id was specified for a global IPv6 address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system. The host name can either be a machine name, such as \"java.sun.com\", or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in If the host is null then an InetAddress representing an address of the loopback interface is returned. See If there is a security manager and host is not null and host.length() is not equal to zero, the security manager's checkConnect method is called with the hostname and -1 as its arguments to see if the operation is allowed.", "history": "Added in API level 1", "FullName": "public static InetAddress[] getAllByName (String host)"}, "isMulticastAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is an IP multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is an IP multicast address.", "history": "Added in API level 1", "FullName": "public boolean isMulticastAddress ()"}, "getCanonicalHostName()": {"Returns": [["@B_java#lang#String_E@", "the fully qualified domain name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Gets the fully qualified domain name for this IP address. Best effort method, meaning we may not be able to return the FQDN depending on the underlying system configuration. If there is a security manager, this method first calls its checkConnect method with the hostname and -1 as its arguments to see if the calling code is allowed to know the hostname for this IP address, i.e., to connect to the host. If the operation is not allowed, it will return the textual representation of the IP address.", "history": "Added in API level 1", "FullName": "public String getCanonicalHostName ()"}, "getByAddress(java.lang.String, byte[])": {"Returns": [["@B_java#net#InetAddress_E@", "an InetAddress object created from the raw IP address."]], "Parameters": [["@B_java#lang#String_E@", "String: the specified host"], ["byte[]", "byte: the raw IP address in network byte order"]], "Throws": [["@B_java#net#UnknownHostException_E@", "if IP address is of illegal length"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an InetAddress based on the provided host name and IP address. No name service is checked for the validity of the address. The host name can either be a machine name, such as \"java.sun.com\", or a textual representation of its IP address. No validity checking is done on the host name either. If addr specifies an IPv4 address an instance of Inet4Address will be returned; otherwise, an instance of Inet6Address will be returned. IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long", "history": "added in API level 1", "FullName": "public static InetAddress getByAddress (String host, byte[] addr)"}, "isMCLinkLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has link scope.", "history": "Added in API level 1", "FullName": "public boolean isMCLinkLocal ()"}, "getByName(java.lang.String)": {"Returns": [["@B_java#net#InetAddress_E@", "an IP address for the given host name."]], "Parameters": [["@B_java#lang#String_E@", "String: the specified host, or null."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if no IP address for the host could be found, or if a scope_id was specified for a global IPv6 address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Determines the IP address of a host, given the host's name. The host name can either be a machine name, such as \"java.sun.com\", or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. IPv6 scoped addresses are also supported. See If the host is null then an InetAddress representing an address of the loopback interface is returned. See", "history": "Added in API level 1", "FullName": "public static InetAddress getByName (String host)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this IP address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this IP address to a String. The string returned is of the form: hostname / literal IP address. If the host name is unresolved, no reverse name service lookup is performed. The hostname part will be represented by an empty string.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "isReachable(java.net.NetworkInterface, int, int)": {"Returns": [["boolean", "a booleanindicating if the address is reachable."]], "Parameters": [["@B_java#net#NetworkInterface_E@", "NetworkInterface: the NetworkInterface through which the test will be done, or null for any interface"], ["int", "int: the maximum numbers of hops to try or 0 for the default"], ["int", "int: the time, in milliseconds, before the call aborts"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either timeout or ttl are negative."], ["@B_java#io#IOException_E@", "if a network error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Test whether that address is reachable. Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. Android implementation attempts ICMP ECHO REQUESTs first, on failure it will fall back to TCP ECHO REQUESTs. Success on either protocol will return true. The network interface and ttl parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the ttl will result in an IllegalArgumentException being thrown. The timeout value, in milliseconds, indicates the maximum amount of time the try should take. If the operation times out before getting an answer, the host is deemed unreachable. A negative value will result in an IllegalArgumentException being thrown.", "history": "added in API level 1", "FullName": "public boolean isReachable (NetworkInterface netif, int ttl, int timeout)"}, "getHostAddress()": {"Returns": [["@B_java#lang#String_E@", "the raw IP address in a string format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the IP address string in textual presentation.", "history": "Added in API level 1", "FullName": "public String getHostAddress ()"}, "isMCNodeLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has node scope.", "history": "Added in API level 1", "FullName": "public boolean isMCNodeLocal ()"}, "isLoopbackAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a loopback address; or false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is a loopback address.", "history": "Added in API level 1", "FullName": "public boolean isLoopbackAddress ()"}, "isReachable(int)": {"Returns": [["boolean", "a boolean indicating if the address is reachable."]], "Parameters": [["int", "int: the time, in milliseconds, before the call aborts"]], "Throws": [["@B_java#io#IOException_E@", "if a network error occurs"], ["@B_java#lang#IllegalArgumentException_E@", "if timeout is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Test whether that address is reachable. Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. Android implementation attempts ICMP ECHO REQUESTs first, on failure it will fall back to TCP ECHO REQUESTs. Success on either protocol will return true. The timeout value, in milliseconds, indicates the maximum amount of time the try should take. If the operation times out before getting an answer, the host is deemed unreachable. A negative value will result in an IllegalArgumentException being thrown.", "history": "Added in API level 1", "FullName": "public boolean isReachable (int timeout)"}, "getByAddress(java.lang.String,byte[])": {"Returns": [["@B_java#net#InetAddress_E@", "an InetAddress object created from the raw IP address."]], "Parameters": [["@B_java#lang#String_E@", "String: the specified host"], ["byte[]", "byte: the raw IP address in network byte order"]], "Throws": [["@B_java#net#UnknownHostException_E@", "if IP address is of illegal length"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an InetAddress based on the provided host name and IP address. No name service is checked for the validity of the address. The host name can either be a machine name, such as \"java.sun.com\", or a textual representation of its IP address. No validity checking is done on the host name either. If addr specifies an IPv4 address an instance of Inet4Address will be returned; otherwise, an instance of Inet6Address will be returned. IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long", "history": "Added in API level 1", "FullName": "public static InetAddress getByAddress (String host, byte[] addr)"}}, "Inheritance": [], "ClassName": "java.net.InetAddress", "ClassDesc": "This class represents an Internet Protocol (IP) address. An IP address is either a 32-bit or 128-bit unsigned number used by IP, a lower-level protocol on which protocols like UDP and TCP are built. The IP address architecture is defined by For IPv4 address format, please refer to There is a The InetAddress class provides methods to resolve host names to their IP addresses and vice versa. By default, when a security manager is installed, in order to protect against DNS spoofing attacks, the result of positive host name resolutions are cached forever. When a security manager is not installed, the default behavior is to cache entries for a finite (implementation dependent) period of time. The result of unsuccessful host name resolution is cached for a very short period of time (10 seconds) to improve performance. If the default behavior is not desired, then a Java security property can be set to a different Time-to-live (TTL) value for positive caching. Likewise, a system admin can configure a different negative caching TTL value when needed. Two Java security properties control the TTL values used for positive and negative host name resolution caching:"}