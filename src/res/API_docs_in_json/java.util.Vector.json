{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this Vector. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "Vector(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this vector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "Added in API level 1", "FullName": "public Vector (Collection<? extends E> c)"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "listIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Vector#listIterator_E@"], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence). The returned list iterator is", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator ()"}, "removeAllElements()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all components from this vector and sets its size to zero. This method is identical in functionality to the @B_java#util#Vector#clear_E@ method (which is part of the @B_java#util#List_E@ interface).", "history": "Added in API level 1", "FullName": "public void removeAllElements ()"}, "insertElementAt(E,int)": {"Returns": [], "Parameters": [["E", "E: the component to insert"], ["int", "int: where to insert the new component"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified object as a component in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously. The index must be a value greater than or equal to 0 and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.) This method is identical in functionality to the @B_java#util#Vector#add_E@ method (which is part of the @B_java#util#List_E@ interface). Note that the add method reverses the order of the parameters, to more closely match array usage.", "history": "Added in API level 1", "FullName": "public void insertElementAt (E obj, int index)"}, "sort(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' natural ordering should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "Vector(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this vector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "added in API level 1", "FullName": "public Vector (Collection<? extends E> c)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this Vector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this Vector.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified Object is equal to this Vector"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Object to be compared for equality with this Vector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified Object with this Vector for equality. Returns true if and only if the specified Object is also a List, both Lists have the same size, and all corresponding pairs of elements in the two Lists are equal. (Two elements e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).) In other words, two Lists are defined to be equal if they contain the same elements in the same order.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "elements()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the components of this vector"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Iterator_E@"], "Permissions": [], "Description": "Returns an enumeration of the components of this vector. The returned Enumeration object will generate all items in this vector. The first item generated is the item at index 0, then the item at index 1, and so on.", "history": "Added in API level 1", "FullName": "public Enumeration<E> elements ()"}, "lastElement()": {"Returns": [["E", "the last component of the vector, i.e., the component at index size() - 1."]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this vector is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last component of the vector.", "history": "Added in API level 1", "FullName": "public E lastElement ()"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this Vector with the specified element.", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "remove(int)": {"Returns": [["E", "element that was removed"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this Vector. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the Vector.", "history": "Added in API level 1", "FullName": "public E remove (int index)"}, "removeElement(java.lang.Object)": {"Returns": [["boolean", "true if the argument was a component of this vector; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the component to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first (lowest-indexed) occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously. This method is identical in functionality to the @B_java#util#Vector#remove_E@ method (which is part of the @B_java#util#List_E@ interface).", "history": "Added in API level 1", "FullName": "public boolean removeElement (Object obj)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this Vector, containing the String representation of each element.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "size()": {"Returns": [["int", "the number of components in this vector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of components in this vector.", "history": "Added in API level 1", "FullName": "public int size ()"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list iterator (by a call to @B_java#util#ListIterator#next_E@)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to @B_java#util#ListIterator#next_E@. An initial call to @B_java#util#ListIterator#previous_E@ would return the element with the specified index minus one. The returned list iterator is", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator (int index)"}, "lastIndexOf(java.lang.Object, int)": {"Returns": [["int", "the index of the last occurrence of the element at position less than or equal to index in this vector; -1 if the element is not found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"], ["int", "int: index to start searching backwards from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is greater than or equal to the current size of this vector"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that", "history": "added in API level 1", "FullName": "public int lastIndexOf (Object o, int index)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: elements to be inserted into this Vector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator. The behavior of this operation is undefined if the specified Collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified Collection is this Vector, and this Vector is nonempty.)", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if the Vector contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this Vector, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))) (if such an element exists).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "Vector(int,int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the vector"], ["int", "int: the amount by which the capacity is increased when the vector overflows"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty vector with the specified initial capacity and capacity increment.", "history": "Added in API level 1", "FullName": "public Vector (int initialCapacity, int capacityIncrement)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this vector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone of this vector. The copy will contain a reference to a clone of the internal data array, not a reference to the original internal data array of this Vector object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this Vector in the correct order.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "indexOf(java.lang.Object,int)": {"Returns": [["int", "the index of the first occurrence of the element in this vector at position index or later in the vector; -1 if the element is not found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"], ["int", "int: index to start searching from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that", "history": "Added in API level 1", "FullName": "public int indexOf (Object o, int index)"}, "get(int)": {"Returns": [["E", "object at the specified index"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this Vector.", "history": "Added in API level 1", "FullName": "public E get (int index)"}, "Vector(int, int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the vector"], ["int", "int: the amount by which the capacity is increased when the vector overflows"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty vector with the specified initial capacity and capacity increment.", "history": "added in API level 1", "FullName": "public Vector (int initialCapacity, int capacityIncrement)"}, "subList(int, int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this List"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if an endpoint index value is out of range (fromIndex < 0 || toIndex > size)"], ["@B_java#lang#IllegalArgumentException_E@", "if the endpoint indices are out of order (fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned List is empty.) The returned List is backed by this List, so changes in the returned List are reflected in this List, and vice-versa. The returned List supports all of the optional List operations supported by this List. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a List can be used as a range operation by operating on a subList view instead of a whole List. For example, the following idiom removes a range of elements from a List: The semantics of the List returned by this method become undefined if the backing list (i.e., this List) is", "history": "added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "firstElement()": {"Returns": [["E", "the first component of this vector"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this vector has no components"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first component (the item at index 0) of this vector.", "history": "Added in API level 1", "FullName": "public E firstElement ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: elements to be inserted into this Vector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator. The behavior of this operation is undefined if the specified Collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified Collection is this Vector, and this Vector is nonempty.)", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element. More formally, returns the highest index i such that", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o)"}, "hashCode()": {"Returns": [["int", "the hash code value for this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this Vector.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "forEach(java.util.function.Consumer<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "removeIf(java.util.function.Predicate<? super E>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "lastIndexOf(java.lang.Object,int)": {"Returns": [["int", "the index of the last occurrence of the element at position less than or equal to index in this vector; -1 if the element is not found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"], ["int", "int: index to start searching backwards from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is greater than or equal to the current size of this vector"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o, int index)"}, "trimToSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Trims the capacity of this vector to be the vector's current size. If the capacity of this vector is larger than its current size, then the capacity is changed to equal the size by replacing its internal data array, kept in the field elementData, with a smaller one. An application can use this operation to minimize the storage of a vector.", "history": "Added in API level 1", "FullName": "public void trimToSize ()"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this Vector. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "setElementAt(E, int)": {"Returns": [], "Parameters": [["E", "E: what the component is to be set to"], ["int", "int: the specified index"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector. This method is identical in functionality to the @B_java#util#Vector#set_E@ method (which is part of the @B_java#util#List_E@ interface). Note that the set method reverses the order of the parameters, to more closely match array usage. Note also that the set method returns the old value that was stored at the specified position.", "history": "added in API level 1", "FullName": "public void setElementAt (E obj, int index)"}, "removeElementAt(int)": {"Returns": [], "Parameters": [["int", "int: the index of the object to remove"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously. The size of this vector is decreased by 1. The index must be a value greater than or equal to 0 and less than the current size of the vector. This method is identical in functionality to the @B_java#util#Vector#remove_E@ method (which is part of the @B_java#util#List_E@ interface). Note that the remove method returns the old value that was stored at the specified position.", "history": "Added in API level 1", "FullName": "public void removeElementAt (int index)"}, "sort(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' Comparable should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "Added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: a collection of elements to be removed from the Vector"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in this vector are incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this vector contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from this Vector all of its elements that are contained in the specified Collection.", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "insertElementAt(E, int)": {"Returns": [], "Parameters": [["E", "E: the component to insert"], ["int", "int: where to insert the new component"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified object as a component in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously. The index must be a value greater than or equal to 0 and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.) This method is identical in functionality to the @B_java#util#Vector#add_E@ method (which is part of the @B_java#util#List_E@ interface). Note that the add method reverses the order of the parameters, to more closely match array usage.", "history": "added in API level 1", "FullName": "public void insertElementAt (E obj, int index)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this Vector. The Vector will be empty after this call returns (unless it throws an exception).", "history": "Added in API level 1", "FullName": "public void clear ()"}, "indexOf(java.lang.Object, int)": {"Returns": [["int", "the index of the first occurrence of the element in this vector at position index or later in the vector; -1 if the element is not found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"], ["int", "int: index to start searching from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that", "history": "added in API level 1", "FullName": "public int indexOf (Object o, int index)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this list. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, and @B_java#util#Spliterator#ORDERED_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: elements to be inserted into this Vector"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified Collection into this Vector at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the Vector in the order that they are returned by the specified Collection's iterator.", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list in proper sequence. The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int: the desired minimum capacity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument. If the current capacity of this vector is less than minCapacity, then its capacity is increased by replacing its internal data array, kept in the field elementData, with a larger one. The size of the new data array will be the old size plus capacityIncrement, unless the value of capacityIncrement is less than or equal to zero, in which case the new capacity will be twice the old capacity; but if this new size is still smaller than minCapacity, then the new capacity will be minCapacity.", "history": "Added in API level 1", "FullName": "public void ensureCapacity (int minCapacity)"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: elements to be inserted into this Vector"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified Collection into this Vector at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the Vector in the order that they are returned by the specified Collection's iterator.", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this Vector contains all of the elements in the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: a collection whose elements will be tested for containment in this Vector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Vector contains all of the elements in the specified Collection.", "history": "Added in API level 1", "FullName": "public boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this Vector changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: a collection of elements to be retained in this Vector (all other elements are removed)"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in this vector are incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this vector contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Retains only the elements in this Vector that are contained in the specified Collection. In other words, removes from this Vector all of its elements that are not contained in the specified Collection.", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "elementAt(int)": {"Returns": [["E", "the component at the specified index"]], "Parameters": [["int", "int: an index into this vector"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the component at the specified index. This method is identical in functionality to the @B_java#util#Vector#get_E@ method (which is part of the @B_java#util#List_E@ interface).", "history": "Added in API level 1", "FullName": "public E elementAt (int index)"}, "capacity()": {"Returns": [["int", "the current capacity (the length of its internal data array, kept in the field elementData of this vector)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current capacity of this vector.", "history": "Added in API level 1", "FullName": "public int capacity ()"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element. More formally, returns the lowest index i such that", "history": "Added in API level 1", "FullName": "public int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this Vector with the specified element.", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "forEach(java.util.function.Consumer<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "isEmpty()": {"Returns": [["boolean", "true if and only if this vector has no components, that is, its size is zero; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this vector has no components.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "copyInto(java.lang.Object[])": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array into which the components get copied"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given array is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified array is not large enough to hold all the components of this vector"], ["@B_java#lang#ArrayStoreException_E@", "if a component of this vector is not of a runtime type that can be stored in the specified array"]], "SeeAlso": ["@B_java#util#Vector#toArray_E@"], "Permissions": [], "Description": "Copies the components of this vector into the specified array. The item at index k in this vector is copied into component k of anArray.", "history": "Added in API level 1", "FullName": "public void copyInto (Object[] anArray)"}, "setElementAt(E,int)": {"Returns": [], "Parameters": [["E", "E: what the component is to be set to"], ["int", "int: the specified index"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector. This method is identical in functionality to the @B_java#util#Vector#set_E@ method (which is part of the @B_java#util#List_E@ interface). Note that the set method reverses the order of the parameters, to more closely match array usage. Note also that the set method returns the old value that was stored at the specified position.", "history": "Added in API level 1", "FullName": "public void setElementAt (E obj, int index)"}, "addElement(E)": {"Returns": [], "Parameters": [["E", "E: the component to be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified component to the end of this vector, increasing its size by one. The capacity of this vector is increased if its size becomes greater than its capacity. This method is identical in functionality to the @B_java#util#Vector#add_E@ method (which is part of the @B_java#util#List_E@ interface).", "history": "Added in API level 1", "FullName": "public void addElement (E obj)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing the elements of the Vector"]], "Parameters": [["T[]", "T: the array into which the elements of the Vector are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of a is not a supertype of the runtime type of every element in this Vector"], ["@B_java#lang#NullPointerException_E@", "if the given array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array. If the Vector fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this Vector. If the Vector fits in the specified array with room to spare (i.e., the array has more elements than the Vector), the element in the array immediately following the end of the Vector is set to null. (This is useful in determining the length of the Vector only if the caller knows that the Vector does not contain any null elements.)", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "setSize(int)": {"Returns": [], "Parameters": [["int", "int: the new size of this vector"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the new size is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the size of this vector. If the new size is greater than the current size, new null items are added to the end of the vector. If the new size is less than the current size, all components at index newSize and greater are discarded.", "history": "Added in API level 1", "FullName": "public void setSize (int newSize)"}, "removeRange(int,int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)", "history": "Added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "removeRange(int, int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)", "history": "added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "replaceAll(java.util.function.UnaryOperator<E>)": {"Returns": [], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: the operator to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (UnaryOperator<E> operator)"}, "Vector(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the vector"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero.", "history": "Added in API level 1", "FullName": "public Vector (int initialCapacity)"}, "subList(int,int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this List"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if an endpoint index value is out of range (fromIndex < 0 || toIndex > size)"], ["@B_java#lang#IllegalArgumentException_E@", "if the endpoint indices are out of order (fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned List is empty.) The returned List is backed by this List, so changes in the returned List are reflected in this List, and vice-versa. The returned List supports all of the optional List operations supported by this List. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a List can be used as a range operation by operating on a subList view instead of a whole List. For example, the following idiom removes a range of elements from a List: The semantics of the List returned by this method become undefined if the backing list (i.e., this List) is", "history": "Added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this vector contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this vector is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this vector contains the specified element. More formally, returns true if and only if this vector contains at least one element e such that", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "Vector()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero.", "history": "Added in API level 1", "FullName": "public Vector ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractList_E@"], "ClassName": "java.util.Vector<E>", "ClassDesc": "The Vector class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a Vector can grow or shrink as needed to accommodate adding and removing items after the Vector has been created. Each vector tries to optimize storage management by maintaining a capacity and a capacityIncrement. The capacity is always at least as large as the vector size; it is usually larger because as components are added to the vector, the vector's storage increases in chunks the size of capacityIncrement. An application can increase the capacity of a vector before inserting a large number of components; this reduces the amount of incremental reallocation. @B_java#util#ListIterator#remove_E@ or @B_java#util#ListIterator#add_E@ methods, the iterator will throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The @B_java#util#Enumeration_E@ returned by the @B_java#util#Vector#elements_E@ method are not fail-fast. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: As of the Java 2 platform v1.2, this class was retrofitted to implement the @B_java#util#List_E@ interface, making it a member of the Vector is synchronized. If a thread-safe implementation is not needed, it is recommended to use @B_java#util#ArrayList_E@ in place of Vector."}