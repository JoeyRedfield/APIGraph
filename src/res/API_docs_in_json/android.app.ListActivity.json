{"Functions": {"getSelectedItemPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the position of the currently selected list item.", "history": "Added in API level 1", "FullName": "public int getSelectedItemPosition ()"}, "getListView()": {"Returns": [["@B_android#widget#ListView_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the activity's list view widget.", "history": "Added in API level 1", "FullName": "public ListView getListView ()"}, "onListItemClick(android.widget.ListView,android.view.View,int,long)": {"Returns": [], "Parameters": [["@B_android#widget#ListView_E@", "ListView: The ListView where the click happened"], ["@B_android#view#View_E@", "View: The view that was clicked within the ListView"], ["int", "int: The position of the view in the list"], ["long", "long: The row id of the item that was clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when an item in the list is selected. Subclasses should override. Subclasses can call getListView().getItemAtPosition(position) if they need to access the data associated with the selected item.", "history": "Added in API level 1", "FullName": "protected void onListItemClick (ListView l, View v, int position, long id)"}, "getListAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ListAdapter associated with this activity's ListView.", "history": "Added in API level 1", "FullName": "public ListAdapter getListAdapter ()"}, "setSelection(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the currently selected list item to the specified position with the adapter's data", "history": "Added in API level 1", "FullName": "public void setSelection (int position)"}, "ListActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public ListActivity ()"}, "getSelectedItemId()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the cursor row ID of the currently selected list item.", "history": "Added in API level 1", "FullName": "public long getSelectedItemId ()"}, "onRestoreInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the data most recently supplied in @B_android#app#Activity#onSaveInstanceState_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onRestoreInstanceState_E@"], "Permissions": [], "Description": "Ensures the list view has been created before Activity restores all of the view states.", "history": "Added in API level 1", "FullName": "protected void onRestoreInstanceState (Bundle state)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onContentChanged_E@"], "Permissions": [], "Description": "Updates the screen state (current list and other views) when the content changes.", "history": "Added in API level 1", "FullName": "public void onContentChanged ()"}, "setListAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide the cursor for the list view.", "history": "Added in API level 1", "FullName": "public void setListAdapter (ListAdapter adapter)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onDestroy_E@"], "Permissions": [], "Description": "Perform any final cleanup before an activity is destroyed. This can happen either because the activity is finishing (someone called @B_android#app#Activity#finish_E@ on it), or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the @B_android#app#Activity#isFinishing_E@ method. Note: do not count on this method being called as a place for saving data! For example, if an activity is editing data in a content provider, those edits should be committed in either @B_android#app#Activity#onPause_E@ or @B_android#app#Activity#onSaveInstanceState_E@, not here. This method is usually implemented to free resources like threads that are associated with an activity, so that a destroyed activity does not leave such things around while the rest of its application is still running. There are situations where the system will simply kill the activity's hosting process without calling this method (or any others) in it, so it should not be used to do things that are intended to remain around after the process goes away. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDestroy ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@"], "ClassName": "android.app.ListActivity", "ClassDesc": "An activity that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. ListActivity hosts a @B_android#widget#ListView_E@ object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. ListActivity has a default layout that consists of a single, full-screen list in the center of the screen. However, if you desire, you can customize the screen layout by setting your own view layout with setContentView() in onCreate(). To do this, your own view MUST contain a ListView object with the id \"@android:id/list\" (or @B_android#R#id#list_E@ if it's in code) Optionally, your custom view can contain another view object of any type to display when the list view is empty. This \"empty list\" notifier must have an id \"android:id/empty\". Note that when an empty view is present, the list view will be hidden when there is no data to display. The following code demonstrates an (ugly) custom screen layout. It has a list with a green background, and an alternate red \"no data\" message. You can specify the layout of individual rows in the list. You do this by specifying a layout resource in the ListAdapter object hosted by the activity (the ListAdapter binds the ListView to the data; more on this later). A ListAdapter constructor takes a parameter that specifies a layout resource for each row. It also has two additional parameters that let you specify which data field to associate with which object in the row layout resource. These two parameters are typically parallel arrays. Android provides some standard row layout resources. These are in the @B_android#R#layout_E@ class, and have names such as simple_list_item_1, simple_list_item_2, and two_line_list_item. The following layout XML is the source for the resource two_line_list_item, which displays two data fields,one above the other, for each list row. You must identify the data bound to each TextView object in this layout. The syntax for this is discussed in the next section. You bind the ListActivity's ListView object to data using a class that implements the @B_android#widget#ListAdapter_E@ interface. Android provides two standard list adapters: @B_android#widget#SimpleAdapter_E@ for static data (Maps), and @B_android#widget#SimpleCursorAdapter_E@ for Cursor query results. The following code from a custom ListActivity demonstrates querying the Contacts provider for all contacts, then binding the Name and Company fields to a two line row layout in the activity's ListView."}