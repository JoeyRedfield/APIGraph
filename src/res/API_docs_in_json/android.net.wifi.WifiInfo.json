{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getPasspointFqdn()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Fully Qualified Domain Name of the network if it is a Passpoint network.", "history": "Added in API level 29", "FullName": "public String getPasspointFqdn ()"}, "getRssi()": {"Returns": [["int", "the RSSI."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the received signal strength indicator of the current 802.11 network, in dBm. Use @B_android#net#wifi#WifiManager#calculateSignalLevel_E@ to convert this number into an absolute signal level which can be displayed to a user.", "history": "Added in API level 1", "FullName": "public int getRssi ()"}, "getTxLinkSpeedMbps()": {"Returns": [["int", "the Tx link speed or @B_android#net#wifi#WifiInfo#LINK_SPEED_UNKNOWN_E@ if link speed is unknown. Value is -1 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiInfo_E@"], "Permissions": [], "Description": "Returns the current transmit link speed in Mbps.", "history": "Added in API level 29", "FullName": "public int getTxLinkSpeedMbps ()"}, "getBSSID()": {"Returns": [["@B_java#lang#String_E@", "the BSSID, in the form of a six-byte MAC address: XX:XX:XX:XX:XX:XX"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the basic service set identifier (BSSID) of the current access point. The BSSID may be", "history": "Added in API level 1", "FullName": "public String getBSSID ()"}, "getMacAddress()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String getMacAddress ()"}, "getLinkSpeed()": {"Returns": [["int", "the link speed or @B_android#net#wifi#WifiInfo#LINK_SPEED_UNKNOWN_E@ if link speed is unknown."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiInfo_E@"], "Permissions": [], "Description": "Returns the current link speed in @B_android#net#wifi#WifiInfo#LINK_SPEED_UNITS_E@.", "history": "Added in API level 1", "FullName": "public int getLinkSpeed ()"}, "getIpAddress()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getIpAddress ()"}, "getSSID()": {"Returns": [["@B_java#lang#String_E@", "the SSID."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the service set identifier (SSID) of the current 802.11 network. If the SSID can be decoded as UTF-8, it will be returned surrounded by double quotation marks. Otherwise, it is returned as a string of hex digits. The SSID may be Prior to @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR1_E@, this method always returned the SSID with no quotes around it.", "history": "Added in API level 1", "FullName": "public String getSSID ()"}, "getHiddenSSID()": {"Returns": [["boolean", "true if this network does not broadcast its SSID, so an SSID-specific probe request must be used for scans."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean getHiddenSSID ()"}, "getRxLinkSpeedMbps()": {"Returns": [["int", "the Rx link speed or @B_android#net#wifi#WifiInfo#LINK_SPEED_UNKNOWN_E@ if link speed is unknown. Value is -1 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiInfo_E@"], "Permissions": [], "Description": "Returns the current receive link speed in Mbps.", "history": "Added in API level 29", "FullName": "public int getRxLinkSpeedMbps ()"}, "getNetworkId()": {"Returns": [["int", "the network ID."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Each configured network has a unique small integer ID, used to identify the network. This method returns the ID for the currently connected network. The networkId may be -1 if there is no currently connected network or if the caller has insufficient permissions to access the network ID.", "history": "Added in API level 1", "FullName": "public int getNetworkId ()"}, "getDetailedStateOf(android.net.wifi.SupplicantState)": {"Returns": [["@B_android#net#NetworkInfo#DetailedState_E@", "the corresponding @B_android#net#NetworkInfo#DetailedState_E@"]], "Parameters": [["@B_android#net#wifi#SupplicantState_E@", "SupplicantState: the supplicant state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Map a supplicant state into a fine-grained network connectivity state.", "history": "Added in API level 1", "FullName": "public static NetworkInfo.DetailedState getDetailedStateOf (SupplicantState suppState)"}, "getPasspointProviderFriendlyName()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Provider Friendly Name of the network if it is a Passpoint network.", "history": "Added in API level 29", "FullName": "public String getPasspointProviderFriendlyName ()"}, "getFrequency()": {"Returns": [["int", "the frequency."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiInfo_E@"], "Permissions": [], "Description": "Returns the current frequency in @B_android#net#wifi#WifiInfo#FREQUENCY_UNITS_E@.", "history": "Added in API level 21", "FullName": "public int getFrequency ()"}, "getSupplicantState()": {"Returns": [["@B_android#net#wifi#SupplicantState_E@", "the current @B_android#net#wifi#SupplicantState_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the detailed state of the supplicant's negotiation with an access point, in the form of a @B_android#net#wifi#SupplicantState_E@ object.", "history": "Added in API level 1", "FullName": "public SupplicantState getSupplicantState ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.WifiInfo", "ClassDesc": "Describes the state of any Wifi connection that is active or is in the process of being set up."}