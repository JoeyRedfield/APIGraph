{"Functions": {"getParcelFileDescriptor()": {"Returns": [["", "instance of @B_android#os#ParcelFileDescriptor_E@ or null if the underlying socket is closed."]], "Parameters": [], "Throws": [["IOException", "in case of error."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the underlying file descriptor for direct read/write access. Calling close() on the returned ParcelFileDescriptor will close the socket.", "history": "", "FullName": "public abstract ParcelFileDescriptor getParcelFileDescriptor ()"}, "getOutputStream()": {"Returns": [["", "instance of @B_java#io#OutputStream_E@."]], "Parameters": [], "Throws": [["IOException", "on error."]], "SeeAlso": [], "Permissions": [], "Description": "Instance of @B_java#io#OutputStream_E@ to write data to. Calling close() on the OutputStream will close the socket. Note: The maximum (unfragmented) packet size supported through this API is @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes (excluding internal protocol headers). Thus, the byte[] data passed to @B_java#io#OutputStream#write_E@ should honor this limit or the packet will be dropped and an error message will be sent to the log.", "history": "", "FullName": "public abstract OutputStream getOutputStream ()"}, "getInputStream()": {"Returns": [["", "instance of @B_java#io#InputStream_E@."]], "Parameters": [], "Throws": [["IOException", "on error."]], "SeeAlso": [], "Permissions": [], "Description": "Use this to read data from this socket. Calling close() on the InputStream will close the socket.", "history": "", "FullName": "public abstract InputStream getInputStream ()"}, "isClosed()": {"Returns": [["", "True if the socket is closed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use this to check if the socket is closed.", "history": "", "FullName": "public abstract boolean isClosed ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["IOException", "on error."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this real-time socket connection with the participant.", "history": "", "FullName": "public abstract void close ()"}}, "Inheritance": [], "ClassName": "com.google.android.gms.games.RealTimeSocket", "ClassDesc": "Provides a Socket-like interface for a real-time data connection to a participant in a real-time room. Use @B_com#google#android#gms#games#GamesClient#getRealTimeSocketForParticipant_E@ to get an instance. Use @B_com#google#android#gms#games#RealTimeSocket#getParcelFileDescriptor_E@ to get a file descriptor for read/write, or use @B_com#google#android#gms#games#RealTimeSocket#getInputStream_E@ / @B_com#google#android#gms#games#RealTimeSocket#getOutputStream_E@ to get access to an instance of @B_java#io#InputStream_E@ and @B_java#io#OutputStream_E@ respectively. Calling close() on any of (i) the returned @B_android#os#ParcelFileDescriptor_E@ or, (ii) the @B_java#io#InputStream_E@ or @B_java#io#OutputStream_E@ instances will close the socket. Note: The maximum (unfragmented) packet size supported through this API is @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes (excluding internal protocol headers). Thus, the byte[] data passed to @B_java#io#OutputStream#write_E@ should honor this limit or the packet will be dropped and an error message will be sent to the log."}