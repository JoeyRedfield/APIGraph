{"Functions": {"getSource(java.lang.Class<T>)": {"Returns": [["T", "a Source for reading the XML value."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The class of the source, or null. If the class is null, a vendor specifc Source implementation will be returned. The following classes are supported at a minimum: javax.xml.transform.dom.DOMSource - returns a DOMSource javax.xml.transform.sax.SAXSource - returns a SAXSource javax.xml.transform.stax.StAXSource - returns a StAXSource javax.xml.transform.stream.StreamSource - returns a StreamSource"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value or if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing. The content handler will receive callbacks based on the contents of the XML.", "history": "Added in API level 9", "FullName": "public abstract T getSource (Class<T> sourceClass)"}, "getBinaryStream()": {"Returns": [["@B_java#io#InputStream_E@", "a stream containing the XML data."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. An exception is thrown if the state is not readable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the XML value designated by this SQLXML instance as a stream. The bytes of the input stream are interpreted according to appendix F of the XML 1.0 specification. The behavior of this method is the same as ResultSet.getBinaryStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract InputStream getBinaryStream ()"}, "setCharacterStream()": {"Returns": [["@B_java#io#Writer_E@", "a stream to which data can be written."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not writable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a stream to be used to write the XML value that this SQLXML instance represents. The format of this stream is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the stream is unicode. The behavior of this method is the same as ResultSet.updateCharacterStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract Writer setCharacterStream ()"}, "getCharacterStream()": {"Returns": [["@B_java#io#Reader_E@", "a stream containing the XML data."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not readable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object. The format of this stream is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the stream is unicode. The behavior of this method is the same as ResultSet.getCharacterStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract Reader getCharacterStream ()"}, "free()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error freeing the XML value."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "This method closes this object and releases the resources that it held. The SQL XML object becomes invalid and neither readable or writeable when this method is called. After free has been called, any attempt to invoke a method other than free will result in a SQLException being thrown. If free is called multiple times, the subsequent calls to free are treated as a no-op.", "history": "Added in API level 9", "FullName": "public abstract void free ()"}, "setResult(java.lang.Class<T>)": {"Returns": [["T", "Returns a Result for setting the XML value."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The class of the result, or null. If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: javax.xml.transform.dom.DOMResult - returns a DOMResult javax.xml.transform.sax.SAXResult - returns a SAXResult javax.xml.transform.stax.StAXResult - returns a StAXResult javax.xml.transform.stream.StreamResult - returns a StreamResult"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value or if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Result for setting the XML value designated by this SQLXML instance. The systemID of the Result is implementation dependent. The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation. Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML. Call the content handler with the contents of the XML document to assign the values.", "history": "Added in API level 9", "FullName": "public abstract T setResult (Class<T> resultClass)"}, "setBinaryStream()": {"Returns": [["@B_java#io#OutputStream_E@", "a stream to which data can be written."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. An exception is thrown if the state is not writable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a stream that can be used to write the XML value that this SQLXML instance represents. The stream begins at position 0. The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification The behavior of this method is the same as ResultSet.updateBinaryStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract OutputStream setBinaryStream ()"}, "getString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the XML value designated by this SQLXML instance."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not readable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the XML value designated by this SQLXML instance. The format of this String is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the String is unicode. The behavior of this method is the same as ResultSet.getString() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract String getString ()"}, "setString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not writable."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the XML value designated by this SQLXML instance to the given String representation. The format of this String is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the String is unicode. The behavior of this method is the same as ResultSet.updateString() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation.", "history": "Added in API level 9", "FullName": "public abstract void setString (String value)"}}, "Inheritance": [], "ClassName": "java.sql.SQLXML", "ClassDesc": "The mapping in the JavaTM programming language for the SQL XML type. XML is a built-in type that stores an XML value as a column value in a row of a database table. By default drivers implement an SQLXML object as a logical pointer to the XML data rather than the data itself. An SQLXML object is valid for the duration of the transaction in which it was created. The SQLXML interface provides methods for accessing the XML value as a String, a Reader or Writer, or as a Stream. The XML value may also be accessed through a Source or set as a Result, which are used with XML Parser APIs such as DOM, SAX, and StAX, as well as with XSLT transforms and XPath evaluations. Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement, such as getSQLXML allow a programmer to access an XML value. In addition, this interface has methods for updating an XML value. The XML value of the SQLXML instance may be obtained as a BinaryStream using Because databases may use an optimized representation for the XML, accessing the value through getSource() and setResult() can lead to improved processing performance without serializing to a stream representation and parsing the XML. For example, to obtain a DOM Document Node: Incomplete or invalid XML values may cause an SQLException when set or the exception may occur when execute() occurs. All streams must be closed before execute() occurs or an SQLException will be thrown. Reading and writing XML values to or from an SQLXML object can happen at most once. The conceptual states of readable and not readable determine if one of the reading APIs will return a value or throw an exception. The conceptual states of writable and not writable determine if one of the writing APIs will set a value or throw an exception. The state moves from readable to not readable once free() or any of the reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString(). Implementations may also change the state to not writable when this occurs. The state moves from writable to not writeable once free() or any of the writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString(). Implementations may also change the state to not readable when this occurs. All methods on the SQLXML interface must be fully implemented if the JDBC driver supports the data type."}