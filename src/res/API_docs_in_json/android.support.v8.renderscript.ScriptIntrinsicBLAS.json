{"Functions": {"CTPSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTPSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d8/d56/ctpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "ZHPR2(int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPR2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/d5/d52/zhpr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZHPR2 (int Uplo, Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "SGBMV(int, int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, float, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d6/d46/sgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void SGBMV (int TransA, int KL, int KU, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "CTPMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d4/dbb/ctpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "DSBMV(int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, double, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied."], ["int", "int: The number of off-diagonals of the matrix A"], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/d1e/dsbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DSBMV (int Uplo, int K, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "SSYR2K(int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d3d/ssyr2k_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYR2K (int Uplo, int Trans, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "ZGEMV(int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/d40/zgemv_8f.html", "history": "added in version 23.0.0", "FullName": "void ZGEMV (int TransA, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "DSYR2(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/de/d41/dsyr2_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYR2 (int Uplo, double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "DTPMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/dc/dcd/dtpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "SGEMV(int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, float, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/d58/sgemv_8f.html", "history": "added in version 23.0.0", "FullName": "void SGEMV (int TransA, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "SGER(float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGER performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/db/d5c/sger_8f.html", "history": "added in version 23.0.0", "FullName": "void SGER (float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "DTBSV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTBSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d4/dcf/dtbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "ZSYR2K(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d20/zsyr2k_8f.html", "history": "added in version 23.0.0", "FullName": "void ZSYR2K (int Uplo, int Trans, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "ZTRMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d0/dd1/ztrmv_8f.html", "history": "added in version 23.0.0", "FullName": "void ZTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "ZHEMM(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHEMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d6/d3e/zhemm_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHEMM (int Side, int Uplo, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "ZHER2K(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER2K performs one of the hermitian rank 2k operations C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C or C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d7/dfa/zher2k_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHER2K (int Uplo, int Trans, Double2 alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "DSPR2(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/dd/d9e/dspr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DSPR2 (int Uplo, double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "create(android.support.v8.renderscript.RenderScript)": {"Returns": [["@B_android#support#v8#renderscript#ScriptIntrinsicBLAS_E@", "ScriptIntrinsicBLAS"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intrinsic to access BLAS subroutines.", "history": "added in version 23.0.0", "FullName": "ScriptIntrinsicBLAS create (RenderScript rs)"}, "SGEMM(int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The type of transpose applied to matrix B."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T Details: http://www.netlib.org/lapack/explore-html/d4/de2/sgemm_8f.html", "history": "added in version 23.0.0", "FullName": "void SGEMM (int TransA, int TransB, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "CGBMV(int, int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/d75/cgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CGBMV (int TransA, int KL, int KU, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "DTPSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTPSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d9/d84/dtpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "CHER(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/d3/d6d/cher_8f.html", "history": "added in version 23.0.0", "FullName": "void CHER (int Uplo, float alpha, Allocation X, int incX, Allocation A)"}, "CHPR2(int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPR2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/d6/d44/chpr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CHPR2 (int Uplo, Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "CGERU(android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGERU performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/db/d5f/cgeru_8f.html", "history": "added in version 23.0.0", "FullName": "void CGERU (Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "SSYMM(int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d7/d42/ssymm_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYMM (int Side, int Uplo, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "SSBMV(int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, float, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied."], ["int", "int: The number of off-diagonals of the matrix A"], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d3/da1/ssbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void SSBMV (int Uplo, int K, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "ZSYRK(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/de/d54/zsyrk_8f.html", "history": "added in version 23.0.0", "FullName": "void ZSYRK (int Uplo, int Trans, Double2 alpha, Allocation A, Double2 beta, Allocation C)"}, "CHERK(int, int, float, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHERK performs one of the hermitian rank k operations C := alpha*A*A**H + beta*C or C := alpha*A**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d8/d52/cherk_8f.html", "history": "added in version 23.0.0", "FullName": "void CHERK (int Uplo, int Trans, float alpha, Allocation A, float beta, Allocation C)"}, "DGEMM(int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The type of transpose applied to matrix B."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T Details: http://www.netlib.org/lapack/explore-html/d7/d2b/dgemm_8f.html", "history": "added in version 23.0.0", "FullName": "void DGEMM (int TransA, int TransB, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "CSYRK(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d3/d6a/csyrk_8f.html", "history": "added in version 23.0.0", "FullName": "void CSYRK (int Uplo, int Trans, Float2 alpha, Allocation A, Float2 beta, Allocation C)"}, "DTRSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d6/d96/dtrsv_8f.html", "history": "added in version 23.0.0", "FullName": "void DTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "CHPR(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPR performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/db/dcd/chpr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CHPR (int Uplo, float alpha, Allocation X, int incX, Allocation Ap)"}, "STBMV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STBMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/d6/d7d/stbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void STBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "DSPR(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/dd/dba/dspr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DSPR (int Uplo, double alpha, Allocation X, int incX, Allocation Ap)"}, "ZHPMV(int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/d60/zhpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZHPMV (int Uplo, Double2 alpha, Allocation Ap, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "CTBMV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d3/dcd/ctbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "SSYR2(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/db/d99/ssyr2_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYR2 (int Uplo, float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "STPMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STPMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/db/db1/stpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void STPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "BNNM(android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, int)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#U8_E@."], ["int", "int: The offset for all values in matrix A, e.g A[i,j] = A[i,j] - a_offset. Value should be from 0 to 255."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#U8_E@."], ["int", "int: The offset for all values in matrix B, e.g B[i,j] = B[i,j] - b_offset. Value should be from 0 to 255."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#U8_E@."], ["int", "int: The offset for all values in matrix C."], ["int", "int: The multiplier for all values in matrix C, e.g C[i,j] = (C[i,j] + c_offset) * c_mult."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "8-bit GEMM-like operation for neural networks: C = A * Transpose(B) Calculations are done in 1.10.21 fixed-point format for the final output, just before there's a shift down to drop the fractional parts. The output values are gated to 0 to 255 to fit in a byte, but the 10-bit format gives some headroom to avoid wrapping around on small overflows.", "history": "added in version 23.0.0", "FullName": "void BNNM (Allocation A, int a_offset, Allocation B, int b_offset, Allocation C, int c_offset, int c_mult)"}, "SSPMV(int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, float, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/d68/sspmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void SSPMV (int Uplo, float alpha, Allocation Ap, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "DSYMM(int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d8/db0/dsymm_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYMM (int Side, int Uplo, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "DGBMV(int, int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, double, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d3f/dgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DGBMV (int TransA, int KL, int KU, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "ZTRSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d1/d2f/ztrsv_8f.html", "history": "added in version 23.0.0", "FullName": "void ZTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DTRSM(int, int, int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/de/da7/dtrsm_8f.html", "history": "added in version 23.0.0", "FullName": "void DTRSM (int Side, int Uplo, int TransA, int Diag, double alpha, Allocation A, Allocation B)"}, "STRMM(int, int, int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/df/d01/strmm_8f.html", "history": "added in version 23.0.0", "FullName": "void STRMM (int Side, int Uplo, int TransA, int Diag, float alpha, Allocation A, Allocation B)"}, "CSYR2K(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/de/d7e/csyr2k_8f.html", "history": "added in version 23.0.0", "FullName": "void CSYR2K (int Uplo, int Trans, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "DTRMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/dc/d7e/dtrmv_8f.html", "history": "added in version 23.0.0", "FullName": "void DTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "ZGERU(android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGERU performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/d7/d12/zgeru_8f.html", "history": "added in version 23.0.0", "FullName": "void ZGERU (Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "CHPMV(int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d06/chpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CHPMV (int Uplo, Float2 alpha, Allocation Ap, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "SSPR2(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/db/d3e/sspr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void SSPR2 (int Uplo, float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "ZHEMV(int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHEMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/ddd/zhemv_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHEMV (int Uplo, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "SSPR(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d2/d9b/sspr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void SSPR (int Uplo, float alpha, Allocation X, int incX, Allocation Ap)"}, "CTRSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d4/dc8/ctrsv_8f.html", "history": "added in version 23.0.0", "FullName": "void CTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DGER(double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGER performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/dc/da8/dger_8f.html", "history": "added in version 23.0.0", "FullName": "void DGER (double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "ZHBMV(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d3/d1a/zhbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZHBMV (int Uplo, int K, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "DSYR(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d3/d60/dsyr_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYR (int Uplo, double alpha, Allocation X, int incX, Allocation A)"}, "CHBMV(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/dc2/chbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CHBMV (int Uplo, int K, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "DSYR2K(int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/dec/dsyr2k_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYR2K (int Uplo, int Trans, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "SSYR(int, float, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d6/dac/ssyr_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYR (int Uplo, float alpha, Allocation X, int incX, Allocation A)"}, "DSYMV(int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, double, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/dbe/dsymv_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYMV (int Uplo, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "DSYRK(int, int, double, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/dc/d05/dsyrk_8f.html", "history": "added in version 23.0.0", "FullName": "void DSYRK (int Uplo, int Trans, double alpha, Allocation A, double beta, Allocation C)"}, "DTRMM(int, int, int, int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/dd/d19/dtrmm_8f.html", "history": "added in version 23.0.0", "FullName": "void DTRMM (int Side, int Uplo, int TransA, int Diag, double alpha, Allocation A, Allocation B)"}, "ZTPMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d2/d9e/ztpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "CTRMM(int, int, int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d4/d9b/ctrmm_8f.html", "history": "added in version 23.0.0", "FullName": "void CTRMM (int Side, int Uplo, int TransA, int Diag, Float2 alpha, Allocation A, Allocation B)"}, "CHER2K(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER2K performs one of the hermitian rank 2k operations C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C or C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/d82/cher2k_8f.html", "history": "added in version 23.0.0", "FullName": "void CHER2K (int Uplo, int Trans, Float2 alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "STBSV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STBSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d1f/stbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void STBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "ZGERC(android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGERC performs the rank 1 operation A := alpha*x*y**H + A Details: http://www.netlib.org/lapack/explore-html/d3/dad/zgerc_8f.html", "history": "added in version 23.0.0", "FullName": "void ZGERC (Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "SSYRK(int, int, float, android.support.v8.renderscript.Allocation, float, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d0/d40/ssyrk_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYRK (int Uplo, int Trans, float alpha, Allocation A, float beta, Allocation C)"}, "ZHPR(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPR performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/de/de1/zhpr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZHPR (int Uplo, double alpha, Allocation X, int incX, Allocation Ap)"}, "ZTPSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTPSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/da/d57/ztpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "STRMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/de/d45/strmv_8f.html", "history": "added in version 23.0.0", "FullName": "void STRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DGEMV(int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, double, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/dc/da8/dgemv_8f.html", "history": "added in version 23.0.0", "FullName": "void DGEMV (int TransA, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "CGERC(android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGERC performs the rank 1 operation A := alpha*x*y**H + A Details: http://www.netlib.org/lapack/explore-html/dd/d84/cgerc_8f.html", "history": "added in version 23.0.0", "FullName": "void CGERC (Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "CTRMV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/df/d78/ctrmv_8f.html", "history": "added in version 23.0.0", "FullName": "void CTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "CGEMV(int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d4/d8a/cgemv_8f.html", "history": "added in version 23.0.0", "FullName": "void CGEMV (int TransA, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "STRSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d2a/strsv_8f.html", "history": "added in version 23.0.0", "FullName": "void STRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "ZHER2(int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/da/d8a/zher2_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHER2 (int Uplo, Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "ZGEMM(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The type of transpose applied to matrix B."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type {@link Element#F64_2"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type {@link Element#F64_2"], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type {@link Element#F64_2"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T or op(X) = X**H Details: http://www.netlib.org/lapack/explore-html/d7/d76/zgemm_8f.html", "history": "added in version 23.0.0", "FullName": "void ZGEMM (int TransA, int TransB, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "ZGBMV(int, int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d9/d46/zgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZGBMV (int TransA, int KL, int KU, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "CHEMM(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHEMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d3/d66/chemm_8f.html", "history": "added in version 23.0.0", "FullName": "void CHEMM (int Side, int Uplo, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "ZTRMM(int, int, int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d8/de1/ztrmm_8f.html", "history": "added in version 23.0.0", "FullName": "void ZTRMM (int Side, int Uplo, int TransA, int Diag, Double2 alpha, Allocation A, Allocation B)"}, "ZHER(int, double, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/de/d0e/zher_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHER (int Uplo, double alpha, Allocation X, int incX, Allocation A)"}, "ZSYMM(int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d51/zsymm_8f.html", "history": "added in version 23.0.0", "FullName": "void ZSYMM (int Side, int Uplo, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "ZTBSV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTBSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d4/d5a/ztbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "CHER2(int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/db/d87/cher2_8f.html", "history": "added in version 23.0.0", "FullName": "void CHER2 (int Uplo, Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "ZHERK(int, int, double, android.support.v8.renderscript.Allocation, double, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced."], ["int", "int: The type of transpose applied to the operation."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHERK performs one of the hermitian rank k operations C := alpha*A*A**H + beta*C or C := alpha*A**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/db1/zherk_8f.html", "history": "added in version 23.0.0", "FullName": "void ZHERK (int Uplo, int Trans, double alpha, Allocation A, double beta, Allocation C)"}, "CTBSV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTBSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d9/d5f/ctbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void CTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "CGEMM(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A."], ["int", "int: The type of transpose applied to matrix B."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T or op(X) = X**H Details: http://www.netlib.org/lapack/explore-html/d6/d5b/cgemm_8f.html", "history": "added in version 23.0.0", "FullName": "void CGEMM (int TransA, int TransB, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "ZTRSM(int, int, int, int, android.support.v8.renderscript.Double2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d1/d39/ztrsm_8f.html", "history": "added in version 23.0.0", "FullName": "void ZTRSM (int Side, int Uplo, int TransA, int Diag, Double2 alpha, Allocation A, Allocation B)"}, "ZTBMV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d3/d39/ztbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void ZTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "SSYMV(int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, float, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d94/ssymv_8f.html", "history": "added in version 23.0.0", "FullName": "void SSYMV (int Uplo, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "DSPMV(int, double, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, double, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form."], ["double", "double: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d4/d85/dspmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DSPMV (int Uplo, double alpha, Allocation Ap, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "STRSM(int, int, int, int, float, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["float", "float: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/d2/d8b/strsm_8f.html", "history": "added in version 23.0.0", "FullName": "void STRSM (int Side, int Uplo, int TransA, int Diag, float alpha, Allocation A, Allocation B)"}, "DTBMV(int, int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/df/d29/dtbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void DTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "CHEMV(int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHEMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d7/d51/chemv_8f.html", "history": "added in version 23.0.0", "FullName": "void CHEMV (int Uplo, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "CSYMM(int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/db/d59/csymm_8f.html", "history": "added in version 23.0.0", "FullName": "void CSYMM (int Side, int Uplo, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "STPSV(int, int, int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#support#v8#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STPSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d7c/stpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "added in version 23.0.0", "FullName": "void STPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "CTRSM(int, int, int, int, android.support.v8.renderscript.Float2, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right."], ["int", "int: Specifies whether matrix A is upper or lower triangular."], ["int", "int: The type of transpose applied to matrix A."], ["int", "int: Specifies whether or not A is unit triangular."], ["@B_android#support#v8#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#support#v8#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/de/d30/ctrsm_8f.html", "history": "added in version 23.0.0", "FullName": "void CTRSM (int Side, int Uplo, int TransA, int Diag, Float2 alpha, Allocation A, Allocation B)"}}, "Inheritance": ["@B_android#support#v8#renderscript#BaseObj_E@", "@B_android#support#v8#renderscript#Script_E@", "@B_android#support#v8#renderscript#ScriptIntrinsic_E@"], "ClassName": "android.support.v8.renderscript.ScriptIntrinsicBLAS", "ClassDesc": "ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/"}