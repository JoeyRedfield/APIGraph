{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "DoubleSummaryStatistics()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct an empty instance with zero count, zero sum, Double.POSITIVE_INFINITY min, Double.NEGATIVE_INFINITY max and zero average.", "history": "Added in API level 24", "FullName": "public DoubleSummaryStatistics ()"}, "accept(double)": {"Returns": [], "Parameters": [["double", "double: the input value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Records another value into the summary information.", "history": "Added in API level 24", "FullName": "public void accept (double value)"}, "getAverage()": {"Returns": [["double", "the arithmetic mean of values, or zero if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arithmetic mean of values recorded, or zero if no values have been recorded. If any recorded value is a NaN or the sum is at any point a NaN then the average will be code NaN. The average returned can vary depending upon the order in which values are recorded. This method may be implemented using compensated summation or other technique to reduce the error bound in the @B_java#util#DoubleSummaryStatistics#getSum_E@ used to compute the average.", "history": "Added in API level 24", "FullName": "public final double getAverage ()"}, "getMax()": {"Returns": [["double", "the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero.", "history": "Added in API level 24", "FullName": "public final double getMax ()"}, "getCount()": {"Returns": [["long", "the count of values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the count of values recorded.", "history": "Added in API level 24", "FullName": "public final long getCount ()"}, "getSum()": {"Returns": [["double", "the sum of values, or zero if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sum of values recorded, or zero if no values have been recorded. If any recorded value is a NaN or the sum is at any point a NaN then the sum will be NaN. The value of a floating-point sum is a function both of the input values as well as the order of addition operations. The order of addition operations of this method is intentionally not defined to allow for implementation flexibility to improve the speed and accuracy of the computed result. In particular, this method may be implemented using compensated summation or other technique to reduce the error bound in the numerical sum compared to a simple summation of double values.", "history": "Added in API level 24", "FullName": "public final double getSum ()"}, "combine(java.util.DoubleSummaryStatistics)": {"Returns": [], "Parameters": [["@B_java#util#DoubleSummaryStatistics_E@", "DoubleSummaryStatistics: another DoubleSummaryStatistics"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Combines the state of another DoubleSummaryStatistics into this one.", "history": "Added in API level 24", "FullName": "public void combine (DoubleSummaryStatistics other)"}, "getMin()": {"Returns": [["double", "the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero.", "history": "Added in API level 24", "FullName": "public final double getMin ()"}}, "Inheritance": [], "ClassName": "java.util.DoubleSummaryStatistics", "ClassDesc": "A state object for collecting statistics such as count, min, max, sum, and average. This class is designed to work with (though does not require) DoubleSummaryStatistics can be used as a"}