{"Functions": {"saveRecentQuery(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The string as typed by the user. This string will be displayed as the suggestion, and if the user clicks on the suggestion, this string will be sent to your searchable activity (as a new search query)."], ["@B_java#lang#String_E@", "String: If you have configured your recent suggestions provider with @B_android#content#SearchRecentSuggestionsProvider#DATABASE_MODE_2LINES_E@, you can pass a second line of text here. It will be shown in a smaller font, below the primary suggestion. When typing, matches in either line of text will be displayed in the list. If you did not configure two-line mode, or if a given suggestion does not have any additional text to display, you can pass null here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a query to the recent queries list. Returns immediately, performing the save in the background.", "history": "Added in API level 1", "FullName": "public void saveRecentQuery (String queryString, String line2)"}, "clearHistory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completely delete the history. Use this call to implement a \"clear history\" UI. Any application that implements search suggestions based on previous actions (such as recent queries, page/items viewed, etc.) should provide a way for the user to clear the history. This gives the user a measure of privacy, if they do not wish for their recent searches to be replayed by other users of the device (via suggestions).", "history": "Added in API level 1", "FullName": "public void clearHistory ()"}, "SearchRecentSuggestions(android.content.Context,java.lang.String,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_java#lang#String_E@", "String: This must match the authority that you've declared in your manifest."], ["int", "int: You can use mode flags here to determine certain functional aspects of your database. Note, this value should not change from run to run, because when it does change, your suggestions database may be wiped."]], "Throws": [], "SeeAlso": ["@B_android#content#SearchRecentSuggestionsProvider_E@", "@B_android#content#SearchRecentSuggestionsProvider#setupSuggestions_E@"], "Permissions": [], "Description": "Although provider utility classes are typically static, this one must be constructed because it needs to be initialized using the same values that you provided in your @B_android#content#SearchRecentSuggestionsProvider_E@.", "history": "Added in API level 1", "FullName": "public SearchRecentSuggestions (Context context, String authority, int mode)"}, "truncateHistory(android.content.ContentResolver,int)": {"Returns": [], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: Convenience copy of the content resolver."], ["int", "int: Max entries to leave in the table. 0 means remove all entries."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reduces the length of the history table, to prevent it from growing too large.", "history": "Added in API level 1", "FullName": "protected void truncateHistory (ContentResolver cr, int maxEntries)"}}, "Inheritance": [], "ClassName": "android.provider.SearchRecentSuggestions", "ClassDesc": "This is a utility class providing access to @B_android#content#SearchRecentSuggestionsProvider_E@. Unlike some utility classes, this one must be instantiated and properly initialized, so that it can be configured to operate with the search suggestions provider that you have created. Typically, you will do this in your searchable activity, each time you receive an incoming @B_android#content#Intent#ACTION_SEARCH_E@ Intent. The code to record each incoming query is as follows: For a working example, see SearchSuggestionSampleProvider and SearchQueryResults in samples/ApiDemos/app."}