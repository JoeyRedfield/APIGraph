{"Functions": {"getFileName()": {"Returns": [["@B_java#nio#file#Path_E@", "a path representing the name of the file or directory, or null if this path has zero elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the file or directory denoted by this path as a Path object. The file name is the farthest element from the root in the directory hierarchy.", "history": "Added in API level 26", "FullName": "public abstract Path getFileName ()"}, "toAbsolutePath()": {"Returns": [["@B_java#nio#file#Path_E@", "a Path object representing the absolute path"]], "Parameters": [], "Throws": [["@B_java#io#IOError_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and this path is not absolute, then the security manager's @B_java#lang#SecurityManager#checkPropertyAccess_E@ method is invoked to check access to the system property user.dir"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Path object representing the absolute path of this path. If this path is already @B_java#nio#file#Path#isAbsolute_E@ then this method simply returns this path. Otherwise, this method resolves the path in an implementation dependent manner, typically by resolving the path against a file system default directory. Depending on the implementation, this method may throw an I/O error if the file system is not accessible.", "history": "Added in API level 26", "FullName": "public abstract Path toAbsolutePath ()"}, "getFileSystem()": {"Returns": [["@B_java#nio#file#FileSystem_E@", "the file system that created this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the file system that created this object.", "history": "Added in API level 26", "FullName": "public abstract FileSystem getFileSystem ()"}, "getParent()": {"Returns": [["@B_java#nio#file#Path_E@", "a path representing the path's parent"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent path, or null if this path does not have a parent. The parent of this path object consists of this path's root component, if any, and each element in the path except for the farthest from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as \".\" and \"..\" that may be used in some implementations. On UNIX for example, the parent of \"/a/b/c\" is \"/a/b\", and the parent of \"x/y/.\" is \"x/y\". This method may be used with the @B_java#nio#file#Path#normalize_E@ method, to eliminate redundant names, for cases where shell-like navigation is required. If this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public abstract Path getParent ()"}, "startsWith(java.nio.file.Path)": {"Returns": [["boolean", "true if this path starts with the given path; otherwise false"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the given path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this path starts with the given path. This path starts with the given path if this path's root component starts with the root component of the given path, and this path starts with the same name elements as the given path. If the given path has more name elements than this path then false is returned. Whether or not the root component of this path starts with the root component of the given path is file system specific. If this path does not have a root component and the given path has a root component then this path does not start with the given path. If the given path is associated with a different FileSystem to this path then false is returned.", "history": "Added in API level 26", "FullName": "public abstract boolean startsWith (Path other)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the name elements of this path."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the name elements of this path. The first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The @B_java#nio#file#Path#getRoot_E@ component, if present, is not returned by the iterator.", "history": "Added in API level 26", "FullName": "public abstract Iterator<Path> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, the given object is a Path that is identical to this Path"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to which this object is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests this path for equality with the given object. If the given object is not a Path, or is a Path associated with a different FileSystem, then this method returns false. Whether or not two path are equal depends on the file system implementation. In some cases the paths are compared without regard to case, and others are case sensitive. This method does not access the file system and the file is not required to exist. Where required, the @B_java#nio#file#Files#isSameFile_E@ method may be used to check if two paths locate the same file. This method satisfies the general contract of the @B_java#lang#Object#equals_E@ method.", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object other)"}, "getNameCount()": {"Returns": [["int", "the number of elements in the path, or 0 if this path only represents a root component"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of name elements in the path.", "history": "Added in API level 26", "FullName": "public abstract int getNameCount ()"}, "subpath(int,int)": {"Returns": [["@B_java#nio#file#Path_E@", "a new Path object that is a subsequence of the name elements in this Path"]], "Parameters": [["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if beginIndex is negative, or greater than or equal to the number of elements. If endIndex is less than or equal to beginIndex, or larger than the number of elements."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a relative Path that is a subsequence of the name elements of this path. The beginIndex and endIndex parameters specify the subsequence of name elements. The name that is closest to the root in the directory hierarchy has index 0. The name that is farthest from the root has index @B_java#nio#file#Path#getNameCount_E@-1. The returned Path object has the name elements that begin at beginIndex and extend to the element at index endIndex-1.", "history": "Added in API level 26", "FullName": "public abstract Path subpath (int beginIndex, int endIndex)"}, "endsWith(java.lang.String)": {"Returns": [["boolean", "true if this path ends with the given path; otherwise false"]], "Parameters": [["@B_java#lang#String_E@", "String: the given path string"]], "Throws": [["@B_java#nio#file#InvalidPathException_E@", "If the path string cannot be converted to a Path."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the @B_java#nio#file#Path#endsWith_E@ method. On UNIX for example, the path \"foo/bar\" ends with \"foo/bar\" and \"bar\". It does not end with \"r\" or \"/bar\". Note that trailing separators are not taken into account, and so invoking this method on the Path\"foo/bar\" with the String \"bar/\" returns true.", "history": "Added in API level 26", "FullName": "public abstract boolean endsWith (String other)"}, "toRealPath(java.nio.file.LinkOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "an absolute path represent the real path of the file located by this object"]], "Parameters": [["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#io#IOException_E@", "if the file does not exist or an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file, and where this path is not absolute, its @B_java#lang#SecurityManager#checkPropertyAccess_E@ method is invoked to check access to the system property user.dir"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the real path of an existing file. The precise definition of this method is implementation dependent but in general it derives from this path, an @B_java#nio#file#Path#isAbsolute_E@ path that locates the @B_java#nio#file#Files#isSameFile_E@ file as this path, but with name elements that represent the actual name of the directories and the file. For example, where filename comparisons on a file system are case insensitive then the name elements represent the names in their actual case. Additionally, the resulting path has redundant name elements removed. If this path is relative then its absolute path is first obtained, as if by invoking the @B_java#nio#file#Path#toAbsolutePath_E@ method. The options array may be used to indicate how symbolic links are handled. By default, symbolic links are resolved to their final target. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then this method does not resolve symbolic links. Some implementations allow special names such as \"..\" to refer to the parent directory. When deriving the real path, and a \"..\" (or equivalent) is preceded by a non-\"..\" name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.", "history": "Added in API level 26", "FullName": "public abstract Path toRealPath (LinkOption... options)"}, "getName(int)": {"Returns": [["@B_java#nio#file#Path_E@", "the name element"]], "Parameters": [["int", "int: the index of the element"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if index is negative, index is greater than or equal to the number of elements, or this path has zero name elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name element of this path as a Path object. The index parameter is the index of the name element to return. The element that is closest to the root in the directory hierarchy has index 0. The element that is farthest from the root has index @B_java#nio#file#Path#getNameCount_E@-1.", "history": "Added in API level 26", "FullName": "public abstract Path getName (int index)"}, "hashCode()": {"Returns": [["int", "the hash-code value for this path"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes a hash code for this path. The hash code is based upon the components of the path, and satisfies the general contract of the @B_java#lang#Object#hashCode_E@ method.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}, "register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)": {"Returns": [["@B_java#nio#file#WatchKey_E@", "A key representing the registration of this object with the given watch service"]], "Parameters": [["@B_java#nio#file#WatchService_E@", "WatchService: The watch service to which this object is to be registered"], ["@B_java#nio#file#WatchEvent#Kind_E@", "Kind: The events for which this object should be registered"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If unsupported events are specified"], ["@B_java#lang#IllegalArgumentException_E@", "If an invalid combination of events is specified"], ["@B_java#nio#file#ClosedWatchServiceException_E@", "If the watch service is closed"], ["@B_java#nio#file#NotDirectoryException_E@", "If the file is registered to watch the entries in a directory and the file is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Registers the file located by this path with a watch service. An invocation of this method behaves in exactly the same way as the invocation", "history": "Added in API level 26", "FullName": "public abstract WatchKey register (WatchService watcher, Kind...<?> events)"}, "endsWith(java.nio.file.Path)": {"Returns": [["boolean", "true if this path ends with the given path; otherwise false"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the given path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this path ends with the given path. If the given path has N elements, and no root component, and this path has N or more elements, then this path ends with the given path if the last N elements of each path, starting at the element farthest from the root, are equal. If the given path has a root component then this path ends with the given path if the root component of this path ends with the root component of the given path, and the corresponding elements of both paths are equal. Whether or not the root component of this path ends with the root component of the given path is file system specific. If this path does not have a root component and the given path has a root component then this path does not end with the given path. If the given path is associated with a different FileSystem to this path then false is returned.", "history": "Added in API level 26", "FullName": "public abstract boolean endsWith (Path other)"}, "relativize(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting relative path, or an empty path if both paths are equal"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to relativize against this path"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if other is not a Path that can be relativized against this path"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a relative path between this path and a given path. Relativization is the inverse of @B_java#nio#file#Path#resolve_E@. This method attempts to construct a @B_java#nio#file#Path#isAbsolute_E@ path that when @B_java#nio#file#Path#resolve_E@ against this path, yields a path that locates the same file as the given path. For example, on UNIX, if this path is \"/a/b\" and the given path is \"/a/b/c/d\" then the resulting relative path would be \"c/d\". Where this path and the given path do not have a @B_java#nio#file#Path#getRoot_E@ component, then a relative path can be constructed. A relative path cannot be constructed if only one of the paths have a root component. Where both paths have a root component then it is implementation dependent if a relative path can be constructed. If this path and the given path are @B_java#nio#file#Path#equals_E@ then an For any two @B_java#nio#file#Path#normalize_E@ paths When symbolic links are supported, then whether the resulting path, when resolved against this path, yields a path that can be used to locate the @B_java#nio#file#Files#isSameFile_E@ file as other is implementation dependent. For example, if this path is \"/a/b\" and the given path is \"/a/x\" then the resulting relative path may be \"../x\". If \"b\" is a symbolic link then is implementation dependent if \"a/b/../x\" would locate the same file as \"/a/x\".", "history": "Added in API level 26", "FullName": "public abstract Path relativize (Path other)"}, "resolve(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to resolve against this path"]], "Throws": [], "SeeAlso": ["@B_java#nio#file#Path#relativize_E@"], "Permissions": [], "Description": "Resolve the given path against this path. If the other parameter is an @B_java#nio#file#Path#isAbsolute_E@ path then this method trivially returns other. If other is an @B_java#nio#file#Path#getRoot_E@ component, in which case this method joins the given path to this path and returns a resulting path that @B_java#nio#file#Path#endsWith_E@ with the given path. Where the given path has a root component then resolution is highly implementation dependent and therefore unspecified.", "history": "Added in API level 26", "FullName": "public abstract Path resolve (Path other)"}, "subpath(int, int)": {"Returns": [["@B_java#nio#file#Path_E@", "a new Path object that is a subsequence of the name elements in this Path"]], "Parameters": [["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if beginIndex is negative, or greater than or equal to the number of elements. If endIndex is less than or equal to beginIndex, or larger than the number of elements."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a relative Path that is a subsequence of the name elements of this path. The beginIndex and endIndex parameters specify the subsequence of name elements. The name that is closest to the root in the directory hierarchy has index 0. The name that is farthest from the root has index @B_java#nio#file#Path#getNameCount_E@-1. The returned Path object has the name elements that begin at beginIndex and extend to the element at index endIndex-1.", "history": "added in API level 26", "FullName": "public abstract Path subpath (int beginIndex, int endIndex)"}, "getRoot()": {"Returns": [["@B_java#nio#file#Path_E@", "a path representing the root component of this path, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the root component of this path as a Path object, or null if this path does not have a root component.", "history": "Added in API level 26", "FullName": "public abstract Path getRoot ()"}, "resolveSibling(java.lang.String)": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting path"]], "Parameters": [["@B_java#lang#String_E@", "String: the path string to resolve against this path's parent"]], "Throws": [["@B_java#nio#file#InvalidPathException_E@", "if the path string cannot be converted to a Path."]], "SeeAlso": ["@B_java#nio#file#FileSystem#getPath_E@"], "Permissions": [], "Description": "Converts a given path string to a Path and resolves it against this path's @B_java#nio#file#Path#getParent_E@ path in exactly the manner specified by the @B_java#nio#file#Path#resolveSibling_E@ method.", "history": "Added in API level 26", "FullName": "public abstract Path resolveSibling (String other)"}, "toFile()": {"Returns": [["@B_java#io#File_E@", "a File object representing this path"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if this Path is not associated with the default provider"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#io#File_E@ object representing this path. Where this Path is associated with the default provider, then this method is equivalent to returning a File object constructed with the String representation of this path. If this path was created by invoking the File @B_java#io#File#toPath_E@ method then there is no guarantee that the File object returned by this method is @B_java#nio#file#Path#equals_E@ to the original File.", "history": "Added in API level 26", "FullName": "public abstract File toFile ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation of this path"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of this path. If this path was created by converting a path string using the @B_java#nio#file#FileSystem#getPath_E@ method then the path string returned by this method may differ from the original String used to create the path. The returned path string uses the default name @B_java#nio#file#FileSystem#getSeparator_E@ to separate names in the path.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "resolveSibling(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to resolve against this path's parent"]], "Throws": [], "SeeAlso": ["@B_java#nio#file#Path#resolve_E@"], "Permissions": [], "Description": "Resolves the given path against this path's @B_java#nio#file#Path#getParent_E@ path. This is useful where a file name needs to be /\" and a path represents \"dir1/dir2/foo\", then invoking this method with the Path \"bar\" will result in the Path \"dir1/dir2/bar\". If this path does not have a parent path, or other is @B_java#nio#file#Path#isAbsolute_E@, then this method returns other. If other is an empty path then this method returns this path's parent, or where this path doesn't have a parent, the empty path.", "history": "Added in API level 26", "FullName": "public abstract Path resolveSibling (Path other)"}, "toUri()": {"Returns": [["@B_java#net#URI_E@", "the URI representing this path"]], "Parameters": [], "Throws": [["@B_java#io#IOError_E@", "if an I/O error occurs obtaining the absolute path, or where a file system is constructed to access the contents of a file as a file system, and the URI of the enclosing file system cannot be obtained"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#nio#file#Path#toAbsolutePath_E@ method throws a security exception."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a URI to represent this path. This method constructs an absolute @B_java#net#URI_E@ with a @B_java#net#URI#getScheme_E@ equal to the URI scheme that identifies the provider. The exact form of the scheme specific part is highly provider dependent. In the case of the default provider, the URI is hierarchical with a @B_java#net#URI#getPath_E@ component that is absolute. The query and fragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the URI may be used to construct a @B_java#io#File_E@. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting URI will end with a slash. The default provider provides a similar round-trip guarantee to the @B_java#io#File_E@ class. For a given Path Path, the URI, and the new Path are all created in (possibly different invocations of) the same Java virtual machine. Whether other providers make any guarantees is provider specific and therefore unspecified. When a file system is constructed to access the contents of a file as a file system then it is highly implementation specific if the returned URI represents the given path in the file system or it represents a compound URI that encodes the URI of the enclosing file system. A format for compound URIs is not defined in this release; such a scheme may be added in a future release.", "history": "Added in API level 26", "FullName": "public abstract URI toUri ()"}, "startsWith(java.lang.String)": {"Returns": [["boolean", "true if this path starts with the given path; otherwise false"]], "Parameters": [["@B_java#lang#String_E@", "String: the given path string"]], "Throws": [["@B_java#nio#file#InvalidPathException_E@", "If the path string cannot be converted to a Path."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the @B_java#nio#file#Path#startsWith_E@ method. On UNIX for example, the path \"foo/bar\" starts with \"foo\" and \"foo/bar\". It does not start with \"f\" or \"fo\".", "history": "Added in API level 26", "FullName": "public abstract boolean startsWith (String other)"}, "resolve(java.lang.String)": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting path"]], "Parameters": [["@B_java#lang#String_E@", "String: the path string to resolve against this path"]], "Throws": [["@B_java#nio#file#InvalidPathException_E@", "if the path string cannot be converted to a Path."]], "SeeAlso": ["@B_java#nio#file#FileSystem#getPath_E@"], "Permissions": [], "Description": "Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the @B_java#nio#file#Path#resolve_E@ method. For example, suppose that the name separator is \"/\" and a path represents \"foo/bar\", then invoking this method with the path string \"gus\" will result in the Path \"foo/bar/gus\".", "history": "Added in API level 26", "FullName": "public abstract Path resolve (String other)"}, "normalize()": {"Returns": [["@B_java#nio#file#Path_E@", "the resulting path or this path if it does not contain redundant name elements; an empty path is returned if this path does have a root component and all name elements are redundant"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#nio#file#Path#getParent_E@", "@B_java#nio#file#Path#toRealPath_E@"], "Permissions": [], "Description": "Returns a path that is this path with redundant name elements eliminated. The precise definition of this method is implementation dependent but in general it derives from this path, a path that does not contain redundant name elements. In many file systems, the \".\" and \"..\" are special names used to indicate the current directory and parent directory. In such file systems all occurrences of \".\" are considered redundant. If a \"..\" is preceded by a non-\"..\" name then both names are considered redundant (the process to identify such names is repeated until it is no longer applicable). This method does not access the file system; the path may not locate a file that exists. Eliminating \"..\" and a preceding name from a path may result in the path that locates a different file than the original path. This can arise when the preceding name is a symbolic link.", "history": "Added in API level 26", "FullName": "public abstract Path normalize ()"}, "register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)": {"Returns": [["@B_java#nio#file#WatchKey_E@", "a key representing the registration of this object with the given watch service"]], "Parameters": [["@B_java#nio#file#WatchService_E@", "WatchService: the watch service to which this object is to be registered"], ["@B_java#nio#file#WatchEvent#Kind_E@", "Kind: the events for which this object should be registered"], ["@B_java#nio#file#WatchEvent#Modifier_E@", "Modifier: the modifiers, if any, that modify how the object is registered"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if unsupported events or modifiers are specified"], ["@B_java#lang#IllegalArgumentException_E@", "if an invalid combination of events or modifiers is specified"], ["@B_java#nio#file#ClosedWatchServiceException_E@", "if the watch service is closed"], ["@B_java#nio#file#NotDirectoryException_E@", "if the file is registered to watch the entries in a directory and the file is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Registers the file located by this path with a watch service. In this release, this path locates a directory that exists. The directory is registered with the watch service so that entries in the directory can be watched. The events parameter is the events to register and may contain the following events: @B_java#nio#file#StandardWatchEventKinds#ENTRY_CREATE_E@ - entry created or moved into the directory @B_java#nio#file#StandardWatchEventKinds#ENTRY_DELETE_E@ - entry deleted or moved out of the directory @B_java#nio#file#StandardWatchEventKinds#ENTRY_MODIFY_E@ - entry in directory was modified The @B_java#nio#file#WatchEvent#context_E@ for these events is the relative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified. The set of events may include additional implementation specific event that are not defined by the enum @B_java#nio#file#StandardWatchEventKinds_E@ The modifiers parameter specifies modifiers that qualify how the directory is registered. This release does not define any standard modifiers. It may contain implementation specific modifiers. Where a file is registered with a watch service by means of a symbolic link then it is implementation specific if the watch continues to depend on the existence of the symbolic link after it is registered.", "history": "Added in API level 26", "FullName": "public abstract WatchKey register (WatchService watcher, Kind[]<?> events, Modifier... modifiers)"}, "isAbsolute()": {"Returns": [["boolean", "true if, and only if, this path is absolute"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this path is absolute. An absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file.", "history": "Added in API level 26", "FullName": "public abstract boolean isAbsolute ()"}, "compareTo(java.nio.file.Path)": {"Returns": [["int", "zero if the argument is @B_java#nio#file#Path#equals_E@ to this path, a value less than zero if this path is lexicographically less than the argument, or a value greater than zero if this path is lexicographically greater than the argument"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path compared to this path."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the paths are associated with different providers"]], "SeeAlso": [], "Permissions": [], "Description": "Compares two abstract paths lexicographically. The ordering defined by this method is provider specific, and in the case of the default provider, platform specific. This method does not access the file system and neither file is required to exist. This method may not be used to compare paths that are associated with different file system providers.", "history": "Added in API level 26", "FullName": "public abstract int compareTo (Path other)"}}, "Inheritance": [], "ClassName": "java.nio.file.Path", "ClassDesc": "An object that may be used to locate a file in a file system. It will typically represent a system dependent file path. A Path represents a path that is hierarchical and composed of a sequence of directory and file name elements separated by a special separator or delimiter. A root component, that identifies a file system hierarchy, may also be present. The name element that is farthest from the root of the directory hierarchy is the name of a file or directory. The other name elements are directory names. A Path can represent a root, a root and a sequence of names, or simply one or more name elements. A Path is considered to be an Path defines the @B_java#nio#file#Path#getFileName_E@, @B_java#nio#file#Path#getParent_E@, @B_java#nio#file#Path#getRoot_E@, and @B_java#nio#file#Path#subpath_E@ methods to access the path components or a subsequence of its name elements. In addition to accessing the components of a path, a Path also defines the @B_java#nio#file#Path#resolve_E@ and @B_java#nio#file#Path#resolveSibling_E@ methods to combine paths. The @B_java#nio#file#Path#relativize_E@ method that can be used to construct a relative path between two paths. Paths can be @B_java#lang#Comparable#compareTo_E@, and tested against each other using the @B_java#nio#file#Path#startsWith_E@ and @B_java#nio#file#Path#endsWith_E@ methods. This interface extends @B_java#nio#file#Watchable_E@ interface so that a directory located by a path can be @B_java#nio#file#Path#register_E@ with a @B_java#nio#file#WatchService_E@ and entries in the directory watched. Paths may be used with the @B_java#nio#file#Files_E@ class to operate on files, directories, and other types of files. For example, suppose we want a @B_java#io#BufferedReader_E@ to read text from a file \"access.log\". The file is located in a directory \"logs\" relative to the current working directory and is UTF-8 encoded. Paths associated with the default @B_java#nio#file#spi#FileSystemProvider_E@ are generally interoperable with the @B_java#io#File_E@ class. Paths created by other providers are unlikely to be interoperable with the abstract path names represented by java.io.File. The @B_java#io#File#toPath_E@ method may be used to obtain a Path from the abstract path name represented by a java.io.File object. The resulting Path can be used to operate on the same file as the java.io.File object. In addition, the @B_java#nio#file#Path#toFile_E@ method is useful to construct a File from the String representation of a Path. Implementations of this interface are immutable and safe for use by multiple concurrent threads."}