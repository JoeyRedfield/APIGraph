{"Functions": {"setLogo(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable to show as a logo."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the logo to display in the 'home' section of the action bar. The action bar will use a logo specified by its style or the activity logo by default. Whether the home section shows an icon or logo is controlled by the display option @B_android#support#v7#app#ActionBar#DISPLAY_USE_LOGO_E@.", "history": "", "FullName": "public void setLogo (Drawable logo)"}, "addTab(android.support.v7.app.ActionBar.Tab)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "Tab to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list. If this is the first tab to be added it will become the selected tab.", "history": "", "FullName": "public void addTab (ActionBar.Tab tab)"}, "getThemedContext()": {"Returns": [["", "A themed Context for creating views"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#content#Context_E@ with an appropriate theme for creating views that will appear in the action bar. If you are inflating or instantiating custom views that will appear in an action bar, you should use the Context returned by this method. (This includes adapters used for list navigation mode.) This will ensure that views contrast properly against the action bar.", "history": "", "FullName": "public Context getThemedContext ()"}, "removeTab(android.support.v7.app.ActionBar.Tab)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "The tab to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a tab from the action bar. If the removed tab was selected it will be deselected and another tab will be selected if present.", "history": "", "FullName": "public void removeTab (ActionBar.Tab tab)"}, "setHomeButtonEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the home button, false to disable the home button."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable or disable the \"home\" button in the corner of the action bar. (Note that this is the application home/up affordance on the action bar, not the systemwide home button.) This defaults to true for packages targeting < API 14. For packages targeting API 14 or greater, the application should call this method to enable interaction with the home/up affordance. Setting the @B_android#support#v7#app#ActionBar#DISPLAY_HOME_AS_UP_E@ display option will automatically enable the home button.", "history": "", "FullName": "public void setHomeButtonEnabled (boolean enabled)"}, "setDisplayShowCustomEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true if the currently set custom view should be displayed, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether a custom view should be displayed, if set. To set several display options at once, see the setDisplayOptions methods.", "history": "", "FullName": "public void setDisplayShowCustomEnabled (boolean showCustom)"}, "getSelectedNavigationIndex()": {"Returns": [["", "Position of the selected item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the position of the selected navigation item in list or tabbed navigation modes.", "history": "", "FullName": "public int getSelectedNavigationIndex ()"}, "removeTabAt(int)": {"Returns": [], "Parameters": [["int", "Position of the tab to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a tab from the action bar. If the removed tab was selected it will be deselected and another tab will be selected if present.", "history": "", "FullName": "public void removeTabAt (int position)"}, "removeOnMenuVisibilityListener(android.support.v7.app.ActionBar.OnMenuVisibilityListener)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#OnMenuVisibilityListener_E@", "A listener to remove that was previously added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a menu visibility listener. This listener will no longer receive menu visibility change events.", "history": "", "FullName": "public void removeOnMenuVisibilityListener (ActionBar.OnMenuVisibilityListener listener)"}, "setCustomView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "Custom navigation view to place in the ActionBar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar into custom navigation mode, supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes.", "history": "", "FullName": "public void setCustomView (View view)"}, "setDisplayShowTitleEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to display a title/subtitle if present."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether an activity title/subtitle should be displayed. To set several display options at once, see the setDisplayOptions methods.", "history": "", "FullName": "public void setDisplayShowTitleEnabled (boolean showTitle)"}, "setDisplayUseLogoEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to use the activity logo, false to use the activity icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether to display the activity logo rather than the activity icon. A logo is often a wider, more detailed image. To set several display options at once, see the setDisplayOptions methods.", "history": "", "FullName": "public void setDisplayUseLogoEnabled (boolean useLogo)"}, "setSelectedNavigationItem(int)": {"Returns": [], "Parameters": [["int", "Position of the item to select."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the selected navigation item in list or tabbed navigation modes.", "history": "", "FullName": "public void setSelectedNavigationItem (int position)"}, "setTitle(int)": {"Returns": [], "Parameters": [["int", "Resource ID of title string to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar's title. This will only be displayed if @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_TITLE_E@ is set.", "history": "", "FullName": "public void setTitle (int resId)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the ActionBar if it is not currently showing. If the window hosting the ActionBar does not have the feature @B_android#view#Window#FEATURE_ACTION_BAR_OVERLAY_E@ it will resize application content to fit the new space available. If you are hiding the ActionBar through @B_android#view#View#SYSTEM_UI_FLAG_FULLSCREEN_E@, you should not call this function directly.", "history": "", "FullName": "public void show ()"}, "addTab(android.support.v7.app.ActionBar.Tab, int)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "The tab to add"], ["int", "The new position of the tab"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a tab for use in tabbed navigation mode. The tab will be inserted at position. If this is the first tab to be added it will become the selected tab.", "history": "", "FullName": "public void addTab (ActionBar.Tab tab, int position)"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Background drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the ActionBar's background. This will be used for the primary action bar.", "history": "", "FullName": "public void setBackgroundDrawable (Drawable d)"}, "getSelectedTab()": {"Returns": [["", "The currently selected tab or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the currently selected tab if in tabbed navigation mode and there is at least one tab present.", "history": "", "FullName": "public ActionBar.Tab getSelectedTab ()"}, "getTitle()": {"Returns": [["", "The current ActionBar title or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current ActionBar title in standard mode. Returns null if @B_android#support#v7#app#ActionBar#getNavigationMode_E@ would not return @B_android#support#v7#app#ActionBar#NAVIGATION_MODE_STANDARD_E@.", "history": "", "FullName": "public CharSequence getTitle ()"}, "getHeight()": {"Returns": [["", "The ActionBar's height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current height of the ActionBar.", "history": "", "FullName": "public int getHeight ()"}, "setDisplayHomeAsUpEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to show the user that selecting home will return one level up rather than to the top level of the app."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether home should be displayed as an \"up\" affordance. Set this to true if selecting \"home\" returns up by a single level in your UI rather than back to the top level or front page. To set several display options at once, see the setDisplayOptions methods.", "history": "", "FullName": "public void setDisplayHomeAsUpEnabled (boolean showHomeAsUp)"}, "getNavigationItemCount()": {"Returns": [["", "Number of navigation items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of navigation items present in the current navigation mode.", "history": "", "FullName": "public int getNavigationItemCount ()"}, "addTab(android.support.v7.app.ActionBar.Tab, int, boolean)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "The tab to add"], ["int", "The new position of the tab"], ["boolean", "True if the added tab should become the selected tab."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a tab for use in tabbed navigation mode. The tab will be insterted at position.", "history": "", "FullName": "public void addTab (ActionBar.Tab tab, int position, boolean setSelected)"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "Title to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar's title. This will only be displayed if @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_TITLE_E@ is set.", "history": "", "FullName": "public void setTitle (CharSequence title)"}, "getDisplayOptions()": {"Returns": [["", "The current set of display options."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getDisplayOptions ()"}, "newTab()": {"Returns": [["", "A new Tab"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create and return a new @B_android#support#v7#app#ActionBar#Tab_E@. This tab will not be included in the action bar until it is added. Very often tabs will be used to switch between @B_android#support#v4#app#Fragment_E@ objects. Here is a typical implementation of such tabs:", "history": "", "FullName": "public ActionBar.Tab newTab ()"}, "setCustomView(android.view.View, android.support.v7.app.ActionBar.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "Custom navigation view to place in the ActionBar."], ["@B_android#support#v7#app#ActionBar#LayoutParams_E@", "How this custom view should layout in the bar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar into custom navigation mode, supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes. The display option @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_CUSTOM_E@ must be set for the custom view to be displayed.", "history": "", "FullName": "public void setCustomView (View view, ActionBar.LayoutParams layoutParams)"}, "removeAllTabs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all tabs from the action bar and deselect the current tab.", "history": "", "FullName": "public void removeAllTabs ()"}, "addTab(android.support.v7.app.ActionBar.Tab, boolean)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "Tab to add"], ["boolean", "True if the added tab should become the selected tab."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.", "history": "", "FullName": "public void addTab (ActionBar.Tab tab, boolean setSelected)"}, "getNavigationMode()": {"Returns": [["", "The current navigation mode."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current navigation mode. The result will be one of: @B_android#support#v7#app#ActionBar#NAVIGATION_MODE_STANDARD_E@ @B_android#support#v7#app#ActionBar#NAVIGATION_MODE_LIST_E@ @B_android#support#v7#app#ActionBar#NAVIGATION_MODE_TABS_E@", "history": "", "FullName": "public int getNavigationMode ()"}, "setIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable to show as an icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to display in the 'home' section of the action bar. The action bar will use an icon specified by its style or the activity icon by default. Whether the home section shows an icon or logo is controlled by the display option @B_android#support#v7#app#ActionBar#DISPLAY_USE_LOGO_E@.", "history": "", "FullName": "public void setIcon (Drawable icon)"}, "getTabCount()": {"Returns": [["", "Tab count"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of tabs currently registered with the action bar.", "history": "", "FullName": "public int getTabCount ()"}, "ActionBarImplJB(android.app.Activity, android.support.v7.app.ActionBar.Callback)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public ActionBarImplJB (Activity activity, ActionBar.Callback callback)"}, "isShowing()": {"Returns": [["", "true if the ActionBar is showing, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean isShowing ()"}, "setSubtitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "Subtitle to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar's subtitle. This will only be displayed if @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_TITLE_E@ is set. Set to null to disable the subtitle entirely.", "history": "", "FullName": "public void setSubtitle (CharSequence subtitle)"}, "setDisplayShowHomeEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to show home, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether to include the application home affordance in the action bar. Home is presented as either an activity icon or logo. To set several display options at once, see the setDisplayOptions methods.", "history": "", "FullName": "public void setDisplayShowHomeEnabled (boolean showHome)"}, "setDisplayOptions(int)": {"Returns": [], "Parameters": [["int", "A combination of the bits defined by the DISPLAY_ constants defined in ActionBar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set display options. This changes all display option bits at once. To change a limited subset of display options, see @B_android#support#v7#app#ActionBar#setDisplayOptions_E@.", "history": "", "FullName": "public void setDisplayOptions (int options)"}, "setSubtitle(int)": {"Returns": [], "Parameters": [["int", "Resource ID of subtitle string to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar's subtitle. This will only be displayed if @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_TITLE_E@ is set.", "history": "", "FullName": "public void setSubtitle (int resId)"}, "setDisplayOptions(int, int)": {"Returns": [], "Parameters": [["int", "A combination of the bits defined by the DISPLAY_ constants defined in ActionBar."], ["int", "A bit mask declaring which display options should be changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set selected display options. Only the options specified by mask will be changed. To change all display option bits at once, see @B_android#support#v7#app#ActionBar#setDisplayOptions_E@. Example: setDisplayOptions(0, DISPLAY_SHOW_HOME) will disable the @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_HOME_E@ option. setDisplayOptions(DISPLAY_SHOW_HOME, DISPLAY_SHOW_HOME | DISPLAY_USE_LOGO) will enable @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_HOME_E@ and disable @B_android#support#v7#app#ActionBar#DISPLAY_USE_LOGO_E@.", "history": "", "FullName": "public void setDisplayOptions (int options, int mask)"}, "hide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the ActionBar if it is currently showing. If the window hosting the ActionBar does not have the feature @B_android#view#Window#FEATURE_ACTION_BAR_OVERLAY_E@ it will resize application content to fit the new space available. Instead of calling this function directly, you can also cause an ActionBar using the overlay feature to hide through @B_android#view#View#SYSTEM_UI_FLAG_FULLSCREEN_E@. Hiding the ActionBar through this system UI flag allows you to more seamlessly hide it in conjunction with other screen decorations.", "history": "", "FullName": "public void hide ()"}, "getCustomView()": {"Returns": [["", "The current custom view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public View getCustomView ()"}, "setNavigationMode(int)": {"Returns": [], "Parameters": [["int", "The new mode to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the current navigation mode.", "history": "", "FullName": "public void setNavigationMode (int mode)"}, "selectTab(android.support.v7.app.ActionBar.Tab)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#Tab_E@", "Tab to select"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Select the specified tab. If it is not a child of this action bar it will be added. Note: If you want to select by index, use @B_android#support#v7#app#ActionBar#setSelectedNavigationItem_E@.", "history": "", "FullName": "public void selectTab (ActionBar.Tab tab)"}, "getSubtitle()": {"Returns": [["", "The current ActionBar subtitle or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current ActionBar subtitle in standard mode. Returns null if @B_android#support#v7#app#ActionBar#getNavigationMode_E@ would not return @B_android#support#v7#app#ActionBar#NAVIGATION_MODE_STANDARD_E@.", "history": "", "FullName": "public CharSequence getSubtitle ()"}, "getTabAt(int)": {"Returns": [], "Parameters": [["int", "Index value in the range 0-get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tab at the specified index.", "history": "", "FullName": "public ActionBar.Tab getTabAt (int index)"}, "setListNavigationCallbacks(android.widget.SpinnerAdapter, android.support.v7.app.ActionBar.OnNavigationListener)": {"Returns": [], "Parameters": [["@B_android#widget#SpinnerAdapter_E@", "An adapter that will provide views both to display the current navigation selection and populate views within the dropdown navigation menu."], ["@B_android#support#v7#app#ActionBar#OnNavigationListener_E@", "An OnNavigationListener that will receive events when the user selects a navigation item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the adapter and navigation callback for list navigation mode. The supplied adapter will provide views for the expanded list as well as the currently selected item. (These may be displayed differently.) The supplied OnNavigationListener will alert the application when the user changes the current list selection.", "history": "", "FullName": "public void setListNavigationCallbacks (SpinnerAdapter adapter, ActionBar.OnNavigationListener callback)"}, "addOnMenuVisibilityListener(android.support.v7.app.ActionBar.OnMenuVisibilityListener)": {"Returns": [], "Parameters": [["@B_android#support#v7#app#ActionBar#OnMenuVisibilityListener_E@", "The new listener to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a listener that will respond to menu visibility change events.", "history": "", "FullName": "public void addOnMenuVisibilityListener (ActionBar.OnMenuVisibilityListener listener)"}, "setIcon(int)": {"Returns": [], "Parameters": [["int", "Resource ID of a drawable to show as an icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to display in the 'home' section of the action bar. The action bar will use an icon specified by its style or the activity icon by default. Whether the home section shows an icon or logo is controlled by the display option @B_android#support#v7#app#ActionBar#DISPLAY_USE_LOGO_E@.", "history": "", "FullName": "public void setIcon (int resId)"}, "setLogo(int)": {"Returns": [], "Parameters": [["int", "Resource ID of a drawable to show as a logo."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the logo to display in the 'home' section of the action bar. The action bar will use a logo specified by its style or the activity logo by default. Whether the home section shows an icon or logo is controlled by the display option @B_android#support#v7#app#ActionBar#DISPLAY_USE_LOGO_E@.", "history": "", "FullName": "public void setLogo (int resId)"}, "setCustomView(int)": {"Returns": [], "Parameters": [["int", "Resource ID of a layout to inflate into the ActionBar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action bar into custom navigation mode, supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes. The display option @B_android#support#v7#app#ActionBar#DISPLAY_SHOW_CUSTOM_E@ must be set for the custom view to be displayed.", "history": "", "FullName": "public void setCustomView (int resId)"}}, "Inheritance": ["@B_android#support#v7#app#ActionBar_E@"], "ClassName": "android.support.v7.app.ActionBarImplJB", "ClassDesc": ""}