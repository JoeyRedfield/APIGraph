{"Functions": {"getDeviceList()": {"Returns": [["@B_java#util#HashMap_E@", "HashMap containing all connected USB devices."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a HashMap containing all USB devices currently attached. USB device name is the key for the returned HashMap. The result will be empty if no devices are attached, or if USB host mode is inactive or unsupported. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_HOST_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public HashMap<String, UsbDevice> getDeviceList ()"}, "hasPermission(android.hardware.usb.UsbDevice)": {"Returns": [["boolean", "true if caller has permission"]], "Parameters": [["@B_android#hardware#usb#UsbDevice_E@", "UsbDevice: to check permissions for"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CAMERA_E@"], "Description": "Returns true if the caller has permission to access the device. Permission might have been granted temporarily via @B_android#hardware#usb#UsbManager#requestPermission_E@ or by the user choosing the caller as the default application for the device. Permission for USB devices of class @B_android#hardware#usb#UsbConstants#USB_CLASS_VIDEO_E@ for clients that target SDK @B_android#os#Build#VERSION_CODES#P_E@ and above can be granted only if they have additionally the @B_android#Manifest#permission#CAMERA_E@ permission. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_HOST_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public boolean hasPermission (UsbDevice device)"}, "hasPermission(android.hardware.usb.UsbAccessory)": {"Returns": [["boolean", "true if caller has permission"]], "Parameters": [["@B_android#hardware#usb#UsbAccessory_E@", "UsbAccessory: to check permissions for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the caller has permission to access the accessory. Permission might have been granted temporarily via @B_android#hardware#usb#UsbManager#requestPermission_E@ or by the user choosing the caller as the default application for the accessory. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_ACCESSORY_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public boolean hasPermission (UsbAccessory accessory)"}, "openAccessory(android.hardware.usb.UsbAccessory)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "file descriptor, or null if the accessory could not be opened."]], "Parameters": [["@B_android#hardware#usb#UsbAccessory_E@", "UsbAccessory: the USB accessory to open"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens a file descriptor for reading and writing data to the USB accessory. If data is read from the @B_java#io#InputStream_E@ created from this file descriptor all data of a USB transfer should be read at once. If only a partial request is read the rest of the transfer is dropped. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_ACCESSORY_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public ParcelFileDescriptor openAccessory (UsbAccessory accessory)"}, "requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#hardware#usb#UsbDevice_E@", "UsbDevice: to request permissions for"], ["@B_android#app#PendingIntent_E@", "PendingIntent: PendingIntent for returning result"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CAMERA_E@"], "Description": "Requests temporary permission for the given package to access the device. This may result in a system dialog being displayed to the user if permission had not already been granted. Success or failure is returned via the @B_android#app#PendingIntent_E@ pi. If successful, this grants the caller permission to access the device only until the device is disconnected. The following extras will be added to pi: @B_android#hardware#usb#UsbManager#EXTRA_DEVICE_E@ containing the device passed into this call @B_android#hardware#usb#UsbManager#EXTRA_PERMISSION_GRANTED_E@ containing boolean indicating whether permission was granted by the user Permission for USB devices of class @B_android#hardware#usb#UsbConstants#USB_CLASS_VIDEO_E@ for clients that target SDK @B_android#os#Build#VERSION_CODES#P_E@ and above can be granted only if they have additionally the @B_android#Manifest#permission#CAMERA_E@ permission. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_HOST_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public void requestPermission (UsbDevice device, PendingIntent pi)"}, "requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#hardware#usb#UsbAccessory_E@", "UsbAccessory: to request permissions for"], ["@B_android#app#PendingIntent_E@", "PendingIntent: PendingIntent for returning result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests temporary permission for the given package to access the accessory. This may result in a system dialog being displayed to the user if permission had not already been granted. Success or failure is returned via the @B_android#app#PendingIntent_E@ pi. If successful, this grants the caller permission to access the accessory only until the device is disconnected. The following extras will be added to pi: @B_android#hardware#usb#UsbManager#EXTRA_ACCESSORY_E@ containing the accessory passed into this call @B_android#hardware#usb#UsbManager#EXTRA_PERMISSION_GRANTED_E@ containing boolean indicating whether permission was granted by the user Requires the @B_android#content#pm#PackageManager#FEATURE_USB_ACCESSORY_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public void requestPermission (UsbAccessory accessory, PendingIntent pi)"}, "getAccessoryList()": {"Returns": [["@B_android#hardware#usb#UsbAccessory_E@", "list of USB accessories, or null if none are attached."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of currently attached USB accessories. (in the current implementation there can be at most one) Requires the @B_android#content#pm#PackageManager#FEATURE_USB_ACCESSORY_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public UsbAccessory[] getAccessoryList ()"}, "openDevice(android.hardware.usb.UsbDevice)": {"Returns": [["@B_android#hardware#usb#UsbDeviceConnection_E@", "a @B_android#hardware#usb#UsbDeviceConnection_E@, or null if open failed"]], "Parameters": [["@B_android#hardware#usb#UsbDevice_E@", "UsbDevice: the device to open"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens the device so it can be used to send and receive data using @B_android#hardware#usb#UsbRequest_E@. Requires the @B_android#content#pm#PackageManager#FEATURE_USB_HOST_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 12", "FullName": "public UsbDeviceConnection openDevice (UsbDevice device)"}}, "Inheritance": [], "ClassName": "android.hardware.usb.UsbManager", "ClassDesc": "This class allows you to access the state of USB and communicate with USB devices. Currently only host mode is supported in the public API."}