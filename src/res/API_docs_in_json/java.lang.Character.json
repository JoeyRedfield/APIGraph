{"Functions": {"codePointAt(java.lang.CharSequence,int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: a sequence of char values (Unicode code units)"], ["int", "int: the index to the char values (Unicode code units) in seq to be converted"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the value index is negative or not less than @B_java#lang#CharSequence#length_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the CharSequence. If the char value at the given index in the CharSequence is in the high-surrogate range, the following index is less than the length of the CharSequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "Added in API level 1", "FullName": "public static int codePointAt (CharSequence seq, int index)"}, "Character(char)": {"Returns": [], "Parameters": [["char", "char: the value to be represented by the Character object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Character object that represents the specified char value.", "history": "Added in API level 1", "FullName": "public Character (char value)"}, "codePointAt(char[], int, int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index to the char values (Unicode code units) in the char array to be converted"], ["int", "int: the index after the last array element that can be used in the char array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is negative or not less than the limit argument, or if the limit argument is negative or greater than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the char array, where only array elements with index less than limit can be used. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the limit, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "added in API level 1", "FullName": "public static int codePointAt (char[] a, int index, int limit)"}, "isHighSurrogate(char)": {"Returns": [["boolean", "true if the char value is between @B_java#lang#Character#MIN_HIGH_SURROGATE_E@ and @B_java#lang#Character#MAX_HIGH_SURROGATE_E@ inclusive; false otherwise."]], "Parameters": [["char", "char: the char value to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowSurrogate_E@", "@B_java#lang#Character#UnicodeBlock#of_E@"], "Permissions": [], "Description": "Determines if the given char value is a Such values do not represent characters by themselves, but are used in the representation of", "history": "Added in API level 1", "FullName": "public static boolean isHighSurrogate (char ch)"}, "isLetterOrDigit(int)": {"Returns": [["boolean", "true if the character is a letter or digit; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a letter or digit. A character is considered to be a letter or digit if either @B_java#lang#Character#isLetter_E@ or @B_java#lang#Character#isDigit_E@ returns true for the character.", "history": "Added in API level 1", "FullName": "public static boolean isLetterOrDigit (int codePoint)"}, "toString(char)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the specified char"]], "Parameters": [["char", "char: the char to be converted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing the specified char. The result is a string of length 1 consisting solely of the specified char.", "history": "Added in API level 1", "FullName": "public static String toString (char c)"}, "isDefined(int)": {"Returns": [["boolean", "true if the character has a defined meaning in Unicode; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#isUpperCase_E@"], "Permissions": [], "Description": "Determines if a character (Unicode code point) is defined in Unicode. A character is defined if at least one of the following is true: It has an entry in the UnicodeData file. It has a value in a range defined by the UnicodeData file.", "history": "Added in API level 1", "FullName": "public static boolean isDefined (int codePoint)"}, "codePointAt(java.lang.CharSequence, int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: a sequence of char values (Unicode code units)"], ["int", "int: the index to the char values (Unicode code units) in seq to be converted"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the value index is negative or not less than @B_java#lang#CharSequence#length_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the CharSequence. If the char value at the given index in the CharSequence is in the high-surrogate range, the following index is less than the length of the CharSequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "added in API level 1", "FullName": "public static int codePointAt (CharSequence seq, int index)"}, "isLowerCase(int)": {"Returns": [["boolean", "true if the character is lowercase; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toLowerCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a lowercase character. A character is lowercase if its general category type, provided by @B_java#lang#Character#getType_E@, is LOWERCASE_LETTER, or it has contributory property Other_Lowercase as defined by the Unicode Standard. The following are examples of lowercase characters: Many other Unicode characters are lowercase too.", "history": "Added in API level 1", "FullName": "public static boolean isLowerCase (int codePoint)"}, "compare(char,char)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["char", "char: the first char to compare"], ["char", "char: the second char to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two char values numerically. The value returned is identical to what would be returned by:", "history": "Added in API level 19", "FullName": "public static int compare (char x, char y)"}, "toCodePoint(char,char)": {"Returns": [["int", "the supplementary code point composed from the specified surrogate pair."]], "Parameters": [["char", "char: the high-surrogate code unit"], ["char", "char: the low-surrogate code unit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified surrogate pair to its supplementary code point value. This method does not validate the specified surrogate pair. The caller must validate it using @B_java#lang#Character#isSurrogatePair_E@ if necessary.", "history": "Added in API level 1", "FullName": "public static int toCodePoint (char high, char low)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Character object that represents the same char value as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getDirectionality(int)": {"Returns": [["byte", "the directionality property of the character."]], "Parameters": [["int", "int: the character (Unicode code point) for which the directionality property is requested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns the Unicode directionality property for the given character (Unicode code point). Character directionality is used to calculate the visual ordering of text. The directionality value of undefined character is @B_java#lang#Character#DIRECTIONALITY_UNDEFINED_E@.", "history": "Added in API level 1", "FullName": "public static byte getDirectionality (int codePoint)"}, "toChars(int, char[], int)": {"Returns": [["int", "1 if the code point is a BMP code point, 2 if the code point is a supplementary code point."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."], ["char[]", "char: an array of char in which the codePoint's UTF-16 value is stored."], ["int", "int: the start index into the dst array where the converted value is stored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified codePoint is not a valid Unicode code point."], ["@B_java#lang#NullPointerException_E@", "if the specified dst is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if dstIndex is negative or not less than dst.length, or if dst at dstIndex doesn't have enough array element(s) to store the resulting char value(s). (If dstIndex is equal to dst.length-1 and the specified codePoint is a supplementary character, the high-surrogate value is not stored in dst[dstIndex].)"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified character (Unicode code point) to its UTF-16 representation. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the same value is stored in dst[dstIndex], and 1 is returned. If the specified code point is a supplementary character, its surrogate values are stored in dst[dstIndex] (high-surrogate) and dst[dstIndex+1] (low-surrogate), and 2 is returned.", "history": "added in API level 1", "FullName": "public static int toChars (int codePoint, char[] dst, int dstIndex)"}, "toUpperCase(char)": {"Returns": [["char", "the uppercase equivalent of the character, if any; otherwise, the character itself."]], "Parameters": [["char", "char: the character to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isUpperCase_E@", "@B_java#lang#String#toUpperCase_E@"], "Permissions": [], "Description": "Converts the character argument to uppercase using case mapping information from the UnicodeData file. Note that Character.isUpperCase(Character.toUpperCase(ch)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, @B_java#lang#String#toUpperCase_E@ should be used to map characters to uppercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot. @B_java#lang#Character#toUpperCase_E@ method.", "history": "Added in API level 1", "FullName": "public static char toUpperCase (char ch)"}, "digit(char,int)": {"Returns": [["int", "the numeric value represented by the character in the specified radix."]], "Parameters": [["char", "char: the character to be converted."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the numeric value of the character ch in the specified radix. If the radix is not in the range MIN_RADIX \u2264 radix \u2264 MAX_RADIX or if the value of ch is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method isDigit is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix + 'A' - 10. In this case, ch - 'A' + 10 is returned. The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix + 'a' - 10. In this case, ch - 'a' + 10 is returned. The character is one of the fullwidth uppercase Latin letters A ('\\uFF21') through Z ('\\uFF3A') and its code is less than radix + '\\uFF21' - 10. In this case, ch - '\\uFF21' + 10 is returned. The character is one of the fullwidth lowercase Latin letters a ('\\uFF41') through z ('\\uFF5A') and its code is less than radix + '\\uFF41' - 10. In this case, ch - '\\uFF41' + 10 is returned. @B_java#lang#Character#digit_E@ method.", "history": "Added in API level 1", "FullName": "public static int digit (char ch, int radix)"}, "hashCode(char)": {"Returns": [["int", "a hash code value for a char value."]], "Parameters": [["char", "char: The char for which to return a hash code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a char value; compatible with Character.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (char value)"}, "isSpaceChar(int)": {"Returns": [["boolean", "true if the character is a space character; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isWhitespace_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard. This method returns true if the character's general category type is any of the following: @B_java#lang#Character#SPACE_SEPARATOR_E@ @B_java#lang#Character#LINE_SEPARATOR_E@ @B_java#lang#Character#PARAGRAPH_SEPARATOR_E@", "history": "Added in API level 1", "FullName": "public static boolean isSpaceChar (int codePoint)"}, "isAlphabetic(int)": {"Returns": [["boolean", "true if the character is a Unicode alphabet character, false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is an alphabet. A character is considered to be alphabetic if its general category type, provided by @B_java#lang#Character#getType_E@, is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER LETTER_NUMBER or it has contributory property Other_Alphabetic as defined by the Unicode Standard.", "history": "Added in API level 19", "FullName": "public static boolean isAlphabetic (int codePoint)"}, "forDigit(int, int)": {"Returns": [["char", "the char representation of the specified digit in the specified radix."]], "Parameters": [["int", "int: the number to convert to a character."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@", "@B_java#lang#Character#digit_E@"], "Permissions": [], "Description": "Determines the character representation for a specific digit in the specified radix. If the value of radix is not a valid radix, or the value of digit is not a valid digit in the specified radix, the null character ('\\u0000') is returned. The radix argument is valid if it is greater than or equal to MIN_RADIX and less than or equal to MAX_RADIX. The digit argument is valid if 0 <= digit < radix. If the digit is less than 10, then '0' + digit is returned. Otherwise, the value 'a' + digit - 10 is returned.", "history": "added in API level 1", "FullName": "public static char forDigit (int digit, int radix)"}, "isJavaLetter(char)": {"Returns": [["boolean", "true if the character may start a Java identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaLetterOrDigit_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@"], "Permissions": [], "Description": "Replaced by isJavaIdentifierStart(char). Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following is true: @B_java#lang#Character#isLetter_E@ returns true @B_java#lang#Character#getType_E@ returns LETTER_NUMBER ch is a currency symbol (such as '$') ch is a connecting punctuation character (such as '_').", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static boolean isJavaLetter (char ch)"}, "charValue()": {"Returns": [["char", "the primitive char value represented by this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Character object.", "history": "Added in API level 1", "FullName": "public char charValue ()"}, "isDigit(char)": {"Returns": [["boolean", "true if the character is a digit; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#digit_E@", "@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character is a digit. A character is a digit if its general category type, provided by Character.getType(ch), is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: '\\u0030' through '\\u0039', ISO-LATIN-1 digits ('0' through '9') '\\u0660' through '\\u0669', Arabic-Indic digits '\\u06F0' through '\\u06F9', Extended Arabic-Indic digits '\\u0966' through '\\u096F', Devanagari digits '\\uFF10' through '\\uFF19', Fullwidth digits Many other character ranges contain digits as well. @B_java#lang#Character#isDigit_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isDigit (char ch)"}, "codePointCount(char[], int, int)": {"Returns": [["int", "the number of Unicode code points in the specified subarray"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index of the first char in the given char array"], ["int", "int: the length of the subarray in chars"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if offset or count is negative, or if offset + count is larger than the length of the given array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in a subarray of the char array argument. The offset argument is the index of the first char of the subarray and the count argument specifies the length of the subarray in chars. Unpaired surrogates within the subarray count as one code point each.", "history": "added in API level 1", "FullName": "public static int codePointCount (char[] a, int offset, int count)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing this Character's value. The result is a string of length 1 whose sole component is the primitive char value represented by this Character object.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "offsetByCodePoints(char[], int, int, int, int)": {"Returns": [["int", "the index within the subarray"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index of the first char of the subarray"], ["int", "int: the length of the subarray in chars"], ["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if start or count is negative, or if start + count is larger than the length of the given array, or if index is less than start or larger then start + count, or if codePointOffset is positive and the text range starting with index and ending with start + count - 1 has fewer than codePointOffset code points, or if codePointOffset is negative and the text range starting with start and ending with index - 1 has fewer than the absolute value of codePointOffset code points."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within the given char subarray that is offset from the given index by codePointOffset code points. The start and count arguments specify a subarray of the char array. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "added in API level 1", "FullName": "public static int offsetByCodePoints (char[] a, int start, int count, int index, int codePointOffset)"}, "isJavaIdentifierPart(int)": {"Returns": [["boolean", "true if the character may be part of a Java identifier; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isIdentifierIgnorable_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark @B_java#lang#Character#isIdentifierIgnorable_E@ returns true for the character", "history": "Added in API level 1", "FullName": "public static boolean isJavaIdentifierPart (int codePoint)"}, "highSurrogate(int)": {"Returns": [["char", "the leading surrogate code unit used to represent the character in the UTF-16 encoding"]], "Parameters": [["int", "int: a supplementary character (Unicode code point)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the leading surrogate (a char is returned. If @B_java#lang#Character#isSupplementaryCodePoint_E@ is true, then @B_java#lang#Character#isHighSurrogate_E@(highSurrogate(x)) and @B_java#lang#Character#toCodePoint_E@(highSurrogate(x), @B_java#lang#Character#lowSurrogate_E@(x)) == x are also always true.", "history": "Added in API level 19", "FullName": "public static char highSurrogate (int codePoint)"}, "getDirectionality(char)": {"Returns": [["byte", "the directionality property of the char value."]], "Parameters": [["char", "char: char for which the directionality property is requested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns the Unicode directionality property for the given character. Character directionality is used to calculate the visual ordering of text. The directionality value of undefined char values is DIRECTIONALITY_UNDEFINED. @B_java#lang#Character#getDirectionality_E@ method.", "history": "Added in API level 1", "FullName": "public static byte getDirectionality (char ch)"}, "toChars(int,char[],int)": {"Returns": [["int", "1 if the code point is a BMP code point, 2 if the code point is a supplementary code point."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."], ["char[]", "char: an array of char in which the codePoint's UTF-16 value is stored."], ["int", "int: the start index into the dst array where the converted value is stored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified codePoint is not a valid Unicode code point."], ["@B_java#lang#NullPointerException_E@", "if the specified dst is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if dstIndex is negative or not less than dst.length, or if dst at dstIndex doesn't have enough array element(s) to store the resulting char value(s). (If dstIndex is equal to dst.length-1 and the specified codePoint is a supplementary character, the high-surrogate value is not stored in dst[dstIndex].)"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified character (Unicode code point) to its UTF-16 representation. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the same value is stored in dst[dstIndex], and 1 is returned. If the specified code point is a supplementary character, its surrogate values are stored in dst[dstIndex] (high-surrogate) and dst[dstIndex+1] (low-surrogate), and 2 is returned.", "history": "Added in API level 1", "FullName": "public static int toChars (int codePoint, char[] dst, int dstIndex)"}, "isIdentifierIgnorable(int)": {"Returns": [["boolean", "true if the character is an ignorable control character that may be part of a Java or Unicode identifier; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace '\\u0000' through '\\u0008' '\\u000E' through '\\u001B' '\\u007F' through '\\u009F' all characters that have the FORMAT general category value", "history": "Added in API level 1", "FullName": "public static boolean isIdentifierIgnorable (int codePoint)"}, "isValidCodePoint(int)": {"Returns": [["boolean", "true if the specified code point value is between @B_java#lang#Character#MIN_CODE_POINT_E@ and @B_java#lang#Character#MAX_CODE_POINT_E@ inclusive; false otherwise."]], "Parameters": [["int", "int: the Unicode code point to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified code point is a valid", "history": "Added in API level 1", "FullName": "public static boolean isValidCodePoint (int codePoint)"}, "toUpperCase(int)": {"Returns": [["int", "the uppercase equivalent of the character, if any; otherwise, the character itself."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isUpperCase_E@", "@B_java#lang#String#toUpperCase_E@"], "Permissions": [], "Description": "Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file. Note that Character.isUpperCase(Character.toUpperCase(codePoint)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, @B_java#lang#String#toUpperCase_E@ should be used to map characters to uppercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot.", "history": "Added in API level 1", "FullName": "public static int toUpperCase (int codePoint)"}, "isUpperCase(int)": {"Returns": [["boolean", "true if the character is uppercase; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toUpperCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is an uppercase character. A character is uppercase if its general category type, provided by @B_java#lang#Character#getType_E@, is UPPERCASE_LETTER, or it has contributory property Other_Uppercase as defined by the Unicode Standard. The following are examples of uppercase characters: Many other Unicode characters are uppercase too.", "history": "Added in API level 1", "FullName": "public static boolean isUpperCase (int codePoint)"}, "codePointBefore(char[], int, int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index following the code point that should be returned"], ["int", "int: the index of the first array element in the char array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is not greater than the start argument or is greater than the length of the char array, or if the start argument is negative or not less than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not less than start, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "added in API level 1", "FullName": "public static int codePointBefore (char[] a, int index, int start)"}, "forDigit(int,int)": {"Returns": [["char", "the char representation of the specified digit in the specified radix."]], "Parameters": [["int", "int: the number to convert to a character."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@", "@B_java#lang#Character#digit_E@"], "Permissions": [], "Description": "Determines the character representation for a specific digit in the specified radix. If the value of radix is not a valid radix, or the value of digit is not a valid digit in the specified radix, the null character ('\\u0000') is returned. The radix argument is valid if it is greater than or equal to MIN_RADIX and less than or equal to MAX_RADIX. The digit argument is valid if 0 <= digit < radix. If the digit is less than 10, then '0' + digit is returned. Otherwise, the value 'a' + digit - 10 is returned.", "history": "Added in API level 1", "FullName": "public static char forDigit (int digit, int radix)"}, "isSpace(char)": {"Returns": [["boolean", "true if the character is ISO-LATIN-1 white space; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSpaceChar_E@", "@B_java#lang#Character#isWhitespace_E@"], "Permissions": [], "Description": "Replaced by isWhitespace(char). Determines if the specified character is ISO-LATIN-1 white space. This method returns true for the following five characters only:", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static boolean isSpace (char ch)"}, "isUnicodeIdentifierStart(char)": {"Returns": [["boolean", "true if the character may start a Unicode identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: @B_java#lang#Character#isLetter_E@ returns true @B_java#lang#Character#getType_E@ returns LETTER_NUMBER. @B_java#lang#Character#isUnicodeIdentifierStart_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isUnicodeIdentifierStart (char ch)"}, "isJavaIdentifierStart(int)": {"Returns": [["boolean", "true if the character may start a Java identifier; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@"], "Permissions": [], "Description": "Determines if the character (Unicode code point) is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: @B_java#lang#Character#isLetter_E@ returns true @B_java#lang#Character#getType_E@ returns LETTER_NUMBER the referenced character is a currency symbol (such as '$') the referenced character is a connecting punctuation character (such as '_').", "history": "Added in API level 1", "FullName": "public static boolean isJavaIdentifierStart (int codePoint)"}, "getNumericValue(char)": {"Returns": [["int", "the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value."]], "Parameters": [["char", "char: the character to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the int value that the specified Unicode character represents. For example, the character '\\u216C' (the roman numeral fifty) will return an int with a value of 50. The letters A-Z in their uppercase ('\\u0041' through '\\u005A'), lowercase ('\\u0061' through '\\u007A'), and full width variant ('\\uFF21' through '\\uFF3A' and '\\uFF41' through '\\uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values. If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned. @B_java#lang#Character#getNumericValue_E@ method.", "history": "Added in API level 1", "FullName": "public static int getNumericValue (char ch)"}, "toCodePoint(char, char)": {"Returns": [["int", "the supplementary code point composed from the specified surrogate pair."]], "Parameters": [["char", "char: the high-surrogate code unit"], ["char", "char: the low-surrogate code unit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified surrogate pair to its supplementary code point value. This method does not validate the specified surrogate pair. The caller must validate it using @B_java#lang#Character#isSurrogatePair_E@ if necessary.", "history": "added in API level 1", "FullName": "public static int toCodePoint (char high, char low)"}, "valueOf(char)": {"Returns": [["@B_java#lang#Character_E@", "a Character instance representing c."]], "Parameters": [["char", "char: a char value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#lang#Character#Character_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range '\\u0000' to '\\u007F', inclusive, and may cache other values outside of this range.", "history": "Added in API level 1", "FullName": "public static Character valueOf (char c)"}, "toLowerCase(char)": {"Returns": [["char", "the lowercase equivalent of the character, if any; otherwise, the character itself."]], "Parameters": [["char", "char: the character to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#String#toLowerCase_E@"], "Permissions": [], "Description": "Converts the character argument to lowercase using case mapping information from the UnicodeData file. Note that Character.isLowerCase(Character.toLowerCase(ch)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, @B_java#lang#String#toLowerCase_E@ should be used to map characters to lowercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot. @B_java#lang#Character#toLowerCase_E@ method.", "history": "Added in API level 1", "FullName": "public static char toLowerCase (char ch)"}, "isUpperCase(char)": {"Returns": [["boolean", "true if the character is uppercase; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toUpperCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character is an uppercase character. A character is uppercase if its general category type, provided by Character.getType(ch), is UPPERCASE_LETTER. or it has contributory property Other_Uppercase as defined by the Unicode Standard. The following are examples of uppercase characters: Many other Unicode characters are uppercase too. @B_java#lang#Character#isUpperCase_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isUpperCase (char ch)"}, "isJavaIdentifierPart(char)": {"Returns": [["boolean", "true if the character may be part of a Java identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isIdentifierIgnorable_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character @B_java#lang#Character#isJavaIdentifierPart_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isJavaIdentifierPart (char ch)"}, "isIdentifierIgnorable(char)": {"Returns": [["boolean", "true if the character is an ignorable control character that may be part of a Java or Unicode identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace '\\u0000' through '\\u0008' '\\u000E' through '\\u001B' '\\u007F' through '\\u009F' all characters that have the FORMAT general category value @B_java#lang#Character#isIdentifierIgnorable_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isIdentifierIgnorable (char ch)"}, "isLetter(int)": {"Returns": [["boolean", "true if the character is a letter; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@", "@B_java#lang#Character#isUpperCase_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a letter. A character is considered to be a letter if its general category type, provided by @B_java#lang#Character#getType_E@, is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER Not all letters have case. Many characters are letters but are neither uppercase nor lowercase nor titlecase.", "history": "Added in API level 1", "FullName": "public static boolean isLetter (int codePoint)"}, "isJavaLetterOrDigit(char)": {"Returns": [["boolean", "true if the character may be part of a Java identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaLetter_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@", "@B_java#lang#Character#isIdentifierIgnorable_E@"], "Permissions": [], "Description": "Replaced by isJavaIdentifierPart(char). Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if and only if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static boolean isJavaLetterOrDigit (char ch)"}, "isUnicodeIdentifierPart(char)": {"Returns": [["boolean", "true if the character may be part of a Unicode identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isIdentifierIgnorable_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@"], "Permissions": [], "Description": "Determines if the specified character may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character. @B_java#lang#Character#isUnicodeIdentifierPart_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isUnicodeIdentifierPart (char ch)"}, "codePointBefore(char[],int,int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index following the code point that should be returned"], ["int", "int: the index of the first array element in the char array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is not greater than the start argument or is greater than the length of the char array, or if the start argument is negative or not less than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not less than start, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "Added in API level 1", "FullName": "public static int codePointBefore (char[] a, int index, int start)"}, "isWhitespace(int)": {"Returns": [["boolean", "true if the character is a Java whitespace character; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSpaceChar_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character (@B_java#lang#Character#SPACE_SEPARATOR_E@, @B_java#lang#Character#LINE_SEPARATOR_E@, or @B_java#lang#Character#PARAGRAPH_SEPARATOR_E@) but is not also a non-breaking space ('\\u00A0', '\\u2007', '\\u202F'). It is '\\t', U+0009 HORIZONTAL TABULATION. It is '\\n', U+000A LINE FEED. It is '\\u000B', U+000B VERTICAL TABULATION. It is '\\f', U+000C FORM FEED. It is '\\r', U+000D CARRIAGE RETURN. It is '\\u001C', U+001C FILE SEPARATOR. It is '\\u001D', U+001D GROUP SEPARATOR. It is '\\u001E', U+001E RECORD SEPARATOR. It is '\\u001F', U+001F UNIT SEPARATOR.", "history": "Added in API level 1", "FullName": "public static boolean isWhitespace (int codePoint)"}, "isISOControl(char)": {"Returns": [["boolean", "true if the character is an ISO control character; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSpaceChar_E@", "@B_java#lang#Character#isWhitespace_E@"], "Permissions": [], "Description": "Determines if the specified character is an ISO control character. A character is considered to be an ISO control character if its code is in the range '\\u0000' through '\\u001F' or in the range '\\u007F' through '\\u009F'. @B_java#lang#Character#isISOControl_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isISOControl (char ch)"}, "offsetByCodePoints(char[],int,int,int,int)": {"Returns": [["int", "the index within the subarray"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index of the first char of the subarray"], ["int", "int: the length of the subarray in chars"], ["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if start or count is negative, or if start + count is larger than the length of the given array, or if index is less than start or larger then start + count, or if codePointOffset is positive and the text range starting with index and ending with start + count - 1 has fewer than codePointOffset code points, or if codePointOffset is negative and the text range starting with start and ending with index - 1 has fewer than the absolute value of codePointOffset code points."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within the given char subarray that is offset from the given index by codePointOffset code points. The start and count arguments specify a subarray of the char array. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "Added in API level 1", "FullName": "public static int offsetByCodePoints (char[] a, int start, int count, int index, int codePointOffset)"}, "isLowSurrogate(char)": {"Returns": [["boolean", "true if the char value is between @B_java#lang#Character#MIN_LOW_SURROGATE_E@ and @B_java#lang#Character#MAX_LOW_SURROGATE_E@ inclusive; false otherwise."]], "Parameters": [["char", "char: the char value to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isHighSurrogate_E@"], "Permissions": [], "Description": "Determines if the given char value is a Such values do not represent characters by themselves, but are used in the representation of", "history": "Added in API level 1", "FullName": "public static boolean isLowSurrogate (char ch)"}, "isDigit(int)": {"Returns": [["boolean", "true if the character is a digit; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a digit. A character is a digit if its general category type, provided by @B_java#lang#Character#getType_E@, is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: '\\u0030' through '\\u0039', ISO-LATIN-1 digits ('0' through '9') '\\u0660' through '\\u0669', Arabic-Indic digits '\\u06F0' through '\\u06F9', Extended Arabic-Indic digits '\\u0966' through '\\u096F', Devanagari digits '\\uFF10' through '\\uFF19', Fullwidth digits Many other character ranges contain digits as well.", "history": "Added in API level 1", "FullName": "public static boolean isDigit (int codePoint)"}, "isSpaceChar(char)": {"Returns": [["boolean", "true if the character is a space character; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isWhitespace_E@"], "Permissions": [], "Description": "Determines if the specified character is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard. This method returns true if the character's general category type is any of the following: SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR @B_java#lang#Character#isSpaceChar_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isSpaceChar (char ch)"}, "isDefined(char)": {"Returns": [["boolean", "true if the character has a defined meaning in Unicode; false otherwise."]], "Parameters": [["char", "char: the character to be tested"]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#isUpperCase_E@"], "Permissions": [], "Description": "Determines if a character is defined in Unicode. A character is defined if at least one of the following is true: It has an entry in the UnicodeData file. It has a value in a range defined by the UnicodeData file. @B_java#lang#Character#isDefined_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isDefined (char ch)"}, "codePointAt(char[],int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index to the char values (Unicode code units) in the char array to be converted"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the value index is negative or not less than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the char array. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the length of the char array, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "Added in API level 1", "FullName": "public static int codePointAt (char[] a, int index)"}, "codePointAt(char[], int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index to the char values (Unicode code units) in the char array to be converted"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the value index is negative or not less than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the char array. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the length of the char array, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "added in API level 1", "FullName": "public static int codePointAt (char[] a, int index)"}, "isLowerCase(char)": {"Returns": [["boolean", "true if the character is lowercase; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toLowerCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character is a lowercase character. A character is lowercase if its general category type, provided by Character.getType(ch), is LOWERCASE_LETTER, or it has contributory property Other_Lowercase as defined by the Unicode Standard. The following are examples of lowercase characters: Many other Unicode characters are lowercase too. @B_java#lang#Character#isLowerCase_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isLowerCase (char ch)"}, "codePointCount(char[],int,int)": {"Returns": [["int", "the number of Unicode code points in the specified subarray"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index of the first char in the given char array"], ["int", "int: the length of the subarray in chars"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if offset or count is negative, or if offset + count is larger than the length of the given array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in a subarray of the char array argument. The offset argument is the index of the first char of the subarray and the count argument specifies the length of the subarray in chars. Unpaired surrogates within the subarray count as one code point each.", "history": "Added in API level 1", "FullName": "public static int codePointCount (char[] a, int offset, int count)"}, "isISOControl(int)": {"Returns": [["boolean", "true if the character is an ISO control character; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSpaceChar_E@", "@B_java#lang#Character#isWhitespace_E@"], "Permissions": [], "Description": "Determines if the referenced character (Unicode code point) is an ISO control character. A character is considered to be an ISO control character if its code is in the range '\\u0000' through '\\u001F' or in the range '\\u007F' through '\\u009F'.", "history": "Added in API level 1", "FullName": "public static boolean isISOControl (int codePoint)"}, "isWhitespace(char)": {"Returns": [["boolean", "true if the character is a Java whitespace character; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSpaceChar_E@"], "Permissions": [], "Description": "Determines if the specified character is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space ('\\u00A0', '\\u2007', '\\u202F'). It is '\\t', U+0009 HORIZONTAL TABULATION. It is '\\n', U+000A LINE FEED. It is '\\u000B', U+000B VERTICAL TABULATION. It is '\\f', U+000C FORM FEED. It is '\\r', U+000D CARRIAGE RETURN. It is '\\u001C', U+001C FILE SEPARATOR. It is '\\u001D', U+001D GROUP SEPARATOR. It is '\\u001E', U+001E RECORD SEPARATOR. It is '\\u001F', U+001F UNIT SEPARATOR. @B_java#lang#Character#isWhitespace_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isWhitespace (char ch)"}, "isSurrogatePair(char, char)": {"Returns": [["boolean", "true if the specified high and low-surrogate code values represent a valid surrogate pair; false otherwise."]], "Parameters": [["char", "char: the high-surrogate code value to be tested"], ["char", "char: the low-surrogate code value to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified pair of char values is a valid This method is equivalent to the expression:", "history": "added in API level 1", "FullName": "public static boolean isSurrogatePair (char high, char low)"}, "isSupplementaryCodePoint(int)": {"Returns": [["boolean", "true if the specified code point is between @B_java#lang#Character#MIN_SUPPLEMENTARY_CODE_POINT_E@ and @B_java#lang#Character#MAX_CODE_POINT_E@ inclusive; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified character (Unicode code point) is in the", "history": "Added in API level 1", "FullName": "public static boolean isSupplementaryCodePoint (int codePoint)"}, "lowSurrogate(int)": {"Returns": [["char", "the trailing surrogate code unit used to represent the character in the UTF-16 encoding"]], "Parameters": [["int", "int: a supplementary character (Unicode code point)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the trailing surrogate (a char is returned. If @B_java#lang#Character#isSupplementaryCodePoint_E@ is true, then @B_java#lang#Character#isLowSurrogate_E@(lowSurrogate(x)) and @B_java#lang#Character#toCodePoint_E@(@B_java#lang#Character#highSurrogate_E@(x), lowSurrogate(x)) == x are also always true.", "history": "Added in API level 19", "FullName": "public static char lowSurrogate (int codePoint)"}, "hashCode()": {"Returns": [["int", "a hash code value for this Character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Character; equal to the result of invoking charValue().", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getType(char)": {"Returns": [["int", "a value of type int representing the character's general category."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a value indicating a character's general category. @B_java#lang#Character#getType_E@ method.", "history": "Added in API level 1", "FullName": "public static int getType (char ch)"}, "isSurrogate(char)": {"Returns": [["boolean", "true if the char value is between @B_java#lang#Character#MIN_SURROGATE_E@ and @B_java#lang#Character#MAX_SURROGATE_E@ inclusive; false otherwise."]], "Parameters": [["char", "char: the char value to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given char value is a Unicode Such values do not represent characters by themselves, but are used in the representation of A char value is a surrogate code unit if and only if it is either a", "history": "Added in API level 19", "FullName": "public static boolean isSurrogate (char ch)"}, "codePointBefore(java.lang.CharSequence, int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the CharSequence instance"], ["int", "int: the index following the code point that should be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is less than 1 or greater than @B_java#lang#CharSequence#length_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the CharSequence. If the char value at (index - 1) in the CharSequence is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the CharSequence is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "added in API level 1", "FullName": "public static int codePointBefore (CharSequence seq, int index)"}, "toTitleCase(char)": {"Returns": [["char", "the titlecase equivalent of the character, if any; otherwise, the character itself."]], "Parameters": [["char", "char: the character to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toLowerCase_E@", "@B_java#lang#Character#toUpperCase_E@"], "Permissions": [], "Description": "Converts the character argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the char argument is already a titlecase char, the same char value will be returned. Note that Character.isTitleCase(Character.toTitleCase(ch)) does not always return true for some ranges of characters. @B_java#lang#Character#toTitleCase_E@ method.", "history": "Added in API level 1", "FullName": "public static char toTitleCase (char ch)"}, "codePointBefore(char[],int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index following the code point that should be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is less than 1 or greater than the length of the char array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the char array. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "Added in API level 1", "FullName": "public static int codePointBefore (char[] a, int index)"}, "isJavaIdentifierStart(char)": {"Returns": [["boolean", "true if the character may start a Java identifier; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@"], "Permissions": [], "Description": "Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: @B_java#lang#Character#isLetter_E@ returns true @B_java#lang#Character#getType_E@ returns LETTER_NUMBER ch is a currency symbol (such as '$') ch is a connecting punctuation character (such as '_'). @B_java#lang#Character#isJavaIdentifierStart_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isJavaIdentifierStart (char ch)"}, "isUnicodeIdentifierPart(int)": {"Returns": [["boolean", "true if the character may be part of a Unicode identifier; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isIdentifierIgnorable_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character.", "history": "Added in API level 1", "FullName": "public static boolean isUnicodeIdentifierPart (int codePoint)"}, "getNumericValue(int)": {"Returns": [["int", "the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the int value that the specified character (Unicode code point) represents. For example, the character '\\u216C' (the Roman numeral fifty) will return an int with a value of 50. The letters A-Z in their uppercase ('\\u0041' through '\\u005A'), lowercase ('\\u0061' through '\\u007A'), and full width variant ('\\uFF21' through '\\uFF3A' and '\\uFF41' through '\\uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values. If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned.", "history": "Added in API level 1", "FullName": "public static int getNumericValue (int codePoint)"}, "codePointBefore(char[], int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index following the code point that should be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is less than 1 or greater than the length of the char array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the char array. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "added in API level 1", "FullName": "public static int codePointBefore (char[] a, int index)"}, "getType(int)": {"Returns": [["int", "a value of type int representing the character's general category."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a value indicating a character's general category.", "history": "Added in API level 1", "FullName": "public static int getType (int codePoint)"}, "codePointCount(java.lang.CharSequence, int, int)": {"Returns": [["int", "the number of Unicode code points in the specified text range"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the char sequence"], ["int", "int: the index to the first char of the text range."], ["int", "int: the index after the last char of the text range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of the given sequence, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in the text range of the specified char sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.", "history": "added in API level 1", "FullName": "public static int codePointCount (CharSequence seq, int beginIndex, int endIndex)"}, "compare(char, char)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["char", "char: the first char to compare"], ["char", "char: the second char to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two char values numerically. The value returned is identical to what would be returned by:", "history": "added in API level 19", "FullName": "public static int compare (char x, char y)"}, "reverseBytes(char)": {"Returns": [["char", "the value obtained by reversing (or, equivalently, swapping) the bytes in the specified char value."]], "Parameters": [["char", "char: The char of which to reverse the byte order."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bytes in the specified", "history": "Added in API level 1", "FullName": "public static char reverseBytes (char ch)"}, "codePointBefore(java.lang.CharSequence,int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the CharSequence instance"], ["int", "int: the index following the code point that should be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is less than 1 or greater than @B_java#lang#CharSequence#length_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point preceding the given index of the CharSequence. If the char value at (index - 1) in the CharSequence is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the CharSequence is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.", "history": "Added in API level 1", "FullName": "public static int codePointBefore (CharSequence seq, int index)"}, "toLowerCase(int)": {"Returns": [["int", "the lowercase equivalent of the character (Unicode code point), if any; otherwise, the character itself."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#String#toLowerCase_E@"], "Permissions": [], "Description": "Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file. Note that Character.isLowerCase(Character.toLowerCase(codePoint)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, @B_java#lang#String#toLowerCase_E@ should be used to map characters to lowercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot.", "history": "Added in API level 1", "FullName": "public static int toLowerCase (int codePoint)"}, "isLetterOrDigit(char)": {"Returns": [["boolean", "true if the character is a letter or digit; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isJavaIdentifierPart_E@", "@B_java#lang#Character#isJavaLetter_E@", "@B_java#lang#Character#isJavaLetterOrDigit_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character is a letter or digit. A character is considered to be a letter or digit if either Character.isLetter(char ch) or Character.isDigit(char ch) returns true for the character. @B_java#lang#Character#isLetterOrDigit_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isLetterOrDigit (char ch)"}, "charCount(int)": {"Returns": [["int", "2 if the character is a valid supplementary character; 1 otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isSupplementaryCodePoint_E@"], "Permissions": [], "Description": "Determines the number of char values needed to represent the specified character (Unicode code point). If the specified character is equal to or greater than 0x10000, then the method returns 2. Otherwise, the method returns 1. This method doesn't validate the specified character to be a valid Unicode code point. The caller must validate the character value using @B_java#lang#Character#isValidCodePoint_E@ if necessary.", "history": "Added in API level 1", "FullName": "public static int charCount (int codePoint)"}, "isIdeographic(int)": {"Returns": [["boolean", "true if the character is a Unicode ideograph character, false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.", "history": "Added in API level 19", "FullName": "public static boolean isIdeographic (int codePoint)"}, "offsetByCodePoints(java.lang.CharSequence,int,int)": {"Returns": [["int", "the index within the char sequence"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the char sequence"], ["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if index is negative or larger then the length of the char sequence, or if codePointOffset is positive and the subsequence starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the subsequence before index has fewer than the absolute value of codePointOffset code points."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within the given char sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "Added in API level 1", "FullName": "public static int offsetByCodePoints (CharSequence seq, int index, int codePointOffset)"}, "isBmpCodePoint(int)": {"Returns": [["boolean", "true if the specified code point is between @B_java#lang#Character#MIN_VALUE_E@ and @B_java#lang#Character#MAX_VALUE_E@ inclusive; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified character (Unicode code point) is in the char.", "history": "Added in API level 19", "FullName": "public static boolean isBmpCodePoint (int codePoint)"}, "codePointAt(char[],int,int)": {"Returns": [["int", "the Unicode code point at the given index"]], "Parameters": [["char[]", "char: the char array"], ["int", "int: the index to the char values (Unicode code units) in the char array to be converted"], ["int", "int: the index after the last array element that can be used in the char array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if a is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is negative or not less than the limit argument, or if the limit argument is negative or greater than the length of the char array."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at the given index of the char array, where only array elements with index less than limit can be used. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the limit, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "Added in API level 1", "FullName": "public static int codePointAt (char[] a, int index, int limit)"}, "isLetter(char)": {"Returns": [["boolean", "true if the character is a letter; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isDigit_E@", "@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isJavaLetter_E@", "@B_java#lang#Character#isJavaLetterOrDigit_E@", "@B_java#lang#Character#isLetterOrDigit_E@", "@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#isUnicodeIdentifierStart_E@", "@B_java#lang#Character#isUpperCase_E@"], "Permissions": [], "Description": "Determines if the specified character is a letter. A character is considered to be a letter if its general category type, provided by Character.getType(ch), is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER Not all letters have case. Many characters are letters but are neither uppercase nor lowercase nor titlecase. @B_java#lang#Character#isLetter_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isLetter (char ch)"}, "toTitleCase(int)": {"Returns": [["int", "the titlecase equivalent of the character, if any; otherwise, the character itself."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isTitleCase_E@", "@B_java#lang#Character#toLowerCase_E@", "@B_java#lang#Character#toUpperCase_E@"], "Permissions": [], "Description": "Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the character argument is already a titlecase character, the same character value will be returned. Note that Character.isTitleCase(Character.toTitleCase(codePoint)) does not always return true for some ranges of characters.", "history": "Added in API level 1", "FullName": "public static int toTitleCase (int codePoint)"}, "compareTo(java.lang.Character)": {"Returns": [["int", "the value 0 if the argument Character is equal to this Character; a value less than 0 if this Character is numerically less than the Character argument; and a value greater than 0 if this Character is numerically greater than the Character argument (unsigned comparison). Note that this is strictly a numerical comparison; it is not locale-dependent."]], "Parameters": [["@B_java#lang#Character_E@", "Character: the Character to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two Character objects numerically.", "history": "Added in API level 1", "FullName": "public int compareTo (Character anotherCharacter)"}, "isTitleCase(int)": {"Returns": [["boolean", "true if the character is titlecase; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isUpperCase_E@", "@B_java#lang#Character#toTitleCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is a titlecase character. A character is a titlecase character if its general category type, provided by @B_java#lang#Character#getType_E@, is TITLECASE_LETTER. Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like \"LJ\" and has a corresponding lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\", is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title. These are some of the Unicode characters for which this method returns true: LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too.", "history": "Added in API level 1", "FullName": "public static boolean isTitleCase (int codePoint)"}, "toChars(int)": {"Returns": [["char[]", "a char array having codePoint's UTF-16 representation."]], "Parameters": [["int", "int: a Unicode code point"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified codePoint is not a valid Unicode code point."]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the resulting char array has the same value as codePoint. If the specified code point is a supplementary code point, the resulting char array has the corresponding surrogate pair.", "history": "Added in API level 1", "FullName": "public static char[] toChars (int codePoint)"}, "isMirrored(int)": {"Returns": [["boolean", "true if the character is mirrored, false if the character is not mirrored or is not defined."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, '\\u0028' LEFT PARENTHESIS is semantically defined to be an", "history": "Added in API level 1", "FullName": "public static boolean isMirrored (int codePoint)"}, "digit(int, int)": {"Returns": [["int", "the numeric value represented by the character in the specified radix."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the numeric value of the specified character (Unicode code point) in the specified radix. If the radix is not in the range MIN_RADIX \u2264 radix \u2264 MAX_RADIX or if the character is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method @B_java#lang#Character#isDigit_E@ is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix + 'A' - 10. In this case, codePoint - 'A' + 10 is returned. The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix + 'a' - 10. In this case, codePoint - 'a' + 10 is returned. The character is one of the fullwidth uppercase Latin letters A ('\\uFF21') through Z ('\\uFF3A') and its code is less than radix + '\\uFF21' - 10. In this case, codePoint - '\\uFF21' + 10 is returned. The character is one of the fullwidth lowercase Latin letters a ('\\uFF41') through z ('\\uFF5A') and its code is less than radix + '\\uFF41'- 10. In this case, codePoint - '\\uFF41' + 10 is returned.", "history": "added in API level 1", "FullName": "public static int digit (int codePoint, int radix)"}, "digit(int,int)": {"Returns": [["int", "the numeric value represented by the character in the specified radix."]], "Parameters": [["int", "int: the character (Unicode code point) to be converted."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the numeric value of the specified character (Unicode code point) in the specified radix. If the radix is not in the range MIN_RADIX \u2264 radix \u2264 MAX_RADIX or if the character is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method @B_java#lang#Character#isDigit_E@ is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix + 'A' - 10. In this case, codePoint - 'A' + 10 is returned. The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix + 'a' - 10. In this case, codePoint - 'a' + 10 is returned. The character is one of the fullwidth uppercase Latin letters A ('\\uFF21') through Z ('\\uFF3A') and its code is less than radix + '\\uFF21' - 10. In this case, codePoint - '\\uFF21' + 10 is returned. The character is one of the fullwidth lowercase Latin letters a ('\\uFF41') through z ('\\uFF5A') and its code is less than radix + '\\uFF41'- 10. In this case, codePoint - '\\uFF41' + 10 is returned.", "history": "Added in API level 1", "FullName": "public static int digit (int codePoint, int radix)"}, "getName(int)": {"Returns": [["@B_java#lang#String_E@", "the Unicode name of the specified character, or null if the code point is unassigned."]], "Parameters": [["int", "int: the character (Unicode code point)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified codePoint is not a valid Unicode code point."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Unicode name of the specified character codePoint, or null if the code point is @B_java#lang#Character#UNASSIGNED_E@. Note: if the specified character is not assigned a name by the", "history": "Added in API level 19", "FullName": "public static String getName (int codePoint)"}, "isMirrored(char)": {"Returns": [["boolean", "true if the char is mirrored, false if the char is not mirrored or is not defined."]], "Parameters": [["char", "char: char for which the mirrored property is requested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the character is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, '\\u0028' LEFT PARENTHESIS is semantically defined to be an @B_java#lang#Character#isMirrored_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isMirrored (char ch)"}, "isUnicodeIdentifierStart(int)": {"Returns": [["boolean", "true if the character may start a Unicode identifier; false otherwise."]], "Parameters": [["int", "int: the character (Unicode code point) to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isJavaIdentifierStart_E@", "@B_java#lang#Character#isLetter_E@", "@B_java#lang#Character#isUnicodeIdentifierPart_E@"], "Permissions": [], "Description": "Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: @B_java#lang#Character#isLetter_E@ returns true @B_java#lang#Character#getType_E@ returns LETTER_NUMBER.", "history": "Added in API level 1", "FullName": "public static boolean isUnicodeIdentifierStart (int codePoint)"}, "codePointCount(java.lang.CharSequence,int,int)": {"Returns": [["int", "the number of Unicode code points in the specified text range"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the char sequence"], ["int", "int: the index to the first char of the text range."], ["int", "int: the index after the last char of the text range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if seq is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the beginIndex is negative, or endIndex is larger than the length of the given sequence, or beginIndex is larger than endIndex."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in the text range of the specified char sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.", "history": "Added in API level 1", "FullName": "public static int codePointCount (CharSequence seq, int beginIndex, int endIndex)"}, "isSurrogatePair(char,char)": {"Returns": [["boolean", "true if the specified high and low-surrogate code values represent a valid surrogate pair; false otherwise."]], "Parameters": [["char", "char: the high-surrogate code value to be tested"], ["char", "char: the low-surrogate code value to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the specified pair of char values is a valid This method is equivalent to the expression:", "history": "Added in API level 1", "FullName": "public static boolean isSurrogatePair (char high, char low)"}, "digit(char, int)": {"Returns": [["int", "the numeric value represented by the character in the specified radix."]], "Parameters": [["char", "char: the character to be converted."], ["int", "int: the radix."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#forDigit_E@", "@B_java#lang#Character#isDigit_E@"], "Permissions": [], "Description": "Returns the numeric value of the character ch in the specified radix. If the radix is not in the range MIN_RADIX \u2264 radix \u2264 MAX_RADIX or if the value of ch is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method isDigit is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters 'A' through 'Z' and its code is less than radix + 'A' - 10. In this case, ch - 'A' + 10 is returned. The character is one of the lowercase Latin letters 'a' through 'z' and its code is less than radix + 'a' - 10. In this case, ch - 'a' + 10 is returned. The character is one of the fullwidth uppercase Latin letters A ('\\uFF21') through Z ('\\uFF3A') and its code is less than radix + '\\uFF21' - 10. In this case, ch - '\\uFF21' + 10 is returned. The character is one of the fullwidth lowercase Latin letters a ('\\uFF41') through z ('\\uFF5A') and its code is less than radix + '\\uFF41' - 10. In this case, ch - '\\uFF41' + 10 is returned. @B_java#lang#Character#digit_E@ method.", "history": "added in API level 1", "FullName": "public static int digit (char ch, int radix)"}, "isTitleCase(char)": {"Returns": [["boolean", "true if the character is titlecase; false otherwise."]], "Parameters": [["char", "char: the character to be tested."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character#isLowerCase_E@", "@B_java#lang#Character#isUpperCase_E@", "@B_java#lang#Character#toTitleCase_E@", "@B_java#lang#Character#getType_E@"], "Permissions": [], "Description": "Determines if the specified character is a titlecase character. A character is a titlecase character if its general category type, provided by Character.getType(ch), is TITLECASE_LETTER. Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like \"LJ\" and has a corresponding lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\", is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title. These are some of the Unicode characters for which this method returns true: LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too. @B_java#lang#Character#isTitleCase_E@ method.", "history": "Added in API level 1", "FullName": "public static boolean isTitleCase (char ch)"}}, "Inheritance": [], "ClassName": "java.lang.Character", "ClassDesc": "The Character class wraps a value of the primitive type char in an object. An object of type Character contains a single field whose type is char. In addition, this class provides several methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa. Character information is based on the Unicode Standard The methods and data of class Character are defined by the information in the The file and its description are available from the Unicode Consortium at: The char data type (and therefore the value that a Character object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal code points is now U+0000 to U+10FFFF, known as Unicode scalar value. (Refer to the Basic Multilingual Plane (BMP). supplementary characters. The Java platform uses the UTF-16 representation in char arrays and in the String and StringBuffer classes. In this representation, supplementary characters are represented as a pair of char values, the first from the high-surrogates range, (\\uD800-\\uDBFF), the second from the low-surrogates range (\\uDC00-\\uDFFF). A char value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An int value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of int are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate char values is as follows: The methods that only accept a char value cannot support supplementary characters. They treat char values from the surrogate ranges as undefined characters. For example, Character.isLetter('\\uD840') returns false, even though this specific value if followed by any low-surrogate value in a string would represent a letter. The methods that accept an int value support all Unicode characters, including supplementary characters. For example, Character.isLetter(0x2F81A) returns true because the code point value represents a letter (a CJK ideograph). In the Java SE API documentation, Unicode code point is used for character values in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 16-bit char values that are code units of the UTF-16 encoding. For more information on Unicode terminology, refer to the"}