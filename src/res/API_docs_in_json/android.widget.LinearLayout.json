{"Functions": {"getBaselineAlignedChildIndex()": {"Returns": [["int", "The index of the child that will be used if this layout is part of a larger layout that is baseline aligned, or -1 if none has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getBaselineAlignedChildIndex ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setBaselineAligned(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to align widgets on their baseline, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines whether widgets contained in this layout are baseline-aligned or not.", "history": "Added in API level 1", "FullName": "public void setBaselineAligned (boolean baselineAligned)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "isBaselineAligned()": {"Returns": [["boolean", "true when widgets are baseline-aligned, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether widgets contained within this layout are aligned on their baseline or not.", "history": "Added in API level 1", "FullName": "public boolean isBaselineAligned ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "setShowDividers(int)": {"Returns": [], "Parameters": [["int", "int: One or more of @B_android#widget#LinearLayout#SHOW_DIVIDER_BEGINNING_E@, @B_android#widget#LinearLayout#SHOW_DIVIDER_MIDDLE_E@, or @B_android#widget#LinearLayout#SHOW_DIVIDER_END_E@ to show dividers, or @B_android#widget#LinearLayout#SHOW_DIVIDER_NONE_E@ to show no dividers. Value is either 0 or a combination of @B_android#widget#LinearLayout#SHOW_DIVIDER_NONE_E@, @B_android#widget#LinearLayout#SHOW_DIVIDER_BEGINNING_E@, @B_android#widget#LinearLayout#SHOW_DIVIDER_MIDDLE_E@, and @B_android#widget#LinearLayout#SHOW_DIVIDER_END_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set how dividers should be shown between items in this layout", "history": "Added in API level 11", "FullName": "public void setShowDividers (int showDividers)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public LinearLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getGravity()": {"Returns": [["int", "the current gravity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setGravity_E@"], "Permissions": [], "Description": "Returns the current gravity. See @B_android#view#Gravity_E@", "history": "Added in API level 24", "FullName": "public int getGravity ()"}, "LinearLayout(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public LinearLayout (Context context, AttributeSet attrs, int defStyleAttr)"}, "getShowDividers()": {"Returns": [["int", "A flag set indicating how dividers should be shown around items. Value is either 0 or a combination of @B_android#widget#LinearLayout#SHOW_DIVIDER_NONE_E@, @B_android#widget#LinearLayout#SHOW_DIVIDER_BEGINNING_E@, @B_android#widget#LinearLayout#SHOW_DIVIDER_MIDDLE_E@, and @B_android#widget#LinearLayout#SHOW_DIVIDER_END_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setShowDividers_E@"], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getShowDividers ()"}, "LinearLayout(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public LinearLayout (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getDividerPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setShowDividers_E@", "@B_android#widget#LinearLayout#setDividerDrawable_E@", "@B_android#widget#LinearLayout#setDividerPadding_E@"], "Permissions": [], "Description": "Get the padding size used to inset dividers in pixels", "history": "Added in API level 14", "FullName": "public int getDividerPadding ()"}, "isMeasureWithLargestChildEnabled()": {"Returns": [["boolean", "True to measure children with a weight using the minimum size of the largest child, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When true, all children with a weight will be considered having the minimum size of the largest child. If false, all children are measured normally.", "history": "Added in API level 11", "FullName": "public boolean isMeasureWithLargestChildEnabled ()"}, "getWeightSum()": {"Returns": [["float", "A number greater than 0.0f if the weight sum is defined, or a number lower than or equals to 0.0f if not weight sum is to be used."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired weights sum.", "history": "Added in API level 1", "FullName": "public float getWeightSum ()"}, "setMeasureWithLargestChildEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to measure children with a weight using the minimum size of the largest child, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to true, all children with a weight will be considered having the minimum size of the largest child. If false, all children are measured normally. Disabled by default.", "history": "Added in API level 11", "FullName": "public void setMeasureWithLargestChildEnabled (boolean enabled)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setDividerPadding(int)": {"Returns": [], "Parameters": [["int", "int: Padding value in pixels that will be applied to each end"]], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setShowDividers_E@", "@B_android#widget#LinearLayout#setDividerDrawable_E@", "@B_android#widget#LinearLayout#getDividerPadding_E@"], "Permissions": [], "Description": "Set padding displayed on both ends of dividers. For a vertical layout, the padding is applied to left and right end of dividers. For a horizontal layout, the padding is applied to top and bottom end of dividers.", "history": "Added in API level 14", "FullName": "public void setDividerPadding (int padding)"}, "setDividerDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable that will divide each item."]], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setShowDividers_E@"], "Permissions": [], "Description": "Set a drawable to be used as a divider between items.", "history": "Added in API level 11", "FullName": "public void setDividerDrawable (Drawable divider)"}, "setWeightSum(float)": {"Returns": [], "Parameters": [["float", "float: a number greater than 0.0f, or a number lower than or equals to 0.0f if the weight sum should be computed from the children's layout_weight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines the desired weights sum. If unspecified the weights sum is computed at layout time by adding the layout_weight of each child. This can be used for instance to give a single child 50% of the total available space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0.", "history": "Added in API level 1", "FullName": "public void setWeightSum (float weightSum)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "LinearLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public LinearLayout (Context context)"}, "setHorizontalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setHorizontalGravity (int horizontalGravity)"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getBaseline ()"}, "LinearLayout(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public LinearLayout (Context context, AttributeSet attrs)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "setVerticalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setVerticalGravity (int verticalGravity)"}, "getOrientation()": {"Returns": [["int", "either @B_android#widget#LinearLayout#HORIZONTAL_E@ or @B_android#widget#LinearLayout#VERTICAL_E@ Value is @B_android#widget#LinearLayout#HORIZONTAL_E@, or @B_android#widget#LinearLayout#VERTICAL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current orientation.", "history": "Added in API level 1", "FullName": "public int getOrientation ()"}, "setOrientation(int)": {"Returns": [], "Parameters": [["int", "int: Pass @B_android#widget#LinearLayout#HORIZONTAL_E@ or @B_android#widget#LinearLayout#VERTICAL_E@. Default value is @B_android#widget#LinearLayout#HORIZONTAL_E@. Value is @B_android#widget#LinearLayout#HORIZONTAL_E@, or @B_android#widget#LinearLayout#VERTICAL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should the layout be a column or a row.", "history": "Added in API level 1", "FullName": "public void setOrientation (int orientation)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes how the child views are positioned. Defaults to GRAVITY_TOP. If this layout has a VERTICAL orientation, this controls where all the child views are placed if there is extra vertical space. If this layout has a HORIZONTAL orientation, this controls the alignment of the children.", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1", "FullName": "protected LinearLayout.LayoutParams generateLayoutParams (ViewGroup.LayoutParams lp)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ when the layout's orientation is @B_android#widget#LinearLayout#VERTICAL_E@. When the orientation is @B_android#widget#LinearLayout#HORIZONTAL_E@, the width is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and the height to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "Added in API level 1", "FullName": "protected LinearLayout.LayoutParams generateDefaultLayoutParams ()"}, "getDividerDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the divider Drawable that will divide each item."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#LinearLayout#setDividerDrawable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public Drawable getDividerDrawable ()"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "Added in API level 14", "FullName": "public boolean shouldDelayChildPressedState ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "setBaselineAlignedChildIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of the child that will be used if this layout is part of a larger layout that is baseline aligned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setBaselineAlignedChildIndex (int i)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.widget.LinearLayout", "ClassDesc": "A layout that arranges other views either horizontally in a single column or vertically in a single row. The following snippet shows how to include a linear layout in your layout XML file: Set @B_android#R#styleable#LinearLayout_orientation_E@ to specify whether child views are displayed in a row or column. To control how linear layout aligns all the views it contains, set a value for @B_android#R#styleable#LinearLayout_gravity_E@. For example, the snippet above sets android:gravity to \"center\". The value you set affects both horizontal and vertical alignment of all child views within the single row or column. You can set @B_android#R#styleable#LinearLayout_Layout_layout_weight_E@ on individual child views to specify how linear layout divides remaining space amongst the views it contains. See the See @B_android#widget#LinearLayout#LayoutParams_E@ to learn about other attributes you can set on a child view to affect its position and size in the containing linear layout."}