{"Functions": {"ViewStub(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ViewStub (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "getInflatedId()": {"Returns": [["int", "A positive integer used to identify the inflated view or @B_android#view#View#NO_ID_E@ if the inflated view should keep its id."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#setInflatedId_E@"], "Permissions": [], "Description": "Returns the id taken by the inflated view. If the inflated id is @B_android#view#View#NO_ID_E@, the inflated view keeps its original id.", "history": "Added in API level 1", "FullName": "public int getInflatedId ()"}, "setLayoutInflater(android.view.LayoutInflater)": {"Returns": [], "Parameters": [["@B_android#view#LayoutInflater_E@", "LayoutInflater no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set @B_android#view#LayoutInflater_E@ to use in @B_android#view#ViewStub#inflate_E@, or null to use the default.", "history": "Added in API level 16", "FullName": "public void setLayoutInflater (LayoutInflater inflater)"}, "ViewStub(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The reference to a layout resource that will be inflated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ViewStub with the specified layout resource.", "history": "Added in API level 1", "FullName": "public ViewStub (Context context, int layoutResource)"}, "ViewStub(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ViewStub (Context context)"}, "ViewStub(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The reference to a layout resource that will be inflated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ViewStub with the specified layout resource.", "history": "added in API level 1", "FullName": "public ViewStub (Context context, int layoutResource)"}, "getLayoutResource()": {"Returns": [["int", "The layout resource identifier used to inflate the new View."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#setLayoutResource_E@", "@B_android#view#ViewStub#setVisibility_E@", "@B_android#view#ViewStub#inflate_E@"], "Permissions": [], "Description": "Returns the layout resource that will be used by @B_android#view#ViewStub#setVisibility_E@ or @B_android#view#ViewStub#inflate_E@ to replace this StubbedView in its parent by another view.", "history": "Added in API level 1", "FullName": "public int getLayoutResource ()"}, "inflate()": {"Returns": [["@B_android#view#View_E@", "The inflated layout resource."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates the layout resource identified by @B_android#view#ViewStub#getLayoutResource_E@ and replaces this StubbedView in its parent by the inflated layout resource.", "history": "Added in API level 1", "FullName": "public View inflate ()"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#inflate_E@"], "Permissions": [], "Description": "When visibility is set to @B_android#view#View#VISIBLE_E@ or @B_android#view#View#INVISIBLE_E@, @B_android#view#ViewStub#inflate_E@ is invoked and this StubbedView is replaced in its parent by the inflated layout resource. After that calls to this function are passed through to the inflated view.", "history": "Added in API level 1", "FullName": "public void setVisibility (int visibility)"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current @B_android#view#LayoutInflater_E@ used in @B_android#view#ViewStub#inflate_E@.", "history": "Added in API level 16", "FullName": "public LayoutInflater getLayoutInflater ()"}, "setLayoutResource(int)": {"Returns": [], "Parameters": [["int", "int: A valid layout resource identifier (different from 0.)"]], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#getLayoutResource_E@", "@B_android#view#ViewStub#setVisibility_E@", "@B_android#view#ViewStub#inflate_E@"], "Permissions": [], "Description": "Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when @B_android#view#ViewStub#inflate_E@ is invoked. The View created by inflating the layout resource is used to replace this StubbedView in its parent.", "history": "Added in API level 1", "FullName": "public void setLayoutResource (int layoutResource)"}, "ViewStub(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ViewStub (Context context, AttributeSet attrs)"}, "ViewStub(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ViewStub (Context context, AttributeSet attrs, int defStyleAttr)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setInflatedId(int)": {"Returns": [], "Parameters": [["int", "int: A positive integer used to identify the inflated view or @B_android#view#View#NO_ID_E@ if the inflated view should keep its id."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#getInflatedId_E@"], "Permissions": [], "Description": "Defines the id taken by the inflated view. If the inflated id is @B_android#view#View#NO_ID_E@, the inflated view keeps its original id.", "history": "Added in API level 1", "FullName": "public void setInflatedId (int inflatedId)"}, "setOnInflateListener(android.view.ViewStub.OnInflateListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewStub#OnInflateListener_E@", "ViewStub.OnInflateListener: The OnInflateListener to notify of successful inflation."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewStub#OnInflateListener_E@"], "Permissions": [], "Description": "Specifies the inflate listener to be notified after this ViewStub successfully inflated its layout resource.", "history": "Added in API level 1", "FullName": "public void setOnInflateListener (ViewStub.OnInflateListener inflateListener)"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.view.ViewStub", "ClassDesc": "A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when @B_android#view#ViewStub#inflate_E@ is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views. Therefore, the ViewStub exists in the view hierarchy until @B_android#view#ViewStub#setVisibility_E@ or @B_android#view#ViewStub#inflate_E@ is invoked. The inflated View is added to the ViewStub's parent with the ViewStub's layout parameters. Similarly, you can define/override the inflate View's id by using the ViewStub's inflatedId property. For instance: @B_android#view#ViewStub#inflate_E@ is invoked, the ViewStub is replaced by the inflated View and the inflated View is returned. This lets applications get a reference to the inflated View without executing an extra findViewById()."}