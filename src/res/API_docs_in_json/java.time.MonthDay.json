{"Functions": {"adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have this month-day. This returns a temporal object of the same observable type as the input with the month and day-of-month changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ twice, passing @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ and @B_java#time#temporal#ChronoField#DAY_OF_MONTH_E@ as the fields. If the specified temporal object does not use the ISO calendar system then a DateTimeException is thrown. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this month-day, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this month-day can be queried for the specified field. If false, then calling the @B_java#time#MonthDay#range_E@ and @B_java#time#MonthDay#get_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: MONTH_OF_YEAR YEAR All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "getMonth()": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#MonthDay#getMonthValue_E@"], "Permissions": [], "Description": "Gets the month-of-year field using the Month enum. This method returns the enum @B_java#time#Month_E@ for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#Month#getValue_E@.", "history": "Added in API level 26", "FullName": "public Month getMonth ()"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#MonthDay_E@", "the parsed month-day, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay from a text string using a specific formatter. The text is parsed using the formatter, returning a month-day.", "history": "Added in API level 26", "FullName": "public static MonthDay parse (CharSequence text, DateTimeFormatter formatter)"}, "of(int,int)": {"Returns": [["@B_java#time#MonthDay_E@", "the month-day, not null"]], "Parameters": [["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for month 2 (February), day 29 is valid. For example, passing in month 4 (April) and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.", "history": "Added in API level 26", "FullName": "public static MonthDay of (int month, int dayOfMonth)"}, "withDayOfMonth(int)": {"Returns": [["@B_java#time#MonthDay_E@", "a MonthDay based on this month-day with the requested day, not null"]], "Parameters": [["int", "int: the day-of-month to set in the return month-day, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-month value is invalid, or if the day-of-month is invalid for the month"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this MonthDay with the day-of-month altered. This returns a month-day with the specified day-of-month. If the day-of-month is invalid for the month, an exception is thrown. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public MonthDay withDayOfMonth (int dayOfMonth)"}, "isValidYear(int)": {"Returns": [["boolean", "true if the year is valid for this month-day"]], "Parameters": [["int", "int: the year to validate"]], "Throws": [], "SeeAlso": ["@B_java#time#Year#isValidMonthDay_E@"], "Permissions": [], "Description": "Checks if the year is valid for this month-day. This method checks whether this month and day and the input year form a valid date. This can only return false for February 29th.", "history": "Added in API level 26", "FullName": "public boolean isValidYear (int year)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#MonthDay_E@", "the current month-day, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current month-day from the specified clock. This will query the specified clock to obtain the current month-day. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static MonthDay now (Clock clock)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this month-day as a long. This queries this month-day for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#MonthDay#isSupported_E@ will return valid values based on this month-day. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "of(int, int)": {"Returns": [["@B_java#time#MonthDay_E@", "the month-day, not null"]], "Parameters": [["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for month 2 (February), day 29 is valid. For example, passing in month 4 (April) and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.", "history": "added in API level 26", "FullName": "public static MonthDay of (int month, int dayOfMonth)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other month-day"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this month-day is equal to another month-day. The comparison is based on the time-line position of the month-day within a year.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "getDayOfMonth()": {"Returns": [["int", "the day-of-month, from 1 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.", "history": "Added in API level 26", "FullName": "public int getDayOfMonth ()"}, "now()": {"Returns": [["@B_java#time#MonthDay_E@", "the current month-day using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current month-day from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current month-day. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static MonthDay now ()"}, "compareTo(java.time.MonthDay)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#MonthDay_E@", "MonthDay: the other month-day to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this month-day to another month-day. The comparison is based first on value of the month, then on the value of the day. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (MonthDay other)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This month-day is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#MonthDay#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#MonthDay_E@", "the month-day, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a MonthDay"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay from a temporal object. This obtains a month-day based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of MonthDay. The conversion extracts the @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ and @B_java#time#temporal#ChronoField#DAY_OF_MONTH_E@ fields. The extraction is only permitted if the temporal object has an ISO chronology, or can be converted to a LocalDate. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, MonthDay::from.", "history": "Added in API level 26", "FullName": "public static MonthDay from (TemporalAccessor temporal)"}, "atYear(int)": {"Returns": [["@B_java#time#LocalDate_E@", "the local date formed from this month-day and the specified year, not null"]], "Parameters": [["int", "int: the year to use, from MIN_YEAR to MAX_YEAR"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the year is outside the valid range of years"]], "SeeAlso": [], "Permissions": [], "Description": "Combines this month-day with a year to create a LocalDate. This returns a LocalDate formed from this month-day and the specified year. A month-day of February 29th will be adjusted to February 28th in the resulting date if the year is not a leap year. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDate atYear (int year)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this month-day using the specified query. This queries this month-day using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "isAfter(java.time.MonthDay)": {"Returns": [["boolean", "true if this is after the specified month-day"]], "Parameters": [["@B_java#time#MonthDay_E@", "MonthDay: the other month-day to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this month-day is after the specified month-day.", "history": "Added in API level 26", "FullName": "public boolean isAfter (MonthDay other)"}, "getMonthValue()": {"Returns": [["int", "the month-of-year, from 1 to 12"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#MonthDay#getMonth_E@"], "Permissions": [], "Description": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum @B_java#time#Month_E@ is used by calling @B_java#time#MonthDay#getMonth_E@.", "history": "Added in API level 26", "FullName": "public int getMonthValue ()"}, "of(java.time.Month,int)": {"Returns": [["@B_java#time#MonthDay_E@", "the month-day, not null"]], "Parameters": [["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for February, day 29 is valid. For example, passing in April and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.", "history": "Added in API level 26", "FullName": "public static MonthDay of (Month month, int dayOfMonth)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this month-day, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this month-day as a String, such as --12-03. The output will be in the format --MM-dd:", "history": "Added in API level 26", "FullName": "public String toString ()"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this month-day as an int. This queries this month-day for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#MonthDay#isSupported_E@ will return valid values based on this month-day. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "of(java.time.Month, int)": {"Returns": [["@B_java#time#MonthDay_E@", "the month-day, not null"]], "Parameters": [["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for February, day 29 is valid. For example, passing in April and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.", "history": "added in API level 26", "FullName": "public static MonthDay of (Month month, int dayOfMonth)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#MonthDay_E@", "the parsed month-day, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"--12-03\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of MonthDay from a text string such as --12-03. The string must represent a valid month-day. The format is --MM-dd.", "history": "Added in API level 26", "FullName": "public static MonthDay parse (CharSequence text)"}, "isBefore(java.time.MonthDay)": {"Returns": [["boolean", "true if this point is before the specified month-day"]], "Parameters": [["@B_java#time#MonthDay_E@", "MonthDay: the other month-day to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this month-day is before the specified month-day.", "history": "Added in API level 26", "FullName": "public boolean isBefore (MonthDay other)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted month-day string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this month-day using the specified formatter. This month-day will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "with(java.time.Month)": {"Returns": [["@B_java#time#MonthDay_E@", "a MonthDay based on this month-day with the requested month, not null"]], "Parameters": [["@B_java#time#Month_E@", "Month: the month-of-year to set in the returned month-day, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this MonthDay with the month-of-year altered. This returns a month-day with the specified month. If the day-of-month is invalid for the specified month, the day will be adjusted to the last valid day-of-month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public MonthDay with (Month month)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this month-day.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#MonthDay_E@", "the current month-day using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current month-day from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current month-day. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static MonthDay now (ZoneId zone)"}, "withMonth(int)": {"Returns": [["@B_java#time#MonthDay_E@", "a MonthDay based on this month-day with the requested month, not null"]], "Parameters": [["int", "int: the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this MonthDay with the month-of-year altered. This returns a month-day with the specified month. If the day-of-month is invalid for the specified month, the day will be adjusted to the last valid day-of-month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public MonthDay withMonth (int month)"}}, "Inheritance": [], "ClassName": "java.time.MonthDay", "ClassDesc": "A month-day in the ISO-8601 calendar system, such as --12-03. MonthDay is an immutable date-time object that represents the combination of a month and day-of-month. Any field that can be derived from a month and day, such as quarter-of-year, can be obtained. This class does not store or represent a year, time or time-zone. For example, the value \"December 3rd\" can be stored in a MonthDay. Since a MonthDay does not possess a year, the leap day of February 29th is considered valid. This class implements @B_java#time#temporal#TemporalAccessor_E@ rather than @B_java#time#temporal#Temporal_E@. This is because it is not possible to define whether February 29th is valid or not without external information, preventing the implementation of plus/minus. Related to this, MonthDay only provides access to query and set the fields MONTH_OF_YEAR and DAY_OF_MONTH. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable."}