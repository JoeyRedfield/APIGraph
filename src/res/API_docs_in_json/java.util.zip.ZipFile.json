{"Functions": {"size()": {"Returns": [["int", "the number of entries in the ZIP file"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of entries in the ZIP file.", "history": "Added in API level 1", "FullName": "public int size ()"}, "getComment()": {"Returns": [["@B_java#lang#String_E@", "the comment string for the zip file, or null if none"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed Since 1.7"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the zip file comment, or null if none.", "history": "Added in API level 19", "FullName": "public String getComment ()"}, "ZipFile(java.io.File, int)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"], ["int", "int: the mode in which the file is to be opened"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method doesn't allow read access to the file, or its checkDelete method doesn't allow deleting the file when the OPEN_DELETE flag is set."], ["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is invalid"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Opens a new ZipFile to read from the specified File object in the specified mode. The mode argument must be either First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed. The UTF-8 @B_java#nio#charset#Charset_E@ is used to decode the entry names and comments", "history": "added in API level 1", "FullName": "public ZipFile (File file, int mode)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": ["@B_java#util#zip#ZipFile#close_E@"], "Permissions": [], "Description": "Ensures that the system resources held by this ZipFile object are released when there are no more references to it. Since the time when GC would invoke this method is undetermined, it is strongly recommended that applications invoke the close method as soon they have finished accessing this ZipFile. This will prevent holding up system resources for an undetermined length of time.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the ZIP file. Closing this ZIP file will close all of the input streams previously returned by invocations of the @B_java#util#zip#ZipFile#getInputStream_E@ method.", "history": "Added in API level 1", "FullName": "public void close ()"}, "entries()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the ZIP file entries"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an enumeration of the ZIP file entries.", "history": "Added in API level 1", "FullName": "public Enumeration<? extends ZipEntry> entries ()"}, "ZipFile(java.io.File,int)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"], ["int", "int: the mode in which the file is to be opened"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method doesn't allow read access to the file, or its checkDelete method doesn't allow deleting the file when the OPEN_DELETE flag is set."], ["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is invalid"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Opens a new ZipFile to read from the specified File object in the specified mode. The mode argument must be either First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed. The UTF-8 @B_java#nio#charset#Charset_E@ is used to decode the entry names and comments", "history": "Added in API level 1", "FullName": "public ZipFile (File file, int mode)"}, "stream()": {"Returns": [["@B_java#util#stream#Stream_E@", "an ordered Stream of entries in this ZIP file"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Return an ordered Stream over the ZIP file entries. Entries appear in the Stream in the order they appear in the central directory of the ZIP file.", "history": "Added in API level 26", "FullName": "public Stream<? extends ZipEntry> stream ()"}, "ZipFile(java.lang.String,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the zip file"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to be used to decode the ZIP entry name and comment that are not encoded by using UTF-8 encoding (indicated by entry's general purpose flag)."]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method doesn't allow read access to the file"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Opens a zip file for reading. First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed.", "history": "Added in API level 24", "FullName": "public ZipFile (String name, Charset charset)"}, "ZipFile(java.io.File,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the ZIP entry name and comment (ignored if the language encoding bit of the ZIP entry's general purpose bit flag is set)."]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a ZIP file for reading given the specified File object.", "history": "Added in API level 24", "FullName": "public ZipFile (File file, Charset charset)"}, "getEntry(java.lang.String)": {"Returns": [["@B_java#util#zip#ZipEntry_E@", "the zip file entry, or null if not found"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the entry"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the zip file entry for the specified name, or null if not found.", "history": "Added in API level 1", "FullName": "public ZipEntry getEntry (String name)"}, "ZipFile(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a ZIP file for reading given the specified File object. The UTF-8 @B_java#nio#charset#Charset_E@ is used to decode the entry names and comments.", "history": "Added in API level 1", "FullName": "public ZipFile (File file)"}, "ZipFile(java.io.File, java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"], ["@B_java#nio#charset#Charset_E@", "Charset: The charset to be used to decode the ZIP entry name and comment (ignored if the language encoding bit of the ZIP entry's general purpose bit flag is set)."]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a ZIP file for reading given the specified File object.", "history": "added in API level 24", "FullName": "public ZipFile (File file, Charset charset)"}, "getInputStream(java.util.zip.ZipEntry)": {"Returns": [["@B_java#io#InputStream_E@", "the input stream for reading the contents of the specified zip file entry."]], "Parameters": [["@B_java#util#zip#ZipEntry_E@", "ZipEntry: the zip file entry"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#IllegalStateException_E@", "if the zip file has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an input stream for reading the contents of the specified zip file entry. Closing this ZIP file will, in turn, close all input streams that have been returned by invocations of this method.", "history": "Added in API level 1", "FullName": "public InputStream getInputStream (ZipEntry entry)"}, "ZipFile(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the zip file"]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method doesn't allow read access to the file."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Opens a zip file for reading. First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed. The UTF-8 @B_java#nio#charset#Charset_E@ is used to decode the entry names and comments.", "history": "Added in API level 1", "FullName": "public ZipFile (String name)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the path name of the ZIP file"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the path name of the ZIP file.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "ZipFile(java.io.File,int,java.nio.charset.Charset)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the ZIP file to be opened for reading"], ["int", "int: the mode in which the file is to be opened"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to be used to decode the ZIP entry name and comment that are not encoded by using UTF-8 encoding (indicated by entry's general purpose flag)."]], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP format error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method doesn't allow read access to the file,or its checkDelete method doesn't allow deleting the file when the OPEN_DELETE flag is set"], ["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is invalid"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Opens a new ZipFile to read from the specified File object in the specified mode. The mode argument must be either First, if there is a security manager, its checkRead method is called with the name argument as its argument to ensure the read is allowed.", "history": "Added in API level 24", "FullName": "public ZipFile (File file, int mode, Charset charset)"}}, "Inheritance": [], "ClassName": "java.util.zip.ZipFile", "ClassDesc": "This class is used to read entries from a zip file. Unless otherwise noted, passing a @B_java#lang#NullPointerException_E@ to be thrown."}