{"Functions": {"ForkJoinPool(int)": {"Returns": [], "Parameters": [["int", "int: the parallelism level"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parallelism less than or equal to zero, or greater than implementation limit"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and the caller is not permitted to modify threads because it does not hold @B_java#lang#RuntimePermission_E@(\"modifyThread\")"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ForkJoinPool with the indicated parallelism level, the", "history": "Added in API level 21", "FullName": "public ForkJoinPool (int parallelism)"}, "pollSubmission()": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the next submission, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns the next unexecuted submission if one is available. This method may be useful in extensions to this class that re-assign work in systems with multiple pools.", "history": "Added in API level 21", "FullName": "protected ForkJoinTask<?> pollSubmission ()"}, "getPoolSize()": {"Returns": [["int", "the number of worker threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of worker threads that have started but not yet terminated. The result returned by this method may differ from @B_java#util#concurrent#ForkJoinPool#getParallelism_E@ when threads are created to maintain parallelism when others are cooperatively blocked.", "history": "Added in API level 21", "FullName": "public int getPoolSize ()"}, "newTaskFor(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task being wrapped"], ["T", "T: the default value for the returned future"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given runnable and default value.", "history": "added in API level 21", "FullName": "protected RunnableFuture<T> newTaskFor (Runnable runnable, T value)"}, "submit(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "added in API level 21", "FullName": "public ForkJoinTask<T> submit (Runnable task, T result)"}, "isQuiescent()": {"Returns": [["boolean", "true if all threads are currently idle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if all worker threads are currently idle. An idle worker is one that cannot obtain a task to execute because none are available to steal from other threads, and there are no pending submissions to the pool. This method is conservative; it might not return true immediately upon idleness of all threads, but will eventually become true if threads remain inactive.", "history": "Added in API level 21", "FullName": "public boolean isQuiescent ()"}, "isTerminated()": {"Returns": [["boolean", "true if all tasks have completed following shut down"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if all tasks have completed following shut down.", "history": "Added in API level 21", "FullName": "public boolean isTerminated ()"}, "getQueuedSubmissionCount()": {"Returns": [["int", "the number of queued submissions"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing. This method may take time proportional to the number of submissions.", "history": "Added in API level 21", "FullName": "public int getQueuedSubmissionCount ()"}, "shutdownNow()": {"Returns": [["@B_java#util#List_E@", "an empty list"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and the caller is not permitted to modify threads because it does not hold @B_java#lang#RuntimePermission_E@(\"modifyThread\")"]], "SeeAlso": [], "Permissions": [], "Description": "Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks. Invocation has no effect on execution state if this is the @B_java#util#concurrent#ForkJoinPool#commonPool_E@, and no additional effect if already shut down. Otherwise, tasks that are in the process of being submitted or executed concurrently during the course of this method may or may not be rejected. This method cancels both existing and unexecuted tasks, in order to permit termination in the presence of task dependencies. So the method always returns an empty list (unlike the case for some other Executors).", "history": "Added in API level 21", "FullName": "public List<Runnable> shutdownNow ()"}, "submit(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return null upon successful completion.", "history": "Added in API level 21", "FullName": "public ForkJoinTask<?> submit (Runnable task)"}, "getActiveThreadCount()": {"Returns": [["int", "the number of active threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads that are currently stealing or executing tasks. This method may overestimate the number of active threads.", "history": "Added in API level 21", "FullName": "public int getActiveThreadCount ()"}, "execute(java.util.concurrent.ForkJoinTask<?>)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the task"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Arranges for (asynchronous) execution of the given task.", "history": "Added in API level 21", "FullName": "public void execute (ForkJoinTask<?> task)"}, "submit(java.util.concurrent.ForkJoinTask<T>)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the task to submit"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a ForkJoinTask for execution.", "history": "Added in API level 21", "FullName": "public ForkJoinTask<T> submit (ForkJoinTask<T> task)"}, "getQueuedTaskCount()": {"Returns": [["long", "the number of queued tasks"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing). This value is only an approximation, obtained by iterating across all threads in the pool. This method may be useful for tuning task granularities.", "history": "Added in API level 21", "FullName": "public long getQueuedTaskCount ()"}, "getCommonPoolParallelism()": {"Returns": [["int", "the targeted parallelism level of the common pool"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the targeted parallelism level of the common pool.", "history": "Added in API level 24", "FullName": "public static int getCommonPoolParallelism ()"}, "drainTasksTo(java.util.Collection<?superjava.util.concurrent.ForkJoinTask<?>>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status. These may include artificially generated or wrapped tasks. This method is designed to be invoked only when the pool is known to be quiescent. Invocations at other times may not remove all tasks. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 21", "FullName": "protected int drainTasksTo (Collection<? super ForkJoinTask<?>> c)"}, "managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#ForkJoinPool#ManagedBlocker_E@", "ForkJoinPool.ManagedBlocker: the blocker task"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if blocker.block() did so"]], "SeeAlso": [], "Permissions": [], "Description": "Runs the given possibly blocking task. When @B_java#util#concurrent#ForkJoinPool#ManagedBlocker#block_E@. This method repeatedly calls blocker.isReleasable() and blocker.block() until either method returns true. Every call to blocker.block() is preceded by a call to blocker.isReleasable() that returned false. If not running in a ForkJoinPool, this method is behaviorally equivalent to blocker.block().", "history": "Added in API level 21", "FullName": "public static void managedBlock (ForkJoinPool.ManagedBlocker blocker)"}, "getStealCount()": {"Returns": [["long", "the number of steals"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the total number of tasks stolen from one thread's work queue by another. The reported value underestimates the actual total number of steals when the pool is not quiescent. This value may be useful for monitoring and tuning fork/join programs: in general, steal counts should be high enough to keep threads busy, but low enough to avoid overhead and contention across threads.", "history": "Added in API level 21", "FullName": "public long getStealCount ()"}, "commonPool()": {"Returns": [["@B_java#util#concurrent#ForkJoinPool_E@", "the common pool instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the common pool instance. This pool is statically constructed; its run state is unaffected by attempts to @B_java#util#concurrent#ForkJoinPool#shutdown_E@ or @B_java#util#concurrent#ForkJoinPool#shutdownNow_E@. However this pool and any ongoing processing are automatically terminated upon program @B_java#lang#System#exit_E@. Any program that relies on asynchronous task processing to complete before program termination should invoke commonPool().@B_java#util#concurrent#ForkJoinPool#awaitQuiescence_E@, before exit.", "history": "Added in API level 24", "FullName": "public static ForkJoinPool commonPool ()"}, "invokeAll(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>)": {"Returns": [["@B_java#util#List_E@", "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#util#concurrent#RejectedExecutionException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning a list of Futures holding their status and results when all complete. @B_java#util#concurrent#Future#isDone_E@ is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 21", "FullName": "public List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks)"}, "isTerminating()": {"Returns": [["boolean", "true if terminating but not yet terminated"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the process of termination has commenced but not yet completed. This method may be useful for debugging. A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, or are waiting for I/O, causing this executor not to properly terminate. (See the advisory notes for class @B_java#util#concurrent#ForkJoinTask_E@ stating that tasks should not normally entail blocking operations. But if they do, they must abort them on interrupt.)", "history": "Added in API level 21", "FullName": "public boolean isTerminating ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this pool, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "awaitTermination(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if this executor terminated and false if the timeout elapsed before termination"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Because the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ never terminates until program shutdown, when applied to the common pool, this method is equivalent to @B_java#util#concurrent#ForkJoinPool#awaitQuiescence_E@ but always returns false.", "history": "Added in API level 21", "FullName": "public boolean awaitTermination (long timeout, TimeUnit unit)"}, "ForkJoinPool(int,java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory,java.lang.Thread.UncaughtExceptionHandler,boolean)": {"Returns": [], "Parameters": [["int", "int: the parallelism level. For default value, use @B_java#lang#Runtime#availableProcessors_E@."], ["@B_java#util#concurrent#ForkJoinPool#ForkJoinWorkerThreadFactory_E@", "ForkJoinPool.ForkJoinWorkerThreadFactory: the factory for creating new threads. For default value, use @B_java#util#concurrent#ForkJoinPool#defaultForkJoinWorkerThreadFactory_E@."], ["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "Thread.UncaughtExceptionHandler: the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks. For default value, use null."], ["boolean", "boolean: if true, establishes local first-in-first-out scheduling mode for forked tasks that are never joined. This mode may be more appropriate than default locally stack-based mode in applications in which worker threads only process event-style asynchronous tasks. For default value, use false."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parallelism less than or equal to zero, or greater than implementation limit"], ["@B_java#lang#NullPointerException_E@", "if the factory is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and the caller is not permitted to modify threads because it does not hold @B_java#lang#RuntimePermission_E@(\"modifyThread\")"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ForkJoinPool with the given parameters.", "history": "Added in API level 21", "FullName": "public ForkJoinPool (int parallelism, ForkJoinPool.ForkJoinWorkerThreadFactory factory, Thread.UncaughtExceptionHandler handler, boolean asyncMode)"}, "getAsyncMode()": {"Returns": [["boolean", "true if this pool uses async mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.", "history": "Added in API level 21", "FullName": "public boolean getAsyncMode ()"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and the caller is not permitted to modify threads because it does not hold @B_java#lang#RuntimePermission_E@(\"modifyThread\")"]], "SeeAlso": [], "Permissions": [], "Description": "Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no effect on execution state if this is the @B_java#util#concurrent#ForkJoinPool#commonPool_E@, and no additional effect if already shut down. Tasks that are in the process of being submitted concurrently during the course of this method may or may not be rejected.", "history": "Added in API level 21", "FullName": "public void shutdown ()"}, "hasQueuedSubmissions()": {"Returns": [["boolean", "true if there are any queued submissions"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if there are any tasks submitted to this pool that have not yet begun executing.", "history": "Added in API level 21", "FullName": "public boolean hasQueuedSubmissions ()"}, "newTaskFor(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task being wrapped"], ["T", "T: the default value for the returned future"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given runnable and default value.", "history": "Added in API level 21", "FullName": "protected RunnableFuture<T> newTaskFor (Runnable runnable, T value)"}, "getUncaughtExceptionHandler()": {"Returns": [["@B_java#lang#Thread#UncaughtExceptionHandler_E@", "the handler, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.", "history": "Added in API level 21", "FullName": "public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler ()"}, "getParallelism()": {"Returns": [["int", "the targeted parallelism level of this pool"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the targeted parallelism level of this pool.", "history": "Added in API level 21", "FullName": "public int getParallelism ()"}, "execute(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public void execute (Runnable task)"}, "invoke(java.util.concurrent.ForkJoinTask<T>)": {"Returns": [["T", "the task's result"]], "Parameters": [["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the task"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using ex.printStackTrace()) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.", "history": "Added in API level 21", "FullName": "public T invoke (ForkJoinTask<T> task)"}, "getRunningThreadCount()": {"Returns": [["int", "the number of worker threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization. This method may overestimate the number of running threads.", "history": "Added in API level 21", "FullName": "public int getRunningThreadCount ()"}, "getFactory()": {"Returns": [["@B_java#util#concurrent#ForkJoinPool#ForkJoinWorkerThreadFactory_E@", "the factory used for constructing new workers"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the factory used for constructing new workers.", "history": "Added in API level 21", "FullName": "public ForkJoinPool.ForkJoinWorkerThreadFactory getFactory ()"}, "ForkJoinPool()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and the caller is not permitted to modify threads because it does not hold @B_java#lang#RuntimePermission_E@(\"modifyThread\")"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ForkJoinPool with parallelism equal to @B_java#lang#Runtime#availableProcessors_E@, using the", "history": "Added in API level 21", "FullName": "public ForkJoinPool ()"}, "newTaskFor(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will call the underlying callable and which, as a Future, will yield the callable's result as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the callable task being wrapped"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given callable task.", "history": "Added in API level 21", "FullName": "protected RunnableFuture<T> newTaskFor (Callable<T> callable)"}, "submit(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's get method will return the task's result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result = exec.submit(aCallable).get(); Note: The @B_java#util#concurrent#Executors_E@ class includes a set of methods that can convert some other common closure-like objects, for example, @B_java#security#PrivilegedAction_E@ to @B_java#util#concurrent#Callable_E@ form so they can be submitted.", "history": "Added in API level 21", "FullName": "public ForkJoinTask<T> submit (Callable<T> task)"}, "awaitQuiescence(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if quiescent; false if the timeout elapsed."]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If called by a ForkJoinTask operating in this pool, equivalent in effect to @B_java#util#concurrent#ForkJoinTask#helpQuiesce_E@. Otherwise, waits and/or attempts to assist performing tasks until this pool @B_java#util#concurrent#ForkJoinPool#isQuiescent_E@ or the indicated timeout elapses.", "history": "Added in API level 21", "FullName": "public boolean awaitQuiescence (long timeout, TimeUnit unit)"}, "submit(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the task is null"], ["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "Added in API level 21", "FullName": "public ForkJoinTask<T> submit (Runnable task, T result)"}, "isShutdown()": {"Returns": [["boolean", "true if this pool has been shut down"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this pool has been shut down.", "history": "Added in API level 21", "FullName": "public boolean isShutdown ()"}}, "Inheritance": ["@B_java#util#concurrent#AbstractExecutorService_E@"], "ClassName": "java.util.concurrent.ForkJoinPool", "ClassDesc": "An @B_java#util#concurrent#ExecutorService_E@ for running @B_java#util#concurrent#ForkJoinTask_E@s. A ForkJoinPool provides the entry point for submissions from non-ForkJoinTask clients, as well as management and monitoring operations. A ForkJoinPool differs from other kinds of @B_java#util#concurrent#ExecutorService_E@ mainly by virtue of employing work-stealing: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most ForkJoinTasks), as well as when many small tasks are submitted to the pool from external clients. Especially when setting asyncMode to true in constructors, ForkJoinPools may also be appropriate for use with event-style tasks that are never joined. A static @B_java#util#concurrent#ForkJoinPool#commonPool_E@ is available and appropriate for most applications. The common pool is used by any ForkJoinTask that is not explicitly submitted to a specified pool. Using the common pool normally reduces resource usage (its threads are slowly reclaimed during periods of non-use, and reinstated upon subsequent use). For applications that require separate or custom pools, a ForkJoinPool may be constructed with a given target parallelism level; by default, equal to the number of available processors. The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others. However, no such adjustments are guaranteed in the face of blocked I/O or other unmanaged synchronization. The nested @B_java#util#concurrent#ForkJoinPool#ManagedBlocker_E@ interface enables extension of the kinds of synchronization accommodated. In addition to execution and lifecycle control methods, this class provides status check methods (for example @B_java#util#concurrent#ForkJoinPool#getStealCount_E@) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method @B_java#util#concurrent#ForkJoinPool#toString_E@ returns indications of pool state in a convenient form for informal monitoring. As is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of ForkJoinTask, but overloaded forms also allow mixed execution of plain Runnable- or Callable- based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods. The common pool is by default constructed with default parameters, but these may be controlled by setting three java.util.concurrent.ForkJoinPool.common.parallelism - the parallelism level, a non-negative integer java.util.concurrent.ForkJoinPool.common.threadFactory - the class name of a @B_java#util#concurrent#ForkJoinPool#ForkJoinWorkerThreadFactory_E@ java.util.concurrent.ForkJoinPool.common.exceptionHandler - the class name of a @B_java#lang#Thread#UncaughtExceptionHandler_E@ java.util.concurrent.ForkJoinPool.common.maximumSpares - the maximum number of allowed extra threads to maintain target parallelism (default 256). If a @B_java#lang#SecurityManager_E@ is present and no factory is specified, then the default pool uses a factory supplying threads that have no @B_java#security#Permissions_E@ enabled. The system class loader is used to load these classes. Upon any error in establishing these settings, default parameters are used. It is possible to disable or limit the use of threads in the common pool by setting the parallelism property to zero, and/or using a factory that may return null. However doing so may cause unjoined tasks to never be executed. IllegalArgumentException. This implementation rejects submitted tasks (that is, by throwing @B_java#util#concurrent#RejectedExecutionException_E@) only when the pool is shut down or internal resources have been exhausted."}