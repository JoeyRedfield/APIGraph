{"Functions": {"setIconified(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a true value will collapse the SearchView to an icon, while a false will expand it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Iconifies or expands the SearchView. Any query text is cleared when iconified. This is a temporary state and does not override the default iconified state set by @B_android#support#v7#widget#SearchView#setIconifiedByDefault_E@. If the default state is iconified, then a false here will only be valid until the user closes the field. And if the default state is expanded, then a true here will only clear the text field and not close it.", "history": "added in version 24.2.0", "FullName": "void setIconified (boolean iconify)"}, "getImeOptions()": {"Returns": [["int", "the ime options"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeOptions_E@"], "Permissions": [], "Description": "Returns the IME options set on the query text field.", "history": "added in version 24.2.0", "FullName": "int getImeOptions ()"}, "setImeOptions(int)": {"Returns": [], "Parameters": [["int", "int: the options to set on the query text field"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeOptions_E@"], "Permissions": [], "Description": "Sets the IME options on the query text field.", "history": "added in version 24.2.0", "FullName": "void setImeOptions (int imeOptions)"}, "setQuery(java.lang.CharSequence, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the query string. This replaces any query text already present in the text field."], ["boolean", "boolean: whether to submit the query right now or only update the contents of text field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a query string in the text field and optionally submits the query as well.", "history": "added in version 24.2.0", "FullName": "void setQuery (CharSequence query, boolean submit)"}, "clearFocus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this view wants to give up focus. If focus is cleared @B_android#view#View#onFocusChanged_E@ is called.", "history": "", "FullName": "void clearFocus ()"}, "getSuggestionsAdapter()": {"Returns": [["@B_android#support#v4#widget#CursorAdapter_E@", "the suggestions adapter"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter used for suggestions, if any.", "history": "added in version 24.2.0", "FullName": "CursorAdapter getSuggestionsAdapter ()"}, "getQueryHint()": {"Returns": [["@B_java#lang#CharSequence_E@", "the displayed query hint text, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hint text that will be displayed in the query text field. The displayed query hint is chosen in the following order:", "history": "added in version 24.2.0", "FullName": "CharSequence getQueryHint ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 24.2.0", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "isIconfiedByDefault()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default iconified state of the search field.", "history": "added in version 24.2.0", "FullName": "boolean isIconfiedByDefault ()"}, "setSearchableInfo(android.app.SearchableInfo)": {"Returns": [], "Parameters": [["@B_android#app#SearchableInfo_E@", "SearchableInfo: a SearchableInfo can be retrieved from the SearchManager, for a specific activity or a global search provider."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used to display labels, hints, suggestions, create intents for launching search results screens and controlling other affordances such as a voice button.", "history": "added in version 24.2.0", "FullName": "void setSearchableInfo (SearchableInfo searchable)"}, "setIconifiedByDefault(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the search field should be iconified by default"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the default or resting state of the search field. If true, a single search icon is shown by default and expands to show the text field and other buttons when pressed. Also, if the default state is iconified, then it collapses to that state when the close button is pressed. Changes to this property will take effect immediately. The default value is true.", "history": "added in version 24.2.0", "FullName": "void setIconifiedByDefault (boolean iconified)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "SearchView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "SearchView (Context context)"}, "isSubmitButtonEnabled()": {"Returns": [["boolean", "whether the submit button is enabled automatically when necessary"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the submit button is enabled when necessary or never displayed.", "history": "added in version 24.2.0", "FullName": "boolean isSubmitButtonEnabled ()"}, "getMaxWidth()": {"Returns": [["int", "the maximum width of the view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the specified maximum width in pixels, if set. Returns zero if no maximum width was specified.", "history": "added in version 24.2.0", "FullName": "int getMaxWidth ()"}, "setQueryHint(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the hint text to display or null to clear"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the hint text to display in the query text field. This overrides any hint specified in the @B_android#app#SearchableInfo_E@. This value may be specified as an empty string to prevent any query hint from being displayed.", "history": "added in version 24.2.0", "FullName": "void setQueryHint (CharSequence hint)"}, "isIconified()": {"Returns": [["boolean", "true if the SearchView is currently iconified, false if the search field is fully visible."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current iconified state of the SearchView.", "history": "added in version 24.2.0", "FullName": "boolean isIconified ()"}, "setQueryRefinementEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if all items should have a query refinement button, false if only those items that have a query refinement flag set should have the button."]], "Throws": [], "SeeAlso": ["@B_android#app#SearchManager_E@"], "Permissions": [], "Description": "Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. Clicking on the query refinement button will replace the text in the query text field with the text from the suggestion. This flag only takes effect if a SearchableInfo has been specified with @B_android#support#v7#widget#SearchView#setSearchableInfo_E@ and not when using a custom adapter.", "history": "added in version 24.2.0", "FullName": "void setQueryRefinementEnabled (boolean enable)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#v7#widget#SearchView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "getQuery()": {"Returns": [["@B_java#lang#CharSequence_E@", "the query string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the query string currently in the text field.", "history": "added in version 24.2.0", "FullName": "CharSequence getQuery ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["", "true if the event was handled here, or false if not."]], "Parameters": [["int", "This is the keycode of the typed key, and is the same value as found in the KeyEvent parameter."], ["@B_android#view#KeyEvent_E@", "The complete event record for the typed key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles the key down event for dealing with action keys.", "history": "", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setMaxWidth(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the view at most this many pixels wide", "history": "added in version 24.2.0", "FullName": "void setMaxWidth (int maxpixels)"}, "isQueryRefinementEnabled()": {"Returns": [["boolean", "true if enabled for all items, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether query refinement is enabled for all items or only specific ones.", "history": "added in version 24.2.0", "FullName": "boolean isQueryRefinementEnabled ()"}, "onActionViewCollapsed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this view is collapsed as an action view. See @B_android#view#MenuItem#collapseActionView_E@.", "history": "added in version 24.2.0", "FullName": "void onActionViewCollapsed ()"}, "setSubmitButtonEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to show a submit button for submitting queries, false if a submit button is not required."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables showing a submit button when the query is non-empty. In cases where the SearchView is being used to filter the contents of the current activity and doesn't launch a separate results activity, then the submit button should be disabled.", "history": "added in version 24.2.0", "FullName": "void setSubmitButtonEnabled (boolean enabled)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "requestFocus(int, android.graphics.Rect)": {"Returns": [["boolean", "Whether this view or one of its descendants actually took focus."]], "Parameters": [["int", "int: One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle (in this View's coordinate system) to give a finer grained hint about where focus is coming from. May be null if there is no hint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. The rectangle can help give larger views a finer grained hint about where focus is coming from, and therefore, where to show selection, or forward focus change internally. A view will not actually take focus if it is not focusable (@B_android#view#View#isFocusable_E@ returns false), or if it is focusable and it is not focusable in touch mode (@B_android#view#View#isFocusableInTouchMode_E@) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has @B_android#view#ViewGroup#getDescendantFocusability_E@ equal to @B_android#view#ViewGroup#FOCUS_BLOCK_DESCENDANTS_E@. See also @B_android#view#View#focusSearch_E@, which is what you call to say that you have focus, and you want your parent to look for the next one. You may wish to override this method if your custom @B_android#view#View_E@ has an internal @B_android#view#View_E@ that it wishes to forward the request to. Looks for a view to give focus to respecting the setting specified by @B_android#view#ViewGroup#getDescendantFocusability_E@. Uses @B_android#view#ViewGroup#onRequestFocusInDescendants_E@ to find focus within the children of this group when appropriate.", "history": "", "FullName": "boolean requestFocus (int direction, Rect previouslyFocusedRect)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "", "FullName": "void onWindowFocusChanged (boolean hasWindowFocus)"}, "getInputType()": {"Returns": [["int", "the input type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input type set on the query text field.", "history": "added in version 24.2.0", "FullName": "int getInputType ()"}, "setInputType(int)": {"Returns": [], "Parameters": [["int", "int: the input type to set on the query text field"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setInputType_E@"], "Permissions": [], "Description": "Sets the input type on the query text field.", "history": "added in version 24.2.0", "FullName": "void setInputType (int inputType)"}, "onActionViewExpanded()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this view is expanded as an action view. See @B_android#view#MenuItem#expandActionView_E@.", "history": "added in version 24.2.0", "FullName": "void onActionViewExpanded ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "@B_android#support#v7#widget#LinearLayoutCompat_E@"], "ClassName": "android.support.v7.widget.SearchView", "ClassDesc": "A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. only, you should instead use the framework https:##developer#android#com@B_android#widget#SearchView_E@ class. When the SearchView is used in an @B_android#support#v7#app#ActionBar_E@ as an action view, it's collapsed by default, so you must provide an icon for the action. If you want the search field to always be visible, then call @B_android#support#v7#widget#SearchView#setIconifiedByDefault_E@."}