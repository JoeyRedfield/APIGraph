{"Functions": {"SizeF(float,float)": {"Returns": [], "Parameters": [["float", "float: The width of the size"], ["float", "float: The height of the size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either width or height was not finite."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable SizeF instance. Both the width and the height must be a finite number. In particular, NaN and positive/negative infinity are illegal values.", "history": "Added in API level 21", "FullName": "public SizeF (float width, float height)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of the size"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the size represented as a string with the format \"WxH\"", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getHeight()": {"Returns": [["float", "height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the height of the size (as an arbitrary unit).", "history": "Added in API level 21", "FullName": "public float getHeight ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this size is equal to another size. Two sizes are equal if and only if both their widths and heights are the same. For this purpose, the width/height float values are considered to be the same if and only if the method @B_java#lang#Float#floatToIntBits_E@ returns the identical int value when applied to each.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "parseSizeF(java.lang.String)": {"Returns": [["@B_android#util#SizeF_E@", "the size value represented by string."]], "Parameters": [["@B_java#lang#String_E@", "String: the string representation of a size value."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if string cannot be parsed as a size value."], ["@B_java#lang#NullPointerException_E@", "if string was null"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified string as a size value. The ASCII characters \\u002a ('*') and \\u0078 ('x') are recognized as separators between the width and height. For any SizeF s: SizeF.parseSizeF(s.toString()).equals(s). However, the method also handles sizes expressed in the following forms: \"x*=> new SizeF(width, height), where 'x' (such as a float in hexadecimal string format).", "history": "Added in API level 21", "FullName": "public static SizeF parseSizeF (String string)"}, "getWidth()": {"Returns": [["float", "width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the width of the size (as an arbitrary unit).", "history": "Added in API level 21", "FullName": "public float getWidth ()"}, "SizeF(float, float)": {"Returns": [], "Parameters": [["float", "float: The width of the size"], ["float", "float: The height of the size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either width or height was not finite."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable SizeF instance. Both the width and the height must be a finite number. In particular, NaN and positive/negative infinity are illegal values.", "history": "added in API level 21", "FullName": "public SizeF (float width, float height)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.util.SizeF", "ClassDesc": "Immutable class for describing width and height dimensions in some arbitrary unit. Width and height are finite values stored as a floating point representation."}