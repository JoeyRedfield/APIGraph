{"Functions": {"toHexString(float)": {"Returns": [["@B_java#lang#String_E@", "a hex string representation of the argument."]], "Parameters": [["float", "float: the float to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hexadecimal string representation of the float argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '-' ('\\u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude If \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If \"0x0.0p0\"; thus, negative zero produces the result \"-0x0.0p0\" and positive zero produces the result \"0x0.0p0\". If float value with a normalized representation, substrings are used to represent the significand and exponent fields. The significand is represented by the characters \"0x1.\" followed by a lowercase hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by \"p\" followed by a decimal string of the unbiased exponent as if produced by a call to @B_java#lang#Integer#toString_E@ on the exponent value. If float value with a subnormal representation, the significand is represented by the characters \"0x0.\" followed by a hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by \"p-126\". Note that there must be at least one nonzero digit in a subnormal significand.", "history": "Added in API level 1", "FullName": "public static String toHexString (float f)"}, "Float(float)": {"Returns": [], "Parameters": [["float", "float: the value to be represented by the Float."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Float object that represents the primitive float argument.", "history": "Added in API level 1", "FullName": "public Float (float value)"}, "intValue()": {"Returns": [["int", "the float value represented by this object converted to type int"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Float as an int after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "isInfinite()": {"Returns": [["boolean", "true if the value represented by this object is positive infinity or negative infinity; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Float value is infinitely large in magnitude, false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isInfinite ()"}, "longValue()": {"Returns": [["long", "the float value represented by this object converted to type long"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns value of this Float as a long after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "floatToIntBits(float)": {"Returns": [["int", "the bits that represent the floating-point number."]], "Parameters": [["float", "float: a floating-point number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is 0x7fc00000. In all cases, the result is an integer that, when given to the @B_java#lang#Float#intBitsToFloat_E@ method, will produce a floating-point value the same as the argument to floatToIntBits (except all NaN values are collapsed to a single \"canonical\" NaN value).", "history": "Added in API level 1", "FullName": "public static int floatToIntBits (float value)"}, "isInfinite(float)": {"Returns": [["boolean", "true if the argument is positive infinity or negative infinity; false otherwise."]], "Parameters": [["float", "float: the value to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified number is infinitely large in magnitude, false otherwise.", "history": "Added in API level 1", "FullName": "public static boolean isInfinite (float v)"}, "min(float,float)": {"Returns": [["float", "the smaller of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two float values as if by calling @B_java#lang#Math#min_E@.", "history": "Added in API level 24", "FullName": "public static float min (float a, float b)"}, "floatToRawIntBits(float)": {"Returns": [["int", "the bits that represent the floating-point number."]], "Parameters": [["float", "float: a floating-point number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout, preserving Not-a-Number (NaN) values. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is the integer representing the actual NaN value. Unlike the floatToIntBits method, floatToRawIntBits does not collapse all the bit patterns encoding a NaN to a single \"canonical\" NaN value. In all cases, the result is an integer that, when given to the @B_java#lang#Float#intBitsToFloat_E@ method, will produce a floating-point value the same as the argument to floatToRawIntBits.", "history": "Added in API level 1", "FullName": "public static int floatToRawIntBits (float value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Float#toString_E@"], "Permissions": [], "Description": "Returns a string representation of this Float object. The primitive float value represented by this object is converted to a String exactly as if by the method toString of one argument.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "hashCode(float)": {"Returns": [["int", "a hash code value for a float value."]], "Parameters": [["float", "float: the value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a float value; compatible with Float.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (float value)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared"]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#floatToIntBits_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Float object that represents a float with the same value as the float represented by this object. For this purpose, two float values are considered to be the same if and only if the method @B_java#lang#Float#floatToIntBits_E@ returns the identical int value when applied to each. Note that in most cases, for two instances of class Float, f1 and f2, the value of f1.equals(f2) is true if and only if also has the value true. However, there are two exceptions: If f1 and f2 both represent Float.NaN, then the equals method returns true, even though Float.NaN==Float.NaN has the value false. If f1 represents +0.0f while f2 represents -0.0f, or vice versa, the equal test has the value false, even though 0.0f==-0.0f has the value true. This definition allows hash tables to operate properly.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "isNaN(float)": {"Returns": [["boolean", "true if the argument is NaN; false otherwise."]], "Parameters": [["float", "float: the value to be tested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.", "history": "Added in API level 1", "FullName": "public static boolean isNaN (float v)"}, "Float(double)": {"Returns": [], "Parameters": [["double", "double: the value to be represented by the Float."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Float object that represents the argument converted to type float.", "history": "Added in API level 1", "FullName": "public Float (double value)"}, "doubleValue()": {"Returns": [["double", "the float value represented by this object converted to type double"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Float as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "shortValue()": {"Returns": [["short", "the float value represented by this object converted to type short"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Float as a short after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public short shortValue ()"}, "intBitsToFloat(int)": {"Returns": [["float", "the float floating-point value with the same bit pattern."]], "Parameters": [["int", "int: an integer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the float value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"single format\" bit layout. If the argument is 0x7f800000, the result is positive infinity. If the argument is 0xff800000, the result is negative infinity. If the argument is any value in the range 0x7f800001 through 0x7fffffff or in the range 0xff800001 through 0xffffffff, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the Float.floatToRawIntBits method. In all other cases, let Note that this method may not be able to return a float NaN with exactly same bit pattern as the int argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and intBitsToFloat may not be able to return a float with a signaling NaN bit pattern. Consequently, for some int values, floatToRawIntBits(intBitsToFloat(start)) may start. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.", "history": "Added in API level 1", "FullName": "public static float intBitsToFloat (int bits)"}, "min(float, float)": {"Returns": [["float", "the smaller of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two float values as if by calling @B_java#lang#Math#min_E@.", "history": "added in API level 24", "FullName": "public static float min (float a, float b)"}, "isNaN()": {"Returns": [["boolean", "true if the value represented by this object is NaN; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Float value is a Not-a-Number (NaN), false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isNaN ()"}, "compareTo(java.lang.Float)": {"Returns": [["int", "the value 0 if anotherFloat is numerically equal to this Float; a value less than 0 if this Float is numerically less than anotherFloat; and a value greater than 0 if this Float is numerically greater than anotherFloat."]], "Parameters": [["@B_java#lang#Float_E@", "Float: the Float to be compared."]], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable#compareTo_E@"], "Permissions": [], "Description": "Compares two Float objects numerically. There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (<, <=, ==, >=, >) when applied to primitive float values: Float.NaN is considered by this method to be equal to itself and greater than all other float values (including Float.POSITIVE_INFINITY). 0.0f is considered by this method to be greater than -0.0f. This ensures that the Float objects imposed by this method is", "history": "Added in API level 1", "FullName": "public int compareTo (Float anotherFloat)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Float object. The result is the integer bit representation, exactly as produced by the method @B_java#lang#Float#floatToIntBits_E@, of the primitive float value represented by this Float object.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "byteValue()": {"Returns": [["byte", "the float value represented by this object converted to type byte"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Float as a byte after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public byte byteValue ()"}, "compare(float, float)": {"Returns": [["int", "the value 0 if f1 is numerically equal to f2; a value less than 0 if f1 is numerically less than f2; and a value greater than 0 if f1 is numerically greater than f2."]], "Parameters": [["float", "float: the first float to compare."], ["float", "float: the second float to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified float values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:", "history": "added in API level 1", "FullName": "public static int compare (float f1, float f2)"}, "Float(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be converted to a Float."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable number."]], "SeeAlso": ["@B_java#lang#Float#valueOf_E@"], "Permissions": [], "Description": "Constructs a newly allocated Float object that represents the floating-point value of type float represented by the string. The string is converted to a float value as if by the valueOf method.", "history": "Added in API level 1", "FullName": "public Float (String s)"}, "toString(float)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument."]], "Parameters": [["float", "float: the float to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the float argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '-' ('\\u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude If \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If \"0.0\"; thus, negative zero produces the result \"-0.0\" and positive zero produces the result \"0.0\". If .' ('\\u002E'), followed by one or more decimal digits representing the fractional part of If .' ('\\u002E'), followed by decimal digits representing the fractional part of E' ('\\u0045'), followed by a representation of @B_java#lang#Integer#toString_E@. How many digits must be printed for the fractional part of float. That is, suppose that float value nearest to float values are equally close to 0. To create localized string representations of a floating-point value, use subclasses of @B_java#text#NumberFormat_E@.", "history": "Added in API level 1", "FullName": "public static String toString (float f)"}, "max(float,float)": {"Returns": [["float", "the greater of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two float values as if by calling @B_java#lang#Math#max_E@.", "history": "Added in API level 24", "FullName": "public static float max (float a, float b)"}, "floatValue()": {"Returns": [["float", "the float value represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the float value of this Float object.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "sum(float,float)": {"Returns": [["float", "the sum of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two float values together as per the + operator.", "history": "Added in API level 24", "FullName": "public static float sum (float a, float b)"}, "max(float, float)": {"Returns": [["float", "the greater of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two float values as if by calling @B_java#lang#Math#max_E@.", "history": "added in API level 24", "FullName": "public static float max (float a, float b)"}, "compare(float,float)": {"Returns": [["int", "the value 0 if f1 is numerically equal to f2; a value less than 0 if f1 is numerically less than f2; and a value greater than 0 if f1 is numerically greater than f2."]], "Parameters": [["float", "float: the first float to compare."], ["float", "float: the second float to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified float values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:", "history": "Added in API level 1", "FullName": "public static int compare (float f1, float f2)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#lang#Float_E@", "a Float object holding the value represented by the String argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable number."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Float object holding the float value represented by the argument string s. If s is null, then a NullPointerException is thrown. Leading and trailing whitespace characters in s are ignored. Whitespace is removed as if by the @B_java#lang#String#trim_E@ method; that is, both ASCII space and control characters are removed. The rest of s should constitute a s does not have the form of a NumberFormatException is thrown. Otherwise, s is regarded as representing an exact decimal value in the usual \"computerized scientific notation\" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an \"infinitely precise\" binary value that is then rounded to type float by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value. Note that the round-to-nearest rule also implies overflow and underflow behaviour; if the exact value of s is large enough in magnitude (greater than or equal to (@B_java#lang#Float#MAX_VALUE_E@ + @B_java#lang#Math#ulp_E@/2), rounding to float will result in an infinity and if the exact value of s is small enough in magnitude (less than or equal to @B_java#lang#Float#MIN_VALUE_E@/2), rounding to float will result in a zero. Finally, after rounding a Float object representing this float value is returned. To interpret localized string representations of a floating-point value, use subclasses of @B_java#text#NumberFormat_E@. Note that trailing format specifiers, specifiers that determine the type of a floating-point literal (1.0f is a float value; 1.0d is a double value), do not influence the results of this method. In other words, the numerical value of the input string is converted directly to the target floating-point type. In general, the two-step sequence of conversions, string to double followed by double to float, is not equivalent to converting a string directly to float. For example, if first converted to an intermediate double and then to float, the string \"1.00000017881393421514957253748434595763683319091796875001d\" results in the float value 1.0000002f; if the string is converted directly to float, 1.0000001f results. To avoid calling this method on an invalid string and having a NumberFormatException be thrown, the documentation for @B_java#lang#Double#valueOf_E@ lists a regular expression which can be used to screen the input.", "history": "Added in API level 1", "FullName": "public static Float valueOf (String s)"}, "isFinite(float)": {"Returns": [["boolean", "true if the argument is a finite floating-point value, false otherwise."]], "Parameters": [["float", "float: the float value to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).", "history": "Added in API level 24", "FullName": "public static boolean isFinite (float f)"}, "sum(float, float)": {"Returns": [["float", "the sum of a and b"]], "Parameters": [["float", "float: the first operand"], ["float", "float: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two float values together as per the + operator.", "history": "added in API level 24", "FullName": "public static float sum (float a, float b)"}, "parseFloat(java.lang.String)": {"Returns": [["float", "the float value represented by the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the string is null"], ["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable float."]], "SeeAlso": ["@B_java#lang#Float#valueOf_E@"], "Permissions": [], "Description": "Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.", "history": "Added in API level 1", "FullName": "public static float parseFloat (String s)"}, "valueOf(float)": {"Returns": [["@B_java#lang#Float_E@", "a Float instance representing f."]], "Parameters": [["float", "float: a float value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Float instance representing the specified float value. If a new Float instance is not required, this method should generally be used in preference to the constructor @B_java#lang#Float#Float_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values.", "history": "Added in API level 1", "FullName": "public static Float valueOf (float f)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.lang.Float", "ClassDesc": "The Float class wraps a value of primitive type float in an object. An object of type Float contains a single field whose type is float. In addition, this class provides several methods for converting a float to a String and a String to a float, as well as other constants and methods useful when dealing with a float."}