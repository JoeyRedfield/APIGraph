{"Functions": {"await(long,java.util.concurrent.TimeUnit)": {"Returns": [["int", "the arrival index of the current thread, where index getParties() - 1 indicates the first to arrive and zero indicates the last to arrive"]], "Parameters": [["long", "long: the time to wait for the barrier"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the specified timeout elapses. In this case the barrier will be broken."], ["@B_java#util#concurrent#BrokenBarrierException_E@", "if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when await was called, or the barrier action (if present) failed due to an exception"]], "SeeAlso": [], "Permissions": [], "Description": "Waits until all await on this barrier, or the specified waiting time elapses. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or The specified timeout elapses; or Some other thread Some other thread Some other thread times out while waiting for barrier; or Some other thread invokes @B_java#util#concurrent#CyclicBarrier#reset_E@ on this barrier. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then @B_java#util#concurrent#TimeoutException_E@ is thrown. If the time is less than or equal to zero, the method will not wait at all. If the barrier is @B_java#util#concurrent#CyclicBarrier#reset_E@ while any thread is waiting, or if the barrier await is invoked, or while any thread is waiting, then @B_java#util#concurrent#BrokenBarrierException_E@ is thrown. If any thread is @B_java#util#concurrent#BrokenBarrierException_E@ and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.", "history": "Added in API level 1", "FullName": "public int await (long timeout, TimeUnit unit)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the barrier to its initial state. If any parties are currently waiting at the barrier, they will return with a @B_java#util#concurrent#BrokenBarrierException_E@. Note that resets after a breakage has occurred for other reasons can be complicated to carry out; threads need to re-synchronize in some other way, and choose one to perform the reset. It may be preferable to instead create a new barrier for subsequent use.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "CyclicBarrier(int)": {"Returns": [], "Parameters": [["int", "int: the number of threads that must invoke @B_java#util#concurrent#CyclicBarrier#await_E@ before the barrier is tripped"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and does not perform a predefined action when the barrier is tripped.", "history": "Added in API level 1", "FullName": "public CyclicBarrier (int parties)"}, "getParties()": {"Returns": [["int", "the number of parties required to trip this barrier"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of parties required to trip this barrier.", "history": "Added in API level 1", "FullName": "public int getParties ()"}, "await(long, java.util.concurrent.TimeUnit)": {"Returns": [["int", "the arrival index of the current thread, where index getParties() - 1 indicates the first to arrive and zero indicates the last to arrive"]], "Parameters": [["long", "long: the time to wait for the barrier"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the specified timeout elapses. In this case the barrier will be broken."], ["@B_java#util#concurrent#BrokenBarrierException_E@", "if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when await was called, or the barrier action (if present) failed due to an exception"]], "SeeAlso": [], "Permissions": [], "Description": "Waits until all await on this barrier, or the specified waiting time elapses. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or The specified timeout elapses; or Some other thread Some other thread Some other thread times out while waiting for barrier; or Some other thread invokes @B_java#util#concurrent#CyclicBarrier#reset_E@ on this barrier. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then @B_java#util#concurrent#TimeoutException_E@ is thrown. If the time is less than or equal to zero, the method will not wait at all. If the barrier is @B_java#util#concurrent#CyclicBarrier#reset_E@ while any thread is waiting, or if the barrier await is invoked, or while any thread is waiting, then @B_java#util#concurrent#BrokenBarrierException_E@ is thrown. If any thread is @B_java#util#concurrent#BrokenBarrierException_E@ and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.", "history": "added in API level 1", "FullName": "public int await (long timeout, TimeUnit unit)"}, "isBroken()": {"Returns": [["boolean", "true if one or more parties broke out of this barrier due to interruption or timeout since construction or the last reset, or a barrier action failed due to an exception; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this barrier is in a broken state.", "history": "Added in API level 1", "FullName": "public boolean isBroken ()"}, "CyclicBarrier(int, java.lang.Runnable)": {"Returns": [], "Parameters": [["int", "int: the number of threads that must invoke @B_java#util#concurrent#CyclicBarrier#await_E@ before the barrier is tripped"], ["@B_java#lang#Runnable_E@", "Runnable: the command to execute when the barrier is tripped, or null if there is no action"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier.", "history": "added in API level 1", "FullName": "public CyclicBarrier (int parties, Runnable barrierAction)"}, "CyclicBarrier(int,java.lang.Runnable)": {"Returns": [], "Parameters": [["int", "int: the number of threads that must invoke @B_java#util#concurrent#CyclicBarrier#await_E@ before the barrier is tripped"], ["@B_java#lang#Runnable_E@", "Runnable: the command to execute when the barrier is tripped, or null if there is no action"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier.", "history": "Added in API level 1", "FullName": "public CyclicBarrier (int parties, Runnable barrierAction)"}, "await()": {"Returns": [["int", "the arrival index of the current thread, where index getParties() - 1 indicates the first to arrive and zero indicates the last to arrive"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#BrokenBarrierException_E@", "if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when await was called, or the barrier action (if present) failed due to an exception"]], "SeeAlso": [], "Permissions": [], "Description": "Waits until all await on this barrier. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or Some other thread Some other thread Some other thread times out while waiting for barrier; or Some other thread invokes @B_java#util#concurrent#CyclicBarrier#reset_E@ on this barrier. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the barrier is @B_java#util#concurrent#CyclicBarrier#reset_E@ while any thread is waiting, or if the barrier await is invoked, or while any thread is waiting, then @B_java#util#concurrent#BrokenBarrierException_E@ is thrown. If any thread is @B_java#util#concurrent#BrokenBarrierException_E@ and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state.", "history": "Added in API level 1", "FullName": "public int await ()"}, "getNumberWaiting()": {"Returns": [["int", "the number of parties currently blocked in @B_java#util#concurrent#CyclicBarrier#await_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of parties currently waiting at the barrier. This method is primarily useful for debugging and assertions.", "history": "Added in API level 1", "FullName": "public int getNumberWaiting ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.CyclicBarrier", "ClassDesc": "A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. CyclicBarriers are useful in programs involving a fixed sized party of threads that must occasionally wait for each other. The barrier is called cyclic because it can be re-used after the waiting threads are released. A CyclicBarrier supports an optional @B_java#lang#Runnable_E@ command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This barrier action is useful for updating shared-state before any of the parties continue. @B_java#lang#Runnable_E@ barrier action is executed and merges the rows. If the merger determines that a solution has been found then done() will return true and each worker will terminate. If the barrier action does not rely on the parties being suspended when it is executed, then any of the threads in the party could execute that action when it is released. To facilitate this, each invocation of @B_java#util#concurrent#CyclicBarrier#await_E@ returns the arrival index of that thread at the barrier. You can then choose which thread should execute the barrier action, for example: The CyclicBarrier uses an all-or-none breakage model for failed synchronization attempts: If a thread leaves a barrier point prematurely because of interruption, failure, or timeout, all other threads waiting at that barrier point will also leave abnormally via @B_java#util#concurrent#BrokenBarrierException_E@ (or @B_java#lang#InterruptedException_E@ if they too were interrupted at about the same time). Memory consistency effects: Actions in a thread prior to calling await() await() in other threads."}