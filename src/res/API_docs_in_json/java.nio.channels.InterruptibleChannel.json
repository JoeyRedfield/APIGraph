{"Functions": {"close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. Any thread currently blocked in an I/O operation upon this channel will receive an @B_java#nio#channels#AsynchronousCloseException_E@. This method otherwise behaves exactly as specified by the @B_java#nio#channels#Channel#close_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.InterruptibleChannel", "ClassDesc": "A channel that can be asynchronously closed and interrupted. A channel that implements this interface is @B_java#nio#channels#InterruptibleChannel#close_E@ method. This will cause the blocked thread to receive an @B_java#nio#channels#AsynchronousCloseException_E@. A channel that implements this interface is also @B_java#lang#Thread#interrupt_E@ method. This will cause the channel to be closed, the blocked thread to receive a @B_java#nio#channels#ClosedByInterruptException_E@, and the blocked thread's interrupt status to be set. If a thread's interrupt status is already set and it invokes a blocking I/O operation upon a channel then the channel will be closed and the thread will immediately receive a @B_java#nio#channels#ClosedByInterruptException_E@; its interrupt status will remain set. A channel supports asynchronous closing and interruption if, and only if, it implements this interface. This can be tested at runtime, if necessary, via the"}