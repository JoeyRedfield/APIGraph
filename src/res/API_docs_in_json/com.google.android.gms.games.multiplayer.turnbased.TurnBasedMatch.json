{"Functions": {"getTurnStatus()": {"Returns": [["", "The turn status of the match for the current player. One of @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_TURN_STATUS_INVITED_E@, @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_TURN_STATUS_MY_TURN_E@, @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_TURN_STATUS_THEIR_TURN_E@, or @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_TURN_STATUS_COMPLETE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract int getTurnStatus ()"}, "isLocallyModified()": {"Returns": [["", "Whether this match has local modifications or not."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether or not this match has been locally modified. If this is true, the local device has match state which has not successfully synced to the server yet. In this state, further mutations to the match will fail with a status of @B_com#google#android#gms#games#GamesStatusCodes#STATUS_MATCH_ERROR_LOCALLY_MODIFIED_E@.", "history": "", "FullName": "public abstract boolean isLocallyModified ()"}, "getMatchId()": {"Returns": [["", "The ID of this Match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getMatchId ()"}, "getAvailableAutoMatchSlots()": {"Returns": [["", "The maximum number of additional players that can be added to this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of available automatch slots for this match. If automatch criteria were not specified during match creation, or if all slots have been filled, this will return 0.", "history": "", "FullName": "public abstract int getAvailableAutoMatchSlots ()"}, "canRematch()": {"Returns": [["", "Whether or not this match can be rematched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether or not this match can be rematched. This will return true when the match has complete and has not already been rematched.", "history": "", "FullName": "public abstract boolean canRematch ()"}, "getGame()": {"Returns": [["", "The @B_com#google#android#gms#games#Game_E@ object that owns this Match. Note that this should not be cached separately from the Match itself, since the data underlying this object may change."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract Game getGame ()"}, "getDescriptionParticipant()": {"Returns": [["", "The participant representing the primary opponent in the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the participant representing the primary opponent in the match. Note that this will return null if there is no primary opponent. This could happen if an automatch slot has not been filled.", "history": "", "FullName": "public abstract Participant getDescriptionParticipant ()"}, "getParticipant(java.lang.String)": {"Returns": [["", "The participant corresponding to the given ID."]], "Parameters": [["String", "Match-local ID of the participant to retrieve status for."]], "Throws": [["", "IllegalStateException} if the participant is not a participant in this match."]], "SeeAlso": [], "Permissions": [], "Description": "Get a participant in a match by its ID. Note that the participant ID must correspond to a participant in this match, or this method will throw an exception.", "history": "", "FullName": "public abstract Participant getParticipant (String participantId)"}, "getData()": {"Returns": [["", "Byte array representing the current (game-specific) match state data."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current (game-specific) data for this match.", "history": "", "FullName": "public abstract byte[] getData ()"}, "getPreviousMatchData()": {"Returns": [["", "Byte array of data from the previous match of a rematch, or null if not available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match data from the previous match, if available. Note that this is only provided on the first turn of a rematched match.", "history": "", "FullName": "public abstract byte[] getPreviousMatchData ()"}, "getDescriptionParticipantId()": {"Returns": [["", "The participant ID of the primary opponent in the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ID of another participant in the match that can be used when describing the participants the user is playing with. For example, in a four player match this might be used to state \"Martha (and 2 others)\". Note that this will return null if there is no primary opponent. This could happen if an automatch slot has not been filled.", "history": "", "FullName": "public abstract String getDescriptionParticipantId ()"}, "getPendingParticipantId()": {"Returns": [["", "The ID of the participant that is considered pending, if any. Returns null if no participant is pending."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ID of the participant that is considered pending. If no participant is considered pending (ie, the match is over, etc), this function will return null.", "history": "", "FullName": "public abstract String getPendingParticipantId ()"}, "getCreationTimestamp()": {"Returns": [["", "The server timestamp at which the match was created."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract long getCreationTimestamp ()"}, "getAutoMatchCriteria()": {"Returns": [["", "A bundle containing the automatch criteria for this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the automatch criteria used to create or join this match, if any. May be null if the match has no automatch properties.", "history": "", "FullName": "public abstract Bundle getAutoMatchCriteria ()"}, "getStatus()": {"Returns": [["", "The current status of the match. One of @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_STATUS_AUTO_MATCHING_E@, @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_STATUS_ACTIVE_E@, @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_STATUS_COMPLETE_E@, @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_STATUS_EXPIRED_E@, or @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_STATUS_CANCELED_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract int getStatus ()"}, "getRematchId()": {"Returns": [["", "The match ID of the rematch, or null if no rematch exists."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match ID of the rematch that was created from this match, if any. This will only be non-null if a rematch has been created.", "history": "", "FullName": "public abstract String getRematchId ()"}, "getMatchNumber()": {"Returns": [["", "The match sequence number for this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match sequence number for this match. This number starts at 1, and increases every time a rematch is created.", "history": "", "FullName": "public abstract int getMatchNumber ()"}, "getCreatorId()": {"Returns": [["", "The ID of the participant who created this Match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getCreatorId ()"}, "getDescription()": {"Returns": [["", "Description of this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getDescription ()"}, "getParticipantId(java.lang.String)": {"Returns": [["", "The participant ID corresponding to given player, or null if none found."]], "Parameters": [["String", "Player ID to find participant ID for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the participant ID for a given player. This will only return a non-null ID if the player is actually a participant in the match and that player's identity is visible to the current player. Note that this will always return non-null for the current player. To find the player ID for the current player, use @B_com#google#android#gms#games#Players#getCurrentPlayerId_E@.", "history": "", "FullName": "public abstract String getParticipantId (String playerId)"}, "getVersion()": {"Returns": [["", "The current version of the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current version of the match.", "history": "", "FullName": "public abstract int getVersion ()"}, "getLastUpdatedTimestamp()": {"Returns": [["", "The server timestamp at which the match was last modified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the timestamp at which the match was last modified.", "history": "", "FullName": "public abstract long getLastUpdatedTimestamp ()"}, "getDescription(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the match description into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public abstract void getDescription (CharArrayBuffer dataOut)"}, "getLastUpdaterId()": {"Returns": [["", "The ID of the last participant who updated this Match object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ID of the participant who updated the match most recently.", "history": "", "FullName": "public abstract String getLastUpdaterId ()"}, "getParticipantIds()": {"Returns": [["", "The IDs of the participants in this match. These are returned in the participant order of the match. Note that these are not stable across matches."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the IDs of the participants of the given match.", "history": "", "FullName": "public abstract ArrayList<String> getParticipantIds ()"}, "getVariant()": {"Returns": [["", "Variant specified for this match, if any. A variant is an optional developer-controlled parameter describing the type of game to play, ranging from 1-1023 (inclusive). If this match had no variant specified, returns @B_com#google#android#gms#games#multiplayer#turnbased#TurnBasedMatch#MATCH_VARIANT_DEFAULT_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract int getVariant ()"}, "getParticipantStatus(java.lang.String)": {"Returns": [["", "The current status of the participant in this match. One of @B_com#google#android#gms#games#multiplayer#Participant#STATUS_INVITED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_JOINED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_DECLINED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_LEFT_E@, or @B_com#google#android#gms#games#multiplayer#Participant#STATUS_NOT_INVITED_YET_E@."]], "Parameters": [["String", "Match-local ID of the participant to retrieve status for."]], "Throws": [["", "IllegalStateException} if the participant is not a participant in this match."]], "SeeAlso": [], "Permissions": [], "Description": "Get the status of a participant in a match. Note that the participant ID must correspond to a participant in this match, or this method will throw an exception.", "history": "", "FullName": "public abstract int getParticipantStatus (String participantId)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch", "ClassDesc": "Data interface for turn-based specific match functionality."}