{"Functions": {"getPattern()": {"Returns": [["@B_java#lang#String_E@", "the pattern searched for"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern for which", "history": "Added in API level 24", "FullName": "public String getPattern ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the iteration. Search will begin at the start of the text string if a forward iteration is initiated before a backwards iteration. Otherwise if a backwards iteration is initiated before a forwards iteration, the search will begin at the end of the text string.", "history": "Added in API level 24", "FullName": "public void reset ()"}, "setTarget(java.text.CharacterIterator)": {"Returns": [], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: new text iterator to look for match,"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the target text to be searched. Text iteration will then begin at the start of the text string. This method is useful if you want to reuse an iterator to search within a different body of text.", "history": "Added in API level 24", "FullName": "public void setTarget (CharacterIterator text)"}, "setIndex(int)": {"Returns": [], "Parameters": [["int", "int: position from which to start the next search"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position in the target text at which the next search will start. This method clears any previous match.", "history": "Added in API level 24", "FullName": "public void setIndex (int position)"}, "getCollator()": {"Returns": [["@B_android#icu#text#RuleBasedCollator_E@", "@B_android#icu#text#RuleBasedCollator_E@ used by this StringSearch"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator_E@", "@B_android#icu#text#StringSearch#setCollator_E@"], "Permissions": [], "Description": "Gets the @B_android#icu#text#RuleBasedCollator_E@ used for the language rules. Since @B_android#icu#text#RuleBasedCollator_E@, any changes to the @B_android#icu#text#RuleBasedCollator_E@ result should follow with a call to either @B_android#icu#text#StringSearch#reset_E@ or @B_android#icu#text#StringSearch#setCollator_E@ to ensure the correct search behavior.", "history": "Added in API level 24", "FullName": "public RuleBasedCollator getCollator ()"}, "StringSearch(java.lang.String,java.text.CharacterIterator,android.icu.text.RuleBasedCollator)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#text#CharacterIterator_E@", "CharacterIterator: target text to search for pattern."], ["@B_android#icu#text#RuleBasedCollator_E@", "RuleBasedCollator: @B_android#icu#text#RuleBasedCollator_E@ that defines the language rules"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0"]], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator_E@"], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules defined in the argument collator to search for argument pattern in the argument target text. No @B_android#icu#text#BreakIterator_E@s are set to test for logical matches.", "history": "Added in API level 24", "FullName": "public StringSearch (String pattern, CharacterIterator target, RuleBasedCollator collator)"}, "setCollator(android.icu.text.RuleBasedCollator)": {"Returns": [], "Parameters": [["@B_android#icu#text#RuleBasedCollator_E@", "RuleBasedCollator: to use for this StringSearch"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when collator is null"]], "SeeAlso": ["@B_android#icu#text#StringSearch#getCollator_E@"], "Permissions": [], "Description": "Sets the @B_android#icu#text#RuleBasedCollator_E@ to be used for language-specific searching. The iterator's position will not be changed by this method.", "history": "Added in API level 24", "FullName": "public void setCollator (RuleBasedCollator collator)"}, "handleNext(int)": {"Returns": [["int", "index at which the match starts, else if match is not found @B_android#icu#text#SearchIterator#DONE_E@ is returned"]], "Parameters": [["int", "int: The index in the target text at which the search should start."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Abstract method which subclasses override to provide the mechanism for finding the next match in the target text. This allows different subclasses to provide different search algorithms. If a match is found, the implementation should return the index at which the match starts and should call @B_android#icu#text#SearchIterator#setMatchLength_E@ with the number of characters in the target text that make up the match. If no match is found, the method should return @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "protected int handleNext (int position)"}, "isCanonical()": {"Returns": [["boolean", "true if canonical matches is set, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#StringSearch#setCanonical_E@"], "Permissions": [], "Description": "Determines whether canonical matches (option 1, as described in the class documentation) is set. See setCanonical(boolean) for more information.", "history": "Added in API level 24", "FullName": "public boolean isCanonical ()"}, "StringSearch(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#lang#String_E@", "String: target text to search for pattern."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0. ClassCastException thrown if the collator for the default locale is not a RuleBasedCollator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules and break iterator rules defined in the default locale to search for argument pattern in the argument target text.", "history": "added in API level 24", "FullName": "public StringSearch (String pattern, String target)"}, "StringSearch(java.lang.String,java.text.CharacterIterator,android.icu.text.RuleBasedCollator,android.icu.text.BreakIterator)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#text#CharacterIterator_E@", "CharacterIterator: target text to search for pattern."], ["@B_android#icu#text#RuleBasedCollator_E@", "RuleBasedCollator: @B_android#icu#text#RuleBasedCollator_E@ that defines the language rules"], ["@B_android#icu#text#BreakIterator_E@", "BreakIterator: A @B_android#icu#text#BreakIterator_E@ that is used to determine the boundaries of a logical match. This argument can be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0"]], "SeeAlso": ["@B_android#icu#text#BreakIterator_E@", "@B_android#icu#text#RuleBasedCollator_E@"], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules defined in the argument collator to search for argument pattern in the argument target text. The argument breakiter is used to define logical matches. See super class documentation for more details on the use of the target text and @B_android#icu#text#BreakIterator_E@.", "history": "Added in API level 24", "FullName": "public StringSearch (String pattern, CharacterIterator target, RuleBasedCollator collator, BreakIterator breakiter)"}, "StringSearch(java.lang.String,java.text.CharacterIterator,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#text#CharacterIterator_E@", "CharacterIterator: target text to search for pattern."], ["@B_java#util#Locale_E@", "Locale: locale to use for language and break iterator rules"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0. ClassCastException thrown if the collator for the specified locale is not a RuleBasedCollator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules and break iterator rules defined in the argument locale to search for argument pattern in the argument target text.", "history": "Added in API level 24", "FullName": "public StringSearch (String pattern, CharacterIterator target, Locale locale)"}, "StringSearch(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#lang#String_E@", "String: target text to search for pattern."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0. ClassCastException thrown if the collator for the default locale is not a RuleBasedCollator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules and break iterator rules defined in the default locale to search for argument pattern in the argument target text.", "history": "Added in API level 24", "FullName": "public StringSearch (String pattern, String target)"}, "handlePrevious(int)": {"Returns": [["int", "index at which the match starts, else if match is not found @B_android#icu#text#SearchIterator#DONE_E@ is returned"]], "Parameters": [["int", "int: The index in the target text at which the search should start."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Abstract method which subclasses override to provide the mechanism for finding the previous match in the target text. This allows different subclasses to provide different search algorithms. If a match is found, the implementation should return the index at which the match starts and should call @B_android#icu#text#SearchIterator#setMatchLength_E@ with the number of characters in the target text that make up the match. If no match is found, the method should return @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "protected int handlePrevious (int position)"}, "setCanonical(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: flag indicator if canonical matches are allowed"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#StringSearch#isCanonical_E@"], "Permissions": [], "Description": "Set the canonical match mode. See class documentation for details. The default setting for this property is false.", "history": "Added in API level 24", "FullName": "public void setCanonical (boolean allowCanonical)"}, "setPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: for searching"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown if pattern is null or of length 0"]], "SeeAlso": ["@B_android#icu#text#StringSearch#getPattern_E@"], "Permissions": [], "Description": "Set the pattern to search for. The iterator's position will not be changed by this method.", "history": "Added in API level 24", "FullName": "public void setPattern (String pattern)"}, "StringSearch(java.lang.String,java.text.CharacterIterator,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: text to look for."], ["@B_java#text#CharacterIterator_E@", "CharacterIterator: target text to search for pattern."], ["@B_android#icu#util#ULocale_E@", "ULocale: locale to use for language and break iterator rules"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0. ClassCastException thrown if the collator for the specified locale is not a RuleBasedCollator."]], "SeeAlso": ["@B_android#icu#text#BreakIterator_E@", "@B_android#icu#text#RuleBasedCollator_E@", "@B_android#icu#text#SearchIterator_E@"], "Permissions": [], "Description": "Initializes the iterator to use the language-specific rules and break iterator rules defined in the argument locale to search for argument pattern in the argument target text. See super class documentation for more details on the use of the target text and @B_android#icu#text#BreakIterator_E@.", "history": "Added in API level 24", "FullName": "public StringSearch (String pattern, CharacterIterator target, ULocale locale)"}, "getIndex()": {"Returns": [["int", "current index in the text being searched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current index in the text being searched. If the iteration has gone past the end of the text (or past the beginning for a backwards search), @B_android#icu#text#SearchIterator#DONE_E@ is returned.", "history": "Added in API level 24", "FullName": "public int getIndex ()"}}, "Inheritance": ["@B_android#icu#text#SearchIterator_E@"], "ClassName": "android.icu.text.StringSearch", "ClassDesc": "@B_android#icu#text#SearchIterator_E@ that provides language-sensitive text searching based on the comparison rules defined in a @B_android#icu#text#RuleBasedCollator_E@ object. StringSearch ensures that language eccentricity can be handled, e.g. for the German collator, characters \u00df and SS will be matched if case is chosen to be ignored. See the There are 2 match options for selection: Let S' be the sub-string of a text string S between the offsets start and end [start, end]. A pattern string P matches a text string S at the offsets [start, end] if This search has APIs similar to that of other text iteration mechanisms such as the break iterators in @B_android#icu#text#BreakIterator_E@. Using these APIs, it is easy to scan through text looking for all occurrences of a given pattern. This search iterator allows changing of direction by calling a @B_android#icu#text#StringSearch#reset_E@ followed by a @B_android#icu#text#SearchIterator#next_E@ or @B_android#icu#text#SearchIterator#previous_E@. Though a direction change can occur without calling @B_android#icu#text#StringSearch#reset_E@ first, this operation comes with some speed penalty. Match results in the forward direction will match the result matches in the backwards direction in the reverse order @B_android#icu#text#SearchIterator_E@ provides APIs to specify the starting position within the text string to be searched, e.g. @B_android#icu#text#SearchIterator#setIndex_E@, @B_android#icu#text#SearchIterator#preceding_E@ and @B_android#icu#text#SearchIterator#following_E@. Since the starting position will be set as it is specified, please take note that there are some danger points at which the search may render incorrect results: In the midst of a substring that requires normalization. If the following match is to be found, the position should not be the second character which requires swapping with the preceding character. Vice versa, if the preceding match is to be found, the position to search from should not be the first character which requires swapping with the next character. E.g certain Thai and Lao characters require swapping. If a following pattern match is to be found, any position within a contracting sequence except the first will fail. Vice versa if a preceding pattern match is to be found, an invalid starting point would be any character within a contracting sequence except the last. A @B_android#icu#text#BreakIterator_E@ can be used if only matches at logical breaks are desired. Using a @B_android#icu#text#BreakIterator_E@ will only give you results that exactly matches the boundaries given by the @B_android#icu#text#BreakIterator_E@. For instance the pattern \"e\" will not be found in the string \"\u00e9\" if a character break iterator is used. Options are provided to handle overlapping matches. E.g. In English, overlapping matches produces the result 0 and 2 for the pattern \"abab\" in the text \"ababab\", where mutually exclusive matches only produces the result of 0. Options are also provided to implement \"asymmetric search\" as described in Though collator attributes will be taken into consideration while performing matches, there are no APIs here for setting and getting the attributes. These attributes can be set by getting the collator from @B_android#icu#text#StringSearch#getCollator_E@ and using the APIs in @B_android#icu#text#RuleBasedCollator_E@. Lastly to update @B_android#icu#text#StringSearch#reset_E@ has to be called. Restriction: Currently there are no composite characters that consists of a character with combining class > 0 before a character with combining class == 0. However, if such a character exists in the future, Consult the @B_android#icu#text#SearchIterator_E@ documentation for information on and examples of how to use instances of this class to implement text searching. Note,"}