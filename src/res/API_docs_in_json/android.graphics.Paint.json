{"Functions": {"hasGlyph(java.lang.String)": {"Returns": [["boolean", "true if the typeface has a glyph for the string"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to test whether there is glyph support"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine whether the typeface set on the paint has a glyph supporting the string. The simplest case is when the string contains a single character, in which this method determines whether the font has the character. In the case of multiple characters, the method returns true if there is a single glyph representing the ligature. For example, if the input is a pair of regional indicator symbols, determine whether there is an emoji flag for the pair. Finally, if the string contains a variation selector, the method only returns true if the fonts contains a glyph specific to that variation. Checking is done on the entire fallback chain, not just the immediate font referenced.", "history": "Added in API level 23", "FullName": "public boolean hasGlyph (String string)"}, "getRunAdvance(char[],int,int,int,int,boolean,int)": {"Returns": [["float", "width measurement between start and offset"]], "Parameters": [["char[]", "char: the text to measure. Cannot be null."], ["int", "int: the index of the start of the range to measure"], ["int", "int: the index + 1 of the end of the range to measure"], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index + 1 of the end of the shaping context"], ["boolean", "boolean: whether the run is in RTL direction"], ["int", "int: index of caret position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure cursor position within a run of text. The run of text includes the characters from start to end in the text. In addition, the range contextStart to contextEnd is used as context for the purpose of complex text shaping, such as Arabic text potentially shaped differently based on the text next to it. All text outside the range contextStart..contextEnd is ignored. The text between start and end will be laid out to be measured. The returned width measurement is the advance from start to offset. It is generally a positive value, no matter the direction of the run. If offset == end, the return value is simply the width of the whole run from start to end. Ligatures are formed for characters in the range start..end (but not for start..contextStart or end..contextEnd). If offset points to a character in the middle of such a formed ligature, but at a grapheme cluster boundary, the return value will also reflect an advance in the middle of the ligature. See @B_android#graphics#Paint#getOffsetForAdvance_E@ for more discussion of grapheme cluster boundaries. The direction of the run is explicitly specified by isRtl. Thus, this method is suitable only for runs of a single direction. All indices are relative to the start of text. Further, 0 <= contextStart <= start <= offset <= end <= contextEnd <= text.length must hold on entry.", "history": "Added in API level 23", "FullName": "public float getRunAdvance (char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)"}, "getTextAlign()": {"Returns": [["@B_android#graphics#Paint#Align_E@", "the paint's Align value for drawing text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.", "history": "Added in API level 1", "FullName": "public Paint.Align getTextAlign ()"}, "Paint(int)": {"Returns": [], "Parameters": [["int", "int: initial flag bits, as if they were passed via setFlags()."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new paint with the specified flags. Use setFlags() to change these after the paint is created.", "history": "Added in API level 1", "FullName": "public Paint (int flags)"}, "setBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: May be null. The blend mode to be installed in the paint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#BlendMode_E@"], "Permissions": [], "Description": "Set or clear the blend mode. A blend mode defines how source pixels (generated by a drawing command) are composited with the destination pixels (content of the render target). Pass null to clear any previous blend mode.", "history": "Added in API level 29", "FullName": "public void setBlendMode (BlendMode blendmode)"}, "getFontFeatureSettings()": {"Returns": [["@B_java#lang#String_E@", "the paint's currently set font feature settings. Default is null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setFontFeatureSettings_E@"], "Permissions": [], "Description": "Returns the font feature settings. The format is the same as the CSS font-feature-settings attribute:", "history": "Added in API level 21", "FullName": "public String getFontFeatureSettings ()"}, "measureText(java.lang.CharSequence, int, int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to measure"], ["int", "int: The index of the first character to start measuring"], ["int", "int: 1 beyond the index of the last character to measure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "added in API level 1", "FullName": "public float measureText (CharSequence text, int start, int end)"}, "setRasterizer(android.graphics.Rasterizer)": {"Returns": [["@B_android#graphics#Rasterizer_E@", "rasterizer"]], "Parameters": [["@B_android#graphics#Rasterizer_E@", "Rasterizer: May be null. The new rasterizer to be installed in the paint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rasterizer is not supported by either the HW or PDF backends. Set or clear the rasterizer object. Pass null to clear any previous rasterizer. As a convenience, the parameter passed is also returned.", "history": "Added in API level 1", "FullName": "Rasterizer setRasterizer (Rasterizer rasterizer)"}, "setARGB(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The new alpha component (0..255) of the paint's color."], ["int", "int: The new red component (0..255) of the paint's color."], ["int", "int: The new green component (0..255) of the paint's color."], ["int", "int: The new blue component (0..255) of the paint's color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to setColor(), that takes a,r,g,b and constructs the color int", "history": "Added in API level 1", "FullName": "public void setARGB (int a, int r, int g, int b)"}, "isLinearText()": {"Returns": [["boolean", "true if the lineartext bit is set in the paint's flags"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public final boolean isLinearText ()"}, "getAlpha()": {"Returns": [["int", "the alpha component of the paint's color."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to getColor() that just returns the color's alpha value. This is the same as calling getColor() >>> 24. It always returns a value between 0 (completely transparent) and 255 (completely opaque).", "history": "Added in API level 1", "FullName": "public int getAlpha ()"}, "setTextScaleX(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's scale in X for drawing/measuring text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's horizontal scale factor for text. The default value is 1.0. Values > 1.0 will stretch the text wider. Values < 1.0 will stretch the text narrower.", "history": "Added in API level 1", "FullName": "public void setTextScaleX (float scaleX)"}, "equalsForTextMeasurement(android.graphics.Paint)": {"Returns": [["boolean", "true if the other @B_android#graphics#Paint_E@ has the same effect on text measurement."]], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: A @B_android#graphics#Paint_E@ object. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true of the passed @B_android#graphics#Paint_E@ will have the same effect on text measurement", "history": "Added in API level 28", "FullName": "public boolean equalsForTextMeasurement (Paint other)"}, "getFontMetricsInt()": {"Returns": [["@B_android#graphics#Paint#FontMetricsInt_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Paint.FontMetricsInt getFontMetricsInt ()"}, "getShader()": {"Returns": [["@B_android#graphics#Shader_E@", "the paint's shader (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's shader object.", "history": "Added in API level 1", "FullName": "public Shader getShader ()"}, "getRasterizer()": {"Returns": [["@B_android#graphics#Rasterizer_E@", "the paint's rasterizer (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rasterizer is not supported by either the HW or PDF backends. Get the paint's rasterizer (or null). The raster controls/modifies how paths/text are turned into alpha masks.", "history": "Added in API level 1", "FullName": "Rasterizer getRasterizer ()"}, "measureText(java.lang.String)": {"Returns": [["float", "The width of the text"]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "Added in API level 1", "FullName": "public float measureText (String text)"}, "setElegantTextHeight(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set the paint's elegant metrics flag for drawing text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's elegant height metrics flag. This setting selects font variants that have not been compacted to fit Latin-based vertical metrics, and also increases top and bottom bounds to provide more space.", "history": "Added in API level 21", "FullName": "public void setElegantTextHeight (boolean elegant)"}, "getTextScaleX()": {"Returns": [["float", "the paint's scale factor in X for drawing/measuring text"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's horizontal scale factor for text. The default value is 1.0.", "history": "Added in API level 1", "FullName": "public float getTextScaleX ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: set the alpha component [0..255] of the paint's color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to setColor(), that only assigns the color's alpha value, leaving its r,g,b values unchanged. Results are undefined if the alpha value is outside of the range [0..255]", "history": "Added in API level 1", "FullName": "public void setAlpha (int a)"}, "setFilterBitmap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the FILTER_BITMAP_FLAG bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.", "history": "Added in API level 1", "FullName": "public void setFilterBitmap (boolean filter)"}, "ascent()": {"Returns": [["float", "the distance above (negative) the baseline (ascent) based on the current typeface and text size."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the distance above (negative) the baseline (ascent) based on the current typeface and text size. Note that this is the ascent of the main typeface, and actual text rendered may need a larger ascent because fallback fonts may get used in rendering the text.", "history": "Added in API level 1", "FullName": "public float ascent ()"}, "breakText(java.lang.CharSequence,int,int,boolean,float,float[])": {"Returns": [["int", "The number of chars that were measured. Will always be <= abs(end - start)."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to measure. Cannot be null."], ["int", "int: The offset into text to begin measuring at"], ["int", "int: The end of the text slice to measure."], ["boolean", "boolean: If true, measure forwards, starting at start. Otherwise, measure backwards, starting with end."], ["float", "float: The maximum width to accumulate."], ["float[]", "float: Optional. If not null, returns the actual width measured."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.", "history": "Added in API level 1", "FullName": "public int breakText (CharSequence text, int start, int end, boolean measureForwards, float maxWidth, float[] measuredWidth)"}, "getShadowLayerColor()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Returns the color of the shadow layer.", "history": "Added in API level 29", "FullName": "public int getShadowLayerColor ()"}, "breakText(char[],int,int,float,float[])": {"Returns": [["int", "The number of chars that were measured. Will always be <= abs(count)."]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The offset into text to begin measuring at"], ["int", "int: The number of maximum number of entries to measure. If count is negative, then the characters are measured in reverse order."], ["float", "float: The maximum width to accumulate."], ["float[]", "float: Optional. If not null, returns the actual width measured."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.", "history": "Added in API level 1", "FullName": "public int breakText (char[] text, int index, int count, float maxWidth, float[] measuredWidth)"}, "getTextWidths(char[],int,int,float[])": {"Returns": [["int", "the actual number of widths returned."]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The index of the first char to to measure"], ["int", "int: The number of chars starting with index to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as count."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "Added in API level 1", "FullName": "public int getTextWidths (char[] text, int index, int count, float[] widths)"}, "breakText(java.lang.String,boolean,float,float[])": {"Returns": [["int", "The number of chars that were measured. Will always be <= abs(count)."]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."], ["boolean", "boolean: If true, measure forwards, starting with the first character in the string. Otherwise, measure backwards, starting with the last character in the string."], ["float", "float: The maximum width to accumulate."], ["float[]", "float: Optional. If not null, returns the actual width measured."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.", "history": "Added in API level 1", "FullName": "public int breakText (String text, boolean measureForwards, float maxWidth, float[] measuredWidth)"}, "isSubpixelText()": {"Returns": [["boolean", "true if the subpixel bit is set in the paint's flags"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set", "history": "Added in API level 1", "FullName": "public final boolean isSubpixelText ()"}, "getStartHyphenEdit()": {"Returns": [["int", "the current starting hyphen edit value Value is @B_android#graphics#Paint#START_HYPHEN_EDIT_NO_EDIT_E@, @B_android#graphics#Paint#START_HYPHEN_EDIT_INSERT_HYPHEN_E@, or @B_android#graphics#Paint#START_HYPHEN_EDIT_INSERT_ZWJ_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setStartHyphenEdit_E@"], "Permissions": [], "Description": "Get the current value of start hyphen edit. The default value is 0 which is equivalent to @B_android#graphics#Paint#START_HYPHEN_EDIT_NO_EDIT_E@.", "history": "Added in API level 29", "FullName": "public int getStartHyphenEdit ()"}, "getTextBounds(char[],int,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["char[]", "char: array of chars to measure and return their unioned bounds"], ["int", "int: index of the first char in the array to measure"], ["int", "int: the number of chars, beginning at index, to measure"], ["@B_android#graphics#Rect_E@", "Rect: returns the unioned bounds of all the text. Must be allocated by the caller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0).", "history": "Added in API level 1", "FullName": "public void getTextBounds (char[] text, int index, int count, Rect bounds)"}, "setStrokeJoin(android.graphics.Paint.Join)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint#Join_E@", "Paint.Join: set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's Join.", "history": "Added in API level 1", "FullName": "public void setStrokeJoin (Paint.Join join)"}, "getTextLocale()": {"Returns": [["@B_java#util#Locale_E@", "the paint's primary Locale used for drawing text, never null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the text's primary Locale. Note that this is not all of the locale-related information Paint has. Use @B_android#graphics#Paint#getTextLocales_E@ to get the complete list.", "history": "Added in API level 17", "FullName": "public Locale getTextLocale ()"}, "setFlags(int)": {"Returns": [], "Parameters": [["int", "int: The new flag bits for the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's flags. Use the Flag enum to specific flag values.", "history": "Added in API level 1", "FullName": "public void setFlags (int flags)"}, "setTypeface(android.graphics.Typeface)": {"Returns": [["@B_android#graphics#Typeface_E@", "typeface"]], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: May be null. The typeface to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the typeface object. Pass null to clear any previous typeface. As a convenience, the parameter passed is also returned.", "history": "Added in API level 1", "FullName": "public Typeface setTypeface (Typeface typeface)"}, "setTextAlign(android.graphics.Paint.Align)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint#Align_E@", "Paint.Align: set the paint's Align value for drawing text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.", "history": "Added in API level 1", "FullName": "public void setTextAlign (Paint.Align align)"}, "setStyle(android.graphics.Paint.Style)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint#Style_E@", "Paint.Style: The new style to set in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes Fill).", "history": "Added in API level 1", "FullName": "public void setStyle (Paint.Style style)"}, "getTextWidths(java.lang.String, float[])": {"Returns": [["int", "the number of code units in the specified text."]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as the text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "added in API level 1", "FullName": "public int getTextWidths (String text, float[] widths)"}, "getTypeface()": {"Returns": [["@B_android#graphics#Typeface_E@", "the paint's typeface (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text.", "history": "Added in API level 1", "FullName": "public Typeface getTypeface ()"}, "getTextWidths(java.lang.CharSequence,int,int,float[])": {"Returns": [["int", "the actual number of widths returned."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to measure. Cannot be null."], ["int", "int: The index of the first char to to measure"], ["int", "int: The end of the text slice to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as (end - start)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "Added in API level 1", "FullName": "public int getTextWidths (CharSequence text, int start, int end, float[] widths)"}, "measureText(char[],int,int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The index of the first character to start measuring"], ["int", "int: THe number of characters to measure, beginning with start"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "Added in API level 1", "FullName": "public float measureText (char[] text, int index, int count)"}, "getStrokeWidth()": {"Returns": [["float", "the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canvas's matrix.", "history": "Added in API level 1", "FullName": "public float getStrokeWidth ()"}, "setShader(android.graphics.Shader)": {"Returns": [["@B_android#graphics#Shader_E@", "shader"]], "Parameters": [["@B_android#graphics#Shader_E@", "Shader: May be null. the new shader to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the shader object. Pass null to clear any previous shader. As a convenience, the parameter passed is also returned.", "history": "Added in API level 1", "FullName": "public Shader setShader (Shader shader)"}, "getXfermode()": {"Returns": [["@B_android#graphics#Xfermode_E@", "the paint's transfer mode (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's transfer mode object.", "history": "Added in API level 1", "FullName": "public Xfermode getXfermode ()"}, "getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)": {"Returns": [["float", "width measurement between start and offset"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to measure. Cannot be null."], ["int", "int: the index of the start of the range to measure"], ["int", "int: the index + 1 of the end of the range to measure"], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index + 1 of the end of the shaping context"], ["boolean", "boolean: whether the run is in RTL direction"], ["int", "int: index of caret position"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getRunAdvance_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public float getRunAdvance (CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)"}, "breakText(char[], int, int, float, float[])": {"Returns": [["int", "The number of chars that were measured. Will always be <= abs(count)."]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The offset into text to begin measuring at"], ["int", "int: The number of maximum number of entries to measure. If count is negative, then the characters are measured in reverse order."], ["float", "float: The maximum width to accumulate."], ["float[]", "float: Optional. If not null, returns the actual width measured."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.", "history": "added in API level 1", "FullName": "public int breakText (char[] text, int index, int count, float maxWidth, float[] measuredWidth)"}, "setWordSpacing(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's extra word-spacing for drawing text in pixels. This units of this value are pixels."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getWordSpacing_E@"], "Permissions": [], "Description": "Set the paint's extra word-spacing for text. Increases the white space width between words with the given amount of pixels. The default value is 0.", "history": "Added in API level 29", "FullName": "public void setWordSpacing (float wordSpacing)"}, "descent()": {"Returns": [["float", "the distance below (positive) the baseline (descent) based on the current typeface and text size."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the distance below (positive) the baseline (descent) based on the current typeface and text size. Note that this is the descent of the main typeface, and actual text rendered may need a larger descent because fallback fonts may get used in rendering the text.", "history": "Added in API level 1", "FullName": "public float descent ()"}, "setEndHyphenEdit(int)": {"Returns": [], "Parameters": [["int", "int: a end hyphen edit value. Value is @B_android#graphics#Paint#END_HYPHEN_EDIT_NO_EDIT_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_MAQAF_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN_E@, or @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getEndHyphenEdit_E@"], "Permissions": [], "Description": "Set a end hyphen edit on the paint. By setting end hyphen edit, the measurement and drawing is performed with modifying hyphenation at the end of line. For example, by passing @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_HYPHEN_E@ like as follows, HYPHEN(U+2010) character is appended at the end of line. @B_android#graphics#Paint#END_HYPHEN_EDIT_NO_EDIT_E@.", "history": "Added in API level 29", "FullName": "public void setEndHyphenEdit (int endHyphen)"}, "isElegantTextHeight()": {"Returns": [["boolean", "true if elegant metrics are enabled for text drawing."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the elegant metrics flag.", "history": "Added in API level 21", "FullName": "public boolean isElegantTextHeight ()"}, "setFakeBoldText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the fakeBoldText bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the FAKE_BOLD_TEXT_FLAG bit", "history": "Added in API level 1", "FullName": "public void setFakeBoldText (boolean fakeBoldText)"}, "setMaskFilter(android.graphics.MaskFilter)": {"Returns": [["@B_android#graphics#MaskFilter_E@", "maskfilter"]], "Parameters": [["@B_android#graphics#MaskFilter_E@", "MaskFilter: May be null. The maskfilter to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the maskfilter object. Pass null to clear any previous maskfilter. As a convenience, the parameter passed is also returned.", "history": "Added in API level 1", "FullName": "public MaskFilter setMaskFilter (MaskFilter maskfilter)"}, "getStrokeJoin()": {"Returns": [["@B_android#graphics#Paint#Join_E@", "the paint's Join."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's stroke join type.", "history": "Added in API level 1", "FullName": "public Paint.Join getStrokeJoin ()"}, "setTextSize(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's text size in pixel units."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's text size. This value must be > 0", "history": "Added in API level 1", "FullName": "public void setTextSize (float textSize)"}, "setShadowLayer(float,float,float,int)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed. Can be used to create a blurred shadow underneath text. Support for use with other drawing operations is constrained to the software rendering pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is opaque, or the alpha from the shadow color if not.", "history": "Added in API level 1", "FullName": "public void setShadowLayer (float radius, float dx, float dy, int shadowColor)"}, "getShadowLayerColorLong()": {"Returns": [["long", "the shadow layer's color encoded as a @B_android#annotation#ColorLong_E@."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@", "@B_android#graphics#Color_E@"], "Permissions": [], "Description": "Returns the color of the shadow layer.", "history": "Added in API level 29", "FullName": "public long getShadowLayerColorLong ()"}, "Paint(android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: Existing paint used to initialized the attributes of the new paint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new paint, initialized with the attributes in the specified paint parameter.", "history": "Added in API level 1", "FullName": "public Paint (Paint paint)"}, "isAntiAlias()": {"Returns": [["boolean", "true if the antialias bit is set in the paint's flags."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.", "history": "Added in API level 1", "FullName": "public final boolean isAntiAlias ()"}, "setFontVariationSettings(java.lang.String)": {"Returns": [["boolean", "true if the given settings is effective to at least one font file underlying this typeface. This function also returns true for empty settings string. Otherwise returns false"]], "Parameters": [["@B_java#lang#String_E@", "String: font variation settings. You can pass null or empty string as no variation settings."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If given string is not a valid font variation settings format"]], "SeeAlso": ["@B_android#graphics#Paint#getFontVariationSettings_E@", "@B_android#graphics#fonts#FontVariationAxis_E@"], "Permissions": [], "Description": "Sets TrueType or OpenType font variation settings. The settings string is constructed from multiple pairs of axis tag and style values. The axis tag must contain four ASCII characters and must be wrapped with single quotes (U+0027) or double quotes (U+0022). Axis strings that are longer or shorter than four characters, or contain characters outside of U+0020..U+007E are invalid. If a specified axis name is not defined in the font, the settings will be ignored. Examples, Set font width to 150. Set the font slant to 20 degrees and ask for italic style.", "history": "Added in API level 26", "FullName": "public boolean setFontVariationSettings (String fontVariationSettings)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the dithering bit in flags, false to clear it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster, but higher precision colors are just truncated down (e.g. 8888 -> 565). Dithering tries to distribute the error inherent in this process, to reduce the visual artifacts.", "history": "Added in API level 1", "FullName": "public void setDither (boolean dither)"}, "getFontSpacing()": {"Returns": [["float", "recommend line spacing based on the current typeface and text size."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the recommend line spacing based on the current typeface and text size. Note that this is the value for the main typeface, and actual text rendered may need a larger value because fallback fonts may get used in rendering the text.", "history": "Added in API level 1", "FullName": "public float getFontSpacing ()"}, "measureText(java.lang.String,int,int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."], ["int", "int: The index of the first character to start measuring"], ["int", "int: 1 beyond the index of the last character to measure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "Added in API level 1", "FullName": "public float measureText (String text, int start, int end)"}, "getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)": {"Returns": [["int", "index of offset"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to measure. Cannot be null."], ["int", "int: the index of the start of the range to measure"], ["int", "int: the index + 1 of the end of the range to measure"], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index + 1 of the end of the range to measure"], ["boolean", "boolean: whether the run is in RTL direction"], ["float", "float: width relative to start of run"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getOffsetForAdvance_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public int getOffsetForAdvance (CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)"}, "getTextSkewX()": {"Returns": [["float", "the paint's skew factor in X for drawing text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's horizontal skew factor for text. The default value is 0.", "history": "Added in API level 1", "FullName": "public float getTextSkewX ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [["@B_android#graphics#ColorFilter_E@", "filter"]], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: May be null. The new filter to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the paint's colorfilter, returning the parameter.", "history": "Added in API level 1", "FullName": "public ColorFilter setColorFilter (ColorFilter filter)"}, "setLinearText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the linearText bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setLinearText (boolean linearText)"}, "getTextLocales()": {"Returns": [["@B_android#os#LocaleList_E@", "the paint's LocaleList used for drawing text, never null or empty."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the text locale list.", "history": "Added in API level 24", "FullName": "public LocaleList getTextLocales ()"}, "isFilterBitmap()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setFilterBitmap_E@"], "Permissions": [], "Description": "Whether or not the bitmap filter is activated. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.", "history": "Added in API level 1", "FullName": "public final boolean isFilterBitmap ()"}, "setColor(long)": {"Returns": [], "Parameters": [["long", "long: The new color (including alpha and @B_android#graphics#ColorSpace_E@) to set in the paint."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the color space encoded in the ColorLong is invalid or unknown."]], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's color with a ColorLong. Note that the color is a long with an encoded @B_android#graphics#ColorSpace_E@ as well as alpha and r,g,b. These values are not premultiplied, meaning that alpha can be any value, regardless of the values of r,g,b. See the @B_android#graphics#Color_E@ class for more details.", "history": "Added in API level 29", "FullName": "public void setColor (long color)"}, "Paint()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new paint with default settings.", "history": "Added in API level 1", "FullName": "public Paint ()"}, "getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)": {"Returns": [["float", "the total advance in pixels"]], "Parameters": [["char[]", "char: the text to measure. This value must never be null."], ["int", "int: the index of the first character to measure Value is 0 or greater"], ["int", "int: the number of characters to measure Value is 0 or greater"], ["int", "int: the index of the first character to use for shaping context. Context must cover the measureing target. Value is 0 or greater"], ["int", "int: the number of character to use for shaping context. Context must cover the measureing target. Value is 0 or greater"], ["boolean", "boolean: whether the run is in RTL direction"], ["float[]", "float: array to receive the advances, must have room for all advances. This can be null if only total advance is needed This value may be null."], ["int", "int: the position in advances at which to put the advance corresponding to the character at start Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the character advances of the text. Returns the total advance width for the characters in the run from index for count of chars, and if advances is not null, the advance assigned to each of these characters (java chars). The trailing surrogate in a valid surrogate pair is assigned an advance of 0. Thus the number of returned advances is always equal to count, not to the number of unicode codepoints represented by the run. In the case of conjuncts or combining marks, the total advance is assigned to the first logical character, and the following characters are assigned an advance of 0. This generates the sum of the advances of glyphs for characters in a reordered cluster as the width of the first logical character in the cluster, and 0 for the widths of all other characters in the cluster. In effect, such clusters are treated like conjuncts. The shaping bounds limit the amount of context available outside start and end that can be used for shaping analysis. These bounds typically reflect changes in bidi level or font metrics across which shaping does not occur.", "history": "Added in API level 29", "FullName": "public float getTextRunAdvances (char[] chars, int index, int count, int contextIndex, int contextCount, boolean isRtl, float[] advances, int advancesIndex)"}, "getStrikeThruThickness()": {"Returns": [["float", "the position of the strike-through line in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getStrikeThruPosition_E@", "@B_android#graphics#Paint#setStrikeThruText_E@", "@B_android#graphics#Paint#isStrikeThruText_E@"], "Permissions": [], "Description": "Returns the thickness of the strike-through line in pixels. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getStrikeThruThickness ()"}, "setStrokeWidth(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canvas's matrix.", "history": "Added in API level 1", "FullName": "public void setStrokeWidth (float width)"}, "setStartHyphenEdit(int)": {"Returns": [], "Parameters": [["int", "int: a start hyphen edit value. Value is @B_android#graphics#Paint#START_HYPHEN_EDIT_NO_EDIT_E@, @B_android#graphics#Paint#START_HYPHEN_EDIT_INSERT_HYPHEN_E@, or @B_android#graphics#Paint#START_HYPHEN_EDIT_INSERT_ZWJ_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getStartHyphenEdit_E@"], "Permissions": [], "Description": "Set a start hyphen edit on the paint. By setting start hyphen edit, the measurement and drawing is performed with modifying hyphenation at the start of line. For example, by passing @B_android#graphics#Paint#START_HYPHEN_EDIT_INSERT_HYPHEN_E@ like as follows, HYPHEN(U+2010) character is appended at the start of line. @B_android#graphics#Paint#START_HYPHEN_EDIT_NO_EDIT_E@.", "history": "Added in API level 29", "FullName": "public void setStartHyphenEdit (int startHyphen)"}, "getMaskFilter()": {"Returns": [["@B_android#graphics#MaskFilter_E@", "the paint's maskfilter (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's maskfilter object.", "history": "Added in API level 1", "FullName": "public MaskFilter getMaskFilter ()"}, "setAntiAlias(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the antialias bit in the flags, false to clear it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.", "history": "Added in API level 1", "FullName": "public void setAntiAlias (boolean aa)"}, "getStyle()": {"Returns": [["@B_android#graphics#Paint#Style_E@", "the paint's style setting (Fill, Stroke, StrokeAndFill)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE).", "history": "Added in API level 1", "FullName": "public Paint.Style getStyle ()"}, "getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)": {"Returns": [["int", "the offset of the next position, or -1"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text This value must never be null."], ["int", "int: the start of the context Value is 0 or greater"], ["int", "int: the end of the context Value is 0 or greater"], ["boolean", "boolean: true if the paragraph context is RTL, otherwise false"], ["int", "int: the cursor position to move from Value is 0 or greater"], ["int", "int: how to move the cursor Value is @B_android#graphics#Paint#CURSOR_AFTER_E@, @B_android#graphics#Paint#CURSOR_AT_OR_AFTER_E@, @B_android#graphics#Paint#CURSOR_BEFORE_E@, or @B_android#graphics#Paint#CURSOR_AT_OR_BEFORE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next cursor position in the run. This avoids placing the cursor between surrogates, between characters that form conjuncts, between base characters and combining marks, or within a reordering cluster. ContextStart, contextEnd, and offset are relative to the start of text. The context is the shaping context for cursor movement, generally the bounds of the metric span enclosing the cursor in the direction of movement. If cursorOpt is @B_android#graphics#Paint#CURSOR_AT_E@ and the offset is not a valid cursor position, this returns -1. Otherwise this will never return a value before contextStart or after contextEnd.", "history": "Added in API level 29", "FullName": "public int getTextRunCursor (CharSequence text, int contextStart, int contextEnd, boolean isRtl, int offset, int cursorOpt)"}, "setUnderlineText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the underlineText bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#isUnderlineText_E@", "@B_android#graphics#Paint#getUnderlinePosition_E@", "@B_android#graphics#Paint#getUnderlineThickness_E@"], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit", "history": "Added in API level 1", "FullName": "public void setUnderlineText (boolean underlineText)"}, "getStrokeCap()": {"Returns": [["@B_android#graphics#Paint#Cap_E@", "the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated.", "history": "Added in API level 1", "FullName": "public Paint.Cap getStrokeCap ()"}, "getWordSpacing()": {"Returns": [["float", "the paint's extra word-spacing for drawing text in pixels. This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setWordSpacing_E@"], "Permissions": [], "Description": "Return the paint's extra word-spacing for text. The default value is 0. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getWordSpacing ()"}, "getHinting()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's hinting mode. Returns either @B_android#graphics#Paint#HINTING_OFF_E@ or @B_android#graphics#Paint#HINTING_ON_E@.", "history": "Added in API level 14", "FullName": "public int getHinting ()"}, "measureText(java.lang.String, int, int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."], ["int", "int: The index of the first character to start measuring"], ["int", "int: 1 beyond the index of the last character to measure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "added in API level 1", "FullName": "public float measureText (String text, int start, int end)"}, "setARGB(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The new alpha component (0..255) of the paint's color."], ["int", "int: The new red component (0..255) of the paint's color."], ["int", "int: The new green component (0..255) of the paint's color."], ["int", "int: The new blue component (0..255) of the paint's color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to setColor(), that takes a,r,g,b and constructs the color int", "history": "added in API level 1", "FullName": "public void setARGB (int a, int r, int g, int b)"}, "getFlags()": {"Returns": [["int", "the paint's flags (see enums ending in _Flag for bit masks)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's flags. Use the Flag enum to test flag values.", "history": "Added in API level 1", "FullName": "public int getFlags ()"}, "isStrikeThruText()": {"Returns": [["boolean", "true if the @B_android#graphics#Paint#STRIKE_THRU_TEXT_FLAG_E@ bit is set in the paint's flags."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getStrikeThruPosition_E@", "@B_android#graphics#Paint#getStrikeThruThickness_E@", "@B_android#graphics#Paint#setStrikeThruText_E@"], "Permissions": [], "Description": "Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set", "history": "Added in API level 1", "FullName": "public final boolean isStrikeThruText ()"}, "getTextWidths(char[], int, int, float[])": {"Returns": [["int", "the actual number of widths returned."]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The index of the first char to to measure"], ["int", "int: The number of chars starting with index to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as count."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "added in API level 1", "FullName": "public int getTextWidths (char[] text, int index, int count, float[] widths)"}, "setTextLocale(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the paint's locale value for drawing text, must not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the text locale list to a one-member list consisting of just the locale. See @B_android#graphics#Paint#setTextLocales_E@ for how the locale list affects the way the text is drawn for some languages.", "history": "Added in API level 17", "FullName": "public void setTextLocale (Locale locale)"}, "setTextSkewX(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's skew factor in X for drawing text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's horizontal skew factor for text. The default value is 0. For approximating oblique text, use values around -0.25.", "history": "Added in API level 1", "FullName": "public void setTextSkewX (float skewX)"}, "getUnderlinePosition()": {"Returns": [["float", "the position of the underline in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#isUnderlineText_E@", "@B_android#graphics#Paint#getUnderlineThickness_E@", "@B_android#graphics#Paint#setUnderlineText_E@"], "Permissions": [], "Description": "Returns the distance from top of the underline to the baseline in pixels. The result is positive for positions that are below the baseline. This method returns where the underline should be drawn independent of if the @B_android#graphics#Paint#UNDERLINE_TEXT_FLAG_E@ bit is set. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getUnderlinePosition ()"}, "getTextWidths(java.lang.String,int,int,float[])": {"Returns": [["int", "the number of code units in the specified text."]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."], ["int", "int: The index of the first char to to measure"], ["int", "int: The end of the text slice to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as the text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "Added in API level 1", "FullName": "public int getTextWidths (String text, int start, int end, float[] widths)"}, "getTextPath(char[],int,int,float,float,android.graphics.Path)": {"Returns": [], "Parameters": [["char[]", "char: the text to retrieve the path from"], ["int", "int: the index of the first character in text"], ["int", "int: the number of characters starting with index"], ["float", "float: the x coordinate of the text's origin"], ["float", "float: the y coordinate of the text's origin"], ["@B_android#graphics#Path_E@", "Path: the path to receive the data describing the text. Must be allocated by the caller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint.", "history": "Added in API level 1", "FullName": "public void getTextPath (char[] text, int index, int count, float x, float y, Path path)"}, "getTextRunCursor(char[],int,int,boolean,int,int)": {"Returns": [["int", "the offset of the next position, or -1"]], "Parameters": [["char[]", "char: the text This value must never be null."], ["int", "int: the start of the context Value is 0 or greater"], ["int", "int: the length of the context Value is 0 or greater"], ["boolean", "boolean: true if the paragraph context is RTL, otherwise false"], ["int", "int: the cursor position to move from Value is 0 or greater"], ["int", "int: how to move the cursor Value is @B_android#graphics#Paint#CURSOR_AFTER_E@, @B_android#graphics#Paint#CURSOR_AT_OR_AFTER_E@, @B_android#graphics#Paint#CURSOR_BEFORE_E@, or @B_android#graphics#Paint#CURSOR_AT_OR_BEFORE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next cursor position in the run. This avoids placing the cursor between surrogates, between characters that form conjuncts, between base characters and combining marks, or within a reordering cluster. ContextStart and offset are relative to the start of text. The context is the shaping context for cursor movement, generally the bounds of the metric span enclosing the cursor in the direction of movement. If cursorOpt is @B_android#graphics#Paint#CURSOR_AT_E@ and the offset is not a valid cursor position, this returns -1. Otherwise this will never return a value before contextStart or after contextStart + contextLength.", "history": "Added in API level 29", "FullName": "public int getTextRunCursor (char[] text, int contextStart, int contextLength, boolean isRtl, int offset, int cursorOpt)"}, "getStrokeMiter()": {"Returns": [["float", "the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp.", "history": "Added in API level 1", "FullName": "public float getStrokeMiter ()"}, "getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to measure and return its bounds This value must never be null."], ["int", "int: index of the first char in the text to measure"], ["int", "int: 1 past the last char in the text to measure"], ["@B_android#graphics#Rect_E@", "Rect: returns the unioned bounds of all the text. Must be allocated by the caller This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the text boundary box and store to bounds. Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0). Note that styles are ignored even if you pass @B_android#text#Spanned_E@ instance. Use @B_android#text#StaticLayout_E@ for measuring bounds of @B_android#text#Spanned_E@.", "history": "Added in API level 29", "FullName": "public void getTextBounds (CharSequence text, int start, int end, Rect bounds)"}, "setXfermode(android.graphics.Xfermode)": {"Returns": [["@B_android#graphics#Xfermode_E@", "xfermode"]], "Parameters": [["@B_android#graphics#Xfermode_E@", "Xfermode: May be null. The xfermode to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the transfer mode object. A transfer mode defines how source pixels (generate by a drawing command) are composited with the destination pixels (content of the render target). Pass null to clear any previous transfer mode. As a convenience, the parameter passed is also returned. @B_android#graphics#PorterDuffXfermode_E@ is the most common transfer mode.", "history": "Added in API level 1", "FullName": "public Xfermode setXfermode (Xfermode xfermode)"}, "getUnderlineThickness()": {"Returns": [["float", "the thickness of the underline in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#isUnderlineText_E@", "@B_android#graphics#Paint#getUnderlinePosition_E@", "@B_android#graphics#Paint#setUnderlineText_E@"], "Permissions": [], "Description": "Returns the thickness of the underline in pixels. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getUnderlineThickness ()"}, "getFontMetrics()": {"Returns": [["@B_android#graphics#Paint#FontMetrics_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new FontMetrics object, and then calls getFontMetrics(fm) with it, returning the object.", "history": "Added in API level 1", "FullName": "public Paint.FontMetrics getFontMetrics ()"}, "measureText(java.lang.CharSequence,int,int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to measure"], ["int", "int: The index of the first character to start measuring"], ["int", "int: 1 beyond the index of the last character to measure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "Added in API level 1", "FullName": "public float measureText (CharSequence text, int start, int end)"}, "setTextLocales(android.os.LocaleList)": {"Returns": [], "Parameters": [["@B_android#os#LocaleList_E@", "LocaleList: the paint's locale list for drawing text, must not be null or empty. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the text locale list. The text locale list affects how the text is drawn for some languages. For example, if the locale list contains @B_java#util#Locale#CHINESE_E@ or @B_java#util#Locale#CHINA_E@, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale list contains @B_java#util#Locale#JAPANESE_E@ or @B_java#util#Locale#JAPAN_E@, then the text renderer will prefer to draw text using a Japanese font. If the locale list contains both, the order those locales appear in the list is considered for deciding the font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale list is initialized to a one-member list just containing the system locales. This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language or languages of the text is/are known, then they can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locales just helps it do a better job in certain ambiguous cases.", "history": "Added in API level 24", "FullName": "public void setTextLocales (LocaleList locales)"}, "getShadowLayerRadius()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Returns the blur radius of the shadow layer.", "history": "Added in API level 29", "FullName": "public float getShadowLayerRadius ()"}, "setStrokeMiter(float)": {"Returns": [], "Parameters": [["float", "float: set the miter limit on the paint, used whenever the paint's style is Stroke or StrokeAndFill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's stroke miter value. This is used to control the behavior of miter joins when the joins angle is sharp. This value must be >= 0.", "history": "Added in API level 1", "FullName": "public void setStrokeMiter (float miter)"}, "getShadowLayerDx()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Returns the x offset of the shadow layer.", "history": "Added in API level 29", "FullName": "public float getShadowLayerDx ()"}, "getColorLong()": {"Returns": [["long", "the paint's color, alpha, and ColorSpace encoded as a ColorLong"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's color. Note that the color is a long with an encoded @B_android#graphics#ColorSpace_E@ as well as alpha and r,g,b. These values are not premultiplied, meaning that alpha can be any value, regardless of the values of r,g,b. See the @B_android#graphics#Color_E@ class for more details.", "history": "Added in API level 29", "FullName": "public long getColorLong ()"}, "getTextWidths(java.lang.String, int, int, float[])": {"Returns": [["int", "the number of code units in the specified text."]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure. Cannot be null."], ["int", "int: The index of the first char to to measure"], ["int", "int: The end of the text slice to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as the text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "added in API level 1", "FullName": "public int getTextWidths (String text, int start, int end, float[] widths)"}, "getColor()": {"Returns": [["int", "the paint's color (and alpha)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's color in sRGB. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details.", "history": "Added in API level 1", "FullName": "public int getColor ()"}, "setShadowLayer(float,float,float,long)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["long", "long no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the color space encoded in the ColorLong is invalid or unknown."]], "SeeAlso": [], "Permissions": [], "Description": "This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed. Can be used to create a blurred shadow underneath text. Support for use with other drawing operations is constrained to the software rendering pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is opaque, or the alpha from the shadow color if not.", "history": "Added in API level 29", "FullName": "public void setShadowLayer (float radius, float dx, float dy, long shadowColor)"}, "getBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the paint's blend mode (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's blend mode object.", "history": "Added in API level 29", "FullName": "public BlendMode getBlendMode ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the paint's colorfilter (maybe be null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's colorfilter (maybe be null).", "history": "Added in API level 1", "FullName": "public ColorFilter getColorFilter ()"}, "getEndHyphenEdit()": {"Returns": [["int", "the current starting hyphen edit value Value is @B_android#graphics#Paint#END_HYPHEN_EDIT_NO_EDIT_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_MAQAF_E@, @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN_E@, or @B_android#graphics#Paint#END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setStartHyphenEdit_E@"], "Permissions": [], "Description": "Get the current value of end hyphen edit. The default value is 0 which is equivalent to @B_android#graphics#Paint#END_HYPHEN_EDIT_NO_EDIT_E@.", "history": "Added in API level 29", "FullName": "public int getEndHyphenEdit ()"}, "setShadowLayer(float, float, float, int)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed. Can be used to create a blurred shadow underneath text. Support for use with other drawing operations is constrained to the software rendering pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is opaque, or the alpha from the shadow color if not.", "history": "added in API level 1", "FullName": "public void setShadowLayer (float radius, float dx, float dy, int shadowColor)"}, "setLetterSpacing(float)": {"Returns": [], "Parameters": [["float", "float: set the paint's letter-spacing for drawing text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's letter-spacing for text. The default value is 0. The value is in 'EM' units. Typical values for slight expansion will be around 0.05. Negative values tighten text.", "history": "Added in API level 21", "FullName": "public void setLetterSpacing (float letterSpacing)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the text to retrieve the path from"], ["int", "int: the first character in the text"], ["int", "int: 1 past the last character in the text"], ["float", "float: the x coordinate of the text's origin"], ["float", "float: the y coordinate of the text's origin"], ["@B_android#graphics#Path_E@", "Path: the path to receive the data describing the text. Must be allocated by the caller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint.", "history": "Added in API level 1", "FullName": "public void getTextPath (String text, int start, int end, float x, float y, Path path)"}, "getLetterSpacing()": {"Returns": [["float", "the paint's letter-spacing for drawing text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's letter-spacing for text. The default value is 0.", "history": "Added in API level 21", "FullName": "public float getLetterSpacing ()"}, "isUnderlineText()": {"Returns": [["boolean", "true if the underlineText bit is set in the paint's flags."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getUnderlinePosition_E@", "@B_android#graphics#Paint#getUnderlineThickness_E@", "@B_android#graphics#Paint#setUnderlineText_E@"], "Permissions": [], "Description": "Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set", "history": "Added in API level 1", "FullName": "public final boolean isUnderlineText ()"}, "setStrikeThruText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the strikeThruText bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getStrikeThruPosition_E@", "@B_android#graphics#Paint#getStrikeThruThickness_E@", "@B_android#graphics#Paint#isStrikeThruText_E@"], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit", "history": "Added in API level 1", "FullName": "public void setStrikeThruText (boolean strikeThruText)"}, "set(android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint_E@", "Paint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the fields from src into this paint. This is equivalent to calling get() on all of the src fields, and calling the corresponding set() methods on this.", "history": "Added in API level 1", "FullName": "public void set (Paint src)"}, "getStrikeThruPosition()": {"Returns": [["float", "the position of the strike-through line in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getStrikeThruThickness_E@", "@B_android#graphics#Paint#setStrikeThruText_E@", "@B_android#graphics#Paint#isStrikeThruText_E@"], "Permissions": [], "Description": "Distance from top of the strike-through line to the baseline in pixels. The result is negative for positions that are above the baseline. This method returns where the strike-through line should be drawn independent of if the @B_android#graphics#Paint#STRIKE_THRU_TEXT_FLAG_E@ bit is set. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getStrikeThruPosition ()"}, "measureText(char[], int, int)": {"Returns": [["float", "The width of the text"]], "Parameters": [["char[]", "char: The text to measure. Cannot be null."], ["int", "int: The index of the first character to start measuring"], ["int", "int: THe number of characters to measure, beginning with start"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the text.", "history": "added in API level 1", "FullName": "public float measureText (char[] text, int index, int count)"}, "getTextWidths(java.lang.String,float[])": {"Returns": [["int", "the number of code units in the specified text."]], "Parameters": [["@B_java#lang#String_E@", "String: The text to measure"], ["float[]", "float: array to receive the advance widths of the characters. Must be at least a large as the text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the advance widths for the characters in the string.", "history": "Added in API level 1", "FullName": "public int getTextWidths (String text, float[] widths)"}, "getTextBounds(java.lang.String,int,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: string to measure and return its bounds"], ["int", "int: index of the first char in the string to measure"], ["int", "int: 1 past the last char in the string to measure"], ["@B_android#graphics#Rect_E@", "Rect: returns the unioned bounds of all the text. Must be allocated by the caller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the text boundary box and store to bounds. Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0).", "history": "Added in API level 1", "FullName": "public void getTextBounds (String text, int start, int end, Rect bounds)"}, "setSubpixelText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the subpixelText bit in the paint's flags, false to clear it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit", "history": "Added in API level 1", "FullName": "public void setSubpixelText (boolean subpixelText)"}, "setColor(int)": {"Returns": [], "Parameters": [["int", "int: The new color (including alpha) to set in the paint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details.", "history": "Added in API level 1", "FullName": "public void setColor (int color)"}, "setFontFeatureSettings(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the font feature settings string to use, may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getFontFeatureSettings_E@"], "Permissions": [], "Description": "Set font feature settings. The format is the same as the CSS font-feature-settings attribute:", "history": "Added in API level 21", "FullName": "public void setFontFeatureSettings (String settings)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restores the paint to its default settings.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "getTextSize()": {"Returns": [["float", "the paint's text size in pixel units."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the paint's text size.", "history": "Added in API level 1", "FullName": "public float getTextSize ()"}, "getShadowLayerDy()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Returns the y offset of the shadow layer.", "history": "Added in API level 29", "FullName": "public float getShadowLayerDy ()"}, "getFontMetrics(android.graphics.Paint.FontMetrics)": {"Returns": [["float", "the font's recommended interline spacing."]], "Parameters": [["@B_android#graphics#Paint#FontMetrics_E@", "Paint.FontMetrics: If this object is not null, its fields are filled with the appropriate values given the paint's text attributes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Note that these are the values for the main typeface, and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.", "history": "Added in API level 1", "FullName": "public float getFontMetrics (Paint.FontMetrics metrics)"}, "setHinting(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's hinting mode. May be either @B_android#graphics#Paint#HINTING_OFF_E@ or @B_android#graphics#Paint#HINTING_ON_E@.", "history": "Added in API level 14", "FullName": "public void setHinting (int mode)"}, "isFakeBoldText()": {"Returns": [["boolean", "true if the fakeBoldText bit is set in the paint's flags."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set", "history": "Added in API level 1", "FullName": "public final boolean isFakeBoldText ()"}, "getOffsetForAdvance(char[],int,int,int,int,boolean,float)": {"Returns": [["int", "index of offset"]], "Parameters": [["char[]", "char: the text to measure. Cannot be null."], ["int", "int: the index of the start of the range to measure"], ["int", "int: the index + 1 of the end of the range to measure"], ["int", "int: the index of the start of the shaping context"], ["int", "int: the index + 1 of the end of the range to measure"], ["boolean", "boolean: whether the run is in RTL direction"], ["float", "float: width relative to start of run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character offset within the string whose position is closest to the specified horizontal position. The returned value is generally the value of offset for which @B_android#graphics#Paint#getRunAdvance_E@ yields a result most closely approximating advance, and which is also on a grapheme cluster boundary. As such, it is the preferred method for positioning a cursor in response to a touch or pointer event. The grapheme cluster boundaries are based on Note that advance is a (generally positive) width measurement relative to the start of the run. Thus, for RTL runs it the distance from the point to the right edge. All indices are relative to the start of text. Further, 0 <= contextStart <= start <= end <= contextEnd <= text.length must hold on entry, and start <= result <= end will hold on return.", "history": "Added in API level 23", "FullName": "public int getOffsetForAdvance (char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)"}, "getFontMetricsInt(android.graphics.Paint.FontMetricsInt)": {"Returns": [["int", "the font's interline spacing."]], "Parameters": [["@B_android#graphics#Paint#FontMetricsInt_E@", "Paint.FontMetricsInt no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Note: all values have been converted to integers from floats, in such a way has to make the answers useful for both spacing and clipping. If you want more control over the rounding, call getFontMetrics(). Note that these are the values for the main typeface, and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.", "history": "Added in API level 1", "FullName": "public int getFontMetricsInt (Paint.FontMetricsInt fmi)"}, "setStrokeCap(android.graphics.Paint.Cap)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint#Cap_E@", "Paint.Cap: set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the paint's Cap.", "history": "Added in API level 1", "FullName": "public void setStrokeCap (Paint.Cap cap)"}, "setPathEffect(android.graphics.PathEffect)": {"Returns": [["@B_android#graphics#PathEffect_E@", "effect"]], "Parameters": [["@B_android#graphics#PathEffect_E@", "PathEffect: May be null. The patheffect to be installed in the paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set or clear the patheffect object. Pass null to clear any previous patheffect. As a convenience, the parameter passed is also returned.", "history": "Added in API level 1", "FullName": "public PathEffect setPathEffect (PathEffect effect)"}, "getPathEffect()": {"Returns": [["@B_android#graphics#PathEffect_E@", "the paint's patheffect (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the paint's patheffect object.", "history": "Added in API level 1", "FullName": "public PathEffect getPathEffect ()"}, "getFillPath(android.graphics.Path,android.graphics.Path)": {"Returns": [["boolean", "true if the path should be filled, or false if it should be drawn with a hairline (width == 0)"]], "Parameters": [["@B_android#graphics#Path_E@", "Path: input path"], ["@B_android#graphics#Path_E@", "Path: output path (may be the same as src)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies any/all effects (patheffect, stroking) to src, returning the result in dst. The result is that drawing src with this paint will be the same as drawing dst with a default paint (at least from the geometric perspective).", "history": "Added in API level 1", "FullName": "public boolean getFillPath (Path src, Path dst)"}, "isDither()": {"Returns": [["boolean", "true if the dithering bit is set in the paint's flags."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getFlags(), returning true if DITHER_FLAG bit is set Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster, but higher precision colors are just truncated down (e.g. 8888 -> 565). Dithering tries to distribute the error inherent in this process, to reduce the visual artifacts.", "history": "Added in API level 1", "FullName": "public final boolean isDither ()"}, "clearShadowLayer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the shadow layer.", "history": "Added in API level 1", "FullName": "public void clearShadowLayer ()"}, "getFontVariationSettings()": {"Returns": [["@B_java#lang#String_E@", "the paint's currently set font variation settings. Default is null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setFontVariationSettings_E@"], "Permissions": [], "Description": "Returns the font variation settings.", "history": "Added in API level 26", "FullName": "public String getFontVariationSettings ()"}}, "Inheritance": [], "ClassName": "android.graphics.Paint", "ClassDesc": "The Paint class holds the style and color information about how to draw geometries, text and bitmaps."}