{"Functions": {"getHotspotBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the rect to populate with the hotspot bounds This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates outRect with the hotspot bounds.", "history": "Added in API level 23", "FullName": "public void getHotspotBounds (Rect outRect)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 21", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optimized for drawing ripples with a mask layer and optional content.", "history": "Added in API level 21", "FullName": "public void draw (Canvas canvas)"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "Added in API level 21", "FullName": "public void jumpToCurrentState ()"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setHotspotBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "Added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: Outline in which to place the first available layer outline This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates outline with the first available layer outline, excluding the mask layer.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "getRadius()": {"Returns": [["int", "the radius in pixels of the fully expanded ripple if an explicit radius has been set, or @B_android#graphics#drawable#RippleDrawable#RADIUS_AUTO_E@ if the radius is computed based on the container size"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public int getRadius ()"}, "setRadius(int)": {"Returns": [], "Parameters": [["int", "int: ripple radius in pixels, or @B_android#graphics#drawable#RippleDrawable#RADIUS_AUTO_E@ to compute the radius based on the container size"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the radius in pixels of the fully expanded ripple.", "history": "Added in API level 23", "FullName": "public void setRadius (int radius)"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "the color filter to apply, or null to remove the existing color filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. Pass null to remove any existing color filter.", "history": "Added in API level 21", "FullName": "public void setColorFilter (ColorFilter cf)"}, "setColor(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Ripple color as a color state list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the ripple color.", "history": "Added in API level 21", "FullName": "public void setColor (ColorStateList color)"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 21", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setAlpha(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 21", "FullName": "public void setAlpha (int alpha)"}, "setDrawableByLayerId(int,android.graphics.drawable.Drawable)": {"Returns": [["boolean", "Whether the @B_android#graphics#drawable#Drawable_E@ was replaced (could return false if the id was not found)."]], "Parameters": [["int", "int: The layer ID to search for."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: The replacement @B_android#graphics#drawable#Drawable_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the @B_android#graphics#drawable#Drawable_E@ for the layer with the given id.", "history": "Added in API level 21", "FullName": "public boolean setDrawableByLayerId (int id, Drawable drawable)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 21", "FullName": "protected void onBoundsChange (Rect bounds)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 21", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "invalidateSelf()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable redrawn. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 21", "FullName": "public void invalidateSelf ()"}, "getDirtyBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "The dirty bounds of this drawable This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the drawable's dirty bounds Rect. Note: for efficiency, the returned object may be the same object stored in the drawable (though this is not guaranteed). By default, this returns the full drawable bounds. Custom drawables may override this method to perform more precise invalidation.", "history": "Added in API level 21", "FullName": "public Rect getDirtyBounds ()"}, "setHotspot(float,float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "Added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 21", "FullName": "public Drawable.ConstantState getConstantState ()"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 21", "FullName": "public Drawable mutate ()"}, "setPaddingMode(int)": {"Returns": [], "Parameters": [["int", "int: padding mode, one of: LayerDrawable.PADDING_MODE_NEST to nest each layer inside the padding of the previous layer LayerDrawable.PADDING_MODE_STACK to stack each layer directly atop the previous layer"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#LayerDrawable#getPaddingMode_E@"], "Permissions": [], "Description": "Specifies how layer padding should affect the bounds of subsequent layers. The default and recommended value for RippleDrawable is @B_android#graphics#drawable#LayerDrawable#PADDING_MODE_STACK_E@.", "history": "Added in API level 21", "FullName": "public void setPaddingMode (int mode)"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "RippleDrawable(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: The ripple color This value must never be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: The content drawable, may be null This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: The mask drawable, may be null This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ripple drawable with the specified ripple color and optional content and mask drawables.", "history": "Added in API level 21", "FullName": "public RippleDrawable (ColorStateList color, Drawable content, Drawable mask)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@", "@B_android#graphics#drawable#LayerDrawable_E@"], "ClassName": "android.graphics.drawable.RippleDrawable", "ClassDesc": "Drawable that shows a ripple effect in response to state changes. The anchoring position of the ripple for a given state may be specified by calling @B_android#graphics#drawable#RippleDrawable#setHotspot_E@ with the corresponding state attribute identifier. A touch feedback drawable may contain multiple child layers, including a special mask layer that is not drawn to the screen. A single layer may be set as the mask from XML by specifying its android:id value as @B_android#R#id#mask_E@. At run time, a single layer may be set as the mask using setId(..., android.R.id.mask) or an existing mask layer may be replaced using setDrawableByLayerId(android.R.id.mask, ...). If a mask layer is set, the ripple effect will be masked against that layer before it is drawn over the composite of the remaining child layers. If no mask layer is set, the ripple effect is masked against the composite of the child layers. If no child layers or mask is specified and the ripple is set as a View background, the ripple will be drawn atop the first available parent background within the View's hierarchy. In this case, the drawing region may extend outside of the Drawable bounds."}