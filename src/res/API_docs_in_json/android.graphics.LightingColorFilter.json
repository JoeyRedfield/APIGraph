{"Functions": {"LightingColorFilter(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a colorfilter that multiplies the RGB channels by one color, and then adds a second color. The alpha components of the mul and add arguments are ignored.", "history": "Added in API level 1", "FullName": "public LightingColorFilter (int mul, int add)"}, "getColorMultiply()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the RGB color used to multiply the source color when the color filter is applied.", "history": "Added in API level 26", "FullName": "public int getColorMultiply ()"}, "getColorAdd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the RGB color that will be added to the source color when the color filter is applied.", "history": "Added in API level 26", "FullName": "public int getColorAdd ()"}, "LightingColorFilter(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a colorfilter that multiplies the RGB channels by one color, and then adds a second color. The alpha components of the mul and add arguments are ignored.", "history": "added in API level 1", "FullName": "public LightingColorFilter (int mul, int add)"}}, "Inheritance": ["@B_android#graphics#ColorFilter_E@"], "ClassName": "android.graphics.LightingColorFilter", "ClassDesc": "A color filter that can be used to simulate simple lighting effects. A LightingColorFilter is defined by two parameters, one used to multiply the source color (called colorMultiply) and one used to add to the source color (called colorAdd). The alpha channel is left untouched by this color filter. Given a source color RGB, the resulting R'G'B' color is computed thusly: [0..255] range for each channel."}