{"Functions": {"getInstance(java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathBuilder_E@", "a CertPathBuilder object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathBuilder algorithm. See the CertPathBuilder section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a CertPathBuilderSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathBuilder object that implements the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static CertPathBuilder getInstance (String algorithm)"}, "CertPathBuilder(java.security.cert.CertPathBuilderSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertPathBuilderSpi_E@", "CertPathBuilderSpi: the provider implementation"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CertPathBuilder object of the given algorithm, and encapsulates the given provider implementation (SPI object) in it.", "history": "Added in API level 1", "FullName": "protected CertPathBuilder (CertPathBuilderSpi builderSpi, Provider provider, String algorithm)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the name of the algorithm of this CertPathBuilder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the algorithm of this CertPathBuilder.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathBuilder_E@", "a CertPathBuilder object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathBuilder algorithm. See the CertPathBuilder section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathBuilderSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathBuilder object that implements the specified algorithm. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static CertPathBuilder getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#cert#CertPathBuilder_E@", "a CertPathBuilder object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathBuilder algorithm. See the CertPathBuilder section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathBuilderSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathBuilder object that implements the specified algorithm. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static CertPathBuilder getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this CertPathBuilder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this CertPathBuilder.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathBuilder_E@", "a CertPathBuilder object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathBuilder algorithm. See the CertPathBuilder section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathBuilderSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathBuilder object that implements the specified algorithm. A new CertPathBuilder object encapsulating the CertPathBuilderSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static CertPathBuilder getInstance (String algorithm, String provider)"}, "getDefaultType()": {"Returns": [["@B_java#lang#String_E@", "the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string \"PKIX\" if no such property exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Security_E@"], "Permissions": [], "Description": "Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string \"PKIX\" if no such property exists. The default CertPathBuilder type can be used by applications that do not want to use a hard-coded type when calling one of the getInstance methods, and want to provide a default type in case a user does not specify its own. The default CertPathBuilder type can be changed by setting the value of the certpathbuilder.type security property to the desired type.", "history": "Added in API level 1", "FullName": "public static final String getDefaultType ()"}, "getRevocationChecker()": {"Returns": [["@B_java#security#cert#CertPathChecker_E@", "a CertPathChecker"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the service provider does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a CertPathChecker that the encapsulated CertPathBuilderSpi implementation uses to check the revocation status of certificates. A PKIX implementation returns objects of type PKIXRevocationChecker. Each invocation of this method returns a new instance of CertPathChecker. The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description for an example.", "history": "Added in API level 24", "FullName": "public final CertPathChecker getRevocationChecker ()"}, "build(java.security.cert.CertPathParameters)": {"Returns": [["@B_java#security#cert#CertPathBuilderResult_E@", "the result of the build algorithm"]], "Parameters": [["@B_java#security#cert#CertPathParameters_E@", "CertPathParameters: the algorithm parameters"]], "Throws": [["@B_java#security#cert#CertPathBuilderException_E@", "if the builder is unable to construct a certification path that satisfies the specified parameters"], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified parameters are inappropriate for this CertPathBuilder"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to build a certification path using the specified algorithm parameter set.", "history": "Added in API level 1", "FullName": "public final CertPathBuilderResult build (CertPathParameters params)"}}, "Inheritance": [], "ClassName": "java.security.cert.CertPathBuilder", "ClassDesc": "A class for building certification paths (also known as certificate chains). This class uses a provider-based architecture. To create a CertPathBuilder, call one of the static getInstance methods, passing in the algorithm name of the CertPathBuilder desired and optionally the name of the provider desired. Once a CertPathBuilder object has been created, certification paths can be constructed by calling the @B_java#security#cert#CertPathBuilder#build_E@ method and passing it an algorithm-specific set of parameters. If successful, the result (including the CertPath that was built) is returned in an object that implements the CertPathBuilderResult interface. The @B_java#security#cert#CertPathBuilder#getRevocationChecker_E@ method allows an application to specify additional algorithm-specific parameters and options used by the CertPathBuilder when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm: Android provides the following CertPathBuilder algorithms: The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. However, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, threads that need to access a single CertPathBuilder instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different CertPathBuilder instance need not synchronize."}