{"Functions": {"containsKey(java.lang.Object)": {"Returns": [["boolean", "true if and only if the specified object is a key in this hashtable, as determined by the equals method; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: possible key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the key is null"]], "SeeAlso": ["@B_java#util#Hashtable#contains_E@"], "Permissions": [], "Description": "Tests if the specified object is a key in this hashtable.", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "Added in API level 24", "FullName": "public V putIfAbsent (K key, V value)"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "Hashtable(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hashtable."], ["float", "float: the load factor of the hashtable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.", "history": "Added in API level 1", "FullName": "public Hashtable (int initialCapacity, float loadFactor)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified Object is equal to this Map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this hashtable"]], "Throws": [], "SeeAlso": ["@B_java#util#Map#equals_E@"], "Permissions": [], "Description": "Compares the specified Object with this Map for equality, as per the definition in the Map interface.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "Hashtable(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new hashtable with the same mappings as the given Map. The hashtable is created with an initial capacity sufficient to hold the mappings in the given Map and a default load factor (0.75).", "history": "Added in API level 1", "FullName": "public Hashtable (Map<? extends K, ? extends V> t)"}, "elements()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the values in this hashtable."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#Hashtable#keys_E@", "@B_java#util#Hashtable#values_E@", "@B_java#util#Map_E@"], "Permissions": [], "Description": "Returns an enumeration of the values in this hashtable. Use the Enumeration methods on the returned object to fetch the elements sequentially.", "history": "Added in API level 1", "FullName": "public Enumeration<V> elements ()"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Map#hashCode_E@"], "Permissions": [], "Description": "Returns the hash code value for this Map as per the definition in the Map interface.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": ["@B_java#util#Hashtable#put_E@"], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "size()": {"Returns": [["int", "the number of keys in this hashtable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of keys in this hashtable.", "history": "Added in API level 1", "FullName": "public int size ()"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if no value is associated with the key"]], "Parameters": [["K", "K: key with which the resulting value is to be associated"], ["V", "V: the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to recompute a value if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping: If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean remove (Object key, Object value)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this hashtable. These mappings will replace any mappings that this hashtable had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> t)"}, "remove(java.lang.Object)": {"Returns": [["V", "the value to which the key had been mapped in this hashtable, or null if the key did not have a mapping"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key that needs to be removed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the key (and its corresponding value) from this hashtable. This method does nothing if the key is not in the hashtable.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this hashtable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Hashtable(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hashtable."], ["float", "float: the load factor of the hashtable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.", "history": "added in API level 1", "FullName": "public Hashtable (int initialCapacity, float loadFactor)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "Added in API level 24", "FullName": "public V replace (K key, V value)"}, "put(K,V)": {"Returns": [["V", "the previous value of the specified key in this hashtable, or null if it did not have one"]], "Parameters": [["K", "K: the hashtable key"], ["V", "V: the value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the key or value is null"]], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#Hashtable#get_E@"], "Permissions": [], "Description": "Maps the specified key to the specified value in this hashtable. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}, "Hashtable(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new hashtable with the same mappings as the given Map. The hashtable is created with an initial capacity sufficient to hold the mappings in the given Map and a default load factor (0.75).", "history": "added in API level 1", "FullName": "public Hashtable (Map<? extends K, ? extends V> t)"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean remove (Object key, Object value)"}, "Hashtable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75).", "history": "Added in API level 1", "FullName": "public Hashtable ()"}, "put(K, V)": {"Returns": [["V", "the previous value of the specified key in this hashtable, or null if it did not have one"]], "Parameters": [["K", "K: the hashtable key"], ["V", "V: the value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the key or value is null"]], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#Hashtable#get_E@"], "Permissions": [], "Description": "Maps the specified key to the specified value in this hashtable. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this hashtable so that it contains no keys.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "keys()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the keys in this hashtable."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#Hashtable#elements_E@", "@B_java#util#Hashtable#keySet_E@", "@B_java#util#Map_E@"], "Permissions": [], "Description": "Returns an enumeration of the keys in this hashtable.", "history": "Added in API level 1", "FullName": "public Enumeration<K> keys ()"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "added in API level 24", "FullName": "public V replace (K key, V value)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of the hashtable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a shallow copy of this hashtable. All the structure of the hashtable itself is copied, but the keys and values are not cloned. This is a relatively expensive operation.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping: @B_java#util#Map#merge_E@ is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this hashtable. These mappings will replace any mappings that this hashtable had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> t)"}, "rehash()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently. This method is called automatically when the number of keys in the hashtable exceeds this hashtable's capacity and load factor.", "history": "Added in API level 1", "FullName": "protected void rehash ()"}, "isEmpty()": {"Returns": [["boolean", "true if this hashtable maps no keys to values; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this hashtable maps no keys to values.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this hashtable is to be tested"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this hashtable maps one or more keys to this value. Note that this method is identical in functionality to @B_java#util#Hashtable#contains_E@ (which predates the @B_java#util#Map_E@ interface).", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "added in API level 24", "FullName": "public V putIfAbsent (K key, V value)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the mapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: Or to implement a multi-value map, Map<K,Collection<V>>, supporting multiple values per key: The mapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "Hashtable(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hashtable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty hashtable with the specified initial capacity and default load factor (0.75).", "history": "Added in API level 1", "FullName": "public Hashtable (int initialCapacity)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if and only if some key maps to the value argument in this hashtable as determined by the equals method; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: a value to search for"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Tests if some key maps into the specified value in this hashtable. This operation is more expensive than the @B_java#util#Hashtable#containsKey_E@ method. Note that this method is identical in functionality to @B_java#util#Hashtable#containsValue_E@, (which is part of the @B_java#util#Map_E@ interface in the collections framework).", "history": "Added in API level 1", "FullName": "public boolean contains (Object value)"}}, "Inheritance": ["@B_java#util#Dictionary_E@"], "ClassName": "java.util.Hashtable<K, V>", "ClassDesc": "This class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value. To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the hashCode method and the equals method. An instance of Hashtable has two parameters that affect its performance: Generally, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the time cost to look up an entry (which is reflected in most The initial capacity controls a tradeoff between wasted space and the need for rehash operations, which are time-consuming. No rehash operations will If many entries are to be made into a Hashtable, creating it with a sufficiently large capacity may allow the entries to be inserted more efficiently than letting it perform automatic rehashing as needed to grow the table. This example creates a hashtable of numbers. It uses the names of the numbers as keys: To retrieve a number, use the following code: The iterators returned by the fail-fast: if the Hashtable is structurally modified at any time after the iterator is created, in any way except through the iterator's own @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The Enumerations returned by Hashtable's keys and elements methods are not fail-fast. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw As of the Java 2 platform v1.2, this class was retrofitted to implement the @B_java#util#Map_E@ interface, making it a member of the Hashtable is synchronized. If a thread-safe implementation is not needed, it is recommended to use @B_java#util#HashMap_E@ in place of Hashtable. If a thread-safe highly-concurrent implementation is desired, then it is recommended to use @B_java#util#concurrent#ConcurrentHashMap_E@ in place of Hashtable."}