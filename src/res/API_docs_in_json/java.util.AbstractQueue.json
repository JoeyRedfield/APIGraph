{"Functions": {"remove()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this queue is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue. This method differs from @B_java#util#Queue#poll_E@ only in that it throws an exception if this queue is empty. This implementation returns the result of poll unless the queue is empty.", "history": "Added in API level 1", "FullName": "public E remove ()"}, "AbstractQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for use by subclasses.", "history": "Added in API level 1", "FullName": "protected AbstractQueue ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this queue. The queue will be empty after this call returns. This implementation repeatedly invokes @B_java#util#Queue#poll_E@ until it returns null.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains a null element and this queue does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this queue, or if the specified collection is this queue"], ["@B_java#lang#IllegalStateException_E@", "if not all the elements can be added at this time due to insertion restrictions"]], "SeeAlso": ["@B_java#util#AbstractQueue#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this queue. Attempts to addAll of a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. This implementation iterates over the specified collection, and adds each element returned by the iterator to this queue, in turn. A runtime exception encountered while trying to add an element (including, in particular, a null element) may result in only some of the elements having been successfully added when the associated exception is thrown.", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains a null element and this queue does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this queue, or if the specified collection is this queue"], ["@B_java#lang#IllegalStateException_E@", "if not all the elements can be added at this time due to insertion restrictions"]], "SeeAlso": ["@B_java#util#AbstractQueue#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this queue. Attempts to addAll of a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress. This implementation iterates over the specified collection, and adds each element returned by the iterator to this queue, in turn. A runtime exception encountered while trying to add an element (including, in particular, a null element) may result in only some of the elements having been successfully added when the associated exception is thrown.", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "element()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this queue is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue. This method differs from @B_java#util#Queue#peek_E@ only in that it throws an exception if this queue is empty. This implementation returns the result of peek unless the queue is empty.", "history": "Added in API level 1", "FullName": "public E element ()"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this queue does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. This implementation returns true if offer succeeds, else throws an IllegalStateException.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@"], "ClassName": "java.util.AbstractQueue<E>", "ClassDesc": "This class provides skeletal implementations of some @B_java#util#Queue_E@ operations. The implementations in this class are appropriate when the base implementation does not allow null elements. Methods @B_java#util#AbstractQueue#add_E@, @B_java#util#AbstractQueue#remove_E@, and @B_java#util#AbstractQueue#element_E@ are based on @B_java#util#Queue#offer_E@, @B_java#util#Queue#poll_E@, and @B_java#util#Queue#peek_E@, respectively, but throw exceptions instead of indicating failure via false or null returns. A Queue implementation that extends this class must minimally define a method @B_java#util#Queue#offer_E@ which does not permit insertion of null elements, along with methods @B_java#util#Queue#peek_E@, @B_java#util#Queue#poll_E@, @B_java#util#Collection#size_E@, and @B_java#util#Collection#iterator_E@. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing @B_java#util#AbstractCollection_E@."}