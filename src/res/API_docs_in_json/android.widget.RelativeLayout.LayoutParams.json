{"Functions": {"getRules()": {"Returns": [["int[]", "the supported rules"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@"], "Permissions": [], "Description": "Retrieves a complete list of all supported rules, where the index is the rule verb, and the element value is the value specified, or \"false\" if it was never set. There will be no resolution of relative rules done.", "history": "Added in API level 1", "FullName": "public int[] getRules ()"}, "RelativeLayout.LayoutParams(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public RelativeLayout.LayoutParams (int w, int h)"}, "RelativeLayout.LayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout.LayoutParams (ViewGroup.LayoutParams source)"}, "addRule(int,int)": {"Returns": [], "Parameters": [["int", "int: a layout verb, such as @B_android#widget#RelativeLayout#ALIGN_RIGHT_E@"], ["int", "int: the ID of another view to use as an anchor, or a boolean value (represented as @B_android#widget#RelativeLayout#TRUE_E@ for true or 0 for false)"]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#removeRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#getRule_E@"], "Permissions": [], "Description": "Adds a layout rule to be interpreted by the RelativeLayout. Use this for verbs that refer to a sibling (ex. @B_android#widget#RelativeLayout#ALIGN_RIGHT_E@) or take a boolean value (ex. @B_android#widget#RelativeLayout#CENTER_IN_PARENT_E@). If the rule is relative to the layout direction (ex. @B_android#widget#RelativeLayout#START_OF_E@), then the layout direction must be resolved using @B_android#widget#RelativeLayout#LayoutParams#resolveLayoutDirection_E@ before calling @B_android#widget#RelativeLayout#LayoutParams#getRule_E@ with an absolute rule (ex. @B_android#widget#RelativeLayout#LEFT_OF_E@.", "history": "Added in API level 1", "FullName": "public void addRule (int verb, int subject)"}, "debug(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String debug (String output)"}, "resolveLayoutDirection(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout @B_android#view#View#LAYOUT_DIRECTION_LTR_E@ @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This will be called by @B_android#view#View#requestLayout_E@ to resolve layout parameters that are relative to the layout direction. After this method is called, any rules using layout-relative verbs (ex. @B_android#widget#RelativeLayout#START_OF_E@) previously added via @B_android#widget#RelativeLayout#LayoutParams#addRule_E@ may only be accessed via their resolved absolute verbs (ex. @B_android#widget#RelativeLayout#LEFT_OF_E@).", "history": "Added in API level 17", "FullName": "public void resolveLayoutDirection (int layoutDirection)"}, "RelativeLayout.LayoutParams(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout.LayoutParams (Context c, AttributeSet attrs)"}, "getRule(int)": {"Returns": [["int", "the id of another view to use as an anchor, a boolean value (represented as @B_android#widget#RelativeLayout#TRUE_E@ for true or 0 for false), or -1 for verbs that don't refer to another sibling (for example, ALIGN_WITH_PARENT_BOTTOM)"]], "Parameters": [["int", "int: one of the verbs defined by @B_android#widget#RelativeLayout_E@, such as ALIGN_WITH_PARENT_LEFT"]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@"], "Permissions": [], "Description": "Returns the layout rule associated with a specific verb.", "history": "Added in API level 23", "FullName": "public int getRule (int verb)"}, "RelativeLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#MarginLayoutParams_E@", "ViewGroup.MarginLayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout.LayoutParams (ViewGroup.MarginLayoutParams source)"}, "RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#widget#RelativeLayout#LayoutParams_E@", "RelativeLayout.LayoutParams: The layout params to copy from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy constructor. Clones the width, height, margin values, and rules of the source.", "history": "Added in API level 19", "FullName": "public RelativeLayout.LayoutParams (RelativeLayout.LayoutParams source)"}, "RelativeLayout.LayoutParams(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout.LayoutParams (int w, int h)"}, "removeRule(int)": {"Returns": [], "Parameters": [["int", "int: One of the verbs defined by @B_android#widget#RelativeLayout_E@, such as ALIGN_WITH_PARENT_LEFT."]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#getRule_E@"], "Permissions": [], "Description": "Removes a layout rule to be interpreted by the RelativeLayout. If the rule is relative to the layout direction (ex. @B_android#widget#RelativeLayout#START_OF_E@, @B_android#widget#RelativeLayout#ALIGN_PARENT_START_E@, etc.) then the layout direction must be resolved using @B_android#widget#RelativeLayout#LayoutParams#resolveLayoutDirection_E@ before before calling @B_android#widget#RelativeLayout#LayoutParams#getRule_E@ with an absolute rule (ex. @B_android#widget#RelativeLayout#LEFT_OF_E@.", "history": "Added in API level 17", "FullName": "public void removeRule (int verb)"}, "addRule(int, int)": {"Returns": [], "Parameters": [["int", "int: a layout verb, such as @B_android#widget#RelativeLayout#ALIGN_RIGHT_E@"], ["int", "int: the ID of another view to use as an anchor, or a boolean value (represented as @B_android#widget#RelativeLayout#TRUE_E@ for true or 0 for false)"]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#removeRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#getRule_E@"], "Permissions": [], "Description": "Adds a layout rule to be interpreted by the RelativeLayout. Use this for verbs that refer to a sibling (ex. @B_android#widget#RelativeLayout#ALIGN_RIGHT_E@) or take a boolean value (ex. @B_android#widget#RelativeLayout#CENTER_IN_PARENT_E@). If the rule is relative to the layout direction (ex. @B_android#widget#RelativeLayout#START_OF_E@), then the layout direction must be resolved using @B_android#widget#RelativeLayout#LayoutParams#resolveLayoutDirection_E@ before calling @B_android#widget#RelativeLayout#LayoutParams#getRule_E@ with an absolute rule (ex. @B_android#widget#RelativeLayout#LEFT_OF_E@.", "history": "added in API level 1", "FullName": "public void addRule (int verb, int subject)"}, "addRule(int)": {"Returns": [], "Parameters": [["int", "int: a layout verb, such as @B_android#widget#RelativeLayout#ALIGN_PARENT_LEFT_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#LayoutParams#addRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#removeRule_E@", "@B_android#widget#RelativeLayout#LayoutParams#getRule_E@"], "Permissions": [], "Description": "Adds a layout rule to be interpreted by the RelativeLayout. This method should only be used for verbs that don't refer to a sibling (ex. @B_android#widget#RelativeLayout#ALIGN_RIGHT_E@) or take a boolean value (@B_android#widget#RelativeLayout#TRUE_E@ for true or 0 for false). To specify a verb that takes a subject, use @B_android#widget#RelativeLayout#LayoutParams#addRule_E@. If the rule is relative to the layout direction (ex. @B_android#widget#RelativeLayout#ALIGN_PARENT_START_E@), then the layout direction must be resolved using @B_android#widget#RelativeLayout#LayoutParams#resolveLayoutDirection_E@ before calling @B_android#widget#RelativeLayout#LayoutParams#getRule_E@ an absolute rule (ex. @B_android#widget#RelativeLayout#ALIGN_PARENT_LEFT_E@.", "history": "Added in API level 1", "FullName": "public void addRule (int verb)"}}, "Inheritance": ["@B_android#view#ViewGroup#LayoutParams_E@", "@B_android#view#ViewGroup#MarginLayoutParams_E@"], "ClassName": "android.widget.RelativeLayout.LayoutParams", "ClassDesc": "Specifies how a view is positioned within a @B_android#widget#RelativeLayout_E@. The relative layout containing the view uses the value of these layout parameters to determine where to position the view on the screen. If the view is not contained within a relative layout, these attributes are ignored. See the"}