{"Functions": {"ArraySet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArraySet with items from the given collection.", "history": "Added in API level 29", "FullName": "public ArraySet (Collection<? extends E> set)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an @B_android#util#ArraySet#add_E@ of all values in", "history": "added in API level 23", "FullName": "public boolean addAll (Collection<? extends E> collection)"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: A predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all values that satisfy the predicate. This implementation avoids using the @B_android#util#ArraySet#iterator_E@.", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "removeAll(android.util.ArraySet<? extends E>)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#util#ArraySet_E@", "ArraySet: The array whose contents are to be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArraySet#remove_E@ of all values in", "history": "added in API level 23", "FullName": "public boolean removeAll (ArraySet<? extends E> array)"}, "removeAll(android.util.ArraySet<?extendsE>)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#util#ArraySet_E@", "ArraySet: The array whose contents are to be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArraySet#remove_E@ of all values in", "history": "Added in API level 23", "FullName": "public boolean removeAll (ArraySet<? extends E> array)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any values were removed from the array set, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to remove values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all values in the array set that exist in the given collection.", "history": "Added in API level 23", "FullName": "public boolean removeAll (Collection<?> collection)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make the array map empty. All storage is released.", "history": "Added in API level 23", "FullName": "public void clear ()"}, "removeAt(int)": {"Returns": [["E", "Returns the value that was stored at this index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArraySet#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the key/value mapping at the given index. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 23", "FullName": "public E removeAt (int index)"}, "valueAt(int)": {"Returns": [["E", "Returns the value stored at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#util#ArraySet#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value at the given index in the array. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 23", "FullName": "public E valueAt (int index)"}, "add(E)": {"Returns": [["boolean", "true if this set is modified, false otherwise."]], "Parameters": [["E", "E: the object to add."]], "Throws": [["@B_java#lang#ClassCastException_E@", "when the class of the object is inappropriate for this set."]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified object to this set. The set is not modified if it already contains the object.", "history": "Added in API level 23", "FullName": "public boolean add (E value)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an @B_java#util#Iterator_E@ over all values in the set.", "history": "Added in API level 23", "FullName": "public Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns false if the object is not a set, or if the sets have different sizes. Otherwise, for each value in this set, it checks to make sure the value also exists in the other set. If any value doesn't exist, the method returns false; otherwise, it returns true.", "history": "Added in API level 23", "FullName": "public boolean equals (Object object)"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensure the array map can hold at least", "history": "Added in API level 23", "FullName": "public void ensureCapacity (int minimumCapacity)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if this array set contains a value for every entry in collection, else returns false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be checked against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if the array set contains all of the values in the given collection.", "history": "Added in API level 23", "FullName": "public boolean containsAll (Collection<?> collection)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any values were removed from the array set, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to determine which values to keep."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all values in the array set that do", "history": "Added in API level 23", "FullName": "public boolean retainAll (Collection<?> collection)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 23", "FullName": "public int hashCode ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this collection"]], "Parameters": [["T[]", "T: the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#Collection#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose", "history": "Added in API level 23", "FullName": "public T[] toArray (T[] array)"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of items in this array map.", "history": "Added in API level 23", "FullName": "public int size ()"}, "indexOf(java.lang.Object)": {"Returns": [["int", "Returns the index of the value if it exists, else a negative integer."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The value to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of a value in the set.", "history": "Added in API level 23", "FullName": "public int indexOf (Object key)"}, "addAll(android.util.ArraySet<? extends E>)": {"Returns": [], "Parameters": [["@B_android#util#ArraySet_E@", "ArraySet: The array whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArraySet#add_E@ of all values in", "history": "added in API level 23", "FullName": "public void addAll (ArraySet<? extends E> array)"}, "ArraySet(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArraySet with a given initial capacity.", "history": "Added in API level 23", "FullName": "public ArraySet (int capacity)"}, "isEmpty()": {"Returns": [["boolean", "true if this collection contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the array map contains no items.", "history": "Added in API level 23", "FullName": "public boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this set was modified, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified object from this set.", "history": "Added in API level 23", "FullName": "public boolean remove (Object object)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: This implementation composes a string by iterating over its values. If this set contains itself as a value, the string \"(this Set)\" will appear in its place.", "history": "Added in API level 23", "FullName": "public String toString ()"}, "addAll(android.util.ArraySet<?extendsE>)": {"Returns": [], "Parameters": [["@B_android#util#ArraySet_E@", "ArraySet: The array whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#util#ArraySet#add_E@ of all values in", "history": "Added in API level 23", "FullName": "public void addAll (ArraySet<? extends E> array)"}, "ArraySet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty ArraySet. The default capacity of an array map is 0, and will grow once items are added to it.", "history": "Added in API level 23", "FullName": "public ArraySet ()"}, "ArraySet(android.util.ArraySet<E>)": {"Returns": [], "Parameters": [["@B_android#util#ArraySet_E@", "ArraySet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArraySet with the mappings from the given ArraySet.", "history": "Added in API level 23", "FullName": "public ArraySet (ArraySet<E> set)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an @B_android#util#ArraySet#add_E@ of all values in", "history": "Added in API level 23", "FullName": "public boolean addAll (Collection<? extends E> collection)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 23", "FullName": "public Object[] toArray ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "Returns true if the value exists, else false."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The value to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether a value exists in the set.", "history": "Added in API level 23", "FullName": "public boolean contains (Object key)"}}, "Inheritance": [], "ClassName": "android.util.ArraySet<E>", "ClassDesc": "ArraySet is a generic set data structure that is designed to be more memory efficient than a traditional @B_java#util#HashSet_E@. The design is very similar to @B_android#util#ArrayMap_E@, with all of the caveats described there. This implementation is separate from ArrayMap, however, so the Object array contains only one item for each entry in the set (instead of a pair for a mapping). Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashSet, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. Because this container is intended to better balance memory use, unlike most other standard Java containers it will shrink its array as items are removed from it. Currently you have no control over this shrinking -- if you set a capacity and then remove an item, it may reduce the capacity to better match the current size. In the future an explicit call to set the capacity should turn off this aggressive shrinking behavior."}