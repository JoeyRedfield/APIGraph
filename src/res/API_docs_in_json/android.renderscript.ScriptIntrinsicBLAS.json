{"Functions": {"CHER(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/d3/d6d/cher_8f.html", "history": "Added in API level 23", "FullName": "public void CHER (int Uplo, float alpha, Allocation X, int incX, Allocation A)"}, "ZGEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The type of transpose applied to matrix B. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T or op(X) = X**H Details: http://www.netlib.org/lapack/explore-html/d7/d76/zgemm_8f.html", "history": "Added in API level 23", "FullName": "public void ZGEMM (int TransA, int TransB, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "DTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/dc/d7e/dtrmv_8f.html", "history": "Added in API level 23", "FullName": "public void DTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DSYMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/dbe/dsymv_8f.html", "history": "Added in API level 23", "FullName": "public void DSYMV (int Uplo, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "CGEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The type of transpose applied to matrix B. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T or op(X) = X**H Details: http://www.netlib.org/lapack/explore-html/d6/d5b/cgemm_8f.html", "history": "Added in API level 23", "FullName": "public void CGEMM (int TransA, int TransB, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "DTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d6/d96/dtrsv_8f.html", "history": "Added in API level 23", "FullName": "public void DTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DTRSM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/de/da7/dtrsm_8f.html", "history": "Added in API level 23", "FullName": "public void DTRSM (int Side, int Uplo, int TransA, int Diag, double alpha, Allocation A, Allocation B)"}, "ZHEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHEMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/ddd/zhemv_8f.html", "history": "Added in API level 23", "FullName": "public void ZHEMV (int Uplo, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "ZHERK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHERK performs one of the hermitian rank k operations C := alpha*A*A**H + beta*C or C := alpha*A**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/db1/zherk_8f.html", "history": "Added in API level 23", "FullName": "public void ZHERK (int Uplo, int Trans, double alpha, Allocation A, double beta, Allocation C)"}, "SSPMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/d68/sspmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void SSPMV (int Uplo, float alpha, Allocation Ap, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "DTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/dc/dcd/dtpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "SSBMV(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d3/da1/ssbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void SSBMV (int Uplo, int K, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "ZHER2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/da/d8a/zher2_8f.html", "history": "Added in API level 23", "FullName": "public void ZHER2 (int Uplo, Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "SGBMV(int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d6/d46/sgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "Added in API level 23", "FullName": "public void SGBMV (int TransA, int KL, int KU, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "DTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTPSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d9/d84/dtpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "CHBMV(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/dc2/chbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CHBMV (int Uplo, int K, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "DTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTBSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d4/dcf/dtbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "CTRSM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/de/d30/ctrsm_8f.html", "history": "Added in API level 23", "FullName": "public void CTRSM (int Side, int Uplo, int TransA, int Diag, Float2 alpha, Allocation A, Allocation B)"}, "DSYR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d3/d60/dsyr_8f.html", "history": "Added in API level 23", "FullName": "public void DSYR (int Uplo, double alpha, Allocation X, int incX, Allocation A)"}, "ZGBMV(int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d9/d46/zgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZGBMV (int TransA, int KL, int KU, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "CGEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d4/d8a/cgemv_8f.html", "history": "Added in API level 23", "FullName": "public void CGEMV (int TransA, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "STRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d2a/strsv_8f.html", "history": "Added in API level 23", "FullName": "public void STRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "STPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STPMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/db/db1/stpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void STPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "ZSYR2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d20/zsyr2k_8f.html", "history": "Added in API level 23", "FullName": "public void ZSYR2K (int Uplo, int Trans, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "ZHPR2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPR2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/d5/d52/zhpr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZHPR2 (int Uplo, Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "ZSYMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d51/zsymm_8f.html", "history": "Added in API level 23", "FullName": "public void ZSYMM (int Side, int Uplo, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "SSYR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/db/d99/ssyr2_8f.html", "history": "Added in API level 23", "FullName": "public void SSYR2 (int Uplo, float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "SSYMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d7/d42/ssymm_8f.html", "history": "Added in API level 23", "FullName": "public void SSYMM (int Side, int Uplo, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "ZHER(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/de/d0e/zher_8f.html", "history": "Added in API level 23", "FullName": "public void ZHER (int Uplo, double alpha, Allocation X, int incX, Allocation A)"}, "ZTRMM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d8/de1/ztrmm_8f.html", "history": "Added in API level 23", "FullName": "public void ZTRMM (int Side, int Uplo, int TransA, int Diag, Double2 alpha, Allocation A, Allocation B)"}, "ZTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d1/d2f/ztrsv_8f.html", "history": "Added in API level 23", "FullName": "public void ZTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "CTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTBSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d9/d5f/ctbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "CTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d4/dc8/ctrsv_8f.html", "history": "Added in API level 23", "FullName": "public void CTRSV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DTRMM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/dd/d19/dtrmm_8f.html", "history": "Added in API level 23", "FullName": "public void DTRMM (int Side, int Uplo, int TransA, int Diag, double alpha, Allocation A, Allocation B)"}, "CHPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPR performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/db/dcd/chpr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CHPR (int Uplo, float alpha, Allocation X, int incX, Allocation Ap)"}, "CHER2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/db/d87/cher2_8f.html", "history": "Added in API level 23", "FullName": "public void CHER2 (int Uplo, Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "ZTRSM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d1/d39/ztrsm_8f.html", "history": "Added in API level 23", "FullName": "public void ZTRSM (int Side, int Uplo, int TransA, int Diag, Double2 alpha, Allocation A, Allocation B)"}, "ZHER2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHER2K performs one of the hermitian rank 2k operations C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C or C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d7/dfa/zher2k_8f.html", "history": "Added in API level 23", "FullName": "public void ZHER2K (int Uplo, int Trans, Double2 alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "DSYRK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/dc/d05/dsyrk_8f.html", "history": "Added in API level 23", "FullName": "public void DSYRK (int Uplo, int Trans, double alpha, Allocation A, double beta, Allocation C)"}, "CTRMM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T or op(A) = A**H Details: http://www.netlib.org/lapack/explore-html/d4/d9b/ctrmm_8f.html", "history": "Added in API level 23", "FullName": "public void CTRMM (int Side, int Uplo, int TransA, int Diag, Float2 alpha, Allocation A, Allocation B)"}, "CTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/df/d78/ctrmv_8f.html", "history": "Added in API level 23", "FullName": "public void CTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "STRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/de/d45/strmv_8f.html", "history": "Added in API level 23", "FullName": "public void STRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DGBMV(int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d3f/dgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DGBMV (int TransA, int KL, int KU, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "SSPR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/db/d3e/sspr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void SSPR2 (int Uplo, float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "ZTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTPSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/da/d57/ztpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "ZHEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHEMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d6/d3e/zhemm_8f.html", "history": "Added in API level 23", "FullName": "public void ZHEMM (int Side, int Uplo, Double2 alpha, Allocation A, Allocation B, Double2 beta, Allocation C)"}, "DGEMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The type of transpose applied to matrix B. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T Details: http://www.netlib.org/lapack/explore-html/d7/d2b/dgemm_8f.html", "history": "Added in API level 23", "FullName": "public void DGEMM (int TransA, int TransB, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "DSPR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/dd/d9e/dspr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DSPR2 (int Uplo, double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "DTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/df/d29/dtbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "ZTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d2/d9e/ztpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "STRMM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRMM performs one of the matrix-matrix operations B := alpha*op(A)*B or B := alpha*B*op(A) op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/df/d01/strmm_8f.html", "history": "Added in API level 23", "FullName": "public void STRMM (int Side, int Uplo, int TransA, int Diag, float alpha, Allocation A, Allocation B)"}, "CGERC(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGERC performs the rank 1 operation A := alpha*x*y**H + A Details: http://www.netlib.org/lapack/explore-html/dd/d84/cgerc_8f.html", "history": "Added in API level 23", "FullName": "public void CGERC (Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "DSYMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d8/db0/dsymm_8f.html", "history": "Added in API level 23", "FullName": "public void DSYMM (int Side, int Uplo, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "DGER(double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGER performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/dc/da8/dger_8f.html", "history": "Added in API level 23", "FullName": "public void DGER (double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "SSYRK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d0/d40/ssyrk_8f.html", "history": "Added in API level 23", "FullName": "public void SSYRK (int Uplo, int Trans, float alpha, Allocation A, float beta, Allocation C)"}, "DGEMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/dc/da8/dgemv_8f.html", "history": "Added in API level 23", "FullName": "public void DGEMV (int TransA, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "CHPMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d06/chpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CHPMV (int Uplo, Float2 alpha, Allocation Ap, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "SGEMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The type of transpose applied to matrix B. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGEMM performs one of the matrix-matrix operations C := alpha*op(A)*op(B) + beta*C where op(X) is one of op(X) = X or op(X) = X**T Details: http://www.netlib.org/lapack/explore-html/d4/de2/sgemm_8f.html", "history": "Added in API level 23", "FullName": "public void SGEMM (int TransA, int TransB, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "ZGERU(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGERU performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/d7/d12/zgeru_8f.html", "history": "Added in API level 23", "FullName": "public void ZGERU (Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "ZHBMV(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d3/d1a/zhbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZHBMV (int Uplo, int K, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "CGERU(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGERU performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/db/d5f/cgeru_8f.html", "history": "Added in API level 23", "FullName": "public void CGERU (Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "create(android.renderscript.RenderScript)": {"Returns": [["@B_android#renderscript#ScriptIntrinsicBLAS_E@", "ScriptIntrinsicBLAS"]], "Parameters": [["@B_android#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intrinsic to access BLAS subroutines.", "history": "Added in API level 23", "FullName": "public static ScriptIntrinsicBLAS create (RenderScript rs)"}, "DSPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/dd/dba/dspr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DSPR (int Uplo, double alpha, Allocation X, int incX, Allocation Ap)"}, "STBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STBMV performs one of the matrix-vector operations x := A*x or x := A**T*x Details: http://www.netlib.org/lapack/explore-html/d6/d7d/stbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void STBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "SSYR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d6/dac/ssyr_8f.html", "history": "Added in API level 23", "FullName": "public void SSYR (int Uplo, float alpha, Allocation X, int incX, Allocation A)"}, "DSBMV(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the band matrix A is being supplied. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSBMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d8/d1e/dsbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DSBMV (int Uplo, int K, double alpha, Allocation A, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "STBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STBSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d1f/stbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void STBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "SGEMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/d58/sgemv_8f.html", "history": "Added in API level 23", "FullName": "public void SGEMV (int TransA, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "ZHPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPR performs the rank 1 operation A := alpha*x*x**H + A Details: http://www.netlib.org/lapack/explore-html/de/de1/zhpr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZHPR (int Uplo, double alpha, Allocation X, int incX, Allocation Ap)"}, "ZSYRK(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/de/d54/zsyrk_8f.html", "history": "Added in API level 23", "FullName": "public void ZSYRK (int Uplo, int Trans, Double2 alpha, Allocation A, Double2 beta, Allocation C)"}, "CHEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHEMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d3/d66/chemm_8f.html", "history": "Added in API level 23", "FullName": "public void CHEMM (int Side, int Uplo, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "STPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STPSV solves one of the systems of equations A*x = b or A**T*x = b Details: http://www.netlib.org/lapack/explore-html/d0/d7c/stpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void STPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "CHEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHEMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d7/d51/chemv_8f.html", "history": "Added in API level 23", "FullName": "public void CHEMV (int Uplo, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "CTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTPSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d8/d56/ctpsv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CTPSV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "DSPMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d4/d85/dspmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void DSPMV (int Uplo, double alpha, Allocation Ap, Allocation X, int incX, double beta, Allocation Y, int incY)"}, "SSYR2K(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/df/d3d/ssyr2k_8f.html", "history": "Added in API level 23", "FullName": "public void SSYR2K (int Uplo, int Trans, float alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "CSYRK(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYRK performs one of the symmetric rank k operations C := alpha*A*A**T + beta*C or C := alpha*A**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d3/d6a/csyrk_8f.html", "history": "Added in API level 23", "FullName": "public void CSYRK (int Uplo, int Trans, Float2 alpha, Allocation A, Float2 beta, Allocation C)"}, "SSPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSPR performs the rank 1 operation A := alpha*x*x**T + A Details: http://www.netlib.org/lapack/explore-html/d2/d9b/sspr_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void SSPR (int Uplo, float alpha, Allocation X, int incX, Allocation Ap)"}, "SGER(float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SGER performs the rank 1 operation A := alpha*x*y**T + A Details: http://www.netlib.org/lapack/explore-html/db/d5c/sger_8f.html", "history": "Added in API level 23", "FullName": "public void SGER (float alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "CTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d3/dcd/ctbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "ZHPMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZHPMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/d60/zhpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZHPMV (int Uplo, Double2 alpha, Allocation Ap, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "ZTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTRMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d0/dd1/ztrmv_8f.html", "history": "Added in API level 23", "FullName": "public void ZTRMV (int Uplo, int TransA, int Diag, Allocation A, Allocation X, int incX)"}, "DSYR2K(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F64_E@."], ["double", "double: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/dec/dsyr2k_8f.html", "history": "Added in API level 23", "FullName": "public void DSYR2K (int Uplo, int Trans, double alpha, Allocation A, Allocation B, double beta, Allocation C)"}, "ZGEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Double2_E@", "Double2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGEMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/db/d40/zgemv_8f.html", "history": "Added in API level 23", "FullName": "public void ZGEMV (int TransA, Double2 alpha, Allocation A, Allocation X, int incX, Double2 beta, Allocation Y, int incY)"}, "CHPR2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be supplied in the packed form. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHPR2 performs the symmetric rank 2 operation A := alpha*x*y**H + alpha*y*x**H + A Details: http://www.netlib.org/lapack/explore-html/d6/d44/chpr2_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CHPR2 (int Uplo, Float2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation Ap)"}, "DSYR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["double", "double: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DSYR2 performs the symmetric rank 2 operation A := alpha*x*y**T + alpha*y*x**T + A Details: http://www.netlib.org/lapack/explore-html/de/d41/dsyr2_8f.html", "history": "Added in API level 23", "FullName": "public void DSYR2 (int Uplo, double alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "CGBMV(int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: The number of sub-diagonals of the matrix A."], ["int", "int: The number of super-diagonals of the matrix A."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains the band matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CGBMV performs one of the matrix-vector operations y := alpha*A*x + beta*y or y := alpha*A**T*x + beta*y or y := alpha*A**H*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d0/d75/cgbmv_8f.html Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N), but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an example showing how to convert the original matrix 'a' to row-based band matrix 'b'. for i in range(0, m): for j in range(max(0, i-kl), min(i+ku+1, n)): b[i, j-i+kl] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CGBMV (int TransA, int KL, int KU, Float2 alpha, Allocation A, Allocation X, int incX, Float2 beta, Allocation Y, int incY)"}, "ZTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTBMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d3/d39/ztbmv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZTBMV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "SSYMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F32_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "SSYMV performs the matrix-vector operation y := alpha*A*x + beta*y Details: http://www.netlib.org/lapack/explore-html/d2/d94/ssymv_8f.html", "history": "Added in API level 23", "FullName": "public void SSYMV (int Uplo, float alpha, Allocation A, Allocation X, int incX, float beta, Allocation Y, int incY)"}, "STRSM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether matrix A is upper or lower triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STRSM solves one of the matrix equations op(A)*X := alpha*B or X*op(A) := alpha*B op(A) is one of op(A) = A or op(A) = A**T Details: http://www.netlib.org/lapack/explore-html/d2/d8b/strsm_8f.html", "history": "Added in API level 23", "FullName": "public void STRSM (int Side, int Uplo, int TransA, int Diag, float alpha, Allocation A, Allocation B)"}, "CHER2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHER2K performs one of the hermitian rank 2k operations C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C or C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d1/d82/cher2k_8f.html", "history": "Added in API level 23", "FullName": "public void CHER2K (int Uplo, int Trans, Float2 alpha, Allocation A, Allocation B, float beta, Allocation C)"}, "CSYMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the symmetric matrix A appears on the left or right. Value is @B_android#renderscript#ScriptIntrinsicBLAS#LEFT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#RIGHT_E@"], ["int", "int: Specifies whether the upper or lower triangular part is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYMM performs one of the matrix-matrix operations C := alpha*A*B + beta*C or C := alpha*B*A + beta*C Details: http://www.netlib.org/lapack/explore-html/db/d59/csymm_8f.html", "history": "Added in API level 23", "FullName": "public void CSYMM (int Side, int Uplo, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}, "CHERK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["float", "float: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["float", "float: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CHERK performs one of the hermitian rank k operations C := alpha*A*A**H + beta*C or C := alpha*A**H*A + beta*C Details: http://www.netlib.org/lapack/explore-html/d8/d52/cherk_8f.html", "history": "Added in API level 23", "FullName": "public void CHERK (int Uplo, int Trans, float alpha, Allocation A, float beta, Allocation C)"}, "CTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains packed matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CTPMV performs one of the matrix-vector operations x := A*x or x := A**T*x or x := A**H*x Details: http://www.netlib.org/lapack/explore-html/d4/dbb/ctpmv_8f.html Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2, The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to packed matrix 'b'. k = 0 for i in range(0, n): for j in range(i, n): b[k++] = a[i, j]", "history": "Added in API level 23", "FullName": "public void CTPMV (int Uplo, int TransA, int Diag, Allocation Ap, Allocation X, int incX)"}, "ZTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the matrix is an upper or lower triangular matrix. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to matrix A. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["int", "int: Specifies whether or not A is unit triangular. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NON_UNIT_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#UNIT_E@"], ["int", "int: The number of off-diagonals of the matrix A"], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZTBSV solves one of the systems of equations A*x = b or A**T*x = b or A**H*x = b Details: http://www.netlib.org/lapack/explore-html/d4/d5a/ztbsv_8f.html Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N), but only the region N*(K+1) will be referenced. The following subroutine can is an example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'. for i in range(0, n): for j in range(i, min(i+k+1, n)): b[i, j-i] = a[i, j]", "history": "Added in API level 23", "FullName": "public void ZTBSV (int Uplo, int TransA, int Diag, int K, Allocation A, Allocation X, int incX)"}, "ZGERC(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#renderscript#Double2_E@", "Double2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector x, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector x, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains vector y, supported elements type @B_android#renderscript#Element#F64_2_E@."], ["int", "int: The increment for the elements of vector y, must be larger than zero."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F64_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ZGERC performs the rank 1 operation A := alpha*x*y**H + A Details: http://www.netlib.org/lapack/explore-html/d3/dad/zgerc_8f.html", "history": "Added in API level 23", "FullName": "public void ZGERC (Double2 alpha, Allocation X, int incX, Allocation Y, int incY, Allocation A)"}, "CSYR2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["int", "int: Specifies whether the upper or lower triangular part of C is to be referenced. Value is @B_android#renderscript#ScriptIntrinsicBLAS#UPPER_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#LOWER_E@"], ["int", "int: The type of transpose applied to the operation. Value is @B_android#renderscript#ScriptIntrinsicBLAS#NO_TRANSPOSE_E@, @B_android#renderscript#ScriptIntrinsicBLAS#TRANSPOSE_E@, or @B_android#renderscript#ScriptIntrinsicBLAS#CONJ_TRANSPOSE_E@"], ["@B_android#renderscript#Float2_E@", "Float2: The scalar alpha."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix A, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix B, supported elements type @B_android#renderscript#Element#F32_2_E@."], ["@B_android#renderscript#Float2_E@", "Float2: The scalar beta."], ["@B_android#renderscript#Allocation_E@", "Allocation: The input allocation contains matrix C, supported elements type @B_android#renderscript#Element#F32_2_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CSYR2K performs one of the symmetric rank 2k operations C := alpha*A*B**T + alpha*B*A**T + beta*C or C := alpha*A**T*B + alpha*B**T*A + beta*C Details: http://www.netlib.org/lapack/explore-html/de/d7e/csyr2k_8f.html", "history": "Added in API level 23", "FullName": "public void CSYR2K (int Uplo, int Trans, Float2 alpha, Allocation A, Allocation B, Float2 beta, Allocation C)"}}, "Inheritance": ["@B_android#renderscript#BaseObj_E@", "@B_android#renderscript#Script_E@", "@B_android#renderscript#ScriptIntrinsic_E@"], "ClassName": "android.renderscript.ScriptIntrinsicBLAS", "ClassDesc": "ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/"}