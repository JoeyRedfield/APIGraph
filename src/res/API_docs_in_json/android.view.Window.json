{"Functions": {"setSustainedPerformanceMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setSustainedPerformanceMode (boolean enable)"}, "togglePanel(int,android.view.KeyEvent)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void togglePanel (int featureId, KeyEvent event)"}, "performPanelShortcut(int,int,android.view.KeyEvent,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract boolean performPanelShortcut (int featureId, int keyCode, KeyEvent event, int flags)"}, "setChildDrawable(int,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void setChildDrawable (int featureId, Drawable drawable)"}, "setResizingCaptionDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable that is drawn underneath the caption during the resizing. During the resizing the caption might not be drawn fast enough to match the new dimensions. There is a second caption drawn underneath it that will be fast enough. By default the caption is constructed from the theme. You can provide a drawable, that will be drawn instead to better match your application.", "history": "Added in API level 24", "FullName": "public abstract void setResizingCaptionDrawable (Drawable drawable)"}, "getContentScene()": {"Returns": [["@B_android#transition#Scene_E@", "Current Scene being shown or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#transition#Scene_E@ representing this window's current content. Requires @B_android#view#Window#FEATURE_CONTENT_TRANSITIONS_E@. This method will return null if the current content is not represented by a Scene.", "history": "Added in API level 21", "FullName": "public Scene getContentScene ()"}, "clearFlags(int)": {"Returns": [], "Parameters": [["int", "int: The flag bits to be cleared."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setFlags_E@", "@B_android#view#Window#addFlags_E@"], "Permissions": [], "Description": "Convenience function to clear the flag bits as specified in flags, as per @B_android#view#Window#setFlags_E@.", "history": "Added in API level 1", "FullName": "public void clearFlags (int flags)"}, "setUiOptions(int,int)": {"Returns": [], "Parameters": [["int", "int: Flags specifying extra options for this window."], ["int", "int: Flags specifying which options should be modified. Others will remain unchanged."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set extra options that will influence the UI for this window. Only the bits filtered by mask will be modified.", "history": "Added in API level 14", "FullName": "public void setUiOptions (int uiOptions, int mask)"}, "findViewById(int)": {"Returns": [["T", "a view with given ID if found, or null otherwise"]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#findViewById_E@", "@B_android#view#Window#requireViewById_E@"], "Permissions": [], "Description": "Finds a view that was identified by the android:id XML attribute that was processed in @B_android#app#Activity#onCreate_E@. This will implicitly call @B_android#view#Window#getDecorView_E@ with all of the associated side-effects.", "history": "Added in API level 1", "FullName": "public T findViewById (int id)"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The new Drawable to use for this window's background."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the background of this window to a custom Drawable. Setting the background to null will make the window be opaque. To make the window transparent, you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.)", "history": "Added in API level 1", "FullName": "public abstract void setBackgroundDrawable (Drawable drawable)"}, "getColorMode()": {"Returns": [["int", "Value is @B_android#content#pm#ActivityInfo#COLOR_MODE_DEFAULT_E@, @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@, or @B_android#content#pm#ActivityInfo#COLOR_MODE_HDR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Window#setColorMode_E@", "@B_android#view#Display#isWideColorGamut_E@", "@B_android#content#res#Configuration#isScreenWideColorGamut_E@"], "Permissions": [], "Description": "Returns the requested color mode of the window, one of @B_android#content#pm#ActivityInfo#COLOR_MODE_DEFAULT_E@, @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@ or @B_android#content#pm#ActivityInfo#COLOR_MODE_HDR_E@. If @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@ was requested it is possible the window will not be put in wide color gamut mode depending on device and display support for that mode. Use @B_android#view#Window#isWideColorGamut_E@ to determine if the window is currently in wide color gamut mode.", "history": "Added in API level 26", "FullName": "public int getColorMode ()"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should be called when the configuration is changed.", "history": "Added in API level 1", "FullName": "public abstract void onConfigurationChanged (Configuration newConfig)"}, "setFeatureInt(int,int)": {"Returns": [], "Parameters": [["int", "int: The desired feature to change. Features are constants defined by Window."], ["int", "int: The value for the feature. The interpretation of this value is feature-specific."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the integer value for a feature. The range of the value depends on the feature being set. For @B_android#view#Window#FEATURE_PROGRESS_E@, it should go from 0 to 10000. At 10000 the progress is complete and the indicator hidden.", "history": "Added in API level 1", "FullName": "public abstract void setFeatureInt (int featureId, int value)"}, "setDefaultWindowFormat(int)": {"Returns": [], "Parameters": [["int", "int: The new window format (see PixelFormat)."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Set the default format of window, as per the PixelFormat types. This is the format that will be used unless the client specifies in explicit format with setFormat();", "history": "Added in API level 1", "FullName": "protected void setDefaultWindowFormat (int format)"}, "getSharedElementExitTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getSharedElementExitTransition ()"}, "setWindowAnimations(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify custom animations to use for the window, as per @B_android#view#WindowManager#LayoutParams#windowAnimations_E@. Providing anything besides 0 here will override the animations the window would normally retrieve from its theme.", "history": "Added in API level 3", "FullName": "public void setWindowAnimations (int resId)"}, "getSharedElementsUseOverlay()": {"Returns": [["boolean", "true when shared elements should use an Overlay during shared element transitions or false when they should animate as part of the normal View hierarchy."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true when shared elements should use an Overlay during shared element transitions or false when they should animate as part of the normal View hierarchy. The default value is true.", "history": "Added in API level 21", "FullName": "public boolean getSharedElementsUseOverlay ()"}, "togglePanel(int, android.view.KeyEvent)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract void togglePanel (int featureId, KeyEvent event)"}, "setChildInt(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void setChildInt (int featureId, int value)"}, "onActive()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected abstract void onActive ()"}, "setSharedElementReturnTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements transferred out of the content Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred back to a calling Activity. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. If no value is set, the default will be to use the same value as @B_android#view#Window#setSharedElementEnterTransition_E@. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setSharedElementReturnTransition (Transition transition)"}, "getFeatures()": {"Returns": [["int", "int The feature bits."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the feature bits that are enabled. This is the set of features that were given to requestFeature(), and are being handled by this Window itself or its container. That is, it is the set of requested features that you can actually use. To do: add a public version of this API that allows you to check for features by their feature ID.", "history": "Added in API level 1", "FullName": "protected final int getFeatures ()"}, "getForcedWindowFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the window flags that have been explicitly set by the client, so will not be modified by @B_android#view#Window#getDecorView_E@.", "history": "Added in API level 1", "FullName": "protected final int getForcedWindowFlags ()"}, "getReturnTransition()": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to use to move Views out of the Scene when the Window is preparing to close."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to @B_android#app#Activity#finishAfterTransition_E@. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@.", "history": "Added in API level 21", "FullName": "public Transition getReturnTransition ()"}, "hasSoftInputMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Has the app specified their own soft input mode?", "history": "Added in API level 3", "FullName": "protected final boolean hasSoftInputMode ()"}, "getEnterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views into the initial Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the transition used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@. If transition is null, entering Views will remain unaffected. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getEnterTransition ()"}, "getTransitionBackgroundFadeDuration()": {"Returns": [["long", "The duration of the window background fade to opaque during enter transition."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Window#getEnterTransition_E@"], "Permissions": [], "Description": "Returns the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition. When executing the enter transition, the background starts transparent and fades in. This requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@. The default is 300 milliseconds.", "history": "Added in API level 21", "FullName": "public long getTransitionBackgroundFadeDuration ()"}, "closeAllPanels()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void closeAllPanels ()"}, "setFeatureDrawableAlpha(int, int)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change. Features are constants defined by Window."], ["int", "int: The alpha amount, 0 is completely transparent and 255 is completely opaque."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a custom alpha value for the given drawable feature, controlling how much the background is visible through it.", "history": "added in API level 1", "FullName": "public abstract void setFeatureDrawableAlpha (int featureId, int alpha)"}, "setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager_E@", "WindowManager: The window manager for adding new windows."], ["@B_android#os#IBinder_E@", "IBinder no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the window manager for use by this Window to, for example, display panels. This is not used for displaying the Window itself -- that must be done by the client.", "history": "Added in API level 11", "FullName": "public void setWindowManager (WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: The desired gravity constant."]], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@", "@B_android#view#Window#setLayout_E@"], "Permissions": [], "Description": "Set the gravity of the window, as per the Gravity constants. This controls how the window manager is positioned in the overall window; it is only useful when using WRAP_CONTENT for the layout width or height.", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity)"}, "setClipToOutline(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether window content should be clipped to the outline of the window background."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setClipToOutline_E@", "@B_android#R#styleable#Window_windowClipToOutline_E@"], "Permissions": [], "Description": "Sets whether window content should be clipped to the outline of the window background.", "history": "Added in API level 22", "FullName": "public void setClipToOutline (boolean clipToOutline)"}, "hasFeature(int)": {"Returns": [["boolean", "true if the feature is enabled, false otherwise."]], "Parameters": [["int", "int: The feature ID to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query for the availability of a certain feature.", "history": "Added in API level 11", "FullName": "public boolean hasFeature (int feature)"}, "setFeatureDrawableResource(int,int)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change, defined as a constant by Window."], ["int", "int: Resource identifier of the desired image."]], "Throws": [], "SeeAlso": ["@B_android#content#res#Resources#getDrawable_E@"], "Permissions": [], "Description": "Set the value for a drawable feature of this window, from a resource identifier. You must have called requestFeature(featureId) before calling this function.", "history": "Added in API level 1", "FullName": "public abstract void setFeatureDrawableResource (int featureId, int resId)"}, "Window(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Window (Context context)"}, "setContainer(android.view.Window)": {"Returns": [], "Parameters": [["@B_android#view#Window_E@", "Window: The desired containing Window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the container for this window. If not set, the DecorWindow operates as a top-level window; otherwise, it negotiates with the container to display itself appropriately.", "history": "Added in API level 1", "FullName": "public void setContainer (Window container)"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void setTitle (CharSequence title)"}, "injectInputEvent(android.view.InputEvent)": {"Returns": [], "Parameters": [["@B_android#view#InputEvent_E@", "InputEvent: A key or touch event to inject to this window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inject an event to window locally.", "history": "Added in API level 19", "FullName": "public void injectInputEvent (InputEvent event)"}, "setSharedElementEnterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements transferred into the content Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred into the content Scene. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setSharedElementEnterTransition (Transition transition)"}, "isActive()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final boolean isActive ()"}, "setStatusBarContrastEnforced(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#R#attr#enforceStatusBarContrast_E@", "@B_android#view#Window#isStatusBarContrastEnforced_E@", "@B_android#view#Window#setStatusBarColor_E@"], "Permissions": [], "Description": "Sets whether the system should ensure that the status bar has enough contrast when a fully transparent background is requested. If set to this value, the system will determine whether a scrim is necessary to ensure that the status bar has enough contrast with the contents of this app, and set an appropriate effective bar background color accordingly. When the status bar color has a non-zero alpha value, the value of this property has no effect.", "history": "Added in API level 29", "FullName": "public void setStatusBarContrastEnforced (boolean ensureContrast)"}, "setExitTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views out of the scene when calling a new Activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when starting a new Activity. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setExitTransition (Transition transition)"}, "setFeatureDrawableAlpha(int,int)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change. Features are constants defined by Window."], ["int", "int: The alpha amount, 0 is completely transparent and 255 is completely opaque."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a custom alpha value for the given drawable feature, controlling how much the background is visible through it.", "history": "Added in API level 1", "FullName": "public abstract void setFeatureDrawableAlpha (int featureId, int alpha)"}, "setFeatureDrawableResource(int, int)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change, defined as a constant by Window."], ["int", "int: Resource identifier of the desired image."]], "Throws": [], "SeeAlso": ["@B_android#content#res#Resources#getDrawable_E@"], "Permissions": [], "Description": "Set the value for a drawable feature of this window, from a resource identifier. You must have called requestFeature(featureId) before calling this function.", "history": "added in API level 1", "FullName": "public abstract void setFeatureDrawableResource (int featureId, int resId)"}, "getAttributes()": {"Returns": [["@B_android#view#WindowManager#LayoutParams_E@", "WindowManager.LayoutParams Either the existing window attributes object, or a freshly created one if there is none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current window attributes associated with this panel.", "history": "Added in API level 1", "FullName": "public final WindowManager.LayoutParams getAttributes ()"}, "setNavigationBarColor(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the color of the navigation bar to . For this to take effect, the window must be drawing the system bar backgrounds with @B_android#view#WindowManager#LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS_E@ and @B_android#view#WindowManager#LayoutParams#FLAG_TRANSLUCENT_NAVIGATION_E@ must not be set. If is not opaque, consider setting @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_STABLE_E@ and @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_E@. The transitionName for the view background will be \"android:navigation:background\".", "history": "Added in API level 21", "FullName": "public abstract void setNavigationBarColor (int color)"}, "setLocalFocus(boolean,boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether this window has focus or not."], ["boolean", "boolean: Whether this window is in touch mode or not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set focus locally. The window should have the @B_android#view#WindowManager#LayoutParams#FLAG_LOCAL_FOCUS_MODE_E@ flag set already.", "history": "Added in API level 19", "FullName": "public void setLocalFocus (boolean hasFocus, boolean inTouchMode)"}, "getAllowReturnTransitionOverlap()": {"Returns": [["boolean", "true when the transition should start when possible or false when it should wait until the called Activity's exiting transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns how the transition set in @B_android#view#Window#setExitTransition_E@ overlaps with the exit transition of the called Activity when reentering after if finishes. When true, the transition will start as soon as possible. When false, the transition will wait until the called Activity's exiting transition completes before starting. The default value is true.", "history": "Added in API level 21", "FullName": "public boolean getAllowReturnTransitionOverlap ()"}, "getNavigationBarColor()": {"Returns": [["int", "the color of the navigation bar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public abstract int getNavigationBarColor ()"}, "openPanel(int, android.view.KeyEvent)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract void openPanel (int featureId, KeyEvent event)"}, "getSharedElementReturnTransition()": {"Returns": [["@B_android#transition#Transition_E@", "Transition to use for sharend elements transferred into the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used for shared elements transferred back to a calling Activity. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getSharedElementReturnTransition ()"}, "setRestrictedCaptionAreaListener(android.view.Window.OnRestrictedCaptionAreaChangedListener)": {"Returns": [], "Parameters": [["@B_android#view#Window#OnRestrictedCaptionAreaChangedListener_E@", "Window.OnRestrictedCaptionAreaChangedListener: Callback that will be called when the area changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a callback for changes of area where caption will draw its content.", "history": "Added in API level 24", "FullName": "public final void setRestrictedCaptionAreaListener (Window.OnRestrictedCaptionAreaChangedListener listener)"}, "setFeatureDrawableUri(int,android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change. Features are constants defined by Window."], ["@B_android#net#Uri_E@", "Uri: The desired URI."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageURI_E@"], "Permissions": [], "Description": "Set the value for a drawable feature of this window, from a URI. You must have called requestFeature(featureId) before calling this function. The only URI currently supported is \"content:\", specifying an image in a content provider.", "history": "Added in API level 1", "FullName": "public abstract void setFeatureDrawableUri (int featureId, Uri uri)"}, "setContentView(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID to be inflated."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setContentView_E@"], "Permissions": [], "Description": "Convenience for @B_android#view#Window#setContentView_E@ to set the screen content from a layout resource. The resource will be inflated, adding all top-level views to the screen.", "history": "Added in API level 1", "FullName": "public abstract void setContentView (int layoutResID)"}, "getReenterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to use to move Views into the scene when reentering from a previously-started Activity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views in to the scene when returning from a previously-started Activity. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getReenterTransition ()"}, "addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#view#Window#OnFrameMetricsAvailableListener_E@", "Window.OnFrameMetricsAvailableListener: This value must never be null."], ["@B_android#os#Handler_E@", "Handler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an observer to collect frame stats for each frame rendered in this window. Must be in hardware rendering mode.", "history": "Added in API level 24", "FullName": "public final void addOnFrameMetricsAvailableListener (Window.OnFrameMetricsAvailableListener listener, Handler handler)"}, "superDispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used by custom windows, such as Dialog, to pass the trackball event further down the view hierarchy. Application developers should not need to implement or call this.", "history": "Added in API level 1", "FullName": "public abstract boolean superDispatchTrackballEvent (MotionEvent event)"}, "setColorMode(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#content#pm#ActivityInfo#COLOR_MODE_DEFAULT_E@, @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@, or @B_android#content#pm#ActivityInfo#COLOR_MODE_HDR_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#Window#getColorMode_E@", "@B_android#view#Display#isWideColorGamut_E@", "@B_android#content#res#Configuration#isScreenWideColorGamut_E@"], "Permissions": [], "Description": "Sets the requested color mode of the window. The requested the color mode might override the window's pixel @B_android#view#WindowManager#LayoutParams#format_E@. The requested color mode must be one of @B_android#content#pm#ActivityInfo#COLOR_MODE_DEFAULT_E@, @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@ or @B_android#content#pm#ActivityInfo#COLOR_MODE_HDR_E@. The requested color mode is not guaranteed to be honored. Please refer to @B_android#view#Window#getColorMode_E@ for more information.", "history": "Added in API level 26", "FullName": "public void setColorMode (int colorMode)"}, "getSharedElementEnterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "Transition to use for sharend elements transferred into the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used for shared elements transferred into the content Scene. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getSharedElementEnterTransition ()"}, "takeInputQueue(android.view.InputQueue.Callback)": {"Returns": [], "Parameters": [["@B_android#view#InputQueue#Callback_E@", "InputQueue.Callback no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take ownership of this window's InputQueue. The window will no longer read and dispatch input events from the queue; it is your responsibility to do so.", "history": "Added in API level 9", "FullName": "public abstract void takeInputQueue (InputQueue.Callback callback)"}, "setFeatureDrawableUri(int, android.net.Uri)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change. Features are constants defined by Window."], ["@B_android#net#Uri_E@", "Uri: The desired URI."]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageURI_E@"], "Permissions": [], "Description": "Set the value for a drawable feature of this window, from a URI. You must have called requestFeature(featureId) before calling this function. The only URI currently supported is \"content:\", specifying an image in a content provider.", "history": "added in API level 1", "FullName": "public abstract void setFeatureDrawableUri (int featureId, Uri uri)"}, "getCurrentFocus()": {"Returns": [["@B_android#view#View_E@", "View The current View with focus or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the view in this Window that currently has focus, or null if there are none. Note that this does not look in any containing Window.", "history": "Added in API level 1", "FullName": "public abstract View getCurrentFocus ()"}, "takeKeyEvents(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that key events come to this activity. Use this if your activity has no views with focus, but the activity still wants a chance to process key events.", "history": "Added in API level 1", "FullName": "public abstract void takeKeyEvents (boolean get)"}, "getWindowStyle()": {"Returns": [["@B_android#content#res#TypedArray_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#R#styleable#Window_E@ attributes from this window's theme.", "history": "Added in API level 1", "FullName": "public final TypedArray getWindowStyle ()"}, "isNavigationBarContrastEnforced()": {"Returns": [["boolean", "true, if the system is ensuring contrast, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#R#attr#enforceNavigationBarContrast_E@", "@B_android#view#Window#setNavigationBarContrastEnforced_E@", "@B_android#view#Window#setNavigationBarColor_E@"], "Permissions": [], "Description": "Returns whether the system is ensuring that the navigation bar has enough contrast when a fully transparent background is requested. When the navigation bar color has a non-zero alpha value, the value of this property has no effect.", "history": "Added in API level 29", "FullName": "public boolean isNavigationBarContrastEnforced ()"}, "getDecorView()": {"Returns": [["@B_android#view#View_E@", "Returns the top-level window decor view. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager. Note that calling this function for the first time \"locks in\" various window characteristics as described in @B_android#view#Window#setContentView_E@.", "history": "Added in API level 1", "FullName": "public abstract View getDecorView ()"}, "setFeatureDrawable(int,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["int", "int: The desired drawable feature to change. Features are constants defined by Window."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: A Drawable object to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an explicit Drawable value for feature of this window. You must have called requestFeature(featureId) before calling this function.", "history": "Added in API level 1", "FullName": "public abstract void setFeatureDrawable (int featureId, Drawable drawable)"}, "performContextMenuIdentifierAction(int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract boolean performContextMenuIdentifierAction (int id, int flags)"}, "setFormat(int)": {"Returns": [], "Parameters": [["int", "int: The new window format (see PixelFormat). Use PixelFormat.UNKNOWN to allow the Window to select the format."]], "Throws": [], "SeeAlso": ["@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Set the format of window, as per the PixelFormat types. This overrides the default format that is selected by the Window based on its window decorations.", "history": "Added in API level 1", "FullName": "public void setFormat (int format)"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "LayoutInflater The shared LayoutInflater. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Quick access to the @B_android#view#LayoutInflater_E@ instance that this Window retrieved from its Context.", "history": "Added in API level 1", "FullName": "public abstract LayoutInflater getLayoutInflater ()"}, "getLocalFeatures()": {"Returns": [["int", "int The feature bits."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the feature bits that are being implemented by this Window. This is the set of features that were given to requestFeature(), and are being handled by only this Window itself, not by its containers.", "history": "Added in API level 1", "FullName": "protected final int getLocalFeatures ()"}, "isShortcutKey(int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the key code from @B_android#view#KeyEvent_E@ to check."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the @B_android#view#KeyEvent_E@ to use to help check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is a keypress one of the defined shortcut keys for this window.", "history": "added in API level 1", "FullName": "public abstract boolean isShortcutKey (int keyCode, KeyEvent event)"}, "setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager_E@", "WindowManager: The window manager for adding new windows."], ["@B_android#os#IBinder_E@", "IBinder no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the window manager for use by this Window to, for example, display panels. This is not used for displaying the Window itself -- that must be done by the client.", "history": "Added in API level 1", "FullName": "public void setWindowManager (WindowManager wm, IBinder appToken, String appName)"}, "setAttributes(android.view.WindowManager.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager#LayoutParams_E@", "WindowManager.LayoutParams: The new window attributes, which will completely override any current values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify custom window attributes. @B_android#view#Window#getAttributes_E@; you probably do not want to blindly create and apply your own, since this will blow away any values set by the framework that you are not interested in.", "history": "Added in API level 1", "FullName": "public void setAttributes (WindowManager.LayoutParams a)"}, "setTransitionManager(android.transition.TransitionManager)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionManager_E@", "TransitionManager: The TransitionManager to use for scene changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_android#transition#TransitionManager_E@ to use for default transitions in this window. Requires @B_android#view#Window#FEATURE_CONTENT_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setTransitionManager (TransitionManager tm)"}, "superDispatchGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used by custom windows, such as Dialog, to pass the generic motion event further down the view hierarchy. Application developers should not need to implement or call this.", "history": "Added in API level 12", "FullName": "public abstract boolean superDispatchGenericMotionEvent (MotionEvent event)"}, "setContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#getTransitionManager_E@", "@B_android#view#Window#setTransitionManager_E@"], "Permissions": [], "Description": "Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy. Note that calling this function \"locks in\" various characteristics of the window that can not, from this point forward, be changed: the features that have been requested with @B_android#view#Window#requestFeature_E@, and certain window flags as described in @B_android#view#Window#setFlags_E@. If @B_android#view#Window#FEATURE_CONTENT_TRANSITIONS_E@ is set, the window's TransitionManager will be used to animate content from the current content View to view.", "history": "Added in API level 1", "FullName": "public abstract void setContentView (View view, ViewGroup.LayoutParams params)"}, "setType(int)": {"Returns": [], "Parameters": [["int", "int: The new window type (see WindowManager.LayoutParams)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the type of the window, as per the WindowManager.LayoutParams types.", "history": "Added in API level 1", "FullName": "public void setType (int type)"}, "getVolumeControlStream()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#getVolumeControlStream_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract int getVolumeControlStream ()"}, "hasChildren()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final boolean hasChildren ()"}, "setChildInt(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract void setChildInt (int featureId, int value)"}, "setLocalFocus(boolean, boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether this window has focus or not."], ["boolean", "boolean: Whether this window is in touch mode or not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set focus locally. The window should have the @B_android#view#WindowManager#LayoutParams#FLAG_LOCAL_FOCUS_MODE_E@ flag set already.", "history": "added in API level 19", "FullName": "public void setLocalFocus (boolean hasFocus, boolean inTouchMode)"}, "setUiOptions(int)": {"Returns": [], "Parameters": [["int", "int: Flags specifying extra options for this window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set extra options that will influence the UI for this window.", "history": "Added in API level 14", "FullName": "public void setUiOptions (int uiOptions)"}, "getCallback()": {"Returns": [["@B_android#view#Window#Callback_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current Callback interface for this window.", "history": "Added in API level 1", "FullName": "public final Window.Callback getCallback ()"}, "getMediaController()": {"Returns": [["@B_android#media#session#MediaController_E@", "The controller which should receive events."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Window#setMediaController_E@", "@B_android#app#Activity#getMediaController_E@"], "Permissions": [], "Description": "Gets the @B_android#media#session#MediaController_E@ that was previously set.", "history": "Added in API level 21", "FullName": "public MediaController getMediaController ()"}, "setSharedElementReenterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements in the launching Window after the shared element has returned to the Window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location. If no value is set, this will default to @B_android#view#Window#setSharedElementExitTransition_E@. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setSharedElementReenterTransition (Transition transition)"}, "setReenterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views into the scene when reentering from a previously-started Activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views in to the scene when returning from a previously-started Activity. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. If nothing is set, the default will be to use the same transition as @B_android#view#Window#setExitTransition_E@. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setReenterTransition (Transition transition)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "Context The Context that was supplied to the constructor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Context this window policy is running in, for retrieving resources and other information.", "history": "Added in API level 1", "FullName": "public final Context getContext ()"}, "getDefaultFeatures(android.content.Context)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context used to access resources"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the feature bits set by default on a window.", "history": "Added in API level 22", "FullName": "public static int getDefaultFeatures (Context context)"}, "superDispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used by custom windows, such as Dialog, to pass the key press event further down the view hierarchy. Application developers should not need to implement or call this.", "history": "Added in API level 1", "FullName": "public abstract boolean superDispatchKeyEvent (KeyEvent event)"}, "requestFeature(int)": {"Returns": [["boolean", "The features that are now set."]], "Parameters": [["int", "int: The desired features, defined as constants by Window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable extended screen features. This must be called before setContentView(). May be called as many times as desired as long as it is before setContentView(). If not called, no extended features will be available. You can not turn off a feature once it is requested. You canot use other title features with @B_android#view#Window#FEATURE_CUSTOM_TITLE_E@.", "history": "Added in API level 1", "FullName": "public boolean requestFeature (int featureId)"}, "getContainer()": {"Returns": [["@B_android#view#Window_E@", "Window The containing window, or null if this is a top-level window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the container for this Window.", "history": "Added in API level 1", "FullName": "public final Window getContainer ()"}, "setDecorCaptionShade(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#Window_E@"], "Permissions": [], "Description": "Set what color should the caption controls be. By default the system will try to determine the color from the theme. You can overwrite this by using @B_android#view#Window#DECOR_CAPTION_SHADE_DARK_E@, @B_android#view#Window#DECOR_CAPTION_SHADE_LIGHT_E@, or @B_android#view#Window#DECOR_CAPTION_SHADE_AUTO_E@.", "history": "Added in API level 24", "FullName": "public abstract void setDecorCaptionShade (int decorCaptionShade)"}, "openPanel(int,android.view.KeyEvent)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void openPanel (int featureId, KeyEvent event)"}, "setElevation(float)": {"Returns": [], "Parameters": [["float", "float: The window elevation."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setElevation_E@", "@B_android#R#styleable#Window_windowElevation_E@"], "Permissions": [], "Description": "Sets the window elevation. Changes to this property take effect immediately and will cause the window surface to be recreated. This is an expensive operation and as a result, this property should not be animated.", "history": "Added in API level 22", "FullName": "public void setElevation (float elevation)"}, "addContentView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Layout parameters for the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Variation on @B_android#view#Window#setContentView_E@ to add an additional content view to the screen. Added after any existing ones in the screen -- existing views are NOT removed.", "history": "Added in API level 1", "FullName": "public abstract void addContentView (View view, ViewGroup.LayoutParams params)"}, "setAllowReturnTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the transition when possible or false to wait until the called Activity's exiting transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls how the transition set in @B_android#view#Window#setExitTransition_E@ overlaps with the exit transition of the called Activity when reentering after if finishes. When true, the transition will start as soon as possible. When false, the transition will wait until the called Activity's exiting transition completes before starting. The default value is true.", "history": "Added in API level 21", "FullName": "public void setAllowReturnTransitionOverlap (boolean allow)"}, "requireViewById(int)": {"Returns": [["T", "a view with given ID This value will never be null."]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": ["@B_android#view#View#requireViewById_E@", "@B_android#view#Window#findViewById_E@"], "Permissions": [], "Description": "Finds a view that was identified by the android:id XML attribute that was processed in @B_android#app#Activity#onCreate_E@, or throws an IllegalArgumentException if the ID is invalid, or there is no matching view in the hierarchy.", "history": "Added in API level 28", "FullName": "public final T requireViewById (int id)"}, "getNavigationBarDividerColor()": {"Returns": [["int", "The color of the navigation bar divider color."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Window#setNavigationBarColor_E@"], "Permissions": [], "Description": "Retrieves the color of the navigation bar divider.", "history": "Added in API level 28", "FullName": "public int getNavigationBarDividerColor ()"}, "peekDecorView()": {"Returns": [["@B_android#view#View_E@", "Returns the top-level window decor or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Window#getDecorView_E@"], "Permissions": [], "Description": "Retrieve the current decor view, but only if it has already been created; otherwise returns null.", "history": "Added in API level 1", "FullName": "public abstract View peekDecorView ()"}, "getWindowManager()": {"Returns": [["@B_android#view#WindowManager_E@", "WindowManager The ViewManager."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the window manager allowing this Window to display its own windows.", "history": "Added in API level 1", "FullName": "public WindowManager getWindowManager ()"}, "getSystemGestureExclusionRects()": {"Returns": [["@B_java#util#List_E@", "a list of system gesture exclusion rects specific to this window This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the list of areas within this window's coordinate space where the system should not intercept touch or other pointing device gestures. This is the list as set by @B_android#view#Window#setSystemGestureExclusionRects_E@ or an empty list if @B_android#view#Window#setSystemGestureExclusionRects_E@ has not been called. It does not include exclusion rects set by this window's view hierarchy.", "history": "Added in API level 29", "FullName": "public List<Rect> getSystemGestureExclusionRects ()"}, "setSharedElementsUseOverlay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates that shared elements should be transitioned with an Overlay or false to transition within the normal View hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether or not shared elements should use an Overlay during shared element transitions. The default value is true.", "history": "Added in API level 21", "FullName": "public void setSharedElementsUseOverlay (boolean sharedElementsUseOverlay)"}, "setLayout(int,int)": {"Returns": [], "Parameters": [["int", "int: The desired layout width of the window."], ["int", "int: The desired layout height of the window."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewGroup#LayoutParams#height_E@", "@B_android#view#ViewGroup#LayoutParams#width_E@"], "Permissions": [], "Description": "Set the width and height layout parameters of the window. The default for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute value to make a window that is not full-screen.", "history": "Added in API level 1", "FullName": "public void setLayout (int width, int height)"}, "setAllowEnterTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the enter transition when possible or false to wait until the exiting transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls how the transition set in @B_android#view#Window#setEnterTransition_E@ overlaps with the exit transition of the calling Activity. When true, the transition will start as soon as possible. When false, the transition will wait until the remote exiting transition completes before starting. The default value is true.", "history": "Added in API level 21", "FullName": "public void setAllowEnterTransitionOverlap (boolean allow)"}, "setVolumeControlStream(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#setVolumeControlStream_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void setVolumeControlStream (int streamType)"}, "superDispatchKeyShortcutEvent(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used by custom windows, such as Dialog, to pass the key shortcut press event further down the view hierarchy. Application developers should not need to implement or call this.", "history": "Added in API level 11", "FullName": "public abstract boolean superDispatchKeyShortcutEvent (KeyEvent event)"}, "setBackgroundDrawableResource(int)": {"Returns": [], "Parameters": [["int", "int: The resource identifier of a drawable resource which will be installed as the new background."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the background of this window to a Drawable resource. Setting the background to null will make the window be opaque. To make the window transparent, you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.)", "history": "Added in API level 1", "FullName": "public void setBackgroundDrawableResource (int resId)"}, "takeSurface(android.view.SurfaceHolder.Callback2)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder#Callback2_E@", "SurfaceHolder.Callback2 no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take ownership of this window's surface. The window's view hierarchy will no longer draw into the surface, though it will otherwise continue to operate (such as for receiving input events). The given SurfaceHolder callback will be used to tell you about state changes to the surface.", "history": "Added in API level 9", "FullName": "public abstract void takeSurface (SurfaceHolder.Callback2 callback)"}, "setFlags(int,int)": {"Returns": [], "Parameters": [["int", "int: The new window flags (see WindowManager.LayoutParams)."], ["int", "int: Which of the window flag bits to modify."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#addFlags_E@", "@B_android#view#Window#clearFlags_E@"], "Permissions": [], "Description": "Set the flags of the window, as per the @B_android#view#WindowManager#LayoutParams_E@ flags. Note that some flags must be set before the window decoration is created (by the first call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#getDecorView_E@: @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_IN_SCREEN_E@ and @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_INSET_DECOR_E@. These will be set for you based on the @B_android#R#attr#windowIsFloating_E@ attribute.", "history": "Added in API level 1", "FullName": "public void setFlags (int flags, int mask)"}, "isWideColorGamut()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Display#isWideColorGamut_E@", "@B_android#content#res#Configuration#isScreenWideColorGamut_E@"], "Permissions": [], "Description": "Returns true if this window's color mode is @B_android#content#pm#ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT_E@, the display has a wide color gamut and this device supports wide color gamut rendering.", "history": "Added in API level 27", "FullName": "public boolean isWideColorGamut ()"}, "setReturnTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views out of the Scene when the Window is preparing to close."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to @B_android#app#Activity#finishAfterTransition_E@. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, entering Views will remain unaffected. If nothing is set, the default will be to use the same value as set in @B_android#view#Window#setEnterTransition_E@.", "history": "Added in API level 21", "FullName": "public void setReturnTransition (Transition transition)"}, "getAllowEnterTransitionOverlap()": {"Returns": [["boolean", "true when the enter transition should start as soon as possible or false to when it should wait until the exiting transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns how the transition set in @B_android#view#Window#setEnterTransition_E@ overlaps with the exit transition of the calling Activity. When true, the transition will start as soon as possible. When false, the transition will wait until the remote exiting transition completes before starting. The default value is true.", "history": "Added in API level 21", "FullName": "public boolean getAllowEnterTransitionOverlap ()"}, "removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)": {"Returns": [], "Parameters": [["@B_android#view#Window#OnFrameMetricsAvailableListener_E@", "Window.OnFrameMetricsAvailableListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove observer and stop listening to frame stats for this window.", "history": "Added in API level 24", "FullName": "public final void removeOnFrameMetricsAvailableListener (Window.OnFrameMetricsAvailableListener listener)"}, "saveHierarchyState()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract Bundle saveHierarchyState ()"}, "getStatusBarColor()": {"Returns": [["int", "the color of the status bar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public abstract int getStatusBarColor ()"}, "makeActive()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final void makeActive ()"}, "setNavigationBarContrastEnforced(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#R#attr#enforceNavigationBarContrast_E@", "@B_android#view#Window#isNavigationBarContrastEnforced_E@", "@B_android#view#Window#setNavigationBarColor_E@"], "Permissions": [], "Description": "Sets whether the system should ensure that the navigation bar has enough contrast when a fully transparent background is requested. If set to this value, the system will determine whether a scrim is necessary to ensure that the navigation bar has enough contrast with the contents of this app, and set an appropriate effective bar background color accordingly. When the navigation bar color has a non-zero alpha value, the value of this property has no effect.", "history": "Added in API level 29", "FullName": "public void setNavigationBarContrastEnforced (boolean enforceContrast)"}, "setNavigationBarDividerColor(int)": {"Returns": [], "Parameters": [["int", "int: The color of the thin line."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows a thin line of the specified color between the navigation bar and the app content. For this to take effect, the window must be drawing the system bar backgrounds with @B_android#view#WindowManager#LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS_E@ and @B_android#view#WindowManager#LayoutParams#FLAG_TRANSLUCENT_NAVIGATION_E@ must not be set.", "history": "Added in API level 28", "FullName": "public void setNavigationBarDividerColor (int dividerColor)"}, "restoreHierarchyState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void restoreHierarchyState (Bundle savedInstanceState)"}, "performPanelIdentifierAction(int,int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract boolean performPanelIdentifierAction (int featureId, int id, int flags)"}, "invalidatePanelMenu(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public abstract void invalidatePanelMenu (int featureId)"}, "setLayout(int, int)": {"Returns": [], "Parameters": [["int", "int: The desired layout width of the window."], ["int", "int: The desired layout height of the window."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewGroup#LayoutParams#height_E@", "@B_android#view#ViewGroup#LayoutParams#width_E@"], "Permissions": [], "Description": "Set the width and height layout parameters of the window. The default for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute value to make a window that is not full-screen.", "history": "added in API level 1", "FullName": "public void setLayout (int width, int height)"}, "closePanel(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void closePanel (int featureId)"}, "setTitleColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public abstract void setTitleColor (int textColor)"}, "isStatusBarContrastEnforced()": {"Returns": [["boolean", "true, if the system is ensuring contrast, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#R#attr#enforceStatusBarContrast_E@", "@B_android#view#Window#setStatusBarContrastEnforced_E@", "@B_android#view#Window#setStatusBarColor_E@"], "Permissions": [], "Description": "Returns whether the system is ensuring that the status bar has enough contrast when a fully transparent background is requested. When the status bar color has a non-zero alpha value, the value of this property has no effect.", "history": "Added in API level 29", "FullName": "public boolean isStatusBarContrastEnforced ()"}, "setUiOptions(int, int)": {"Returns": [], "Parameters": [["int", "int: Flags specifying extra options for this window."], ["int", "int: Flags specifying which options should be modified. Others will remain unchanged."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set extra options that will influence the UI for this window. Only the bits filtered by mask will be modified.", "history": "added in API level 14", "FullName": "public void setUiOptions (int uiOptions, int mask)"}, "setTransitionBackgroundFadeDuration(long)": {"Returns": [], "Parameters": [["long", "long: The duration of the window background fade to or from opaque during enter transition."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setEnterTransition_E@"], "Permissions": [], "Description": "Sets the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition. When executing the enter transition, the background starts transparent and fades in. This requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@. The default is 300 milliseconds.", "history": "Added in API level 21", "FullName": "public void setTransitionBackgroundFadeDuration (long fadeDurationMillis)"}, "setSharedElementExitTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements after starting a new Activity before the shared elements are transferred to the called Activity. If the shared elements must animate during the exit transition, this Transition should be used. Upon completion, the shared elements may be transferred to the started Activity. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public void setSharedElementExitTransition (Transition transition)"}, "getTransitionManager()": {"Returns": [["@B_android#transition#TransitionManager_E@", "This window's content TransitionManager or null if none is set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#transition#TransitionManager_E@ responsible for for default transitions in this window. Requires @B_android#view#Window#FEATURE_CONTENT_TRANSITIONS_E@. This method will return non-null after content has been initialized (e.g. by using @B_android#view#Window#setContentView_E@) if @B_android#view#Window#FEATURE_CONTENT_TRANSITIONS_E@ has been granted.", "history": "Added in API level 21", "FullName": "public TransitionManager getTransitionManager ()"}, "setSystemGestureExclusionRects(java.util.List<android.graphics.Rect>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: A list of precision gesture regions that this window needs to function correctly This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a list of areas within this window's coordinate space where the system should not intercept touch or other pointing device gestures. This method should be used by apps that make use of @B_android#view#Window#takeSurface_E@ and do not have a view hierarchy available. Apps that do have a view hierarchy should use @B_android#view#View#setSystemGestureExclusionRects_E@ instead. This method does not modify or replace the gesture exclusion rects populated by individual views in this window's view hierarchy using @B_android#view#View#setSystemGestureExclusionRects_E@. Use this to tell the system which specific sub-areas of a view need to receive gesture input in order to function correctly in the presence of global system gestures that may conflict. For example, if the system wishes to capture swipe-in-from-screen-edge gestures to provide system-level navigation functionality, a view such as a navigation drawer container can mark the left (or starting) edge of itself as requiring gesture capture priority using this API. The system may then choose to relax its own gesture recognition to allow the app to consume the user's gesture. It is not necessary for an app to register exclusion rects for broadly spanning regions such as the entirety of a ScrollView or for simple press and release click targets such as Button. Mark an exclusion rect when interacting with a view requires a precision touch gesture in a small area in either the X or Y dimension, such as an edge swipe or dragging a SeekBar thumb. Do not modify the provided list after this method is called.", "history": "Added in API level 29", "FullName": "public void setSystemGestureExclusionRects (List<Rect> rects)"}, "setStatusBarColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the color of the status bar to color. For this to take effect, the window must be drawing the system bar backgrounds with @B_android#view#WindowManager#LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS_E@ and @B_android#view#WindowManager#LayoutParams#FLAG_TRANSLUCENT_STATUS_E@ must not be set. If color is not opaque, consider setting @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_STABLE_E@ and @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_E@. The transitionName for the view background will be \"android:status:background\".", "history": "Added in API level 21", "FullName": "public abstract void setStatusBarColor (int color)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setContentView_E@"], "Permissions": [], "Description": "Convenience for @B_android#view#Window#setContentView_E@ set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarhcy.", "history": "Added in API level 1", "FullName": "public abstract void setContentView (View view)"}, "performContextMenuIdentifierAction(int, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract boolean performContextMenuIdentifierAction (int id, int flags)"}, "addFlags(int)": {"Returns": [], "Parameters": [["int", "int: The flag bits to be set."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#setFlags_E@", "@B_android#view#Window#clearFlags_E@"], "Permissions": [], "Description": "Convenience function to set the flag bits as specified in flags, as per @B_android#view#Window#setFlags_E@.", "history": "Added in API level 1", "FullName": "public void addFlags (int flags)"}, "getSharedElementReenterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getSharedElementReenterTransition ()"}, "setDimAmount(float)": {"Returns": [], "Parameters": [["float", "float: The new dim amount, from 0 for no dim to 1 for full dim."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the amount of dim behind the window when using @B_android#view#WindowManager#LayoutParams#FLAG_DIM_BEHIND_E@. This overrides the default dim amount of that is selected by the Window based on its theme.", "history": "Added in API level 14", "FullName": "public void setDimAmount (float amount)"}, "setFeatureInt(int, int)": {"Returns": [], "Parameters": [["int", "int: The desired feature to change. Features are constants defined by Window."], ["int", "int: The value for the feature. The interpretation of this value is feature-specific."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the integer value for a feature. The range of the value depends on the feature being set. For @B_android#view#Window#FEATURE_PROGRESS_E@, it should go from 0 to 10000. At 10000 the progress is complete and the indicator hidden.", "history": "added in API level 1", "FullName": "public abstract void setFeatureInt (int featureId, int value)"}, "isShortcutKey(int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the key code from @B_android#view#KeyEvent_E@ to check."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the @B_android#view#KeyEvent_E@ to use to help check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is a keypress one of the defined shortcut keys for this window.", "history": "Added in API level 1", "FullName": "public abstract boolean isShortcutKey (int keyCode, KeyEvent event)"}, "superDispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used by custom windows, such as Dialog, to pass the touch screen event further down the view hierarchy. Application developers should not need to implement or call this.", "history": "Added in API level 1", "FullName": "public abstract boolean superDispatchTouchEvent (MotionEvent event)"}, "getExitTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the Transition to use to move Views out of the scene when calling a new Activity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when starting a new Activity. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. Requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@.", "history": "Added in API level 21", "FullName": "public Transition getExitTransition ()"}, "setCallback(android.view.Window.Callback)": {"Returns": [], "Parameters": [["@B_android#view#Window#Callback_E@", "Window.Callback: The desired Callback interface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window.", "history": "Added in API level 1", "FullName": "public void setCallback (Window.Callback callback)"}, "isFloating()": {"Returns": [["boolean", "Returns true if the window is configured to be displayed floating on top of whatever is behind it."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this window is being displayed with a floating style (based on the @B_android#R#attr#windowIsFloating_E@ attribute in the style/theme).", "history": "Added in API level 1", "FullName": "public abstract boolean isFloating ()"}, "performPanelIdentifierAction(int, int, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract boolean performPanelIdentifierAction (int featureId, int id, int flags)"}, "setFlags(int, int)": {"Returns": [], "Parameters": [["int", "int: The new window flags (see WindowManager.LayoutParams)."], ["int", "int: Which of the window flag bits to modify."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#addFlags_E@", "@B_android#view#Window#clearFlags_E@"], "Permissions": [], "Description": "Set the flags of the window, as per the @B_android#view#WindowManager#LayoutParams_E@ flags. Note that some flags must be set before the window decoration is created (by the first call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#getDecorView_E@: @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_IN_SCREEN_E@ and @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_INSET_DECOR_E@. These will be set for you based on the @B_android#R#attr#windowIsFloating_E@ attribute.", "history": "added in API level 1", "FullName": "public void setFlags (int flags, int mask)"}, "setSoftInputMode(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an explicit soft input mode to use for the window, as per @B_android#view#WindowManager#LayoutParams#softInputMode_E@. Providing anything besides \"unspecified\" here will override the input mode the window would normally retrieve from its theme.", "history": "Added in API level 3", "FullName": "public void setSoftInputMode (int mode)"}, "setIcon(int)": {"Returns": [], "Parameters": [["int", "int: resource ID of a drawable to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the primary icon for this window.", "history": "Added in API level 19", "FullName": "public void setIcon (int resId)"}, "setLogo(int)": {"Returns": [], "Parameters": [["int", "int: resource ID of a drawable to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the logo for this window. A logo is often shown in place of an @B_android#view#Window#setIcon_E@ but is generally wider and communicates window title information as well.", "history": "Added in API level 19", "FullName": "public void setLogo (int resId)"}, "setEnterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The Transition to use to move Views into the initial Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@. If transition is null, entering Views will remain unaffected.", "history": "Added in API level 21", "FullName": "public void setEnterTransition (Transition transition)"}, "setMediaController(android.media.session.MediaController)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaController_E@", "MediaController: The controller for the session which should receive media keys and volume changes."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#setMediaController_E@"], "Permissions": [], "Description": "Sets a @B_android#media#session#MediaController_E@ to send media keys and volume changes to. If set, this should be preferred for all media keys and volume requests sent to this window.", "history": "Added in API level 21", "FullName": "public void setMediaController (MediaController controller)"}}, "Inheritance": [], "ClassName": "android.view.Window", "ClassDesc": "Abstract base class for a top-level window look and behavior policy. An instance of this class should be used as the top-level view added to the window manager. It provides standard UI policies such as a background, title area, default key processing, etc. The only existing implementation of this abstract class is android.view.PhoneWindow, which you should instantiate when needing a Window."}