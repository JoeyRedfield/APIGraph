{"Functions": {"after(long)": {"Returns": [["@B_android#animation#AnimatorSet#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: The number of milliseconds that should elapse before the animation starts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up the animation supplied in the @B_android#animation#AnimatorSet#play_E@ call that created this Builder object to play when the given amount of time elapses.", "history": "Added in API level 11", "FullName": "public AnimatorSet.Builder after (long delay)"}, "after(android.animation.Animator)": {"Returns": [["@B_android#animation#AnimatorSet#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animation whose end will cause the animation supplied to the @B_android#animation#AnimatorSet#play_E@ method to play."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up the given animation to play when the animation supplied in the @B_android#animation#AnimatorSet#play_E@ call that created this Builder object to start when the animation supplied in this method call ends.", "history": "Added in API level 11", "FullName": "public AnimatorSet.Builder after (Animator anim)"}, "before(android.animation.Animator)": {"Returns": [["@B_android#animation#AnimatorSet#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animation that will play when the animation supplied to the @B_android#animation#AnimatorSet#play_E@ method ends."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up the given animation to play when the animation supplied in the @B_android#animation#AnimatorSet#play_E@ call that created this Builder object ends.", "history": "Added in API level 11", "FullName": "public AnimatorSet.Builder before (Animator anim)"}, "with(android.animation.Animator)": {"Returns": [["@B_android#animation#AnimatorSet#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animation that will play when the animation supplied to the @B_android#animation#AnimatorSet#play_E@ method starts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up the given animation to play at the same time as the animation supplied in the @B_android#animation#AnimatorSet#play_E@ call that created this Builder object.", "history": "Added in API level 11", "FullName": "public AnimatorSet.Builder with (Animator anim)"}}, "Inheritance": [], "ClassName": "android.animation.AnimatorSet.Builder", "ClassDesc": "The Builder object is a utility class to facilitate adding animations to a AnimatorSet along with the relationships between the various animations. The intention of the Builder methods, along with the @B_android#animation#AnimatorSet#play_E@ method of AnimatorSet is to make it possible to express the dependency relationships of animations in a natural way. Developers can also use the @B_android#animation#AnimatorSet#playTogether_E@ and @B_android#animation#AnimatorSet#playSequentially_E@ methods if these suit the need, but it might be easier in some situations to express the AnimatorSet of animations in pairs. The Builder object cannot be constructed directly, but is rather constructed internally via a call to @B_android#animation#AnimatorSet#play_E@. For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to play when anim2 finishes, and anim4 to play when anim3 finishes: Note in the example that both @B_android#animation#AnimatorSet#Builder#before_E@ and @B_android#animation#AnimatorSet#Builder#after_E@ are used. These are just different ways of expressing the same relationship and are provided to make it easier to say things in a way that is more natural, depending on the situation. It is possible to make several calls into the same Builder object to express multiple relationships. However, note that it is only the animation passed into the initial @B_android#animation#AnimatorSet#play_E@ method that is the dependency in any of the successive calls to the Builder object. For example, the following code starts both anim2 and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and anim3: Note that it is possible to express relationships that cannot be resolved and will not result in sensible results. For example, play(anim1).after(anim1) makes no sense. In general, circular dependencies like this one (or more indirect ones where a depends on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets that can boil down to a simple, one-way relationship of animations starting with, before, and after other, different, animations."}