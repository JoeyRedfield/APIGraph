{"Functions": {"isOther()": {"Returns": [["boolean", "true if the file something other than a regular file, directory or symbolic link"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether the file is something other than a regular file, directory, or symbolic link.", "history": "Added in API level 26", "FullName": "public abstract boolean isOther ()"}, "lastAccessTime()": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the time of last access"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time of last access. If the file system implementation does not support a time stamp to indicate the time of last access then this method returns an implementation specific default value, typically the @B_java#nio#file#attribute#BasicFileAttributes#lastModifiedTime_E@ or a FileTime representing the epoch (1970-01-01T00:00:00Z).", "history": "Added in API level 26", "FullName": "public abstract FileTime lastAccessTime ()"}, "lastModifiedTime()": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the time the file was last modified"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time of last modification. If the file system implementation does not support a time stamp to indicate the time of last modification then this method returns an implementation specific default value, typically a FileTime representing the epoch (1970-01-01T00:00:00Z).", "history": "Added in API level 26", "FullName": "public abstract FileTime lastModifiedTime ()"}, "creationTime()": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the time the file was created"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the creation time. The creation time is the time that the file was created. If the file system implementation does not support a time stamp to indicate the time when the file was created then this method returns an implementation specific default value, typically the @B_java#nio#file#attribute#BasicFileAttributes#lastModifiedTime_E@ or a FileTime representing the epoch (1970-01-01T00:00:00Z).", "history": "Added in API level 26", "FullName": "public abstract FileTime creationTime ()"}, "size()": {"Returns": [["long", "the file size, in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the file (in bytes). The size may differ from the actual size on the file system due to compression, support for sparse files, or other reasons. The size of files that are not @B_java#nio#file#attribute#BasicFileAttributes#isRegularFile_E@ files is implementation specific and therefore unspecified.", "history": "Added in API level 26", "FullName": "public abstract long size ()"}, "fileKey()": {"Returns": [["@B_java#lang#Object_E@", "an object that uniquely identifies the given file, or null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#nio#file#Files#walkFileTree_E@"], "Permissions": [], "Description": "Returns an object that uniquely identifies the given file, or null if a file key is not available. On some platforms or file systems it is possible to use an identifier, or a combination of identifiers to uniquely identify a file. Such identifiers are important for operations such as file tree traversal in file systems that support device ID and inode are commonly used for such purposes. The file key returned by this method can only be guaranteed to be unique if the file system and files remain static. Whether a file system re-uses identifiers after a file is deleted is implementation dependent and therefore unspecified. File keys returned by this method can be compared for equality and are suitable for use in collections. If the file system and files remain static, and two files are the @B_java#nio#file#Files#isSameFile_E@ with non-null file keys, then their file keys are equal.", "history": "Added in API level 26", "FullName": "public abstract Object fileKey ()"}, "isRegularFile()": {"Returns": [["boolean", "true if the file is a regular file with opaque content"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether the file is a regular file with opaque content.", "history": "Added in API level 26", "FullName": "public abstract boolean isRegularFile ()"}, "isSymbolicLink()": {"Returns": [["boolean", "true if the file is a symbolic link"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether the file is a symbolic link.", "history": "Added in API level 26", "FullName": "public abstract boolean isSymbolicLink ()"}, "isDirectory()": {"Returns": [["boolean", "true if the file is a directory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether the file is a directory.", "history": "Added in API level 26", "FullName": "public abstract boolean isDirectory ()"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.BasicFileAttributes", "ClassDesc": "Basic attributes associated with a file in a file system. Basic file attributes are attributes that are common to many file systems and consist of mandatory and optional file attributes as defined by this interface."}