{"Functions": {"check(java.security.cert.Certificate)": {"Returns": [], "Parameters": [["@B_java#security#cert#Certificate_E@", "Certificate: the Certificate to be checked"]], "Throws": [["@B_java#security#cert#CertPathValidatorException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Performs the check(s) on the specified certificate using its internal state. The certificates are presented in the order specified by the init method. This implementation calls check(cert, java.util.Collections.<String>emptySet()).", "history": "Added in API level 24", "FullName": "public void check (Certificate cert)"}, "PKIXCertPathChecker()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor.", "history": "Added in API level 1", "FullName": "protected PKIXCertPathChecker ()"}, "init(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the order that certificates are presented to the check method. If true, certificates are presented from target to most-trusted CA (forward); if false, from most-trusted CA to target (reverse)."]], "Throws": [["@B_java#security#cert#CertPathValidatorException_E@", "if this PKIXCertPathChecker is unable to check certificates in the specified order; it should never be thrown if the forward flag is false since reverse checking must be supported"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the internal state of this PKIXCertPathChecker. The forward flag specifies the order that certificates will be passed to the @B_java#security#cert#PKIXCertPathChecker#check_E@ method (forward or reverse). A PKIXCertPathChecker", "history": "Added in API level 1", "FullName": "public abstract void init (boolean forward)"}, "isForwardCheckingSupported()": {"Returns": [["boolean", "true if forward checking is supported, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates if forward checking is supported. Forward checking refers to the ability of the PKIXCertPathChecker to perform its checks when certificates are presented to the check method in the forward direction (from target to most-trusted CA).", "history": "Added in API level 1", "FullName": "public abstract boolean isForwardCheckingSupported ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a copy of this PKIXCertPathChecker"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone of this object. Calls the Object.clone() method. All subclasses which maintain state must support and override this method, if necessary.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "check(java.security.cert.Certificate,java.util.Collection<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#security#cert#Certificate_E@", "Certificate: the Certificate to be checked"], ["@B_java#util#Collection_E@", "Collection: a Collection of OID strings representing the current set of unresolved critical extensions"]], "Throws": [["@B_java#security#cert#CertPathValidatorException_E@", "if the specified certificate does not pass the check"]], "SeeAlso": [], "Permissions": [], "Description": "Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions. The certificates are presented in the order specified by the init method.", "history": "Added in API level 1", "FullName": "public abstract void check (Certificate cert, Collection<String> unresolvedCritExts)"}, "getSupportedExtensions()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of X.509 extension OIDs (in String format) supported by this PKIXCertPathChecker, or null if no extensions are supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e. recognizes, is able to process), or null if no extensions are supported. Each element of the set is a String representing the Object Identifier (OID) of the X.509 extension that is supported. The OID is represented by a set of nonnegative integers separated by periods. All X.509 certificate extensions that a PKIXCertPathChecker might possibly be able to process should be included in the set.", "history": "Added in API level 1", "FullName": "public abstract Set<String> getSupportedExtensions ()"}}, "Inheritance": [], "ClassName": "java.security.cert.PKIXCertPathChecker", "ClassDesc": "An abstract class that performs one or more checks on an X509Certificate. A concrete implementation of the PKIXCertPathChecker class can be created to extend the PKIX certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path. Instances of PKIXCertPathChecker are passed as parameters using the @B_java#security#cert#PKIXParameters#setCertPathCheckers_E@ or @B_java#security#cert#PKIXParameters#addCertPathChecker_E@ methods of the PKIXParameters and PKIXBuilderParameters class. Each of the PKIXCertPathCheckers @B_java#security#cert#PKIXCertPathChecker#check_E@ methods will be called, in turn, for each certificate processed by a PKIX CertPathValidator or CertPathBuilder implementation. A PKIXCertPathChecker may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The @B_java#security#cert#PKIXCertPathChecker#init_E@ method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation @B_java#security#cert#PKIXCertPathChecker#clone_E@ method if necessary in order to allow a PKIX CertPathBuilder to efficiently backtrack and try other paths. In these situations, the CertPathBuilder is able to restore prior path validation states by restoring the cloned PKIXCertPathCheckers. The order in which the certificates are presented to the PKIXCertPathChecker may be either in the forward direction (from target to most-trusted CA) or in the reverse direction (from most-trusted CA to target). A PKIXCertPathChecker implementation @B_java#security#cert#PKIXCertPathChecker#isForwardCheckingSupported_E@ method indicates whether forward checking is supported. Additional input parameters required for executing the check may be specified through constructors of concrete implementations of this class. Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."}