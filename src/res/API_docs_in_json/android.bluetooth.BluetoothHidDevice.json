{"Functions": {"getDevicesMatchingConnectionStates(int[])": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [["int[]", "int: Array of states. States can be one of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@,"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get a list of devices that match any of the given connection states. If none of the devices match any of the given states, an empty list will be returned. Requires @B_android#Manifest#permission#BLUETOOTH_E@", "history": "Added in API level 28", "FullName": "public List<BluetoothDevice> getDevicesMatchingConnectionStates (int[] states)"}, "reportError(android.bluetooth.BluetoothDevice,byte)": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"], ["byte", "byte: Error to be sent for SET_REPORT via HANDSHAKE."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends error handshake message as reply for invalid SET_REPORT request from @B_android#bluetooth#BluetoothHidDevice#Callback#onSetReport_E@.", "history": "Added in API level 28", "FullName": "public boolean reportError (BluetoothDevice device, byte error)"}, "disconnect(android.bluetooth.BluetoothDevice)": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disconnects from currently connected host. The connection state should be tracked by the application by handling callback from Callback#onConnectionStateChanged. The connection state is not related to the return value of this method.", "history": "Added in API level 28", "FullName": "public boolean disconnect (BluetoothDevice device)"}, "sendReport(android.bluetooth.BluetoothDevice,int,byte[])": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"], ["int", "int: Report Id, as defined in descriptor. Can be 0 in case Report Id are not defined in descriptor."], ["byte[]", "byte: Report data, not including Report Id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends report to remote host using interrupt channel.", "history": "Added in API level 28", "FullName": "public boolean sendReport (BluetoothDevice device, int id, byte[] data)"}, "getConnectedDevices()": {"Returns": [["@B_java#util#List_E@", "List of devices. The list will be empty on error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get connected devices for this specific profile. Return the set of devices which are in state @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@ Requires @B_android#Manifest#permission#BLUETOOTH_E@", "history": "Added in API level 28", "FullName": "public List<BluetoothDevice> getConnectedDevices ()"}, "unregisterApp()": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters application. Active connection will be disconnected and no new connections will be allowed until registered again using @B_android#bluetooth#BluetoothHidDevice#registerApp_E@. The registration status should be tracked by the application by handling callback from Callback#onAppStatusChanged. The app registration status is not related to the return value of this method.", "history": "Added in API level 28", "FullName": "public boolean unregisterApp ()"}, "registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,java.util.concurrent.Executor,android.bluetooth.BluetoothHidDevice.Callback)": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothHidDeviceAppSdpSettings_E@", "BluetoothHidDeviceAppSdpSettings: @B_android#bluetooth#BluetoothHidDeviceAppSdpSettings_E@ object of HID Device SDP record. The HID Device SDP record is required."], ["@B_android#bluetooth#BluetoothHidDeviceAppQosSettings_E@", "BluetoothHidDeviceAppQosSettings: @B_android#bluetooth#BluetoothHidDeviceAppQosSettings_E@ object of Incoming QoS Settings. The Incoming QoS Settings is not required. Use null or default BluetoothHidDeviceAppQosSettings.Builder for default values."], ["@B_android#bluetooth#BluetoothHidDeviceAppQosSettings_E@", "BluetoothHidDeviceAppQosSettings: @B_android#bluetooth#BluetoothHidDeviceAppQosSettings_E@ object of Outgoing QoS Settings. The Outgoing QoS Settings is not required. Use null or default BluetoothHidDeviceAppQosSettings.Builder for default values."], ["@B_java#util#concurrent#Executor_E@", "Executor: @B_java#util#concurrent#Executor_E@ object on which callback will be executed. The Executor object is required."], ["@B_android#bluetooth#BluetoothHidDevice#Callback_E@", "BluetoothHidDevice.Callback: @B_android#bluetooth#BluetoothHidDevice#Callback_E@ object to which callback messages will be sent. The Callback object is required."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers application to be used for HID device. Connections to HID Device are only possible when application is registered. Only one application can be registered at one time. When an application is registered, the HID Host service will be disabled until it is unregistered. When no longer used, application should be unregistered using @B_android#bluetooth#BluetoothHidDevice#unregisterApp_E@. The app will be automatically unregistered if it is not foreground. The registration status should be tracked by the application by handling callback from Callback#onAppStatusChanged. The app registration status is not related to the return value of this method.", "history": "Added in API level 28", "FullName": "public boolean registerApp (BluetoothHidDeviceAppSdpSettings sdp, BluetoothHidDeviceAppQosSettings inQos, BluetoothHidDeviceAppQosSettings outQos, Executor executor, BluetoothHidDevice.Callback callback)"}, "getConnectionState(android.bluetooth.BluetoothDevice)": {"Returns": [["int", "State of the profile connection. One of @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@ Value is @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTED_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTING_E@, @B_android#bluetooth#BluetoothProfile#STATE_CONNECTED_E@, or @B_android#bluetooth#BluetoothProfile#STATE_DISCONNECTING_E@"]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: Remote bluetooth device."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_E@"], "Description": "Get the current connection state of the profile Requires @B_android#Manifest#permission#BLUETOOTH_E@", "history": "Added in API level 28", "FullName": "public int getConnectionState (BluetoothDevice device)"}, "replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"], ["byte", "byte: Report Type, as in request."], ["byte", "byte: Report Id, as in request."], ["byte[]", "byte: Report data, not including Report Id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends report to remote host as reply for GET_REPORT request from @B_android#bluetooth#BluetoothHidDevice#Callback#onGetReport_E@.", "history": "Added in API level 28", "FullName": "public boolean replyReport (BluetoothDevice device, byte type, byte id, byte[] data)"}, "connect(android.bluetooth.BluetoothDevice)": {"Returns": [["boolean", "true if the command is successfully sent; otherwise false."]], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiates connection to host which is currently paired with this device. If the application is not registered, #connect(BluetoothDevice) will fail. The connection state should be tracked by the application by handling callback from Callback#onConnectionStateChanged. The connection state is not related to the return value of this method.", "history": "Added in API level 28", "FullName": "public boolean connect (BluetoothDevice device)"}}, "Inheritance": [], "ClassName": "android.bluetooth.BluetoothHidDevice", "ClassDesc": "Provides the public APIs to control the Bluetooth HID Device profile. BluetoothHidDevice is a proxy object for controlling the Bluetooth HID Device Service via IPC. Use @B_android#bluetooth#BluetoothAdapter#getProfileProxy_E@ to get the BluetoothHidDevice proxy object."}