{"Functions": {"getBusy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "true if the LSParser is currently busy loading a document, otherwise false.", "history": "Added in API level 8", "FullName": "public abstract boolean getBusy ()"}, "parse(org.w3c.dom.ls.LSInput)": {"Returns": [["@B_org#w3c#dom#Document_E@", "If the LSParser is a synchronous LSParser, the newly created and populated Document is returned. If the LSParser is asynchronous, null is returned since the document object may not yet be constructed when this method returns."]], "Parameters": [["@B_org#w3c#dom#ls#LSInput_E@", "LSInput: The LSInput from which the source of the document is to be read."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_STATE_ERR: Raised if the LSParser's LSParser.busy attribute is true."], ["@B_org#w3c#dom#ls#LSException_E@", "PARSE_ERR: Raised if the LSParser was unable to load the XML document. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Parse an XML document from a resource identified by a LSInput.", "history": "Added in API level 8", "FullName": "public abstract Document parse (LSInput input)"}, "getFilter()": {"Returns": [["@B_org#w3c#dom#ls#LSParserFilter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure. The filter can choose to remove elements from the document being constructed, or to terminate the parsing early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, if \"true, the validation is done before invoking the filter.", "history": "Added in API level 8", "FullName": "public abstract LSParserFilter getFilter ()"}, "setFilter(org.w3c.dom.ls.LSParserFilter)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#ls#LSParserFilter_E@", "LSParserFilter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure. The filter can choose to remove elements from the document being constructed, or to terminate the parsing early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, if \"true, the validation is done before invoking the filter.", "history": "Added in API level 8", "FullName": "public abstract void setFilter (LSParserFilter filter)"}, "parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)": {"Returns": [["@B_org#w3c#dom#Node_E@", "Return the node that is the result of the parse operation. If the result is more than one top-level node, the first one is returned."]], "Parameters": [["@B_org#w3c#dom#ls#LSInput_E@", "LSInput: The LSInput from which the source document is to be read. The source document must be an XML fragment, i.e. anything except a complete XML document (except in the case where the context node of type DOCUMENT_NODE, and the action is ACTION_REPLACE_CHILDREN), a DOCTYPE (internal subset), entity declaration(s), notation declaration(s), or XML or text declaration(s)."], ["@B_org#w3c#dom#Node_E@", "Node: The node that is used as the context for the data that is being parsed. This node must be a Document node, a DocumentFragment node, or a node of a type that is allowed as a child of an Element node, e.g. it cannot be an Attribute node."], ["short", "short: This parameter describes which action should be taken between the new set of nodes being inserted and the existing children of the context node. The set of possible actions is defined in ACTION_TYPES above."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "HIERARCHY_REQUEST_ERR: Raised if the content cannot replace, be inserted before, after, or as a child of the context node (see also Node.insertBefore or Node.replaceChild in [DOM Level 3 Core] ). NOT_SUPPORTED_ERR: Raised if the LSParser doesn't support this method, or if the context node is of type Document and the DOM implementation doesn't support the replacement of the DocumentType child or Element child. NO_MODIFICATION_ALLOWED_ERR: Raised if the context node is a read only node and the content is being appended to its child list, or if the parent node of the context node is read only node and the content is being inserted in its child list. INVALID_STATE_ERR: Raised if the LSParser.busy attribute is true."], ["@B_org#w3c#dom#ls#LSException_E@", "PARSE_ERR: Raised if the LSParser was unable to load the XML fragment. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Parse an XML fragment from a resource identified by a LSInput and insert the content into an existing document at the position specified with the context and action arguments. When parsing the input stream, the context node (or its parent, depending on where the result will be inserted) is used for resolving unbound namespace prefixes. The context node's ownerDocument node (or the node itself if the node of type DOCUMENT_NODE) is used to resolve default attributes and entity references. As the new data is inserted into the document, at least one mutation event is fired per new immediate child or sibling of the context node. If the context node is a Document node and the action is ACTION_REPLACE_CHILDREN, then the document that is passed as the context node will be changed such that its xmlEncoding, documentURI, xmlVersion, inputEncoding, xmlStandalone, and all other such attributes are set to what they would be set to if the input source was parsed using LSParser.parse(). This method is always synchronous, even if the LSParser is asynchronous (LSParser.async is true). If an error occurs while parsing, the caller is notified through the ErrorHandler instance associated with the \"DOMConfiguration. When calling parseWithContext, the values of the following configuration parameters will be ignored and their default values will always be used instead: \"LSParserFilter just as if a whole document was parsed.", "history": "Added in API level 8", "FullName": "public abstract Node parseWithContext (LSInput input, Node contextArg, short action)"}, "abort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Abort the loading of the document that is currently being loaded by the LSParser. If the LSParser is currently not busy, a call to this method does nothing.", "history": "Added in API level 8", "FullName": "public abstract void abort ()"}, "getDomConfig()": {"Returns": [["@B_org#w3c#dom#DOMConfiguration_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The DOMConfiguration object used when parsing an input source. This DOMConfiguration is specific to the parse operation. No parameter values from this DOMConfiguration object are passed automatically to the DOMConfiguration object on the Document that is created, or used, by the parse operation. The DOM application is responsible for passing any needed parameter values from this DOMConfiguration object to the DOMConfiguration object referenced by the Document object. In addition to the parameters recognized in on the DOMConfiguration objects for LSParser add or modify the following parameters:", "history": "Added in API level 8", "FullName": "public abstract DOMConfiguration getDomConfig ()"}, "parseURI(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Document_E@", "If the LSParser is a synchronous LSParser, the newly created and populated Document is returned, or null if an error occured. If the LSParser is asynchronous, null is returned since the document object may not yet be constructed when this method returns."]], "Parameters": [["@B_java#lang#String_E@", "String: The location of the XML document to be read."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_STATE_ERR: Raised if the LSParser.busy attribute is true."], ["@B_org#w3c#dom#ls#LSException_E@", "PARSE_ERR: Raised if the LSParser was unable to load the XML document. DOM applications should attach a DOMErrorHandler using the parameter \" error-handler\" if they wish to get details on the error."]], "SeeAlso": [], "Permissions": [], "Description": "Parse an XML document from a location identified by a URI reference [", "history": "Added in API level 8", "FullName": "public abstract Document parseURI (String uri)"}, "getAsync()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "true if the LSParser is asynchronous, false if it is synchronous.", "history": "Added in API level 8", "FullName": "public abstract boolean getAsync ()"}}, "Inheritance": [], "ClassName": "org.w3c.dom.ls.LSParser", "ClassDesc": "An interface to an object that is able to build, or augment, a DOM tree from various input sources. LSParser provides an API for parsing XML and building the corresponding DOM document structure. A LSParser instance can be obtained by invoking the DOMImplementationLS.createLSParser() method. As specified in [ there will never be two adjacent nodes of type NODE_TEXT, and there will never be empty text nodes. it is expected that the value and nodeValue attributes of an Attr node initially return the true, depending on the attribute normalization used, the attribute values may differ from the ones obtained by the XML 1.0 attribute normalization. If the parameters \"false, the XML 1.0 attribute normalization is guaranteed to occur, and if the attributes list does not contain namespace declarations, the attributes attribute on Element node represents the property Asynchronous LSParser objects are expected to also implement the events::EventTarget interface so that event listeners can be registered on asynchronous LSParser objects. Events supported by asynchronous LSParser objects are: \"http://www.w3.org/2002/DOMLS\". While parsing an input source, errors are reported to the application through the error handler (LSParser.domConfig's \"DOMError.type) of errors and warnings defined by this specification are: In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...), XML well-formedness errors, and so on. See also the"}