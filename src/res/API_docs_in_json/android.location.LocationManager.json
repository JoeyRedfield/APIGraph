{"Functions": {"setTestProviderEnabled(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name"], ["boolean", "boolean: the mock enabled value"]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "Sets a mock enabled value for the given provider. This value will be used in place of any actual value from the provider.", "history": "added in API level 3", "FullName": "public void setTestProviderEnabled (String provider, boolean enabled)"}, "isProviderEnabled(java.lang.String)": {"Returns": [["boolean", "true if the provider exists and is enabled"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current enabled/disabled status of the given provider. To listen for changes, see @B_android#location#LocationManager#PROVIDERS_CHANGED_ACTION_E@. Before API version @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this method would throw @B_java#lang#SecurityException_E@ if the location permissions were not sufficient to use the specified provider.", "history": "Added in API level 1", "FullName": "public boolean isProviderEnabled (String provider)"}, "clearTestProviderLocation(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "This function has always been a no-op, and may be removed in the future. Removes any mock location associated with the given provider.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void clearTestProviderLocation (String provider)"}, "addProximityAlert(double,double,float,long,android.app.PendingIntent)": {"Returns": [], "Parameters": [["double", "double: the latitude of the central point of the alert region"], ["double", "double: the longitude of the central point of the alert region"], ["float", "float: the radius of the central point of the alert region, in meters"], ["long", "long: time for this proximity alert, in milliseconds, or -1 to indicate no expiration"], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent that will be used to generate an Intent to fire when entry to or exit from the alert region is detected This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@"], "Description": "Set a proximity alert for the location given by the position (latitude, longitude) and the given radius. When the device detects that it has entered or exited the area surrounding the location, the given PendingIntent will be used to create an Intent to be fired. The fired Intent will have a boolean extra added with key @B_android#location#LocationManager#KEY_PROXIMITY_ENTERING_E@. If the value is true, the device is entering the proximity region; if false, it is exiting. Due to the approximate nature of position estimation, if the device passes through the given area briefly, it is possible that no Intent will be fired. Similarly, an Intent could be fired if the device passes very close to the given area but does not actually enter it. After the number of milliseconds given by the expiration parameter, the location manager will delete this proximity alert and no longer monitor it. A value of -1 indicates that there should be no expiration time. Internally, this method uses both @B_android#location#LocationManager#NETWORK_PROVIDER_E@ and @B_android#location#LocationManager#GPS_PROVIDER_E@. Before API version 17, this method could be used with @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@. From API version 17 and onwards, this method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public void addProximityAlert (double latitude, double longitude, float radius, long expiration, PendingIntent intent)"}, "addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)": {"Returns": [["boolean", "true if the listener was successfully added"]], "Parameters": [["@B_android#location#OnNmeaMessageListener_E@", "OnNmeaMessageListener: a @B_android#location#OnNmeaMessageListener_E@ object to register This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the handler that the listener runs on. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the ACCESS_FINE_LOCATION permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Adds an NMEA listener. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean addNmeaListener (OnNmeaMessageListener listener, Handler handler)"}, "registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)": {"Returns": [["boolean", "true if the callback was added successfully, false otherwise."]], "Parameters": [["@B_android#location#GnssMeasurementsEvent#Callback_E@", "GnssMeasurementsEvent.Callback: a @B_android#location#GnssMeasurementsEvent#Callback_E@ object to register. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Registers a GPS Measurement callback. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean registerGnssMeasurementsCallback (GnssMeasurementsEvent.Callback callback)"}, "registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)": {"Returns": [["boolean", "true if the callback was added successfully, false otherwise."]], "Parameters": [["@B_android#location#GnssNavigationMessage#Callback_E@", "GnssNavigationMessage.Callback: a @B_android#location#GnssNavigationMessage#Callback_E@ object to register. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a GNSS Navigation Message callback.", "history": "Added in API level 24", "FullName": "public boolean registerGnssNavigationMessageCallback (GnssNavigationMessage.Callback callback)"}, "removeNmeaListener(android.location.OnNmeaMessageListener)": {"Returns": [], "Parameters": [["@B_android#location#OnNmeaMessageListener_E@", "OnNmeaMessageListener: a @B_android#location#OnNmeaMessageListener_E@ object to remove This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes an NMEA listener.", "history": "Added in API level 24", "FullName": "public void removeNmeaListener (OnNmeaMessageListener listener)"}, "getGpsStatus(android.location.GpsStatus)": {"Returns": [["@B_android#location#GpsStatus_E@", "status object containing updated GPS status."]], "Parameters": [["@B_android#location#GpsStatus_E@", "GpsStatus: object containing GPS status details, or null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Retrieves information about the current status of the GPS engine. This should only be called from the @B_android#location#GpsStatus#Listener#onGpsStatusChanged_E@ callback to ensure that the data is copied atomically. The caller may either pass in a @B_android#location#GpsStatus_E@ object to set with the latest status information, or pass null to create a new @B_android#location#GpsStatus_E@ object. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 3 Deprecated in API level 24", "FullName": "public GpsStatus getGpsStatus (GpsStatus status)"}, "registerGnssStatusCallback(android.location.GnssStatus.Callback,android.os.Handler)": {"Returns": [["boolean", "true if the listener was successfully added"]], "Parameters": [["@B_android#location#GnssStatus#Callback_E@", "GnssStatus.Callback: GNSS status callback object to register This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the handler that the callback runs on. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the ACCESS_FINE_LOCATION permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Registers a GNSS status callback. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean registerGnssStatusCallback (GnssStatus.Callback callback, Handler handler)"}, "clearTestProviderStatus(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "This method has no effect. This method has no effect as provider status has been deprecated and is no longer supported.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void clearTestProviderStatus (String provider)"}, "requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)": {"Returns": [], "Parameters": [["@B_android#location#Criteria_E@", "Criteria: contains parameters for the location manager to choose the appropriate provider and parameters to compute the location This value must never be null."], ["@B_android#location#LocationListener_E@", "LocationListener: a @B_android#location#LocationListener_E@ whose @B_android#location#LocationListener#onLocationChanged_E@ method will be called when the location update is available This value must never be null."], ["@B_android#os#Looper_E@", "Looper: a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if criteria is null"], ["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for a single location update using a Criteria and a callback. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestSingleUpdate (Criteria criteria, LocationListener listener, Looper looper)"}, "getLastKnownLocation(java.lang.String)": {"Returns": [["@B_android#location#Location_E@", "the last known location for the provider, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if no suitable permission is present"], ["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Returns a Location indicating the data from the last known location fix obtained from the given provider. This can be done without starting the provider. Note that this location could be out-of-date, for example if the device was turned off and moved to another location. If the provider is currently disabled, null is returned. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public Location getLastKnownLocation (String provider)"}, "getGnssHardwareModelName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Model Name (including Vendor and Hardware/Software Version) of the GNSS hardware driver. No device-specific serial number or ID is returned from this API. Will return null when the GNSS hardware abstraction layer does not support providing this value.", "history": "Added in API level 28", "FullName": "public String getGnssHardwareModelName ()"}, "requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider with which to register This value must never be null."], ["long", "long: minimum time interval between location updates, in milliseconds"], ["float", "float: minimum distance between location updates, in meters"], ["@B_android#app#PendingIntent_E@", "PendingIntent: a @B_android#app#PendingIntent_E@ to be sent for each location update This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist on this device"], ["@B_java#lang#IllegalArgumentException_E@", "if intent is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for location updates using the named provider, and a pending intent. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 3", "FullName": "public void requestLocationUpdates (String provider, long minTime, float minDistance, PendingIntent intent)"}, "unregisterGnssStatusCallback(android.location.GnssStatus.Callback)": {"Returns": [], "Parameters": [["@B_android#location#GnssStatus#Callback_E@", "GnssStatus.Callback: GNSS status callback object to remove This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a GNSS status callback.", "history": "Added in API level 24", "FullName": "public void unregisterGnssStatusCallback (GnssStatus.Callback callback)"}, "getProviders(boolean)": {"Returns": [["@B_java#util#List_E@", "list of Strings containing names of the providers This value will never be null."]], "Parameters": [["boolean", "boolean: if true then only the providers which are currently enabled are returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the names of location providers.", "history": "Added in API level 1", "FullName": "public List<String> getProviders (boolean enabledOnly)"}, "getProviders(android.location.Criteria, boolean)": {"Returns": [["@B_java#util#List_E@", "list of Strings containing names of the providers"]], "Parameters": [["@B_android#location#Criteria_E@", "Criteria: the criteria that the returned providers must match"], ["boolean", "boolean: if true then only the providers which are currently enabled are returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the names of LocationProviders that satisfy the given criteria, or null if none do. Only providers that are permitted to be accessed by the calling activity will be returned.", "history": "added in API level 1", "FullName": "public List<String> getProviders (Criteria criteria, boolean enabledOnly)"}, "setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."], ["int", "int: the mock status"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle containing mock extras This value may be null."], ["long", "long: the mock update time"]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "This method has no effect. This method has no effect as provider status has been deprecated and is no longer supported.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void setTestProviderStatus (String provider, int status, Bundle extras, long updateTime)"}, "removeProximityAlert(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: the PendingIntent that no longer needs to be notified of proximity alerts This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if intent is null"], ["@B_java#lang#SecurityException_E@", "if @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@"], "Description": "Removes the proximity alert with the given PendingIntent. Before API version 17, this method could be used with @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@. From API version 17 and onwards, this method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public void removeProximityAlert (PendingIntent intent)"}, "setTestProviderLocation(java.lang.String,android.location.Location)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."], ["@B_android#location#Location_E@", "Location: the mock location This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"], ["@B_java#lang#IllegalArgumentException_E@", "if the location is incomplete"]], "SeeAlso": [], "Permissions": [], "Description": "Sets a mock location for the given provider. This location will be used in place of any actual location from the provider. The location object must have a minimum number of fields set to be considered a valid LocationProvider Location, as per documentation on @B_android#location#Location_E@ class.", "history": "Added in API level 3", "FullName": "public void setTestProviderLocation (String provider, Location loc)"}, "requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider with which to register This value must never be null."], ["long", "long: minimum time interval between location updates, in milliseconds"], ["float", "float: minimum distance between location updates, in meters"], ["@B_android#location#LocationListener_E@", "LocationListener: a @B_android#location#LocationListener_E@ whose @B_android#location#LocationListener#onLocationChanged_E@ method will be called for each location update This value must never be null."], ["@B_android#os#Looper_E@", "Looper: a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist"], ["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for location updates using the named provider, and a callback on the specified looper thread. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public void requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener, Looper looper)"}, "unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)": {"Returns": [], "Parameters": [["@B_android#location#GnssNavigationMessage#Callback_E@", "GnssNavigationMessage.Callback: a @B_android#location#GnssNavigationMessage#Callback_E@ object to remove. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a GNSS Navigation Message callback.", "history": "Added in API level 24", "FullName": "public void unregisterGnssNavigationMessageCallback (GnssNavigationMessage.Callback callback)"}, "getGnssYearOfHardware()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the model year of the GNSS hardware and software build. More details, such as build date, may be available in @B_android#location#LocationManager#getGnssHardwareModelName_E@. May return 0 if the model year is less than 2016.", "history": "Added in API level 28", "FullName": "public int getGnssYearOfHardware ()"}, "addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if a provider with the given name already exists"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a mock location provider and adds it to the set of active providers.", "history": "Added in API level 3", "FullName": "public void addTestProvider (String name, boolean requiresNetwork, boolean requiresSatellite, boolean requiresCell, boolean hasMonetaryCost, boolean supportsAltitude, boolean supportsSpeed, boolean supportsBearing, int powerRequirement, int accuracy)"}, "registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback,android.os.Handler)": {"Returns": [["boolean", "true if the callback was added successfully, false otherwise."]], "Parameters": [["@B_android#location#GnssMeasurementsEvent#Callback_E@", "GnssMeasurementsEvent.Callback: a @B_android#location#GnssMeasurementsEvent#Callback_E@ object to register. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the handler that the callback runs on. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Registers a GPS Measurement callback. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean registerGnssMeasurementsCallback (GnssMeasurementsEvent.Callback callback, Handler handler)"}, "requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)": {"Returns": [], "Parameters": [["long", "long: minimum time interval between location updates, in milliseconds"], ["float", "float: minimum distance between location updates, in meters"], ["@B_android#location#Criteria_E@", "Criteria: contains parameters for the location manager to choose the appropriate provider and parameters to compute the location This value must never be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a @B_android#app#PendingIntent_E@ to be sent for each location update This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if criteria is null"], ["@B_java#lang#IllegalArgumentException_E@", "if intent is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for location updates using a Criteria and pending intent. The requestLocationUpdates() and requestSingleUpdate() register the current activity to be updated periodically by the named provider, or by the provider matching the specified @B_android#location#Criteria_E@, with location and status updates. It may take a while to receive the first location update. If an immediate location is required, applications may use the @B_android#location#LocationManager#getLastKnownLocation_E@ method. Location updates are received either by @B_android#location#LocationListener_E@ callbacks, or by broadcast intents to a supplied @B_android#app#PendingIntent_E@. If the caller supplied a pending intent, then location updates are sent with a key of @B_android#location#LocationManager#KEY_LOCATION_CHANGED_E@ and a @B_android#location#Location_E@ value. The location update interval can be controlled using the minTime parameter. The elapsed time between location updates will never be less than minTime, although it can be more depending on the Location Provider implementation and the update interval requested by other applications. Choosing a sensible value for minTime is important to conserve battery life. Each location update requires power from GPS, WIFI, Cell and other radios. Select a minTime value as high as possible while still providing a reasonable user experience. If your application is not in the foreground and showing location to the user then your application should avoid using an active provider (such as @B_android#location#LocationManager#NETWORK_PROVIDER_E@ or @B_android#location#LocationManager#GPS_PROVIDER_E@), but if you insist then select a minTime of 5 * 60 * 1000 (5 minutes) or greater. If your application is in the foreground and showing location to the user then it is appropriate to select a faster update interval. The minDistance parameter can also be used to control the frequency of location updates. If it is greater than 0 then the location provider will only send your application an update when the location has changed by at least minDistance meters, AND at least minTime milliseconds have passed. However it is more difficult for location providers to save power using the minDistance parameter, so minTime should be the primary tool to conserving battery life. If your application wants to passively observe location updates triggered by other applications, but not consume any additional power otherwise, then use the @B_android#location#LocationManager#PASSIVE_PROVIDER_E@ This provider does not actively turn on or modify active location providers, so you do not need to be as careful about minTime and minDistance. However if your application performs heavy work on a location update (such as network activity) then you should select non-zero values for minTime and/or minDistance to rate-limit your update frequency in the case another application enables a location provider with extremely fast updates. In case the provider is disabled by the user, updates will stop, and a provider availability update will be sent. As soon as the provider is enabled again, location updates will immediately resume and a provider availability update sent. Providers can also send status updates, at any time, with extra's specific to the provider. If a callback was supplied then status and availability updates are via @B_android#location#LocationListener#onProviderDisabled_E@, @B_android#location#LocationListener#onProviderEnabled_E@ or @B_android#location#LocationListener#onStatusChanged_E@. Alternately, if a pending intent was supplied then status and availability updates are broadcast intents with extra keys of @B_android#location#LocationManager#KEY_PROVIDER_ENABLED_E@ or @B_android#location#LocationManager#KEY_STATUS_CHANGED_E@. If a @B_android#location#LocationListener_E@ is used but with no Looper specified then the calling thread must already be a @B_android#os#Looper_E@ thread such as the main thread of the calling Activity. If a Looper is specified with a @B_android#location#LocationListener_E@ then callbacks are made on the supplied Looper thread. When location callbacks are invoked, the system will hold a wakelock on your application's behalf for some period of time, but not indefinitely. If your application requires a long running wakelock within the location callback, you should acquire it yourself. Prior to Jellybean, the minTime parameter was only a hint, and some location provider implementations ignored it. From Jellybean and onwards it is mandatory for Android compatible devices to observe both the minTime and minDistance parameters. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestLocationUpdates (long minTime, float minDistance, Criteria criteria, PendingIntent intent)"}, "isLocationEnabled()": {"Returns": [["boolean", "true if location is enabled and false if location is disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current enabled/disabled state of location. To listen for changes, see @B_android#location#LocationManager#MODE_CHANGED_ACTION_E@.", "history": "Added in API level 28", "FullName": "public boolean isLocationEnabled ()"}, "getBestProvider(android.location.Criteria,boolean)": {"Returns": [["@B_java#lang#String_E@", "name of the provider that best matches the requirements This value may be null."]], "Parameters": [["@B_android#location#Criteria_E@", "Criteria: the criteria that need to be matched This value must never be null."], ["boolean", "boolean: if true then only a provider that is currently enabled is returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the provider that best meets the given criteria. Only providers that are permitted to be accessed by the calling activity will be returned. If several providers meet the criteria, the one with the best accuracy is returned. If no provider meets the criteria, the criteria are loosened in the following sequence: power requirement accuracy bearing speed altitude Note that the requirement on monetary cost is not removed in this process.", "history": "Added in API level 1", "FullName": "public String getBestProvider (Criteria criteria, boolean enabledOnly)"}, "removeTestProvider(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the mock location provider with the given name.", "history": "Added in API level 3", "FullName": "public void removeTestProvider (String provider)"}, "getAllProviders()": {"Returns": [["@B_java#util#List_E@", "list of Strings containing names of the provider This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the names of all known location providers. All providers are returned, including ones that are not permitted to be accessed by the calling activity or are currently disabled.", "history": "Added in API level 1", "FullName": "public List<String> getAllProviders ()"}, "requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#location#Criteria_E@", "Criteria: contains parameters for the location manager to choose the appropriate provider and parameters to compute the location This value must never be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a @B_android#app#PendingIntent_E@ to be sent for the location update This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist"], ["@B_java#lang#IllegalArgumentException_E@", "if intent is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for a single location update using a Criteria and pending intent. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestSingleUpdate (Criteria criteria, PendingIntent intent)"}, "requestSingleUpdate(java.lang.String,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider with which to register This value must never be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a @B_android#app#PendingIntent_E@ to be sent for the location update This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist"], ["@B_java#lang#IllegalArgumentException_E@", "if intent is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for a single location update using a named provider and pending intent. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestSingleUpdate (String provider, PendingIntent intent)"}, "requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider with which to register This value must never be null."], ["@B_android#location#LocationListener_E@", "LocationListener: a @B_android#location#LocationListener_E@ whose @B_android#location#LocationListener#onLocationChanged_E@ method will be called when the location update is available This value must never be null."], ["@B_android#os#Looper_E@", "Looper: a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist"], ["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for a single location update using the named provider and a callback. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestSingleUpdate (String provider, LocationListener listener, Looper looper)"}, "removeUpdates(android.location.LocationListener)": {"Returns": [], "Parameters": [["@B_android#location#LocationListener_E@", "LocationListener: listener object that no longer needs location updates This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Removes all location updates for the specified LocationListener. Following this call, updates will no longer occur for this listener. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public void removeUpdates (LocationListener listener)"}, "getProvider(java.lang.String)": {"Returns": [["@B_android#location#LocationProvider_E@", "a LocationProvider, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if name is null or does not exist"], ["@B_java#lang#SecurityException_E@", "if the caller is not permitted to access the given provider."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the information associated with the location provider of the given name, or null if no provider exists by that name.", "history": "Added in API level 1", "FullName": "public LocationProvider getProvider (String name)"}, "removeGpsStatusListener(android.location.GpsStatus.Listener)": {"Returns": [], "Parameters": [["@B_android#location#GpsStatus#Listener_E@", "GpsStatus.Listener: GPS status listener object to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#LocationManager#unregisterGnssStatusCallback_E@ instead. Removes a GPS status listener.", "history": "Added in API level 3 Deprecated in API level 24", "FullName": "public void removeGpsStatusListener (GpsStatus.Listener listener)"}, "removeUpdates(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: pending intent object that no longer needs location updates This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if intent is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the specified pending intent. Following this call, updates will no longer for this pending intent.", "history": "Added in API level 3", "FullName": "public void removeUpdates (PendingIntent intent)"}, "requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider with which to register This value must never be null."], ["long", "long: minimum time interval between location updates, in milliseconds"], ["float", "float: minimum distance between location updates, in meters"], ["@B_android#location#LocationListener_E@", "LocationListener: a @B_android#location#LocationListener_E@ whose @B_android#location#LocationListener#onLocationChanged_E@ method will be called for each location update This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if provider is null or doesn't exist on this device"], ["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#RuntimeException_E@", "if the calling thread has no Looper"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for location updates using the named provider, and a pending intent. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1", "FullName": "public void requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener)"}, "requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)": {"Returns": [], "Parameters": [["long", "long: minimum time interval between location updates, in milliseconds"], ["float", "float: minimum distance between location updates, in meters"], ["@B_android#location#Criteria_E@", "Criteria: contains parameters for the location manager to choose the appropriate provider and parameters to compute the location This value must never be null."], ["@B_android#location#LocationListener_E@", "LocationListener: a @B_android#location#LocationListener_E@ whose @B_android#location#LocationListener#onLocationChanged_E@ method will be called for each location update This value must never be null."], ["@B_android#os#Looper_E@", "Looper: a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if criteria is null"], ["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#SecurityException_E@", "if no suitable permission is present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register for location updates using a Criteria, and a callback on the specified looper thread. See @B_android#location#LocationManager#requestLocationUpdates_E@ for more detail on how to use this method. Requires @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 9", "FullName": "public void requestLocationUpdates (long minTime, float minDistance, Criteria criteria, LocationListener listener, Looper looper)"}, "addNmeaListener(android.location.OnNmeaMessageListener)": {"Returns": [["boolean", "true if the listener was successfully added"]], "Parameters": [["@B_android#location#OnNmeaMessageListener_E@", "OnNmeaMessageListener: a @B_android#location#OnNmeaMessageListener_E@ object to register This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the ACCESS_FINE_LOCATION permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Adds an NMEA listener. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean addNmeaListener (OnNmeaMessageListener listener)"}, "addGpsStatusListener(android.location.GpsStatus.Listener)": {"Returns": [["boolean", "true if the listener was successfully added"]], "Parameters": [["@B_android#location#GpsStatus#Listener_E@", "GpsStatus.Listener: GPS status listener object to register"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the ACCESS_FINE_LOCATION permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "use @B_android#location#LocationManager#registerGnssStatusCallback_E@ instead. Adds a GPS status listener. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 3 Deprecated in API level 24", "FullName": "public boolean addGpsStatusListener (GpsStatus.Listener listener)"}, "registerGnssStatusCallback(android.location.GnssStatus.Callback)": {"Returns": [["boolean", "true if the listener was successfully added"]], "Parameters": [["@B_android#location#GnssStatus#Callback_E@", "GnssStatus.Callback: GNSS status callback object to register This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the ACCESS_FINE_LOCATION permission is not present"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Registers a GNSS status callback. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean registerGnssStatusCallback (GnssStatus.Callback callback)"}, "registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback,android.os.Handler)": {"Returns": [["boolean", "true if the callback was added successfully, false otherwise."]], "Parameters": [["@B_android#location#GnssNavigationMessage#Callback_E@", "GnssNavigationMessage.Callback: a @B_android#location#GnssNavigationMessage#Callback_E@ object to register. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the handler that the callback runs on. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Registers a GNSS Navigation Message callback. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 24", "FullName": "public boolean registerGnssNavigationMessageCallback (GnssNavigationMessage.Callback callback, Handler handler)"}, "getProviders(android.location.Criteria,boolean)": {"Returns": [["@B_java#util#List_E@", "list of Strings containing names of the providers"]], "Parameters": [["@B_android#location#Criteria_E@", "Criteria: the criteria that the returned providers must match This value must never be null."], ["boolean", "boolean: if true then only the providers which are currently enabled are returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the names of LocationProviders that satisfy the given criteria, or null if none do. Only providers that are permitted to be accessed by the calling activity will be returned.", "history": "Added in API level 1", "FullName": "public List<String> getProviders (Criteria criteria, boolean enabledOnly)"}, "clearTestProviderEnabled(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#location#LocationManager#setTestProviderEnabled_E@ instead. Removes any mock enabled value associated with the given provider.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public void clearTestProviderEnabled (String provider)"}, "unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)": {"Returns": [], "Parameters": [["@B_android#location#GnssMeasurementsEvent#Callback_E@", "GnssMeasurementsEvent.Callback: a @B_android#location#GnssMeasurementsEvent#Callback_E@ object to remove. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a GPS Measurement callback.", "history": "Added in API level 24", "FullName": "public void unregisterGnssMeasurementsCallback (GnssMeasurementsEvent.Callback callback)"}, "setTestProviderEnabled(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the provider name This value must never be null."], ["boolean", "boolean: the mock enabled value"]], "Throws": [["@B_java#lang#SecurityException_E@", "if @B_android#app#AppOpsManager#OPSTR_MOCK_LOCATION_E@ is not set to @B_android#app#AppOpsManager#MODE_ALLOWED_E@ for your app."], ["@B_java#lang#IllegalArgumentException_E@", "if no provider with the given name exists"]], "SeeAlso": [], "Permissions": [], "Description": "Sets a mock enabled value for the given provider. This value will be used in place of any actual value from the provider.", "history": "Added in API level 3", "FullName": "public void setTestProviderEnabled (String provider, boolean enabled)"}, "sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "true if the command succeeds."]], "Parameters": [["@B_java#lang#String_E@", "String: name of the location provider. This value must never be null."], ["@B_java#lang#String_E@", "String: name of the command to send to the provider. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: optional arguments for the command (or null). The provider may optionally fill the extras Bundle with results from the command. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API", "history": "Added in API level 3", "FullName": "public boolean sendExtraCommand (String provider, String command, Bundle extras)"}}, "Inheritance": [], "ClassName": "android.location.LocationManager", "ClassDesc": "This class provides access to the system location services. These services allow applications to obtain periodic updates of the device's geographical location, or to fire an application-specified @B_android#content#Intent_E@ when the device enters the proximity of a given geographical location. Unless noted, all Location API methods require the @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permissions. If your application only has the coarse permission then it will not have access to the GPS or passive location providers. Other providers will still return location results, but the update rate will be throttled and the exact location will be obfuscated to a coarse level of accuracy. Requires the @B_android#content#pm#PackageManager#FEATURE_LOCATION_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}