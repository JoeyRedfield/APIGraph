{"Functions": {"openDevice(android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager.OnDeviceOpenedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#midi#MidiDeviceInfo_E@", "MidiDeviceInfo: a @B_android#media#midi#MidiDeviceInfo_E@ to open"], ["@B_android#media#midi#MidiManager#OnDeviceOpenedListener_E@", "MidiManager.OnDeviceOpenedListener: a @B_android#media#midi#MidiManager#OnDeviceOpenedListener_E@ to be called to receive the result"], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ that will be used for delivering the result. If handler is null, then the thread used for the listener is unspecified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens a MIDI device for reading and writing.", "history": "Added in API level 23", "FullName": "public void openDevice (MidiDeviceInfo deviceInfo, MidiManager.OnDeviceOpenedListener listener, Handler handler)"}, "openBluetoothDevice(android.bluetooth.BluetoothDevice,android.media.midi.MidiManager.OnDeviceOpenedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: a @B_android#bluetooth#BluetoothDevice_E@ to open as a MIDI device"], ["@B_android#media#midi#MidiManager#OnDeviceOpenedListener_E@", "MidiManager.OnDeviceOpenedListener: a @B_android#media#midi#MidiManager#OnDeviceOpenedListener_E@ to be called to receive the result"], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ that will be used for delivering the result. If handler is null, then the thread used for the listener is unspecified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens a Bluetooth MIDI device for reading and writing.", "history": "Added in API level 23", "FullName": "public void openBluetoothDevice (BluetoothDevice bluetoothDevice, MidiManager.OnDeviceOpenedListener listener, Handler handler)"}, "getDevices()": {"Returns": [["@B_android#media#midi#MidiDeviceInfo_E@", "an array of all MIDI devices"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the list of all connected MIDI devices.", "history": "Added in API level 23", "FullName": "public MidiDeviceInfo[] getDevices ()"}, "unregisterDeviceCallback(android.media.midi.MidiManager.DeviceCallback)": {"Returns": [], "Parameters": [["@B_android#media#midi#MidiManager#DeviceCallback_E@", "MidiManager.DeviceCallback: a @B_android#media#midi#MidiManager#DeviceCallback_E@ to unregister"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a @B_android#media#midi#MidiManager#DeviceCallback_E@.", "history": "Added in API level 23", "FullName": "public void unregisterDeviceCallback (MidiManager.DeviceCallback callback)"}, "registerDeviceCallback(android.media.midi.MidiManager.DeviceCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#midi#MidiManager#DeviceCallback_E@", "MidiManager.DeviceCallback: a @B_android#media#midi#MidiManager#DeviceCallback_E@ for MIDI device notifications"], ["@B_android#os#Handler_E@", "Handler: The @B_android#os#Handler_E@ that will be used for delivering the device notifications. If handler is null, then the thread used for the callback is unspecified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to receive notifications when MIDI devices are added and removed. The @B_android#media#midi#MidiManager#DeviceCallback#onDeviceStatusChanged_E@ method will be called immediately for any devices that have open ports. This allows applications to know which input ports are already in use and, therefore, unavailable. Applications should call @B_android#media#midi#MidiManager#getDevices_E@ before registering the callback to get a list of devices already added.", "history": "Added in API level 23", "FullName": "public void registerDeviceCallback (MidiManager.DeviceCallback callback, Handler handler)"}}, "Inheritance": [], "ClassName": "android.media.midi.MidiManager", "ClassDesc": "This class is the public application interface to the MIDI service. Requires the @B_android#content#pm#PackageManager#FEATURE_MIDI_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}