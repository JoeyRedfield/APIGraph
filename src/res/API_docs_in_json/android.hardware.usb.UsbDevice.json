{"Functions": {"getVersion()": {"Returns": [["@B_java#lang#String_E@", "the device version This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the version number of the device.", "history": "Added in API level 23", "FullName": "public String getVersion ()"}, "getProductId()": {"Returns": [["int", "the device product ID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a product ID for the device.", "history": "Added in API level 12", "FullName": "public int getProductId ()"}, "getConfigurationCount()": {"Returns": [["int", "the number of configurations"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of @B_android#hardware#usb#UsbConfiguration_E@s this device contains.", "history": "Added in API level 21", "FullName": "public int getConfigurationCount ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 12", "FullName": "public int describeContents ()"}, "getDeviceName(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public static String getDeviceName (int id)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 12", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getInterface(int)": {"Returns": [["@B_android#hardware#usb#UsbInterface_E@", "the interface This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#hardware#usb#UsbInterface_E@ at the given index. For devices with multiple configurations, you will probably want to use @B_android#hardware#usb#UsbConfiguration#getInterface_E@ instead.", "history": "Added in API level 12", "FullName": "public UsbInterface getInterface (int index)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 12", "FullName": "public boolean equals (Object o)"}, "getInterfaceCount()": {"Returns": [["int", "the number of interfaces"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of @B_android#hardware#usb#UsbInterface_E@s this device contains. For devices with multiple configurations, you will probably want to use @B_android#hardware#usb#UsbConfiguration#getInterfaceCount_E@ instead.", "history": "Added in API level 12", "FullName": "public int getInterfaceCount ()"}, "getDeviceProtocol()": {"Returns": [["int", "the device's protocol"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the device's protocol field.", "history": "Added in API level 12", "FullName": "public int getDeviceProtocol ()"}, "getConfiguration(int)": {"Returns": [["@B_android#hardware#usb#UsbConfiguration_E@", "the configuration This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#hardware#usb#UsbConfiguration_E@ at the given index.", "history": "Added in API level 21", "FullName": "public UsbConfiguration getConfiguration (int index)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 12", "FullName": "public int hashCode ()"}, "getDeviceName()": {"Returns": [["@B_java#lang#String_E@", "the device name This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the device. In the standard implementation, this is the path of the device file for the device in the usbfs file system.", "history": "Added in API level 12", "FullName": "public String getDeviceName ()"}, "getManufacturerName()": {"Returns": [["@B_java#lang#String_E@", "the manufacturer name, or null if the property could not be read"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the manufacturer name of the device.", "history": "Added in API level 21", "FullName": "public String getManufacturerName ()"}, "getSerialNumber()": {"Returns": [["@B_java#lang#String_E@", "the serial number name, or null if the property could not be read"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the app targets SDK >= @B_android#os#Build#VERSION_CODES#Q_E@ and the app does not have permission to read from the device."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the serial number of the device.", "history": "Added in API level 21", "FullName": "public String getSerialNumber ()"}, "getDeviceId(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public static int getDeviceId (String name)"}, "getVendorId()": {"Returns": [["int", "the device vendor ID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a vendor ID for the device.", "history": "Added in API level 12", "FullName": "public int getVendorId ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 12", "FullName": "public String toString ()"}, "getProductName()": {"Returns": [["@B_java#lang#String_E@", "the product name, or null if the property could not be read"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the product name of the device.", "history": "Added in API level 21", "FullName": "public String getProductName ()"}, "getDeviceId()": {"Returns": [["int", "the device ID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a unique integer ID for the device. This is a convenience for clients that want to use an integer to represent the device, rather than the device name. IDs are not persistent across USB disconnects.", "history": "Added in API level 12", "FullName": "public int getDeviceId ()"}, "getDeviceSubclass()": {"Returns": [["int", "the device's subclass"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the device's subclass field.", "history": "Added in API level 12", "FullName": "public int getDeviceSubclass ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 12", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getDeviceClass()": {"Returns": [["int", "the devices's class"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the devices's class field. Some useful constants for USB device classes can be found in @B_android#hardware#usb#UsbConstants_E@.", "history": "Added in API level 12", "FullName": "public int getDeviceClass ()"}}, "Inheritance": [], "ClassName": "android.hardware.usb.UsbDevice", "ClassDesc": "This class represents a USB device attached to the android device with the android device acting as the USB host. Each device contains one or more @B_android#hardware#usb#UsbInterface_E@s, each of which contains a number of @B_android#hardware#usb#UsbEndpoint_E@s (the channels via which data is transmitted over USB). This class contains information (along with @B_android#hardware#usb#UsbInterface_E@ and @B_android#hardware#usb#UsbEndpoint_E@) that describes the capabilities of the USB device. To communicate with the device, you open a @B_android#hardware#usb#UsbDeviceConnection_E@ for the device and use @B_android#hardware#usb#UsbRequest_E@ to send and receive data on an endpoint. @B_android#hardware#usb#UsbDeviceConnection#controlTransfer_E@ is used for control requests on endpoint zero."}