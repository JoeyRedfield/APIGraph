{"Functions": {"setRequestMethod(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the HTTP method"]], "Throws": [["@B_java#net#ProtocolException_E@", "if the method cannot be reset or if the requested method isn't valid for HTTP."], ["@B_java#lang#SecurityException_E@", "if a security manager is set and the method is \"TRACE\", but the \"allowHttpTrace\" NetPermission is not granted."]], "SeeAlso": ["@B_java#net#HttpURLConnection#getRequestMethod_E@"], "Permissions": [], "Description": "Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions. The default method is GET.", "history": "Added in API level 1", "FullName": "public void setRequestMethod (String method)"}, "setFixedLengthStreamingMode(long)": {"Returns": [], "Parameters": [["long", "long: The number of bytes which will be written to the OutputStream."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if URLConnection is already connected or if a different streaming mode is already enabled."], ["@B_java#lang#IllegalArgumentException_E@", "if a content length less than zero is specified."]], "SeeAlso": [], "Permissions": [], "Description": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance. An exception will be thrown if the application attempts to write more data than the indicated content-length, or if the application closes the OutputStream before writing the indicated amount. When output streaming is enabled, authentication and redirection cannot be handled automatically. A This method must be called before the URLConnection is connected. The content length set by invoking this method takes precedence over any value set by @B_java#net#HttpURLConnection#setFixedLengthStreamingMode_E@.", "history": "Added in API level 19", "FullName": "public void setFixedLengthStreamingMode (long contentLength)"}, "getInstanceFollowRedirects()": {"Returns": [["boolean", "the value of this HttpURLConnection's instanceFollowRedirects field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpURLConnection#instanceFollowRedirects_E@", "@B_java#net#HttpURLConnection#setInstanceFollowRedirects_E@"], "Permissions": [], "Description": "Returns the value of this HttpURLConnection's instanceFollowRedirects field.", "history": "Added in API level 1", "FullName": "public boolean getInstanceFollowRedirects ()"}, "getHeaderFieldDate(java.lang.String, long)": {"Returns": [["long", "the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: a default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as date. The result is the number of milliseconds since January 1, 1970 GMT represented by the named field. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "added in API level 1", "FullName": "public long getHeaderFieldDate (String name, long Default)"}, "getContentEncoding()": {"Returns": [["", "the value of the response header field content-encoding."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the encoding used to transmit the response body over the network. This is null or \"identity\" if the content was not encoded, or \"gzip\" if the body was gzip compressed. Most callers will be more interested in the @B_java#net#URLConnection#getContentType_E@, which may also include the content's character encoding.", "history": "Added in API level 1", "FullName": "public String getContentEncoding ()"}, "getHeaderFieldKey(int)": {"Returns": [["@B_java#lang#String_E@", "the key for the nth header field, or null if the key does not exist."]], "Parameters": [["int", "int: an index, where n >=0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key for the n0@B_java#net#HttpURLConnection#getHeaderField_E@ returns the status line, but getHeaderFieldKey(0) returns null.", "history": "Added in API level 1", "FullName": "public String getHeaderFieldKey (int n)"}, "getFollowRedirects()": {"Returns": [["boolean", "true if HTTP redirects should be automatically followed, false if not."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpURLConnection#setFollowRedirects_E@"], "Permissions": [], "Description": "Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.", "history": "Added in API level 1", "FullName": "public static boolean getFollowRedirects ()"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that other requests to the server are unlikely in the near future. Calling disconnect() should not imply that this HttpURLConnection instance can be reused for other requests.", "history": "Added in API level 1", "FullName": "public abstract void disconnect ()"}, "getHeaderFieldDate(java.lang.String,long)": {"Returns": [["long", "the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: a default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as date. The result is the number of milliseconds since January 1, 1970 GMT represented by the named field. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "Added in API level 1", "FullName": "public long getHeaderFieldDate (String name, long Default)"}, "setChunkedStreamingMode(int)": {"Returns": [], "Parameters": [["int", "int: The number of bytes to write in each chunk. If chunklen is less than or equal to zero, a default value will be used."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if URLConnection is already connected or if a different streaming mode is already enabled."]], "SeeAlso": ["@B_java#net#HttpURLConnection#setFixedLengthStreamingMode_E@"], "Permissions": [], "Description": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is When output streaming is enabled, authentication and redirection cannot be handled automatically. A HttpRetryException will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error. This method must be called before the URLConnection is connected.", "history": "Added in API level 1", "FullName": "public void setChunkedStreamingMode (int chunklen)"}, "HttpURLConnection(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for the HttpURLConnection.", "history": "Added in API level 1", "FullName": "protected HttpURLConnection (URL u)"}, "getPermission()": {"Returns": [["@B_java#security#Permission_E@", "a SocketPermission object representing the permission necessary to connect to the destination host and port."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurs while computing the permission."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#net#SocketPermission_E@ object representing the permission necessary to connect to the destination host and port.", "history": "Added in API level 1", "FullName": "public Permission getPermission ()"}, "setFixedLengthStreamingMode(int)": {"Returns": [], "Parameters": [["int", "int: The number of bytes which will be written to the OutputStream."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if URLConnection is already connected or if a different streaming mode is already enabled."], ["@B_java#lang#IllegalArgumentException_E@", "if a content length less than zero is specified."]], "SeeAlso": ["@B_java#net#HttpURLConnection#setChunkedStreamingMode_E@"], "Permissions": [], "Description": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance. An exception will be thrown if the application attempts to write more data than the indicated content-length, or if the application closes the OutputStream before writing the indicated amount. When output streaming is enabled, authentication and redirection cannot be handled automatically. A HttpRetryException will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error. This method must be called before the URLConnection is connected. @B_java#net#HttpURLConnection#setFixedLengthStreamingMode_E@ is recommended instead of this method as it allows larger content lengths to be set.", "history": "Added in API level 1", "FullName": "public void setFixedLengthStreamingMode (int contentLength)"}, "getRequestMethod()": {"Returns": [["@B_java#lang#String_E@", "the HTTP request method"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpURLConnection#setRequestMethod_E@"], "Permissions": [], "Description": "Get the request method.", "history": "Added in API level 1", "FullName": "public String getRequestMethod ()"}, "getResponseMessage()": {"Returns": [["@B_java#lang#String_E@", "the HTTP response message, or null"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurred connecting to the server."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the HTTP response message, if any, returned along with the response code from a server. From responses like:", "history": "Added in API level 1", "FullName": "public String getResponseMessage ()"}, "setFollowRedirects(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a boolean indicating whether or not to follow HTTP redirects."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSetFactory_E@", "@B_java#net#HttpURLConnection#getFollowRedirects_E@"], "Permissions": [], "Description": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class. True by default. Applets cannot change this variable. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setFollowRedirects (boolean set)"}, "usingProxy()": {"Returns": [["boolean", "a boolean indicating if the connection is using a proxy."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates if the connection is going through a proxy.", "history": "Added in API level 1", "FullName": "public abstract boolean usingProxy ()"}, "setInstanceFollowRedirects(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a boolean indicating whether or not to follow HTTP redirects."]], "Throws": [], "SeeAlso": ["@B_java#net#HttpURLConnection#instanceFollowRedirects_E@", "@B_java#net#HttpURLConnection#getInstanceFollowRedirects_E@"], "Permissions": [], "Description": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance. The default value comes from followRedirects, which defaults to true.", "history": "Added in API level 1", "FullName": "public void setInstanceFollowRedirects (boolean followRedirects)"}, "getHeaderField(int)": {"Returns": [["@B_java#lang#String_E@", "the value of the nth header field, or null if the value does not exist."]], "Parameters": [["int", "int: an index, where n>=0."]], "Throws": [], "SeeAlso": ["@B_java#net#HttpURLConnection#getHeaderFieldKey_E@"], "Permissions": [], "Description": "Returns the value for the n0 This method can be used in conjunction with the @B_java#net#HttpURLConnection#getHeaderFieldKey_E@ method to iterate through all the headers in the message.", "history": "Added in API level 1", "FullName": "public String getHeaderField (int n)"}, "getErrorStream()": {"Returns": [["@B_java#io#InputStream_E@", "an error stream if any, null if there have been no errors, the connection is not connected or the server sent no useful data."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the error stream if the connection failed but the server sent useful data nonetheless. The typical example is when an HTTP server responds with a 404, which will cause a FileNotFoundException to be thrown in connect, but the server sent an HTML help page with suggestions as to what to do. This method will not cause a connection to be initiated. If the connection was not connected, or if the server did not have an error while connecting or if the server had an error but no error data was sent, this method will return null. This is the default.", "history": "Added in API level 1", "FullName": "public InputStream getErrorStream ()"}, "getResponseCode()": {"Returns": [["int", "the HTTP Status-Code, or -1"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurred connecting to the server."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the status code from an HTTP response message. For example, in the case of the following status lines:", "history": "Added in API level 1", "FullName": "public int getResponseCode ()"}}, "Inheritance": ["@B_java#net#URLConnection_E@"], "ClassName": "java.net.HttpURLConnection", "ClassDesc": "A URLConnection with support for HTTP-specific features. See Uses of this class follow a pattern: For example, to retrieve the webpage at http://www.android.com/: @B_java#net#URL#openConnection_E@ on a URL with the \"https\" scheme will return an HttpsURLConnection, which allows for overriding the default @B_javax#net#ssl#HostnameVerifier_E@ and @B_javax#net#ssl#SSLSocketFactory_E@. An application-supplied SSLSocketFactory created from an @B_javax#net#ssl#SSLContext_E@ can provide a custom @B_javax#net#ssl#X509TrustManager_E@ for verifying certificate chains and a custom @B_javax#net#ssl#X509KeyManager_E@ for supplying client certificates. See @B_javax#net#ssl#HttpsURLConnection_E@ for more details. HttpURLConnection will follow up to five HTTP redirects. It will follow redirects from one origin server to another. This implementation doesn't follow redirects from HTTPS to HTTP or vice versa. If the HTTP response indicates that an error occurred, @B_java#net#URLConnection#getInputStream_E@ will throw an @B_java#io#IOException_E@. Use @B_java#net#HttpURLConnection#getErrorStream_E@ to read the error response. The headers can be read in the normal way using @B_java#net#URLConnection#getHeaderFields_E@, @B_java#net#URLConnection#setDoOutput_E@. For best performance, you should call either @B_java#net#HttpURLConnection#setFixedLengthStreamingMode_E@ when the body length is known in advance, or @B_java#net#HttpURLConnection#setChunkedStreamingMode_E@ when it is not. Otherwise HttpURLConnection will be forced to buffer the complete request body in memory before it is transmitted, wasting (and possibly exhausting) heap and increasing latency. For example, to perform an upload: @B_java#io#BufferedInputStream_E@ or @B_java#io#BufferedOutputStream_E@. Callers that do only bulk reads or writes may omit buffering. When transferring large amounts of data to or from a server, use streams to limit how much data is in memory at once. Unless you need the entire body to be in memory at once, process it as a stream (rather than storing the complete body as a single byte array or string). To reduce latency, this class may reuse the same underlying Socket for multiple request/response pairs. As a result, HTTP connections may be held open longer than necessary. Calls to @B_java#net#HttpURLConnection#disconnect_E@ may return the socket to a pool of connected sockets. By default, this implementation of HttpURLConnection requests that servers use gzip compression and it automatically decompresses the data for callers of @B_java#net#URLConnection#getInputStream_E@. The Content-Encoding and Content-Length response headers are cleared in this case. Gzip compression can be disabled by setting the acceptable encodings in the request header: Setting the Accept-Encoding request header explicitly disables automatic decompression and leaves the response headers intact; callers must handle decompression as needed, according to the Content-Encoding header of the response. @B_java#net#URLConnection#getContentLength_E@ returns the number of bytes transmitted and cannot be used to predict how many bytes can be read from @B_java#net#URLConnection#getInputStream_E@ for compressed streams. Instead, read that stream until it is exhausted, i.e. when @B_java#io#InputStream#read_E@ returns -1. @B_java#net#URLConnection#getURL_E@ to test if your connection has been unexpectedly redirected. This check is not valid until @B_java#net#URLConnection#getHeaderFields_E@ or @B_java#net#URLConnection#getInputStream_E@. For example, to check that a response was not redirected to an unexpected host: HttpURLConnection supports @B_java#net#Authenticator_E@ to set the VM-wide authentication handler: HttpURLConnection includes an extensible cookie manager. Enable VM-wide cookie management using @B_java#net#CookieHandler_E@ and @B_java#net#CookieManager_E@: CookieManager accepts cookies from the @B_java#net#CookiePolicy#ACCEPT_ALL_E@ and @B_java#net#CookiePolicy#ACCEPT_NONE_E@. Implement @B_java#net#CookiePolicy_E@ to define a custom policy. The default CookieManager keeps all accepted cookies in memory. It will forget these cookies when the VM exits. Implement @B_java#net#CookieStore_E@ to define a custom cookie store. In addition to the cookies set by HTTP responses, you may set cookies programmatically. To be included in HTTP request headers, cookies must have the domain and path properties set. By default, new instances of HttpCookie work only with servers that support For example, to receive www.twitter.com in French: HttpURLConnection uses the GET method by default. It will use POST if @B_java#net#URLConnection#setDoOutput_E@ has been called. Other HTTP methods (OPTIONS, HEAD, PUT, DELETE and TRACE) can be used with @B_java#net#HttpURLConnection#setRequestMethod_E@. @B_java#net#Proxy#Type#HTTP_E@ or @B_java#net#Proxy#Type#SOCKS_E@ proxy. To use a proxy, use @B_java#net#URL#openConnection_E@ when creating the connection. This class includes transparent support for IPv6. For hosts with both IPv4 and IPv6 addresses, it will attempt to connect to each of a host's addresses until a connection is established. android.net.http.HttpResponseCache for instructions on enabling HTTP caching in your application. close() on a readable InputStream could Each instance of HttpURLConnection may be used for one request/response pair. Instances of this class are not thread safe."}