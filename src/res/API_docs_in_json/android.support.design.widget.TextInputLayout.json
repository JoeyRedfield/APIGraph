{"Functions": {"refreshDrawableState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void refreshDrawableState ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas canvas)"}, "setTypeface(android.graphics.Typeface)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: typeface to use, or null to use the default."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the typeface to use for the hint and any label views (such as counter and error views).", "history": "added in version 23.0.0", "FullName": "void setTypeface (Typeface typeface)"}, "setCounterEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the character counter functionality is enabled or not in this layout.", "history": "added in version 23.1.0", "FullName": "void setCounterEnabled (boolean enabled)"}, "setErrorTextAppearance(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color and size for the error message from the specified TextAppearance resource.", "history": "added in version 25.1.0", "FullName": "void setErrorTextAppearance (int resId)"}, "isHintAnimationEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setHintAnimationEnabled_E@"], "Permissions": [], "Description": "Returns whether any hint state changes, due to being focused or non-empty text, are animated.", "history": "added in version 23.0.0", "FullName": "boolean isHintAnimationEnabled ()"}, "getTypeface()": {"Returns": [["@B_android#graphics#Typeface_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the typeface used for the hint and any label views (such as counter and error views).", "history": "added in version 23.1.0", "FullName": "Typeface getTypeface ()"}, "getHint()": {"Returns": [["@B_java#lang#CharSequence_E@", "the hint, or null if there isn't one set, or the hint is not enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hint which is displayed in the floating label, if enabled.", "history": "added in version 23.0.0", "FullName": "CharSequence getHint ()"}, "setHintTextAppearance(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the hint text color, size, style from the specified TextAppearance resource.", "history": "added in version 23.0.0", "FullName": "void setHintTextAppearance (int resId)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setHintAnimationEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#isHintAnimationEnabled_E@"], "Permissions": [], "Description": "Set whether any hint state changes, due to being focused or non-empty text, are animated.", "history": "added in version 23.0.0", "FullName": "void setHintAnimationEnabled (boolean enabled)"}, "setHintEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setHint_E@", "@B_android#support#design#widget#TextInputLayout#isHintEnabled_E@"], "Permissions": [], "Description": "Sets whether the floating label functionality is enabled or not in this layout. If enabled, any non-empty hint in the child EditText will be moved into the floating hint, and its existing hint will be cleared. If disabled, then any non-empty floating hint in this layout will be moved into the EditText, and this layout's hint will be cleared.", "history": "added in version 23.2.0", "FullName": "void setHintEnabled (boolean enabled)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getPasswordVisibilityToggleContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the currently configured content description for the password visibility toggle button. This will be used to describe the navigation action to users through mechanisms such as screen readers.", "history": "added in version 24.2.0", "FullName": "CharSequence getPasswordVisibilityToggleContentDescription ()"}, "isHintEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setHintEnabled_E@"], "Permissions": [], "Description": "Returns whether the floating label functionality is enabled or not in this layout.", "history": "added in version 23.2.0", "FullName": "boolean isHintEnabled ()"}, "getEditText()": {"Returns": [["@B_android#widget#EditText_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#widget#EditText_E@ used for text input.", "history": "added in version 22.2.0", "FullName": "EditText getEditText ()"}, "setHint(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setHintEnabled_E@"], "Permissions": [], "Description": "Set the hint to be displayed in the floating label, if enabled.", "history": "added in version 22.2.0", "FullName": "void setHint (CharSequence hint)"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "", "FullName": "void setEnabled (boolean enabled)"}, "setPasswordVisibilityToggleEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable the functionality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the password visibility toggle functionality is enabled or not. When enabled, a button is placed at the end of the EditText which enables the user to switch between the field's input being visibly disguised or not.", "history": "added in version 24.2.0", "FullName": "void setPasswordVisibilityToggleEnabled (boolean enabled)"}, "getCounterMaxLength()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the max length shown at the character counter.", "history": "added in version 23.1.0", "FullName": "int getCounterMaxLength ()"}, "setErrorEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the error functionality is enabled or not in this layout. Enabling this functionality before setting an error message via @B_android#support#design#widget#TextInputLayout#setError_E@, will mean that this layout will not change size when an error is displayed.", "history": "added in version 22.2.0", "FullName": "void setErrorEnabled (boolean enabled)"}, "setPasswordVisibilityToggleDrawable(int)": {"Returns": [], "Parameters": [["int", "int: resource id of the drawable to set, or 0 to clear the icon"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the password visibility toggle button. If you use an icon you should also set a description for its action using @B_android#support#design#widget#TextInputLayout#setPasswordVisibilityToggleContentDescription_E@. This is used for accessibility.", "history": "added in version 24.2.0", "FullName": "void setPasswordVisibilityToggleDrawable (int resId)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#design#widget#TextInputLayout#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function.", "history": "", "FullName": "void drawableStateChanged ()"}, "isCounterEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setCounterEnabled_E@"], "Permissions": [], "Description": "Returns whether the character counter functionality is enabled or not in this layout.", "history": "added in version 23.2.0", "FullName": "boolean isCounterEnabled ()"}, "TextInputLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "TextInputLayout (Context context)"}, "isPasswordVisibilityToggleEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setPasswordVisibilityToggleEnabled_E@"], "Permissions": [], "Description": "Returns whether the password visibility toggle functionality is currently enabled.", "history": "added in version 24.2.0", "FullName": "boolean isPasswordVisibilityToggleEnabled ()"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "added in version 23.2.0", "FullName": "Parcelable onSaveInstanceState ()"}, "getPasswordVisibilityToggleDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setPasswordVisibilityToggleDrawable_E@"], "Permissions": [], "Description": "Returns the icon currently used for the password visibility toggle button.", "history": "added in version 24.2.0", "FullName": "Drawable getPasswordVisibilityToggleDrawable ()"}, "getError()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setError_E@"], "Permissions": [], "Description": "Returns the error message that was set to be displayed with @B_android#support#design#widget#TextInputLayout#setError_E@, or null if no error was set or if error displaying is not enabled.", "history": "added in version 23.0.0", "FullName": "CharSequence getError ()"}, "isErrorEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#setErrorEnabled_E@"], "Permissions": [], "Description": "Returns whether the error functionality is enabled or not in this layout.", "history": "added in version 23.0.0", "FullName": "boolean isErrorEnabled ()"}, "setCounterMaxLength(int)": {"Returns": [], "Parameters": [["int", "int: maxLength to display. Any value less than or equal to 0 will not be shown."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the max length to display at the character counter.", "history": "added in version 23.1.0", "FullName": "void setCounterMaxLength (int maxLength)"}, "setPasswordVisibilityToggleContentDescription(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a content description string to set, or 0 to clear the description"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the navigation button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the password visibility toggle.", "history": "added in version 24.2.0", "FullName": "void setPasswordVisibilityToggleContentDescription (int resId)"}, "setError(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Error message to display, or null to clear"]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TextInputLayout#getError_E@"], "Permissions": [], "Description": "Sets an error message that will be displayed below our @B_android#widget#EditText_E@. If the error is null, the error message will be cleared. If the error functionality has not been enabled via @B_android#support#design#widget#TextInputLayout#setErrorEnabled_E@, then it will be automatically enabled if error is not empty.", "history": "added in version 22.2.0", "FullName": "void setError (CharSequence error)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#LinearLayout_E@"], "ClassName": "android.support.design.widget.TextInputLayout", "ClassDesc": "Layout which wraps an https:##developer#android#com@B_android#widget#EditText_E@ (or descendant) to show a floating label when the hint is hidden due to the user inputting text. Also supports showing an error via @B_android#support#design#widget#TextInputLayout#setErrorEnabled_E@ and @B_android#support#design#widget#TextInputLayout#setError_E@, and a character counter via @B_android#support#design#widget#TextInputLayout#setCounterEnabled_E@. Password visibility toggling is also supported via the @B_android#support#design#widget#TextInputLayout#setPasswordVisibilityToggleEnabled_E@ API and related attribute. If enabled, a button is displayed to toggle between the password being displayed as plain-text or disguised, when your EditText is set to display a password. The @B_android#support#design#widget#TextInputEditText_E@ class is provided to be used as a child of this layout. Using TextInputEditText allows TextInputLayout greater control over the visual aspects of any text input. An example usage is as so: android:id and use https:##developer#android#com@B_android#view#View#findViewById_E@."}