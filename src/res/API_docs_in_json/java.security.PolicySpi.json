{"Functions": {"engineGetPermissions(java.security.CodeSource)": {"Returns": [["@B_java#security#PermissionCollection_E@", "a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."]], "Parameters": [["@B_java#security#CodeSource_E@", "CodeSource: the CodeSource to which the returned PermissionCollection has been granted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource.", "history": "Added in API level 9", "FullName": "protected PermissionCollection engineGetPermissions (CodeSource codesource)"}, "engineImplies(java.security.ProtectionDomain,java.security.Permission)": {"Returns": [["boolean", "boolean true if the permission is granted to the domain."]], "Parameters": [["@B_java#security#ProtectionDomain_E@", "ProtectionDomain: the ProtectionDomain to check."], ["@B_java#security#Permission_E@", "Permission: check whether this permission is granted to the specified domain."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the policy has granted a Permission to a ProtectionDomain.", "history": "Added in API level 9", "FullName": "protected abstract boolean engineImplies (ProtectionDomain domain, Permission permission)"}, "engineRefresh()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.", "history": "Added in API level 9", "FullName": "protected void engineRefresh ()"}, "engineGetPermissions(java.security.ProtectionDomain)": {"Returns": [["@B_java#security#PermissionCollection_E@", "a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."]], "Parameters": [["@B_java#security#ProtectionDomain_E@", "ProtectionDomain: the ProtectionDomain to which the returned PermissionCollection has been granted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a ProtectionDomain.", "history": "Added in API level 9", "FullName": "protected PermissionCollection engineGetPermissions (ProtectionDomain domain)"}, "PolicySpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 9", "FullName": "public PolicySpi ()"}}, "Inheritance": [], "ClassName": "java.security.PolicySpi", "ClassDesc": "This class defines the Policy class. All the abstract methods in this class must be implemented by each service provider who wishes to supply a Policy implementation. Subclass implementations of this abstract class must provide a public constructor that takes a Policy.Parameters object as an input parameter. This constructor also must throw an IllegalArgumentException if it does not understand the Policy.Parameters input."}