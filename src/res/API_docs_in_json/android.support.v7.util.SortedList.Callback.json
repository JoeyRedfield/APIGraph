{"Functions": {"SortedList.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.1.0", "FullName": "SortedList.Callback ()"}, "onChanged(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: The position of the item which has been updated."], ["int", "int: The number of items which has changed."], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when count number of items are updated at the given position.", "history": "added in version 24.2.0", "FullName": "void onChanged (int position, int count, Object payload)"}, "onInserted(int, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void onInserted (int position, int count)"}, "areItemsTheSame(T2, T2)": {"Returns": [["boolean", "True if the two items represent the same object or false if they are different."]], "Parameters": [["T2", "T2: The first item to check."], ["T2", "T2: The second item to check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the SortedList to decide whether two object represent the same Item or not. For example, if your items have unique ids, this method should check their equality.", "history": "added in version 22.1.0", "FullName": "boolean areItemsTheSame (T2 item1, T2 item2)"}, "onRemoved(int, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void onRemoved (int position, int count)"}, "compare(T2, T2)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."]], "Parameters": [["T2", "T2: The first object to compare."], ["T2", "T2: The second object to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_java#util#Comparator#compare_E@, should compare two and return how they should be ordered.", "history": "added in version 22.1.0", "FullName": "int compare (T2 o1, T2 o2)"}, "onMoved(int, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void onMoved (int fromPosition, int toPosition)"}, "onChanged(int, int)": {"Returns": [], "Parameters": [["int", "int: The position of the item which has been updated."], ["int", "int: The number of items which has changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the SortedList when the item at the given position is updated.", "history": "added in version 22.1.0", "FullName": "void onChanged (int position, int count)"}, "areContentsTheSame(T2, T2)": {"Returns": [["boolean", "True if the contents of the items are the same or false if they are different."]], "Parameters": [["T2", "T2: The previous representation of the object."], ["T2", "T2: The new object that replaces the previous one."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the SortedList when it wants to check whether two items have the same data or not. SortedList uses this information to decide whether it should call @B_android#support#v7#util#SortedList#Callback#onChanged_E@ or not. SortedList uses this method to check equality instead of @B_java#lang#Object#equals_E@ so that you can change its behavior depending on your UI. For example, if you are using SortedList with a @B_android#support#v7#widget#RecyclerView#Adapter_E@, you should return whether the items' visual representations are the same or not.", "history": "added in version 22.1.0", "FullName": "boolean areContentsTheSame (T2 oldItem, T2 newItem)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.util.SortedList.Callback<T2>", "ClassDesc": "The class that controls the behavior of the @B_android#support#v7#util#SortedList_E@. It defines how items should be sorted and how duplicates should be handled. SortedList calls the callback methods on this class to notify changes about the underlying data."}