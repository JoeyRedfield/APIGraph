{"Functions": {"begin()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks the beginning of an I/O operation that might block indefinitely. This method should be invoked in tandem with the @B_java#nio#channels#spi#AbstractInterruptibleChannel#end_E@ method, using a", "history": "Added in API level 1", "FullName": "protected final void begin ()"}, "isOpen()": {"Returns": [["boolean", "true if, and only if, this channel is open"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel is open.", "history": "Added in API level 1", "FullName": "public final boolean isOpen ()"}, "end(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if, and only if, the I/O operation completed successfully, that is, had some effect that would be visible to the operation's invoker"]], "Throws": [["@B_java#nio#channels#AsynchronousCloseException_E@", "If the channel was asynchronously closed"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If the thread blocked in the I/O operation was interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the end of an I/O operation that might block indefinitely. This method should be invoked in tandem with the @B_java#nio#channels#spi#AbstractInterruptibleChannel#begin_E@ method, using a", "history": "Added in API level 1", "FullName": "protected final void end (boolean completed)"}, "AbstractInterruptibleChannel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected AbstractInterruptibleChannel ()"}, "implCloseChannel()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs while closing the channel"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. This method is invoked by the @B_java#nio#channels#spi#AbstractInterruptibleChannel#close_E@ method in order to perform the actual work of closing the channel. This method is only invoked if the channel has not yet been closed, and it is never invoked more than once. An implementation of this method must arrange for any other thread that is blocked in an I/O operation upon this channel to return immediately, either by throwing an exception or by returning normally.", "history": "Added in API level 1", "FullName": "protected abstract void implCloseChannel ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. If the channel has already been closed then this method returns immediately. Otherwise it marks the channel as closed and then invokes the @B_java#nio#channels#spi#AbstractInterruptibleChannel#implCloseChannel_E@ method in order to complete the close operation.", "history": "Added in API level 1", "FullName": "public final void close ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.spi.AbstractInterruptibleChannel", "ClassDesc": "Base implementation class for interruptible channels. This class encapsulates the low-level machinery required to implement the asynchronous closing and interruption of channels. A concrete channel class must invoke the @B_java#nio#channels#spi#AbstractInterruptibleChannel#begin_E@ and @B_java#nio#channels#spi#AbstractInterruptibleChannel#end_E@ methods before and after, respectively, invoking an I/O operation that might block indefinitely. In order to ensure that the @B_java#nio#channels#spi#AbstractInterruptibleChannel#end_E@ method is always invoked, these methods should be used within a The @B_java#nio#channels#spi#AbstractInterruptibleChannel#end_E@ method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be A concrete channel class must also implement the @B_java#nio#channels#spi#AbstractInterruptibleChannel#implCloseChannel_E@ method in such a way that if it is invoked while another thread is blocked in a native I/O operation upon the channel then that operation will immediately return, either by throwing an exception or by returning normally. If a thread is interrupted or the channel upon which it is blocked is asynchronously closed then the channel's @B_java#nio#channels#spi#AbstractInterruptibleChannel#end_E@ method will throw the appropriate exception. This class performs the synchronization required to implement the @B_java#nio#channels#Channel_E@ specification. Implementations of the @B_java#nio#channels#spi#AbstractInterruptibleChannel#implCloseChannel_E@ method need not synchronize against other threads that might be attempting to close the channel."}