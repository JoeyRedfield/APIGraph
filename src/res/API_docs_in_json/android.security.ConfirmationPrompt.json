{"Functions": {"isSupported(android.content.Context)": {"Returns": [["boolean", "true if confirmation prompts are supported by the device."]], "Parameters": [["@B_android#content#Context_E@", "Context: the application context."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the device supports confirmation prompts.", "history": "Added in API level 28", "FullName": "public static boolean isSupported (Context context)"}, "presentPrompt(java.util.concurrent.Executor,android.security.ConfirmationCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the executor identifying the thread that will receive the callback. This value must never be null."], ["@B_android#security#ConfirmationCallback_E@", "ConfirmationCallback: the callback to use when the prompt is done showing. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prompt text is too long or malfomed."], ["@B_android#security#ConfirmationAlreadyPresentingException_E@", "if another prompt is being presented."], ["@B_android#security#ConfirmationNotAvailableException_E@", "if confirmation prompts are not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Requests a confirmation prompt to be presented to the user. When the prompt is no longer being presented, one of the methods in @B_android#security#ConfirmationCallback_E@ is called on the supplied callback object. Confirmation prompts may not be available when accessibility services are running so this may fail with a @B_android#security#ConfirmationNotAvailableException_E@ exception even if @B_android#security#ConfirmationPrompt#isSupported_E@ returns true.", "history": "Added in API level 28", "FullName": "public void presentPrompt (Executor executor, ConfirmationCallback callback)"}, "cancelPrompt()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if no prompt is currently being presented."]], "SeeAlso": [], "Permissions": [], "Description": "Cancels a prompt currently being displayed. On success, the @B_android#security#ConfirmationCallback#onCanceled_E@ method on the supplied callback object will be called asynchronously.", "history": "Added in API level 28", "FullName": "public void cancelPrompt ()"}}, "Inheritance": [], "ClassName": "android.security.ConfirmationPrompt", "ClassDesc": "Class used for displaying confirmation prompts. Confirmation prompts are prompts shown to the user to confirm a given text and are implemented in a way that a positive response indicates with high confidence that the user has seen the given text, even if the Android framework (including the kernel) was compromised. Implementing confirmation prompts with these guarantees requires dedicated hardware-support and may not always be available. Confirmation prompts are typically used with an external entitity - the Before first use, the application generates a key-pair with the @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserConfirmationRequired_E@ set. Device attestation, e.g. @B_java#security#KeyStore#getCertificateChain_E@, is used to generate a certificate chain that includes the public key (Kpub in the following) of the newly generated key. The application sends Kpub and the certificate chain resulting from device attestation to the The Kpub, and that the attestation certificate asserts that Kpub has the @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserConfirmationRequired_E@ set. Additionally the relying party stores Kpub and associates it with the device it was received from. The Before executing a transaction which requires a high assurance of user content, the application does the following: The application gets a cryptographic nonce from the extraData (via the Builder helper class) to the @B_android#security#ConfirmationPrompt#presentPrompt_E@ method. The If the user approves the prompt a @B_android#security#ConfirmationCallback#onConfirmed_E@ callback as the dataThatWasConfirmed parameter. This blob contains the text that was shown to the user, the extraData parameter, and possibly other data. The application signs the The Kpub and then extracts promptText matches what is expected and extraData matches the previously created nonce. If all checks passes, the transaction is executed. A common way of implementing the \"promptText is what is expected\" check in the last bullet, is to have the promptText and store it along the nonce in the extraData blob."}