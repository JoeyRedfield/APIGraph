{"Functions": {"setReenterTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use to move Views into the scene when reentering from a previously-started Activity. transition must be an android.transition.Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views in to the scene when returning due to popping a back stack. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. If nothing is set, the default will be to use the same transition as @B_android#support#v4#app#Fragment#setExitTransition_E@.", "history": "added in version 22.0.0", "FullName": "void setReenterTransition (Object transition)"}, "onGetLayoutInflater(android.os.Bundle)": {"Returns": [["@B_android#view#LayoutInflater_E@", "The LayoutInflater used to inflate Views of this Fragment."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the LayoutInflater used to inflate Views of this Fragment. The default implementation will throw an exception if the Fragment is not attached.", "history": "added in version 25.4.0", "FullName": "LayoutInflater onGetLayoutInflater (Bundle savedInstanceState)"}, "isInLayout()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag. This will always be true when fragments are created through the <fragment> tag, except in the case where an old fragment is restored from a previous state and it does not appear in the layout of the current state.", "history": "added in version 22.0.0", "FullName": "boolean isInLayout ()"}, "setHasOptionsMenu(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the fragment has menu items to contribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that this fragment would like to participate in populating the options menu by receiving a call to @B_android#support#v4#app#Fragment#onCreateOptionsMenu_E@ and related methods.", "history": "added in version 22.0.0", "FullName": "void setHasOptionsMenu (boolean hasMenu)"}, "getText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the CharSequence text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized, styled CharSequence from the application's package's default string table.", "history": "added in version 22.0.0", "FullName": "CharSequence getText (int resId)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#support#v4#app#Fragment#onAttach_E@ and before @B_android#support#v4#app#Fragment#onCreateView_E@. Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#support#v4#app#Fragment#onActivityCreated_E@. Any restored child fragments will be created before the base Fragment.onCreate method returns.", "history": "added in version 22.0.0", "FullName": "void onCreate (Bundle savedInstanceState)"}, "isRemoving()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if this fragment is currently being removed from its activity. This is not whether its activity is finishing, but rather whether it is in the process of being removed from its activity.", "history": "added in version 22.0.0", "FullName": "boolean isRemoving ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses can not override equals().", "history": "added in version 22.0.0", "FullName": "boolean equals (Object o)"}, "setReturnTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use to move Views out of the Scene when the Fragment is preparing to close. transition must be an android.transition.Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, entering Views will remain unaffected. If nothing is set, the default will be to use the same value as set in @B_android#support#v4#app#Fragment#setEnterTransition_E@.", "history": "added in version 22.0.0", "FullName": "void setReturnTransition (Object transition)"}, "getActivity()": {"Returns": [["@B_android#support#v4#app#FragmentActivity_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#support#v4#app#FragmentActivity_E@ this fragment is currently associated with. May return null if the fragment is associated with a @B_android#content#Context_E@ instead.", "history": "added in version 22.0.0", "FullName": "FragmentActivity getActivity ()"}, "isHidden()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment has been hidden. By default fragments are shown. You can find out about changes to this state with @B_android#support#v4#app#Fragment#onHiddenChanged_E@. Note that the hidden state is orthogonal to other states -- that is, to be visible to the user, a fragment must be both started and not hidden.", "history": "added in version 22.0.0", "FullName": "boolean isHidden ()"}, "onOptionsItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "boolean Return false to allow normal menu processing to proceed, true to consume it here."]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#onCreateOptionsMenu_E@"], "Permissions": [], "Description": "This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Derived classes should call through to the base class for it to perform the default menu handling.", "history": "added in version 22.0.0", "FullName": "boolean onOptionsItemSelected (MenuItem item)"}, "setSharedElementEnterTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use for shared elements transferred into the content Scene. transition must be an android.transition.Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred into the content Scene. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position.", "history": "added in version 22.0.0", "FullName": "void setSharedElementEnterTransition (Object transition)"}, "getArguments()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the arguments supplied when the fragment was instantiated, if any.", "history": "added in version 22.0.0", "FullName": "Bundle getArguments ()"}, "getReturnTransition()": {"Returns": [["@B_java#lang#Object_E@", "the Transition to use to move Views out of the Scene when the Fragment is preparing to close."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, entering Views will remain unaffected.", "history": "added in version 22.0.0", "FullName": "Object getReturnTransition ()"}, "onDestroyOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this fragment's option menu items are no longer being included in the overall options menu. Receiving this call means that the menu needed to be rebuilt, but this fragment's items were not included in the newly built menu (its @B_android#support#v4#app#Fragment#onCreateOptionsMenu_E@ was not called).", "history": "added in version 22.0.0", "FullName": "void onDestroyOptionsMenu ()"}, "onOptionsMenuClosed(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: The options menu as last shown or first initialized by onCreateOptionsMenu()."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).", "history": "added in version 22.0.0", "FullName": "void onOptionsMenuClosed (Menu menu)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "onAttach(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See @B_android#support#v4#app#Fragment#onAttach_E@. Called when a fragment is first attached to its activity. @B_android#support#v4#app#Fragment#onCreate_E@ will be called after this.", "history": "added in version 22.0.0", "FullName": "void onAttach (Activity activity)"}, "getTargetRequestCode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the target request code set by @B_android#support#v4#app#Fragment#setTargetFragment_E@.", "history": "added in version 22.0.0", "FullName": "int getTargetRequestCode ()"}, "getTag()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the tag name of the fragment, if specified.", "history": "added in version 22.0.0", "FullName": "String getTag ()"}, "onAttach(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is first attached to its context. @B_android#support#v4#app#Fragment#onCreate_E@ will be called after this.", "history": "added in version 23.0.0", "FullName": "void onAttach (Context context)"}, "onAttachFragment(android.support.v4.app.Fragment)": {"Returns": [], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: child fragment being attached"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is attached as a child of this fragment. This is called after the attached fragment's onAttach and before the attached fragment's onCreate if the fragment has not yet had a previous call to onCreate.", "history": "added in version 24.0.0", "FullName": "void onAttachFragment (Fragment childFragment)"}, "setAllowEnterTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the enter transition when possible or false to wait until the exiting transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the the exit transition and enter transition overlap or not. When true, the enter transition will start as soon as possible. When false, the enter transition will wait until the exit transition completes before starting.", "history": "added in version 22.0.0", "FullName": "void setAllowEnterTransitionOverlap (boolean allow)"}, "onContextItemSelected(android.view.MenuItem)": {"Returns": [["boolean", "boolean Return false to allow normal context menu processing to proceed, true to consume it here."]], "Parameters": [["@B_android#view#MenuItem_E@", "MenuItem: The context menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever an item in a context menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Use @B_android#view#MenuItem#getMenuInfo_E@ to get extra information set by the View that added this menu item. Derived classes should call through to the base class for it to perform the default menu handling.", "history": "added in version 22.0.0", "FullName": "boolean onContextItemSelected (MenuItem item)"}, "setRetainInstance(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). This can only be used with fragments not in the back stack. If set, the fragment lifecycle will be slightly different when an activity is recreated: @B_android#support#v4#app#Fragment#onDestroy_E@ will not be called (but @B_android#support#v4#app#Fragment#onDetach_E@ still will be, because the fragment is being detached from its current activity). @B_android#support#v4#app#Fragment#onCreate_E@ will not be called since the fragment is not being re-created. @B_android#support#v4#app#Fragment#onAttach_E@ and @B_android#support#v4#app#Fragment#onActivityCreated_E@", "history": "added in version 22.0.0", "FullName": "void setRetainInstance (boolean retain)"}, "isVisible()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is currently visible to the user. This means it: (1) has been added, (2) has its view attached to the window, and (3) is not hidden.", "history": "added in version 22.0.0", "FullName": "boolean isVisible ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer resumed. This is generally tied to @B_android#app#Activity#onPause_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onPause ()"}, "getSharedElementReturnTransition()": {"Returns": [["@B_java#lang#Object_E@", "The Transition to use for shared elements transferred out of the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Transition that will be used for shared elements transferred back during a pop of the back stack. This Transition acts in the leaving Fragment. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. If no value is set, the default will be to use the same value as @B_android#support#v4#app#Fragment#setSharedElementEnterTransition_E@.", "history": "added in version 22.0.0", "FullName": "Object getSharedElementReturnTransition ()"}, "onMultiWindowModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in multi-window mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment's activity changes from fullscreen mode to multi-window mode and visa-versa. This is generally tied to @B_android#app#Activity#onMultiWindowModeChanged_E@ of the containing Activity.", "history": "added in version 24.0.0", "FullName": "void onMultiWindowModeChanged (boolean isInMultiWindowMode)"}, "getEnterTransition()": {"Returns": [["@B_java#lang#Object_E@", "the Transition to use to move Views into the initial Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@.", "history": "added in version 22.0.0", "FullName": "Object getEnterTransition ()"}, "isDetached()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment has been explicitly detached from the UI. That is, @B_android#support#v4#app#FragmentTransaction#detach_E@ has been used on it.", "history": "added in version 22.0.0", "FullName": "boolean isDetached ()"}, "setArguments(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. This method cannot be called if the fragment is added to a FragmentManager and if @B_android#support#v4#app#Fragment#isStateSaved_E@ would return true.", "history": "added in version 22.0.0", "FullName": "void setArguments (Bundle args)"}, "getSharedElementEnterTransition()": {"Returns": [["@B_java#lang#Object_E@", "The Transition to use for shared elements transferred into the content Scene."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used for shared elements transferred into the content Scene. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position.", "history": "added in version 22.0.0", "FullName": "Object getSharedElementEnterTransition ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onStop ()"}, "getFragmentManager()": {"Returns": [["@B_android#support#v4#app#FragmentManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the FragmentManager for interacting with fragments associated with this fragment's activity. Note that this will be non-null slightly before @B_android#support#v4#app#Fragment#getActivity_E@, during the time from when the fragment is placed in a @B_android#support#v4#app#FragmentTransaction_E@ until it is committed and attached to its activity. If this Fragment is a child of another Fragment, the FragmentManager returned here will be the parent's @B_android#support#v4#app#Fragment#getChildFragmentManager_E@.", "history": "added in version 22.0.0", "FullName": "FragmentManager getFragmentManager ()"}, "isStateSaved()": {"Returns": [["boolean", "true if this fragment's state has already been saved by its host"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this fragment is added and its state has already been saved by its host. Any operations that would change saved state should not be performed if this method returns true, and some operations such as @B_android#support#v4#app#Fragment#setArguments_E@ will fail.", "history": "added in version 26.0.0-alpha1", "FullName": "boolean isStateSaved ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer in use. This is called after @B_android#support#v4#app#Fragment#onStop_E@ and before @B_android#support#v4#app#Fragment#onDetach_E@.", "history": "added in version 22.0.0", "FullName": "void onDestroy ()"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined, generally it will happen when all background process have been killed. That is, before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably, you should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ from @B_android#content#ComponentCallbacks2_E@ to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher, so you should only use this @B_android#content#ComponentCallbacks#onLowMemory_E@ method as a fallback for older versions, which can be treated the same as @B_android#content#ComponentCallbacks2#onTrimMemory_E@ with the @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@ level.", "history": "added in version 22.0.0", "FullName": "void onLowMemory ()"}, "startActivity(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#startActivity_E@ from the fragment's containing Activity.", "history": "added in version 22.0.0", "FullName": "void startActivity (Intent intent)"}, "getView()": {"Returns": [["@B_android#view#View_E@", "The fragment's root view, or null if it has no layout."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the root view for the fragment's layout (the one returned by @B_android#support#v4#app#Fragment#onCreateView_E@), if provided.", "history": "added in version 22.0.0", "FullName": "View getView ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#support#v4#app#Fragment#onCreate_E@, @B_android#support#v4#app#Fragment#onCreateView_E@, and @B_android#support#v4#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#support#v4#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "added in version 22.0.0", "FullName": "void onSaveInstanceState (Bundle outState)"}, "onCreateAnimation(int, boolean, int)": {"Returns": [["@B_android#view#animation#Animation_E@", "no returns description in source"]], "Parameters": [["int", "int: The value set in @B_android#support#v4#app#FragmentTransaction#setTransition_E@ or 0 if not set."], ["boolean", "boolean: true when the fragment is added/attached/shown or false when the fragment is removed/detached/hidden."], ["int", "int: The resource set in @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@, @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@, or 0 if neither was called. The value will depend on the current operation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment loads an animation. Note that if @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@ was called with @B_android#animation#Animator_E@ resources instead of @B_android#view#animation#Animation_E@ resources, nextAnim will be an animator resource.", "history": "added in version 22.0.0", "FullName": "Animation onCreateAnimation (int transit, boolean enter, int nextAnim)"}, "isResumed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is in the resumed state. This is true for the duration of @B_android#support#v4#app#Fragment#onResume_E@ and @B_android#support#v4#app#Fragment#onPause_E@ as well.", "history": "added in version 22.0.0", "FullName": "boolean isResumed ()"}, "registerForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that should show a context menu."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#unregisterForContextMenu_E@"], "Permissions": [], "Description": "Registers a context menu to be shown for the given view (multiple views can show the context menu). This method will set the @B_android#view#View#OnCreateContextMenuListener_E@ on the view to this fragment, so @B_android#support#v4#app#Fragment#onCreateContextMenu_E@ will be called when it is time to show the context menu.", "history": "added in version 22.0.0", "FullName": "void registerForContextMenu (View view)"}, "getHost()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the host object of this fragment. May return null if the fragment isn't currently being hosted.", "history": "added in version 23.0.0", "FullName": "Object getHost ()"}, "startPostponedEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startPostponedEnterTransition_E@"], "Permissions": [], "Description": "Begin postponed transitions after @B_android#support#v4#app#Fragment#postponeEnterTransition_E@ was called. If postponeEnterTransition() was called, you must call startPostponedEnterTransition() or @B_android#support#v4#app#FragmentManager#executePendingTransactions_E@ to complete the FragmentTransaction. If postponement was interrupted with @B_android#support#v4#app#FragmentManager#executePendingTransactions_E@, before startPostponedEnterTransition(), animations may not run or may execute improperly.", "history": "added in version 25.1.0", "FullName": "void startPostponedEnterTransition ()"}, "getUserVisibleHint()": {"Returns": [["boolean", "The current value of the user-visible hint on this fragment."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#setUserVisibleHint_E@"], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "boolean getUserVisibleHint ()"}, "onPrepareOptionsMenu(android.view.Menu)": {"Returns": [], "Parameters": [["@B_android#view#Menu_E@", "Menu: The options menu as last shown or first initialized by onCreateOptionsMenu()."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#setHasOptionsMenu_E@", "@B_android#support#v4#app#Fragment#onCreateOptionsMenu_E@"], "Permissions": [], "Description": "Prepare the Fragment host's standard options menu to be displayed. This is called right before the menu is shown, every time it is shown. You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents. See @B_android#app#Activity#onPrepareOptionsMenu_E@ for more information.", "history": "added in version 22.0.0", "FullName": "void onPrepareOptionsMenu (Menu menu)"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "The LayoutInflater used to inflate Views of this Fragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the cached LayoutInflater used to inflate Views of this Fragment. If @B_android#support#v4#app#Fragment#onGetLayoutInflater_E@ has not been called @B_android#support#v4#app#Fragment#onGetLayoutInflater_E@ will be called with a null argument and that value will be cached. The cached LayoutInflater will be replaced immediately prior to @B_android#support#v4#app#Fragment#onCreateView_E@ and cleared immediately after @B_android#support#v4#app#Fragment#onDetach_E@.", "history": "added in version 25.4.0", "FullName": "LayoutInflater getLayoutInflater ()"}, "requestPermissions(java.lang.String[], int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The requested permissions."], ["int", "int: Application specific request code to match with a result reported to @B_android#support#v4#app#Fragment#onRequestPermissionsResult_E@."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#onRequestPermissionsResult_E@", "@B_android#content#Context#checkSelfPermission_E@"], "Permissions": [], "Description": "Requests permissions to be granted to this application. These permissions must be requested in your manifest, they should not be granted to your app, and they should have protection level @B_android#content#pm#PermissionInfo_E@, regardless whether they are declared by the platform or a third-party app. Normal permissions @B_android#content#pm#PermissionInfo#PROTECTION_NORMAL_E@ are granted at install time if requested in the manifest. Signature permissions @B_android#content#pm#PermissionInfo#PROTECTION_SIGNATURE_E@ are granted at install time if requested in the manifest and the signature of your app matches the signature of the app declaring the permissions. If your app does not have the requested permissions the user will be presented with UI for accepting them. After the user has accepted or rejected the requested permissions you will receive a callback on @B_android#support#v4#app#Fragment#onRequestPermissionsResult_E@ reporting whether the permissions were granted or not. Note that requesting a permission does not guarantee it will be granted and your app should be able to run without having this permission. This method may start an activity allowing the user to choose which permissions to grant and which to reject. Hence, you should be prepared that your activity may be paused and resumed. Further, granting some permissions may require a restart of you application. In such a case, the system will recreate the activity stack before delivering the result to @B_android#support#v4#app#Fragment#onRequestPermissionsResult_E@. When checking whether you have a permission you should use @B_android#content#Context#checkSelfPermission_E@. Calling this API for permissions already granted to your app would show UI to the user to decided whether the app can still hold these permissions. This can be useful if the way your app uses the data guarded by the permissions changes significantly. A sample permissions request looks like this: private void showContacts() { if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) { requestPermissions(new String[]{Manifest.permission.READ_CONTACTS}, PERMISSIONS_REQUEST_READ_CONTACTS); } else { doShowContacts(); } } @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS && grantResults[0] == PackageManager.PERMISSION_GRANTED) { doShowContacts(); } }", "history": "added in version 23.0.0", "FullName": "void requestPermissions (String[] permissions, int requestCode)"}, "getString(int, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the format string"], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@.", "history": "added in version 22.0.0", "FullName": "String getString (int resId, Object... formatArgs)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#content#Context_E@ this fragment is currently associated with.", "history": "added in version 23.0.0", "FullName": "Context getContext ()"}, "getId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the identifier this fragment is known by. This is either the android:id value supplied in a layout or the container view ID supplied when adding the fragment.", "history": "added in version 22.0.0", "FullName": "int getId ()"}, "onDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer attached to its activity. This is called after @B_android#support#v4#app#Fragment#onDestroy_E@.", "history": "added in version 22.0.0", "FullName": "void onDetach ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses can not override hashCode().", "history": "added in version 22.0.0", "FullName": "int hashCode ()"}, "onHiddenChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the fragment is now hidden, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the hidden state (as returned by @B_android#support#v4#app#Fragment#isHidden_E@ of the fragment has changed. Fragments start out not hidden; this will be called whenever the fragment changes state from that.", "history": "added in version 22.0.0", "FullName": "void onHiddenChanged (boolean hidden)"}, "setUserVisibleHint(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this fragment's UI is currently visible to the user (default), false if it is not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a hint to the system about whether this fragment's UI is currently visible to the user. This hint defaults to true and is persistent across fragment instance state save and restore. An app may set this to false to indicate that the fragment's UI is scrolled out of visibility or is otherwise not directly visible to the user. This may be used by the system to prioritize operations such as fragment lifecycle updates or loader ordering behavior.", "history": "added in version 22.0.0", "FullName": "void setUserVisibleHint (boolean isVisibleToUser)"}, "getTargetFragment()": {"Returns": [["@B_android#support#v4#app#Fragment_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the target fragment set by @B_android#support#v4#app#Fragment#setTargetFragment_E@.", "history": "added in version 22.0.0", "FullName": "Fragment getTargetFragment ()"}, "setAllowReturnTransitionOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to start the reenter transition when possible or false to wait until the return transition completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the the return transition and reenter transition overlap or not. When true, the reenter transition will start as soon as possible. When false, the reenter transition will wait until the return transition completes before starting.", "history": "added in version 22.0.0", "FullName": "void setAllowReturnTransitionOverlap (boolean allow)"}, "getParentFragment()": {"Returns": [["@B_android#support#v4#app#Fragment_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent Fragment containing this Fragment. If this Fragment is attached directly to an Activity, returns null.", "history": "added in version 22.0.0", "FullName": "Fragment getParentFragment ()"}, "onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#support#v4#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#support#v4#app#Fragment#onCreateView_E@ and before @B_android#support#v4#app#Fragment#onViewStateRestored_E@.", "history": "added in version 22.0.0", "FullName": "void onActivityCreated (Bundle savedInstanceState)"}, "onActivityResult(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the result from a previous call to @B_android#support#v4#app#Fragment#startActivityForResult_E@. This follows the related Activity API as described there in @B_android#app#Activity#onActivityResult_E@.", "history": "added in version 22.0.0", "FullName": "void onActivityResult (int requestCode, int resultCode, Intent data)"}, "setMenuVisibility(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The default is true, meaning the fragment's menu will be shown as usual. If false, the user will not see the menu."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a hint for whether this fragment's menu should be visible. This is useful if you know that a fragment has been placed in your view hierarchy so that the user can not currently seen it, so any menu items it has should also not be shown.", "history": "added in version 22.0.0", "FullName": "void setMenuVisibility (boolean menuVisible)"}, "onCreateAnimator(int, boolean, int)": {"Returns": [["@B_android#animation#Animator_E@", "no returns description in source"]], "Parameters": [["int", "int: The value set in @B_android#support#v4#app#FragmentTransaction#setTransition_E@ or 0 if not set."], ["boolean", "boolean: true when the fragment is added/attached/shown or false when the fragment is removed/detached/hidden."], ["int", "int: The resource set in @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@, @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@, or 0 if neither was called. The value will depend on the current operation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment loads an animator. This will be called when @B_android#support#v4#app#Fragment#onCreateAnimation_E@ returns null. Note that if @B_android#support#v4#app#FragmentTransaction#setCustomAnimations_E@ was called with @B_android#view#animation#Animation_E@ resources instead of @B_android#animation#Animator_E@ resources, nextAnim will be an animation resource.", "history": "added in version 26.0.0-beta2", "FullName": "Animator onCreateAnimator (int transit, boolean enter, int nextAnim)"}, "getRetainInstance()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "boolean getRetainInstance ()"}, "onPictureInPictureModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in picture-in-picture mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the activity changes to and from picture-in-picture mode. This is generally tied to @B_android#app#Activity#onPictureInPictureModeChanged_E@ of the containing Activity.", "history": "added in version 24.0.0", "FullName": "void onPictureInPictureModeChanged (boolean isInPictureInPictureMode)"}, "getLoaderManager()": {"Returns": [["@B_android#support#v4#app#LoaderManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the LoaderManager for this fragment, creating it if needed.", "history": "added in version 22.0.0", "FullName": "LoaderManager getLoaderManager ()"}, "getAllowReturnTransitionOverlap()": {"Returns": [["boolean", "true to start the reenter transition when possible or false to wait until the return transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the the return transition and reenter transition overlap or not. When true, the reenter transition will start as soon as possible. When false, the reenter transition will wait until the return transition completes before starting.", "history": "added in version 22.0.0", "FullName": "boolean getAllowReturnTransitionOverlap ()"}, "getAllowEnterTransitionOverlap()": {"Returns": [["boolean", "true when the enter transition should start as soon as possible or false to when it should wait until the exiting transition completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the the exit transition and enter transition overlap or not. When true, the enter transition will start as soon as possible. When false, the enter transition will wait until the exit transition completes before starting.", "history": "added in version 22.0.0", "FullName": "boolean getAllowEnterTransitionOverlap ()"}, "onViewStateRestored(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when all saved state has been restored into the view hierarchy of the fragment. This can be used to do initialization based on saved state that you are letting the view hierarchy track itself, such as whether check box widgets are currently checked. This is called after @B_android#support#v4#app#Fragment#onActivityCreated_E@ and before @B_android#support#v4#app#Fragment#onStart_E@.", "history": "added in version 22.0.0", "FullName": "void onViewStateRestored (Bundle savedInstanceState)"}, "setSharedElementReturnTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use for shared elements transferred out of the content Scene. transition must be an android.transition.Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used for shared elements transferred back during a pop of the back stack. This Transition acts in the leaving Fragment. Typical Transitions will affect size and location, such as @B_android#transition#ChangeBounds_E@. A null value will cause transferred shared elements to blink to the final position. If no value is set, the default will be to use the same value as @B_android#support#v4#app#Fragment#setSharedElementEnterTransition_E@.", "history": "added in version 22.0.0", "FullName": "void setSharedElementReturnTransition (Object transition)"}, "getChildFragmentManager()": {"Returns": [["@B_android#support#v4#app#FragmentManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a private FragmentManager for placing and managing Fragments inside of this Fragment.", "history": "added in version 22.0.0", "FullName": "FragmentManager getChildFragmentManager ()"}, "postponeEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#postponeEnterTransition_E@", "@B_android#support#v4#app#FragmentTransaction#setReorderingAllowed_E@"], "Permissions": [], "Description": "Postpone the entering Fragment transition until @B_android#support#v4#app#Fragment#startPostponedEnterTransition_E@ or @B_android#support#v4#app#FragmentManager#executePendingTransactions_E@ has been called. This method gives the Fragment the ability to delay Fragment animations until all data is loaded. Until then, the added, shown, and attached Fragments will be INVISIBLE and removed, hidden, and detached Fragments won't be have their Views removed. The transaction runs when all postponed added Fragments in the transaction have called @B_android#support#v4#app#Fragment#startPostponedEnterTransition_E@. This method should be called before being added to the FragmentTransaction or in @B_android#support#v4#app#Fragment#onCreate_E@. @B_android#support#v4#app#Fragment#startPostponedEnterTransition_E@ must be called to allow the Fragment to start the transitions. When a FragmentTransaction is started that may affect a postponed FragmentTransaction, based on which containers are in their operations, the postponed FragmentTransaction will have its start triggered. The early triggering may result in faulty or nonexistent animations in the postponed transaction. FragmentTransactions that operate only on independent containers will not interfere with each other's postponement. Calling postponeEnterTransition on Fragments with a null View will not postpone the transition. Likewise, postponement only works if @B_android#support#v4#app#FragmentTransaction#setReorderingAllowed_E@ is enabled.", "history": "added in version 25.1.0", "FullName": "void postponeEnterTransition ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onStart ()"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: Resource id for the string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a localized string from the application's package's default string table.", "history": "added in version 22.0.0", "FullName": "String getString (int resId)"}, "setExitTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use to move Views out of the Scene when the Fragment is being closed not due to popping the back stack. transition must be an android.transition.Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected.", "history": "added in version 22.0.0", "FullName": "void setExitTransition (Object transition)"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#support#v4#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#support#v4#app#Fragment#onStop_E@ and before @B_android#support#v4#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#support#v4#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent.", "history": "added in version 22.0.0", "FullName": "void onDestroyView ()"}, "getReenterTransition()": {"Returns": [["@B_java#lang#Object_E@", "the Transition to use to move Views into the scene when reentering from a previously-started Activity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected. If nothing is set, the default will be to use the same transition as @B_android#support#v4#app#Fragment#setExitTransition_E@.", "history": "added in version 22.0.0", "FullName": "Object getReenterTransition ()"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return getActivity().getResources().", "history": "added in version 22.0.0", "FullName": "Resources getResources ()"}, "isAdded()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the fragment is currently added to its activity.", "history": "added in version 22.0.0", "FullName": "boolean isAdded ()"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is visible to the user and actively running. This is generally tied to @B_android#app#Activity#onResume_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onResume ()"}, "unregisterForContextMenu(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that should stop showing a context menu."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#Fragment#registerForContextMenu_E@"], "Permissions": [], "Description": "Prevents a context menu to be shown for the given view. This method will remove the @B_android#view#View#OnCreateContextMenuListener_E@ on the view.", "history": "added in version 22.0.0", "FullName": "void unregisterForContextMenu (View view)"}, "Fragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor. @B_android#support#v4#app#Fragment#setArguments_E@ and later retrieved by the Fragment with @B_android#support#v4#app#Fragment#getArguments_E@. Applications should generally not implement a constructor. Prefer @B_android#support#v4#app#Fragment#onAttach_E@ instead. It is the first place application code can run where the fragment is ready to be used - the point where the fragment is actually associated with its context. Some applications may also want to implement @B_android#support#v4#app#Fragment#onInflate_E@ to retrieve attributes from a layout resource, although note this happens when the fragment is attached.", "history": "added in version 22.0.0", "FullName": "Fragment ()"}, "getExitTransition()": {"Returns": [["@B_java#lang#Object_E@", "the Transition to use to move Views out of the Scene when the Fragment is being closed not due to popping the back stack."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. The exiting Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as exiting is governed by changing visibility from @B_android#view#View#VISIBLE_E@ to @B_android#view#View#INVISIBLE_E@. If transition is null, the views will remain unaffected.", "history": "added in version 22.0.0", "FullName": "Object getExitTransition ()"}, "setEnterTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Transition to use to move Views into the initial Scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Transition that will be used to move Views into the initial scene. The entering Views will be those that are regular Views or ViewGroups that have @B_android#view#ViewGroup#isTransitionGroup_E@ return true. Typical Transitions will extend @B_android#transition#Visibility_E@ as entering is governed by changing visibility from @B_android#view#View#INVISIBLE_E@ to @B_android#view#View#VISIBLE_E@. If transition is null, entering Views will remain unaffected.", "history": "added in version 22.0.0", "FullName": "void setEnterTransition (Object transition)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.app.Fragment", "ClassDesc": "Static library support version of the framework's https:##developer#android#com@B_android#app#Fragment_E@. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework https:##developer#android#com@B_android#app#Fragment_E@ documentation for a class overview. The main differences when using this support version instead of the framework version are: Your activity must extend @B_android#support#v4#app#FragmentActivity_E@ You must call @B_android#support#v4#app#FragmentActivity#getSupportFragmentManager_E@ to get the @B_android#support#v4#app#FragmentManager_E@"}