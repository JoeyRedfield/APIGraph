{"Functions": {"hasEnrolledFingerprints()": {"Returns": [["boolean", "true if at least one fingerprint is enrolled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_FINGERPRINT_E@"], "Description": "See @B_android#hardware#biometrics#BiometricPrompt_E@ and @B_android#hardware#fingerprint#FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS_E@ Determine if there is at least one fingerprint enrolled. Requires @B_android#Manifest#permission#USE_FINGERPRINT_E@", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public boolean hasEnrolledFingerprints ()"}, "isHardwareDetected()": {"Returns": [["boolean", "true if hardware is present and functional, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_FINGERPRINT_E@"], "Description": "See @B_android#hardware#biometrics#BiometricPrompt_E@ and @B_android#hardware#fingerprint#FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE_E@ Determine if fingerprint hardware is present and functional. Requires @B_android#Manifest#permission#USE_FINGERPRINT_E@", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public boolean isHardwareDetected ()"}, "authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager.AuthenticationCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#fingerprint#FingerprintManager#CryptoObject_E@", "FingerprintManager.CryptoObject: object associated with the call or null if none required. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: an object that can be used to cancel authentication This value may be null."], ["int", "int: optional flags; should be 0"], ["@B_android#hardware#fingerprint#FingerprintManager#AuthenticationCallback_E@", "FingerprintManager.AuthenticationCallback: an object to receive authentication events This value must never be null."], ["@B_android#os#Handler_E@", "Handler: an optional handler to handle callback events This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the crypto operation is not supported or is not backed by Android Keystore facility."], ["@B_java#lang#IllegalStateException_E@", "if the crypto primitive is not initialized."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_BIOMETRIC_E@", "@B_android#Manifest#permission#USE_FINGERPRINT_E@"], "Description": "See @B_android#hardware#biometrics#BiometricPrompt#authenticate_E@ and @B_android#hardware#biometrics#BiometricPrompt#authenticate_E@ Request authentication of a crypto object. This call warms up the fingerprint hardware and starts scanning for a fingerprint. It terminates when @B_android#hardware#fingerprint#FingerprintManager#AuthenticationCallback#onAuthenticationError_E@ or @B_android#hardware#fingerprint#FingerprintManager#AuthenticationCallback#onAuthenticationSucceeded_E@ is called, at which point the object is no longer valid. The operation can be canceled by using the provided cancel object. Requires @B_android#Manifest#permission#USE_BIOMETRIC_E@ or @B_android#Manifest#permission#USE_FINGERPRINT_E@", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public void authenticate (FingerprintManager.CryptoObject crypto, CancellationSignal cancel, int flags, FingerprintManager.AuthenticationCallback callback, Handler handler)"}}, "Inheritance": [], "ClassName": "android.hardware.fingerprint.FingerprintManager", "ClassDesc": "See @B_android#hardware#biometrics#BiometricPrompt_E@ which shows a system-provided dialog upon starting authentication. In a world where devices may have different types of biometric authentication, it's much more realistic to have a system-provided authentication dialog since the method may vary by vendor/device. A class that coordinates access to the fingerprint hardware. Requires the @B_android#content#pm#PackageManager#FEATURE_FINGERPRINT_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}