{"Functions": {"chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["int", "int: the start of the span"], ["int", "int: the line height"], ["@B_android#graphics#Paint#FontMetricsInt_E@", "Paint.FontMetricsInt: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Classes that implement this should define how the height is being calculated.", "history": "Added in API level 1", "FullName": "public void chooseHeight (CharSequence text, int start, int end, int istartv, int v, Paint.FontMetricsInt fm)"}, "DrawableMarginSpan(android.graphics.drawable.Drawable,int)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to be added This value must never be null."], ["int", "int: the distance between the drawable and the text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#DrawableMarginSpan_E@ from a @B_android#graphics#drawable#Drawable_E@ and a padding, in pixels.", "history": "Added in API level 1", "FullName": "public DrawableMarginSpan (Drawable drawable, int pad)"}, "drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."], ["int", "int: the current position of the margin"], ["int", "int: the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left."], ["int", "int: the top of the line"], ["int", "int: the baseline of the line"], ["int", "int: the bottom of the line"], ["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["boolean", "boolean: true if this is the first line of its paragraph"], ["@B_android#text#Layout_E@", "Layout: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders the leading margin. This is called before the margin has been adjusted by the value returned by @B_android#text#style#LeadingMarginSpan#getLeadingMargin_E@.", "history": "Added in API level 1", "FullName": "public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout)"}, "DrawableMarginSpan(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to be added This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#DrawableMarginSpan_E@ from a @B_android#graphics#drawable#Drawable_E@. The pad width will be 0.", "history": "Added in API level 1", "FullName": "public DrawableMarginSpan (Drawable drawable)"}, "getLeadingMargin(boolean)": {"Returns": [["int", "the offset for the margin."]], "Parameters": [["boolean", "boolean: true if the request is for the first line of a paragraph, false for subsequent lines"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount by which to adjust the leading margin. Positive values move away from the leading edge of the paragraph, negative values move towards it.", "history": "Added in API level 1", "FullName": "public int getLeadingMargin (boolean first)"}}, "Inheritance": [], "ClassName": "android.text.style.DrawableMarginSpan", "ClassDesc": "A span which adds a drawable and a padding to the paragraph it's attached to. If the height of the drawable is bigger than the height of the line it's attached to then the line height is increased to fit the drawable. DrawableMarginSpan allows setting a padding between the drawable and the text. The default value is 0. The span must be set from the beginning of the text, otherwise either the span won't be rendered or it will be rendered incorrectly. For example, a drawable and a padding of 20px can be added like this:"}