{"Functions": {"isAnimating()": {"Returns": [["boolean", "true if the ProgressBar is animating, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the ProgressBar is animating or not. This is essentially the same as whether the ProgressBar is @B_android#widget#ProgressBar#isIndeterminate_E@ and visible, as indeterminate ProgressBars are always animating, and non-indeterminate ProgressBars are not animating.", "history": "Added in API level 26", "FullName": "public boolean isAnimating ()"}, "getProgressTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the progress drawable, if specified.", "history": "Added in API level 21", "FullName": "public ColorStateList getProgressTintList ()"}, "setProgress(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the new progress value, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"], ["boolean", "boolean: true to animate between the current and target values or false to not animate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current progress to the specified value, optionally animating the visual position between the current and target values. Animation does not affect the result of @B_android#widget#ProgressBar#getProgress_E@, which will return the target value immediately after this method is called.", "history": "Added in API level 24", "FullName": "public void setProgress (int progress, boolean animate)"}, "onVisibilityAggregated(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this view and all of its ancestors are @B_android#view#View#VISIBLE_E@ and this view's window is also visible"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 24", "FullName": "public void onVisibilityAggregated (boolean isVisible)"}, "getProgress()": {"Returns": [["int", "the current progress, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminate_E@", "@B_android#widget#ProgressBar#isIndeterminate_E@", "@B_android#widget#ProgressBar#setProgress_E@", "@B_android#widget#ProgressBar#setMax_E@", "@B_android#widget#ProgressBar#getMax_E@"], "Permissions": [], "Description": "Get the progress bar's current level of progress. Return 0 when the progress bar is in indeterminate mode.", "history": "Added in API level 1", "FullName": "public int getProgress ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setIndeterminateTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateTintList_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setIndeterminateTintList_E@ to the indeterminate drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setIndeterminateTintBlendMode (BlendMode blendMode)"}, "getMinWidth()": {"Returns": [["int", "the minimum width the progress bar can have, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getMinWidth ()"}, "getInterpolator()": {"Returns": [["@B_android#view#animation#Interpolator_E@", "the @B_android#view#animation#Interpolator_E@ associated to this animation"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setInterpolator_E@"], "Permissions": [], "Description": "Gets the acceleration curve type for the indeterminate animation.", "history": "Added in API level 1", "FullName": "public Interpolator getInterpolator ()"}, "setMin(int)": {"Returns": [], "Parameters": [["int", "int: the lower range of this progress bar"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getMin_E@", "@B_android#widget#ProgressBar#setProgress_E@", "@B_android#widget#ProgressBar#setSecondaryProgress_E@"], "Permissions": [], "Description": "Set the lower range of the progress bar to", "history": "Added in API level 26", "FullName": "public void setMin (int min)"}, "postInvalidate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cause an invalidate to happen on a subsequent cycle through the event loop. Use this to invalidate the View from a non-UI thread. This method can be invoked from outside of the UI thread only when this View is attached to a window.", "history": "Added in API level 1", "FullName": "public void postInvalidate ()"}, "setMinHeight(int)": {"Returns": [], "Parameters": [["int", "int: the minimum height to be set, in pixels This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum height the progress bar can have.", "history": "Added in API level 29", "FullName": "public void setMinHeight (int minHeight)"}, "getMin()": {"Returns": [["int", "a positive integer"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setMin_E@", "@B_android#widget#ProgressBar#getProgress_E@", "@B_android#widget#ProgressBar#getSecondaryProgress_E@"], "Permissions": [], "Description": "Return the lower limit of this progress bar's range.", "history": "Added in API level 26", "FullName": "public int getMin ()"}, "setProgress(int)": {"Returns": [], "Parameters": [["int", "int: the new progress, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminate_E@", "@B_android#widget#ProgressBar#isIndeterminate_E@", "@B_android#widget#ProgressBar#getProgress_E@", "@B_android#widget#ProgressBar#incrementProgressBy_E@"], "Permissions": [], "Description": "Sets the current progress to the specified value. Does not do anything if the progress bar is in indeterminate mode. This method will immediately update the visual position of the progress indicator. To animate the visual position to the target value, use @B_android#widget#ProgressBar#setProgress_E@}.", "history": "Added in API level 1", "FullName": "public void setProgress (int progress)"}, "getIndeterminateTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the indeterminate drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ColorStateList getIndeterminateTintList ()"}, "getProgressBackgroundTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the progress background This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressBackgroundTintMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getProgressBackgroundTintMode ()"}, "getSecondaryProgress()": {"Returns": [["int", "the current secondary progress, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminate_E@", "@B_android#widget#ProgressBar#isIndeterminate_E@", "@B_android#widget#ProgressBar#setSecondaryProgress_E@", "@B_android#widget#ProgressBar#setMax_E@", "@B_android#widget#ProgressBar#getMax_E@"], "Permissions": [], "Description": "Get the progress bar's current level of secondary progress. Return 0 when the progress bar is in indeterminate mode.", "history": "Added in API level 1", "FullName": "public int getSecondaryProgress ()"}, "setMaxHeight(int)": {"Returns": [], "Parameters": [["int", "int: the maximum height to be set, in pixels This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum height the progress bar can have.", "history": "Added in API level 29", "FullName": "public void setMaxHeight (int maxHeight)"}, "setProgressBackgroundTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressBackgroundTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setProgressBackgroundTintList_E@} to the progress background. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setProgressBackgroundTintMode (PorterDuff.Mode tintMode)"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view.", "history": "Added in API level 1", "FullName": "public void setVisibility (int v)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "getSecondaryProgressTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the secondary progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgressTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the secondary progress drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getSecondaryProgressTintBlendMode ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "setProgressBackgroundTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressBackgroundTintList_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setProgressBackgroundTintList_E@} to the progress background. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setProgressBackgroundTintBlendMode (BlendMode blendMode)"}, "getIndeterminateTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the indeterminate drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the indeterminate drawable, if specified.", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getIndeterminateTintMode ()"}, "getProgressBackgroundTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the progress background This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressBackgroundTintBlendMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public BlendMode getProgressBackgroundTintBlendMode ()"}, "setSecondaryProgressTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgressTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setSecondaryProgressTintList_E@} to the secondary progress indicator. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@.", "history": "Added in API level 21", "FullName": "public void setSecondaryProgressTintMode (PorterDuff.Mode tintMode)"}, "setSecondaryProgressTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getSecondaryProgressTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the secondary progress indicator, if one exists. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@ by default. The secondary progress indicator must be specified as a layer with id @B_android#R#id#secondaryProgress_E@ in a @B_android#graphics#drawable#LayerDrawable_E@ used as the progress drawable. Subsequent calls to @B_android#widget#ProgressBar#setProgressDrawable_E@ where the drawable contains a secondary progress indicator will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setSecondaryProgressTintList (ColorStateList tint)"}, "ProgressBar(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new progress bar with range 0...100 and initial progress of 0.", "history": "Added in API level 1", "FullName": "public ProgressBar (Context context)"}, "setProgressDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the new drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Define the drawable used to draw the progress bar in progress mode.", "history": "Added in API level 1", "FullName": "public void setProgressDrawable (Drawable d)"}, "getCurrentDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable currently used to draw the progress bar This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable currently used to draw the progress bar. This will be either @B_android#widget#ProgressBar#getProgressDrawable_E@ or @B_android#widget#ProgressBar#getIndeterminateDrawable_E@ depending on whether the progress bar is in determinate or indeterminate mode.", "history": "Added in API level 29", "FullName": "public Drawable getCurrentDrawable ()"}, "getSecondaryProgressTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the secondary progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgressTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the secondary progress drawable, if specified.", "history": "Added in API level 21", "FullName": "public ColorStateList getSecondaryProgressTintList ()"}, "getMinHeight()": {"Returns": [["int", "the minimum height the progress bar can have, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getMinHeight ()"}, "isIndeterminate()": {"Returns": [["boolean", "true if the progress bar is in indeterminate mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicate whether this progress bar is in indeterminate mode.", "history": "Added in API level 1", "FullName": "public boolean isIndeterminate ()"}, "getProgressDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "a @B_android#graphics#drawable#Drawable_E@ instance"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Get the drawable used to draw the progress bar in progress mode.", "history": "Added in API level 1", "FullName": "public Drawable getProgressDrawable ()"}, "setInterpolator(android.view.animation.Interpolator)": {"Returns": [], "Parameters": [["@B_android#view#animation#Interpolator_E@", "Interpolator: The interpolator which defines the acceleration curve"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setInterpolator_E@", "@B_android#widget#ProgressBar#getInterpolator_E@"], "Permissions": [], "Description": "Sets the acceleration curve for the indeterminate animation. Defaults to a linear interpolation. The interpolator only affects the indeterminate animation if the @B_android#widget#ProgressBar#setIndeterminateDrawable_E@ does not implement @B_android#graphics#drawable#Animatable_E@. This call must be made before the indeterminate animation starts for it to have an affect.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Interpolator interpolator)"}, "setIndeterminateTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getIndeterminateTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the indeterminate drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#ProgressBar#setIndeterminateDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setIndeterminateTintList (ColorStateList tint)"}, "setInterpolator(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment"], ["int", "int: The resource identifier of the interpolator to load"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the acceleration curve for the indeterminate animation. The interpolator is loaded as a resource from the specified context.", "history": "added in API level 1", "FullName": "public void setInterpolator (Context context, int resID)"}, "ProgressBar(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ProgressBar (Context context, AttributeSet attrs, int defStyleAttr)"}, "getIndeterminateDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "a @B_android#graphics#drawable#Drawable_E@ instance"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Get the drawable used to draw the progress bar in indeterminate mode.", "history": "Added in API level 1", "FullName": "public Drawable getIndeterminateDrawable ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setProgressBackgroundTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressBackgroundTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the progress background, if one exists. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@ by default. The progress background must be specified as a layer with id @B_android#R#id#background_E@ in a @B_android#graphics#drawable#LayerDrawable_E@ used as the progress drawable. Subsequent calls to @B_android#widget#ProgressBar#setProgressDrawable_E@ where the drawable contains a progress background will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setProgressBackgroundTintList (ColorStateList tint)"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "setMinWidth(int)": {"Returns": [], "Parameters": [["int", "int: the minimum width to be set, in pixels This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum width the progress bar can have.", "history": "Added in API level 29", "FullName": "public void setMinWidth (int minWidth)"}, "setProgressTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setProgressTintList_E@} to the progress indicator. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setProgressTintBlendMode (BlendMode blendMode)"}, "setIndeterminateTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setIndeterminateTintList_E@ to the indeterminate drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setIndeterminateTintMode (PorterDuff.Mode tintMode)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#ProgressBar#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "The view whose visibility changed. May be this or an ancestor view."], ["int", "The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "setSecondaryProgress(int)": {"Returns": [], "Parameters": [["int", "int: the new secondary progress, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminate_E@", "@B_android#widget#ProgressBar#isIndeterminate_E@", "@B_android#widget#ProgressBar#getSecondaryProgress_E@", "@B_android#widget#ProgressBar#incrementSecondaryProgressBy_E@"], "Permissions": [], "Description": "Set the current secondary progress to the specified value. Does not do anything if the progress bar is in indeterminate mode.", "history": "Added in API level 1", "FullName": "public void setSecondaryProgress (int secondaryProgress)"}, "setProgressTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the progress indicator, if one exists, or to the entire progress drawable otherwise. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. The progress indicator should be specified as a layer with id @B_android#R#id#progress_E@ in a @B_android#graphics#drawable#LayerDrawable_E@ used as the progress drawable. Subsequent calls to @B_android#widget#ProgressBar#setProgressDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setProgressTintList (ColorStateList tint)"}, "getMax()": {"Returns": [["int", "a positive integer"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setMax_E@", "@B_android#widget#ProgressBar#getProgress_E@", "@B_android#widget#ProgressBar#getSecondaryProgress_E@"], "Permissions": [], "Description": "Return the upper limit of this progress bar's range.", "history": "Added in API level 1", "FullName": "public int getMax ()"}, "incrementSecondaryProgressBy(int)": {"Returns": [], "Parameters": [["int", "int: the amount by which the secondary progress must be increased"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgress_E@"], "Permissions": [], "Description": "Increase the progress bar's secondary progress by the specified amount.", "history": "Added in API level 1", "FullName": "public final void incrementSecondaryProgressBy (int diff)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "setIndeterminate(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable the indeterminate mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the indeterminate mode for this progress bar. In indeterminate mode, the progress is ignored and the progress bar shows an infinite animation instead. If this progress bar's style only supports indeterminate mode (such as the circular progress bars), then this will be ignored.", "history": "Added in API level 1", "FullName": "public void setIndeterminate (boolean indeterminate)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "getProgressBackgroundTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the progress background This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressBackgroundTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the progress background, if specified.", "history": "Added in API level 21", "FullName": "public ColorStateList getProgressBackgroundTintList ()"}, "getMaxWidth()": {"Returns": [["int", "the maximum width the progress bar can have, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getMaxWidth ()"}, "getMaxHeight()": {"Returns": [["int", "the maximum height the progress bar can have, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getMaxHeight ()"}, "setInterpolator(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment"], ["int", "int: The resource identifier of the interpolator to load"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setInterpolator_E@", "@B_android#widget#ProgressBar#getInterpolator_E@"], "Permissions": [], "Description": "Sets the acceleration curve for the indeterminate animation. The interpolator is loaded as a resource from the specified context. Defaults to a linear interpolation. The interpolator only affects the indeterminate animation if the @B_android#widget#ProgressBar#setIndeterminateDrawable_E@ does not implement @B_android#graphics#drawable#Animatable_E@. This call must be made before the indeterminate animation starts for it to have an affect.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Context context, int resID)"}, "setIndeterminateDrawableTiled(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the new drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getIndeterminateDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Define the tileable drawable used to draw the progress bar in indeterminate mode. If the drawable is a BitmapDrawable or contains BitmapDrawables, a tiled copy will be generated for display as a progress bar.", "history": "Added in API level 21", "FullName": "public void setIndeterminateDrawableTiled (Drawable d)"}, "getSecondaryProgressTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the secondary progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgressTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the secondary progress drawable, if specified.", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getSecondaryProgressTintMode ()"}, "setMax(int)": {"Returns": [], "Parameters": [["int", "int: the upper range of this progress bar"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getMax_E@", "@B_android#widget#ProgressBar#setProgress_E@", "@B_android#widget#ProgressBar#setSecondaryProgress_E@"], "Permissions": [], "Description": "Set the upper range of the progress bar", "history": "Added in API level 1", "FullName": "public void setMax (int max)"}, "ProgressBar(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ProgressBar (Context context, AttributeSet attrs)"}, "setProgressDrawableTiled(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the new drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Define the tileable drawable used to draw the progress bar in progress mode. If the drawable is a BitmapDrawable or contains BitmapDrawables, a tiled copy will be generated for display as a progress bar.", "history": "Added in API level 21", "FullName": "public void setProgressDrawableTiled (Drawable d)"}, "setMaxWidth(int)": {"Returns": [], "Parameters": [["int", "int: the maximum width to be set, in pixels This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum width the progress bar can have.", "history": "Added in API level 29", "FullName": "public void setMaxWidth (int maxWidth)"}, "setSecondaryProgressTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setSecondaryProgressTintList_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setSecondaryProgressTintList_E@} to the secondary progress indicator. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_ATOP_E@.", "history": "Added in API level 29", "FullName": "public void setSecondaryProgressTintBlendMode (BlendMode blendMode)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "getIndeterminateTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the indeterminate drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setIndeterminateTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the indeterminate drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getIndeterminateTintBlendMode ()"}, "getProgressTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the progress drawable, if specified.", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getProgressTintMode ()"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "setIndeterminateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the new drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getIndeterminateDrawable_E@", "@B_android#widget#ProgressBar#setIndeterminate_E@"], "Permissions": [], "Description": "Define the drawable used to draw the progress bar in indeterminate mode. For the Drawable to animate, it must implement @B_android#graphics#drawable#Animatable_E@, or override @B_android#graphics#drawable#Drawable#onLevelChange_E@. A Drawable that implements Animatable will be animated via that interface and therefore provides the greatest amount of customization. A Drawable that only overrides onLevelChange(int) is animated directly by ProgressBar and only the animation @B_android#R#styleable#ProgressBar_indeterminateDuration_E@, @B_android#R#styleable#ProgressBar_indeterminateBehavior_E@, and @B_android#widget#ProgressBar#setInterpolator_E@ can be modified, and only before the indeterminate animation begins.", "history": "Added in API level 1", "FullName": "public void setIndeterminateDrawable (Drawable d)"}, "incrementProgressBy(int)": {"Returns": [], "Parameters": [["int", "int: the amount by which the progress must be increased"]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgress_E@"], "Permissions": [], "Description": "Increase the progress bar's progress by the specified amount.", "history": "Added in API level 1", "FullName": "public final void incrementProgressBy (int diff)"}, "setProgress(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the new progress value, between @B_android#widget#ProgressBar#getMin_E@ and @B_android#widget#ProgressBar#getMax_E@"], ["boolean", "boolean: true to animate between the current and target values or false to not animate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current progress to the specified value, optionally animating the visual position between the current and target values. Animation does not affect the result of @B_android#widget#ProgressBar#getProgress_E@, which will return the target value immediately after this method is called.", "history": "added in API level 24", "FullName": "public void setProgress (int progress, boolean animate)"}, "setProgressTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#getProgressTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#ProgressBar#setProgressTintList_E@} to the progress indicator. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setProgressTintMode (PorterDuff.Mode tintMode)"}, "ProgressBar(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ProgressBar (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "invalidateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidates the specified Drawable.", "history": "Added in API level 1", "FullName": "public void invalidateDrawable (Drawable dr)"}, "getProgressTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the progress drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ProgressBar#setProgressTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the progress drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getProgressTintBlendMode ()"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.widget.ProgressBar", "ClassDesc": "A user interface element that indicates the progress of an operation. Progress bar supports two modes to represent progress: determinate, and indeterminate. For a visual overview of the difference between determinate and indeterminate progress modes, see Use indeterminate mode for the progress bar when you do not know how long an operation will take. Indeterminate mode is the default for progress bar and shows a cyclic animation without a specific amount of progress indicated. The following example shows an indeterminate progress bar: Use determinate mode for the progress bar when you want to show that a specific quantity of progress has occurred. For example, the percent remaining of a file being retrieved, the amount records in a batch written to database, or the percent remaining of an audio file that is playing. To indicate determinate progress, you set the style of the progress bar to @B_android#R#style#Widget_ProgressBar_Horizontal_E@ and set the amount of progress. The following example shows a determinate progress bar that is 25% complete: @B_android#widget#ProgressBar#setProgress_E@ method, or by calling @B_android#widget#ProgressBar#incrementProgressBy_E@ to increase the current progress completed by a specified amount. By default, the progress bar is full when the progress value reaches 100. You can adjust this default by setting the @B_android#R#styleable#ProgressBar_max_E@ attribute. Other progress bar styles provided by the system include: @B_android#R#style#Widget_ProgressBar_Horizontal_E@ @B_android#R#style#Widget_ProgressBar_Small_E@ @B_android#R#style#Widget_ProgressBar_Large_E@ @B_android#R#style#Widget_ProgressBar_Inverse_E@ @B_android#R#style#Widget_ProgressBar_Small_Inverse_E@ @B_android#R#style#Widget_ProgressBar_Large_Inverse_E@ The \"inverse\" styles provide an inverse color scheme for the spinner, which may be necessary if your application uses a light colored theme (a white background). See @B_android#R#styleable#ProgressBar_E@, @B_android#R#styleable#View_E@"}