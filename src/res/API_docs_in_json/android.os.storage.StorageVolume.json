{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 24", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getState()": {"Returns": [["@B_java#lang#String_E@", "one of @B_android#os#Environment#MEDIA_UNKNOWN_E@, @B_android#os#Environment#MEDIA_REMOVED_E@, @B_android#os#Environment#MEDIA_UNMOUNTED_E@, @B_android#os#Environment#MEDIA_CHECKING_E@, @B_android#os#Environment#MEDIA_NOFS_E@, @B_android#os#Environment#MEDIA_MOUNTED_E@, @B_android#os#Environment#MEDIA_MOUNTED_READ_ONLY_E@, @B_android#os#Environment#MEDIA_SHARED_E@, @B_android#os#Environment#MEDIA_BAD_REMOVAL_E@, or @B_android#os#Environment#MEDIA_UNMOUNTABLE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current state of the volume.", "history": "Added in API level 24", "FullName": "public String getState ()"}, "isEmulated()": {"Returns": [["boolean", "is removable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the volume is emulated.", "history": "Added in API level 24", "FullName": "public boolean isEmulated ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 24", "FullName": "public int describeContents ()"}, "getUuid()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the volume UUID, if any.", "history": "Added in API level 24", "FullName": "public String getUuid ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "getDescription(android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "the volume description"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a user-visible description of the volume.", "history": "Added in API level 24", "FullName": "public String getDescription (Context context)"}, "createOpenDocumentTreeIntent()": {"Returns": [["@B_android#content#Intent_E@", "intent to @B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@ initially showing the contents of this @B_android#os#storage#StorageVolume_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@"], "Permissions": [], "Description": "Builds an @B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@ to allow the user to grant access to any directory subtree (or entire volume) from the @B_android#provider#DocumentsProvider_E@s available on the device. The initial location of the document navigation will be the root of this @B_android#os#storage#StorageVolume_E@. Note that the returned @B_android#content#Intent_E@ simply suggests that the user picks this @B_android#os#storage#StorageVolume_E@ by default, but the user may select a different location. Callers must respect the user's chosen location, even if it is different from the originally requested location.", "history": "Added in API level 29", "FullName": "public Intent createOpenDocumentTreeIntent ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "createAccessIntent(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "intent to request access, or null if the requested directory is invalid for that volume."]], "Parameters": [["@B_java#lang#String_E@", "String: must be one of @B_android#os#Environment#DIRECTORY_MUSIC_E@, @B_android#os#Environment#DIRECTORY_PODCASTS_E@, @B_android#os#Environment#DIRECTORY_RINGTONES_E@, @B_android#os#Environment#DIRECTORY_ALARMS_E@, @B_android#os#Environment#DIRECTORY_NOTIFICATIONS_E@, @B_android#os#Environment#DIRECTORY_PICTURES_E@, @B_android#os#Environment#DIRECTORY_MOVIES_E@, @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@, @B_android#os#Environment#DIRECTORY_DCIM_E@, or @B_android#os#Environment#DIRECTORY_DOCUMENTS_E@, or null to request access to the entire volume."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@", "@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@"], "Description": "Callers should migrate to using @B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@ instead. Launching this @B_android#content#Intent_E@ on devices running @B_android#os#Build#VERSION_CODES#Q_E@ or higher, will immediately finish with a result code of @B_android#app#Activity#RESULT_CANCELED_E@. Builds an intent to give access to a standard storage directory or entire volume after obtaining the user's approval. When invoked, the system will ask the user to grant access to the requested directory (and its descendants). The result of the request will be returned to the activity through the onActivityResult method. To gain access to descendants (child, grandchild, etc) documents, use @B_android#provider#DocumentsContract#buildDocumentUriUsingTree_E@, or @B_android#provider#DocumentsContract#buildChildDocumentsUriUsingTree_E@ with the returned URI. If your application only needs to store internal data, consider using @B_android#content#Context#getExternalFilesDirs_E@, @B_android#content#Context#getExternalCacheDirs_E@, or @B_android#content#Context#getExternalMediaDirs_E@, which require no permissions to read or write. Access to the entire volume is only available for non-primary volumes (for the primary volume, apps can use the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ and @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ permissions) and should be used with caution, since users are more likely to deny access when asked for entire volume access rather than specific directories.", "history": "Added in API level 24 Deprecated in API level 29", "FullName": "public Intent createAccessIntent (String directoryName)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 24", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "isRemovable()": {"Returns": [["boolean", "is removable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the volume is removable.", "history": "Added in API level 24", "FullName": "public boolean isRemovable ()"}, "isPrimary()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the volume is the primary shared/external storage, which is the volume backed by @B_android#os#Environment#getExternalStorageDirectory_E@.", "history": "Added in API level 24", "FullName": "public boolean isPrimary ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.os.storage.StorageVolume", "ClassDesc": "Information about a shared/external storage volume for a specific user. A device always has one (and one only) primary storage volume, but it could have extra volumes, like SD cards and USB drives. This object represents the logical view of a storage volume for a specific user: different users might have different views for the same physical volume (for example, if the volume is a built-in emulated storage). The storage volume is not necessarily mounted, applications should use @B_android#os#storage#StorageVolume#getState_E@ to verify its state. Applications willing to read or write to this storage volume needs to get a permission from the user first, which can be achieved in the following ways: To get access to standard directories (like the @B_android#os#Environment#DIRECTORY_PICTURES_E@), they can use the @B_android#os#storage#StorageVolume#createAccessIntent_E@. This is the recommend way, since it provides a simpler API and narrows the access to the given directory (and its descendants). To get access to any directory (and its descendants), they can use the Storage Acess Framework APIs (such as @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@ and @B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@, although these APIs do not guarantee the user will select this specific volume. To get read and write access to the primary storage volume, applications can declare the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ and @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ permissions respectively, with the latter including the former. This approach is discouraged, since users may be hesitant to grant broad access to all files contained on a storage device. It can be obtained through @B_android#os#storage#StorageManager#getStorageVolumes_E@ and @B_android#os#storage#StorageManager#getPrimaryStorageVolume_E@ and also as an extra in some broadcasts (see @B_android#os#storage#StorageVolume#EXTRA_STORAGE_VOLUME_E@). See @B_android#os#Environment#getExternalStorageDirectory_E@ for more info about shared/external storage semantics."}