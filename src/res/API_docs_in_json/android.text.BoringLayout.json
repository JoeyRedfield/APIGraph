{"Functions": {"getLineDescent(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the descent of the specified line(0\u2026getLineCount() - 1).", "history": "Added in API level 1", "FullName": "public int getLineDescent (int line)"}, "getLineWidth(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace.", "history": "Added in API level 1", "FullName": "public float getLineWidth (int line)"}, "make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)": {"Returns": [["@B_android#text#BoringLayout_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility function to construct a BoringLayout instance.", "history": "Added in API level 1", "FullName": "public static BoringLayout make (CharSequence source, TextPaint paint, int outerWidth, Layout.Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)"}, "BoringLayout(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public BoringLayout (CharSequence source, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)"}, "getEllipsisCount(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place.", "history": "Added in API level 1", "FullName": "public int getEllipsisCount (int line)"}, "draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas"], ["@B_android#graphics#Path_E@", "Path: the path of the highlight or cursor; can be null"], ["@B_android#graphics#Paint_E@", "Paint: the paint for the highlight"], ["int", "int: the amount to temporarily translate the canvas while rendering the highlight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text.", "history": "Added in API level 1", "FullName": "public void draw (Canvas c, Path highlight, Paint highlightpaint, int cursorOffset)"}, "isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout.Metrics)": {"Returns": [["@B_android#text#BoringLayout#Metrics_E@", "layout metric for the given text. If metrics is not null, this method fills values to given metrics object instead of allocating new metrics object. null if given text is unable to be handled by BoringLayout."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: a text"], ["@B_android#text#TextPaint_E@", "TextPaint: a paint"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: a metrics object to be recycled. If null is passed, this function creat new object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine and compute metrics if given text can be handled by BoringLayout.", "history": "Added in API level 1", "FullName": "public static BoringLayout.Metrics isBoring (CharSequence text, TextPaint paint, BoringLayout.Metrics metrics)"}, "getLineContainsTab(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified line contains one or more characters that need to be handled specially, like tabs.", "history": "Added in API level 1", "FullName": "public boolean getLineContainsTab (int line)"}, "getLineMax(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace.", "history": "Added in API level 1", "FullName": "public float getLineMax (int line)"}, "getParagraphDirection(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see @B_android#text#Layout#DIR_LEFT_TO_RIGHT_E@, @B_android#text#Layout#DIR_RIGHT_TO_LEFT_E@).", "history": "Added in API level 1", "FullName": "public int getParagraphDirection (int line)"}, "getLineCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of lines of text in this layout.", "history": "Added in API level 1", "FullName": "public int getLineCount ()"}, "make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)": {"Returns": [["@B_android#text#BoringLayout_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"], ["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: whether to ellipsize the text if width of the text is longer than the requested width"], ["int", "int: the width to which this Layout is ellipsizing. If ellipsize is null, or is @B_android#text#TextUtils#TruncateAt#MARQUEE_E@ this value is not used, outerWidth is used instead"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility function to construct a BoringLayout instance.", "history": "Added in API level 1", "FullName": "public static BoringLayout make (CharSequence source, TextPaint paint, int outerWidth, Layout.Alignment align, float spacingmult, float spacingadd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)"}, "getLineDirections(int)": {"Returns": [["@B_android#text#Layout#Directions_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the directional run information for the specified line. The array alternates counts of characters in left-to-right and right-to-left segments of the line. NOTE: this is inadequate to support bidirectional text, and will change.", "history": "Added in API level 1", "FullName": "public final Layout.Directions getLineDirections (int line)"}, "ellipsized(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback for the ellipsizer to report what region it ellipsized.", "history": "added in API level 1", "FullName": "public void ellipsized (int start, int end)"}, "replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)": {"Returns": [["@B_android#text#BoringLayout_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable. The caller must make sure that no one is still using this Layout.", "history": "Added in API level 1", "FullName": "public BoringLayout replaceOrMake (CharSequence source, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)"}, "getLineStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()). If the specified line is equal to the line count, returns the length of the text.", "history": "Added in API level 1", "FullName": "public int getLineStart (int line)"}, "BoringLayout(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"], ["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: whether to ellipsize the text if width of the text is longer than the requested outerwidth"], ["int", "int: the width to which this Layout is ellipsizing. If ellipsize is null, or is @B_android#text#TextUtils#TruncateAt#MARQUEE_E@ this value is not used, outerwidth is used instead"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public BoringLayout (CharSequence source, TextPaint paint, int outerWidth, Layout.Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)"}, "getEllipsizedWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width to which this Layout is ellipsizing, or @B_android#text#Layout#getWidth_E@ if it is not doing anything special.", "history": "Added in API level 1", "FullName": "public int getEllipsizedWidth ()"}, "replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)": {"Returns": [["@B_android#text#BoringLayout_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout"], ["int", "int: the wrapping width for the text"], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text"], ["float", "float: this value is no longer used by BoringLayout"], ["float", "float: this value is no longer used by BoringLayout"], ["@B_android#text#BoringLayout#Metrics_E@", "BoringLayout.Metrics: #Metrics instance that contains information about FontMetrics and line width"], ["boolean", "boolean: set whether to include extra space beyond font ascent and descent which is needed to avoid clipping in some scripts"], ["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: whether to ellipsize the text if width of the text is longer than the requested width"], ["int", "int: the width to which this Layout is ellipsizing. If ellipsize is null, or is @B_android#text#TextUtils#TruncateAt#MARQUEE_E@ this value is not used, outerwidth is used instead"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable. The caller must make sure that no one is still using this Layout.", "history": "Added in API level 1", "FullName": "public BoringLayout replaceOrMake (CharSequence source, TextPaint paint, int outerWidth, Layout.Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)"}, "isBoring(java.lang.CharSequence,android.text.TextPaint)": {"Returns": [["@B_android#text#BoringLayout#Metrics_E@", "layout metric for the given text. null if given text is unable to be handled by BoringLayout."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: a text"], ["@B_android#text#TextPaint_E@", "TextPaint: a paint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine and compute metrics if given text can be handled by BoringLayout.", "history": "Added in API level 1", "FullName": "public static BoringLayout.Metrics isBoring (CharSequence text, TextPaint paint)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the total height of this layout.", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "ellipsized(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback for the ellipsizer to report what region it ellipsized.", "history": "Added in API level 1", "FullName": "public void ellipsized (int start, int end)"}, "getEllipsisStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)", "history": "Added in API level 1", "FullName": "public int getEllipsisStart (int line)"}, "getBottomPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of extra pixels of descent padding in the bottom line of the Layout.", "history": "Added in API level 1", "FullName": "public int getBottomPadding ()"}, "getTopPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout.", "history": "Added in API level 1", "FullName": "public int getTopPadding ()"}, "getLineTop(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical position of the top of the specified line (0\u2026getLineCount()). If the specified line is equal to the line count, returns the bottom of the last line.", "history": "Added in API level 1", "FullName": "public int getLineTop (int line)"}}, "Inheritance": ["@B_android#text#Layout_E@"], "ClassName": "android.text.BoringLayout", "ClassDesc": "A BoringLayout is a very simple Layout implementation for text that fits on a single line and is all left-to-right characters. You will probably never want to make one of these yourself; if you do, be sure to call @B_android#text#BoringLayout#isBoring_E@ first to make sure the text meets the criteria. This class is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, in which case you are encouraged to use a Layout instead of calling @B_android#graphics#Canvas#drawText_E@ directly."}