{"Functions": {"getFloat(java.lang.Object)": {"Returns": [["float", "the value of the field converted to type float"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the float value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type float by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.", "history": "Added in API level 1", "FullName": "public float getFloat (Object obj)"}, "getInt(java.lang.Object)": {"Returns": [["int", "the value of the field converted to type int"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the int value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type int by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.", "history": "Added in API level 1", "FullName": "public int getInt (Object obj)"}, "setChar(java.lang.Object, char)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["char", "char: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a char on the specified object. This method is equivalent to set(obj, cObj), where cObj is a Character object and cObj.charValue() == c.", "history": "added in API level 1", "FullName": "public void setChar (Object obj, char c)"}, "setShort(java.lang.Object,short)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["short", "short: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a short on the specified object. This method is equivalent to set(obj, sObj), where sObj is a Short object and sObj.shortValue() == s.", "history": "Added in API level 1", "FullName": "public void setShort (Object obj, short s)"}, "setInt(java.lang.Object,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["int", "int: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as an int on the specified object. This method is equivalent to set(obj, iObj), where iObj is a Integer object and iObj.intValue() == i.", "history": "Added in API level 1", "FullName": "public void setInt (Object obj, int i)"}, "setShort(java.lang.Object, short)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["short", "short: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a short on the specified object. This method is equivalent to set(obj, sObj), where sObj is a Short object and sObj.shortValue() == s.", "history": "added in API level 1", "FullName": "public void setShort (Object obj, short s)"}, "getByte(java.lang.Object)": {"Returns": [["byte", "the value of the byte field"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the byte value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type byte by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance byte field.", "history": "Added in API level 1", "FullName": "public byte getByte (Object obj)"}, "getChar(java.lang.Object)": {"Returns": [["char", "the value of the field converted to type char"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the char value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type char by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.", "history": "Added in API level 1", "FullName": "public char getChar (Object obj)"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 1", "FullName": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationType)"}, "getBoolean(java.lang.Object)": {"Returns": [["boolean", "the value of the boolean field"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the boolean value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type boolean by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance boolean field.", "history": "Added in API level 1", "FullName": "public boolean getBoolean (Object obj)"}, "setFloat(java.lang.Object, float)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["float", "float: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a float on the specified object. This method is equivalent to set(obj, fObj), where fObj is a Float object and fObj.floatValue() == f.", "history": "added in API level 1", "FullName": "public void setFloat (Object obj, float f)"}, "getAnnotation(java.lang.Class<A>)": {"Returns": [["A", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 14", "FullName": "A getAnnotation (Class<A> annotationType)"}, "setByte(java.lang.Object,byte)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["byte", "byte: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a byte on the specified object. This method is equivalent to set(obj, bObj), where bObj is a Byte object and bObj.byteValue() == b.", "history": "Added in API level 1", "FullName": "public void setByte (Object obj, byte b)"}, "getGenericType()": {"Returns": [["@B_java#lang#reflect#Type_E@", "a Type object that represents the declared type for the field represented by this Field object"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic field signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if the generic type signature of the underlying field refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if the generic signature of the underlying field refers to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Type object that represents the declared type for the field represented by this Field object. If the Type is a parameterized type, the Type object returned must accurately reflect the actual type parameters used in the source code. If the type of the underlying field is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type getGenericType ()"}, "set(java.lang.Object,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["@B_java#lang#Object_E@", "Object: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the field represented by this Field object on the specified object argument to the specified new value. The new value is automatically unwrapped if the underlying field has a primitive type. The operation proceeds as follows: If the underlying field is static, the obj argument is ignored; it may be null. Otherwise the underlying field is an instance field. If the specified object argument is null, the method throws a NullPointerException. If the specified object argument is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException. If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException. If the underlying field is final, the method throws an IllegalAccessException unless setAccessible(true) has succeeded for this Field object and the field is non-static. Setting a final field in this way is meaningful only during deserialization or reconstruction of instances of classes with blank final fields, before they are made available for access by other parts of a program. Use in any other context may have unpredictable effects, including cases in which other parts of a program continue to use the original value of this field. If the underlying field is of a primitive type, an unwrapping conversion is attempted to convert the new value to a value of a primitive type. If this attempt fails, the method throws an IllegalArgumentException. If, after possible unwrapping, the new value cannot be converted to the type of the underlying field by an identity or widening conversion, the method throws an IllegalArgumentException. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. The field is set to the possibly unwrapped and widened new value. If the field is hidden in the type of obj, the field's value is set according to the preceding rules.", "history": "Added in API level 1", "FullName": "public void set (Object obj, Object value)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Field against the specified object. Returns true if the objects are the same. Two Field objects are the same if they were declared by the same class and have the same name and type.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getDouble(java.lang.Object)": {"Returns": [["double", "the value of the field converted to type double"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the double value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type double by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.", "history": "Added in API level 1", "FullName": "public double getDouble (Object obj)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "setLong(java.lang.Object,long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["long", "long: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a long on the specified object. This method is equivalent to set(obj, lObj), where lObj is a Long object and lObj.longValue() == l.", "history": "Added in API level 1", "FullName": "public void setLong (Object obj, long l)"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this field is a synthetic field as defined by the Java Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this field is a synthetic field; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isSynthetic ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this Field. This is computed as the exclusive-or of the hashcodes for the underlying field's declaring class name and its name.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "get(java.lang.Object)": {"Returns": [["@B_java#lang#Object_E@", "the value of the represented field in object obj; primitive values are wrapped in an appropriate object before being returned"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object from which the represented field's value is to be extracted"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof)."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the field represented by this Field, on the specified object. The value is automatically wrapped in an object if it has a primitive type. The underlying field's value is obtained as follows: If the underlying field is a static field, the obj argument is ignored; it may be null. Otherwise, the underlying field is an instance field. If the specified obj argument is null, the method throws a NullPointerException. If the specified object is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException. If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. Otherwise, the value is retrieved from the underlying instance or static field. If the field has a primitive type, the value is wrapped in an object before being returned, otherwise it is returned as is. If the field is hidden in the type of obj, the field's value is obtained according to the preceding rules.", "history": "Added in API level 1", "FullName": "public Object get (Object obj)"}, "setDouble(java.lang.Object,double)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["double", "double: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a double on the specified object. This method is equivalent to set(obj, dObj), where dObj is a Double object and dObj.doubleValue() == d.", "history": "Added in API level 1", "FullName": "public void setDouble (Object obj, double d)"}, "getShort(java.lang.Object)": {"Returns": [["short", "the value of the field converted to type short"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the short value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type short by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.", "history": "Added in API level 1", "FullName": "public short getShort (Object obj)"}, "setLong(java.lang.Object, long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["long", "long: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a long on the specified object. This method is equivalent to set(obj, lObj), where lObj is a Long object and lObj.longValue() == l.", "history": "added in API level 1", "FullName": "public void setLong (Object obj, long l)"}, "setChar(java.lang.Object,char)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["char", "char: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a char on the specified object. This method is equivalent to set(obj, cObj), where cObj is a Character object and cObj.charValue() == c.", "history": "Added in API level 1", "FullName": "public void setChar (Object obj, char c)"}, "setBoolean(java.lang.Object, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["boolean", "boolean: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a boolean on the specified object. This method is equivalent to set(obj, zObj), where zObj is a Boolean object and zObj.booleanValue() == z.", "history": "added in API level 1", "FullName": "public void setBoolean (Object obj, boolean z)"}, "set(java.lang.Object, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["@B_java#lang#Object_E@", "Object: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the field represented by this Field object on the specified object argument to the specified new value. The new value is automatically unwrapped if the underlying field has a primitive type. The operation proceeds as follows: If the underlying field is static, the obj argument is ignored; it may be null. Otherwise the underlying field is an instance field. If the specified object argument is null, the method throws a NullPointerException. If the specified object argument is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException. If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException. If the underlying field is final, the method throws an IllegalAccessException unless setAccessible(true) has succeeded for this Field object and the field is non-static. Setting a final field in this way is meaningful only during deserialization or reconstruction of instances of classes with blank final fields, before they are made available for access by other parts of a program. Use in any other context may have unpredictable effects, including cases in which other parts of a program continue to use the original value of this field. If the underlying field is of a primitive type, an unwrapping conversion is attempted to convert the new value to a value of a primitive type. If this attempt fails, the method throws an IllegalArgumentException. If, after possible unwrapping, the new value cannot be converted to the type of the underlying field by an identity or widening conversion, the method throws an IllegalArgumentException. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. The field is set to the possibly unwrapped and widened new value. If the field is hidden in the type of obj, the field's value is set according to the preceding rules.", "history": "added in API level 1", "FullName": "public void set (Object obj, Object value)"}, "getLong(java.lang.Object)": {"Returns": [["long", "the value of the field converted to type long"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to extract the long value from"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if the field value cannot be converted to the type long by a widening conversion."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#get_E@"], "Permissions": [], "Description": "Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.", "history": "Added in API level 1", "FullName": "public long getLong (Object obj)"}, "toGenericString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Field, including its generic type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Field, including its generic type. The format is the access modifiers for the field, if any, followed by the generic field type, followed by a space, followed by the fully-qualified name of the class declaring the field, followed by a period, followed by the name of the field. The modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: static, final, transient, volatile.", "history": "Added in API level 1", "FullName": "public String toGenericString ()"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "an object representing the declaring class of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object representing the class or interface that declares the field represented by this Field object.", "history": "Added in API level 1", "FullName": "public Class<?> getDeclaringClass ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Field"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Field. The format is the access modifiers for the field, if any, followed by the field type, followed by a space, followed by the fully-qualified name of the class declaring the field, followed by a period, followed by the name of the field. For example: The modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: static, final, transient, volatile.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "setByte(java.lang.Object, byte)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["byte", "byte: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a byte on the specified object. This method is equivalent to set(obj, bObj), where bObj is a Byte object and bObj.byteValue() == b.", "history": "added in API level 1", "FullName": "public void setByte (Object obj, byte b)"}, "setFloat(java.lang.Object,float)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["float", "float: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a float on the specified object. This method is equivalent to set(obj, fObj), where fObj is a Float object and fObj.floatValue() == f.", "history": "Added in API level 1", "FullName": "public void setFloat (Object obj, float f)"}, "setDouble(java.lang.Object, double)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["double", "double: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a double on the specified object. This method is equivalent to set(obj, dObj), where dObj is a Double object and dObj.doubleValue() == d.", "history": "added in API level 1", "FullName": "public void setDouble (Object obj, double d)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the simple name of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the field represented by this Field object.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "isEnumConstant()": {"Returns": [["boolean", "true if and only if this field represents an element of an enumerated type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this field represents an element of an enumerated type; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isEnumConstant ()"}, "getType()": {"Returns": [["@B_java#lang#Class_E@", "a Class object identifying the declared type of the field represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Class object that identifies the declared type for the field represented by this Field object.", "history": "Added in API level 1", "FullName": "public Class<?> getType ()"}, "setInt(java.lang.Object, int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["int", "int: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as an int on the specified object. This method is equivalent to set(obj, iObj), where iObj is a Integer object and iObj.intValue() == i.", "history": "added in API level 1", "FullName": "public void setInt (Object obj, int i)"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 24", "FullName": "public T[] getAnnotationsByType (Class<T> annotationClass)"}, "getModifiers()": {"Returns": [["int", "the Java language modifiers for the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#reflect#Modifier_E@"], "Permissions": [], "Description": "Returns the Java language modifiers for the field represented by this Field object, as an integer. The Modifier class should be used to decode the modifiers.", "history": "Added in API level 1", "FullName": "public int getModifiers ()"}, "setBoolean(java.lang.Object,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object whose field should be modified"], ["boolean", "boolean: the new value for the field of obj being modified"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified object is not an instance of the class or interface declaring the underlying field (or a subclass or implementor thereof), or if an unwrapping conversion fails."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the field is an instance field."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": ["@B_java#lang#reflect#Field#set_E@"], "Permissions": [], "Description": "Sets the value of a field as a boolean on the specified object. This method is equivalent to set(obj, zObj), where zObj is a Boolean object and zObj.booleanValue() == z.", "history": "Added in API level 1", "FullName": "public void setBoolean (Object obj, boolean z)"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 1", "FullName": "public T getAnnotation (Class<T> annotationClass)"}}, "Inheritance": ["@B_java#lang#reflect#AccessibleObject_E@"], "ClassName": "java.lang.reflect.Field", "ClassDesc": "A Field provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field. A Field permits widening conversions to occur during a get or set access operation, but throws an IllegalArgumentException if a narrowing conversion would occur."}