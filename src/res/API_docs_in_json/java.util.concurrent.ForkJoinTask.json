{"Functions": {"invoke()": {"Returns": [["V", "the computed result"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so.", "history": "Added in API level 21", "FullName": "public final V invoke ()"}, "exec()": {"Returns": [["boolean", "true if this task is known to have completed normally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally. This method may return false otherwise, to indicate that this task is not necessarily complete (or is not known to be complete), for example in asynchronous actions that require explicit invocations of completion methods. This method may also throw an (unchecked) exception to indicate abnormal exit. This method is designed to support extensions, and should not in general be called otherwise.", "history": "Added in API level 21", "FullName": "protected abstract boolean exec ()"}, "isCompletedAbnormally()": {"Returns": [["boolean", "true if this task threw an exception or was cancelled"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task threw an exception or was cancelled.", "history": "Added in API level 21", "FullName": "public final boolean isCompletedAbnormally ()"}, "invokeAll(java.util.concurrent.ForkJoinTask<?>...)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the tasks"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using @B_java#util#concurrent#ForkJoinTask#getException_E@ and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.", "history": "Added in API level 21", "FullName": "public static void invokeAll (ForkJoinTask...<?> tasks)"}, "compareAndSetForkJoinTaskTag(short, short)": {"Returns": [["boolean", "true if successful; i.e., the current value was equal to expect and was changed to update."]], "Parameters": [["short", "short: the expected tag value"], ["short", "short: the new tag value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically conditionally sets the tag value for this task. Among other applications, tags can be used as visit markers in tasks operating on graphs, as in methods that check: if (task.compareAndSetForkJoinTaskTag((short)0, (short)1)) before processing, otherwise exiting because the node has already been visited.", "history": "added in API level 24", "FullName": "public final boolean compareAndSetForkJoinTaskTag (short expect, short update)"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread is not a member of a ForkJoinPool and was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "added in API level 21", "FullName": "public final V get (long timeout, TimeUnit unit)"}, "cancel(boolean)": {"Returns": [["boolean", "true if this task is now cancelled"]], "Parameters": [["boolean", "boolean: this value has no effect in the default implementation because interrupts are not used to control cancellation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, execution of this task is suppressed. After this method returns successfully, unless there is an intervening call to @B_java#util#concurrent#ForkJoinTask#reinitialize_E@, subsequent calls to @B_java#util#concurrent#ForkJoinTask#isCancelled_E@, @B_java#util#concurrent#ForkJoinTask#isDone_E@, and cancel will return true and calls to @B_java#util#concurrent#ForkJoinTask#join_E@ and related methods will result in CancellationException. This method may be overridden in subclasses, but if so, must still ensure that these properties hold. In particular, the cancel method itself must not throw exceptions. This method is designed to be invoked by other tasks. To terminate the current task, you can just return or throw an unchecked exception from its computation method, or invoke @B_java#util#concurrent#ForkJoinTask#completeExceptionally_E@.", "history": "Added in API level 21", "FullName": "public boolean cancel (boolean mayInterruptIfRunning)"}, "adapt(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon @B_java#util#concurrent#ForkJoinTask#join_E@.", "history": "Added in API level 21", "FullName": "public static ForkJoinTask<?> adapt (Runnable runnable)"}, "quietlyComplete()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completes this task normally without setting a value. The most recent value established by @B_java#util#concurrent#ForkJoinTask#setRawResult_E@ (or null by default) will be returned as the result of subsequent invocations of join and related operations.", "history": "Added in API level 24", "FullName": "public final void quietlyComplete ()"}, "setForkJoinTaskTag(short)": {"Returns": [["short", "the previous value of the tag"]], "Parameters": [["short", "short: the new tag value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the tag value for this task and returns the old value.", "history": "Added in API level 24", "FullName": "public final short setForkJoinTaskTag (short newValue)"}, "completeExceptionally(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the exception to throw. If this exception is not a RuntimeException or Error, the actual exception thrown will be a RuntimeException with cause ex."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations. This method may be used to induce exceptions in asynchronous tasks, or to force completion of tasks that would not otherwise complete. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke super implementation to maintain guarantees.", "history": "Added in API level 21", "FullName": "public void completeExceptionally (Throwable ex)"}, "getQueuedTaskCount()": {"Returns": [["int", "the number of tasks"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed. This value may be useful for heuristic decisions about whether to fork other tasks.", "history": "Added in API level 21", "FullName": "public static int getQueuedTaskCount ()"}, "isCompletedNormally()": {"Returns": [["boolean", "true if this task completed without throwing an exception and was not cancelled"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task completed without throwing an exception and was not cancelled.", "history": "Added in API level 21", "FullName": "public final boolean isCompletedNormally ()"}, "adapt(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable action"], ["T", "T: the result upon completion"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon @B_java#util#concurrent#ForkJoinTask#join_E@.", "history": "Added in API level 21", "FullName": "public static ForkJoinTask<T> adapt (Runnable runnable, T result)"}, "getRawResult()": {"Returns": [["V", "the result, or null if not completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result that would be returned by @B_java#util#concurrent#ForkJoinTask#join_E@, even if this task completed abnormally, or null if this task is not known to have been completed. This method is designed to aid debugging, as well as to support extensions. Its use in any other context is discouraged.", "history": "Added in API level 21", "FullName": "public abstract V getRawResult ()"}, "ForkJoinTask()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public ForkJoinTask ()"}, "getSurplusQueuedTaskCount()": {"Returns": [["int", "the surplus number of tasks, which may be negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool. This value may be useful for heuristic decisions about whether to fork other tasks. In many usages of ForkJoinTasks, at steady state, each worker should aim to maintain a small constant surplus (for example, 3) of tasks, and to process computations locally if this threshold is exceeded.", "history": "Added in API level 21", "FullName": "public static int getSurplusQueuedTaskCount ()"}, "isDone()": {"Returns": [["boolean", "true if this task completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true.", "history": "Added in API level 21", "FullName": "public final boolean isDone ()"}, "getPool()": {"Returns": [["@B_java#util#concurrent#ForkJoinPool_E@", "the pool, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pool hosting the current thread, or null if the current thread is executing outside of any ForkJoinPool. This method returns null if and only if @B_java#util#concurrent#ForkJoinTask#inForkJoinPool_E@ returns false.", "history": "Added in API level 21", "FullName": "public static ForkJoinPool getPool ()"}, "helpQuiesce()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Possibly executes tasks until the pool hosting the current task", "history": "Added in API level 21", "FullName": "public static void helpQuiesce ()"}, "getForkJoinTaskTag()": {"Returns": [["short", "the tag for this task"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tag for this task.", "history": "Added in API level 24", "FullName": "public final short getForkJoinTaskTag ()"}, "reinitialize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the internal bookkeeping state of this task, allowing a subsequent fork. This method allows repeated reuse of this task, but only if reuse occurs when this task has either never been forked, or has been forked, then completed and all outstanding joins of this task have also completed. Effects under any other usage conditions are not guaranteed. This method may be useful when executing pre-constructed trees of subtasks in loops. Upon completion of this method, isDone() reports false, and getException() reports null. However, the value returned by getRawResult is unaffected. To clear this value, you can invoke setRawResult(null).", "history": "Added in API level 21", "FullName": "public void reinitialize ()"}, "adapt(java.util.concurrent.Callable<?extendsT>)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the callable action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon @B_java#util#concurrent#ForkJoinTask#join_E@, translating any checked exceptions encountered into RuntimeException.", "history": "Added in API level 21", "FullName": "public static ForkJoinTask<T> adapt (Callable<? extends T> callable)"}, "invokeAll(java.util.Collection<T>)": {"Returns": [["@B_java#util#Collection_E@", "the tasks argument, to simplify usage"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if tasks or any element are null"]], "SeeAlso": [], "Permissions": [], "Description": "Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using @B_java#util#concurrent#ForkJoinTask#getException_E@ and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.", "history": "Added in API level 21", "FullName": "public static Collection<T> invokeAll (Collection<T> tasks)"}, "peekNextLocalTask()": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the next task, or null if none are available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available. There is no guarantee that this task will actually be polled or executed next. Conversely, this method may return null even if a task exists but cannot be accessed without contention with other threads. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.", "history": "Added in API level 21", "FullName": "protected static ForkJoinTask<?> peekNextLocalTask ()"}, "get()": {"Returns": [["V", "the computed result"]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread is not a member of a ForkJoinPool and was interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for the computation to complete, and then retrieves its result.", "history": "Added in API level 21", "FullName": "public final V get ()"}, "quietlyJoin()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Joins this task, without returning its result or throwing its exception. This method may be useful when processing collections of tasks when some have been cancelled or otherwise known to have aborted.", "history": "Added in API level 21", "FullName": "public final void quietlyJoin ()"}, "inForkJoinPool()": {"Returns": [["boolean", "true if the current thread is a @B_java#util#concurrent#ForkJoinWorkerThread_E@ executing as a ForkJoinPool computation, or false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current thread is a @B_java#util#concurrent#ForkJoinWorkerThread_E@ executing as a ForkJoinPool computation.", "history": "Added in API level 21", "FullName": "public static boolean inForkJoinPool ()"}, "adapt(java.util.concurrent.Callable<? extends T>)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the callable action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon @B_java#util#concurrent#ForkJoinTask#join_E@, translating any checked exceptions encountered into RuntimeException.", "history": "added in API level 21", "FullName": "public static ForkJoinTask<T> adapt (Callable<? extends T> callable)"}, "get(long,java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if the computation threw an exception"], ["@B_java#lang#InterruptedException_E@", "if the current thread is not a member of a ForkJoinPool and was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "Added in API level 21", "FullName": "public final V get (long timeout, TimeUnit unit)"}, "complete(V)": {"Returns": [], "Parameters": [["V", "V: the result value for this task"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations. This method may be used to provide results for asynchronous tasks, or to provide alternative handling for tasks that would not otherwise complete normally. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke super implementation to maintain guarantees.", "history": "Added in API level 21", "FullName": "public void complete (V value)"}, "adapt(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable action"], ["T", "T: the result upon completion"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon @B_java#util#concurrent#ForkJoinTask#join_E@.", "history": "added in API level 21", "FullName": "public static ForkJoinTask<T> adapt (Runnable runnable, T result)"}, "quietlyInvoke()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.", "history": "Added in API level 21", "FullName": "public final void quietlyInvoke ()"}, "setRawResult(V)": {"Returns": [], "Parameters": [["V", "V: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forces the given value to be returned as a result. This method is designed to support extensions, and should not in general be called otherwise.", "history": "Added in API level 21", "FullName": "protected abstract void setRawResult (V value)"}, "fork()": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "this, to simplify usage"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ if not @B_java#util#concurrent#ForkJoinTask#inForkJoinPool_E@. While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to @B_java#util#concurrent#ForkJoinTask#join_E@ or related methods, or a call to @B_java#util#concurrent#ForkJoinTask#isDone_E@ returning true.", "history": "Added in API level 21", "FullName": "public final ForkJoinTask<V> fork ()"}, "pollTask()": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "a task, or null if none are available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available. Availability may be transient, so a null result does not necessarily imply quiescence of the pool this task is operating in. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.", "history": "Added in API level 21", "FullName": "protected static ForkJoinTask<?> pollTask ()"}, "getException()": {"Returns": [["@B_java#lang#Throwable_E@", "the exception, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed.", "history": "Added in API level 21", "FullName": "public final Throwable getException ()"}, "pollNextLocalTask()": {"Returns": [["@B_java#util#concurrent#ForkJoinTask_E@", "the next task, or null if none are available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.", "history": "Added in API level 21", "FullName": "protected static ForkJoinTask<?> pollNextLocalTask ()"}, "join()": {"Returns": [["V", "the computed result"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of the computation when it @B_java#util#concurrent#ForkJoinTask#isDone_E@. This method differs from @B_java#util#concurrent#ForkJoinTask#get_E@ in that abnormal completion results in RuntimeException or Error, not ExecutionException, and that interrupts of the calling thread do not cause the method to abruptly return by throwing InterruptedException.", "history": "Added in API level 21", "FullName": "public final V join ()"}, "tryUnfork()": {"Returns": [["boolean", "true if unforked"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tries to unschedule this task for execution. This method will typically (but is not guaranteed to) succeed if this task is the most recently forked task by the current thread, and has not commenced executing in another thread. This method may be useful when arranging alternative local processing of tasks that could have been, but were not, stolen.", "history": "Added in API level 21", "FullName": "public boolean tryUnfork ()"}, "isCancelled()": {"Returns": [["boolean", "true if this task was cancelled before it completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task was cancelled before it completed normally.", "history": "Added in API level 21", "FullName": "public final boolean isCancelled ()"}, "compareAndSetForkJoinTaskTag(short,short)": {"Returns": [["boolean", "true if successful; i.e., the current value was equal to expect and was changed to update."]], "Parameters": [["short", "short: the expected tag value"], ["short", "short: the new tag value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically conditionally sets the tag value for this task. Among other applications, tags can be used as visit markers in tasks operating on graphs, as in methods that check: if (task.compareAndSetForkJoinTaskTag((short)0, (short)1)) before processing, otherwise exiting because the node has already been visited.", "history": "Added in API level 24", "FullName": "public final boolean compareAndSetForkJoinTaskTag (short expect, short update)"}, "invokeAll(java.util.concurrent.ForkJoinTask<?>,java.util.concurrent.ForkJoinTask<?>)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the first task"], ["@B_java#util#concurrent#ForkJoinTask_E@", "ForkJoinTask: the second task"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, the other may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using @B_java#util#concurrent#ForkJoinTask#getException_E@ and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.", "history": "Added in API level 21", "FullName": "public static void invokeAll (ForkJoinTask<?> t1, ForkJoinTask<?> t2)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ForkJoinTask<V>", "ClassDesc": "Abstract base class for tasks that run within a @B_java#util#concurrent#ForkJoinPool_E@. A ForkJoinTask is a thread-like entity that is much lighter weight than a normal thread. Huge numbers of tasks and subtasks may be hosted by a small number of actual threads in a ForkJoinPool, at the price of some usage limitations. A \"main\" ForkJoinTask begins execution when it is explicitly submitted to a @B_java#util#concurrent#ForkJoinPool_E@, or, if not already engaged in a ForkJoin computation, commenced in the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ via @B_java#util#concurrent#ForkJoinTask#fork_E@, @B_java#util#concurrent#ForkJoinTask#invoke_E@, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using ForkJoinTask employ only methods @B_java#util#concurrent#ForkJoinTask#fork_E@ and @B_java#util#concurrent#ForkJoinTask#join_E@, or derivatives such as @B_java#util#concurrent#ForkJoinTask#invokeAll_E@. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing. A ForkJoinTask is a lightweight form of @B_java#util#concurrent#Future_E@. The efficiency of ForkJoinTasks stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are @B_java#util#concurrent#ForkJoinTask#fork_E@, that arranges asynchronous execution, and @B_java#util#concurrent#ForkJoinTask#join_E@, that doesn't proceed until the task's result has been computed. Computations should ideally avoid synchronized methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as IOExceptions to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include @B_java#util#concurrent#RejectedExecutionException_E@ stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using ex.printStackTrace()) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter. It is possible to define and use ForkJoinTasks that may block, but doing do requires three further considerations: (1) Completion of few if any other tasks should be dependent on a task that blocks on external synchronization or I/O. Event-style async tasks that are never joined (for example, those subclassing @B_java#util#concurrent#CountedCompleter_E@) often fall into this category. (2) To minimize resource impact, tasks should be small; ideally performing only the (possibly) blocking action. (3) Unless the @B_java#util#concurrent#ForkJoinPool#ManagedBlocker_E@ API is used, or the number of possibly blocked tasks is known to be less than the pool's @B_java#util#concurrent#ForkJoinPool#getParallelism_E@ level, the pool cannot guarantee that enough threads will be available to ensure progress or good performance. The primary method for awaiting completion and extracting results of a task is @B_java#util#concurrent#ForkJoinTask#join_E@, but there are several variants: The @B_java#util#concurrent#Future#get_E@ methods support interruptible and/or timed waits for completion and report results using Future conventions. Method @B_java#util#concurrent#ForkJoinTask#invoke_E@ is semantically equivalent to fork(); join() but always attempts to begin execution in the current thread. The \"quiet\" forms of these methods do not extract results or report exceptions. These may be useful when a set of tasks are being executed, and you need to delay processing of results or exceptions until all complete. Method invokeAll (available in multiple versions) performs the most common form of parallel invocation: forking a set of tasks and joining them all. In the most typical usages, a fork-join pair act like a call (fork) and return (join) from a parallel recursive function. As is the case with other forms of recursive calls, returns (joins) should be performed innermost-first. For example, a.fork(); b.fork(); b.join(); a.join(); is likely to be substantially more efficient than joining a before b. The execution status of tasks may be queried at several levels of detail: @B_java#util#concurrent#ForkJoinTask#isDone_E@ is true if a task completed in any way (including the case where a task was cancelled without executing); @B_java#util#concurrent#ForkJoinTask#isCompletedNormally_E@ is true if a task completed without cancellation or encountering an exception; @B_java#util#concurrent#ForkJoinTask#isCancelled_E@ is true if the task was cancelled (in which case @B_java#util#concurrent#ForkJoinTask#getException_E@ returns a @B_java#util#concurrent#CancellationException_E@); and @B_java#util#concurrent#ForkJoinTask#isCompletedAbnormally_E@ is true if a task was either cancelled or encountered an exception, in which case @B_java#util#concurrent#ForkJoinTask#getException_E@ will return either the encountered exception or @B_java#util#concurrent#CancellationException_E@. The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically @B_java#util#concurrent#RecursiveAction_E@ for most computations that do not return results, @B_java#util#concurrent#RecursiveTask_E@ for those that do, and @B_java#util#concurrent#CountedCompleter_E@ for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a compute method that somehow uses the control methods supplied by this base class. Method @B_java#util#concurrent#ForkJoinTask#join_E@ and its variants are appropriate for use only when completion dependencies are acyclic; that is, the parallel computation can be described as a directed acyclic graph (DAG). Otherwise, executions may encounter a form of deadlock as tasks cyclically wait for each other. However, this framework supports other methods and techniques (for example the use of @B_java#util#concurrent#Phaser_E@, @B_java#util#concurrent#ForkJoinTask#helpQuiesce_E@, and @B_java#util#concurrent#ForkJoinTask#complete_E@) that may be of use in constructing custom subclasses for problems that are not statically structured as DAGs. To support such usages, a ForkJoinTask may be atomically tagged with a short value using @B_java#util#concurrent#ForkJoinTask#setForkJoinTaskTag_E@ or @B_java#util#concurrent#ForkJoinTask#compareAndSetForkJoinTaskTag_E@ and checked using @B_java#util#concurrent#ForkJoinTask#getForkJoinTaskTag_E@. The ForkJoinTask implementation does not use these protected methods or tags for any purpose, but they may be of use in the construction of specialized subclasses. For example, parallel graph traversals can use the supplied methods to avoid revisiting nodes/tasks that have already been processed. (Method names for tagging are bulky in part to encourage definition of methods that reflect their usage patterns.) Most base support methods are final, to prevent overriding of implementations that are intrinsically tied to the underlying lightweight task scheduling framework. Developers creating new basic styles of fork/join processing should minimally implement protected methods @B_java#util#concurrent#ForkJoinTask#exec_E@, @B_java#util#concurrent#ForkJoinTask#setRawResult_E@, and @B_java#util#concurrent#ForkJoinTask#getRawResult_E@, while also introducing an abstract computational method that can be implemented in its subclasses, possibly relying on other protected methods provided by this class. ForkJoinTasks should perform relatively small amounts of computation. Large tasks should be split into smaller subtasks, usually via recursive decomposition. As a very rough rule of thumb, a task should perform more than 100 and less than 10000 basic computational steps, and should avoid indefinite looping. If tasks are too big, then parallelism cannot improve throughput. If too small, then memory and internal task maintenance overhead may overwhelm processing. This class provides adapt methods for @B_java#lang#Runnable_E@ and @B_java#util#concurrent#Callable_E@, that may be of use when mixing execution of ForkJoinTasks with other kinds of tasks. When all tasks are of this form, consider using a pool constructed in asyncMode. ForkJoinTasks are Serializable, which enables them to be used in extensions such as remote execution frameworks. It is sensible to serialize tasks only before or after, but not during, execution. Serialization is not relied on during execution itself."}