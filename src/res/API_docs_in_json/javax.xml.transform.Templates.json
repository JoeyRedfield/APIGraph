{"Functions": {"getOutputProperties()": {"Returns": [["@B_java#util#Properties_E@", "A Properties object, never null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the properties corresponding to the effective xsl:output element. The object returned will be a clone of the internal values. Accordingly, it can be mutated without mutating the Templates object, and then handed in to @B_javax#xml#transform#Transformer#setOutputProperties_E@. The properties returned should contain properties set by the stylesheet, and these properties are \"defaulted\" by default properties specified by or the default properties, while getOutputProperties().get(String key) will only retrieve properties that were explicitly set in the stylesheet. For XSLT,", "history": "Added in API level 8", "FullName": "public abstract Properties getOutputProperties ()"}, "newTransformer()": {"Returns": [["@B_javax#xml#transform#Transformer_E@", "A valid non-null instance of a Transformer."]], "Parameters": [], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "if a Transformer can not be created."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new transformation context for this Templates object.", "history": "Added in API level 8", "FullName": "public abstract Transformer newTransformer ()"}}, "Inheritance": [], "ClassName": "javax.xml.transform.Templates", "ClassDesc": "An object that implements this interface is the runtime representation of processed transformation instructions. Templates must be thread-safe for a given instance over multiple threads running concurrently, and may be used multiple times in a given session."}