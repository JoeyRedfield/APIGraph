{"Functions": {"isThumbnailCompressed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if thumbnail image is JPEG Compressed, or false if either thumbnail image does not exist or thumbnail image is uncompressed.", "history": "added in version 25.1.0", "FullName": "boolean isThumbnailCompressed ()"}, "getThumbnail()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the JPEG compressed thumbnail inside the image file, or null if there is no JPEG compressed thumbnail. The returned data can be decoded using @B_android#graphics#BitmapFactory#decodeByteArray_E@", "history": "added in version 25.1.0", "FullName": "byte[] getThumbnail ()"}, "getThumbnailBitmap()": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a Bitmap object of the thumbnail image based on the byte array and the thumbnail compression value, or null if the compression type is unsupported.", "history": "added in version 25.1.0", "FullName": "Bitmap getThumbnailBitmap ()"}, "setLatLong(double, double)": {"Returns": [], "Parameters": [["double", "double: the decimal value of latitude. Must be a valid double value between -90.0 and 90.0."], ["double", "double: the decimal value of longitude. Must be a valid double value between -180.0 and 180.0."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If latitude or longitude is outside the specified range."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the latitude and longitude values.", "history": "added in version 25.3.0", "FullName": "void setLatLong (double latitude, double longitude)"}, "getAltitude(double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["double", "double: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the altitude in meters. If the exif tag does not exist, return", "history": "added in version 25.1.0", "FullName": "double getAltitude (double defaultValue)"}, "getLatLong()": {"Returns": [["double[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the latitude and longitude values. If there are valid latitude and longitude values in the image, this method returns a double array where the first element is the latitude and the second element is the longitude. Otherwise, it returns null.", "history": "added in version 25.3.0", "FullName": "double[] getLatLong ()"}, "saveAttributes()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Save the tag data into the original image file. This is expensive because it involves copying all the data from one file to another and deleting the old file and renaming the other. It's best to use @B_android#support#media#ExifInterface#setAttribute_E@ to set all attributes to write and make a single call rather than multiple calls for each attribute. This method is only supported for JPEG files.", "history": "added in version 25.1.0", "FullName": "void saveAttributes ()"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified tag or null if there is no such tag in the image file.", "history": "added in version 25.1.0", "FullName": "String getAttribute (String tag)"}, "getAttributeInt(java.lang.String, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["int", "int: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the integer value of the specified tag. If there is no such tag in the image file or the value cannot be parsed as integer, return", "history": "added in version 25.1.0", "FullName": "int getAttributeInt (String tag, int defaultValue)"}, "getThumbnailBytes()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thumbnail bytes inside the image file, regardless of the compression type of the thumbnail image.", "history": "added in version 25.1.0", "FullName": "byte[] getThumbnailBytes ()"}, "hasThumbnail()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the image file has a thumbnail.", "history": "added in version 25.1.0", "FullName": "boolean hasThumbnail ()"}, "getLatLong(float[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#media#ExifInterface#getLatLong_E@ instead. Stores the latitude and longitude value in a float array. The first element is the latitude, and the second element is the longitude. Returns false if the Exif tags are not available.", "history": "added in version 25.1.0", "FullName": "boolean getLatLong (float[] output)"}, "ExifInterface(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image file.", "history": "added in version 25.1.0", "FullName": "ExifInterface (String filename)"}, "getThumbnailRange()": {"Returns": [["long[]", "two-element array, the offset in the first value, and length in the second, or null if no thumbnail was found."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset and length of thumbnail inside the image file, or null if there is no thumbnail.", "history": "added in version 25.1.0", "FullName": "long[] getThumbnailRange ()"}, "getAttributeDouble(java.lang.String, double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["double", "double: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value of the tag that is specified as rational or contains a double-formatted value. If there is no such tag in the image file or the value cannot be parsed as double, return", "history": "added in version 25.1.0", "FullName": "double getAttributeDouble (String tag, double defaultValue)"}, "setAttribute(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["@B_java#lang#String_E@", "String: the value of the tag."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value of the specified tag.", "history": "added in version 25.1.0", "FullName": "void setAttribute (String tag, String value)"}, "ExifInterface(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image input stream. Attribute mutation is not supported for input streams. The given input stream will proceed its current position. Developers should close the input stream after use. This constructor is not intended to be used with an input stream that performs any networking operations.", "history": "added in version 25.1.0", "FullName": "ExifInterface (InputStream inputStream)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.media.ExifInterface", "ClassDesc": "This is a class for reading and writing Exif tags in a JPEG file or a RAW image file. Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF, PEF, SRW and RAF. Attribute mutation is supported for JPEG image files."}