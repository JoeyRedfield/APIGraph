{"Functions": {"toggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the checked state of the view to the inverse of its current state", "history": "Added in API level 14", "FullName": "public void toggle ()"}, "getCompoundPaddingLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left padding of the view, plus space for the left Drawable if any.", "history": "Added in API level 14", "FullName": "public int getCompoundPaddingLeft ()"}, "setSplitTrack(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the track should be split by the thumb"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the track should be split by the thumb. When true, the thumb's optical bounds will be clipped out of the track drawable, then the thumb will be drawn into the resulting gap.", "history": "Added in API level 21", "FullName": "public void setSplitTrack (boolean splitTrack)"}, "Switch(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that will determine this widget's theming."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Specification of attributes that should deviate from the default styling."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Switch with a default style determined by the given theme attribute or style resource, overriding specific style attributes as requested.", "history": "Added in API level 21", "FullName": "public Switch (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "public void draw (Canvas c)"}, "getThumbDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Thumb drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawable used for the switch \"thumb\" - the piece that the user can physically touch and drag along the track.", "history": "Added in API level 16", "FullName": "public Drawable getThumbDrawable ()"}, "getThumbTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setThumbTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public ColorStateList getThumbTintList ()"}, "setTrackResource(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a track drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the track that the switch slides within.", "history": "Added in API level 16", "FullName": "public void setTrackResource (int resId)"}, "setThumbResource(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a thumb drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the switch \"thumb\" - the piece that the user can physically touch and drag along the track.", "history": "Added in API level 16", "FullName": "public void setThumbResource (int resId)"}, "getShowText()": {"Returns": [["boolean", "whether the on/off text should be displayed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean getShowText ()"}, "setThumbTextPadding(int)": {"Returns": [], "Parameters": [["int", "int: Horizontal padding for switch thumb text in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the horizontal padding around the text drawn on the switch itself.", "history": "Added in API level 16", "FullName": "public void setThumbTextPadding (int pixels)"}, "setTrackTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getTrackTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the track drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#Switch#setTrackDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 23", "FullName": "public void setTrackTintList (ColorStateList tint)"}, "getTrackDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Track drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawable used for the track that the switch slides within.", "history": "Added in API level 16", "FullName": "public Drawable getTrackDrawable ()"}, "getThumbTextPadding()": {"Returns": [["int", "Horizontal padding for switch thumb text in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the horizontal padding around the text drawn on the switch itself.", "history": "Added in API level 16", "FullName": "public int getThumbTextPadding ()"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "Switch(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that will determine this widget's theming."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Specification of attributes that should deviate from default styling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Switch with default styling, overriding specific style attributes as requested.", "history": "Added in API level 14", "FullName": "public Switch (Context context, AttributeSet attrs)"}, "getThumbTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setThumbTintBlendMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public BlendMode getThumbTintBlendMode ()"}, "setThumbTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getThumbTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the thumb drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#Switch#setThumbDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 23", "FullName": "public void setThumbTintList (ColorStateList tint)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "protected void drawableStateChanged ()"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to check the button, false to uncheck it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the checked state of this button.", "history": "Added in API level 14", "FullName": "public void setChecked (boolean checked)"}, "setTrackTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getTrackTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#Switch#setTrackTintList_E@} to the track drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 23", "FullName": "public void setTrackTintMode (PorterDuff.Mode tintMode)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 14", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "setSwitchTextAppearance(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the switch text color, size, style, hint color, and highlight color from the specified TextAppearance resource.", "history": "Added in API level 14", "FullName": "public void setSwitchTextAppearance (Context context, int resid)"}, "getTrackTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the track drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setTrackTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public ColorStateList getTrackTintList ()"}, "Switch(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that will determine this widget's theming."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Specification of attributes that should deviate from the default styling."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Switch with a default style determined by the given theme attribute, overriding specific style attributes as requested.", "history": "Added in API level 14", "FullName": "public Switch (Context context, AttributeSet attrs, int defStyleAttr)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 14", "FullName": "protected int[] onCreateDrawableState (int extraSpace)"}, "getTrackTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the track drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setTrackTintBlendMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public BlendMode getTrackTintBlendMode ()"}, "onProvideStructure(android.view.ViewStructure)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure: Fill in with structured view data. The default implementation fills in all data that can be inferred from the view itself."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when assist structure is being retrieved from a view as part of @B_android#app#Activity#onProvideAssistData_E@.", "history": "added in API level 23", "FullName": "public void onProvideStructure (ViewStructure structure)"}, "setTextOn(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text displayed when the button is in the checked state.", "history": "Added in API level 14", "FullName": "public void setTextOn (CharSequence textOn)"}, "setTrackDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Track drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the track that the switch slides within.", "history": "Added in API level 16", "FullName": "public void setTrackDrawable (Drawable track)"}, "getSwitchPadding()": {"Returns": [["int", "Amount of padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the amount of horizontal padding between the switch and the associated text.", "history": "Added in API level 16", "FullName": "public int getSwitchPadding ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 14", "FullName": "public void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setThumbTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getThumbTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#Switch#setThumbTintList_E@} to the thumb drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setThumbTintBlendMode (BlendMode blendMode)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 14", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setSwitchTypeface(android.graphics.Typeface)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface in which the text should be displayed on the switch. Note that not all Typeface families actually have bold and italic variants, so you may need to use @B_android#widget#Switch#setSwitchTypeface_E@ to get the appearance that you actually want.", "history": "Added in API level 14", "FullName": "public void setSwitchTypeface (Typeface tf)"}, "setSwitchPadding(int)": {"Returns": [], "Parameters": [["int", "int: Amount of padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the amount of horizontal padding between the switch and the associated text.", "history": "Added in API level 16", "FullName": "public void setSwitchPadding (int pixels)"}, "setTrackTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getTrackTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#Switch#setTrackTintList_E@} to the track drawable. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setTrackTintBlendMode (BlendMode blendMode)"}, "getTextOn()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text displayed when the button is in the checked state.", "history": "Added in API level 14", "FullName": "public CharSequence getTextOn ()"}, "setThumbDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Thumb drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the drawable used for the switch \"thumb\" - the piece that the user can physically touch and drag along the track.", "history": "Added in API level 16", "FullName": "public void setThumbDrawable (Drawable thumb)"}, "setThumbTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#getThumbTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#Switch#setThumbTintList_E@} to the thumb drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 23", "FullName": "public void setThumbTintMode (PorterDuff.Mode tintMode)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 14", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setShowText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to display on/off text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the on/off text should be displayed.", "history": "Added in API level 21", "FullName": "public void setShowText (boolean showText)"}, "getThumbTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the thumb drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setThumbTintMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public PorterDuff.Mode getThumbTintMode ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 14", "FullName": "public void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getSplitTrack()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the track should be split by the thumb.", "history": "Added in API level 21", "FullName": "public boolean getSplitTrack ()"}, "getTrackTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the track drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Switch#setTrackTintMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public PorterDuff.Mode getTrackTintMode ()"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 14", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "getSwitchMinWidth()": {"Returns": [["int", "Minimum width of the switch in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the minimum width of the switch in pixels. The switch's width will be the maximum of this value and its measured width as determined by the switch drawables and text used.", "history": "Added in API level 16", "FullName": "public int getSwitchMinWidth ()"}, "getCompoundPaddingRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right padding of the view, plus space for the right Drawable if any.", "history": "Added in API level 14", "FullName": "public int getCompoundPaddingRight ()"}, "Switch(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context that will determine this widget's theming."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Switch with default styling.", "history": "Added in API level 14", "FullName": "public Switch (Context context)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setSwitchMinWidth(int)": {"Returns": [], "Parameters": [["int", "int: Minimum width of the switch in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the minimum width of the switch in pixels. The switch's width will be the maximum of this value and its measured width as determined by the switch drawables and text used.", "history": "Added in API level 16", "FullName": "public void setSwitchMinWidth (int pixels)"}, "getTextOff()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text displayed when the button is not in the checked state.", "history": "Added in API level 14", "FullName": "public CharSequence getTextOff ()"}, "setTextOff(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text displayed when the button is not in the checked state.", "history": "Added in API level 14", "FullName": "public void setTextOff (CharSequence textOff)"}, "setSwitchTypeface(android.graphics.Typeface,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed on the switch, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.", "history": "Added in API level 14", "FullName": "public void setSwitchTypeface (Typeface tf, int style)"}, "setSwitchTypeface(android.graphics.Typeface, int)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed on the switch, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.", "history": "added in API level 14", "FullName": "public void setSwitchTypeface (Typeface tf, int style)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 14", "FullName": "protected void onDraw (Canvas canvas)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@", "@B_android#widget#Button_E@", "@B_android#widget#CompoundButton_E@"], "ClassName": "android.widget.Switch", "ClassDesc": "A Switch is a two-state toggle switch widget that can select between two options. The user may drag the \"thumb\" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The @B_android#widget#TextView#setText_E@ property controls the text displayed in the label for the switch, whereas the @B_android#widget#Switch#setTextOff_E@ and @B_android#widget#Switch#setTextOn_E@ text controls the text on the thumb. Similarly, the @B_android#widget#TextView#setTextAppearance_E@ and the related setTypeface() methods control the typeface and style of label text, whereas the @B_android#widget#Switch#setSwitchTextAppearance_E@ and the related setSwitchTypeface() methods control that of the thumb. https:##developer#android#com@B_android#support#v7#widget#SwitchCompat_E@ is a version of the Switch widget which runs on devices back to API 7. See the"}