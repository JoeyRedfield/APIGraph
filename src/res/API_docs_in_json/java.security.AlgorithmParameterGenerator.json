{"Functions": {"init(int,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the size (number of bits)."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameter generator for a certain size and source of randomness.", "history": "Added in API level 1", "FullName": "public final void init (int size, SecureRandom random)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the string name of the algorithm."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the standard name of the algorithm this parameter generator is associated with.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#AlgorithmParameterGenerator_E@", "the new AlgorithmParameterGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm this parameter generator is associated with. See the AlgorithmParameterGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the string name of the Provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if an AlgorithmParameterGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static AlgorithmParameterGenerator getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#AlgorithmParameterGenerator_E@", "the new AlgorithmParameterGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the string name of the algorithm this parameter generator is associated with. See the AlgorithmParameterGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the Provider object."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if an AlgorithmParameterGeneratorSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static AlgorithmParameterGenerator getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this algorithm parameter generator object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this algorithm parameter generator object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "init(int, java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the size (number of bits)."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameter generator for a certain size and source of randomness.", "history": "added in API level 1", "FullName": "public final void init (int size, SecureRandom random)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#AlgorithmParameterGenerator_E@", "the new AlgorithmParameterGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm this parameter generator is associated with. See the AlgorithmParameterGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the string name of the Provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if an AlgorithmParameterGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static AlgorithmParameterGenerator getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#AlgorithmParameterGenerator_E@", "the new AlgorithmParameterGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm this parameter generator is associated with. See the AlgorithmParameterGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports an AlgorithmParameterGeneratorSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new AlgorithmParameterGenerator object encapsulating the AlgorithmParameterGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static AlgorithmParameterGenerator getInstance (String algorithm)"}, "init(int)": {"Returns": [], "Parameters": [["int", "int: the size (number of bits)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameter generator for a certain size. To create the parameters, the SecureRandom implementation of the highest-priority installed provider is used as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.)", "history": "Added in API level 1", "FullName": "public final void init (int size)"}, "init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the set of algorithm-specific parameter generation values."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameter generation values are inappropriate for this parameter generator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameter generator with a set of algorithm-specific parameter generation values.", "history": "Added in API level 1", "FullName": "public final void init (AlgorithmParameterSpec genParamSpec, SecureRandom random)"}, "AlgorithmParameterGenerator(java.security.AlgorithmParameterGeneratorSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#AlgorithmParameterGeneratorSpi_E@", "AlgorithmParameterGeneratorSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an AlgorithmParameterGenerator object.", "history": "Added in API level 1", "FullName": "protected AlgorithmParameterGenerator (AlgorithmParameterGeneratorSpi paramGenSpi, Provider provider, String algorithm)"}, "init(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the set of algorithm-specific parameter generation values."]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameter generation values are inappropriate for this parameter generator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this parameter generator with a set of algorithm-specific parameter generation values. To generate the parameters, the SecureRandom implementation of the highest-priority installed provider is used as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.)", "history": "Added in API level 1", "FullName": "public final void init (AlgorithmParameterSpec genParamSpec)"}, "generateParameters()": {"Returns": [["@B_java#security#AlgorithmParameters_E@", "the new AlgorithmParameters object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the parameters.", "history": "Added in API level 1", "FullName": "public final AlgorithmParameters generateParameters ()"}}, "Inheritance": [], "ClassName": "java.security.AlgorithmParameterGenerator", "ClassDesc": "The AlgorithmParameterGenerator class is used to generate a set of parameters to be used with a certain algorithm. Parameter generators are constructed using the getInstance factory methods (static methods that return instances of a given class). The object that will generate the parameters can be initialized in two different ways: in an algorithm-independent manner, or in an algorithm-specific manner: The algorithm-independent approach uses the fact that all parameter generators share the concept of a \"size\" and a source of randomness. The measure of size is universally shared by all algorithm parameters, though it is interpreted differently for different algorithms. For example, in the case of parameters for the The other approach initializes a parameter generator object using algorithm-specific semantics, which are represented by a set of algorithm-specific parameter generation values. To generate Diffie-Hellman system parameters, for example, the parameter generation values usually consist of the size of the prime modulus and the size of the random exponent, both specified in number of bits. In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an init method), each provider must supply (and document) a default initialization. For example, the Sun provider uses a default modulus prime size of 1024 bits for the generation of DSA parameters. Android provides the following AlgorithmParameterGenerator algorithms:"}