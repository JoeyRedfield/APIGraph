{"Functions": {"WrongMethodTypeException()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a WrongMethodTypeException with no detail message.", "history": "Added in API level 26", "FullName": "public WrongMethodTypeException ()"}, "WrongMethodTypeException(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a WrongMethodTypeException with the specified detail message.", "history": "Added in API level 26", "FullName": "public WrongMethodTypeException (String s)"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@", "@B_java#lang#RuntimeException_E@"], "ClassName": "java.lang.invoke.WrongMethodTypeException", "ClassDesc": "Thrown to indicate that code has attempted to call a method handle via the wrong method type. As with the bytecode representation of normal Java method calls, method handle calls are strongly typed to a specific type descriptor associated with a call site. This exception may also be thrown when two method handles are composed, and the system detects that their types cannot be matched up correctly. This amounts to an early evaluation of the type mismatch, at method handle construction time, instead of when the mismatched method handle is called."}