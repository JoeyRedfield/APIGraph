{"Functions": {"setTimeToLive(int)": {"Returns": [], "Parameters": [["int", "int: an int specifying the time-to-live value"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while setting the time-to-live option."]], "SeeAlso": ["@B_java#net#DatagramSocketImpl#getTimeToLive_E@"], "Permissions": [], "Description": "Set the TTL (time-to-live) option.", "history": "Added in API level 1", "FullName": "protected abstract void setTimeToLive (int ttl)"}, "peek(java.net.InetAddress)": {"Returns": [["int", "the port number which the packet came from."]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: an InetAddress object"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs"], ["@B_java#net#PortUnreachableException_E@", "may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Peek at the packet to see who it is from. Updates the specified InetAddress to the address which the packet came from.", "history": "Added in API level 1", "FullName": "protected abstract int peek (InetAddress i)"}, "getTTL()": {"Returns": [["byte", "a byte representing the TTL value"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while retrieving the time-to-live option"]], "SeeAlso": ["@B_java#net#DatagramSocketImpl#setTTL_E@"], "Permissions": [], "Description": "use getTimeToLive instead. Retrieve the TTL (time-to-live) option.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "protected abstract byte getTTL ()"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disconnects a datagram socket from its remote destination.", "history": "Added in API level 1", "FullName": "protected void disconnect ()"}, "leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: address to leave."], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: specified the local interface to leave the group at"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while leaving the multicast group"]], "SeeAlso": [], "Permissions": [], "Description": "Leave the multicast group.", "history": "Added in API level 1", "FullName": "protected abstract void leaveGroup (SocketAddress mcastaddr, NetworkInterface netIf)"}, "DatagramSocketImpl()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public DatagramSocketImpl ()"}, "send(java.net.DatagramPacket)": {"Returns": [], "Parameters": [["@B_java#net#DatagramPacket_E@", "DatagramPacket: the packet to be sent."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while sending the datagram packet."], ["@B_java#net#PortUnreachableException_E@", "may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Sends a datagram packet. The packet contains the data and the destination address to send the packet to.", "history": "Added in API level 1", "FullName": "protected abstract void send (DatagramPacket p)"}, "connect(java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the remote InetAddress to connect to"], ["int", "int: the remote port number"]], "Throws": [["@B_java#net#SocketException_E@", "may be thrown if the socket cannot be connected to the remote destination"]], "SeeAlso": [], "Permissions": [], "Description": "Connects a datagram socket to a remote destination. This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination. This may be overridden to call a native system connect. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown.", "history": "Added in API level 1", "FullName": "protected void connect (InetAddress address, int port)"}, "receive(java.net.DatagramPacket)": {"Returns": [], "Parameters": [["@B_java#net#DatagramPacket_E@", "DatagramPacket: the Packet Received."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while receiving the datagram packet."], ["@B_java#net#PortUnreachableException_E@", "may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Receive the datagram packet.", "history": "Added in API level 1", "FullName": "protected abstract void receive (DatagramPacket p)"}, "bind(int,java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the local port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address"]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": [], "Permissions": [], "Description": "Binds a datagram socket to a local port and address.", "history": "Added in API level 1", "FullName": "protected abstract void bind (int lport, InetAddress laddr)"}, "create()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a datagram socket.", "history": "Added in API level 1", "FullName": "protected abstract void create ()"}, "setTTL(byte)": {"Returns": [], "Parameters": [["byte", "byte: a byte specifying the TTL value"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while setting the time-to-live option."]], "SeeAlso": ["@B_java#net#DatagramSocketImpl#getTTL_E@"], "Permissions": [], "Description": "use setTimeToLive instead. Set the TTL (time-to-live) option.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "protected abstract void setTTL (byte ttl)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the socket.", "history": "Added in API level 1", "FullName": "protected abstract void close ()"}, "peekData(java.net.DatagramPacket)": {"Returns": [["int", "the port number which the packet came from."]], "Parameters": [["@B_java#net#DatagramPacket_E@", "DatagramPacket: the Packet Received."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs"], ["@B_java#net#PortUnreachableException_E@", "may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Peek at the packet to see who it is from. The data is copied into the specified DatagramPacket. The data is returned, but not consumed, so that a subsequent peekData/receive operation will see the same data.", "history": "Added in API level 1", "FullName": "protected abstract int peekData (DatagramPacket p)"}, "connect(java.net.InetAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the remote InetAddress to connect to"], ["int", "int: the remote port number"]], "Throws": [["@B_java#net#SocketException_E@", "may be thrown if the socket cannot be connected to the remote destination"]], "SeeAlso": [], "Permissions": [], "Description": "Connects a datagram socket to a remote destination. This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination. This may be overridden to call a native system connect. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown.", "history": "added in API level 1", "FullName": "protected void connect (InetAddress address, int port)"}, "leave(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: multicast address to leave."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while leaving the multicast group."]], "SeeAlso": [], "Permissions": [], "Description": "Leave the multicast group.", "history": "Added in API level 1", "FullName": "protected abstract void leave (InetAddress inetaddr)"}, "joinGroup(java.net.SocketAddress,java.net.NetworkInterface)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: address to join."], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: specifies the local interface to receive multicast datagram packets"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while joining the multicast group"]], "SeeAlso": [], "Permissions": [], "Description": "Join the multicast group.", "history": "Added in API level 1", "FullName": "protected abstract void joinGroup (SocketAddress mcastaddr, NetworkInterface netIf)"}, "getTimeToLive()": {"Returns": [["int", "an int representing the time-to-live value"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while retrieving the time-to-live option"]], "SeeAlso": ["@B_java#net#DatagramSocketImpl#setTimeToLive_E@"], "Permissions": [], "Description": "Retrieve the TTL (time-to-live) option.", "history": "Added in API level 1", "FullName": "protected abstract int getTimeToLive ()"}, "getFileDescriptor()": {"Returns": [["@B_java#io#FileDescriptor_E@", "a FileDescriptor object representing the datagram socket file descriptor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the datagram socket file descriptor.", "history": "Added in API level 1", "FullName": "protected FileDescriptor getFileDescriptor ()"}, "join(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: multicast address to join."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while joining the multicast group."]], "SeeAlso": [], "Permissions": [], "Description": "Join the multicast group.", "history": "Added in API level 1", "FullName": "protected abstract void join (InetAddress inetaddr)"}, "bind(int, java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the local port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address"]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": [], "Permissions": [], "Description": "Binds a datagram socket to a local port and address.", "history": "added in API level 1", "FullName": "protected abstract void bind (int lport, InetAddress laddr)"}, "getLocalPort()": {"Returns": [["int", "an int representing the local port value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local port.", "history": "Added in API level 1", "FullName": "protected int getLocalPort ()"}}, "Inheritance": [], "ClassName": "java.net.DatagramSocketImpl", "ClassDesc": "Abstract datagram and multicast socket implementation base class."}