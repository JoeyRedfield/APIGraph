{"Functions": {"getActualMinimum(int)": {"Returns": [["int", "the minimum of the given field for the time value of this GregorianCalendar"]], "Parameters": [["int", "int: the calendar field"]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMinimum_E@", "@B_java#util#GregorianCalendar#getMaximum_E@", "@B_java#util#GregorianCalendar#getGreatestMinimum_E@", "@B_java#util#GregorianCalendar#getLeastMaximum_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods. For example, if the Gregorian change date is January 10, 1970 and the date of this GregorianCalendar is January 20, 1970, the actual minimum value of the DAY_OF_MONTH field is 10 because the previous date of January 10, 1970 is December 27, 1996 (in the Julian calendar). Therefore, December 28, 1969 to January 9, 1970 don't exist.", "history": "Added in API level 1", "FullName": "public int getActualMinimum (int field)"}, "getGregorianChange()": {"Returns": [["@B_java#util#Date_E@", "the Gregorian cutover date for this GregorianCalendar object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Gregorian Calendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.", "history": "Added in API level 1", "FullName": "public final Date getGregorianChange ()"}, "isLeapYear(int)": {"Returns": [["boolean", "true if the given year is a leap year; false otherwise."]], "Parameters": [["int", "int: the given year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given year is a leap year. Returns true if the given year is a leap year. To specify BC year numbers, 1 - year number must be given. For example, year BC 4 is specified as -3.", "history": "Added in API level 1", "FullName": "public boolean isLeapYear (int year)"}, "setFirstDayOfWeek(int)": {"Returns": [], "Parameters": [["int", "a Calendar day of the week."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the first day of the week for this Calendar.", "history": "Since: API Level 1", "FullName": "public void setFirstDayOfWeek (int value)"}, "setGregorianChange(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the given Gregorian cutover date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the GregorianCalendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian calendar. To obtain a pure Julian calendar, set the change date to Date(Long.MAX_VALUE). To obtain a pure Gregorian calendar, set the change date to Date(Long.MIN_VALUE).", "history": "Added in API level 1", "FullName": "public void setGregorianChange (Date date)"}, "toZonedDateTime()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a zoned date-time representing the same point on the time-line as this gregorian calendar"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar. Since this object supports a Julian-Gregorian cutover date and ZonedDateTime does not, it is possible that the resulting year, month and day will have different values. The result will represent the correct date in the ISO calendar system, which will also be the same value for Modified Julian Days.", "history": "Added in API level 26", "FullName": "public ZonedDateTime toZonedDateTime ()"}, "GregorianCalendar()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a default GregorianCalendar using the current time in the default time zone with the default @B_java#util#Locale#Category#FORMAT_E@ locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar ()"}, "roll(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the signed amount to add to field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": ["@B_java#util#GregorianCalendar#roll_E@", "@B_java#util#GregorianCalendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. This method calls @B_java#util#Calendar#complete_E@ before adding the amount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an IllegalArgumentException is thrown. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling roll(Calendar.MONTH, 8) sets the calendar to April 30, GregorianCalendar, the DAY_OF_MONTH field cannot be 31 in the month April. DAY_OF_MONTH is set to the closest possible value, 30. The YEAR field maintains the value of 1999 because it is a larger field than MONTH. Example: Consider a GregorianCalendar originally set to Sunday June 6, 1999. Calling roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Tuesday June 1, 1999, whereas calling add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week).", "history": "added in API level 1", "FullName": "public void roll (int field, int amount)"}, "getWeekYear()": {"Returns": [["int", "the week year represented by this GregorianCalendar. If the @B_java#util#Calendar#ERA_E@ value is @B_java#util#GregorianCalendar#BC_E@, the year is represented by 0 or a negative number: BC 1 is 0, BC 2 is -1, BC 3 is -2, and so on."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the calendar fields is invalid in non-lenient mode."]], "SeeAlso": ["@B_java#util#GregorianCalendar#isWeekDateSupported_E@", "@B_java#util#GregorianCalendar#getWeeksInWeekYear_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Returns the GregorianCalendar. The dates in the weeks between 1 and the maximum week number of the week year have the same week year value that may be one year before or after the @B_java#util#Calendar#YEAR_E@ (calendar year) value. This method calls @B_java#util#Calendar#complete_E@ before calculating the week year.", "history": "Added in API level 24", "FullName": "public int getWeekYear ()"}, "setTimeZone(java.util.TimeZone)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone with the given time zone value.", "history": "Added in API level 1", "FullName": "public void setTimeZone (TimeZone zone)"}, "GregorianCalendar(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field in the calendar."], ["int", "int: the value used to set the MINUTE calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.", "history": "added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth, int hourOfDay, int minute)"}, "GregorianCalendar(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the default time zone with the given locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (Locale aLocale)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is equal to obj; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#compareTo_E@"], "Permissions": [], "Description": "Compares this GregorianCalendar to the specified Object. The result is true if and only if the argument is a GregorianCalendar object that represents the same time value (millisecond offset from the Calendar parameters and Gregorian change date as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "from(java.time.ZonedDateTime)": {"Returns": [["@B_java#util#GregorianCalendar_E@", "the gregorian calendar representing the same point on the time-line as the zoned date-time provided"]], "Parameters": [["@B_java#time#ZonedDateTime_E@", "ZonedDateTime: the zoned date-time object to convert"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if zdt is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the zoned date-time is too large to represent as a GregorianCalendar"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object. Since ZonedDateTime does not support a Julian-Gregorian cutover date and uses ISO calendar system, the return GregorianCalendar is a pure Gregorian calendar and uses ISO 8601 standard for week definitions, which has MONDAY as the @B_java#util#Calendar#getFirstDayOfWeek_E@ and 4 as the value of the @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@. ZoneDateTime can store points on the time-line further in the future and further in the past than GregorianCalendar. In this scenario, this method will throw an IllegalArgumentException exception.", "history": "Added in API level 26", "FullName": "public static GregorianCalendar from (ZonedDateTime zdt)"}, "GregorianCalendar(java.util.TimeZone,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the given time zone."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the given time zone with the given locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (TimeZone zone, Locale aLocale)"}, "setMinimalDaysInFirstWeek(int)": {"Returns": [], "Parameters": [["int", "the minimal days in the first week of the year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimal days in the first week of the year.", "history": "Since: API Level 1", "FullName": "public void setMinimalDaysInFirstWeek (int value)"}, "GregorianCalendar(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field in the calendar."], ["int", "int: the value used to set the MINUTE calendar field in the calendar."], ["int", "int: the value used to set the SECOND calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.", "history": "added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)"}, "getLeastMaximum(int)": {"Returns": [["int", "the lowest maximum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field"]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMinimum_E@", "@B_java#util#GregorianCalendar#getMaximum_E@", "@B_java#util#GregorianCalendar#getGreatestMinimum_E@", "@B_java#util#GregorianCalendar#getActualMinimum_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance. The lowest maximum value is defined as the smallest value returned by @B_java#util#GregorianCalendar#getActualMaximum_E@ for any possible time value, taking into consideration the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods.", "history": "Added in API level 1", "FullName": "public int getLeastMaximum (int field)"}, "getGreatestMinimum(int)": {"Returns": [["int", "the highest minimum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMinimum_E@", "@B_java#util#GregorianCalendar#getMaximum_E@", "@B_java#util#GregorianCalendar#getLeastMaximum_E@", "@B_java#util#GregorianCalendar#getActualMinimum_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the highest minimum value for the given calendar field of this GregorianCalendar instance. The highest minimum value is defined as the largest value returned by @B_java#util#GregorianCalendar#getActualMinimum_E@ for any possible time value, taking into consideration the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods.", "history": "Added in API level 1", "FullName": "public int getGreatestMinimum (int field)"}, "getMaximum(int)": {"Returns": [["int", "the maximum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMinimum_E@", "@B_java#util#GregorianCalendar#getGreatestMinimum_E@", "@B_java#util#GregorianCalendar#getLeastMaximum_E@", "@B_java#util#GregorianCalendar#getActualMinimum_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the maximum value for the given calendar field of this GregorianCalendar instance. The maximum value is defined as the largest value returned by the @B_java#util#Calendar#get_E@ method for any possible time value, taking into consideration the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods.", "history": "Added in API level 1", "FullName": "public int getMaximum (int field)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a copy of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "roll(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["boolean", "boolean: indicates if the value of the specified calendar field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": ["@B_java#util#GregorianCalendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. Example: Consider a GregorianCalendar originally set to December 31, 1999. Calling @B_java#util#GregorianCalendar#roll_E@ sets the calendar to January 31, 1999. The YEAR field is unchanged because it is a larger field than MONTH.", "history": "Added in API level 1", "FullName": "public void roll (int field, boolean up)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the hash code for this GregorianCalendar object.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getMinimum(int)": {"Returns": [["int", "the minimum value for the given calendar field."]], "Parameters": [["int", "int: the calendar field."]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMaximum_E@", "@B_java#util#GregorianCalendar#getGreatestMinimum_E@", "@B_java#util#GregorianCalendar#getLeastMaximum_E@", "@B_java#util#GregorianCalendar#getActualMinimum_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the minimum value for the given calendar field of this GregorianCalendar instance. The minimum value is defined as the smallest value returned by the @B_java#util#Calendar#get_E@ method for any possible time value, taking into consideration the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods.", "history": "Added in API level 1", "FullName": "public int getMinimum (int field)"}, "roll(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the signed amount to add to field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": ["@B_java#util#GregorianCalendar#roll_E@", "@B_java#util#GregorianCalendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. This method calls @B_java#util#Calendar#complete_E@ before adding the amount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an IllegalArgumentException is thrown. Example: Consider a GregorianCalendar originally set to August 31, 1999. Calling roll(Calendar.MONTH, 8) sets the calendar to April 30, GregorianCalendar, the DAY_OF_MONTH field cannot be 31 in the month April. DAY_OF_MONTH is set to the closest possible value, 30. The YEAR field maintains the value of 1999 because it is a larger field than MONTH. Example: Consider a GregorianCalendar originally set to Sunday June 6, 1999. Calling roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Tuesday June 1, 1999, whereas calling add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Sunday May 30, 1999. This is because the roll rule imposes an additional constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken together with add rule 1, the resultant date must be between Tuesday June 1 and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value to Sunday (where Sunday is the first day of the week).", "history": "Added in API level 1", "FullName": "public void roll (int field, int amount)"}, "computeFields()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#complete_E@"], "Permissions": [], "Description": "Converts the time value (millisecond offset from the not recomputed first; to recompute the time, then the fields, call the complete method.", "history": "Added in API level 1", "FullName": "protected void computeFields ()"}, "getTimeZone()": {"Returns": [["@B_java#util#TimeZone_E@", "the time zone object associated with this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time zone.", "history": "Added in API level 1", "FullName": "public TimeZone getTimeZone ()"}, "GregorianCalendar(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date set in the default time zone with the default locale.", "history": "added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth)"}, "isWeekDateSupported()": {"Returns": [["boolean", "true (always)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getWeekYear_E@", "@B_java#util#GregorianCalendar#setWeekDate_E@", "@B_java#util#GregorianCalendar#getWeeksInWeekYear_E@"], "Permissions": [], "Description": "Returns true indicating this GregorianCalendar supports week dates.", "history": "Added in API level 24", "FullName": "public final boolean isWeekDateSupported ()"}, "add(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the amount of date or time to be added to the field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules. Add rule 1. The value of field after the call minus the value of field before the call is amount, modulo any overflow that has occurred in field. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range. Add rule 2. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. HOUR is a smaller field than DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.", "history": "Added in API level 1", "FullName": "public void add (int field, int amount)"}, "roll(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the time field."], ["boolean", "boolean: indicates if the value of the specified calendar field is to be rolled up or rolled down. Use true if rolling up, false otherwise."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": ["@B_java#util#GregorianCalendar#add_E@", "@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. Example: Consider a GregorianCalendar originally set to December 31, 1999. Calling @B_java#util#GregorianCalendar#roll_E@ sets the calendar to January 31, 1999. The YEAR field is unchanged because it is a larger field than MONTH.", "history": "added in API level 1", "FullName": "public void roll (int field, boolean up)"}, "getCalendarType()": {"Returns": [["@B_java#lang#String_E@", "\"gregory\""]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns \"gregory\" as the calendar type.", "history": "Added in API level 26", "FullName": "public String getCalendarType ()"}, "GregorianCalendar(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field in the calendar."], ["int", "int: the value used to set the MINUTE calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth, int hourOfDay, int minute)"}, "setWeekDate(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the given date specifiers is invalid, or if any of the calendar fields are inconsistent with the given date specifiers in non-lenient mode"]], "SeeAlso": ["@B_java#util#GregorianCalendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets this GregorianCalendar to the date given by the date specifiers - weekOfYear, and dayOfWeek. weekOfYear follows the dayOfWeek value must be one of the @B_java#util#Calendar#DAY_OF_WEEK_E@ values: @B_java#util#Calendar#SUNDAY_E@ to @B_java#util#Calendar#SATURDAY_E@. Note that the numeric day-of-week representation differs from the ISO 8601 standard, and that the weekOfYear numbering is compatible with the standard when getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4. Unlike the set method, all of the calendar fields and the instant of time value are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode.", "history": "Added in API level 24", "FullName": "public void setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "GregorianCalendar(java.util.TimeZone)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the given time zone with the default @B_java#util#Locale#Category#FORMAT_E@ locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (TimeZone zone)"}, "computeTime()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any calendar fields are invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Converts calendar field values to the time value (millisecond offset from the", "history": "Added in API level 1", "FullName": "protected void computeTime ()"}, "add(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field."], ["int", "int: the amount of date or time to be added to the field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is ZONE_OFFSET, DST_OFFSET, or unknown, or if any calendar fields have out-of-range values in non-lenient mode."]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules. Add rule 1. The value of field after the call minus the value of field before the call is amount, modulo any overflow that has occurred in field. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range. Add rule 2. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. HOUR is a smaller field than DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.", "history": "added in API level 1", "FullName": "public void add (int field, int amount)"}, "setWeekDate(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the given date specifiers is invalid, or if any of the calendar fields are inconsistent with the given date specifiers in non-lenient mode"]], "SeeAlso": ["@B_java#util#GregorianCalendar#isWeekDateSupported_E@", "@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets this GregorianCalendar to the date given by the date specifiers - weekOfYear, and dayOfWeek. weekOfYear follows the dayOfWeek value must be one of the @B_java#util#Calendar#DAY_OF_WEEK_E@ values: @B_java#util#Calendar#SUNDAY_E@ to @B_java#util#Calendar#SATURDAY_E@. Note that the numeric day-of-week representation differs from the ISO 8601 standard, and that the weekOfYear numbering is compatible with the standard when getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4. Unlike the set method, all of the calendar fields and the instant of time value are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode.", "history": "added in API level 24", "FullName": "public void setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "getWeeksInWeekYear()": {"Returns": [["int", "the number of weeks in the week year."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@", "@B_java#util#GregorianCalendar#getWeekYear_E@", "@B_java#util#GregorianCalendar#getActualMaximum_E@"], "Permissions": [], "Description": "Returns the number of weeks in the GregorianCalendar. For example, if this GregorianCalendar's date is December 31, 2008 with @B_java#util#GregorianCalendar#getActualMaximum_E@ will return 52 for the period: December 31, 2007 to December 28, 2008.", "history": "Added in API level 24", "FullName": "public int getWeeksInWeekYear ()"}, "GregorianCalendar(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date set in the default time zone with the default locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth)"}, "getActualMaximum(int)": {"Returns": [["int", "the maximum of the given field for the time value of this GregorianCalendar"]], "Parameters": [["int", "int: the calendar field"]], "Throws": [], "SeeAlso": ["@B_java#util#GregorianCalendar#getMinimum_E@", "@B_java#util#GregorianCalendar#getMaximum_E@", "@B_java#util#GregorianCalendar#getGreatestMinimum_E@", "@B_java#util#GregorianCalendar#getLeastMaximum_E@", "@B_java#util#GregorianCalendar#getActualMinimum_E@"], "Permissions": [], "Description": "Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the @B_java#util#Calendar#getFirstDayOfWeek_E@, @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@, @B_java#util#GregorianCalendar#getGregorianChange_E@ and @B_java#util#Calendar#getTimeZone_E@ methods. For example, if the date of this instance is February 1, 2004, the actual maximum value of the DAY_OF_MONTH field is 29 because 2004 is a leap year, and if the date of this instance is February 1, 2005, it's 28. This method calculates the maximum value of @B_java#util#Calendar#WEEK_OF_YEAR_E@ based on the @B_java#util#Calendar#YEAR_E@ (calendar year) value, not the @B_java#util#GregorianCalendar#getWeeksInWeekYear_E@ to get the maximum value of WEEK_OF_YEAR in the week year of this GregorianCalendar.", "history": "Added in API level 1", "FullName": "public int getActualMaximum (int field)"}, "GregorianCalendar(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR calendar field in the calendar."], ["int", "int: the value used to set the MONTH calendar field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DAY_OF_MONTH calendar field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY calendar field in the calendar."], ["int", "int: the value used to set the MINUTE calendar field in the calendar."], ["int", "int: the value used to set the SECOND calendar field in the calendar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale.", "history": "Added in API level 1", "FullName": "public GregorianCalendar (int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)"}}, "Inheritance": ["@B_java#util#Calendar_E@"], "ClassName": "java.util.GregorianCalendar", "ClassDesc": "GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world. GregorianCalendar is a hybrid calendar that supports both the Julian and Gregorian calendar systems with the support of a single discontinuity, which corresponds by default to the Gregorian date when the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling @B_java#util#GregorianCalendar#setGregorianChange_E@. Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models this correctly. Before the Gregorian cutover, GregorianCalendar implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. GregorianCalendar implements proleptic Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, GregorianCalendar may be used for all years to generate meaningful and consistent results. However, dates obtained using GregorianCalendar are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. Values calculated for the @B_java#util#Calendar#WEEK_OF_YEAR_E@ field range from 1 to 53. The first week of a calendar year is the earliest seven day period starting on @B_java#util#Calendar#getFirstDayOfWeek_E@ that contains at least @B_java#util#Calendar#getMinimalDaysInFirstWeek_E@ days from that year. It thus depends on the values of getMinimalDaysInFirstWeek(), getFirstDayOfWeek(), and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year (exclusive) are numbered sequentially from 2 to 52 or 53 (except for year(s) involved in the Julian-Gregorian transition). The getFirstDayOfWeek() and getMinimalDaysInFirstWeek() values are initialized using locale-dependent resources when constructing a GregorianCalendar. getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling @B_java#util#Calendar#setFirstDayOfWeek_E@ and @B_java#util#Calendar#setMinimalDaysInFirstWeek_E@. A WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value. Therefore, the first and last days of a week year may have different calendar year values. For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997 and their week year is 1997. Values calculated for the WEEK_OF_MONTH field range from 0 to 6. Week 1 of a month (the days with WEEK_OF_MONTH = 1) is the earliest set of at least getMinimalDaysInFirstWeek() contiguous days in that month, ending on the day before getFirstDayOfWeek(). Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on getFirstDayOfWeek(), and will not include days of the previous month. Days of a month before week 1 have a WEEK_OF_MONTH of 0. For example, if getFirstDayOfWeek() is SUNDAY and getMinimalDaysInFirstWeek() is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a WEEK_OF_MONTH of 1. Thursday, January 1 through Saturday, January 3 have a WEEK_OF_MONTH of 0. If getMinimalDaysInFirstWeek() is changed to 3, then January 1 through January 3 have a WEEK_OF_MONTH of 1. The clear method sets calendar field(s) undefined. GregorianCalendar uses the following default value for each calendar field if its value is undefined. Default values are not applicable for the fields not listed above."}