{"Functions": {"setText(java.text.CharacterIterator)": {"Returns": [], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: the new source string iterator for iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a new source string iterator for iteration, and reset the offset to the beginning of the text.", "history": "Added in API level 24", "FullName": "public void setText (CharacterIterator source)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the cursor to the beginning of the string. The next call to next() or previous() will return the first and last collation element in the string, respectively. If the RuleBasedCollator used by this iterator has had its attributes changed, calling reset() will reinitialize the iterator to use the new attributes.", "history": "Added in API level 24", "FullName": "public void reset ()"}, "next()": {"Returns": [["int", "the next collation element or NULLORDER if the end of the iteration has been reached."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the next collation element in the source string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as \"return the collation element [or ordering priority] of the next character in the string\". This function returns the collation element that the iterator is currently pointing to, and then updates the internal pointer to point to the next element.", "history": "Added in API level 24", "FullName": "public int next ()"}, "setText(android.icu.text.UCharacterIterator)": {"Returns": [], "Parameters": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator: the new source string iterator for iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a new source string iterator for iteration, and reset the offset to the beginning of the text. The source iterator's integrity will be preserved since a new copy will be created for use.", "history": "Added in API level 24", "FullName": "public void setText (UCharacterIterator source)"}, "getMaxExpansion(int)": {"Returns": [["int", "the maximum length of any expansion sequence ending with the specified collation element."]], "Parameters": [["int", "int: a collation element returned by previous() or next()."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum length of any expansion sequence that ends with the specified collation element. If there is no expansion with this collation element as the last element, returns 1.", "history": "Added in API level 24", "FullName": "public int getMaxExpansion (int ce)"}, "tertiaryOrder(int)": {"Returns": [["int", "the element's 8 bits tertiary order"]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the tertiary order of the specified collation element, i.e. the last 8 bits. This value is unsigned.", "history": "Added in API level 24", "FullName": "public static int tertiaryOrder (int ce)"}, "secondaryOrder(int)": {"Returns": [["int", "the element's 8 bits secondary order"]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the secondary order of the specified collation element, i.e. the 16th to 23th bits, inclusive. This value is unsigned.", "history": "Added in API level 24", "FullName": "public static int secondaryOrder (int ce)"}, "previous()": {"Returns": [["int", "the previous collation element, or NULLORDER when the start of the iteration has been reached."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the previous collation element in the source string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as \"return the collation element [or ordering priority] of the previous character in the string\". This function updates the iterator's internal pointer to point to the collation element preceding the one it's currently pointing to and then returns that element, while next() returns the current element and then updates the pointer.", "history": "Added in API level 24", "FullName": "public int previous ()"}, "setOffset(int)": {"Returns": [], "Parameters": [["int", "int: the character offset into the original source string to set. Note that this is not an offset into the corresponding sequence of collation elements."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the iterator to point to the collation element corresponding to the character at the specified offset. The value returned by the next call to next() will be the collation element corresponding to the characters at offset. If offset is in the middle of a contracting character sequence, the iterator is adjusted to the start of the contracting sequence. This means that getOffset() is not guaranteed to return the same value set by this method. If the decomposition mode is on, and offset is in the middle of a decomposible range of source text, the iterator may not return a correct result for the next forwards or backwards iteration. The user must ensure that the offset is not in the middle of a decomposible range.", "history": "Added in API level 24", "FullName": "public void setOffset (int newOffset)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to test if it is equals to this CollationElementIterator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests that argument object is equals to this CollationElementIterator. Iterators are equal if the objects uses the same RuleBasedCollator, the same source text and have the same current position in iteration.", "history": "Added in API level 24", "FullName": "public boolean equals (Object that)"}, "setText(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new source string for iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a new source string for iteration, and reset the offset to the beginning of the text.", "history": "Added in API level 24", "FullName": "public void setText (String source)"}, "getOffset()": {"Returns": [["int", "The character offset in the source string corresponding to the collation element that will be returned by the next call to next() or previous()."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character offset in the source string corresponding to the next collation element. I.e., getOffset() returns the position in the source string corresponding to the collation element that will be returned by the next call to next() or previous(). This value could be any of: The index of the setOffset(offset) sets the index in the middle of a contraction, getOffset() returns the index of the first character in the contraction, which may not be equal to the original offset that was set. Hence calling getOffset() immediately after setOffset(offset) does not guarantee that the original offset set will be returned.) If normalization is on, the index of the The length of the source string, if iteration has reached the end.", "history": "Added in API level 24", "FullName": "public int getOffset ()"}, "primaryOrder(int)": {"Returns": [["int", "the element's 16 bits primary order."]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the primary order of the specified collation element, i.e. the first 16 bits. This value is unsigned.", "history": "Added in API level 24", "FullName": "public static int primaryOrder (int ce)"}}, "Inheritance": [], "ClassName": "android.icu.text.CollationElementIterator", "ClassDesc": "CollationElementIterator is an iterator created by a RuleBasedCollator to walk through a string. The return result of each iteration is a 32-bit collation element (CE) that defines the ordering priority of the next character or sequence of characters in the source string. For illustration, consider the following in Slovak and in traditional Spanish collation: For collation ordering comparison, the collation element results can not be compared simply by using basic arithmetic operators, e.g. <, == or >, further processing has to be done. Details can be found in the ICU @B_android#icu#text#StringSearch_E@. To construct a CollationElementIterator object, users call the method getCollationElementIterator() on a RuleBasedCollator that defines the desired sorting order. Example: The method next() returns the collation order of the next character based on the comparison level of the collator. The method previous() returns the collation order of the previous character based on the comparison level of the collator. The Collation Element Iterator moves only in one direction between calls to reset(), setOffset(), or setText(). That is, next() and previous() can not be inter-used. Whenever previous() is to be called after next() or vice versa, reset(), setOffset() or setText() has to be called first to reset the status, shifting current position to either the end or the start of the string (reset() or setText()), or the specified position (setOffset()). Hence at the next call of next() or previous(), the first or last collation order, or collation order at the specified position will be returned. If a change of direction is done without one of these calls, the result is undefined. This class is not subclassable."}