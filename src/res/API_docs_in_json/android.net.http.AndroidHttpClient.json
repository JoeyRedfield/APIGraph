{"Functions": {"execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the response to the request. This is always a final response, never an intermediate response with an 1xx status code. Whether redirects or authentication challenges will be returned or handled automatically depends on the implementation and configuration of this client."]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context to use for the execution, or null to use the default context"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request to the target using the given context.", "history": "Added in API level 8", "FullName": "public HttpResponse execute (HttpHost target, HttpRequest request, HttpContext context)"}, "newInstance(java.lang.String, android.content.Context)": {"Returns": [["", "AndroidHttpClient for you to use for all your requests."]], "Parameters": [["@B_java#lang#String_E@", "to report in your HTTP requests"], ["@B_android#content#Context_E@", "to use for caching SSL sessions (may be null for no caching)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new HttpClient with reasonable defaults (which you can update).", "history": "Added in API level 8", "FullName": "public static AndroidHttpClient newInstance (String userAgent, Context context)"}, "execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>)": {"Returns": [["", "the response object as generated by the response handler."]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"], ["@B_org#apache#http#client#ResponseHandler_E@", "the response handler"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#client#ClientProtocolException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request to the target using the default context and processes the response using the given response handler.", "history": "Added in API level 8", "FullName": "public T execute (HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler)"}, "newInstance(java.lang.String)": {"Returns": [["", "AndroidHttpClient for you to use for all your requests."]], "Parameters": [["@B_java#lang#String_E@", "to report in your HTTP requests."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new HttpClient with reasonable defaults (which you can update).", "history": "Added in API level 8", "FullName": "public static AndroidHttpClient newInstance (String userAgent)"}, "getCompressedEntity(byte[], android.content.ContentResolver)": {"Returns": [["", "Entity holding the data"]], "Parameters": [["byte[]", "The bytes to compress"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Compress data to send to server. Creates a Http Entity holding the gzipped data. The data will not be compressed if it is too short.", "history": "Added in API level 8", "FullName": "public static AbstractHttpEntity getCompressedEntity (byte[] data, ContentResolver resolver)"}, "execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>)": {"Returns": [["", "the response object as generated by the response handler."]], "Parameters": [["@B_org#apache#http#client#methods#HttpUriRequest_E@", "the request to execute"], ["@B_org#apache#http#client#ResponseHandler_E@", "the response handler"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#client#ClientProtocolException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request using the default context and processes the response using the given response handler.", "history": "Added in API level 8", "FullName": "public T execute (HttpUriRequest request, ResponseHandler<? extends T> responseHandler)"}, "parseDate(java.lang.String)": {"Returns": [["", "the number of milliseconds since Jan. 1, 1970, midnight GMT."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if dateString is not a date or of an unsupported format."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the date of the given HTTP date string. This method can identify and parse the date formats emitted by common HTTP servers, such as", "history": "Added in API level 8", "FullName": "public static long parseDate (String dateString)"}, "modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpRequest_E@", "the request to modify"]], "Throws": [], "SeeAlso": ["@B_android#net#http#AndroidHttpClient#getUngzippedContent_E@"], "Permissions": [], "Description": "Modifies a request to indicate to the server that we would like a gzipped response. (Uses the \"Accept-Encoding\" HTTP header.)", "history": "Added in API level 8", "FullName": "public static void modifyRequestToAcceptGzipResponse (HttpRequest request)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Release resources associated with this client. You must call this, or significant resources (sockets and memory) may be leaked.", "history": "Added in API level 8", "FullName": "public void close ()"}, "execute(org.apache.http.client.methods.HttpUriRequest)": {"Returns": [["", "the response to the request. This is always a final response, never an intermediate response with an 1xx status code. Whether redirects or authentication challenges will be returned or handled automatically depends on the implementation and configuration of this client."]], "Parameters": [["@B_org#apache#http#client#methods#HttpUriRequest_E@", "the request to execute"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request using the default context.", "history": "Added in API level 8", "FullName": "public HttpResponse execute (HttpUriRequest request)"}, "execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the response object as generated by the response handler."]], "Parameters": [["@B_org#apache#http#client#methods#HttpUriRequest_E@", "the request to execute"], ["@B_org#apache#http#client#ResponseHandler_E@", "the response handler"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#client#ClientProtocolException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request using the given context and processes the response using the given response handler.", "history": "Added in API level 8", "FullName": "public T execute (HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)"}, "disableCurlLogging()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables cURL logging for this client.", "history": "Added in API level 8", "FullName": "public void disableCurlLogging ()"}, "execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the response to the request. This is always a final response, never an intermediate response with an 1xx status code. Whether redirects or authentication challenges will be returned or handled automatically depends on the implementation and configuration of this client."]], "Parameters": [["@B_org#apache#http#client#methods#HttpUriRequest_E@", "the request to execute"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context to use for the execution, or null to use the default context"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request using the given context. The route to the target will be determined by the HTTP client.", "history": "Added in API level 8", "FullName": "public HttpResponse execute (HttpUriRequest request, HttpContext context)"}, "getMinGzipSize(android.content.ContentResolver)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the minimum size for compressing data. Shorter data will not be compressed.", "history": "Added in API level 8", "FullName": "public static long getMinGzipSize (ContentResolver resolver)"}, "getUngzippedContent(org.apache.http.HttpEntity)": {"Returns": [["", "the input stream to read from"]], "Parameters": [["@B_org#apache#http#HttpEntity_E@", "the entity whose content should be read"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the input stream from a response entity. If the entity is gzipped then this will get a stream over the uncompressed data.", "history": "Added in API level 8", "FullName": "public static InputStream getUngzippedContent (HttpEntity entity)"}, "enableCurlLogging(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "to log messages with"], ["int", "at which to log messages (see @B_android#util#Log_E@)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables cURL request logging for this client.", "history": "Added in API level 8", "FullName": "public void enableCurlLogging (String name, int level)"}, "execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)": {"Returns": [["", "the response to the request. This is always a final response, never an intermediate response with an 1xx status code. Whether redirects or authentication challenges will be returned or handled automatically depends on the implementation and configuration of this client."]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request to the target using the default context.", "history": "Added in API level 8", "FullName": "public HttpResponse execute (HttpHost target, HttpRequest request)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Added in API level 8", "FullName": "protected void finalize ()"}, "getConnectionManager()": {"Returns": [["", "the connection manager"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the connection manager used by this client.", "history": "Added in API level 8", "FullName": "public ClientConnectionManager getConnectionManager ()"}, "getParams()": {"Returns": [["", "the default parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the parameters for this client. These parameters will become defaults for all requests being executed with this client, and for the parameters of dependent objects in this client.", "history": "Added in API level 8", "FullName": "public HttpParams getParams ()"}, "execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the response object as generated by the response handler."]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"], ["@B_org#apache#http#client#ResponseHandler_E@", "the response handler"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context to use for the execution, or null to use the default context"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#client#ClientProtocolException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request to the target using the given context and processes the response using the given response handler.", "history": "Added in API level 8", "FullName": "public T execute (HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)"}}, "Inheritance": [], "ClassName": "android.net.http.AndroidHttpClient", "ClassDesc": "Please use @B_java#net#URLConnection_E@ and friends instead. The Apache HTTP client is no longer maintained and may be removed in a future release. Please visit Implementation of the Apache @B_org#apache#http#impl#client#DefaultHttpClient_E@ that is configured with reasonable default settings and registered schemes for Android. Don't create this directly, use the @B_android#net#http#AndroidHttpClient#newInstance_E@ factory method. This client processes cookies but does not retain them by default. To retain cookies, simply add a cookie store to the HttpContext:"}