{"Functions": {"HttpRoute(org.apache.http.HttpHost)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the host to which to route"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new direct insecure route.", "history": "Added in API level 1", "FullName": "public HttpRoute (HttpHost target)"}, "getHopTarget(int)": {"Returns": [["", "the target of the given hop"]], "Parameters": [["int", "index of the hop for which to get the target, 0 for first"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the target of a hop in this route. The target of the last hop is the @B_org#apache#http#conn#routing#RouteInfo#getTargetHost_E@, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host.", "history": "Added in API level 1", "FullName": "public final HttpHost getHopTarget (int hop)"}, "getLayerType()": {"Returns": [["", "the layering type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the layering type of this route. In the presence of proxies, only layering over an end-to-end tunnel is considered.", "history": "Added in API level 1", "FullName": "public final RouteInfo.LayerType getLayerType ()"}, "getLocalAddress()": {"Returns": [["", "the local address, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the local address to connect from.", "history": "Added in API level 1", "FullName": "public final InetAddress getLocalAddress ()"}, "getTunnelType()": {"Returns": [["", "the tunnelling type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the tunnel type of this route. If there is a proxy chain, only end-to-end tunnels are considered.", "history": "Added in API level 1", "FullName": "public final RouteInfo.TunnelType getTunnelType ()"}, "isLayered()": {"Returns": [["", "true if layered, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route includes a layered protocol. In the presence of proxies, only layering over an end-to-end tunnel is considered.", "history": "Added in API level 1", "FullName": "public final boolean isLayered ()"}, "getProxyHost()": {"Returns": [["", "the first proxy in the proxy chain, or null if this route is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the first proxy host.", "history": "Added in API level 1", "FullName": "public final HttpHost getProxyHost ()"}, "toString()": {"Returns": [["", "a human-readable representation of this route"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a description of this route.", "history": "Added in API level 1", "FullName": "public final String toString ()"}, "getHopCount()": {"Returns": [["", "the number of hops in this route"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the number of hops in this route. A direct route has one hop. A route through a proxy has two hops. A route through a chain of", "history": "Added in API level 1", "FullName": "public final int getHopCount ()"}, "HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, boolean)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the host to which to route"], ["@B_java#net#InetAddress_E@", "the local address to route from, or null for the default"], ["boolean", "true if the route is (to be) secure, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new direct route. That is a route without a proxy.", "history": "Added in API level 1", "FullName": "public HttpRoute (HttpHost target, InetAddress local, boolean secure)"}, "isTunnelled()": {"Returns": [["", "true if tunnelled end-to-end through at least one proxy, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route is tunnelled through a proxy. If there is a proxy chain, only end-to-end tunnels are considered.", "history": "Added in API level 1", "FullName": "public final boolean isTunnelled ()"}, "HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the host to which to route"], ["@B_java#net#InetAddress_E@", "the local address to route from, or null for the default"], ["@B_org#apache#http#HttpHost_E@", "the proxy to use, or null for a direct route"], ["boolean", "true if the route is (to be) secure, false otherwise"], ["@B_org#apache#http#conn#routing#RouteInfo#TunnelType_E@", "true if the route is (to be) tunnelled via the proxy, false otherwise"], ["@B_org#apache#http#conn#routing#RouteInfo#LayerType_E@", "true if the route includes a layered protocol, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new route with at most one proxy.", "history": "Added in API level 1", "FullName": "public HttpRoute (HttpHost target, InetAddress local, HttpHost proxy, boolean secure, RouteInfo.TunnelType tunnelled, RouteInfo.LayerType layered)"}, "getTargetHost()": {"Returns": [["", "the target host"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the target host.", "history": "Added in API level 1", "FullName": "public final HttpHost getTargetHost ()"}, "equals(java.lang.Object)": {"Returns": [["", "true if the argument is the same route, false"]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this route to another.", "history": "Added in API level 1", "FullName": "public final boolean equals (Object o)"}, "HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the host to which to route"], ["@B_java#net#InetAddress_E@", "the local address to route from, or null for the default"], ["@B_org#apache#http#HttpHost_E@", "the proxy to use"], ["boolean", "true if the route is (to be) secure, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new route through a proxy. When using this constructor, the proxy MUST be given. For convenience, it is assumed that a secure connection will be layered over a tunnel through the proxy.", "history": "Added in API level 1", "FullName": "public HttpRoute (HttpHost target, InetAddress local, HttpHost proxy, boolean secure)"}, "HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the host to which to route"], ["@B_java#net#InetAddress_E@", "the local address to route from, or null for the default"], ["@B_org#apache#http#HttpHost_E@", "the proxy chain to use, or null for a direct route"], ["boolean", "true if the route is (to be) secure, false otherwise"], ["@B_org#apache#http#conn#routing#RouteInfo#TunnelType_E@", "the tunnel type of this route"], ["@B_org#apache#http#conn#routing#RouteInfo#LayerType_E@", "the layering type of this route"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new route with all attributes specified explicitly.", "history": "Added in API level 1", "FullName": "public HttpRoute (HttpHost target, InetAddress local, HttpHost[] proxies, boolean secure, RouteInfo.TunnelType tunnelled, RouteInfo.LayerType layered)"}, "clone()": {"Returns": [["", "a copy of this object."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this Object. The default implementation returns a so-called \"shallow\" copy: It creates a new instance of the same class and then copies the field values (including object references) from this instance to the new instance. A \"deep\" copy, in contrast, would also recursively clone nested objects. A subclass that needs to implement this kind of cloning should call super.clone() to create the new instance and then create deep copies of the nested, mutable objects.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "isSecure()": {"Returns": [["", "true if secure, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route is secure.", "history": "Added in API level 1", "FullName": "public final boolean isSecure ()"}, "hashCode()": {"Returns": [["", "the hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a hash code for this route.", "history": "Added in API level 1", "FullName": "public final int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.routing.HttpRoute", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit The route for a request. Instances of this class are unmodifiable and therefore suitable for use as lookup keys."}