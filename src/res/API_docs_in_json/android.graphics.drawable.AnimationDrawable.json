{"Functions": {"getNumberOfFrames()": {"Returns": [["int", "The number of frames in the animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getNumberOfFrames ()"}, "addFrame(android.graphics.drawable.Drawable,int)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The frame to add This value must never be null."], ["int", "int: How long in milliseconds the frame should appear"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a frame to the animation", "history": "Added in API level 1", "FullName": "public void addFrame (Drawable frame, int duration)"}, "unscheduleSelf(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The runnable that you no longer want called. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable unscheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 1", "FullName": "public void unscheduleSelf (Runnable what)"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "true if the new visibility is different than its previous state"]], "Parameters": [["boolean", "boolean: true if visible, false otherwise"], ["boolean", "boolean: when visible, true to force the animation to restart from the first frame"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this AnimationDrawable is visible. When the drawable becomes invisible, it will pause its animation. A subsequent change to visible with restart set to true will restart the animation from the first frame. If restart is false, the drawable will resume from the most recent frame. If the drawable has already reached the last frame, it will then loop back to the first frame, unless it's a one shot drawable (set through @B_android#graphics#drawable#AnimationDrawable#setOneShot_E@), in which case, it will stay on the last frame.", "history": "Added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "isOneShot()": {"Returns": [["boolean", "True of the animation will play once, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isOneShot ()"}, "getFrame(int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The Drawable at the specified frame index"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Drawable getFrame (int index)"}, "isRunning()": {"Returns": [["boolean", "true if the animation is running, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the animation is currently running or not.", "history": "Added in API level 1", "FullName": "public boolean isRunning ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#AnimationDrawable#isRunning_E@", "@B_android#graphics#drawable#AnimationDrawable#stop_E@"], "Permissions": [], "Description": "Starts the animation from the first frame, looping if necessary. This method has no effect if the animation is running. @B_android#app#Activity#onCreate_E@ method of your activity, because the @B_android#graphics#drawable#AnimationDrawable_E@ is not yet fully attached to the window. If you want to play the animation immediately without requiring interaction, then you might want to call it from the @B_android#app#Activity#onWindowFocusChanged_E@ method in your activity, which will get called when Android brings your window into focus.", "history": "Added in API level 1", "FullName": "public void start ()"}, "run()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#AnimationDrawable#start_E@"], "Permissions": [], "Description": "This method exists for implementation purpose only and should not be called directly. Invoke @B_android#graphics#drawable#AnimationDrawable#start_E@ instead.", "history": "Added in API level 1", "FullName": "public void run ()"}, "addFrame(android.graphics.drawable.Drawable, int)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The frame to addThis value must never be null."], ["int", "int: How long in milliseconds the frame should appear"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a frame to the animation", "history": "added in API level 1", "FullName": "public void addFrame (Drawable frame, int duration)"}, "setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#DrawableContainer#DrawableContainerState_E@", "DrawableContainer.DrawableContainerState: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void setConstantState (DrawableContainer.DrawableContainerState state)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "getDuration(int)": {"Returns": [["int", "The duration in milliseconds of the frame at the specified index"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getDuration (int i)"}, "AnimationDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AnimationDrawable ()"}, "setOneShot(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Pass true if the animation should only play once"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the animation should play once or repeat.", "history": "Added in API level 1", "FullName": "public void setOneShot (boolean oneShot)"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "true if the new visibility is different than its previous state"]], "Parameters": [["boolean", "boolean: true if visible, false otherwise"], ["boolean", "boolean: when visible, true to force the animation to restart from the first frame"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this AnimationDrawable is visible. When the drawable becomes invisible, it will pause its animation. A subsequent change to visible with restart set to true will restart the animation from the first frame. If restart is false, the drawable will resume from the most recent frame. If the drawable has already reached the last frame, it will then loop back to the first frame, unless it's a one shot drawable (set through @B_android#graphics#drawable#AnimationDrawable#setOneShot_E@), in which case, it will stay on the last frame.", "history": "added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#AnimationDrawable#isRunning_E@", "@B_android#graphics#drawable#AnimationDrawable#start_E@"], "Permissions": [], "Description": "Stops the animation at the current frame. This method has no effect if the animation is not running.", "history": "Added in API level 1", "FullName": "public void stop ()"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@", "@B_android#graphics#drawable#DrawableContainer_E@"], "ClassName": "android.graphics.drawable.AnimationDrawable", "ClassDesc": "An object used to create frame-by-frame animations, defined by a series of Drawable objects, which can be used as a View object's background. The simplest way to create a frame-by-frame animation is to define the animation in an XML file, placed in the res/drawable/ folder, and set it as the background to a View object. Then, call @B_android#graphics#drawable#AnimationDrawable#start_E@ to run the animation. An AnimationDrawable defined in XML consists of a single <animation-list> element and a series of nested <item> tags. Each item defines a frame of the animation. See the example below. spin_animation.xml file in res/drawable/ folder: Here is the code to load and play this animation."}