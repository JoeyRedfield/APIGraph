{"Functions": {"LinkedHashSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty linked hash set with the default initial capacity (16) and load factor (0.75).", "history": "Added in API level 1", "FullName": "public LinkedHashSet ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast Spliterator over the elements in this set. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#DISTINCT_E@, and ORDERED. Implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "LinkedHashSet(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the linked hash set"], ["float", "float: the load factor of the linked hash set"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty linked hash set with the specified initial capacity and load factor.", "history": "Added in API level 1", "FullName": "public LinkedHashSet (int initialCapacity, float loadFactor)"}, "LinkedHashSet(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the LinkedHashSet"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty linked hash set with the specified initial capacity and the default load factor (0.75).", "history": "Added in API level 1", "FullName": "public LinkedHashSet (int initialCapacity)"}, "LinkedHashSet(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the linked hash set"], ["float", "float: the load factor of the linked hash set"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty linked hash set with the specified initial capacity and load factor.", "history": "added in API level 1", "FullName": "public LinkedHashSet (int initialCapacity, float loadFactor)"}, "LinkedHashSet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new linked hash set with the same elements as the specified collection. The linked hash set is created with an initial capacity sufficient to hold the elements in the specified collection and the default load factor (0.75).", "history": "Added in API level 1", "FullName": "public LinkedHashSet (Collection<? extends E> c)"}, "LinkedHashSet(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new linked hash set with the same elements as the specified collection. The linked hash set is created with an initial capacity sufficient to hold the elements in the specified collection and the default load factor (0.75).", "history": "added in API level 1", "FullName": "public LinkedHashSet (Collection<? extends E> c)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractSet_E@", "@B_java#util#HashSet_E@"], "ClassName": "java.util.LinkedHashSet<E>", "ClassDesc": "Hash table and linked list implementation of the This implementation spares its clients from the unspecified, generally chaotic ordering provided by @B_java#util#HashSet_E@, without incurring the increased cost associated with @B_java#util#TreeSet_E@. It can be used to produce a copy of a set that has the same order as the original, regardless of the original set's implementation: This class provides all of the optional A linked hash set has two parameters that affect its performance: must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be \"wrapped\" using the @B_java#util#Collections#synchronizedSet_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the set: The iterators returned by this class's fail-fast: if the set is modified at any time after the iterator is created, in any way except through the iterator's own @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw This class is a member of the"}