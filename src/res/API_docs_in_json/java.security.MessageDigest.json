{"Functions": {"digest(byte[])": {"Returns": [["byte[]", "the array of bytes for the resulting hash value."]], "Parameters": [["byte[]", "byte: the input to be updated before the digest is completed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls @B_java#security#MessageDigest#update_E@, passing the update method, then calls @B_java#security#MessageDigest#digest_E@.", "history": "Added in API level 1", "FullName": "public byte[] digest (byte[] input)"}, "isEqual(byte[], byte[])": {"Returns": [["boolean", "true if the digests are equal, false otherwise."]], "Parameters": [["byte[]", "byte: one of the digests to compare."], ["byte[]", "byte: the other digest to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two digests for equality. Does a simple byte compare.", "history": "added in API level 1", "FullName": "public static boolean isEqual (byte[] digesta, byte[] digestb)"}, "update(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the digest using the specified ByteBuffer. The digest is updated using the input.remaining() bytes starting at input.position(). Upon return, the buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 1", "FullName": "public final void update (ByteBuffer input)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this message digest object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this message digest object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#MessageDigest_E@", "a MessageDigest object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the MessageDigest section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MessageDigestSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static MessageDigest getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#MessageDigest_E@", "a Message Digest object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the MessageDigest section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a MessageDigestSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a MessageDigest object that implements the specified digest algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static MessageDigest getInstance (String algorithm)"}, "digest()": {"Returns": [["byte[]", "the array of bytes for the resulting hash value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.", "history": "Added in API level 1", "FullName": "public byte[] digest ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#MessageDigest_E@", "a MessageDigest object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the MessageDigest section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MessageDigestSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static MessageDigest getInstance (String algorithm, String provider)"}, "MessageDigest(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the digest algorithm. See the MessageDigest section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a message digest with the specified algorithm name.", "history": "Added in API level 1", "FullName": "protected MessageDigest (String algorithm)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the digest for further use.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "update(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified array of bytes.", "history": "Added in API level 1", "FullName": "public void update (byte[] input)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone if the implementation is cloneable."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "if this is called on an implementation that does not support Cloneable."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone if the implementation is cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getDigestLength()": {"Returns": [["int", "the digest length in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.", "history": "Added in API level 1", "FullName": "public final int getDigestLength ()"}, "digest(byte[], int, int)": {"Returns": [["int", "the number of bytes placed into buf"]], "Parameters": [["byte[]", "byte: output buffer for the computed digest"], ["int", "int: offset into the output buffer to begin storing the digest"], ["int", "int: number of bytes within buf allotted for the digest"]], "Throws": [["@B_java#security#DigestException_E@", "if an error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.", "history": "added in API level 1", "FullName": "public int digest (byte[] buf, int offset, int len)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the name of the algorithm"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string that identifies the algorithm, independent of implementation details. The name should be a standard Java Security name (such as \"SHA\", \"MD5\", and so on). See the MessageDigest section in the", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "isEqual(byte[],byte[])": {"Returns": [["boolean", "true if the digests are equal, false otherwise."]], "Parameters": [["byte[]", "byte: one of the digests to compare."], ["byte[]", "byte: the other digest to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two digests for equality. Does a simple byte compare.", "history": "Added in API level 1", "FullName": "public static boolean isEqual (byte[] digesta, byte[] digestb)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#MessageDigest_E@", "a MessageDigest object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the MessageDigest section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MessageDigestSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static MessageDigest getInstance (String algorithm, Provider provider)"}, "update(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified array of bytes, starting at the specified offset.", "history": "Added in API level 1", "FullName": "public void update (byte[] input, int offset, int len)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this message digest object.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "update(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified array of bytes, starting at the specified offset.", "history": "added in API level 1", "FullName": "public void update (byte[] input, int offset, int len)"}, "digest(byte[],int,int)": {"Returns": [["int", "the number of bytes placed into buf"]], "Parameters": [["byte[]", "byte: output buffer for the computed digest"], ["int", "int: offset into the output buffer to begin storing the digest"], ["int", "int: number of bytes within buf allotted for the digest"]], "Throws": [["@B_java#security#DigestException_E@", "if an error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.", "history": "Added in API level 1", "FullName": "public int digest (byte[] buf, int offset, int len)"}, "update(byte)": {"Returns": [], "Parameters": [["byte", "byte: the byte with which to update the digest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the digest using the specified byte.", "history": "Added in API level 1", "FullName": "public void update (byte input)"}}, "Inheritance": ["@B_java#security#MessageDigestSpi_E@"], "ClassName": "java.security.MessageDigest", "ClassDesc": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. A MessageDigest object starts out initialized. The data is processed through it using the @B_java#security#MessageDigest#update_E@ methods. At any point @B_java#security#MessageDigest#reset_E@ can be called to reset the digest. Once all the data to be updated has been updated, one of the @B_java#security#MessageDigest#digest_E@ methods should be called to complete the hash computation. The digest method can be called once for a given number of updates. After digest has been called, the MessageDigest object is reset to its initialized state. Implementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException: Note that if a given implementation is not cloneable, it is still possible to compute intermediate digests by instantiating several instances, if the number of digests is known in advance. Note that this class is abstract and extends from MessageDigestSpi for historical reasons. Application developers should only take notice of the methods defined in this MessageDigest class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of message digest algorithms. Android provides the following MessageDigest algorithms:"}