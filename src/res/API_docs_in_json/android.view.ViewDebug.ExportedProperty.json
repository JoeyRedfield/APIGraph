{"Functions": {"prefix()": {"Returns": [["@B_java#lang#String_E@", "a prefix as a String"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewDebug#ExportedProperty#deepExport_E@"], "Permissions": [], "Description": "The prefix to use on child properties when deep export is enabled", "history": "Added in API level 1", "FullName": "public String prefix ()"}, "formatToHexString()": {"Returns": [["boolean", "true if the supported values should be formatted as a hex string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not to format an int or byte value as a hex string.", "history": "Added in API level 21", "FullName": "public boolean formatToHexString ()"}, "resolveId()": {"Returns": [["boolean", "true if the property's value must be transformed into an Android resource name, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When resolveId is true, and if the annotated field/method return value is an int, the value is converted to an Android's resource name.", "history": "Added in API level 1", "FullName": "public boolean resolveId ()"}, "deepExport()": {"Returns": [["boolean", "true if the properties of this property should be dumped"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewDebug#ExportedProperty#prefix_E@"], "Permissions": [], "Description": "When deep export is turned on, this property is not dumped. Instead, the properties contained in this property are dumped. Each child property is prefixed with the name of this property.", "history": "Added in API level 1", "FullName": "public boolean deepExport ()"}, "indexMapping()": {"Returns": [["@B_android#view#ViewDebug#IntToString_E@", "An array of int to String mappings"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewDebug#IntToString_E@", "@B_android#view#ViewDebug#ExportedProperty#mapping_E@"], "Permissions": [], "Description": "A mapping can be defined to map array indices to specific strings. A mapping can be used to see human readable values for the indices of an array:", "history": "Added in API level 3", "FullName": "public IntToString[] indexMapping ()"}, "mapping()": {"Returns": [["@B_android#view#ViewDebug#IntToString_E@", "An array of int to String mappings"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewDebug#IntToString_E@"], "Permissions": [], "Description": "A mapping can be defined to map int values to specific strings. For instance, View.getVisibility() returns 0, 4 or 8. However, these values actually mean VISIBLE, INVISIBLE and GONE. A mapping can be used to see these human readable values:", "history": "Added in API level 1", "FullName": "public IntToString[] mapping ()"}, "hasAdjacentMapping()": {"Returns": [["boolean", "true if the key to value mappings are held in adjacent indices."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the key to value mappings are held in adjacent indices. Note: Applies only to fields and methods that return String[].", "history": "Added in API level 21", "FullName": "public boolean hasAdjacentMapping ()"}, "category()": {"Returns": [["@B_java#lang#String_E@", "the category as String"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the category the property falls into, such as measurement, layout, drawing, etc.", "history": "Added in API level 9", "FullName": "public String category ()"}, "flagMapping()": {"Returns": [["@B_android#view#ViewDebug#FlagToString_E@", "An array of int to String mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A flags mapping can be defined to map flags encoded in an integer to specific strings. A mapping can be used to see human readable values for the flags of an integer:", "history": "Added in API level 4", "FullName": "public FlagToString[] flagMapping ()"}}, "Inheritance": [], "ClassName": "android.view.ViewDebug.ExportedProperty", "ClassDesc": "This annotation can be used to mark fields and methods to be dumped by the view server. Only non-void methods with no arguments can be annotated by this annotation."}