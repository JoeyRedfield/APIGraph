{"Functions": {"minusSeconds(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the seconds subtracted, not null"]], "Parameters": [["long", "long: the seconds to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of seconds subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusSeconds (long seconds)"}, "withMinute(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested minute, not null"]], "Parameters": [["int", "int: the minute-of-hour to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the minute value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the minute-of-hour altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withMinute (int minute)"}, "withYear(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested year, not null"]], "Parameters": [["int", "int: the year to set in the result, from MIN_YEAR to MAX_YEAR"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the year altered. The time and offset do not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withYear (int year)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented by @B_java#time#LocalDateTime#plus_E@. The offset is not part of the calculation and will be unchanged in the result. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plus (long amountToAdd, TemporalUnit unit)"}, "toZonedDateTime()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a zoned date-time representing the same local date-time and offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to a ZonedDateTime using the offset as the zone ID. This creates the simplest possible ZonedDateTime using the offset as the zone ID. To control the time-zone used, see @B_java#time#OffsetDateTime#atZoneSameInstant_E@ and @B_java#time#OffsetDateTime#atZoneSimilarLocal_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime toZonedDateTime ()"}, "getMonth()": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#OffsetDateTime#getMonthValue_E@"], "Permissions": [], "Description": "Gets the month-of-year field using the Month enum. This method returns the enum @B_java#time#Month_E@ for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#Month#getValue_E@.", "history": "Added in API level 26", "FullName": "public Month getMonth ()"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalTime part of this date-time. This returns a LocalTime with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public LocalTime toLocalTime ()"}, "of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the local date, not null"], ["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a date, time and offset. This creates an offset date-time with the specified local date, time and offset.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime of (LocalDate date, LocalTime time, ZoneOffset offset)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#OffsetDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public OffsetDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "plusSeconds(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the seconds added, not null"]], "Parameters": [["long", "long: the seconds to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of seconds added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusSeconds (long seconds)"}, "plusMonths(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the months added, not null"]], "Parameters": [["long", "long: the months to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of months added. This method adds the specified amount to the months field in three steps: For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusMonths (long months)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as a long. This queries this date-time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetDateTime#isSupported_E@ will return valid values based on this date-time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the current date-time, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the specified clock. This will query the specified clock to obtain the current date-time. The offset will be calculated from the time-zone in the clock. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime now (Clock clock)"}, "minusNanos(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the nanoseconds subtracted, not null"]], "Parameters": [["long", "long: the nanos to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusNanos (long nanos)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date-time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to another date-time. The comparison is based on the local date-time and the offset. To compare for the same instant on the time-line, use @B_java#time#OffsetDateTime#isEqual_E@. Only objects of type OffsetDateTime are compared, other types return false.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "toInstant()": {"Returns": [["@B_java#time#Instant_E@", "an Instant representing the same instant, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to an Instant. This returns an Instant representing the same point on the time-line as this date-time.", "history": "Added in API level 26", "FullName": "public Instant toInstant ()"}, "getDayOfMonth()": {"Returns": [["int", "the day-of-month, from 1 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.", "history": "Added in API level 26", "FullName": "public int getDayOfMonth ()"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns an OffsetDateTime, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#OffsetDateTime#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minus (TemporalAmount amountToSubtract)"}, "compareTo(java.time.OffsetDateTime)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#OffsetDateTime_E@", "OffsetDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date-time to another date-time. The comparison is based on the instant then on the local date-time. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. For example, the following is the comparator order: equals().", "history": "Added in API level 26", "FullName": "public int compareTo (OffsetDateTime other)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns an OffsetDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The INSTANT_SECONDS field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a DateTimeException will be thrown. The OFFSET_SECONDS field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#OffsetDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDateTime#with_E@. In this case, the offset is not part of the calculation and will be unchanged. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime with (TemporalField field, long newValue)"}, "withDayOfYear(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date with the requested day, not null"]], "Parameters": [["int", "int: the day-of-year to set in the result, from 1 to 365-366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-year value is invalid, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the day-of-year altered. The time and offset do not affect the calculation and will be the same in the result. If the resulting OffsetDateTime is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withDayOfYear (int dayOfYear)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date-time.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "withHour(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested hour, not null"]], "Parameters": [["int", "int: the hour-of-day to set in the result, from 0 to 23"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the hour value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the hour-of-day altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withHour (int hour)"}, "withSecond(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested second, not null"]], "Parameters": [["int", "int: the second-of-minute to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the second-of-minute altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withSecond (int second)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minusYears(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the years subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of years subtracted. This method subtracts the specified amount from the years field in three steps: For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusYears (long years)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as an int. This queries this date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetDateTime#isSupported_E@ will return valid values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY, EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "getMonthValue()": {"Returns": [["int", "the month-of-year, from 1 to 12"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#OffsetDateTime#getMonth_E@"], "Permissions": [], "Description": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum @B_java#time#Month_E@ is used by calling @B_java#time#OffsetDateTime#getMonth_E@.", "history": "Added in API level 26", "FullName": "public int getMonthValue ()"}, "plusNanos(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the nanoseconds added, not null"]], "Parameters": [["long", "long: the nanos to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the unit cannot be added to this type"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusNanos (long nanos)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00. The output will be one of the following ISO-8601 formats: uuuu-MM-dd'T'HH:mmXXXXX uuuu-MM-dd'T'HH:mm:ssXXXXX uuuu-MM-dd'T'HH:mm:ss.SSSXXXXX uuuu-MM-dd'T'HH:mm:ss.SSSSSSXXXXX uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSXXXXX The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "minusHours(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the hours subtracted, not null"]], "Parameters": [["long", "long: the hours to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of hours subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusHours (long hours)"}, "minusMonths(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the months subtracted, not null"]], "Parameters": [["long", "long: the months to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of months subtracted. This method subtracts the specified amount from the months field in three steps: For example, 2007-03-31 minus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusMonths (long months)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns an OffsetDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The INSTANT_SECONDS field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a DateTimeException will be thrown. The OFFSET_SECONDS field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#OffsetDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDateTime#with_E@. In this case, the offset is not part of the calculation and will be unchanged. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public OffsetDateTime with (TemporalField field, long newValue)"}, "toEpochSecond()": {"Returns": [["long", "the number of seconds from the epoch of 1970-01-01T00:00:00Z"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z. This allows this date-time to be converted to a value of the @B_java#time#temporal#ChronoField#INSTANT_SECONDS_E@ field. This is primarily intended for low-level conversions rather than general application usage.", "history": "Added in API level 26", "FullName": "public long toEpochSecond ()"}, "isAfter(java.time.OffsetDateTime)": {"Returns": [["boolean", "true if this is after the instant of the specified date-time"]], "Parameters": [["@B_java#time#OffsetDateTime_E@", "OffsetDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is after that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ and @B_java#time#OffsetDateTime#equals_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isAfter(dateTime2.toInstant());.", "history": "Added in API level 26", "FullName": "public boolean isAfter (OffsetDateTime other)"}, "toLocalDate()": {"Returns": [["@B_java#time#LocalDate_E@", "the date part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalDate part of this date-time. This returns a LocalDate with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public LocalDate toLocalDate ()"}, "ofInstant(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from an Instant and zone ID. This creates an offset date-time with the same instant as that specified. Finding the offset from UTC/Greenwich is simple as there is only one valid offset for each instant.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime ofInstant (Instant instant, ZoneId zone)"}, "getDayOfYear()": {"Returns": [["int", "the day-of-year, from 1 to 365, or 366 in a leap year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.", "history": "Added in API level 26", "FullName": "public int getDayOfYear ()"}, "getHour()": {"Returns": [["int", "the hour-of-day, from 0 to 23"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hour-of-day field.", "history": "Added in API level 26", "FullName": "public int getHour ()"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to an OffsetDateTime"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a temporal object. This obtains an offset date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of OffsetDateTime. The conversion will first obtain a ZoneOffset from the temporal object. It will then try to obtain a LocalDateTime, falling back to an Instant if necessary. The result will be the combination of ZoneOffset with either with LocalDateTime or Instant. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, OffsetDateTime::from.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime from (TemporalAccessor temporal)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns an OffsetDateTime, based on this one, with the specified amount added. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#OffsetDateTime#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plus (TemporalAmount amountToAdd)"}, "getYear()": {"Returns": [["int", "the year, from MIN_YEAR to MAX_YEAR"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).", "history": "Added in API level 26", "FullName": "public int getYear ()"}, "plusHours(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the hours added, not null"]], "Parameters": [["long", "long: the hours to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of hours added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusHours (long hours)"}, "getSecond()": {"Returns": [["int", "the second-of-minute, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the second-of-minute field.", "history": "Added in API level 26", "FullName": "public int getSecond ()"}, "getDayOfWeek()": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum @B_java#time#DayOfWeek_E@ for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#DayOfWeek#getValue_E@. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.", "history": "Added in API level 26", "FullName": "public DayOfWeek getDayOfWeek ()"}, "of(java.time.LocalDateTime,java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a date-time and offset. This creates an offset date-time with the specified local date-time and offset.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime of (LocalDateTime dateTime, ZoneOffset offset)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the parsed offset date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a text string using a specific formatter. The text is parsed using the formatter, returning a date-time.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime parse (CharSequence text, DateTimeFormatter formatter)"}, "plusMinutes(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the minutes added, not null"]], "Parameters": [["long", "long: the minutes to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of minutes added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusMinutes (long minutes)"}, "isEqual(java.time.OffsetDateTime)": {"Returns": [["boolean", "true if the instant equals the instant of the specified date-time"]], "Parameters": [["@B_java#time#OffsetDateTime_E@", "OffsetDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is equal to that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ and @B_java#time#OffsetDateTime#equals_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().equals(dateTime2.toInstant());.", "history": "Added in API level 26", "FullName": "public boolean isEqual (OffsetDateTime other)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this date-time, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this date-time can be queried for the specified field. If false, then calling the @B_java#time#OffsetDateTime#range_E@, @B_java#time#OffsetDateTime#get_E@ and @B_java#time#OffsetDateTime#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA INSTANT_SECONDS OFFSET_SECONDS All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "atZoneSameInstant(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time formed from this date-time, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant. This returns a ZonedDateTime formed from this date-time and the specified time-zone. This conversion will ignore the visible local date-time and use the underlying instant instead. This avoids any problems with local time-line gaps or overlaps. The result might have different values for fields such as hour, minute an even day. To attempt to retain the values of the fields, use @B_java#time#OffsetDateTime#atZoneSimilarLocal_E@. To use the offset as the zone ID, use @B_java#time#OffsetDateTime#toZonedDateTime_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime atZoneSameInstant (ZoneId zone)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same offset, date and time as this object. This returns a temporal object of the same observable type as the input with the offset, date and time changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ three times, passing @B_java#time#temporal#ChronoField#EPOCH_DAY_E@, @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ and @B_java#time#temporal#ChronoField#OFFSET_SECONDS_E@ as the fields. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "getOffset()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zone offset, such as '+01:00'. This is the offset of the local date-time from UTC/Greenwich.", "history": "Added in API level 26", "FullName": "public ZoneOffset getOffset ()"}, "timeLineOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares in time-line order"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#OffsetDateTime#isAfter_E@", "@B_java#time#OffsetDateTime#isBefore_E@", "@B_java#time#OffsetDateTime#isEqual_E@"], "Permissions": [], "Description": "Gets a comparator that compares two OffsetDateTime instances based solely on the instant. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying instant.", "history": "Added in API level 26", "FullName": "public static Comparator<OffsetDateTime> timeLineOrder ()"}, "toOffsetTime()": {"Returns": [["@B_java#time#OffsetTime_E@", "an OffsetTime representing the time and offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to an OffsetTime. This returns an offset time with the same local time and offset.", "history": "Added in API level 26", "FullName": "public OffsetTime toOffsetTime ()"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this date-time and the end date-time"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to an OffsetDateTime, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to an OffsetDateTime"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another date-time in terms of the specified unit. This calculates the amount of time between two OffsetDateTime objects in terms of a single TemporalUnit. The start and end points are this and the specified date-time. The result will be negative if the end is before the start. For example, the amount in days between two date-times can be calculated using startDateTime.until(endDateTime, DAYS). The Temporal passed to this method is converted to a OffsetDateTime using @B_java#time#OffsetDateTime#from_E@. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time. The calculation returns a whole number, representing the number of complete units between the two date-times. For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z will only be one month as it is one minute short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "of(java.time.LocalDateTime, java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a date-time and offset. This creates an offset date-time with the specified local date-time and offset.", "history": "added in API level 26", "FullName": "public static OffsetDateTime of (LocalDateTime dateTime, ZoneOffset offset)"}, "plusDays(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the days added, not null"]], "Parameters": [["long", "long: the days to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of days added. This method adds the specified amount to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusDays (long days)"}, "minusMinutes(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the minutes subtracted, not null"]], "Parameters": [["long", "long: the minutes to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of minutes subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusMinutes (long minutes)"}, "truncatedTo(java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the time truncated, not null"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to truncate to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to truncate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the time truncated. Truncation returns a copy of the original date-time with fields smaller than the specified unit set to zero. For example, truncating with the @B_java#time#temporal#ChronoUnit#MINUTES_E@ unit will set the second-of-minute and nano-of-second field to zero. The unit must have a @B_java#time#temporal#ChronoUnit_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Other units throw an exception. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime truncatedTo (TemporalUnit unit)"}, "toLocalDateTime()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalDateTime part of this date-time. This returns a LocalDateTime with the same year, month, day and time as this date-time.", "history": "Added in API level 26", "FullName": "public LocalDateTime toLocalDateTime ()"}, "plusYears(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the years added, not null"]], "Parameters": [["long", "long: the years to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of years added. This method adds the specified amount to the years field in three steps: For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusYears (long years)"}, "isBefore(java.time.OffsetDateTime)": {"Returns": [["boolean", "true if this is before the instant of the specified date-time"]], "Parameters": [["@B_java#time#OffsetDateTime_E@", "OffsetDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the instant of this date-time is before that of the specified date-time. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isBefore(dateTime2.toInstant());.", "history": "Added in API level 26", "FullName": "public boolean isBefore (OffsetDateTime other)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented by @B_java#time#LocalDateTime#plus_E@. The offset is not part of the calculation and will be unchanged in the result. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public OffsetDateTime plus (long amountToAdd, TemporalUnit unit)"}, "minusWeeks(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the weeks subtracted, not null"]], "Parameters": [["long", "long: the weeks to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of weeks subtracted. This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 minus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusWeeks (long weeks)"}, "withNano(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested nanosecond, not null"]], "Parameters": [["int", "int: the nano-of-second to set in the result, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nano value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the nano-of-second altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withNano (int nanoOfSecond)"}, "withOffsetSameLocal(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time. This method returns an object with the same LocalDateTime and the specified ZoneOffset. No calculation is needed or performed. For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is +03:00, then this method will return 2007-12-03T10:30+03:00. To take into account the difference between the offsets, and adjust the time fields, use @B_java#time#OffsetDateTime#withOffsetSameInstant_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withOffsetSameLocal (ZoneOffset offset)"}, "now()": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the current date-time using the system clock, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date-time. The offset will be calculated from the time-zone in the clock. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime now ()"}, "of(int,int,int,int,int,int,int,java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset. This creates an offset date-time with the seven specified fields. This method exists primarily for writing test cases. Non test-code will typically use other methods to create an offset time. LocalDateTime has five additional convenience variants of the equivalent factory method taking fewer arguments. They are not provided here to reduce the footprint of the API.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)"}, "minusDays(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the days subtracted, not null"]], "Parameters": [["long", "long: the days to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of days subtracted. This method subtracts the specified amount from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 minus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minusDays (long days)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date-time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#OffsetDateTime#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "ofInstant(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from an Instant and zone ID. This creates an offset date-time with the same instant as that specified. Finding the offset from UTC/Greenwich is simple as there is only one valid offset for each instant.", "history": "added in API level 26", "FullName": "public static OffsetDateTime ofInstant (Instant instant, ZoneId zone)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#OffsetDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the @B_java#time#OffsetDateTime#plus_E@ and @B_java#time#OffsetDateTime#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "withMonth(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested month, not null"]], "Parameters": [["int", "int: the month-of-year to set in the result, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the month-of-year altered. The time and offset do not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withMonth (int month)"}, "withDayOfMonth(int)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested day, not null"]], "Parameters": [["int", "int: the day-of-month to set in the result, from 1 to 28-31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the day-of-month altered. If the resulting OffsetDateTime is invalid, an exception is thrown. The time and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withDayOfMonth (int dayOfMonth)"}, "plusWeeks(long)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the weeks added, not null"]], "Parameters": [["long", "long: the weeks to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified number of weeks added. This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime plusWeeks (long weeks)"}, "withOffsetSameInstant(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this date-time with the requested offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset to change to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant. This method returns an object with the specified ZoneOffset and a LocalDateTime adjusted by the difference between the two offsets. This will result in the old and new objects representing the same instant. This is useful for finding the local time in a different offset. For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is +03:00, then this method will return 2007-12-03T11:30+03:00. To change the offset without adjusting the local time use @B_java#time#OffsetDateTime#withOffsetSameLocal_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime withOffsetSameInstant (ZoneOffset offset)"}, "atZoneSimilarLocal(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time formed from this date and the earliest valid time for the zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time. This returns a ZonedDateTime formed from this date-time and the specified time-zone. Where possible, the result will have the same local date-time as this object. Time-zone rules, such as daylight savings, mean that not every time on the local time-line exists. If the local date-time is in a gap or overlap according to the rules then a resolver is used to determine the resultant local time and offset. This method uses @B_java#time#ZonedDateTime#ofLocal_E@ to retain the offset from this instance if possible. Finer control over gaps and overlaps is available in two ways. If you simply want to use the later offset at overlaps then call @B_java#time#ZonedDateTime#withLaterOffsetAtOverlap_E@ immediately after this method. To create a zoned date-time at the same instant irrespective of the local time-line, use @B_java#time#OffsetDateTime#atZoneSameInstant_E@. To use the offset as the zone ID, use @B_java#time#OffsetDateTime#toZonedDateTime_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime atZoneSimilarLocal (ZoneId zone)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the parsed offset date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"2007-12-03T10:15:30+01:00\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00. The string must represent a valid date-time and is parsed using @B_java#time#format#DateTimeFormatter#ISO_OFFSET_DATE_TIME_E@.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime parse (CharSequence text)"}, "getMinute()": {"Returns": [["int", "the minute-of-hour, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minute-of-hour field.", "history": "Added in API level 26", "FullName": "public int getMinute ()"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the current date-time using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date-time. Specifying the time-zone avoids dependence on the default time-zone. The offset will be calculated from the specified time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static OffsetDateTime now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an OffsetDateTime based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this date-time. This returns an OffsetDateTime, based on this one, with the date-time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as @B_java#time#Month_E@ and @B_java#time#MonthDay_E@. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July: The classes @B_java#time#LocalDate_E@, @B_java#time#LocalTime_E@ and @B_java#time#ZoneOffset_E@ implement TemporalAdjuster, thus this method can be used to change the date, time or offset: The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public OffsetDateTime with (TemporalAdjuster adjuster)"}, "getNano()": {"Returns": [["int", "the nano-of-second, from 0 to 999,999,999"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nano-of-second field.", "history": "Added in API level 26", "FullName": "public int getNano ()"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date-time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}}, "Inheritance": [], "ClassName": "java.time.OffsetDateTime", "ClassDesc": "A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00. OffsetDateTime is an immutable representation of a date-time with an offset. This class stores all date and time fields, to a precision of nanoseconds, as well as the offset from UTC/Greenwich. For example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00\" can be stored in an OffsetDateTime. OffsetDateTime, @B_java#time#ZonedDateTime_E@ and @B_java#time#Instant_E@ all store an instant on the time-line to nanosecond precision. Instant is the simplest, simply representing the instant. OffsetDateTime adds to the instant the offset from UTC/Greenwich, which allows the local date-time to be obtained. ZonedDateTime adds full time-zone rules. It is intended that ZonedDateTime or Instant is used to model data in simpler applications. This class may be used when modeling date-time concepts in more detail, or when communicating to a database or in a network protocol."}