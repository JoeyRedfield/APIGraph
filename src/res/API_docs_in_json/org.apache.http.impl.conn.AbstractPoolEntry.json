{"Functions": {"AbstractPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#ClientConnectionOperator_E@", "the Connection Operator for this entry"], ["@B_org#apache#http#conn#routing#HttpRoute_E@", "the planned route for the connection, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new pool entry.", "history": "Added in API level 1", "FullName": "protected AbstractPoolEntry (ClientConnectionOperator connOperator, HttpRoute route)"}, "shutdownEntry()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shuts down the entry. If @B_org#apache#http#impl#conn#AbstractPoolEntry#open_E@ is in progress, this will cause that open to possibly throw an @B_java#io#IOException_E@.", "history": "Added in API level 1", "FullName": "protected void shutdownEntry ()"}, "tunnelTarget(boolean, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["boolean", "true if the tunnel should be considered secure, false otherwise"], ["@B_org#apache#http#params#HttpParams_E@", "the parameters for tunnelling the connection"]], "Throws": [["@B_java#io#IOException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Tracks tunnelling of the connection to the target. The tunnel has to be established outside by sending a CONNECT request to the (last) proxy.", "history": "Added in API level 1", "FullName": "public void tunnelTarget (boolean secure, HttpParams params)"}, "tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the proxy to which the tunnel was established. See @B_org#apache#http#conn#ManagedClientConnection#tunnelProxy_E@ for details."], ["boolean", "true if the tunnel should be considered secure, false otherwise"], ["@B_org#apache#http#params#HttpParams_E@", "the parameters for tunnelling the connection"]], "Throws": [["@B_java#io#IOException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Tracks tunnelling of the connection to a chained proxy. The tunnel has to be established outside by sending a CONNECT request to the previous proxy.", "history": "Added in API level 1", "FullName": "public void tunnelProxy (HttpHost next, boolean secure, HttpParams params)"}, "layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["@B_org#apache#http#protocol#HttpContext_E@", "the context for layering"], ["@B_org#apache#http#params#HttpParams_E@", "the parameters for layering"]], "Throws": [["@B_java#io#IOException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Layers a protocol on top of an established tunnel.", "history": "Added in API level 1", "FullName": "public void layerProtocol (HttpContext context, HttpParams params)"}, "setState(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "The state object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns a state object to this pool entry.", "history": "Added in API level 1", "FullName": "public void setState (Object state)"}, "open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route along which to open the connection"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for opening the connection"], ["@B_org#apache#http#params#HttpParams_E@", "the parameters for opening the connection"]], "Throws": [["@B_java#io#IOException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Opens the underlying connection.", "history": "Added in API level 1", "FullName": "public void open (HttpRoute route, HttpContext context, HttpParams params)"}, "getState()": {"Returns": [["", "The state object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the state object associated with this pool entry.", "history": "Added in API level 1", "FullName": "public Object getState ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.AbstractPoolEntry", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A pool entry for use by connection manager implementations. Pool entries work in conjunction with an @B_org#apache#http#impl#conn#AbstractClientConnAdapter_E@. The adapter is handed out to applications that obtain a connection. The pool entry stores the underlying connection and tracks the @B_org#apache#http#conn#routing#HttpRoute_E@ established. The adapter delegates methods for establishing the route to it's pool entry. If the managed connections is released or revoked, the adapter gets disconnected, but the pool entry still contains the underlying connection and the established route."}