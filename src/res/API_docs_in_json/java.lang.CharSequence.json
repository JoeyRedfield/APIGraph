{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string consisting of exactly this sequence of characters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing the characters in this sequence in the same order as this sequence. The length of the string will be the length of this sequence.", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}, "subSequence(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or end are negative, if end is greater than length(), or if start is greater than end"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "Added in API level 1", "FullName": "public abstract CharSequence subSequence (int start, int end)"}, "codePoints()": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream of Unicode code points from this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by int values which are then passed to the stream. If the sequence is mutated while the stream is being read, the result is undefined.", "history": "Added in API level 24", "FullName": "public IntStream codePoints ()"}, "chars()": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream of char values from this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a If the sequence is mutated while the stream is being read, the result is undefined.", "history": "Added in API level 24", "FullName": "public IntStream chars ()"}, "length()": {"Returns": [["int", "the number of chars in this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this character sequence. The length is the number of 16-bit chars in the sequence.", "history": "Added in API level 1", "FullName": "public abstract int length ()"}, "charAt(int)": {"Returns": [["char", "the specified char value"]], "Parameters": [["int", "int: the index of the char value to be returned"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index argument is negative or not less than length()"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the char value at the specified index. An index ranges from zero to char value of the sequence is at index zero, the next at index one, and so on, as for array indexing. If the char value specified by the index is a", "history": "Added in API level 1", "FullName": "public abstract char charAt (int index)"}, "subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or end are negative, if end is greater than length(), or if start is greater than end"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "added in API level 1", "FullName": "public abstract CharSequence subSequence (int start, int end)"}}, "Inheritance": [], "ClassName": "java.lang.CharSequence", "ClassDesc": "A char values. This interface provides uniform, read-only access to many different kinds of char sequences. A char value represents a character in the This interface does not refine the general contracts of the @B_java#lang#Object#equals_E@ and @B_java#lang#Object#hashCode_E@ methods. The result of comparing two objects that implement"}