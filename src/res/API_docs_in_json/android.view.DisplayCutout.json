{"Functions": {"getSafeInsetRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inset from the right which avoids the display cutout in pixels.", "history": "Added in API level 28", "FullName": "public int getSafeInsetRight ()"}, "getSafeInsetBottom()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inset from the bottom which avoids the display cutout in pixels.", "history": "Added in API level 28", "FullName": "public int getSafeInsetBottom ()"}, "getBoundingRectBottom()": {"Returns": [["@B_android#graphics#Rect_E@", "bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle is returned. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bounding rectangle for a non-functional area on the display which is located on the bottom of the screen.", "history": "Added in API level 29", "FullName": "public Rect getBoundingRectBottom ()"}, "DisplayCutout(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Insets_E@", "Insets: the insets from each edge which avoid the display cutout as returned by @B_android#view#DisplayCutout#getSafeInsetTop_E@ etc. This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: the left bounding rect of the display cutout in pixels. If null is passed, it's treated as an empty rectangle (0,0)-(0,0). This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: the top bounding rect of the display cutout in pixels. If null is passed, it's treated as an empty rectangle (0,0)-(0,0). This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: the right bounding rect of the display cutout in pixels. If null is passed, it's treated as an empty rectangle (0,0)-(0,0). This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: the bottom bounding rect of the display cutout in pixels. If null is passed, it's treated as an empty rectangle (0,0)-(0,0). This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DisplayCutout instance. Note that this is only useful for tests. For production code, developers should always use a @B_android#view#DisplayCutout_E@ obtained from the system.", "history": "Added in API level 29", "FullName": "public DisplayCutout (Insets safeInsets, Rect boundLeft, Rect boundTop, Rect boundRight, Rect boundBottom)"}, "DisplayCutout(android.graphics.Rect,java.util.List<android.graphics.Rect>)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the insets from each edge which avoid the display cutout as returned by @B_android#view#DisplayCutout#getSafeInsetTop_E@ etc. This value may be null."], ["@B_java#util#List_E@", "List: the bounding rects of the display cutouts as returned by @B_android#view#DisplayCutout#getBoundingRects_E@ ()}. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#DisplayCutout#DisplayCutout_E@ instead. Creates a DisplayCutout instance. Note that this is only useful for tests. For production code, developers should always use a @B_android#view#DisplayCutout_E@ obtained from the system.", "history": "Added in API level 28", "FullName": "public DisplayCutout (Rect safeInsets, List<Rect> boundingRects)"}, "getBoundingRectRight()": {"Returns": [["@B_android#graphics#Rect_E@", "bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle is returned. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bounding rectangle for a non-functional area on the display which is located on the right of the screen.", "history": "Added in API level 29", "FullName": "public Rect getBoundingRectRight ()"}, "getSafeInsetTop()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inset from the top which avoids the display cutout in pixels.", "history": "Added in API level 28", "FullName": "public int getSafeInsetTop ()"}, "getBoundingRectLeft()": {"Returns": [["@B_android#graphics#Rect_E@", "bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle is returned. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bounding rectangle for a non-functional area on the display which is located on the left of the screen.", "history": "Added in API level 29", "FullName": "public Rect getBoundingRectLeft ()"}, "getSafeInsetLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inset from the left which avoids the display cutout in pixels.", "history": "Added in API level 28", "FullName": "public int getSafeInsetLeft ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 28", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 28", "FullName": "public boolean equals (Object o)"}, "getBoundingRects()": {"Returns": [["@B_java#util#List_E@", "a list of bounding Rects, one for each display cutout area. No empty Rect is returned. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of Rects, each of which is the bounding rectangle for a non-functional area on the display. There will be at most one non-functional area per short edge of the device, and none on the long edges.", "history": "Added in API level 28", "FullName": "public List<Rect> getBoundingRects ()"}, "getBoundingRectTop()": {"Returns": [["@B_android#graphics#Rect_E@", "bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle is returned. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bounding rectangle for a non-functional area on the display which is located on the top of the screen.", "history": "Added in API level 29", "FullName": "public Rect getBoundingRectTop ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 28", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.view.DisplayCutout", "ClassDesc": "Represents the area of the display that is not functional for displaying content. DisplayCutout is immutable."}