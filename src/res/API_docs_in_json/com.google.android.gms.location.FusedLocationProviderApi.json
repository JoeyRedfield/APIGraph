{"Functions": {"requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener, android.os.Looper)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["@B_com#google#android#gms#location#LocationListener_E@", "The listener for the location updates."], ["Looper", "The Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread."]], "Throws": [["IllegalStateException", "If looper is null and this method is executed in a thread that has not called Looper.prepare()."]], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates with a callback on the specified Looper thread. This method is suited for the foreground use cases,more specifically for requesting locations while being connected to @B_com#google#android#gms#common#api#GoogleApiClient_E@. For background use cases, the @B_android#app#PendingIntent_E@ version of the method is recommended, see @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@. Any previous LocationRequests registered on this LocationListener will be replaced. Callbacks for LocationListener will be made on the specified thread, which must already be a prepared looper thread. For cases where the callback can happen on the calling thread, the variant of this method without a @B_android#os#Looper_E@ can be used. See @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@.", "history": "", "FullName": "public abstract PendingResult<Status> requestLocationUpdates (GoogleApiClient client, LocationRequest request, LocationListener listener, Looper looper)"}, "setMockLocation(com.google.android.gms.common.api.GoogleApiClient, android.location.Location)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["Location", "The mock location. Must have a minimum number of fields set to be considered a valild location, as per documentation in the @B_android#location#Location_E@ class."]], "Throws": [["SecurityException", "if the ACCESS_MOCK_LOCATION permission is not present or the @B_android#provider#Settings#Secure#ALLOW_MOCK_LOCATION_E@ system setting is not enabled."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the mock location to be used for the location provider. This location will be used in place of any actual locations from the underlying providers (network or gps). @B_com#google#android#gms#location#FusedLocationProviderApi#setMockMode_E@ must be called and set to true prior to calling this method. Care should be taken in specifying the timestamps as many applications require them to be monotonically increasing.", "history": "", "FullName": "public abstract PendingResult<Status> setMockLocation (GoogleApiClient client, Location mockLocation)"}, "requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationCallback, android.os.Looper)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["@B_com#google#android#gms#location#LocationCallback_E@", "The callback for the location updates."], ["Looper", "The Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread."]], "Throws": [["IllegalStateException", "If looper is null and this method is executed in a thread that has not called Looper.prepare()."]], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates with a callback on the specified Looper thread. This method is suited for the foreground use cases,more specifically for requesting locations while being connected to @B_com#google#android#gms#common#api#GoogleApiClient_E@. For background use cases, the @B_android#app#PendingIntent_E@ version of the method is recommended, see @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@. Any previous LocationRequests registered on this LocationListener will be replaced. Callbacks for @B_com#google#android#gms#location#LocationCallback_E@ will be made on the specified thread, which must already be a prepared looper thread.", "history": "", "FullName": "public abstract PendingResult<Status> requestLocationUpdates (GoogleApiClient client, LocationRequest request, LocationCallback callback, Looper looper)"}, "getLastLocation(com.google.android.gms.common.api.GoogleApiClient)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. If not connected null will be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the best most recent location currently available. If a location is not available, which should happen very rarely, null will be returned. The best accuracy available while respecting the location permissions will be returned. This method provides a simplified way to get location. It is particularly well suited for applications that do not require an accurate location and that do not want to maintain extra logic for location updates.", "history": "", "FullName": "public abstract Location getLastLocation (GoogleApiClient client)"}, "removeLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, android.app.PendingIntent)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["PendingIntent", "The PendingIntent that was used in @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@ or is equal as defined by @B_android#app#PendingIntent#equals_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the given pending intent. It is possible for this call to cancel the PendingIntent under some circumstances.", "history": "", "FullName": "public abstract PendingResult<Status> removeLocationUpdates (GoogleApiClient client, PendingIntent callbackIntent)"}, "removeLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationListener)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationListener_E@", "The listener to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the given location listener.", "history": "", "FullName": "public abstract PendingResult<Status> removeLocationUpdates (GoogleApiClient client, LocationListener listener)"}, "requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["@B_com#google#android#gms#location#LocationListener_E@", "The listener for the location updates."]], "Throws": [["IllegalStateException", "If this method is executed in a thread that has not called Looper.prepare()."]], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates. This method is suited for the foreground use cases, more specifically for requesting locations while being connected to @B_com#google#android#gms#common#api#GoogleApiClient_E@. For background use cases, the @B_android#app#PendingIntent_E@ version of the method is recommended, see @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@. Any previous LocationRequests registered on this LocationListener will be replaced. Callbacks for LocationListener will be made on the calling thread, which must already be a prepared looper thread, such as the main thread of the calling Activity. The variant of this method with a @B_android#os#Looper_E@ is recommended for cases where the callback needs to happen on a specific thread. See @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@.", "history": "", "FullName": "public abstract PendingResult<Status> requestLocationUpdates (GoogleApiClient client, LocationRequest request, LocationListener listener)"}, "getLocationAvailability(com.google.android.gms.common.api.GoogleApiClient)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. If not connected null will be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the availability of location data. When @B_com#google#android#gms#location#LocationAvailability#isLocationAvailable_E@ returns true, then the location returned by @B_com#google#android#gms#location#FusedLocationProviderApi#getLastLocation_E@ will be reasonably up to date within the hints specified by the active @B_com#google#android#gms#location#LocationRequest_E@s. If the client isn't connected to Google Play services and the request times out, null is returned.", "history": "", "FullName": "public abstract LocationAvailability getLocationAvailability (GoogleApiClient client)"}, "setMockMode(com.google.android.gms.common.api.GoogleApiClient, boolean)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["boolean", "If true the location provider will be set to mock mode. If false it will be returned to its normal state."]], "Throws": [["SecurityException", "if the ACCESS_MOCK_LOCATION permission is not present or the @B_android#provider#Settings#Secure#ALLOW_MOCK_LOCATION_E@ system setting is not enabled."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether or not the location provider is in mock mode. The underlying providers (network and gps) will be stopped (except by direct @B_android#location#LocationManager_E@ access), and only locations specified in @B_com#google#android#gms#location#FusedLocationProviderApi#setMockLocation_E@ will be reported. This will effect all location clients connected using the @B_com#google#android#gms#location#FusedLocationProviderApi_E@, including geofencer clients (i.e. geofences can be triggered based on mock locations). The client must remain connected in order for mock mode to remain active. If the client dies the system will return to its normal state. Calls are not nested, and mock mode will be set directly regardless of previous calls.", "history": "", "FullName": "public abstract PendingResult<Status> setMockMode (GoogleApiClient client, boolean isMockMode)"}, "removeLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationCallback)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationCallback_E@", "The callback to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the given location result listener.", "history": "", "FullName": "public abstract PendingResult<Status> removeLocationUpdates (GoogleApiClient client, LocationCallback callback)"}, "requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, android.app.PendingIntent)": {"Returns": [["", "a PendingResult for the call, check @B_com#google#android#gms#common#api#Status#isSuccess_E@ to determine if it was successful."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["PendingIntent", "A pending intent to be sent for each location update."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates with a callback on the specified PendingIntent. This method is suited for the background use cases, more specifically for receiving location updates, even when the app has been killed by the system. In order to do so, use a @B_android#app#PendingIntent_E@ for a started service. For foreground use cases, the @B_com#google#android#gms#location#LocationListener_E@ version of the method is recommended, see @B_com#google#android#gms#location#FusedLocationProviderApi#requestLocationUpdates_E@. Any previously registered requests that have the same PendingIntent (as defined by @B_android#app#PendingIntent#equals_E@) will be replaced by this request. Location updates are sent with a key of @B_com#google#android#gms#location#FusedLocationProviderApi#KEY_LOCATION_CHANGED_E@ and a @B_android#location#Location_E@ value on the intent.", "history": "", "FullName": "public abstract PendingResult<Status> requestLocationUpdates (GoogleApiClient client, LocationRequest request, PendingIntent callbackIntent)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.location.FusedLocationProviderApi", "ClassDesc": "The main entry point for interacting with the fused location provider. The methods must be used in conjunction with a @B_com#google#android#gms#common#api#GoogleApiClient_E@. E.g."}