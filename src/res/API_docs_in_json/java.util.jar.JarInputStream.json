{"Functions": {"JarInputStream(java.io.InputStream,boolean)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the actual input stream"], ["boolean", "boolean: whether or not to verify the JarInputStream if it is signed."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JarInputStream and reads the optional manifest. If a manifest is present and verify is true, also attempts to verify the signatures if the JarInputStream is signed.", "history": "Added in API level 1", "FullName": "public JarInputStream (InputStream in, boolean verify)"}, "getManifest()": {"Returns": [["@B_java#util#jar#Manifest_E@", "the Manifest for this JAR file, or null if none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Manifest for this JAR file, or null if none.", "history": "Added in API level 1", "FullName": "public Manifest getManifest ()"}, "closeEntry()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes the current zip entry and prepares to read the next entry.", "history": "Added in API level 1", "FullName": "public void closeEntry ()"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the entry is reached"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes to read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if any of the jar file entries are incorrectly signed."]], "SeeAlso": [], "Permissions": [], "Description": "Reads from the current JAR file entry into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. If verification has been enabled, any invalid signature on the current entry will be reported at some point before the end of the entry is reached.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "getNextEntry()": {"Returns": [["@B_java#util#zip#ZipEntry_E@", "the next ZIP file entry, or null if there are no more entries"]], "Parameters": [], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if any of the jar file entries are incorrectly signed."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next ZIP file entry and positions the stream at the beginning of the entry data. If verification has been enabled, any invalid signature detected while positioning the stream for the next entry will result in an exception.", "history": "Added in API level 1", "FullName": "public ZipEntry getNextEntry ()"}, "JarInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the actual input stream"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JarInputStream and reads the optional manifest. If a manifest is present, also attempts to verify the signatures if the JarInputStream is signed.", "history": "Added in API level 1", "FullName": "public JarInputStream (InputStream in)"}, "createZipEntry(java.lang.String)": {"Returns": [["@B_java#util#zip#ZipEntry_E@", "the JarEntry object just created"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the JAR/ZIP file entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JarEntry (ZipEntry) for the specified JAR file entry name. The manifest attributes of the specified JAR file entry name will be copied to the new JarEntry.", "history": "Added in API level 1", "FullName": "protected ZipEntry createZipEntry (String name)"}, "getNextJarEntry()": {"Returns": [["@B_java#util#jar#JarEntry_E@", "the next JAR file entry, or null if there are no more entries"]], "Parameters": [], "Throws": [["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if any of the jar file entries are incorrectly signed."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next JAR file entry and positions the stream at the beginning of the entry data. If verification has been enabled, any invalid signature detected while positioning the stream for the next entry will result in an exception.", "history": "Added in API level 1", "FullName": "public JarEntry getNextJarEntry ()"}, "JarInputStream(java.io.InputStream, boolean)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the actual input stream"], ["boolean", "boolean: whether or not to verify the JarInputStream if it is signed."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error has occurred"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new JarInputStream and reads the optional manifest. If a manifest is present and verify is true, also attempts to verify the signatures if the JarInputStream is signed.", "history": "added in API level 1", "FullName": "public JarInputStream (InputStream in, boolean verify)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the entry is reached"]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes to read"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#util#zip#ZipException_E@", "if a ZIP file error has occurred"], ["@B_java#io#IOException_E@", "if an I/O error has occurred"], ["@B_java#lang#SecurityException_E@", "if any of the jar file entries are incorrectly signed."]], "SeeAlso": [], "Permissions": [], "Description": "Reads from the current JAR file entry into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. If verification has been enabled, any invalid signature on the current entry will be reported at some point before the end of the entry is reached.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@", "@B_java#util#zip#InflaterInputStream_E@", "@B_java#util#zip#ZipInputStream_E@"], "ClassName": "java.util.jar.JarInputStream", "ClassDesc": "The JarInputStream class is used to read the contents of a JAR file from any input stream. It extends the class java.util.zip.ZipInputStream with support for reading an optional Manifest entry. The Manifest can be used to store meta-information about the JAR file and its entries."}