{"Functions": {"multiply(java.math.BigDecimal)": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "returns a non-null valid Duration object"]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: to multiply by"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if operation produces fraction in the months field."], ["@B_java#lang#NullPointerException_E@", "if the factor parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Computes a new duration whose value is factor times longer than the value of this duration. For example, Since the Duration class is immutable, this method doesn't change the value of this object. It simply computes a new Duration object and returns it. The operation will be performed field by field with the precision of @B_java#math#BigDecimal_E@. Since all the fields except seconds are restricted to hold integers, any fraction produced by the computation will be carried down toward the next lower unit. For example, if you multiply \"P1D\" (1 day) with \"0.5\", then it will be 0.5 day, which will be carried down to \"PT12H\" (12 hours). When fractions of month cannot be meaningfully carried down to days, or year to months, this will cause an @B_java#lang#IllegalStateException_E@ to be thrown. For example if you multiple one month by 0.5. To avoid @B_java#lang#IllegalStateException_E@, use the @B_javax#xml#datatype#Duration#normalizeWith_E@ method to remove the years and months fields.", "history": "Added in API level 8", "FullName": "public abstract Duration multiply (BigDecimal factor)"}, "getTimeInMillis(java.util.Calendar)": {"Returns": [["long", "milliseconds between startInstant and startInstant plus this Duration"]], "Parameters": [["@B_java#util#Calendar_E@", "Calendar: The length of a month/year varies. The startInstant is used to disambiguate this variance. Specifically, this method returns the difference between startInstant and startInstant+duration"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if startInstant parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the duration in milliseconds. If the seconds field carries more digits than millisecond order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Calendar value x, Note that this method uses the @B_javax#xml#datatype#Duration#addTo_E@ method, which may work incorrectly with Duration objects with very large values in its fields. See the @B_javax#xml#datatype#Duration#addTo_E@ method for details.", "history": "Added in API level 8", "FullName": "public long getTimeInMillis (Calendar startInstant)"}, "multiply(int)": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "New Duration that is factortimes longer than this Duration."]], "Parameters": [["int", "int: Factor times longer of new Duration to create."]], "Throws": [], "SeeAlso": ["@B_javax#xml#datatype#Duration#multiply_E@"], "Permissions": [], "Description": "Computes a new duration whose value is factor times longer than the value of this duration. This method is provided for the convenience. It is functionally equivalent to the following code:", "history": "Added in API level 8", "FullName": "public Duration multiply (int factor)"}, "getField(javax.xml.datatype.DatatypeConstants.Field)": {"Returns": [["@B_java#lang#Number_E@", "If the specified field is present, this method returns a non-null non-negative @B_java#lang#Number_E@ object that represents its value. If it is not present, return null. For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method returns a @B_java#math#BigInteger_E@ object. For SECONDS, this method returns a @B_java#math#BigDecimal_E@."]], "Parameters": [["@B_javax#xml#datatype#DatatypeConstants#Field_E@", "DatatypeConstants.Field: one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the field is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of a field. Fields of a duration object may contain arbitrary large value. Therefore this method is designed to return a @B_java#lang#Number_E@ object. In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned number will be a non-negative integer. In case of seconds, the returned number may be a non-negative decimal value.", "history": "Added in API level 8", "FullName": "public abstract Number getField (DatatypeConstants.Field field)"}, "getTimeInMillis(java.util.Date)": {"Returns": [["long", "milliseconds between startInstant and startInstant plus this Duration"]], "Parameters": [["@B_java#util#Date_E@", "Date: The length of a month/year varies. The startInstant is used to disambiguate this variance. Specifically, this method returns the difference between startInstant and startInstant+duration."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the startInstant parameter is null."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#getTimeInMillis_E@"], "Permissions": [], "Description": "Returns the length of the duration in milliseconds. If the seconds field carries more digits than millisecond order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Date value x, Note that this method uses the @B_javax#xml#datatype#Duration#addTo_E@ method, which may work incorrectly with Duration objects with very large values in its fields. See the @B_javax#xml#datatype#Duration#addTo_E@ method for details.", "history": "Added in API level 8", "FullName": "public long getTimeInMillis (Date startInstant)"}, "getXMLSchemaType()": {"Returns": [["@B_javax#xml#namespace#QName_E@", "one of the following constants: @B_javax#xml#datatype#DatatypeConstants#DURATION_E@, @B_javax#xml#datatype#DatatypeConstants#DURATION_DAYTIME_E@ or @B_javax#xml#datatype#DatatypeConstants#DURATION_YEARMONTH_E@."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the combination of set fields does not match one of the XML Schema date/time datatypes."]], "SeeAlso": [], "Permissions": [], "Description": "Return the name of the XML Schema date/time type that this instance maps to. Type is computed based on fields that are set, i.e. @B_javax#xml#datatype#Duration#isSet_E@ == true.", "history": "Added in API level 8", "FullName": "public QName getXMLSchemaType ()"}, "subtract(javax.xml.datatype.Duration)": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "New Duration created from subtracting rhs from this Duration."]], "Parameters": [["@B_javax#xml#datatype#Duration_E@", "Duration: Duration to subtract from this Duration."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If two durations cannot be meaningfully subtracted. For example, subtracting one day from one month causes this exception."], ["@B_java#lang#NullPointerException_E@", "If the rhs parameter is null."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#add_E@"], "Permissions": [], "Description": "Computes a new duration whose value is this-rhs. For example: Since there's no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in @B_java#lang#IllegalStateException_E@. Formally the computation is defined as follows. First, we can assume that two Durations are both positive without losing generality. (i.e., (-X)-Y=-(X+Y), X-(-Y)=X+Y, (-X)-(-Y)=-(X-Y)) Then two durations are subtracted field by field. If the sign of any non-zero field This process is repeated until all the non-zero fields have the same sign. If a borrow occurs in the days field (in other words, if the computation needs to borrow 1 or -1 month to compensate days), then the computation fails by throwing an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 8", "FullName": "public Duration subtract (Duration rhs)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this duration is the same length as duration. false if duration is not a Duration object, is null, or its length is different from this duration."]], "Parameters": [["@B_java#lang#Object_E@", "Object: A non-null valid Duration object."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#compare_E@"], "Permissions": [], "Description": "Checks if this duration object has the same duration as another Duration object. For example, \"P1D\" (1 day) is equal to \"PT24H\" (24 hours). Duration X is equal to Y if and only if time instant t+X and t+Y are the same for all the test time instants specified in the section 3.2.6.2 of the XML Schema 1.0 specification. Note that there are cases where two Durations are \"incomparable\" to each other, like one month and 30 days. For example,", "history": "Added in API level 8", "FullName": "public boolean equals (Object duration)"}, "compare(javax.xml.datatype.Duration)": {"Returns": [["int", "the relationship between this Durationand duration parameter as @B_javax#xml#datatype#DatatypeConstants#LESSER_E@, @B_javax#xml#datatype#DatatypeConstants#EQUAL_E@, @B_javax#xml#datatype#DatatypeConstants#GREATER_E@ or @B_javax#xml#datatype#DatatypeConstants#INDETERMINATE_E@."]], "Parameters": [["@B_javax#xml#datatype#Duration_E@", "Duration: to compare"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability."], ["@B_java#lang#NullPointerException_E@", "if duration is null."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#isShorterThan_E@", "@B_javax#xml#datatype#Duration#isLongerThan_E@"], "Permissions": [], "Description": "Partial order relation comparison with this Duration instance. Comparison result must be in accordance with Return: @B_javax#xml#datatype#DatatypeConstants#LESSER_E@ if this Duration is shorter than duration parameter @B_javax#xml#datatype#DatatypeConstants#EQUAL_E@ if this Duration is equal to duration parameter @B_javax#xml#datatype#DatatypeConstants#GREATER_E@ if this Duration is longer than duration parameter @B_javax#xml#datatype#DatatypeConstants#INDETERMINATE_E@ if a conclusive partial order relation cannot be determined", "history": "Added in API level 8", "FullName": "public abstract int compare (Duration duration)"}, "getSign()": {"Returns": [["int", "-1 if this duration is negative, 0 if the duration is zero, and 1 if the duration is positive."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sign of this duration in -1,0, or 1.", "history": "Added in API level 8", "FullName": "public abstract int getSign ()"}, "negate()": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "always return a non-null valid Duration object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Duration object whose value is -this. Since the Duration class is immutable, this method doesn't change the value of this object. It simply computes a new Duration object and returns it.", "history": "Added in API level 8", "FullName": "public abstract Duration negate ()"}, "isShorterThan(javax.xml.datatype.Duration)": {"Returns": [["boolean", "true if duration parameter is shorter than this Duration, else false."]], "Parameters": [["@B_javax#xml#datatype#Duration_E@", "Duration: Duration to test this Duration against."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability."], ["@B_java#lang#NullPointerException_E@", "if duration is null."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#isLongerThan_E@", "@B_javax#xml#datatype#Duration#compare_E@"], "Permissions": [], "Description": "Checks if this duration object is strictly shorter than another Duration object.", "history": "Added in API level 8", "FullName": "public boolean isShorterThan (Duration duration)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@"], "Permissions": [], "Description": "Returns a hash code consistent with the definition of the equals method.", "history": "Added in API level 8", "FullName": "public abstract int hashCode ()"}, "add(javax.xml.datatype.Duration)": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "non-null valid Duration object."]], "Parameters": [["@B_javax#xml#datatype#Duration_E@", "Duration: Duration to add to this Duration"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the rhs parameter is null."], ["@B_java#lang#IllegalStateException_E@", "If two durations cannot be meaningfully added. For example, adding negative one day to one month causes this exception."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#subtract_E@"], "Permissions": [], "Description": "Computes a new duration whose value is this+rhs. For example, Since there's no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in @B_java#lang#IllegalStateException_E@. Formally, the computation is defined as follows. Firstly, we can assume that two Durations to be added are both positive without losing generality (i.e., (-X)+Y=Y-X, X+(-Y)=X-Y, (-X)+(-Y)=-(X+Y)) Addition of two positive Durations are simply defined as field by field addition where missing fields are treated as 0. A field of the resulting Duration will be unset if and only if respective fields of two input Durations are unset. Note that lhs.add(rhs) will be always successful if lhs.signum()*rhs.signum()!=-1 or both of them are normalized.", "history": "Added in API level 8", "FullName": "public abstract Duration add (Duration rhs)"}, "addTo(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: A date object whose value will be modified."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the date parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Adds this duration to a @B_java#util#Date_E@ object. The given date is first converted into a @B_java#util#GregorianCalendar_E@, then the duration is added exactly like the @B_javax#xml#datatype#Duration#addTo_E@ method. The updated time instant is then converted back into a @B_java#util#Date_E@ object and used to update the given @B_java#util#Date_E@ object. This somewhat redundant computation is necessary to unambiguously determine the duration of months and years.", "history": "Added in API level 8", "FullName": "public void addTo (Date date)"}, "isLongerThan(javax.xml.datatype.Duration)": {"Returns": [["boolean", "true if the duration represented by this object is longer than the given duration. false otherwise."]], "Parameters": [["@B_javax#xml#datatype#Duration_E@", "Duration: Duration to test this Duration against."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability."], ["@B_java#lang#NullPointerException_E@", "If duration is null."]], "SeeAlso": ["@B_javax#xml#datatype#Duration#isShorterThan_E@", "@B_javax#xml#datatype#Duration#compare_E@"], "Permissions": [], "Description": "Checks if this duration object is strictly longer than another Duration object. Duration X is \"longer\" than Y if and only if X>Y as defined in the section 3.2.6.2 of the XML Schema 1.0 specification. For example, \"P1D\" (one day) > \"PT12H\" (12 hours) and \"P2Y\" (two years) > \"P23M\" (23 months).", "history": "Added in API level 8", "FullName": "public boolean isLongerThan (Duration duration)"}, "getYears()": {"Returns": [["int", "If the years field is present, return its value as an int, else return 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the years value of this Duration as an int or 0 if not present. getYears() is a convenience method for @B_javax#xml#datatype#Duration#getField_E@. As the return value is an int, an incorrect value will be returned for Durations with years that go beyond the range of an int. Use @B_javax#xml#datatype#Duration#getField_E@ to avoid possible loss of precision.", "history": "Added in API level 8", "FullName": "public int getYears ()"}, "addTo(java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#util#Calendar_E@", "Calendar: A calendar object whose value will be modified."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the calendar parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Adds this duration to a @B_java#util#Calendar_E@ object. Calls @B_java#util#Calendar#add_E@ in the order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS if those fields are present. Because the @B_java#util#Calendar_E@ class uses int to hold values, there are cases where this method won't work correctly (for example if values of fields exceed the range of int.) Also, since this duration class is a Gregorian duration, this method will not work correctly if the given @B_java#util#Calendar_E@ object is based on some other calendar systems. Any fractional parts of this Duration object beyond milliseconds will be simply ignored. For example, if this duration is \"P1.23456S\", then 1 is added to SECONDS, 234 is added to MILLISECONDS, and the rest will be unused. Note that because @B_java#util#Calendar#add_E@ is using Duration with values beyond the range of @B_java#util#Calendar_E@. @B_javax#xml#datatype#XMLGregorianCalendar#add_E@ provides the same basic operation as this method while avoiding the overflow/underflow issues.", "history": "Added in API level 8", "FullName": "public abstract void addTo (Calendar calendar)"}, "getHours()": {"Returns": [["int", "Hours of this Duration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the value of the HOURS field as an integer value, or 0 if not present. This method works just like @B_javax#xml#datatype#Duration#getYears_E@ except that this method works on the HOURS field.", "history": "Added in API level 8", "FullName": "public int getHours ()"}, "getSeconds()": {"Returns": [["int", "seconds in the integer value. The fraction of seconds will be discarded (for example, if the actual value is 2.5, this method returns 2)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the value of the SECONDS field as an integer value, or 0 if not present. This method works just like @B_javax#xml#datatype#Duration#getYears_E@ except that this method works on the SECONDS field.", "history": "Added in API level 8", "FullName": "public int getSeconds ()"}, "getMinutes()": {"Returns": [["int", "Minutes of this Duration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the value of the MINUTES field as an integer value, or 0 if not present. This method works just like @B_javax#xml#datatype#Duration#getYears_E@ except that this method works on the MINUTES field.", "history": "Added in API level 8", "FullName": "public int getMinutes ()"}, "getDays()": {"Returns": [["int", "Days of this Duration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the value of the DAYS field as an integer value, or 0 if not present. This method works just like @B_javax#xml#datatype#Duration#getYears_E@ except that this method works on the DAYS field.", "history": "Added in API level 8", "FullName": "public int getDays ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A non-null valid String representation of this Duration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String representation of this Duration Object. The result is formatted according to the XML Schema 1.0 specification and can be always parsed back later into the equivalent Duration Object by @B_javax#xml#datatype#DatatypeFactory#newDuration_E@. Formally, the following holds for any Duration Object x:", "history": "Added in API level 8", "FullName": "public String toString ()"}, "Duration()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 8", "FullName": "public Duration ()"}, "normalizeWith(java.util.Calendar)": {"Returns": [["@B_javax#xml#datatype#Duration_E@", "Duration of years and months of this Duration as days."]], "Parameters": [["@B_java#util#Calendar_E@", "Calendar: Calendar reference point."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the startTimeInstant parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Converts the years and months fields into the days field by using a specific time instant as the reference point. For example, duration of one month normalizes to 31 days given the start time instance \"July 8th 2003, 17:40:32\". Formally, the computation is done as follows: Note that since the Calendar class uses int to hold the value of year and month, this method may produce an unexpected result if this duration object holds a very large value in the years or months fields.", "history": "Added in API level 8", "FullName": "public abstract Duration normalizeWith (Calendar startTimeInstant)"}, "isSet(javax.xml.datatype.DatatypeConstants.Field)": {"Returns": [["boolean", "true if the field is present. false if not."]], "Parameters": [["@B_javax#xml#datatype#DatatypeConstants#Field_E@", "DatatypeConstants.Field: one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the field parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Checks if a field is set. A field of a duration object may or may not be present. This method can be used to test if a field is present.", "history": "Added in API level 8", "FullName": "public abstract boolean isSet (DatatypeConstants.Field field)"}, "getMonths()": {"Returns": [["int", "Months of this Duration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the value of the MONTHS field as an integer value, or 0 if not present. This method works just like @B_javax#xml#datatype#Duration#getYears_E@ except that this method works on the MONTHS field.", "history": "Added in API level 8", "FullName": "public int getMonths ()"}}, "Inheritance": [], "ClassName": "javax.xml.datatype.Duration", "ClassDesc": "Immutable representation of a time span as defined in the W3C XML Schema 1.0 specification. A Duration object represents a period of Gregorian time, which consists of six fields (years, months, days, hours, minutes, and seconds) plus a sign (+/-) field. The first five fields have non-negative (>=0) integers or null (which represents that the field is not set), and the seconds field has a non-negative decimal or null. A negative sign indicates a negative duration. This class provides a number of methods that make it easy to use for the duration datatype of XML Schema 1.0 with the errata. Duration objects only have partial order, where two values A and B maybe either: For example, 30 days cannot be meaningfully compared to one month. The @B_javax#xml#datatype#Duration#compare_E@ method implements this relationship. See the @B_javax#xml#datatype#Duration#isLongerThan_E@ method for details about the order relationship among Duration objects. This class provides a set of basic arithmetic operations, such as addition, subtraction and multiplication. Because durations don't have total order, an operation could fail for some combinations of operations. For example, you cannot subtract 15 days from 1 month. See the javadoc of those methods for detailed conditions where this could happen. Also, division of a duration by a number is not provided because the Duration class can only deal with finite precision decimal numbers. For example, one cannot represent 1 sec divided by 3. However, you could substitute a division by 3 with multiplying by numbers such as 0.3 or 0.333. Because some operations of Duration rely on @B_java#util#Calendar_E@ even though @B_javax#xml#datatype#Duration_E@ can hold very large or very small values, some of the methods may not work correctly on such Durations. The impacted methods document their dependency on @B_java#util#Calendar_E@."}