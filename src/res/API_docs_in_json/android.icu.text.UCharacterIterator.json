{"Functions": {"next()": {"Returns": [["int", "the next UTF16 code unit, or DONE if the index is at the limit of the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the UTF16 code unit at index, and increments to the next code unit (post-increment semantics). If index is out of range, DONE is returned, and the iterator is reset to the limit of the text.", "history": "Added in API level 24", "FullName": "public abstract int next ()"}, "getInstance(char[],int,int)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["char[]", "char: an array of UTF-16 code units"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a source character array.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (char[] source, int start, int limit)"}, "currentCodePoint()": {"Returns": [["int", "current codepoint"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the codepoint at the current index. If the current index is invalid, DONE is returned. If the current index points to a lead surrogate, and there is a following trail surrogate, then the code point is returned. Otherwise, the code unit at index is returned. Index is not changed.", "history": "Added in API level 24", "FullName": "public int currentCodePoint ()"}, "getInstance(char[], int, int)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["char[]", "char: an array of UTF-16 code units"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a source character array.", "history": "added in API level 24", "FullName": "public static final UCharacterIterator getInstance (char[] source, int start, int limit)"}, "moveCodePointIndex(int)": {"Returns": [["int", "the new index"]], "Parameters": [["int", "int: the number of code units to move the current index."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "is thrown if an invalid delta is supplied"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the current position by the number of code points specified, either forward or backward depending on the sign of delta (positive or negative respectively). If the current index is at a trail surrogate then the first adjustment is by code unit, and the remaining adjustments are by code points. If the resulting index would be less than zero, the index is set to zero, and if the resulting index would be greater than limit, the index is set to limit.", "history": "Added in API level 24", "FullName": "public int moveCodePointIndex (int delta)"}, "getInstance(java.lang.StringBuffer)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: an string buffer of UTF-16 code units"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a source StringBuffer.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (StringBuffer source)"}, "getLength()": {"Returns": [["int", "length of the text"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the text", "history": "Added in API level 24", "FullName": "public abstract int getLength ()"}, "getInstance(java.lang.String)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["@B_java#lang#String_E@", "String: a string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a source string.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (String source)"}, "getInstance(java.text.CharacterIterator)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: a valid CharacterIterator object."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a CharacterIterator.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (CharacterIterator source)"}, "setToStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current index to the start.", "history": "Added in API level 24", "FullName": "public void setToStart ()"}, "UCharacterIterator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected default constructor for the subclasses", "history": "Added in API level 24", "FullName": "protected UCharacterIterator ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "copy of this iterator"]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a copy of this iterator, independent from other iterators. If it is not possible to clone the iterator, returns null.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "getIndex()": {"Returns": [["int", "current index in text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current index in text.", "history": "Added in API level 24", "FullName": "public abstract int getIndex ()"}, "getText(char[])": {"Returns": [["int", "the number of code units added to fillIn, as a convenience"]], "Parameters": [["char[]", "char: an array of chars to fill with the underlying UTF-16 code units."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "exception if there is not enough room in the array."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience override for getText(char[], int) that provides an offset of 0.", "history": "Added in API level 24", "FullName": "public final int getText (char[] fillIn)"}, "getCharacterIterator()": {"Returns": [["@B_java#text#CharacterIterator_E@", "java.text.CharacterIterator object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a java.text.CharacterIterator object for the underlying text of this iterator. The returned iterator is independent of this iterator.", "history": "Added in API level 24", "FullName": "public CharacterIterator getCharacterIterator ()"}, "setToLimit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current index to the limit.", "history": "Added in API level 24", "FullName": "public void setToLimit ()"}, "getInstance(android.icu.text.Replaceable)": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["@B_android#icu#text#Replaceable_E@", "Replaceable: a valid source as a Replaceable object"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a Replaceable object.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (Replaceable source)"}, "moveIndex(int)": {"Returns": [["int", "the new index."]], "Parameters": [["int", "int: the number of code units to move the current index."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "is thrown if an invalid index is supplied"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the current position by the number of code units specified, either forward or backward depending on the sign of delta (positive or negative respectively). If the resulting index would be less than zero, the index is set to zero, and if the resulting index would be greater than limit, the index is set to limit.", "history": "Added in API level 24", "FullName": "public int moveIndex (int delta)"}, "nextCodePoint()": {"Returns": [["int", "the next codepoint in text, or DONE if the index is at the limit of the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the code point at index, and increments to the next code point (post-increment semantics). If index does not point to a valid surrogate pair, the behavior is the same as next(). Otherwise the iterator is incremented past the surrogate pair, and the code point represented by the pair is returned.", "history": "Added in API level 24", "FullName": "public int nextCodePoint ()"}, "previousCodePoint()": {"Returns": [["int", "the previous code point in the text, or DONE if the new index is before the start of the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retreat to the start of the previous code point in the text, and return it (pre-decrement semantics). If the index is not preceeded by a valid surrogate pair, the behavior is the same as previous(). Otherwise the iterator is decremented to the start of the surrogate pair, and the code point represented by the pair is returned.", "history": "Added in API level 24", "FullName": "public int previousCodePoint ()"}, "getText()": {"Returns": [["@B_java#lang#String_E@", "the underlying text storage in the iterator as a string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method for returning the underlying text storage as as string", "history": "Added in API level 24", "FullName": "public String getText ()"}, "current()": {"Returns": [["int", "current code unit"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the code unit at the current index. If index is out of range, returns DONE. Index is not changed.", "history": "Added in API level 24", "FullName": "public abstract int current ()"}, "previous()": {"Returns": [["int", "the previous code unit in the text, or DONE if the new index is before the start of the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decrement to the position of the previous code unit in the text, and return it (pre-decrement semantics). If the resulting index is less than 0, the index is reset to 0 and DONE is returned.", "history": "Added in API level 24", "FullName": "public abstract int previous ()"}, "getInstance(char[])": {"Returns": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator object"]], "Parameters": [["char[]", "char: an array of UTF-16 code units"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a UCharacterIterator object given a source character array.", "history": "Added in API level 24", "FullName": "public static final UCharacterIterator getInstance (char[] source)"}, "getText(char[],int)": {"Returns": [["int", "the number of code units added to fillIn, as a convenience"]], "Parameters": [["char[]", "char: an array of chars to fill with the underlying UTF-16 code units."], ["int", "int: the position within the array to start putting the data."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "exception if there is not enough room after offset in the array, or if offset < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a exception is thrown. The capacity of the fill in buffer should at least be equal to length of text in the iterator obtained by calling getLength()).", "history": "Added in API level 24", "FullName": "public abstract int getText (char[] fillIn, int offset)"}, "getText(char[], int)": {"Returns": [["int", "the number of code units added to fillIn, as a convenience"]], "Parameters": [["char[]", "char: an array of chars to fill with the underlying UTF-16 code units."], ["int", "int: the position within the array to start putting the data."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "exception if there is not enough room after offset in the array, or if offset < 0."]], "SeeAlso": [], "Permissions": [], "Description": "Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a exception is thrown. The capacity of the fill in buffer should at least be equal to length of text in the iterator obtained by calling getLength()).", "history": "added in API level 24", "FullName": "public abstract int getText (char[] fillIn, int offset)"}, "setIndex(int)": {"Returns": [], "Parameters": [["int", "int: the index within the text."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "is thrown if an invalid index is supplied"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the index to the specified index in the text.", "history": "Added in API level 24", "FullName": "public abstract void setIndex (int index)"}}, "Inheritance": [], "ClassName": "android.icu.text.UCharacterIterator", "ClassDesc": "Abstract class that defines an API for iteration on text objects.This is an interface for forward and backward iteration and random access into a text object. Forward iteration is done with post-increment and backward iteration is done with pre-decrement semantics, while the java.text.CharacterIterator interface methods provided forward iteration with \"pre-increment\" and backward iteration with pre-decrement semantics. This API is more efficient for forward iteration over code points. The other major difference is that this API can do both code unit and code point iteration, java.text.CharacterIterator can only iterate over code units and is limited to BMP (0 - 0xFFFF)"}