{"Functions": {"setBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute,boolean)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#text#DateFormat#BooleanAttribute_E@", "DateFormat.BooleanAttribute no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#BooleanAttribute_E@"], "Permissions": [], "Description": "Sets a boolean attribute for this instance. Aspects of DateFormat leniency are controlled by boolean attributes.", "history": "Added in API level 24", "FullName": "public DateFormat setBooleanAttribute (DateFormat.BooleanAttribute key, boolean value)"}, "getDateInstance(android.icu.util.Calendar,int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object for the default locale that can be used to format dates in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (Calendar cal, int dateStyle)"}, "setContext(android.icu.text.DisplayContext)": {"Returns": [], "Parameters": [["@B_android#icu#text#DisplayContext_E@", "DisplayContext: The DisplayContext value to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setContext (DisplayContext context)"}, "getDateTimeInstance(android.icu.util.Calendar,int,int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getDateTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (Calendar cal, int dateStyle, int timeStyle, Locale locale)"}, "getTimeInstance(int, java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time formatter with the given formatting style for the given locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getTimeInstance (int style, Locale aLocale)"}, "getPatternInstance(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal. The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.", "history": "Added in API level 24", "FullName": "public static final DateFormat getPatternInstance (Calendar cal, String skeleton, ULocale locale)"}, "getDateTimeInstance(int,int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["int", "int: the given time formatting style. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date/time formatter with the given formatting styles for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, Locale aLocale)"}, "setTimeZone(android.icu.util.TimeZone)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given new time zone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone for the calendar of this DateFormat object.", "history": "Added in API level 24", "FullName": "public void setTimeZone (TimeZone zone)"}, "getDateTimeInstance(int, int, java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["int", "int: the given time formatting style. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date/time formatter with the given formatting styles for the given locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, Locale aLocale)"}, "getTimeInstance(int, android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time formatter with the given formatting style for the given locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getTimeInstance (int style, ULocale locale)"}, "getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstanceForSkeleton (Calendar cal, String skeleton, ULocale locale)"}, "parse(java.lang.String)": {"Returns": [["@B_java#util#Date_E@", "A Date, or null if the input could not be parsed"]], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"]], "Throws": [["@B_java#text#ParseException_E@", "If the given string cannot be parsed as a date."]], "SeeAlso": ["@B_android#icu#text#DateFormat#parse_E@"], "Permissions": [], "Description": "Parses a date/time string. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039928046). Parsing begins at the beginning of the string and proceeds as far as possible. Assuming no parse errors were encountered, this function doesn't return any information about how much of the string was consumed by the parsing. If you need that information, use a version of parse() that takes a ParsePosition. By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false). Note that the normal date formats associated with some calendars - such as the Chinese lunar calendar - do not specify enough fields to enable dates to be parsed unambiguously. In the case of the Chinese lunar calendar, while the year within the current 60-year cycle is specified, the number of such cycles since the start date of the calendar (in the ERA field of the Calendar object) is not normally part of the format, and parsing may assume the wrong era. For cases such as this it is recommended that clients parse using the parse method that takes a Calendar with the Calendar passed in set to the current date, or to a date within the era/cycle that should be assumed if absent in the format.", "history": "Added in API level 24", "FullName": "public Date parse (String text)"}, "parse(java.lang.String,android.icu.util.Calendar,java.text.ParsePosition)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_android#icu#util#Calendar_E@", "Calendar: The calendar set on input to the date and time to be used for missing values in the date/time string being parsed, and set on output to the parsed date/time. In general, this should be initialized before calling this method - either cleared or set to the current date, depending on desired behavior. If this parse fails, the calendar may still have been modified. When the calendar type is different from the internal calendar held by this DateFormat instance, calendar field values will be parsed based on the internal calendar initialized with the time and the time zone taken from this calendar, then the parse result (time in milliseconds and time zone) will be set back to this calendar."], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#setLenient_E@"], "Permissions": [], "Description": "Parses a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Calendar that is equivalent to Date(837039928046). Before calling this method the caller should initialize the calendar in one of two ways (unless existing field information is to be kept): (1) clear the calendar, or (2) set the calendar to the current date (or to any date whose fields should be used to supply values that are missing in the parsed date). For example, Chinese calendar dates do not normally provide an era/cycle; in this case the calendar that is passed in should be set to a date within the era that should be assumed, normally the current era. By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false).", "history": "Added in API level 24", "FullName": "public abstract void parse (String text, Calendar cal, ParsePosition pos)"}, "setNumberFormat(android.icu.text.NumberFormat)": {"Returns": [], "Parameters": [["@B_android#icu#text#NumberFormat_E@", "NumberFormat: the given new NumberFormat."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number formatter.", "history": "Added in API level 24", "FullName": "public void setNumberFormat (NumberFormat newNumberFormat)"}, "getInstance(android.icu.util.Calendar)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a default date/time formatter that uses the SHORT style for both the date and the time.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstance (Calendar cal)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted time string."]], "Parameters": [["@B_java#lang#Object_E@", "Object: must be a Number or a Date or a Calendar."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the string buffer for the returning time string."], ["@B_java#text#FieldPosition_E@", "FieldPosition: keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text \"1996.07.10 AD at 15:08:56 PDT\", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'."]], "Throws": [], "SeeAlso": ["@B_java#text#Format_E@"], "Permissions": [], "Description": "Formats a time object into a time string. Examples of time objects are a time value expressed in milliseconds and a Date object.", "history": "Added in API level 24", "FullName": "public final StringBuffer format (Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)"}, "getDateTimeInstance(int, int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["int", "int: the given time formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the date/time formatter with the given date and time formatting styles for the default FORMAT locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle)"}, "getDateInstance(int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date formatter with the given formatting style for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (int style, Locale aLocale)"}, "format(java.util.Date)": {"Returns": [["@B_java#lang#String_E@", "the formatted time string."]], "Parameters": [["@B_java#util#Date_E@", "Date: the time value to be formatted into a time string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a Date into a date/time string.", "history": "Added in API level 24", "FullName": "public final String format (Date date)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "getDateTimeInstance()": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the date/time formatter with the default formatting style for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance ()"}, "format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted date/time string."]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: a Calendar set to the date and time to be formatted into a date/time string. When the calendar type is different from the internal calendar held by this DateFormat instance, the date and the time zone will be inherited from the input calendar, but other calendar field values will be calculated by the internal calendar."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the string buffer for the returning date/time string."], ["@B_java#text#FieldPosition_E@", "FieldPosition: keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text \"1996.07.10 AD at 15:08:56 PDT\", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a date into a date/time string.", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (Calendar cal, StringBuffer toAppendTo, FieldPosition fieldPosition)"}, "getInstance(android.icu.util.Calendar,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a date/time formatter that uses the SHORT style for both the date and the time.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstance (Calendar cal, Locale locale)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides hashCode.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "getDateInstance(android.icu.util.Calendar, int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object for the default locale that can be used to format dates in the calendar system specified by cal.", "history": "added in API level 24", "FullName": "public static final DateFormat getDateInstance (Calendar cal, int dateStyle)"}, "parseObject(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Object_E@", "An Object parsed from the string. In case of error, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: A String, part of which should be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#parse_E@"], "Permissions": [], "Description": "Parses a date/time string into an Object. This convenience method simply calls parse(String, ParsePosition).", "history": "Added in API level 24", "FullName": "public Object parseObject (String source, ParsePosition pos)"}, "getTimeZone()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the time zone associated with the calendar of DateFormat."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time zone.", "history": "Added in API level 24", "FullName": "public TimeZone getTimeZone ()"}, "getInstanceForSkeleton(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstanceForSkeleton (String skeleton, ULocale locale)"}, "getTimeInstance(int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time formatter with the given formatting style for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (int style, ULocale locale)"}, "getDateTimeInstance(android.icu.util.Calendar,int,int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getDateTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object for the default locale that can be used to format dates and times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (Calendar cal, int dateStyle, int timeStyle)"}, "getPatternInstance(android.icu.util.Calendar,java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal. The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.", "history": "Added in API level 24", "FullName": "public static final DateFormat getPatternInstance (Calendar cal, String skeleton, Locale locale)"}, "getTimeInstance(android.icu.util.Calendar,int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a time format is desired."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the time format is desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (Calendar cal, int timeStyle, Locale locale)"}, "getTimeInstance()": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Gets the time formatter with the default formatting style for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance ()"}, "getTimeInstance(android.icu.util.Calendar, int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a time format is desired."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format times in the calendar system specified by cal.", "history": "added in API level 24", "FullName": "public static final DateFormat getTimeInstance (Calendar cal, int timeStyle)"}, "setCalendarLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: when true, Calendar parsing is lenient"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#setLenient_E@"], "Permissions": [], "Description": "Specifies whether date/time parsing in the encapsulated Calendar object should be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. Without lenient parsing, inputs must match this object's format more closely.", "history": "Added in API level 24", "FullName": "public void setCalendarLenient (boolean lenient)"}, "getDateInstance(int, java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date formatter with the given formatting style for the given locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getDateInstance (int style, Locale aLocale)"}, "getPatternInstance(java.lang.String)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the default locale. The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.", "history": "Added in API level 24", "FullName": "public static final DateFormat getPatternInstance (String skeleton)"}, "getInstanceForSkeleton(java.lang.String)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the default locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstanceForSkeleton (String skeleton)"}, "getContext(android.icu.text.DisplayContext.Type)": {"Returns": [["@B_android#icu#text#DisplayContext_E@", "the current DisplayContext setting for the specified type"]], "Parameters": [["@B_android#icu#text#DisplayContext#Type_E@", "DisplayContext.Type: the DisplayContext.Type whose value to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public DisplayContext getContext (DisplayContext.Type type)"}, "DateFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new date format.", "history": "Added in API level 24", "FullName": "protected DateFormat ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "the set of locales for which DateFormats are installed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of locales for which DateFormats are installed.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}, "getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstanceForSkeleton (Calendar cal, String skeleton, Locale locale)"}, "setCalendar(android.icu.util.Calendar)": {"Returns": [], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: the new Calendar to be used by the date format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the calendar to be used by this date format. Initially, the default calendar for the specified or default locale is used.", "history": "Added in API level 24", "FullName": "public void setCalendar (Calendar newCalendar)"}, "getPatternInstance(java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the given locale. The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.", "history": "Added in API level 24", "FullName": "public static final DateFormat getPatternInstance (String skeleton, Locale locale)"}, "isLenient()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether both date/time parsing in the encapsulated Calendar object and DateFormat whitespace & numeric processing is lenient.", "history": "Added in API level 24", "FullName": "public boolean isLenient ()"}, "getDateInstance(int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the date formatter with the given formatting style for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (int style)"}, "getDateInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format dates in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (Calendar cal, int dateStyle, ULocale locale)"}, "getCalendar()": {"Returns": [["@B_android#icu#util#Calendar_E@", "the calendar associated with this date/time formatter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the calendar associated with this date/time formatter.", "history": "Added in API level 24", "FullName": "public Calendar getCalendar ()"}, "getDateInstance(int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date formatter with the given formatting style for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (int style, ULocale locale)"}, "getDateInstance(int, android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date formatter with the given formatting style for the given locale.", "history": "added in API level 24", "FullName": "public static final DateFormat getDateInstance (int style, ULocale locale)"}, "isCalendarLenient()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether date/time parsing in the encapsulated Calendar object is lenient.", "history": "Added in API level 24", "FullName": "public boolean isCalendarLenient ()"}, "getDateInstance(android.icu.util.Calendar,int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format dates in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance (Calendar cal, int dateStyle, Locale locale)"}, "getTimeInstance(android.icu.util.Calendar,int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a time format is desired."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (Calendar cal, int timeStyle)"}, "getBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#icu#text#DateFormat#BooleanAttribute_E@", "DateFormat.BooleanAttribute no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#BooleanAttribute_E@"], "Permissions": [], "Description": "Returns the current value for the specified BooleanAttribute for this instance if attribute is missing false is returned.", "history": "Added in API level 24", "FullName": "public boolean getBooleanAttribute (DateFormat.BooleanAttribute key)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides clone.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date, or null if the input could not be parsed"]], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#setLenient_E@"], "Permissions": [], "Description": "Parses a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039928046). By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false). Note that the normal date formats associated with some calendars - such as the Chinese lunar calendar - do not specify enough fields to enable dates to be parsed unambiguously. In the case of the Chinese lunar calendar, while the year within the current 60-year cycle is specified, the number of such cycles since the start date of the calendar (in the ERA field of the Calendar object) is not normally part of the format, and parsing may assume the wrong era. For cases such as this it is recommended that clients parse using the parse method that takes a Calendar with the Calendar passed in set to the current date, or to a date within the era/cycle that should be assumed if absent in the format.", "history": "added in API level 24", "FullName": "public Date parse (String text, ParsePosition pos)"}, "getNumberFormat()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "the number formatter which this date/time formatter uses."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number formatter which this date/time formatter uses to format and parse a time.", "history": "Added in API level 24", "FullName": "public NumberFormat getNumberFormat ()"}, "getInstance()": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a default date/time formatter that uses the SHORT style for both the date and the time.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstance ()"}, "getTimeInstance(int,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time formatter with the given formatting style for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (int style, Locale aLocale)"}, "getDateTimeInstance(android.icu.util.Calendar,int,int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a date/time format is desired."], ["int", "int: The type of date format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getDateTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (Calendar cal, int dateStyle, int timeStyle, ULocale locale)"}, "getDateInstance()": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date formatter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the date formatter with the default formatting style for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateInstance ()"}, "setLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True specifies date/time interpretation to be lenient."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar#setLenient_E@", "@B_android#icu#text#DateFormat#setBooleanAttribute_E@", "@B_android#icu#text#DateFormat#setCalendarLenient_E@"], "Permissions": [], "Description": "Specifies whether date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. Without lenient parsing, inputs must match this object's format more closely.", "history": "Added in API level 24", "FullName": "public void setLenient (boolean lenient)"}, "format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted date/time string."]], "Parameters": [["@B_java#util#Date_E@", "Date: a Date to be formatted into a date/time string."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the string buffer for the returning date/time string."], ["@B_java#text#FieldPosition_E@", "FieldPosition: keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a time text \"1996.07.10 AD at 15:08:56 PDT\", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For instance, formatting a Date to the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD, the begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a Date into a date/time string.", "history": "Added in API level 24", "FullName": "public StringBuffer format (Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)"}, "getTimeInstance(int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a time formatter."]], "Parameters": [["int", "int: the given formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the time formatter with the given formatting style for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (int style)"}, "getPatternInstance(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the given locale. The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.", "history": "Added in API level 24", "FullName": "public static final DateFormat getPatternInstance (String skeleton, ULocale locale)"}, "getTimeInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system for which a time format is desired."], ["int", "int: The type of time format desired. This can be @B_android#icu#text#DateFormat#SHORT_E@, @B_android#icu#text#DateFormat#MEDIUM_E@, etc."], ["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which the time format is desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#getTimeInstance_E@"], "Permissions": [], "Description": "Creates a @B_android#icu#text#DateFormat_E@ object that can be used to format times in the calendar system specified by cal.", "history": "Added in API level 24", "FullName": "public static final DateFormat getTimeInstance (Calendar cal, int timeStyle, ULocale locale)"}, "getDateTimeInstance(int,int,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["int", "int: the given time formatting style. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the date/time formatter with the given formatting styles for the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, ULocale locale)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#util#Date_E@", "A Date, or null if the input could not be parsed"]], "Parameters": [["@B_java#lang#String_E@", "String: The date/time string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormat#setLenient_E@"], "Permissions": [], "Description": "Parses a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039928046). By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false). Note that the normal date formats associated with some calendars - such as the Chinese lunar calendar - do not specify enough fields to enable dates to be parsed unambiguously. In the case of the Chinese lunar calendar, while the year within the current 60-year cycle is specified, the number of such cycles since the start date of the calendar (in the ERA field of the Calendar object) is not normally part of the format, and parsing may assume the wrong era. For cases such as this it is recommended that clients parse using the parse method that takes a Calendar with the Calendar passed in set to the current date, or to a date within the era/cycle that should be assumed if absent in the format.", "history": "Added in API level 24", "FullName": "public Date parse (String text, ParsePosition pos)"}, "getDateTimeInstance(int,int)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "a date/time formatter."]], "Parameters": [["int", "int: the given date formatting style. For example, SHORT for \"M/d/yy\" in the US locale. As currently implemented, relative date formatting only affects a limited range of calendar days before or after the current date, based on the CLDR <field type=\"day\">/<relative> data: For example, in English, \"Yesterday\", \"Today\", and \"Tomorrow\". Outside of this range, relative dates are formatted using the corresponding non-relative style."], ["int", "int: the given time formatting style. For example, SHORT for \"h:mm a\" in the US locale. Relative time styles are not currently supported, and behave just like the corresponding non-relative style."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the date/time formatter with the given date and time formatting styles for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle)"}, "getInstanceForSkeleton(java.lang.String,java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The skeleton that selects the fields to be formatted. (Uses the @B_android#icu#text#DateTimePatternGenerator_E@.) This can be @B_android#icu#text#DateFormat#ABBR_MONTH_E@, @B_android#icu#text#DateFormat#MONTH_WEEKDAY_DAY_E@, etc."], ["@B_java#util#Locale_E@", "Locale: The locale for which the date/time format is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#DateFormat_E@ object that can be used to format dates and times in the given locale.", "history": "Added in API level 24", "FullName": "public static final DateFormat getInstanceForSkeleton (String skeleton, Locale locale)"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@"], "ClassName": "android.icu.text.DateFormat", "ClassDesc": "@B_java#text#DateFormat_E@. Methods, fields, and other functionality specific to ICU are labeled ' DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as SimpleDateFormat, allows for formatting (i.e., date -> text), parsing (text -> date), and normalization. The date is represented as a Date object or as the milliseconds since January 1, 1970, 00:00:00 GMT. DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. It provides many class methods for obtaining default date/time formatters based on the default for a given locale and a number of formatting styles or arbitrary \"skeletons\". To format a date for the current Locale, use one of the static factory methods: If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. To format a date for a different Locale, specify it in the call to getDateInstance(). You can use a DateFormat to parse also. There are many static factory methods available. Use getDateInstance to get the normal date format for that country. Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM to LONG to FULL. The exact result depends on the locale, but generally: SHORT is completely numeric, such as 12.13.52 or 3:30pm MEDIUM is longer, such as Jan 12, 1952 LONG is longer, such as January 12, 1952 or 3:30:32pm FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. Use getPatternInstance to format with a skeleton. Typically this is with a predefined skeleton, like @B_android#icu#text#DateFormat#YEAR_ABBR_MONTH_E@ for something like \"Sept 2012\". If you don't want to use one of the predefined skeletons, you can supply your own. The skeletons are like the patterns in SimpleDateFormat, except they: You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you encounter an unusual one. You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to progressively parse through pieces of a string. align any particular field, or find out where it is for selection on the screen."}