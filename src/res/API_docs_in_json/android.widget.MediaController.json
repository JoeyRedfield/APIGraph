{"Functions": {"setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 1", "FullName": "public void setEnabled (boolean enabled)"}, "setMediaPlayer(android.widget.MediaController.MediaPlayerControl)": {"Returns": [], "Parameters": [["@B_android#widget#MediaController#MediaPlayerControl_E@", "MediaController.MediaPlayerControl no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setMediaPlayer (MediaController.MediaPlayerControl player)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the controller on screen. It will go away automatically after 3 seconds of inactivity.", "history": "Added in API level 1", "FullName": "public void show ()"}, "hide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the controller from the screen.", "history": "Added in API level 1", "FullName": "public void hide ()"}, "show(int)": {"Returns": [], "Parameters": [["int", "int: The timeout in milliseconds. Use 0 to show the controller until hide() is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the controller on screen. It will go away automatically after 'timeout' milliseconds of inactivity.", "history": "Added in API level 1", "FullName": "public void show (int timeout)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 1", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "MediaController(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MediaController (Context context)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle trackball motion events. The relative movement of the trackball since the last event can be retrieve with @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@. These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).", "history": "Added in API level 1", "FullName": "public boolean onTrackballEvent (MotionEvent ev)"}, "onFinishInflate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finalize inflating a view from XML. This is called as the last phase of inflation, after all child views have been added. Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onFinishInflate ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "setPrevNextListeners(android.view.View.OnClickListener,android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnClickListener_E@", "View.OnClickListener no parameter comment"], ["@B_android#view#View#OnClickListener_E@", "View.OnClickListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setPrevNextListeners (View.OnClickListener next, View.OnClickListener prev)"}, "MediaController(android.content.Context,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MediaController (Context context, boolean useFastForward)"}, "MediaController(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MediaController (Context context, AttributeSet attrs)"}, "isShowing()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isShowing ()"}, "setAnchorView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to which to anchor the controller when it is visible."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the view that acts as the anchor for the control view. This can for example be a VideoView, or your Activity's main view. When VideoView calls this method, it will use the VideoView's parent as the anchor.", "history": "Added in API level 1", "FullName": "public void setAnchorView (View view)"}, "MediaController(android.content.Context, boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public MediaController (Context context, boolean useFastForward)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#FrameLayout_E@"], "ClassName": "android.widget.MediaController", "ClassDesc": "A view containing controls for a MediaPlayer. Typically contains the buttons like \"Play/Pause\", \"Rewind\", \"Fast Forward\" and a progress slider. It takes care of synchronizing the controls with the state of the MediaPlayer. The way to use this class is to instantiate it programmatically. The MediaController will create a default set of controls and put them in a window floating above your application. Specifically, the controls will float above the view specified with setAnchorView(). The window will disappear if left idle for three seconds and reappear when the user touches the anchor view. Functions like show() and hide() have no effect when MediaController is created in an xml layout. MediaController will hide and show the buttons according to these rules: The \"previous\" and \"next\" buttons are hidden until setPrevNextListeners() has been called The \"previous\" and \"next\" buttons are visible but disabled if setPrevNextListeners() was called with null listeners The \"rewind\" and \"fastforward\" buttons are shown unless requested otherwise by using the MediaController(Context, boolean) constructor with the boolean set to false"}