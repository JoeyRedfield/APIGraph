{"Functions": {"refresh()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests a refresh from the network. This call is asynchronous, so the refresh will not occur immediately. In order to limit the frequency of network communication, the refresh method is throttled. After you call refresh(), you need to wait at least 15 minutes before calling this method again, otherwise, the subsequent call will be a no-op.", "history": "", "FullName": "public abstract void refresh ()"}, "setContainerAvailableListener(com.google.android.gms.tagmanager.ContainerHolder.ContainerAvailableListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#tagmanager#ContainerHolder#ContainerAvailableListener_E@", "the listener to register (or null to unregister)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener that will be called when a new container becomes available (whether in response to an explicit @B_com#google#android#gms#tagmanager#ContainerHolder#refresh_E@ call, via the automatic refreshing that occurs, or as part of the initial loading of the container). That new container won't become active until @B_com#google#android#gms#tagmanager#ContainerHolder#getContainer_E@ is called. If there is a pending container available when the listener is added, it will be called immediately. The listener will be called on the the looper of the handler with which the container was loaded, or the main looper if no such handler was provided.", "history": "", "FullName": "public abstract void setContainerAvailableListener (ContainerHolder.ContainerAvailableListener listener)"}, "getContainer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the last loaded container. If that container is not already active, makes it active, and makes any previously loaded container inactive.", "history": "", "FullName": "public abstract Container getContainer ()"}}, "Inheritance": [], "ClassName": "com.google.android.gms.tagmanager.ContainerHolder", "ClassDesc": "Holder for an active container. This container holder holds a container and also manages new versions of the container that may become available (through loading a saved version of the container from disk or from a network refresh). This holder can be a successful @B_com#google#android#gms#common#api#Result_E@, in which case @B_com#google#android#gms#tagmanager#ContainerHolder#getContainer_E@ returns a non-null container, and @B_com#google#android#gms#common#api#Result#getStatus_E@ returns Status.RESULT_SUCCESS, or an unsuccessful Result in which case getContainer returns null and getStatus returns an unsuccessful status. When a new version of a container becomes available, if a @B_com#google#android#gms#tagmanager#ContainerHolder#ContainerAvailableListener_E@ has been registered, it will be called. Any subsequent call to getContainer will make that container active, deactivate any previous container, and return the newly-active container. Only active containers fire tags; tags in non-active containers never fire. Although the ContainerHolder will download new versions of the container from the network on a regular basis (approximately every twelve hours), you can make an explicit request to download a new version with @B_com#google#android#gms#tagmanager#ContainerHolder#refresh_E@. If you ever want to stop container refreshing, call @B_com#google#android#gms#common#api#Releasable#release_E@. Network activity to check for new versions will stop, and last returned container via @B_com#google#android#gms#tagmanager#ContainerHolder#getContainer_E@ will no longer be usable."}