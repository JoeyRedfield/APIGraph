{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "The system identifier that was set with setSystemId, or null if setSystemId was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the system identifier that was set with setSystemId.", "history": "Added in API level 8", "FullName": "public String getSystemId ()"}, "getWriter()": {"Returns": [["@B_java#io#Writer_E@", "The character stream that was set with setWriter, or null if setWriter or the Writer constructor was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character stream that was set with setWriter.", "history": "Added in API level 8", "FullName": "public Writer getWriter ()"}, "StreamResult(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Must be a String that conforms to the URI syntax."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamResult from a URL.", "history": "Added in API level 8", "FullName": "public StreamResult (String systemId)"}, "getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "The byte stream that was set with setOutputStream, or null if setOutputStream or the ByteStream constructor was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the byte stream that was set with setOutputStream.", "history": "Added in API level 8", "FullName": "public OutputStream getOutputStream ()"}, "setOutputStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: A valid OutputStream reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the ByteStream that is to be written to. Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding.", "history": "Added in API level 8", "FullName": "public void setOutputStream (OutputStream outputStream)"}, "StreamResult(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: Must a non-null File reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamResult from a File.", "history": "Added in API level 8", "FullName": "public StreamResult (File f)"}, "StreamResult(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A valid Writer reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamResult from a character stream. Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding. However, there are times when it is useful to write to a character stream, such as when using a StringWriter.", "history": "Added in API level 8", "FullName": "public StreamResult (Writer writer)"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The system identifier as a URI string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the systemID that may be used in association with the byte or character stream, or, if neither is set, use this value as a writeable URI (probably a file name).", "history": "Added in API level 8", "FullName": "public void setSystemId (String systemId)"}, "setSystemId(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: Must a non-null File reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the system ID from a File reference. Note the use of @B_java#io#File#toURI_E@ and @B_java#io#File#toURL_E@. toURI() is preferred and used if possible. To allow JAXP 1.3 to run on J2SE 1.3, toURL() is used if a @B_java#lang#NoSuchMethodException_E@ is thrown by the attempt to use toURI().", "history": "Added in API level 8", "FullName": "public void setSystemId (File f)"}, "StreamResult(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: A valid OutputStream reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamResult from a byte stream. Normally, a stream should be used rather than a reader, so that the transformer may use instructions contained in the transformation instructions to control the encoding.", "history": "Added in API level 8", "FullName": "public StreamResult (OutputStream outputStream)"}, "StreamResult()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Zero-argument default constructor.", "history": "Added in API level 8", "FullName": "public StreamResult ()"}, "setWriter(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A valid Writer reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the writer that is to receive the result. Normally, a stream should be used rather than a writer, so that the transformer may use instructions contained in the transformation instructions to control the encoding. However, there are times when it is useful to write to a writer, such as when using a StringWriter.", "history": "Added in API level 8", "FullName": "public void setWriter (Writer writer)"}}, "Inheritance": [], "ClassName": "javax.xml.transform.stream.StreamResult", "ClassDesc": "Acts as an holder for a transformation result, which may be XML, plain Text, HTML, or some other form of markup."}