{"Functions": {"getBundle(java.lang.String, java.util.Locale)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a resource bundle using the specified base name and locale, and the caller's class loader. Calling this method is equivalent to calling getClassLoader() is run with the security privileges of ResourceBundle. See @B_java#util#ResourceBundle#getBundle_E@ for a complete description of the search and instantiation strategy.", "history": "added in API level 1", "FullName": "public static final ResourceBundle getBundle (String baseName, Locale locale)"}, "getKeys()": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration of the keys contained in this ResourceBundle and its parent bundles."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an enumeration of the keys.", "history": "Added in API level 1", "FullName": "public abstract Enumeration<String> getKeys ()"}, "getBundle(java.lang.String)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and the default locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a resource bundle using the specified base name, the default locale, and the caller's class loader. Calling this method is equivalent to calling getClassLoader() is run with the security privileges of ResourceBundle. See @B_java#util#ResourceBundle#getBundle_E@ for a complete description of the search and instantiation strategy.", "history": "Added in API level 1", "FullName": "public static final ResourceBundle getBundle (String baseName)"}, "getBaseBundleName()": {"Returns": [["@B_java#lang#String_E@", "The base name of the resource bundle, as provided to and expected by the ResourceBundle.getBundle(...) methods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ResourceBundle#getBundle_E@"], "Permissions": [], "Description": "Returns the base name of this bundle, if known, or null if unknown. If not null, then this is the value of the baseName parameter that was passed to the ResourceBundle.getBundle(...) method when the resource bundle was loaded.", "history": "Added in API level 26", "FullName": "public String getBaseBundleName ()"}, "getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader from which to load the resource bundle"], ["@B_java#util#ResourceBundle#Control_E@", "ResourceBundle.Control: the control which gives information for the resource bundle loading process"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName, targetLocale, loader, or control is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"], ["@B_java#lang#IllegalArgumentException_E@", "if the given control doesn't perform properly (e.g., control.getCandidateLocales returns null.) Note that validation of control is performed as needed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a resource bundle using the specified base name, target locale, class loader and control. Unlike the control specifies how to locate and instantiate resource bundles. Conceptually, the bundle loading process with the given control is performed in the following steps. During the resource bundle loading process above, this factory method looks up the cache before calling the @B_java#util#ResourceBundle#Control#newBundle_E@ method. If the time-to-live period of the resource bundle found in the cache has expired, the factory method calls the @B_java#util#ResourceBundle#Control#needsReload_E@ method to determine whether the resource bundle needs to be reloaded. If reloading is required, the factory method calls control.newBundle to reload the resource bundle. If control.newBundle returns null, the factory method puts a dummy resource bundle in the cache as a mark of nonexistent resource bundles in order to avoid lookup overhead for subsequent requests. Such dummy resource bundles are under the same expiration control as specified by control. All resource bundles loaded are cached by default. Refer to @B_java#util#ResourceBundle#Control#getTimeToLive_E@ for details. The following is an example of the bundle loading process with the default ResourceBundle.Control implementation. Conditions: Base bundle name: foo.bar.Messages Requested Locale: @B_java#util#Locale#ITALY_E@ Default Locale: @B_java#util#Locale#FRENCH_E@ Available resource bundles: foo/bar/Messages_fr.properties and foo/bar/Messages.properties First, getBundle tries loading a resource bundle in the following sequence. class foo.bar.Messages_it_IT file foo/bar/Messages_it_IT.properties class foo.bar.Messages_it file foo/bar/Messages_it.properties class foo.bar.Messages file foo/bar/Messages.properties At this point, getBundle finds foo/bar/Messages.properties, which is put on hold because it's the base bundle. getBundle calls @B_java#util#ResourceBundle#Control#getFallbackLocale_E@ which returns Locale.FRENCH. Next, getBundle tries loading a bundle in the following sequence. class foo.bar.Messages_fr file foo/bar/Messages_fr.properties class foo.bar.Messages file foo/bar/Messages.properties getBundle finds foo/bar/Messages_fr.properties and creates a ResourceBundle instance. Then, getBundle sets up its parent chain from the list of the candidate locales. Only foo/bar/Messages.properties is found in the list and getBundle creates a ResourceBundle instance that becomes the parent of the instance for foo/bar/Messages_fr.properties.", "history": "Added in API level 9", "FullName": "public static ResourceBundle getBundle (String baseName, Locale targetLocale, ClassLoader loader, ResourceBundle.Control control)"}, "getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and a Locale in locales"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"], ["@B_java#util#ResourceBundle#Control_E@", "ResourceBundle.Control: the control which gives information for the resource bundle loading process"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName, locales or control is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name in any of the locales can be found."], ["@B_java#lang#IllegalArgumentException_E@", "if the given control doesn't perform properly (e.g., control.getCandidateLocales returns null.) Note that validation of control is performed as needed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader. Calling this method is equivalent to calling getClassLoader() is run with the security privileges of ResourceBundle. See @B_java#util#ResourceBundle#getBundle_E@ for the complete description of the resource bundle loading process with a ResourceBundle.Control.", "history": "Added in API level 9", "FullName": "public static final ResourceBundle getBundle (String baseName, Locale targetLocale, ResourceBundle.Control control)"}, "getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader from which to load the resource bundle"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName, locale, or loader is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a resource bundle using the specified base name, locale, and class loader. This method behaves the same as calling @B_java#util#ResourceBundle#getBundle_E@ passing a default instance of @B_java#util#ResourceBundle#Control_E@. getBundle uses the base name, the specified locale, and the default locale (obtained from @B_java#util#Locale#getDefault_E@) to generate a sequence of Candidate bundle names where the final component is an empty string are omitted, along with the underscore. For example, if country is an empty string, the second and the fifth candidate bundle names above would be omitted. Also, if script is an empty string, the candidate names including script are omitted. For example, a locale with language \"de\" and variant \"JAVA\" will produce candidate names with base name \"MyResource\" below. getBundle then iterates over the candidate bundle names to find the first one for which it can instantiate an actual resource bundle. It uses the default controls' @B_java#util#ResourceBundle#Control#getFormats_E@ method, which generates two bundle names for each generated name, the first a class name and the second a properties file name. For each candidate bundle name, it attempts to create a resource bundle: First, it attempts to load a class using the generated class name. If such a class can be found and loaded using the specified class loader, is assignment compatible with ResourceBundle, is accessible from ResourceBundle, and can be instantiated, getBundle creates a new instance of this class and uses it as the result resource bundle. Otherwise, getBundle attempts to locate a property resource file using the generated properties file name. It generates a path name from the candidate bundle name by replacing all \".\" characters with \"/\" and appending the string \".properties\". It attempts to find a \"resource\" with this name using @B_java#lang#ClassLoader#getResource_E@. (Note that a \"resource\" in the sense of getResource has nothing to do with the contents of a resource bundle, it is just a container of data, such as a file.) If it finds a \"resource\", it attempts to create a new @B_java#util#PropertyResourceBundle_E@ instance from its contents. If successful, this instance becomes the result resource bundle. This continues until a result resource bundle is instantiated or the list of candidate bundle names is exhausted. If no matching resource bundle is found, the default control's @B_java#util#ResourceBundle#Control#getFallbackLocale_E@ method is called, which returns the current default locale. A new sequence of candidate locale names is generated using this locale and and searched again, as above. If still no result bundle is found, the base name alone is looked up. If this still fails, a MissingResourceException is thrown. Otherwise, getBundle examines the remainder of the candidate locale list that was used during the pass that generated the result resource bundle. (As before, candidate bundle names where the final component is an empty string are omitted.) When it comes to the end of the candidate list, it tries the plain bundle name. With each of the candidate bundle names it attempts to instantiate a resource bundle (first looking for a class and then a properties file, as described above). Whenever it succeeds, it calls the previously instantiated resource bundle's @B_java#util#ResourceBundle#setParent_E@ method with the new resource bundle. This continues until the list of names is exhausted or the current bundle already has a non-null parent. Once the parent chain is complete, the bundle is returned. getBundle caches instantiated resource bundles and might return the same resource bundle instance multiple times. baseName argument should be a fully qualified class name. However, for compatibility with earlier versions, Sun's Java SE Runtime Environments do not verify this, and so it is possible to access PropertyResourceBundles by specifying a path name (using \"/\") instead of a fully qualified class name (using \".\"). The following class and property files are provided: ResourceBundle for the \".class\" files, syntactically correct \".properties\" files). The default locale is Locale(\"en\", \"GB\"). Calling getBundle with the locale arguments below will instantiate resource bundles as follows: The file MyResources_fr_CH.properties is never used because it is hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties is also hidden by MyResources.class.", "history": "Added in API level 1", "FullName": "public static ResourceBundle getBundle (String baseName, Locale locale, ClassLoader loader)"}, "containsKey(java.lang.String)": {"Returns": [["boolean", "true if the given key is contained in this ResourceBundle or its parent bundles; false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the resource key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the given key is contained in this ResourceBundle or its parent bundles.", "history": "Added in API level 9", "FullName": "public boolean containsKey (String key)"}, "handleKeySet()": {"Returns": [["@B_java#util#Set_E@", "a Set of the keys contained only in this ResourceBundle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set of the keys contained only in this ResourceBundle. The default implementation returns a Set of the keys returned by the @B_java#util#ResourceBundle#getKeys_E@ method except for the ones for which the @B_java#util#ResourceBundle#handleGetObject_E@ method returns null. Once the Set has been created, the value is kept in this ResourceBundle in order to avoid producing the same Set in subsequent calls. Subclasses can override this method for faster handling.", "history": "Added in API level 9", "FullName": "protected Set<String> handleKeySet ()"}, "handleGetObject(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the object for the given key, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: the key for the desired object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an object for the given key from this resource bundle. Returns null if this resource bundle does not contain an object for the given key.", "history": "Added in API level 1", "FullName": "protected abstract Object handleGetObject (String key)"}, "ResourceBundle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "public ResourceBundle ()"}, "getStringArray(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string array for the given key"]], "Parameters": [["@B_java#lang#String_E@", "String: the key for the desired string array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null"], ["@B_java#util#MissingResourceException_E@", "if no object for the given key can be found"], ["@B_java#lang#ClassCastException_E@", "if the object found for the given key is not a string array"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a string array for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling", "history": "Added in API level 1", "FullName": "public final String[] getStringArray (String key)"}, "clearCache()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ResourceBundle#Control#getTimeToLive_E@"], "Permissions": [], "Description": "Removes all resource bundles from the cache that have been loaded using the caller's class loader.", "history": "Added in API level 9", "FullName": "public static final void clearCache ()"}, "getString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string for the given key"]], "Parameters": [["@B_java#lang#String_E@", "String: the key for the desired string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null"], ["@B_java#util#MissingResourceException_E@", "if no object for the given key can be found"], ["@B_java#lang#ClassCastException_E@", "if the object found for the given key is not a string"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a string for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling", "history": "Added in API level 1", "FullName": "public final String getString (String key)"}, "getBundle(java.lang.String,java.util.Locale)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#Locale_E@", "Locale: the locale for which a resource bundle is desired"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or locale is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets a resource bundle using the specified base name and locale, and the caller's class loader. Calling this method is equivalent to calling getClassLoader() is run with the security privileges of ResourceBundle. See @B_java#util#ResourceBundle#getBundle_E@ for a complete description of the search and instantiation strategy.", "history": "Added in API level 1", "FullName": "public static final ResourceBundle getBundle (String baseName, Locale locale)"}, "setParent(java.util.ResourceBundle)": {"Returns": [], "Parameters": [["@B_java#util#ResourceBundle_E@", "ResourceBundle: this bundle's parent bundle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent bundle of this bundle. The parent bundle is searched by @B_java#util#ResourceBundle#getObject_E@ when this bundle does not contain a particular resource.", "history": "Added in API level 1", "FullName": "protected void setParent (ResourceBundle parent)"}, "clearCache(java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if loader is null"]], "SeeAlso": ["@B_java#util#ResourceBundle#Control#getTimeToLive_E@"], "Permissions": [], "Description": "Removes all resource bundles from the cache that have been loaded using the given class loader.", "history": "Added in API level 9", "FullName": "public static final void clearCache (ClassLoader loader)"}, "getLocale()": {"Returns": [["@B_java#util#Locale_E@", "the locale of this resource bundle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the locale of this resource bundle. This method can be used after a call to getBundle() to determine whether the resource bundle returned really corresponds to the requested locale or is a fallback.", "history": "Added in API level 1", "FullName": "public Locale getLocale ()"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a Set of all keys contained in this ResourceBundle and its parent bundles."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set of all keys contained in this ResourceBundle and its parent bundles.", "history": "Added in API level 9", "FullName": "public Set<String> keySet ()"}, "getBundle(java.lang.String,java.util.ResourceBundle.Control)": {"Returns": [["@B_java#util#ResourceBundle_E@", "a resource bundle for the given base name and the default locale"]], "Parameters": [["@B_java#lang#String_E@", "String: the base name of the resource bundle, a fully qualified class name"], ["@B_java#util#ResourceBundle#Control_E@", "ResourceBundle.Control: the control which gives information for the resource bundle loading process"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if baseName or control is null"], ["@B_java#util#MissingResourceException_E@", "if no resource bundle for the specified base name can be found"], ["@B_java#lang#IllegalArgumentException_E@", "if the given control doesn't perform properly (e.g., control.getCandidateLocales returns null.) Note that validation of control is performed as needed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a resource bundle using the specified base name, the default locale and the specified control. Calling this method is equivalent to calling getClassLoader() is run with the security privileges of ResourceBundle. See @B_java#util#ResourceBundle#getBundle_E@ for the complete description of the resource bundle loading process with a ResourceBundle.Control.", "history": "Added in API level 9", "FullName": "public static final ResourceBundle getBundle (String baseName, ResourceBundle.Control control)"}, "getObject(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the object for the given key"]], "Parameters": [["@B_java#lang#String_E@", "String: the key for the desired object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null"], ["@B_java#util#MissingResourceException_E@", "if no object for the given key can be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an object for the given key from this resource bundle or one of its parents. This method first tries to obtain the object from this resource bundle using @B_java#util#ResourceBundle#handleGetObject_E@. If not successful, and the parent resource bundle is not null, it calls the parent's getObject method. If still not successful, it throws a MissingResourceException.", "history": "Added in API level 1", "FullName": "public final Object getObject (String key)"}}, "Inheritance": [], "ClassName": "java.util.ResourceBundle", "ClassDesc": "Resource bundles contain locale-specific objects. When your program needs a locale-specific resource, a String for example, your program can load it from the resource bundle that is appropriate for the current user's locale. In this way, you can write program code that is largely independent of the user's locale isolating most, if not all, of the locale-specific information in resource bundles. This allows you to write programs that can: be easily localized, or translated, into different languages handle multiple locales at once be easily modified later to support even more locales Resource bundles belong to families whose members share a common base name, but whose names also have additional components that identify their locales. For example, the base name of a family of resource bundles might be \"MyResources\". The family should have a default resource bundle which simply has the same name as its family - \"MyResources\" - and will be used as the bundle of last resort if a specific locale is not supported. The family can then provide as many locale-specific members as needed, for example a German one named \"MyResources_de\". Each resource bundle in a family contains the same items, but the items have been translated for the locale represented by that resource bundle. For example, both \"MyResources\" and \"MyResources_de\" may have a String that's used on a button for canceling operations. In \"MyResources\" the String may contain \"Cancel\" and in \"MyResources_de\" it may contain \"Abbrechen\". If there are different resources for different countries, you can make specializations: for example, \"MyResources_de_CH\" contains objects for the German language (de) in Switzerland (CH). If you want to only modify some of the resources in the specialization, you can do so. When your program needs a locale-specific object, it loads the ResourceBundle class using the @B_java#util#ResourceBundle#getBundle_E@ method: Resource bundles contain key/value pairs. The keys uniquely identify a locale-specific object in the bundle. Here's an example of a ListResourceBundle that contains two key/value pairs: Strings. In this example, the keys are \"OkKey\" and \"CancelKey\". In the above example, the values are also Strings--\"OK\" and \"Cancel\"--but they don't have to be. The values can be any type of object. You retrieve an object from resource bundle using the appropriate getter method. Because \"OkKey\" and \"CancelKey\" are both strings, you would use getString to retrieve them: MissingResourceException. Besides getString, ResourceBundle also provides a method for getting string arrays, getStringArray, as well as a generic getObject method for any other type of object. When using getObject, you'll have to cast the result to the appropriate type. For example: The Java Platform provides two subclasses of ResourceBundle, ListResourceBundle and PropertyResourceBundle, that provide a fairly simple way to create resources. As you saw briefly in a previous example, ListResourceBundle manages its resource as a list of key/value pairs. PropertyResourceBundle uses a properties file to manage its resources. If ListResourceBundle or PropertyResourceBundle do not suit your needs, you can write your own ResourceBundle subclass. Your subclasses must override two methods: handleGetObject and getKeys(). The implementation of a ResourceBundle subclass must be thread-safe if it's simultaneously used by multiple threads. The default implementations of the non-abstract methods in this class, and the methods in the direct known concrete subclasses ListResourceBundle and PropertyResourceBundle are thread-safe. @B_java#util#ResourceBundle#Control_E@ class provides information necessary to perform the bundle loading process by the getBundle factory methods that take a ResourceBundle.Control instance. You can implement your own subclass in order to enable non-standard resource bundle formats, change the search strategy, or define caching parameters. Refer to the descriptions of the class and the @B_java#util#ResourceBundle#getBundle_E@ factory method for details. getBundle factory methods are cached by default, and the factory methods return the same resource bundle instance multiple times if it has been cached. getBundle clients may clear the cache, manage the lifetime of cached resource bundle instances using time-to-live values, or specify not to cache resource bundle instances. Refer to the descriptions of the @B_java#util#ResourceBundle#clearCache_E@, @B_java#util#ResourceBundle#Control#getTimeToLive_E@, and @B_java#util#ResourceBundle#Control#needsReload_E@ for details. ResourceBundle subclass, MyResources, that manages two resources (for a larger number of resources you would probably use a Map). Notice that you don't need to supply a value if a \"parent-level\" ResourceBundle handles the same key with the same value (as for the okKey below). ResourceBundles. For example, you could have a set of bundles for exception messages, ExceptionResources (ExceptionResources_fr, ExceptionResources_de, ...), and one for widgets, WidgetResource (WidgetResources_fr, WidgetResources_de, ...); breaking up the resources however you like."}