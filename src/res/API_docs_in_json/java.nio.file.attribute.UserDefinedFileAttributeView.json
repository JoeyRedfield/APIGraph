{"Functions": {"list()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list containing the names of the file's user-defined"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list containing the names of the user-defined attributes.", "history": "Added in API level 26", "FullName": "public abstract List<String> list ()"}, "write(java.lang.String,java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer containing the attribute value"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the value of a user-defined attribute from a buffer. This method writes the value of the attribute from a given buffer as a sequence of bytes. The size of the value to transfer is r, where r is the number of bytes remaining in the buffer, that is src.remaining(). The sequence of bytes is transferred from the buffer starting at index p, where p is the buffer's position. Upon return, the buffer's position will be equal to p + n, where n is the number of bytes transferred; its limit will not have changed. If an attribute of the given name already exists then its value is replaced. If the attribute does not exist then it is created. If it implementation specific if a test to check for the existence of the attribute and the creation of attribute are atomic with respect to other file system activities. Where there is insufficient space to store the attribute, or the attribute name or value exceed an implementation specific maximum size then an IOException is thrown.", "history": "Added in API level 26", "FullName": "public abstract int write (String name, ByteBuffer src)"}, "read(java.lang.String,java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero"]], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The destination buffer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the destination buffer is read-only"], ["@B_java#io#IOException_E@", "If an I/O error occurs or there is insufficient space in the destination buffer for the attribute value"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": ["@B_java#nio#file#attribute#UserDefinedFileAttributeView#size_E@"], "Permissions": [], "Description": "Read the value of a user-defined attribute into a buffer. This method reads the value of the attribute into the given buffer as a sequence of bytes, failing if the number of bytes remaining in the buffer is insufficient to read the complete attribute value. The number of bytes transferred into the buffer is n, where n is the size of the attribute value. The first byte in the sequence is at index p and the last byte is at index p + n - 1, where p is the buffer's position. Upon return the buffer's position will be equal to p + n; its limit will not have changed. user.mimetype\".", "history": "Added in API level 26", "FullName": "public abstract int read (String name, ByteBuffer dst)"}, "size(java.lang.String)": {"Returns": [["int", "The size of the attribute value, in bytes."]], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "If the size of the attribute is larger than @B_java#lang#Integer#MAX_VALUE_E@"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the value of a user-defined attribute.", "history": "Added in API level 26", "FullName": "public abstract int size (String name)"}, "delete(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs or the attribute does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Deletes a user-defined attribute.", "history": "Added in API level 26", "FullName": "public abstract void delete (String name)"}, "write(java.lang.String, java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer containing the attribute value"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the value of a user-defined attribute from a buffer. This method writes the value of the attribute from a given buffer as a sequence of bytes. The size of the value to transfer is r, where r is the number of bytes remaining in the buffer, that is src.remaining(). The sequence of bytes is transferred from the buffer starting at index p, where p is the buffer's position. Upon return, the buffer's position will be equal to p + n, where n is the number of bytes transferred; its limit will not have changed. If an attribute of the given name already exists then its value is replaced. If the attribute does not exist then it is created. If it implementation specific if a test to check for the existence of the attribute and the creation of attribute are atomic with respect to other file system activities. Where there is insufficient space to store the attribute, or the attribute name or value exceed an implementation specific maximum size then an IOException is thrown.", "history": "added in API level 26", "FullName": "public abstract int write (String name, ByteBuffer src)"}, "read(java.lang.String, java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero"]], "Parameters": [["@B_java#lang#String_E@", "String: The attribute name"], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The destination buffer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the destination buffer is read-only"], ["@B_java#io#IOException_E@", "If an I/O error occurs or there is insufficient space in the destination buffer for the attribute value"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserDefinedAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": ["@B_java#nio#file#attribute#UserDefinedFileAttributeView#size_E@"], "Permissions": [], "Description": "Read the value of a user-defined attribute into a buffer. This method reads the value of the attribute into the given buffer as a sequence of bytes, failing if the number of bytes remaining in the buffer is insufficient to read the complete attribute value. The number of bytes transferred into the buffer is n, where n is the size of the attribute value. The first byte in the sequence is at index p and the last byte is at index p + n - 1, where p is the buffer's position. Upon return the buffer's position will be equal to p + n; its limit will not have changed. user.mimetype\".", "history": "added in API level 26", "FullName": "public abstract int read (String name, ByteBuffer dst)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "the name of the attribute view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this attribute view. Attribute views of this type have the name \"user\".", "history": "Added in API level 26", "FullName": "public abstract String name ()"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.UserDefinedFileAttributeView", "ClassDesc": "A file attribute view that provides a view of a file's user-defined attributes, sometimes known as extended attributes. User-defined file attributes are used to store metadata with a file that is not meaningful to the file system. It is primarily intended for file system implementations that support such a capability directly but may be emulated. The details of such emulation are highly implementation specific and therefore not specified. This FileAttributeView provides a view of a file's user-defined attributes as a set of name/value pairs, where the attribute name is represented by a String. An implementation may require to encode and decode from the platform or file system representation when accessing the attribute. The value has opaque content. This attribute view defines the @B_java#nio#file#attribute#UserDefinedFileAttributeView#read_E@ and @B_java#nio#file#attribute#UserDefinedFileAttributeView#write_E@ methods to read the value into or write from a @B_java#nio#ByteBuffer_E@. This FileAttributeView is not intended for use where the size of an attribute value is larger than @B_java#lang#Integer#MAX_VALUE_E@. User-defined attributes may be used in some implementations to store security related attributes so consequently, in the case of the default provider at least, all methods that access user-defined attributes require the RuntimePermission(\"accessUserDefinedAttributes\") permission when a security manager is installed. The @B_java#nio#file#FileStore#supportsFileAttributeView_E@ method may be used to test if a specific @B_java#nio#file#FileStore_E@ supports the storage of user-defined attributes. Where dynamic access to file attributes is required, the @B_java#nio#file#Files#getAttribute_E@ method may be used to read the attribute value. The attribute value is returned as a byte array (byte[]). The @B_java#nio#file#Files#setAttribute_E@ method may be used to write the value of a user-defined attribute from a buffer (as if by invoking the @B_java#nio#file#attribute#UserDefinedFileAttributeView#write_E@ method), or byte array (byte[])."}