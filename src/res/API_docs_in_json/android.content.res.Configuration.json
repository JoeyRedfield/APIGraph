{"Functions": {"updateFrom(android.content.res.Configuration)": {"Returns": [["int", "a bit mask of the changed fields, as per @B_android#content#res#Configuration#diff_E@ Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the fields from delta into this Configuration object, keeping track of which ones have changed. Any undefined fields in delta are ignored and not copied in to the current Configuration.", "history": "Added in API level 1", "FullName": "public int updateFrom (Configuration delta)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parcelable methods", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "readFromParcel(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 8", "FullName": "public void readFromParcel (Parcel source)"}, "getLocales()": {"Returns": [["@B_android#os#LocaleList_E@", "The locale list. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the locale list. This is the preferred way for getting the locales (instead of using the direct accessor to @B_android#content#res#Configuration#locale_E@, which would only provide the primary locale).", "history": "Added in API level 24", "FullName": "public LocaleList getLocales ()"}, "equals(android.content.res.Configuration)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean equals (Configuration that)"}, "setLocales(android.os.LocaleList)": {"Returns": [], "Parameters": [["@B_android#os#LocaleList_E@", "LocaleList: The locale list. If null, an empty LocaleList will be assigned. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the locale list. This is the preferred way for setting up the locales (instead of using the direct accessor or @B_android#content#res#Configuration#setLocale_E@). This will also set the layout direction according to the first locale in the list. Note that the layout direction will always come from the first locale in the locale list, even if the locale is not supported by the resources (the resources may only support another locale further down the list which has a different direction).", "history": "Added in API level 24", "FullName": "public void setLocales (LocaleList locales)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setLayoutDirection(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: The Locale. If null will set the layout direction to @B_android#view#View#LAYOUT_DIRECTION_LTR_E@. If not null will set it to the layout direction corresponding to the Locale."]], "Throws": [], "SeeAlso": ["@B_android#view#View_E@"], "Permissions": [], "Description": "Set the layout direction from a Locale.", "history": "Added in API level 17", "FullName": "public void setLayoutDirection (Locale loc)"}, "isScreenHdr()": {"Returns": [["boolean", "true if the screen has a high dynamic range, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the screen has a high dynamic range.", "history": "Added in API level 26", "FullName": "public boolean isScreenHdr ()"}, "isScreenWideColorGamut()": {"Returns": [["boolean", "true if the screen has a wide color gamut and wide color gamut rendering is supported, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the screen has a wide color gamut and wide color gamut rendering is supported by this device. When true, it implies the screen is colorspace aware but not necessarily color-managed. The final colors may still be changed by the screen depending on user settings.", "history": "Added in API level 26", "FullName": "public boolean isScreenWideColorGamut ()"}, "needNewResources(int, int)": {"Returns": [["boolean", "true if the resource needs to be loaded, false otherwise"]], "Parameters": [["int", "int: the mask of changes configurations as returned by @B_android#content#res#Configuration#updateFrom_E@Value is either 0 or combination of CONFIG_MCC, CONFIG_MNC, CONFIG_LOCALE, CONFIG_TOUCHSCREEN, CONFIG_KEYBOARD, CONFIG_KEYBOARD_HIDDEN, CONFIG_NAVIGATION, CONFIG_ORIENTATION, CONFIG_SCREEN_LAYOUT, CONFIG_UI_MODE, CONFIG_SCREEN_SIZE, CONFIG_SMALLEST_SCREEN_SIZE, CONFIG_DENSITY, CONFIG_LAYOUT_DIRECTION, CONFIG_COLOR_MODE or CONFIG_FONT_SCALE."], ["int", "int: the configuration changes that the resource can handle as given in @B_android#util#TypedValue#changingConfigurations_E@Value is either 0 or combination of CONFIG_MCC, CONFIG_MNC, CONFIG_LOCALE, CONFIG_TOUCHSCREEN, CONFIG_KEYBOARD, CONFIG_KEYBOARD_HIDDEN, CONFIG_NAVIGATION, CONFIG_ORIENTATION, CONFIG_SCREEN_LAYOUT, CONFIG_UI_MODE, CONFIG_SCREEN_SIZE, CONFIG_SMALLEST_SCREEN_SIZE, CONFIG_DENSITY, CONFIG_LAYOUT_DIRECTION, CONFIG_COLOR_MODE or CONFIG_FONT_SCALE."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if a new resource needs to be loaded from the bit set of configuration changes returned by @B_android#content#res#Configuration#updateFrom_E@.", "history": "added in API level 1", "FullName": "public static boolean needNewResources (int configChanges, int interestingChanges)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object that)"}, "needNewResources(int,int)": {"Returns": [["boolean", "true if the resource needs to be loaded, false otherwise"]], "Parameters": [["int", "int: the mask of changes configurations as returned by @B_android#content#res#Configuration#updateFrom_E@ Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"], ["int", "int: the configuration changes that the resource can handle as given in @B_android#util#TypedValue#changingConfigurations_E@ Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if a new resource needs to be loaded from the bit set of configuration changes returned by @B_android#content#res#Configuration#updateFrom_E@.", "history": "Added in API level 1", "FullName": "public static boolean needNewResources (int configChanges, int interestingChanges)"}, "Configuration()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct an invalid Configuration. This state is only suitable for constructing a Configuration delta that will be applied to some valid Configuration object. In order to create a valid standalone Configuration, you must call @B_android#content#res#Configuration#setToDefaults_E@. Example:", "history": "Added in API level 1", "FullName": "public Configuration ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getLayoutDirection()": {"Returns": [["int", "Returns @B_android#view#View#LAYOUT_DIRECTION_RTL_E@ if the configuration is @B_android#content#res#Configuration#SCREENLAYOUT_LAYOUTDIR_RTL_E@, otherwise @B_android#view#View#LAYOUT_DIRECTION_LTR_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the layout direction. Will be either @B_android#view#View#LAYOUT_DIRECTION_LTR_E@ or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@.", "history": "Added in API level 17", "FullName": "public int getLayoutDirection ()"}, "setToDefaults()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this object to the system defaults.", "history": "Added in API level 1", "FullName": "public void setToDefaults ()"}, "diff(android.content.res.Configuration)": {"Returns": [["int", "Returns a bit mask indicating which configuration values has changed, containing any combination of @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, or @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, or @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@. @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@."]], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a bit mask of the differences between this Configuration object and the given one. Does not change the values of either. Any undefined fields in", "history": "Added in API level 1", "FullName": "public int diff (Configuration delta)"}, "compareTo(android.content.res.Configuration)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int compareTo (Configuration that)"}, "setTo(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The Configuration object used to set the values of this Configuration's fields."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fields in this object to those in the given Configuration.", "history": "Added in API level 8", "FullName": "public void setTo (Configuration o)"}, "Configuration(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes a deep copy suitable for modification.", "history": "Added in API level 1", "FullName": "public Configuration (Configuration o)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "isScreenRound()": {"Returns": [["boolean", "true if the screen is rounded, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the screen has a round shape. Apps may choose to change styling based on this property, such as the alignment or layout of text or informational icons.", "history": "Added in API level 23", "FullName": "public boolean isScreenRound ()"}, "setLocale(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale. Can be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the locale list to a list of just one locale. This will also set the layout direction according to the locale. Note that after this is run, calling .equals() on the input locale and the @B_android#content#res#Configuration#locale_E@ attribute would return true if they are not null, but there is no guarantee that they would be the same object. See also the note about layout direction in @B_android#content#res#Configuration#setLocales_E@.", "history": "Added in API level 17", "FullName": "public void setLocale (Locale loc)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "isLayoutSizeAtLeast(int)": {"Returns": [["boolean", "Returns true if the current screen layout size is at least the given size."]], "Parameters": [["int", "int: The desired size, either @B_android#content#res#Configuration#SCREENLAYOUT_SIZE_SMALL_E@, @B_android#content#res#Configuration#SCREENLAYOUT_SIZE_NORMAL_E@, @B_android#content#res#Configuration#SCREENLAYOUT_SIZE_LARGE_E@, or @B_android#content#res#Configuration#SCREENLAYOUT_SIZE_XLARGE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the Configuration's current @B_android#content#res#Configuration#screenLayout_E@ is at least the given size.", "history": "Added in API level 11", "FullName": "public boolean isLayoutSizeAtLeast (int size)"}}, "Inheritance": [], "ClassName": "android.content.res.Configuration", "ClassDesc": "This class describes all device configuration information that can impact the resources the application retrieves. This includes both user-specified configuration options (locale list and scaling) as well as device configurations (such as input modes, screen size and screen orientation). You can acquire this object from @B_android#content#res#Resources_E@, using @B_android#content#res#Resources#getConfiguration_E@. Thus, from an activity, you can get it by chaining the request with @B_android#view#ContextThemeWrapper#getResources_E@:"}