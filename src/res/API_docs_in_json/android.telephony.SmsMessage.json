{"Functions": {"isMwiDontStore()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "returns true if this message is a \"Message Waiting Indication Group: Discard Message\" notification and should not be stored.", "history": "Added in API level 4", "FullName": "public boolean isMwiDontStore ()"}, "createFromPdu(byte[], java.lang.String)": {"Returns": [["@B_android#telephony#SmsMessage_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte: the message PDU from the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ intent"], ["@B_java#lang#String_E@", "String: the format extra from the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ intent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an SmsMessage from a raw PDU with the specified message format. The message format is passed in the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ as the format String extra, and will be either \"3gpp\" for GSM/UMTS/LTE messages in 3GPP format or \"3gpp2\" for CDMA/LTE messages in 3GPP2 format.", "history": "added in API level 23", "FullName": "public static SmsMessage createFromPdu (byte[] pdu, String format)"}, "calculateLength(java.lang.String,boolean)": {"Returns": [["int[]", "an int[4] with int[0] being the number of SMS's required, int[1] the number of code units used, and int[2] is the number of code units remaining until the next message. int[3] is the encoding type that should be used for the message."]], "Parameters": [["@B_java#lang#String_E@", "String: the message to encode"], ["boolean", "boolean: if true, characters that are not part of the radio specific (GSM / CDMA) alphabet encoding are converted to as a single space characters. If false, a messageBody containing non-GSM or non-CDMA alphabet characters are encoded using 16-bit encoding."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message, given the current encoding.", "history": "Added in API level 4", "FullName": "public static int[] calculateLength (String messageBody, boolean use7bitOnly)"}, "getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)": {"Returns": [["@B_android#telephony#SmsMessage#SubmitPdu_E@", "a SubmitPdu containing the encoded SC address, if applicable, and the encoded message. Returns null on encode error."]], "Parameters": [["@B_java#lang#String_E@", "String: Service Centre address. Null means use default."], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an SMS-SUBMIT PDU for a destination address and a message. This method will not attempt to use any GSM national language 7 bit encodings.", "history": "Added in API level 4", "FullName": "public static SmsMessage.SubmitPdu getSubmitPdu (String scAddress, String destinationAddress, String message, boolean statusReportRequested)"}, "getDisplayMessageBody()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the message body, or email message body if this message was from an email gateway. Returns null if message body unavailable.", "history": "Added in API level 4", "FullName": "public String getDisplayMessageBody ()"}, "calculateLength(java.lang.CharSequence, boolean)": {"Returns": [["int[]", "an int[4] with int[0] being the number of SMS's required, int[1] the number of code units used, and int[2] is the number of code units remaining until the next message. int[3] is an indicator of the encoding code unit size (see the ENCODING_* definitions in SmsConstants)"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the message to encode"], ["boolean", "boolean: if true, characters that are not part of the radio-specific 7-bit encoding are counted as single space chars. If false, and if the messageBody contains non-7-bit encodable characters, length is calculated using a 16-bit encoding."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message.", "history": "added in API level 4", "FullName": "public static int[] calculateLength (CharSequence msgBody, boolean use7bitOnly)"}, "isReplyPathPresent()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff the TP-Reply-Path bit is set in this message.", "history": "Added in API level 4", "FullName": "public boolean isReplyPathPresent ()"}, "createFromPdu(byte[],java.lang.String)": {"Returns": [["@B_android#telephony#SmsMessage_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte: the message PDU from the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ intent"], ["@B_java#lang#String_E@", "String: the format extra from the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ intent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an SmsMessage from a raw PDU with the specified message format. The message format is passed in the @B_android#provider#Telephony#Sms#Intents#SMS_RECEIVED_ACTION_E@ as the format String extra, and will be either \"3gpp\" for GSM/UMTS/LTE messages in 3GPP format or \"3gpp2\" for CDMA/LTE messages in 3GPP2 format.", "history": "Added in API level 23", "FullName": "public static SmsMessage createFromPdu (byte[] pdu, String format)"}, "isMWISetMessage()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "returns true if this message is a CPHS voicemail / message waiting indicator (MWI) set message", "history": "Added in API level 4", "FullName": "public boolean isMWISetMessage ()"}, "createFromPdu(byte[])": {"Returns": [["@B_android#telephony#SmsMessage_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telephony#SmsMessage#createFromPdu_E@ instead. Create an SmsMessage from a raw PDU. Guess format based on Voice technology first, if it fails use other format. All applications which handle incoming SMS messages by processing the SMS_RECEIVED_ACTION broadcast intent format String extra from the intent into the new method createFromPdu(byte[], String) which takes an extra format parameter. This is required in order to correctly decode the PDU on devices that require support for both 3GPP and 3GPP2 formats at the same time, such as dual-mode GSM/CDMA and CDMA/LTE phones.", "history": "Added in API level 4 Deprecated in API level 23", "FullName": "public static SmsMessage createFromPdu (byte[] pdu)"}, "getStatusOnIcc()": {"Returns": [["int", "the status of the message on the ICC. These are: SmsManager.STATUS_ON_ICC_FREE SmsManager.STATUS_ON_ICC_READ SmsManager.STATUS_ON_ICC_UNREAD SmsManager.STATUS_ON_ICC_SEND SmsManager.STATUS_ON_ICC_UNSENT"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the status of the message on the ICC (read, unread, sent, unsent).", "history": "Added in API level 4", "FullName": "public int getStatusOnIcc ()"}, "getUserData()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "returns the user data section minus the user data header if one was present.", "history": "Added in API level 4", "FullName": "public byte[] getUserData ()"}, "getPdu()": {"Returns": [["byte[]", "the raw PDU for the message."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw PDU for the message.", "history": "Added in API level 4", "FullName": "public byte[] getPdu ()"}, "getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)": {"Returns": [["@B_android#telephony#SmsMessage#SubmitPdu_E@", "a SubmitPdu containing the encoded SC address, if applicable, and the encoded message. Returns null on encode error."]], "Parameters": [["@B_java#lang#String_E@", "String: Service Centre address. null == use default"], ["@B_java#lang#String_E@", "String: the address of the destination for the message"], ["short", "short: the port to deliver the message to at the destination"], ["byte[]", "byte: the data for the message"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an SMS-SUBMIT PDU for a data message to a destination address & port. This method will not attempt to use any GSM national language 7 bit encodings.", "history": "Added in API level 4", "FullName": "public static SmsMessage.SubmitPdu getSubmitPdu (String scAddress, String destinationAddress, short destinationPort, byte[] data, boolean statusReportRequested)"}, "getProtocolIdentifier()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get protocol identifier.", "history": "Added in API level 4", "FullName": "public int getProtocolIdentifier ()"}, "getStatus()": {"Returns": [["int", "0 indicates the previously sent message was received. See TS 23.040, 9.9.2.3.15 and C.S0015-B, v2.0, 4.5.21 for a description of other possible values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "GSM: For an SMS-STATUS-REPORT message, this returns the status field from the status report. This field indicates the status of a previously submitted SMS, if requested. See TS 23.040, 9.2.3.15 TP-Status for a description of values. CDMA: For not interfering with status codes from GSM, the value is shifted to the bits 31-16. The value is composed of an error class (bits 25-24) and a status code (bits 23-16). Possible codes are described in C.S0015-B, v2.0, 4.5.21.", "history": "Added in API level 4", "FullName": "public int getStatus ()"}, "isMWIClearMessage()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "returns true if this message is a CPHS voicemail / message waiting indicator (MWI) clear message", "history": "Added in API level 4", "FullName": "public boolean isMWIClearMessage ()"}, "isReplace()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See TS 23.040 9.2.3.9 returns true if this is a \"replace short message\" SMS", "history": "Added in API level 4", "FullName": "public boolean isReplace ()"}, "getMessageClass()": {"Returns": [["@B_android#telephony#SmsMessage#MessageClass_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the class of this message.", "history": "Added in API level 4", "FullName": "public SmsMessage.MessageClass getMessageClass ()"}, "getPseudoSubject()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unofficial convention of a subject line enclosed in parens empty string if not present", "history": "Added in API level 4", "FullName": "public String getPseudoSubject ()"}, "getIndexOnSim()": {"Returns": [["int", "the record index of the message on the SIM, or -1 if this SmsMessage was not created from a SIM SMS EF record."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use getIndexOnIcc instead. Returns the record index of the message on the SIM (1-based index).", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public int getIndexOnSim ()"}, "calculateLength(java.lang.CharSequence,boolean)": {"Returns": [["int[]", "an int[4] with int[0] being the number of SMS's required, int[1] the number of code units used, and int[2] is the number of code units remaining until the next message. int[3] is an indicator of the encoding code unit size (see the ENCODING_* definitions in SmsConstants)."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the message to encode"], ["boolean", "boolean: if true, characters that are not part of the radio-specific 7-bit encoding are counted as single space chars. If false, and if the messageBody contains non-7-bit encodable characters, length is calculated using a 16-bit encoding."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message.", "history": "Added in API level 4", "FullName": "public static int[] calculateLength (CharSequence msgBody, boolean use7bitOnly)"}, "getIndexOnIcc()": {"Returns": [["int", "the record index of the message on the ICC, or -1 if this SmsMessage was not created from a ICC SMS EF record."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the record index of the message on the ICC (1-based index).", "history": "Added in API level 4", "FullName": "public int getIndexOnIcc ()"}, "isStatusReportMessage()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true iff the message is a SMS-STATUS-REPORT message.", "history": "Added in API level 4", "FullName": "public boolean isStatusReportMessage ()"}, "getMessageBody()": {"Returns": [["@B_java#lang#String_E@", "message body if there is one, otherwise null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the message body as a String, if it exists and is text based.", "history": "Added in API level 4", "FullName": "public String getMessageBody ()"}, "getStatusOnSim()": {"Returns": [["int", "the status of the message on the SIM. These are: SmsManager.STATUS_ON_SIM_FREE SmsManager.STATUS_ON_SIM_READ SmsManager.STATUS_ON_SIM_UNREAD SmsManager.STATUS_ON_SIM_SEND SmsManager.STATUS_ON_SIM_UNSENT"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use getStatusOnIcc instead. Returns the status of the message on the SIM (read, unread, sent, unsent).", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public int getStatusOnSim ()"}, "isEmail()": {"Returns": [["boolean", "true if this message came through an email gateway and email sender / subject / parsed body are available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if message is an email.", "history": "Added in API level 4", "FullName": "public boolean isEmail ()"}, "getDisplayOriginatingAddress()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the originating address, or email from address if this message was from an email gateway. Returns null if originating address unavailable.", "history": "Added in API level 4", "FullName": "public String getDisplayOriginatingAddress ()"}, "getEmailBody()": {"Returns": [["@B_java#lang#String_E@", "if isEmail() is true, body of the email sent through the gateway. null otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 4", "FullName": "public String getEmailBody ()"}, "getEmailFrom()": {"Returns": [["@B_java#lang#String_E@", "if isEmail() is true, email from address of email sent through the gateway. null otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 4", "FullName": "public String getEmailFrom ()"}, "getTimestampMillis()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the service centre timestamp in currentTimeMillis() format", "history": "Added in API level 4", "FullName": "public long getTimestampMillis ()"}, "getOriginatingAddress()": {"Returns": [["@B_java#lang#String_E@", "a String representation of the address; null if unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the originating address (sender) of this SMS message in String form or null if unavailable. If the address is a GSM-formatted address, it will be in a format specified by 3GPP 23.040 Sec 9.1.2.5. If it is a CDMA address, it will be a format specified by 3GPP2 C.S005-D Table 2.7.1.3.2.4-2. The choice of format is carrier-specific, so callers of the should be careful to avoid assumptions about the returned content.", "history": "Added in API level 4", "FullName": "public String getOriginatingAddress ()"}, "getServiceCenterAddress()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the address of the SMS service center that relayed this message or null if there is none.", "history": "Added in API level 4", "FullName": "public String getServiceCenterAddress ()"}, "isCphsMwiMessage()": {"Returns": [["boolean", "true if this is a CPHS MWI toggle message See CPHS 4.2 section B.4.2"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true for CPHS MWI toggle message.", "history": "Added in API level 4", "FullName": "public boolean isCphsMwiMessage ()"}, "calculateLength(java.lang.String, boolean)": {"Returns": [["int[]", "an int[4] with int[0] being the number of SMS's required, int[1] the number of code units used, and int[2] is the number of code units remaining until the next message. int[3] is the encoding type that should be used for the message."]], "Parameters": [["@B_java#lang#String_E@", "String: the message to encode"], ["boolean", "boolean: if true, characters that are not part of the radio specific (GSM / CDMA) alphabet encoding are converted to as a single space characters. If false, a messageBody containing non-GSM or non-CDMA alphabet characters are encoded using 16-bit encoding."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message, given the current encoding.", "history": "added in API level 4", "FullName": "public static int[] calculateLength (String messageBody, boolean use7bitOnly)"}, "getTPLayerLengthForPDU(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the length in bytes (not hex chars) less the SMSC header FIXME: This method is only used by a CTS test case that isn't run on CDMA devices. We should probably deprecate it and remove the obsolete test case.", "history": "Added in API level 4", "FullName": "public static int getTPLayerLengthForPDU (String pdu)"}}, "Inheritance": [], "ClassName": "android.telephony.SmsMessage", "ClassDesc": "A Short Message Service message."}