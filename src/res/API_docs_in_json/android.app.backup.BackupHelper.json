{"Functions": {"writeNewStateDescription(android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: A @B_android#os#ParcelFileDescriptor_E@ to which the new state will be written."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#app#backup#BackupAgentHelper_E@ after a restore operation to write the backup state file corresponding to the data as processed by the helper. The data written here will be available to the helper during the next call to its @B_android#app#backup#BackupHelper#performBackup_E@ method. This method will be called even if the handler's @B_android#app#backup#BackupHelper#restoreEntity_E@ method was never invoked during the restore operation. newState file descriptor.", "history": "Added in API level 8", "FullName": "public abstract void writeNewStateDescription (ParcelFileDescriptor newState)"}, "restoreEntity(android.app.backup.BackupDataInputStream)": {"Returns": [], "Parameters": [["@B_android#app#backup#BackupDataInputStream_E@", "BackupDataInputStream: An open @B_android#app#backup#BackupDataInputStream_E@ from which the backup data can be read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#app#backup#BackupAgentHelper_E@ to restore a single entity from the restore data set. This method will be called for each entity in the data set that belongs to this handler. data stream. Do not read more than @B_android#app#backup#BackupDataInputStream#size_E@ bytes from data.", "history": "Added in API level 8", "FullName": "public abstract void restoreEntity (BackupDataInputStream data)"}, "performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: An open, read-only @B_android#os#ParcelFileDescriptor_E@ pointing to the last backup state provided by the application. May be null, in which case no prior state is being provided and the application should perform a full backup."], ["@B_android#app#backup#BackupDataOutput_E@", "BackupDataOutput: An open, read/write @B_android#app#backup#BackupDataOutput_E@ pointing to the backup data destination. Typically the application will use backup helper classes to write to this file."], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: An open, read/write @B_android#os#ParcelFileDescriptor_E@ pointing to an empty file. The application should record the final backup state here after writing the requested data to the data output stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Based on oldState, determine what application content needs to be backed up, write it to data, and fill in newState with the complete state as it exists now. Implementing this method is much like implementing @B_android#app#backup#BackupAgent#onBackup_E@ \u2014 the method parameters are the same. When this method is invoked the oldState descriptor points to the beginning of the state data written during this helper's previous backup operation, and the newState descriptor points to the file location at which the helper should write its new state after performing the backup operation. oldState or the newState file descriptors. It is essential that when reading the helper's saved state from the oldState file, no extra content is consumed beyond what was stored by this helper. If more old state data is read, even accidentally, it will make it impossible for additional helpers that may be invoked after this one to properly reconstruct their prior state.", "history": "Added in API level 8", "FullName": "public abstract void performBackup (ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)"}}, "Inheritance": [], "ClassName": "android.app.backup.BackupHelper", "ClassDesc": "Defines the calling interface that @B_android#app#backup#BackupAgentHelper_E@ uses when dispatching backup and restore operations to the installed helpers. Applications can define and install their own helpers as well as using those provided as part of the Android framework. Although multiple helper objects may be installed simultaneously, each helper is responsible only for handling its own data, and will not see entities created by other components within the backup system. Invocations of multiple helpers are performed sequentially by the @B_android#app#backup#BackupAgentHelper_E@, with each helper given a chance to access its own saved state from within the state record produced during the previous backup operation."}