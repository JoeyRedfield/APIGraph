{"Functions": {"getDeclaredLength()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#res#AssetFileDescriptor#getDeclaredLength_E@"], "Permissions": [], "Description": "Return the actual number of bytes that were declared when the AssetFileDescriptor was constructed. Will be @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@ if the length was not declared, meaning data should be read to the end of the file.", "history": "Added in API level 3", "FullName": "public long getDeclaredLength ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "AssetFileDescriptor(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: The underlying file descriptor."], ["long", "long: The location within the file that the asset starts. This must be 0 if length is UNKNOWN_LENGTH."], ["long", "long: The number of bytes of the asset, or @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@ if it extends to the end of the file."], ["@B_android#os#Bundle_E@", "Bundle: additional details that can be used to interpret the underlying file descriptor. May be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new AssetFileDescriptor from the given values.", "history": "Added in API level 19", "FullName": "public AssetFileDescriptor (ParcelFileDescriptor fd, long startOffset, long length, Bundle extras)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling getParcelFileDescriptor().close().", "history": "Added in API level 1", "FullName": "public void close ()"}, "createOutputStream()": {"Returns": [["@B_java#io#FileOutputStream_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create and return a new auto-close output stream for this asset. This will either return a full asset @B_android#content#res#AssetFileDescriptor#AutoCloseOutputStream_E@, or an underlying @B_android#os#ParcelFileDescriptor#AutoCloseOutputStream_E@ depending on whether the the object represents a complete file or sub-section of a file. You should only call this once for a particular asset.", "history": "Added in API level 3", "FullName": "public FileOutputStream createOutputStream ()"}, "getStartOffset()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the byte offset where this asset entry's data starts.", "history": "Added in API level 1", "FullName": "public long getStartOffset ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getLength()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#res#AssetFileDescriptor#getDeclaredLength_E@"], "Permissions": [], "Description": "Returns the total number of bytes of this asset entry's data. May be @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@ if the asset extends to the end of the file. If the AssetFileDescriptor was constructed with @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@, this will use @B_android#os#ParcelFileDescriptor#getStatSize_E@ to find the total size of the file, returning that number if found or @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@ if it could not be determined.", "history": "Added in API level 1", "FullName": "public long getLength ()"}, "AssetFileDescriptor(android.os.ParcelFileDescriptor,long,long)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: The underlying file descriptor."], ["long", "long: The location within the file that the asset starts. This must be 0 if length is UNKNOWN_LENGTH."], ["long", "long: The number of bytes of the asset, or @B_android#content#res#AssetFileDescriptor#UNKNOWN_LENGTH_E@ if it extends to the end of the file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new AssetFileDescriptor from the given values.", "history": "Added in API level 1", "FullName": "public AssetFileDescriptor (ParcelFileDescriptor fd, long startOffset, long length)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns any additional details that can be used to interpret the underlying file descriptor. May be null.", "history": "Added in API level 19", "FullName": "public Bundle getExtras ()"}, "createInputStream()": {"Returns": [["@B_java#io#FileInputStream_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create and return a new auto-close input stream for this asset. This will either return a full asset @B_android#content#res#AssetFileDescriptor#AutoCloseInputStream_E@, or an underlying @B_android#os#ParcelFileDescriptor#AutoCloseInputStream_E@ depending on whether the the object represents a complete file or sub-section of a file. You should only call this once for a particular asset.", "history": "Added in API level 3", "FullName": "public FileInputStream createInputStream ()"}, "getParcelFileDescriptor()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The AssetFileDescriptor contains its own ParcelFileDescriptor, which in addition to the normal FileDescriptor object also allows you to close the descriptor when you are done with it.", "history": "Added in API level 1", "FullName": "public ParcelFileDescriptor getParcelFileDescriptor ()"}, "getFileDescriptor()": {"Returns": [["@B_java#io#FileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the FileDescriptor that can be used to read the data in the file.", "history": "Added in API level 1", "FullName": "public FileDescriptor getFileDescriptor ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}}, "Inheritance": [], "ClassName": "android.content.res.AssetFileDescriptor", "ClassDesc": "File descriptor of an entry in the AssetManager. This provides your own opened FileDescriptor that can be used to read the data, as well as the offset and length of that entry's data in the file."}