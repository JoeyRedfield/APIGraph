{"Functions": {"SecretKeySpec(byte[],java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the key material of the secret key. The contents of the array are copied to protect against subsequent modification."], ["@B_java#lang#String_E@", "String: the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if algorithm is null or key is null or empty."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secret key from the given byte array. This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if key is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific @B_javax#crypto#spec#DESKeySpec_E@) should be used.", "history": "Added in API level 1", "FullName": "public SecretKeySpec (byte[] key, String algorithm)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the secret key algorithm."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the algorithm associated with this secret key.", "history": "Added in API level 1", "FullName": "public String getAlgorithm ()"}, "SecretKeySpec(byte[], java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the key material of the secret key. The contents of the array are copied to protect against subsequent modification."], ["@B_java#lang#String_E@", "String: the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if algorithm is null or key is null or empty."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secret key from the given byte array. This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if key is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific @B_javax#crypto#spec#DESKeySpec_E@) should be used.", "history": "added in API level 1", "FullName": "public SecretKeySpec (byte[] key, String algorithm)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are considered equal, false if obj is null or otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests for equality between the specified object and this object. Two SecretKeySpec objects are considered equal if they are both SecretKey instances which have the same case-insensitive algorithm name and key encoding.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "SecretKeySpec(byte[],int,int,java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the key material of the secret key. The first len bytes of the array beginning at offset inclusive are copied to protect against subsequent modification."], ["int", "int: the offset in key where the key material starts."], ["int", "int: the length of the key material."], ["@B_java#lang#String_E@", "String: the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if algorithm is null or key is null, empty, or too short, i.e. key.length-offset<len."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "is thrown if offset or len index bytes outside the key."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive. The bytes that constitute the secret key are those between key[offset] and key[offset+len-1] inclusive. This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if key is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific key specification class (in this case: @B_javax#crypto#spec#DESKeySpec_E@) must be used.", "history": "Added in API level 1", "FullName": "public SecretKeySpec (byte[] key, int offset, int len, String algorithm)"}, "SecretKeySpec(byte[], int, int, java.lang.String)": {"Returns": [], "Parameters": [["byte[]", "byte: the key material of the secret key. The first len bytes of the array beginning at offset inclusive are copied to protect against subsequent modification."], ["int", "int: the offset in key where the key material starts."], ["int", "int: the length of the key material."], ["@B_java#lang#String_E@", "String: the name of the secret-key algorithm to be associated with the given key material. See Appendix A in the Java Cryptography Architecture Reference Guide for information about standard algorithm names."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if algorithm is null or key is null, empty, or too short, i.e. key.length-offset<len."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "is thrown if offset or len index bytes outside the key."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive. The bytes that constitute the secret key are those between key[offset] and key[offset+len-1] inclusive. This constructor does not check if the given bytes indeed specify a secret key of the specified algorithm. For example, if the algorithm is DES, this constructor does not check if key is 8 bytes long, and also does not check for weak or semi-weak keys. In order for those checks to be performed, an algorithm-specific key specification class (in this case: @B_javax#crypto#spec#DESKeySpec_E@) must be used.", "history": "added in API level 1", "FullName": "public SecretKeySpec (byte[] key, int offset, int len, String algorithm)"}, "getEncoded()": {"Returns": [["byte[]", "the key material. Returns a new array each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key material of this secret key.", "history": "Added in API level 1", "FullName": "public byte[] getEncoded ()"}, "getFormat()": {"Returns": [["@B_java#lang#String_E@", "the string \"RAW\"."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the encoding format for this secret key.", "history": "Added in API level 1", "FullName": "public String getFormat ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates a hash code value for the object. Objects that are equal will also have the same hashcode.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "javax.crypto.spec.SecretKeySpec", "ClassDesc": "This class specifies a secret key in a provider-independent fashion. It can be used to construct a SecretKey from a byte array, without having to go through a (provider-based) SecretKeyFactory. This class is only useful for raw secret keys that can be represented as a byte array and have no key parameters associated with them, e.g., DES or Triple DES keys."}