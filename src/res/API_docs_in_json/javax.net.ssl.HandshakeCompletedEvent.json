{"Functions": {"getPeerPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the peer's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer's identity has not been verified"]], "SeeAlso": ["@B_javax#net#ssl#HandshakeCompletedEvent#getPeerCertificates_E@", "@B_javax#net#ssl#HandshakeCompletedEvent#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was established as part of defining the session.", "history": "Added in API level 1", "FullName": "public Principal getPeerPrincipal ()"}, "getSocket()": {"Returns": [["@B_javax#net#ssl#SSLSocket_E@", "the socket on which the connection was made."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket which is the source of this event. (This is a convenience function, to let applications write code without type casts.)", "history": "Added in API level 1", "FullName": "public SSLSocket getSocket ()"}, "getPeerCertificateChain()": {"Returns": [["@B_javax#security#cert#X509Certificate_E@", "an ordered array of peer X.509 certificates, with the peer's own certificate first followed by any certificate authorities. (The certificates are in the original JSSE @B_javax#security#cert#X509Certificate_E@ format)."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer is not verified."]], "SeeAlso": ["@B_javax#net#ssl#HandshakeCompletedEvent#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was identified as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException. Note: this method exists for compatibility with previous releases. New applications should use @B_javax#net#ssl#HandshakeCompletedEvent#getPeerCertificates_E@ instead.", "history": "Added in API level 1", "FullName": "public X509Certificate[] getPeerCertificateChain ()"}, "getLocalCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of certificates, with the local certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HandshakeCompletedEvent#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the certificate(s) that were sent to the peer during handshaking. Note: This method is useful only when using certificate-based cipher suites. When multiple certificates are available for use in a handshake, the implementation chooses what it considers the \"best\" certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually used.", "history": "Added in API level 1", "FullName": "public Certificate[] getLocalCertificates ()"}, "getLocalPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the principal sent to the peer. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HandshakeCompletedEvent#getLocalCertificates_E@", "@B_javax#net#ssl#HandshakeCompletedEvent#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the principal that was sent to the peer during handshaking.", "history": "Added in API level 1", "FullName": "public Principal getLocalPrincipal ()"}, "getCipherSuite()": {"Returns": [["@B_java#lang#String_E@", "the name of the cipher suite negotiated during this session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the cipher suite in use by the session which was produced by the handshake. (This is a convenience method for getting the ciphersuite from the SSLsession.)", "history": "Added in API level 1", "FullName": "public String getCipherSuite ()"}, "getSession()": {"Returns": [["@B_javax#net#ssl#SSLSession_E@", "the SSLSession for this handshake"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the session that triggered this event.", "history": "Added in API level 1", "FullName": "public SSLSession getSession ()"}, "getPeerCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of the peer certificates, with the peer's own certificate first followed by any certificate authorities."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer is not verified."]], "SeeAlso": ["@B_javax#net#ssl#HandshakeCompletedEvent#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was established as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException.", "history": "Added in API level 1", "FullName": "public Certificate[] getPeerCertificates ()"}, "HandshakeCompletedEvent(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLSocket_E@", "SSLSocket: the SSLSocket acting as the source of the event"], ["@B_javax#net#ssl#SSLSession_E@", "SSLSession: the SSLSession this event is associated with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new HandshakeCompletedEvent.", "history": "Added in API level 1", "FullName": "public HandshakeCompletedEvent (SSLSocket sock, SSLSession s)"}}, "Inheritance": ["@B_java#util#EventObject_E@"], "ClassName": "javax.net.ssl.HandshakeCompletedEvent", "ClassDesc": "This event indicates that an SSL handshake completed on a given SSL connection. All of the core information about that handshake's result is captured through an \"SSLSession\" object. As a convenience, this event class provides direct access to some important session attributes. The source of this event is the SSLSocket on which handshaking just completed."}