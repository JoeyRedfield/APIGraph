{"Functions": {"forEach(java.util.function.Consumer<? super K>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void forEach (Consumer<? super K> action)"}, "getMap()": {"Returns": [["@B_java#util#concurrent#ConcurrentHashMap_E@", "the map backing this view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the map backing this view.", "history": "added in API level 24", "FullName": "public ConcurrentHashMap<K, V> getMap ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this collection"]], "Parameters": [["T[]", "T: the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#Collection#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose", "history": "added in API level 24", "FullName": "public final T[] toArray (T[] a)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection.", "history": "added in API level 24", "FullName": "public final boolean removeAll (Collection<?> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this view, by removing all the mappings from the map backing this view.", "history": "added in API level 24", "FullName": "public final void clear ()"}, "addAll(java.util.Collection<?extendsK>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the collection or any of its elements are null"], ["@B_java#lang#UnsupportedOperationException_E@", "if no default mapped value for additions was provided"]], "SeeAlso": [], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set, as if by calling @B_java#util#Set#add_E@ on each one.", "history": "Added in API level 24", "FullName": "public boolean addAll (Collection<? extends K> c)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_java#util#Spliterator_E@ over the elements in this collection. Implementations should document characteristic values reported by the spliterator. Such characteristic values are not required to be reported if the spliterator reports @B_java#util#Spliterator#SIZED_E@ and this collection contains no elements. The default implementation should be overridden by subclasses that can return a more efficient spliterator. In order to preserve expected laziness behavior for the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@} methods, spliterators should either have the characteristic of IMMUTABLE or CONCURRENT, or be . If none of these is practical, the overriding class should describe the spliterator's documented policy of binding and structural interference, and should override the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@ methods to create streams using a Supplier of the spliterator, as in: These requirements ensure that streams produced by the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@ methods will reflect the contents of the collection as of initiation of the terminal stream operation.", "history": "Added in API level 24", "FullName": "public Spliterator<K> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the keys of the backing map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee).", "history": "Added in API level 24", "FullName": "public Iterator<K> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object o)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection contains all of the elements in the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 24", "FullName": "public final boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection.", "history": "added in API level 24", "FullName": "public final boolean retainAll (Collection<?> c)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "getMappedValue()": {"Returns": [["V", "the default mapped value for additions, or null if not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default mapped value for additions, or null if additions are not supported.", "history": "Added in API level 24", "FullName": "public V getMappedValue ()"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "added in API level 24", "FullName": "public final int size ()"}, "addAll(java.util.Collection<? extends K>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the collection or any of its elements are null"], ["@B_java#lang#UnsupportedOperationException_E@", "if no default mapped value for additions was provided"]], "SeeAlso": [], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set, as if by calling @B_java#util#Set#add_E@ on each one.", "history": "added in API level 24", "FullName": "public boolean addAll (Collection<? extends K> c)"}, "isEmpty()": {"Returns": [["boolean", "true if this collection contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 24", "FullName": "public final boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if the backing map contained the specified key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key to be removed from the backing map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the key from this map view, by removing the key (and its corresponding value) from the backing map. This method does nothing if the key is not in the map.", "history": "Added in API level 24", "FullName": "public boolean remove (Object o)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of the string representations of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (\"[]\"). Adjacent elements are separated by the characters \", \" (comma and space). Elements are converted to strings as by @B_java#lang#String#valueOf_E@.", "history": "added in API level 24", "FullName": "public final String toString ()"}, "add(K)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["K", "K: key to be added"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if no default mapped value for additions was provided"]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined.", "history": "Added in API level 24", "FullName": "public boolean add (K e)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "added in API level 24", "FullName": "public final Object[] toArray ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this collection contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this collection is to be tested"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 24", "FullName": "public boolean contains (Object o)"}, "forEach(java.util.function.Consumer<?superK>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void forEach (Consumer<? super K> action)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ConcurrentHashMap.KeySetView<K, V>", "ClassDesc": "A view of a ConcurrentHashMap as a @B_java#util#Set_E@ of keys, in which additions may optionally be enabled by mapping to a common value. This class cannot be directly instantiated. See @B_java#util#concurrent#ConcurrentHashMap#keySet_E@, @B_java#util#concurrent#ConcurrentHashMap#newKeySet_E@, @B_java#util#concurrent#ConcurrentHashMap#newKeySet_E@."}