{"Functions": {"addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account to specify in the sync"], ["@B_java#lang#String_E@", "String: the provider to specify in the sync request"], ["@B_android#os#Bundle_E@", "Bundle: extra parameters to go along with the sync request"], ["long", "long: how frequently the sync should be performed, in seconds. On Android API level 24 and above, a minmam interval of 15 minutes is enforced. On previous versions, the minimum interval is 1 hour."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if an illegal extra was set or if any of the parameters are null."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Specifies that a sync should be requested with the specified the account, authority, and extras at the given frequency. If there is already another periodic sync scheduled with the account, authority and extras then a new periodic sync won't be added, instead the frequency of the previous one will be updated. These periodic syncs honor the \"syncAutomatically\" and \"masterSyncAutomatically\" settings. Although these sync are scheduled at the specified frequency, it may take longer for it to actually be started if other syncs are ahead of it in the sync operation queue. This means that the actual start time may drift. Periodic syncs are not allowed to have any of @B_android#content#ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_IGNORE_SETTINGS_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_INITIALIZE_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_FORCE_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_EXPEDITED_E@, @B_android#content#ContentResolver#SYNC_EXTRAS_MANUAL_E@ set to true. If any are supplied then an @B_java#lang#IllegalArgumentException_E@ will be thrown. This method requires the caller to hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@. The bundle for a periodic sync can be queried by applications with the correct permissions using @B_android#content#ContentResolver#getPeriodicSyncs_E@, so no sensitive data should be transferred here.", "history": "Added in API level 8", "FullName": "public static void addPeriodicSync (Account account, String authority, Bundle extras, long pollFrequency)"}, "validateSyncExtrasBundle(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the Bundle to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check that only values of the following types are in the Bundle: Integer Long Boolean Float Double String Account null", "history": "Added in API level 1", "FullName": "public static void validateSyncExtrasBundle (Bundle extras)"}, "delete(android.net.Uri,java.lang.String,java.lang.String[])": {"Returns": [["int", "The number of rows deleted."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URL of the row to delete. This value must never be null."], ["@B_java#lang#String_E@", "String: A filter to apply to rows before deleting, formatted as an SQL WHERE clause (excluding the WHERE itself). This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes row(s) specified by a content URI. If the content provider supports transactions, the deletion will be atomic.", "history": "Added in API level 1", "FullName": "public final int delete (Uri url, String where, String[] selectionArgs)"}, "openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor pointing to the file. You own this descriptor and are responsible for closing it when done."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The file mode to use, as per @B_android#content#ContentProvider#openFile_E@. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException if no file exists under the URI or the mode is invalid."]], "SeeAlso": ["@B_android#content#ContentResolver#openAssetFileDescriptor_E@"], "Permissions": [], "Description": "Open a raw file descriptor to access data under a URI. This is like @B_android#content#ContentResolver#openAssetFileDescriptor_E@, but uses the underlying @B_android#content#ContentProvider#openFile_E@ ContentProvider.openFile()} method, so will not work with providers that return sub-sections of files. If at all possible, you should use @B_android#content#ContentResolver#openAssetFileDescriptor_E@. You will receive a FileNotFoundException exception if the provider returns a sub-section of a file. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) See @B_android#content#ContentResolver#openAssetFileDescriptor_E@ for more information on these schemes. If opening with the exclusive \"r\" or \"w\" modes, the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data. Opening with the \"rw\" mode implies a file on disk that supports seeking. If possible, always use an exclusive mode to give the underlying @B_android#content#ContentProvider_E@ the most flexibility. If you are writing a file, and need to communicate an error to the provider, use @B_android#os#ParcelFileDescriptor#closeWithError_E@.", "history": "Added in API level 19", "FullName": "public final ParcelFileDescriptor openFileDescriptor (Uri uri, String mode, CancellationSignal cancellationSignal)"}, "notifyChange(android.net.Uri,android.database.ContentObserver,boolean)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the content that was changed. This value must never be null."], ["@B_android#database#ContentObserver_E@", "ContentObserver: The observer that originated the change, may be null. The observer that originated the change will only receive the notification if it has requested to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications() to return true. This value may be null."], ["boolean", "boolean: If true, same as @B_android#content#ContentResolver#NOTIFY_SYNC_TO_NETWORK_E@."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#requestSync_E@"], "Permissions": [], "Description": "Notify registered observers that a row was updated. To observe events sent through this call, use @B_android#content#ContentResolver#registerContentObserver_E@. If syncToNetwork is true, this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri. No account will be passed to the sync adapter, so all matching accounts will be synchronized. Starting in @B_android#os#Build#VERSION_CODES#O_E@, all content notifications must be backed by a valid @B_android#content#ContentProvider_E@.", "history": "Added in API level 1", "FullName": "public void notifyChange (Uri uri, ContentObserver observer, boolean syncToNetwork)"}, "cancelSync(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the uri of the provider to sync or null to sync all providers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use @B_android#content#ContentResolver#cancelSync_E@ Cancel any active or pending syncs that match the Uri. If the uri is null then all syncs will be canceled.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void cancelSync (Uri uri)"}, "openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public final ParcelFileDescriptor openFile (Uri uri, String mode, CancellationSignal signal)"}, "removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account of the periodic sync to remove"], ["@B_java#lang#String_E@", "String: the provider of the periodic sync to remove"], ["@B_android#os#Bundle_E@", "Bundle: the extras of the periodic sync to remove"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Remove a periodic sync. Has no affect if account, authority and extras don't match an existing periodic sync. This method requires the caller to hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@.", "history": "Added in API level 8", "FullName": "public static void removePeriodicSync (Account account, String authority, Bundle extras)"}, "call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a result Bundle, possibly null. Will be null if the ContentProvider does not implement call."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["@B_java#lang#String_E@", "String: provider-defined method name to call. Opaque to framework, but must be non-null. This value must never be null."], ["@B_java#lang#String_E@", "String: provider-defined String argument. May be null. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: provider-defined Bundle argument. May be null. This value may be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if uri or method is null"], ["@B_java#lang#IllegalArgumentException_E@", "if uri is not known"]], "SeeAlso": [], "Permissions": [], "Description": "Call a provider-defined method. This can be used to implement read or write interfaces which are cheaper than using a Cursor and/or do not fit into the traditional table model.", "history": "Added in API level 11", "FullName": "public final Bundle call (Uri uri, String method, String arg, Bundle extras)"}, "call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public final Bundle call (String authority, String method, String arg, Bundle extras)"}, "openOutputStream(android.net.Uri)": {"Returns": [["@B_java#io#OutputStream_E@", "This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the provided URI could not be opened."]], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#content#ContentResolver#openOutputStream_E@.", "history": "Added in API level 1", "FullName": "public final OutputStream openOutputStream (Uri uri)"}, "isSyncActive(android.accounts.Account,java.lang.String)": {"Returns": [["boolean", "true if a sync is active for the given account or authority."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account whose setting we are querying"], ["@B_java#lang#String_E@", "String: the provider whose behavior is being queried"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_STATS_E@"], "Description": "Returns true if there is currently a sync operation for the given account or authority actively being processed. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_STATS_E@.", "history": "Added in API level 5", "FullName": "public static boolean isSyncActive (Account account, String authority)"}, "acquireContentProviderClient(java.lang.String)": {"Returns": [["@B_android#content#ContentProviderClient_E@", "a @B_android#content#ContentProviderClient_E@ that is associated with the @B_android#content#ContentProvider_E@ with the authority of name or null if there isn't one."]], "Parameters": [["@B_java#lang#String_E@", "String: specifies which provider should be acquired This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#content#ContentProviderClient_E@ that is associated with the @B_android#content#ContentProvider_E@ with the authority of name, starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling @B_android#content#ContentProviderClient#release_E@ which will allow the system to release the provider if it determines that there is no other reason for keeping it active.", "history": "Added in API level 5", "FullName": "public final ContentProviderClient acquireContentProviderClient (String name)"}, "getStreamTypes(android.net.Uri, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns an array of MIME type strings for all available data streams that match the given mimeTypeFilter. If there are none, null is returned."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: A Uri identifying content (either a list or specific type), using the content:// scheme.This value must never be null."], ["@B_java#lang#String_E@", "String: The desired MIME type. This may be a pattern, such as */*, to query for all available MIME types that match the pattern.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query for the possible MIME types for the representations the given content URL can be returned when opened as as stream with @B_android#content#ContentResolver#openTypedAssetFileDescriptor_E@. Note that the types here are not necessarily a superset of the type returned by @B_android#content#ContentResolver#getType_E@ -- many content providers cannot return a raw stream for the structured data that they contain.", "history": "added in API level 11", "FullName": "public String[] getStreamTypes (Uri url, String mimeTypeFilter)"}, "setIsSyncable(android.accounts.Account,java.lang.String,int)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int: >0 denotes syncable, 0 means not syncable, <0 means unknown"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Set whether this account/provider is syncable. This method requires the caller to hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static void setIsSyncable (Account account, String authority, int syncable)"}, "refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["boolean", "true if the provider actually tried refreshing."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri identifying the data to refresh. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional options from the client. The definitions of these are specific to the content provider being called. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. For example, if you called refresh on a particular uri, you should call @B_android#os#CancellationSignal#throwIfCanceled_E@ to check whether the client has canceled the refresh request. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This allows clients to request an explicit refresh of content identified by uri. Client code should only invoke this method when there is a strong indication (such as a user initiated pull to refresh gesture) that the content is stale.", "history": "Added in API level 26", "FullName": "public final boolean refresh (Uri url, Bundle args, CancellationSignal cancellationSignal)"}, "getOutgoingPersistedUriPermissions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return list of all persisted URI permission grants that are hosted by the calling app. That is, the returned permissions have been granted from the calling app. Only grants taken with @B_android#content#ContentResolver#takePersistableUriPermission_E@ are returned. Note: Some of the returned URIs may not be usable until after the user is unlocked.", "history": "Added in API level 19", "FullName": "public List<UriPermission> getOutgoingPersistedUriPermissions ()"}, "acquireUnstableContentProviderClient(java.lang.String)": {"Returns": [["@B_android#content#ContentProviderClient_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#content#ContentResolver#acquireContentProviderClient_E@, but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a @B_android#os#DeadObjectException_E@ from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.", "history": "Added in API level 16", "FullName": "public final ContentProviderClient acquireUnstableContentProviderClient (String name)"}, "loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)": {"Returns": [["@B_android#graphics#Bitmap_E@", "Valid @B_android#graphics#Bitmap_E@ which is a visual thumbnail. This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The item that should be visualized as a thumbnail. This value must never be null."], ["@B_android#util#Size_E@", "Size: The target area on the screen where this thumbnail will be shown. This is passed to the provider as @B_android#content#ContentResolver#EXTRA_SIZE_E@ to help it avoid downloading or generating heavy resources. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "If any trouble was encountered while generating or loading the thumbnail, or if @B_android#os#CancellationSignal#cancel_E@ was invoked."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that efficiently loads a visual thumbnail for the given @B_android#net#Uri_E@. Internally calls @B_android#content#ContentProvider#openTypedAssetFile_E@ on the remote provider, but also defensively resizes any returned content to match the requested target size.", "history": "Added in API level 29", "FullName": "public Bitmap loadThumbnail (Uri uri, Size size, CancellationSignal signal)"}, "bulkInsert(android.net.Uri,android.content.ContentValues[])": {"Returns": [["int", "the number of newly created rows."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URL of the table to insert into. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: The initial values for the newly inserted rows. The key is the column name for the field. Passing null will create an empty row. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts multiple rows into a table at the given URL. This function make no guarantees about the atomicity of the insertions.", "history": "Added in API level 1", "FullName": "public final int bulkInsert (Uri url, ContentValues[] values)"}, "getSyncAutomatically(android.accounts.Account,java.lang.String)": {"Returns": [["boolean", "true if the provider should be synced when a network tickle is received"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account whose setting we are querying"], ["@B_java#lang#String_E@", "String: the provider whose setting we are querying"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_SETTINGS_E@"], "Description": "Check if the provider should be synced when a network tickle is received This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static boolean getSyncAutomatically (Account account, String authority)"}, "requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: which account should be synced"], ["@B_java#lang#String_E@", "String: which authority should be synced"], ["@B_android#os#Bundle_E@", "Bundle: any extras to pass to the SyncAdapter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start an asynchronous sync operation. If you want to monitor the progress of the sync you may register a SyncObserver. Only values of the following types may be used in the extras bundle: Integer Long Boolean Float Double String Account null", "history": "Added in API level 5", "FullName": "public static void requestSync (Account account, String authority, Bundle extras)"}, "insert(android.net.Uri,android.content.ContentValues)": {"Returns": [["@B_android#net#Uri_E@", "the URL of the newly created row. May return null if the underlying content provider returns null, or if it crashes."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URL of the table to insert into. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: The initial values for the newly inserted row. The key is the column name for the field. Passing an empty ContentValues will create an empty row. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts a row into a table at the given URL. If the content provider supports transactions the insertion will be atomic.", "history": "Added in API level 1", "FullName": "public final Uri insert (Uri url, ContentValues values)"}, "getTypeInfo(java.lang.String)": {"Returns": [["@B_android#content#ContentResolver#MimeTypeInfo_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Valid, concrete MIME type. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a detailed description of the given MIME type, including an icon and label that describe the type.", "history": "Added in API level 29", "FullName": "public final ContentResolver.MimeTypeInfo getTypeInfo (String mimeType)"}, "query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "A Cursor object, which is positioned before the first entry. May return null if the underlying content provider returns null, or if it crashes."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI, using the content:// scheme, for the content to retrieve. This value must never be null."], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is inefficient. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: A Bundle containing any arguments to the query. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown when the query is executed. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query the given URI, returning a @B_android#database#Cursor_E@ over the result set with support for cancellation. For best performance, the caller should follow these guidelines: Provide an explicit projection, to prevent reading data from storage that aren't going to be used. Provider must identify which QUERY_ARG_SORT* arguments were honored during the preparation of the result set by including the respective argument keys in the @B_android#database#Cursor_E@ extras @B_android#os#Bundle_E@. See @B_android#content#ContentResolver#EXTRA_HONORED_ARGS_E@ for details.", "history": "Added in API level 26", "FullName": "public final Cursor query (Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal)"}, "setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account whose setting we are querying"], ["@B_java#lang#String_E@", "String: the provider whose behavior is being controlled"], ["boolean", "boolean: true if the provider should be synced when tickles are received for it"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Set whether or not the provider is synced when it receives a network tickle. This method requires the caller to hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static void setSyncAutomatically (Account account, String authority, boolean sync)"}, "addStatusChangeListener(int,android.content.SyncStatusObserver)": {"Returns": [["@B_java#lang#Object_E@", "a handle that can be used to remove the listener at a later time"]], "Parameters": [["int", "int: the status change types that will cause the callback to be invoked"], ["@B_android#content#SyncStatusObserver_E@", "SyncStatusObserver: observer to be invoked when the status changes"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request notifications when the different aspects of the SyncManager change. The different items that can be requested are: @B_android#content#ContentResolver#SYNC_OBSERVER_TYPE_PENDING_E@ @B_android#content#ContentResolver#SYNC_OBSERVER_TYPE_ACTIVE_E@ @B_android#content#ContentResolver#SYNC_OBSERVER_TYPE_SETTINGS_E@ The caller can set one or more of the status types in the mask for any given listener registration.", "history": "Added in API level 5", "FullName": "public static Object addStatusChangeListener (int mask, SyncStatusObserver callback)"}, "wrap(android.content.ContentProviderClient)": {"Returns": [["@B_android#content#ContentResolver_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ContentProviderClient_E@", "ContentProviderClient: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#content#ContentResolver_E@ instance that redirects all its methods to the given @B_android#content#ContentProviderClient_E@.", "history": "Added in API level 29", "FullName": "public static ContentResolver wrap (ContentProviderClient wrapped)"}, "uncanonicalize(android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "Returns the non-canonical representation of url. This will return null if data identified by the canonical Uri can not be found in the current environment; callers must always check for null and deal with that by appropriately falling back to an alternative."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The canonical @B_android#net#Uri_E@ that is to be convered back to its non-canonical form. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#canonicalize_E@"], "Permissions": [], "Description": "Given a canonical Uri previously generated by @B_android#content#ContentResolver#canonicalize_E@, convert it to its local non-canonical form. This can be useful in some cases where you know that you will only be using the Uri in the current environment and want to avoid any possible overhead when using it with the content provider or want to verify that the referenced data exists at all in the new environment.", "history": "Added in API level 19", "FullName": "public final Uri uncanonicalize (Uri url)"}, "isSyncPending(android.accounts.Account,java.lang.String)": {"Returns": [["boolean", "true if there is a pending sync with the matching account and authority"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account whose setting we are querying"], ["@B_java#lang#String_E@", "String: the provider whose behavior is being queried"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_STATS_E@"], "Description": "Return true if the pending status is true of any matching authorities. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_STATS_E@.", "history": "Added in API level 5", "FullName": "public static boolean isSyncPending (Account account, String authority)"}, "openAssetFileDescriptor(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new ParcelFileDescriptor pointing to the file. You own this descriptor and are responsible for closing it when done. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The file mode to use, as per @B_android#content#ContentProvider#openAssetFile_E@. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException of no file exists under the URI or the mode is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Open a raw file descriptor to access data under a URI. This interacts with the underlying @B_android#content#ContentProvider#openAssetFile_E@ method of the provider associated with the given URI, to retrieve any file stored there. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) android.resource (@B_android#content#ContentResolver#SCHEME_ANDROID_RESOURCE_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) A Uri object can be used to reference a resource in an APK file. The Uri should be one of the following formats: android.resource://package_name/id_number package_name is your package name as listed in your AndroidManifest.xml. For example com.example.myapp id_number is the int form of the ID. The easiest way to construct this form is android.resource://package_name/type/name package_name is your package name as listed in your AndroidManifest.xml. For example com.example.myapp type is the string form of the resource type. For example, raw or drawable. name is the string form of the resource name. That is, whatever the file name was in your res directory, without the type extension. The easiest way to construct this form is Note that if this function is called for read-only input (mode is \"r\") on a content: URI, it will instead call @B_android#content#ContentResolver#openTypedAssetFileDescriptor_E@ for you with a MIME type of \"*/*\". This allows such callers to benefit from any built-in data conversion that a provider implements.", "history": "Added in API level 3", "FullName": "public final AssetFileDescriptor openAssetFileDescriptor (Uri uri, String mode)"}, "startSync(android.net.Uri, android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the uri of the provider to sync or null to sync all providers."], ["@B_android#os#Bundle_E@", "Bundle: any extras to pass to the SyncAdapter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use @B_android#content#ContentResolver#requestSync_E@ Start an asynchronous sync operation. If you want to monitor the progress of the sync you may register a SyncObserver. Only values of the following types may be used in the extras bundle: Integer Long Boolean Float Double String Account null", "history": "added in API level 1", "FullName": "public void startSync (Uri uri, Bundle extras)"}, "releasePersistableUriPermission(android.net.Uri,int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["int", "int: Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, and @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#getPersistedUriPermissions_E@"], "Permissions": [], "Description": "Relinquish a persisted URI permission grant. The URI must have been previously made persistent with @B_android#content#ContentResolver#takePersistableUriPermission_E@. Any non-persistent grants to the calling package will remain intact.", "history": "Added in API level 19", "FullName": "public void releasePersistableUriPermission (Uri uri, int modeFlags)"}, "openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new ParcelFileDescriptor from which you can read the data stream from the provider. Note that this may be a pipe, meaning you can't seek in it. The only seek you should do is if the AssetFileDescriptor contains an offset, to move to that offset before reading. You own this descriptor and are responsible for closing it when done. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The desired MIME type of the returned data. This can be a pattern such as */*, which will allow the content provider to select a type, though there is no way for you to determine what type it is returning. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional provider-dependent options. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException of no data of the desired type exists under the URI."]], "SeeAlso": [], "Permissions": [], "Description": "Open a raw file descriptor to access (potentially type transformed) data from a \"content:\" URI. This interacts with the underlying @B_android#content#ContentProvider#openTypedAssetFile_E@ method of the provider associated with the given URI, to retrieve retrieve any appropriate data stream for the data stored there. Unlike @B_android#content#ContentResolver#openAssetFileDescriptor_E@, this function only works with \"content:\" URIs, because content providers are the only facility with an associated MIME type to ensure that the returned data stream is of the desired type. All text/* streams are encoded in UTF-8.", "history": "Added in API level 11", "FullName": "public final AssetFileDescriptor openTypedAssetFileDescriptor (Uri uri, String mimeType, Bundle opts)"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "A MIME type for the content, or null if the URL is invalid or the type is unknown"]], "Parameters": [["@B_android#net#Uri_E@", "Uri: A Uri identifying content (either a list or specific type), using the content:// scheme. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the MIME type of the given content URL.", "history": "Added in API level 1", "FullName": "public final String getType (Uri url)"}, "openOutputStream(android.net.Uri,java.lang.String)": {"Returns": [["@B_java#io#OutputStream_E@", "OutputStream This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI. This value must never be null."], ["@B_java#lang#String_E@", "String: May be \"w\", \"wa\", \"rw\", or \"rwt\". This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the provided URI could not be opened."]], "SeeAlso": ["@B_android#content#ContentResolver#openAssetFileDescriptor_E@"], "Permissions": [], "Description": "Open a stream on to the content associated with a content URI. If there is no data associated with the URI, FileNotFoundException is thrown. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) See @B_android#content#ContentResolver#openAssetFileDescriptor_E@ for more information on these schemes.", "history": "Added in API level 3", "FullName": "public final OutputStream openOutputStream (Uri uri, String mode)"}, "getPeriodicSyncs(android.accounts.Account,java.lang.String)": {"Returns": [["@B_java#util#List_E@", "a list of PeriodicSync objects. This list may be empty but will never be null."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account whose periodic syncs we are querying"], ["@B_java#lang#String_E@", "String: the provider whose periodic syncs we are querying"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_SETTINGS_E@"], "Description": "Get the list of information about the periodic syncs for the given account and authority. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_SETTINGS_E@.", "history": "Added in API level 8", "FullName": "public static List<PeriodicSync> getPeriodicSyncs (Account account, String authority)"}, "getSyncAdapterTypes()": {"Returns": [["@B_android#content#SyncAdapterType_E@", "an array of SyncAdapters that have registered with the system"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get information about the SyncAdapters that are known to the system.", "history": "Added in API level 5", "FullName": "public static SyncAdapterType[] getSyncAdapterTypes ()"}, "cancelSync(android.accounts.Account,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: filters the syncs that match by this account"], ["@B_java#lang#String_E@", "String: filters the syncs that match by this authority"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel any active or pending syncs that match account and authority. The account and authority can each independently be set to null, which means that syncs with any account or authority, respectively, will match.", "history": "Added in API level 5", "FullName": "public static void cancelSync (Account account, String authority)"}, "unregisterContentObserver(android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#database#ContentObserver_E@", "ContentObserver: The previously registered observer that is no longer needed. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#registerContentObserver_E@"], "Permissions": [], "Description": "Unregisters a change observer.", "history": "Added in API level 1", "FullName": "public final void unregisterContentObserver (ContentObserver observer)"}, "openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public final AssetFileDescriptor openTypedAssetFile (Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal)"}, "getCurrentSyncs()": {"Returns": [["@B_java#util#List_E@", "a List of SyncInfo objects for the currently active syncs."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_STATS_E@"], "Description": "Returns a list with information about all the active syncs. This list will be empty if there are no active syncs. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_STATS_E@.", "history": "Added in API level 11", "FullName": "public static List<SyncInfo> getCurrentSyncs ()"}, "openFileDescriptor(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor pointing to the file. You own this descriptor and are responsible for closing it when done. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The file mode to use, as per @B_android#content#ContentProvider#openFile_E@. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException if no file exists under the URI or the mode is invalid."]], "SeeAlso": ["@B_android#content#ContentResolver#openAssetFileDescriptor_E@"], "Permissions": [], "Description": "Open a raw file descriptor to access data under a URI. This is like @B_android#content#ContentResolver#openAssetFileDescriptor_E@, but uses the underlying @B_android#content#ContentProvider#openFile_E@ ContentProvider.openFile()} method, so will not work with providers that return sub-sections of files. If at all possible, you should use @B_android#content#ContentResolver#openAssetFileDescriptor_E@. You will receive a FileNotFoundException exception if the provider returns a sub-section of a file. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) See @B_android#content#ContentResolver#openAssetFileDescriptor_E@ for more information on these schemes. If opening with the exclusive \"r\" or \"w\" modes, the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data. Opening with the \"rw\" mode implies a file on disk that supports seeking. If possible, always use an exclusive mode to give the underlying @B_android#content#ContentProvider_E@ the most flexibility. If you are writing a file, and need to communicate an error to the provider, use @B_android#os#ParcelFileDescriptor#closeWithError_E@.", "history": "Added in API level 1", "FullName": "public final ParcelFileDescriptor openFileDescriptor (Uri uri, String mode)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "A Cursor object, which is positioned before the first entry. May return null if the underlying content provider returns null, or if it crashes."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI, using the content:// scheme, for the content to retrieve. This value must never be null."], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is inefficient. This value may be null."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URI. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in the order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor_E@"], "Permissions": [], "Description": "Query the given URI, returning a @B_android#database#Cursor_E@ over the result set. For best performance, the caller should follow these guidelines: Provide an explicit projection, to prevent reading data from storage that aren't going to be used. Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter, so that queries that differ only by those values will be recognized as the same for caching purposes.", "history": "Added in API level 1", "FullName": "public final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)"}, "openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new ParcelFileDescriptor from which you can read the data stream from the provider. Note that this may be a pipe, meaning you can't seek in it. The only seek you should do is if the AssetFileDescriptor contains an offset, to move to that offset before reading. You own this descriptor and are responsible for closing it when done."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The desired MIME type of the returned data. This can be a pattern such as */*, which will allow the content provider to select a type, though there is no way for you to determine what type it is returning. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional provider-dependent options. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException of no data of the desired type exists under the URI."]], "SeeAlso": [], "Permissions": [], "Description": "Open a raw file descriptor to access (potentially type transformed) data from a \"content:\" URI. This interacts with the underlying @B_android#content#ContentProvider#openTypedAssetFile_E@ method of the provider associated with the given URI, to retrieve retrieve any appropriate data stream for the data stored there. Unlike @B_android#content#ContentResolver#openAssetFileDescriptor_E@, this function only works with \"content:\" URIs, because content providers are the only facility with an associated MIME type to ensure that the returned data stream is of the desired type. All text/* streams are encoded in UTF-8.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openTypedAssetFileDescriptor (Uri uri, String mimeType, Bundle opts, CancellationSignal cancellationSignal)"}, "canonicalize(android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "Returns the official canonical representation of url, or null if the content provider does not support a canonical representation of the given Uri. Many providers may not support canonicalization of some or all of their Uris."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The @B_android#net#Uri_E@ that is to be transformed to a canonical representation. Like all resolver calls, the input can be either a non-canonical or canonical Uri. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#uncanonicalize_E@"], "Permissions": [], "Description": "Transform the given @B_android#content#ContentResolver#query_E@, @B_android#content#ContentResolver#openInputStream_E@, etc. The only difference in behavior between the original and new Uris is that the content provider may need to do some additional work at each call using it to resolve it to the correct resource, especially if the canonical Uri has been moved to a different environment. If you are moving a canonical Uri between environments, you should perform another call to @B_android#content#ContentResolver#canonicalize_E@ with that original Uri to re-canonicalize it for the current environment. Alternatively, you may want to use @B_android#content#ContentResolver#uncanonicalize_E@ to transform it to a non-canonical Uri that works only in the current environment but potentially more efficiently than the canonical representation.", "history": "Added in API level 19", "FullName": "public final Uri canonicalize (Uri url)"}, "acquireContentProviderClient(android.net.Uri)": {"Returns": [["@B_android#content#ContentProviderClient_E@", "a @B_android#content#ContentProviderClient_E@ that is associated with the @B_android#content#ContentProvider_E@ that services the content at uri or null if there isn't one."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: specifies which provider should be acquired This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#content#ContentProviderClient_E@ that is associated with the @B_android#content#ContentProvider_E@ that services the content at uri, starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling @B_android#content#ContentProviderClient#release_E@ which will allow the system to release the provider if it determines that there is no other reason for keeping it active.", "history": "Added in API level 5", "FullName": "public final ContentProviderClient acquireContentProviderClient (Uri uri)"}, "getStreamTypes(android.net.Uri,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns an array of MIME type strings for all available data streams that match the given mimeTypeFilter. If there are none, null is returned."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: A Uri identifying content (either a list or specific type), using the content:// scheme. This value must never be null."], ["@B_java#lang#String_E@", "String: The desired MIME type. This may be a pattern, such as */*, to query for all available MIME types that match the pattern. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query for the possible MIME types for the representations the given content URL can be returned when opened as as stream with @B_android#content#ContentResolver#openTypedAssetFileDescriptor_E@. Note that the types here are not necessarily a superset of the type returned by @B_android#content#ContentResolver#getType_E@ -- many content providers cannot return a raw stream for the structured data that they contain.", "history": "Added in API level 11", "FullName": "public String[] getStreamTypes (Uri url, String mimeTypeFilter)"}, "setMasterSyncAutomatically(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the master auto-sync setting that applies to all the providers and accounts"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Sets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored. This method requires the caller to hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static void setMasterSyncAutomatically (boolean sync)"}, "getIsSyncable(android.accounts.Account,java.lang.String)": {"Returns": [["int", ">0 if it is syncable, 0 if not, and <0 if the state isn't known yet."]], "Parameters": [["@B_android#accounts#Account_E@", "Account no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_SETTINGS_E@"], "Description": "Check if this account/provider is syncable. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static int getIsSyncable (Account account, String authority)"}, "ContentResolver(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ContentResolver (Context context)"}, "getMasterSyncAutomatically()": {"Returns": [["boolean", "the master auto-sync setting that applies to all the providers and accounts"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_SETTINGS_E@"], "Description": "Gets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_SETTINGS_E@.", "history": "Added in API level 5", "FullName": "public static boolean getMasterSyncAutomatically ()"}, "openInputStream(android.net.Uri)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the provided URI could not be opened."]], "SeeAlso": ["@B_android#content#ContentResolver#openAssetFileDescriptor_E@"], "Permissions": [], "Description": "Open a stream on to the content associated with a content URI. If there is no data associated with the URI, FileNotFoundException is thrown. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) android.resource (@B_android#content#ContentResolver#SCHEME_ANDROID_RESOURCE_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) See @B_android#content#ContentResolver#openAssetFileDescriptor_E@ for more information on these schemes.", "history": "Added in API level 1", "FullName": "public final InputStream openInputStream (Uri uri)"}, "openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public final AssetFileDescriptor openAssetFile (Uri uri, String mode, CancellationSignal signal)"}, "takePersistableUriPermission(android.net.Uri, int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment This value must never be null."], ["int", "int no parameter comment Value is either 0 or combination of FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#getPersistedUriPermissions_E@"], "Permissions": [], "Description": "Take a persistable URI permission grant that has been offered. Once taken, the permission grant will be remembered across device reboots. Only URI permissions granted with @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@ can be persisted. If the grant has already been persisted, taking it again will touch @B_android#content#UriPermission#getPersistedTime_E@.", "history": "added in API level 19", "FullName": "public void takePersistableUriPermission (Uri uri, int modeFlags)"}, "openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new ParcelFileDescriptor pointing to the file. You own this descriptor and are responsible for closing it when done."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The desired URI to open. This value must never be null."], ["@B_java#lang#String_E@", "String: The file mode to use, as per @B_android#content#ContentProvider#openAssetFile_E@. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "Throws FileNotFoundException of no file exists under the URI or the mode is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Open a raw file descriptor to access data under a URI. This interacts with the underlying @B_android#content#ContentProvider#openAssetFile_E@ method of the provider associated with the given URI, to retrieve any file stored there. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) android.resource (@B_android#content#ContentResolver#SCHEME_ANDROID_RESOURCE_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) A Uri object can be used to reference a resource in an APK file. The Uri should be one of the following formats: android.resource://package_name/id_number package_name is your package name as listed in your AndroidManifest.xml. For example com.example.myapp id_number is the int form of the ID. The easiest way to construct this form is android.resource://package_name/type/name package_name is your package name as listed in your AndroidManifest.xml. For example com.example.myapp type is the string form of the resource type. For example, raw or drawable. name is the string form of the resource name. That is, whatever the file name was in your res directory, without the type extension. The easiest way to construct this form is Note that if this function is called for read-only input (mode is \"r\") on a content: URI, it will instead call @B_android#content#ContentResolver#openTypedAssetFileDescriptor_E@ for you with a MIME type of \"*/*\". This allows such callers to benefit from any built-in data conversion that a provider implements.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openAssetFileDescriptor (Uri uri, String mode, CancellationSignal cancellationSignal)"}, "getCurrentSync()": {"Returns": [["@B_android#content#SyncInfo_E@", "the SyncInfo for the currently active sync or null if one is not active."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_SYNC_STATS_E@"], "Description": "Since multiple concurrent syncs are now supported you should use @B_android#content#ContentResolver#getCurrentSyncs_E@ to get the accurate list of current syncs. This method returns the first item from the list of current syncs or null if there are none. If a sync is active returns the information about it, otherwise returns null. This method requires the caller to hold the permission @B_android#Manifest#permission#READ_SYNC_STATS_E@.", "history": "Added in API level 8 Deprecated in API level 15", "FullName": "public static SyncInfo getCurrentSync ()"}, "registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to watch for changes. This can be a specific row URI, or a base URI for a whole class of content. This value must never be null."], ["boolean", "boolean: When false, the observer will be notified whenever a change occurs to the exact URI specified by uri or to one of the URI's ancestors in the path hierarchy. When true, the observer will also be notified whenever a change occurs to the URI's descendants in the path hierarchy."], ["@B_android#database#ContentObserver_E@", "ContentObserver: The object that receives callbacks when changes occur. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#unregisterContentObserver_E@"], "Permissions": [], "Description": "Register an observer class that gets callbacks when data identified by a given content URI changes. Starting in @B_android#os#Build#VERSION_CODES#O_E@, all content notifications must be backed by a valid @B_android#content#ContentProvider_E@.", "history": "Added in API level 1", "FullName": "public final void registerContentObserver (Uri uri, boolean notifyForDescendants, ContentObserver observer)"}, "takePersistableUriPermission(android.net.Uri,int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."], ["int", "int: Value is either 0 or a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, and @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#getPersistedUriPermissions_E@"], "Permissions": [], "Description": "Take a persistable URI permission grant that has been offered. Once taken, the permission grant will be remembered across device reboots. Only URI permissions granted with @B_android#content#Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION_E@ can be persisted. If the grant has already been persisted, taking it again will touch @B_android#content#UriPermission#getPersistedTime_E@.", "history": "Added in API level 19", "FullName": "public void takePersistableUriPermission (Uri uri, int modeFlags)"}, "notifyChange(android.net.Uri,android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the content that was changed. This value must never be null."], ["@B_android#database#ContentObserver_E@", "ContentObserver: The observer that originated the change, may be null. The observer that originated the change will only receive the notification if it has requested to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications() to return true. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify registered observers that a row was updated and attempt to sync changes to the network. To observe events sent through this call, use @B_android#content#ContentResolver#registerContentObserver_E@. Starting in @B_android#os#Build#VERSION_CODES#O_E@, all content notifications must be backed by a valid @B_android#content#ContentProvider_E@.", "history": "Added in API level 1", "FullName": "public void notifyChange (Uri uri, ContentObserver observer)"}, "getPersistedUriPermissions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#takePersistableUriPermission_E@", "@B_android#content#ContentResolver#releasePersistableUriPermission_E@"], "Permissions": [], "Description": "Return list of all URI permission grants that have been persisted by the calling app. That is, the returned permissions have been granted to the calling app. Only persistable grants taken with @B_android#content#ContentResolver#takePersistableUriPermission_E@ are returned. Note: Some of the returned URIs may not be usable until after the user is unlocked.", "history": "Added in API level 19", "FullName": "public List<UriPermission> getPersistedUriPermissions ()"}, "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows updated."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to modify. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: The new field values. The key is the column name for the field. A null value will remove an existing field value. This value may be null."], ["@B_java#lang#String_E@", "String: A filter to apply to rows before updating, formatted as an SQL WHERE clause (excluding the WHERE itself). This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if uri or values are null"]], "SeeAlso": [], "Permissions": [], "Description": "Update row(s) in a content URI. If the content provider supports transactions the update will be atomic.", "history": "Added in API level 1", "FullName": "public final int update (Uri uri, ContentValues values, String where, String[] selectionArgs)"}, "wrap(android.content.ContentProvider)": {"Returns": [["@B_android#content#ContentResolver_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ContentProvider_E@", "ContentProvider: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#content#ContentResolver_E@ instance that redirects all its methods to the given @B_android#content#ContentProvider_E@.", "history": "Added in API level 29", "FullName": "public static ContentResolver wrap (ContentProvider wrapped)"}, "removeStatusChangeListener(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the handle that was returned by @B_android#content#ContentResolver#addStatusChangeListener_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a previously registered status change listener.", "history": "Added in API level 5", "FullName": "public static void removeStatusChangeListener (Object handle)"}, "acquireUnstableContentProviderClient(android.net.Uri)": {"Returns": [["@B_android#content#ContentProviderClient_E@", "This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#content#ContentResolver#acquireContentProviderClient_E@, but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a @B_android#os#DeadObjectException_E@ from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.", "history": "Added in API level 16", "FullName": "public final ContentProviderClient acquireUnstableContentProviderClient (Uri uri)"}, "requestSync(android.content.SyncRequest)": {"Returns": [], "Parameters": [["@B_android#content#SyncRequest_E@", "SyncRequest no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a sync with the SyncManager. These requests are built using the @B_android#content#SyncRequest#Builder_E@.", "history": "Added in API level 19", "FullName": "public static void requestSync (SyncRequest request)"}, "applyBatch(java.lang.String,java.util.ArrayList<android.content.ContentProviderOperation>)": {"Returns": [["@B_android#content#ContentProviderResult_E@", "the results of the applications This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: the authority of the ContentProvider to which this batch should be applied This value must never be null."], ["@B_java#util#ArrayList_E@", "ArrayList: the operations to apply This value must never be null."]], "Throws": [["@B_android#content#OperationApplicationException_E@", "thrown if an application fails. See @B_android#content#ContentProviderOperation#apply_E@ for more information."], ["@B_android#os#RemoteException_E@", "thrown if a RemoteException is encountered while attempting to communicate with a remote provider."]], "SeeAlso": [], "Permissions": [], "Description": "Applies each of the @B_android#content#ContentProviderOperation_E@ objects and returns an array of their results. Passes through OperationApplicationException, which may be thrown by the call to @B_android#content#ContentProviderOperation#apply_E@. If all the applications succeed then a @B_android#content#ContentProviderResult_E@ array with the same number of elements as the operations will be returned. It is implementation-specific how many, if any, operations will have been successfully applied if a call to apply results in a @B_android#content#OperationApplicationException_E@.", "history": "Added in API level 5", "FullName": "public ContentProviderResult[] applyBatch (String authority, ArrayList<ContentProviderOperation> operations)"}, "startSync(android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the uri of the provider to sync or null to sync all providers."], ["@B_android#os#Bundle_E@", "Bundle: any extras to pass to the SyncAdapter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use @B_android#content#ContentResolver#requestSync_E@ Start an asynchronous sync operation. If you want to monitor the progress of the sync you may register a SyncObserver. Only values of the following types may be used in the extras bundle: Integer Long Boolean Float Double String Account null", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void startSync (Uri uri, Bundle extras)"}, "notifyChange(android.net.Uri,android.database.ContentObserver,int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The uri of the content that was changed. This value must never be null."], ["@B_android#database#ContentObserver_E@", "ContentObserver: The observer that originated the change, may be null. The observer that originated the change will only receive the notification if it has requested to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications() to return true. This value may be null."], ["int", "int: Additional flags: @B_android#content#ContentResolver#NOTIFY_SYNC_TO_NETWORK_E@. Value is either 0 or a combination of @B_android#content#ContentResolver#NOTIFY_SYNC_TO_NETWORK_E@, and @B_android#content#ContentResolver#NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS_E@"]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#requestSync_E@"], "Permissions": [], "Description": "Notify registered observers that a row was updated. To observe events sent through this call, use @B_android#content#ContentResolver#registerContentObserver_E@. If syncToNetwork is true, this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri. No account will be passed to the sync adapter, so all matching accounts will be synchronized. Starting in @B_android#os#Build#VERSION_CODES#O_E@, all content notifications must be backed by a valid @B_android#content#ContentProvider_E@.", "history": "Added in API level 24", "FullName": "public void notifyChange (Uri uri, ContentObserver observer, int flags)"}, "cancelSync(android.content.SyncRequest)": {"Returns": [], "Parameters": [["@B_android#content#SyncRequest_E@", "SyncRequest: SyncRequest object containing information about sync to cancel."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@"], "Description": "Remove the specified sync. This will cancel any pending or active syncs. If the request is for a periodic sync, this call will remove any future occurrences. If a periodic sync is specified, the caller must hold the permission @B_android#Manifest#permission#WRITE_SYNC_SETTINGS_E@. It is possible to cancel a sync using a SyncRequest object that is not the same object with which you requested the sync. Do so by building a SyncRequest with the same adapter, frequency,", "history": "Added in API level 21", "FullName": "public static void cancelSync (SyncRequest request)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "A Cursor object, which is positioned before the first entry. May return null if the underlying content provider returns null, or if it crashes."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI, using the content:// scheme, for the content to retrieve. This value must never be null."], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is inefficient. This value may be null."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URI. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in the order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown when the query is executed. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#database#Cursor_E@"], "Permissions": [], "Description": "Query the given URI, returning a @B_android#database#Cursor_E@ over the result set with optional support for cancellation. For best performance, the caller should follow these guidelines: Provide an explicit projection, to prevent reading data from storage that aren't going to be used. Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter, so that queries that differ only by those values will be recognized as the same for caching purposes.", "history": "Added in API level 16", "FullName": "public final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal)"}}, "Inheritance": [], "ClassName": "android.content.ContentResolver", "ClassDesc": "This class provides applications access to the content model."}