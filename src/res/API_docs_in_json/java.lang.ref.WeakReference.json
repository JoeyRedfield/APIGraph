{"Functions": {"WeakReference(T,java.lang.ref.ReferenceQueue<?superT>)": {"Returns": [], "Parameters": [["T", "T: object the new weak reference will refer to"], ["@B_java#lang#ref#ReferenceQueue_E@", "ReferenceQueue: the queue with which the reference is to be registered, or null if registration is not required"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new weak reference that refers to the given object and is registered with the given queue.", "history": "Added in API level 1", "FullName": "public WeakReference (T referent, ReferenceQueue<? super T> q)"}, "WeakReference(T)": {"Returns": [], "Parameters": [["T", "T: object the new weak reference will refer to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new weak reference that refers to the given object. The new reference is not registered with any queue.", "history": "Added in API level 1", "FullName": "public WeakReference (T referent)"}}, "Inheritance": ["@B_java#lang#ref#Reference_E@"], "ClassName": "java.lang.ref.WeakReference<T>", "ClassDesc": "Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings. Suppose that the garbage collector determines at a certain point in time that an object is"}