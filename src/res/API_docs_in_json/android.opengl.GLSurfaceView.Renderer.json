{"Functions": {"onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)": {"Returns": [], "Parameters": [["@B_javax#microedition#khronos#opengles#GL10_E@", "GL10: the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the surface changed size. Called after the surface is created and whenever the OpenGL ES surface size changes. Typically you will set your viewport here. If your camera is fixed then you could also set your projection matrix here:", "history": "Added in API level 3", "FullName": "public abstract void onSurfaceChanged (GL10 gl, int width, int height)"}, "onDrawFrame(javax.microedition.khronos.opengles.GL10)": {"Returns": [], "Parameters": [["@B_javax#microedition#khronos#opengles#GL10_E@", "GL10: the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to draw the current frame. This method is responsible for drawing the current frame. The implementation of this method typically looks like this:", "history": "Added in API level 3", "FullName": "public abstract void onDrawFrame (GL10 gl)"}, "onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)": {"Returns": [], "Parameters": [["@B_javax#microedition#khronos#opengles#GL10_E@", "GL10: the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces."], ["@B_javax#microedition#khronos#egl#EGLConfig_E@", "EGLConfig: the EGLConfig of the created surface. Can be used to create matching pbuffers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the surface is created or recreated. Called when the rendering thread starts and whenever the EGL context is lost. The EGL context will typically be lost when the Android device awakes after going to sleep. Since this method is called at the beginning of rendering, as well as every time the EGL context is lost, this method is a convenient place to put code to create resources that need to be created when the rendering starts, and that need to be recreated when the EGL context is lost. Textures are an example of a resource that you might want to create here. Note that when the EGL context is lost, all OpenGL resources associated with that context will be automatically deleted. You do not need to call the corresponding \"glDelete\" methods such as glDeleteTextures to manually delete these lost resources.", "history": "Added in API level 3", "FullName": "public abstract void onSurfaceCreated (GL10 gl, EGLConfig config)"}}, "Inheritance": [], "ClassName": "android.opengl.GLSurfaceView.Renderer", "ClassDesc": "A generic renderer interface. The renderer is responsible for making OpenGL calls to render a frame. GLSurfaceView clients typically create their own classes that implement this interface, and then call @B_android#opengl#GLSurfaceView#setRenderer_E@ to register the renderer with the GLSurfaceView. @B_android#opengl#GLSurfaceView#queueEvent_E@ convenience method. @B_android#opengl#GLSurfaceView#Renderer#onSurfaceCreated_E@ method is a convenient place to do this."}