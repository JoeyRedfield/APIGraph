{"Functions": {"ConcurrentSkipListSet(java.util.SortedSet<E>)": {"Returns": [], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: sorted set whose elements will comprise the new set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified sorted set or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new set containing the same elements and using the same ordering as the specified sorted set.", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListSet (SortedSet<E> s)"}, "headSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "last()": {"Returns": [["E", "the last (highest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last (highest) element currently in this set.", "history": "Added in API level 9", "FullName": "public E last ()"}, "subSet(E, E)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, E toElement)"}, "pollLast()": {"Returns": [["E", "the last element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last (highest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public E pollLast ()"}, "ConcurrentSkipListSet(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this set. If null, the Comparable of the elements will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set that orders its elements according to the specified comparator.", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListSet (Comparator<? super E> comparator)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this set is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the", "history": "Added in API level 9", "FullName": "public boolean removeAll (Collection<?> c)"}, "tailSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this set.", "history": "Added in API level 9", "FullName": "public void clear ()"}, "descendingSet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order view of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. The returned set has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression s.descendingSet().descendingSet() returns a view of s essentially equivalent to s.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> descendingSet ()"}, "subSet(E,boolean,E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "add(E)": {"Returns": [["boolean", "true if this set did not already contain the specified element"]], "Parameters": [["E", "E: element to be added to this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if e cannot be compared with the elements currently in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that e.equals(e2). If this set already contains the element, the call leaves the set unchanged and returns false.", "history": "Added in API level 9", "FullName": "public boolean add (E e)"}, "headSet(E)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are strictly less than toElement"]], "Parameters": [["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are strictly less than The returned set will throw an Equivalent to headSet(toElement, false).", "history": "Added in API level 9", "FullName": "public NavigableSet<E> headSet (E toElement)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set in ascending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set in ascending order.", "history": "Added in API level 9", "FullName": "public Iterator<E> iterator ()"}, "ConcurrentSkipListSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set that orders its elements according to their", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListSet ()"}, "pollFirst()": {"Returns": [["E", "the first element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first (lowest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public E pollFirst ()"}, "clone()": {"Returns": [["@B_java#util#concurrent#ConcurrentSkipListSet_E@", "a shallow copy of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this ConcurrentSkipListSet instance. (The elements themselves are not cloned.)", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListSet<E> clone ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this set"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this set for equality. Returns true if the specified object is also a set, the two sets have the same size, and every member of the specified set is contained in this set (or equivalently, every member of this set is contained in the specified set). This definition ensures that the equals method works properly across different implementations of the set interface.", "history": "Added in API level 9", "FullName": "public boolean equals (Object o)"}, "size()": {"Returns": [["int", "the number of elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this set. If this set contains more than Integer.MAX_VALUE elements, it returns Integer.MAX_VALUE. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.", "history": "Added in API level 9", "FullName": "public int size ()"}, "higher(E)": {"Returns": [["E", "the least element greater than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set strictly greater than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E higher (E e)"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the elements in this set, or", "history": "Added in API level 9", "FullName": "public Comparator<? super E> comparator ()"}, "tailSet(E)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than or equal to The returned set will throw an Equivalent to tailSet(fromElement, true).", "history": "Added in API level 9", "FullName": "public NavigableSet<E> tailSet (E fromElement)"}, "isEmpty()": {"Returns": [["boolean", "true if this set contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains no elements.", "history": "Added in API level 9", "FullName": "public boolean isEmpty ()"}, "headSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "floor(E)": {"Returns": [["E", "the greatest element less than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E floor (E e)"}, "lower(E)": {"Returns": [["E", "the greatest element less than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set strictly less than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E lower (E e)"}, "ceiling(E)": {"Returns": [["E", "the least element greater than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set greater than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E ceiling (E e)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this set contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be removed from this set, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if o cannot be compared with the elements currently in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified element from this set if it is present. More formally, removes an element e such that o.equals(e), if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)", "history": "Added in API level 9", "FullName": "public boolean remove (Object o)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this set contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with the elements currently in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that o.equals(e).", "history": "Added in API level 9", "FullName": "public boolean contains (Object o)"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set in descending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set in descending order.", "history": "Added in API level 9", "FullName": "public Iterator<E> descendingIterator ()"}, "tailSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "first()": {"Returns": [["E", "the first (lowest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (lowest) element currently in this set.", "history": "Added in API level 9", "FullName": "public E first ()"}, "subSet(E, boolean, E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "subSet(E,E)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "Added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, E toElement)"}, "ConcurrentSkipListSet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: The elements that will comprise the new set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the elements in c are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new set containing the elements in the specified collection, that orders its elements according to their", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListSet (Collection<? extends E> c)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this set. The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#NONNULL_E@, @B_java#util#Spliterator#DISTINCT_E@, @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values. The spliterator's comparator (see @B_java#util#Spliterator#getComparator_E@) is null if the set's comparator (see @B_java#util#concurrent#ConcurrentSkipListSet#comparator_E@) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the set's comparator.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractSet_E@"], "ClassName": "java.util.concurrent.ConcurrentSkipListSet<E>", "ClassDesc": "A scalable concurrent @B_java#util#NavigableSet_E@ implementation based on a @B_java#util#concurrent#ConcurrentSkipListMap_E@. The elements of the set are kept sorted according to their @B_java#util#Comparator_E@ provided at set creation time, depending on which constructor is used. This implementation provides expected average contains, add, and remove operations and their variants. Insertion, removal, and access operations safely execute concurrently by multiple threads. Iterators and spliterators are Ascending ordered views and their iterators are faster than descending ones. Beware that, unlike in most collections, the size method is not a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the added elements. This class and its iterators implement all of the optional methods of the @B_java#util#Set_E@ and @B_java#util#Iterator_E@ interfaces. Like most other concurrent collection implementations, this class does not permit the use of null elements, because null arguments and return values cannot be reliably distinguished from the absence of elements."}