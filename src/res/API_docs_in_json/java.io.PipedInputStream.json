{"Functions": {"PipedInputStream(java.io.PipedOutputStream)": {"Returns": [], "Parameters": [["@B_java#io#PipedOutputStream_E@", "PipedOutputStream: the stream to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedInputStream so that it is connected to the piped output stream src. Data bytes written to src will then be available as input from this stream.", "history": "Added in API level 1", "FullName": "public PipedInputStream (PipedOutputStream src)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedInputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this piped input stream into an array of bytes. Less than len bytes will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. If len is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "connect(java.io.PipedOutputStream)": {"Returns": [], "Parameters": [["@B_java#io#PipedOutputStream_E@", "PipedOutputStream: The piped output stream to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Causes this piped input stream to be connected to the piped output stream src. If this object is already connected to some other piped output stream, an IOException is thrown. If src is an unconnected piped output stream and snk is an unconnected piped input stream, they may be connected by either the call: or the call: The two calls have the same effect.", "history": "Added in API level 1", "FullName": "public void connect (PipedOutputStream src)"}, "PipedInputStream(int)": {"Returns": [], "Parameters": [["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedInputStream so that it is not yet PipedOutputStream before being used.", "history": "Added in API level 9", "FullName": "public PipedInputStream (int pipeSize)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this piped input stream and releases any system resources associated with the stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "receive(int)": {"Returns": [], "Parameters": [["int", "int: the byte being received"]], "Throws": [["@B_java#io#IOException_E@", "If the pipe is broken, @B_java#io#PipedInputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Receives a byte of data. This method will block if no input is available.", "history": "Added in API level 1", "FullName": "protected void receive (int b)"}, "available()": {"Returns": [["int", "the number of bytes that can be read from this input stream without blocking, or 0 if this input stream has been closed by invoking its @B_java#io#PipedInputStream#close_E@ method, or if the pipe is @B_java#io#PipedInputStream#connect_E@, or broken."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes that can be read from this input stream without blocking.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedInputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this piped input stream into an array of bytes. Less than len bytes will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. If len is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "PipedInputStream()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedInputStream so that it is not yet PipedOutputStream before being used.", "history": "Added in API level 1", "FullName": "public PipedInputStream ()"}, "PipedInputStream(java.io.PipedOutputStream,int)": {"Returns": [], "Parameters": [["@B_java#io#PipedOutputStream_E@", "PipedOutputStream: the stream to connect to."], ["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."], ["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedInputStream so that it is connected to the piped output stream src and uses the specified pipe size for the pipe's buffer. Data bytes written to src will then be available as input from this stream.", "history": "Added in API level 9", "FullName": "public PipedInputStream (PipedOutputStream src, int pipeSize)"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the pipe is @B_java#io#PipedInputStream#connect_E@, broken, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next byte of data from this piped input stream. The value byte is returned as an int in the range 0 to 255. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public int read ()"}, "PipedInputStream(java.io.PipedOutputStream, int)": {"Returns": [], "Parameters": [["@B_java#io#PipedOutputStream_E@", "PipedOutputStream: the stream to connect to."], ["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."], ["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedInputStream so that it is connected to the piped output stream src and uses the specified pipe size for the pipe's buffer. Data bytes written to src will then be available as input from this stream.", "history": "added in API level 9", "FullName": "public PipedInputStream (PipedOutputStream src, int pipeSize)"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "java.io.PipedInputStream", "ClassDesc": "A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream. Typically, data is read from a PipedInputStream object by one thread and data is written to the corresponding PipedOutputStream by some other thread. Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread. The piped input stream contains a buffer, decoupling read operations from write operations, within limits. A pipe is said to be"}