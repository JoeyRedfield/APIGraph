{"Functions": {"getResult()": {"Returns": [["V", "the actual result"]], "Parameters": [], "Throws": [["@B_android#accounts#OperationCanceledException_E@", "if the request was canceled for any reason (including if it is forbidden by policy to modify an account (of that type))"], ["@B_android#accounts#AuthenticatorException_E@", "if there was an error communicating with the authenticator or if the authenticator returned an invalid response"], ["@B_java#io#IOException_E@", "if the authenticator returned an error response that indicates that it encountered an IOException while communicating with the authentication server"]], "SeeAlso": [], "Permissions": [], "Description": "Accessor for the future result the @B_android#accounts#AccountManagerFuture_E@ represents. This call will block until the result is available. In order to check if the result is available without blocking, one may call @B_android#accounts#AccountManagerFuture#isDone_E@ and @B_android#accounts#AccountManagerFuture#isCancelled_E@. If the request that generated this result fails or is canceled then an exception will be thrown rather than the call returning normally.", "history": "Added in API level 5", "FullName": "public abstract V getResult ()"}, "isDone()": {"Returns": [["boolean", "true if this task completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 5", "FullName": "public abstract boolean isDone ()"}, "cancel(boolean)": {"Returns": [["boolean", "false if the task could not be cancelled, typically because it has already completed normally; true otherwise"]], "Parameters": [["boolean", "boolean: true if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when After this method returns, subsequent calls to @B_android#accounts#AccountManagerFuture#isDone_E@ will always return @B_android#accounts#AccountManagerFuture#isCancelled_E@ will always return", "history": "Added in API level 5", "FullName": "public abstract boolean cancel (boolean mayInterruptIfRunning)"}, "getResult(long,java.util.concurrent.TimeUnit)": {"Returns": [["V", "the actual result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument. This must not be null."]], "Throws": [["@B_android#accounts#OperationCanceledException_E@", "if the request was canceled for any reason"], ["@B_android#accounts#AuthenticatorException_E@", "if there was an error communicating with the authenticator or if the authenticator returned an invalid response"], ["@B_java#io#IOException_E@", "if the authenticator returned an error response that indicates that it encountered an IOException while communicating with the authentication server"]], "SeeAlso": [], "Permissions": [], "Description": "Accessor for the future result the @B_android#accounts#AccountManagerFuture_E@ represents. This call will block until the result is available. In order to check if the result is available without blocking, one may call @B_android#accounts#AccountManagerFuture#isDone_E@ and @B_android#accounts#AccountManagerFuture#isCancelled_E@. If the request that generated this result fails or is canceled then an exception will be thrown rather than the call returning normally. If a timeout is specified then the request will automatically be canceled if it does not complete in that amount of time.", "history": "Added in API level 5", "FullName": "public abstract V getResult (long timeout, TimeUnit unit)"}, "getResult(long, java.util.concurrent.TimeUnit)": {"Returns": [["V", "the actual result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument. This must not be null."]], "Throws": [["@B_android#accounts#OperationCanceledException_E@", "if the request was canceled for any reason"], ["@B_android#accounts#AuthenticatorException_E@", "if there was an error communicating with the authenticator or if the authenticator returned an invalid response"], ["@B_java#io#IOException_E@", "if the authenticator returned an error response that indicates that it encountered an IOException while communicating with the authentication server"]], "SeeAlso": [], "Permissions": [], "Description": "Accessor for the future result the @B_android#accounts#AccountManagerFuture_E@ represents. This call will block until the result is available. In order to check if the result is available without blocking, one may call @B_android#accounts#AccountManagerFuture#isDone_E@ and @B_android#accounts#AccountManagerFuture#isCancelled_E@. If the request that generated this result fails or is canceled then an exception will be thrown rather than the call returning normally. If a timeout is specified then the request will automatically be canceled if it does not complete in that amount of time.", "history": "added in API level 5", "FullName": "public abstract V getResult (long timeout, TimeUnit unit)"}, "isCancelled()": {"Returns": [["boolean", "true if this task was cancelled before it completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 5", "FullName": "public abstract boolean isCancelled ()"}}, "Inheritance": [], "ClassName": "android.accounts.AccountManagerFuture<V>", "ClassDesc": "A @B_android#accounts#AccountManager_E@ call. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method"}