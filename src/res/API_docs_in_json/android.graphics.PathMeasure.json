{"Functions": {"getSegment(float,float,android.graphics.Path,boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["@B_android#graphics#Path_E@", "Path no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a start and stop distance, return in dst the intervening segment(s). If the segment is zero-length, return false, else return true. startD and stopD are pinned to legal values (0..getLength()). If startD >= stopD then return false (and leave dst untouched). Begin the segment with a moveTo if startWithMoveTo is true. On @B_android#os#Build#VERSION_CODES#KITKAT_E@ and earlier releases, the resulting path may not display on a hardware-accelerated Canvas. A simple workaround is to add a single operation to this path, such as dst.rLineTo(0, 0).", "history": "Added in API level 1", "FullName": "public boolean getSegment (float startD, float stopD, Path dst, boolean startWithMoveTo)"}, "getPosTan(float, float[], float[])": {"Returns": [["boolean", "false if there was no path associated with this measure object"]], "Parameters": [["float", "float: The distance along the current contour to sample"], ["float[]", "float: If not null, returns the sampled position (x==[0], y==[1])"], ["float[]", "float: If not null, returns the sampled tangent (x==[0], y==[1])"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding position and tangent. Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged.", "history": "added in API level 1", "FullName": "public boolean getPosTan (float distance, float[] pos, float[] tan)"}, "nextContour()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move to the next contour in the path. Return true if one exists, or false if we're done with the path.", "history": "Added in API level 1", "FullName": "public boolean nextContour ()"}, "getMatrix(float,android.graphics.Matrix,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float: The distance along the associated path"], ["@B_android#graphics#Matrix_E@", "Matrix: Allocated by the caller, this is set to the transformation associated with the position and tangent at the specified distance"], ["int", "int: Specified what aspects should be returned in the matrix."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding matrix. Returns false if there is no path, or a zero-length path was specified, in which case matrix is unchanged.", "history": "Added in API level 1", "FullName": "public boolean getMatrix (float distance, Matrix matrix, int flags)"}, "PathMeasure(android.graphics.Path,boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path that will be measured by this object"], ["boolean", "boolean: If true, then the path will be considered as \"closed\" even if its contour was not explicitly closed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a PathMeasure object associated with the specified path object (already created and specified). The measure object can now return the path's length, and the position and tangent of any position along the path. Note that once a path is associated with the measure object, it is undefined if the path is subsequently modified and the the measure object is used. If the path is modified, you must call setPath with the path.", "history": "Added in API level 1", "FullName": "public PathMeasure (Path path, boolean forceClosed)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "getMatrix(float, android.graphics.Matrix, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float: The distance along the associated path"], ["@B_android#graphics#Matrix_E@", "Matrix: Allocated by the caller, this is set to the transformation associated with the position and tangent at the specified distance"], ["int", "int: Specified what aspects should be returned in the matrix."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding matrix. Returns false if there is no path, or a zero-length path was specified, in which case matrix is unchanged.", "history": "added in API level 1", "FullName": "public boolean getMatrix (float distance, Matrix matrix, int flags)"}, "PathMeasure(android.graphics.Path, boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: The path that will be measured by this object"], ["boolean", "boolean: If true, then the path will be considered as \"closed\" even if its contour was not explicitly closed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a PathMeasure object associated with the specified path object (already created and specified). The measure object can now return the path's length, and the position and tangent of any position along the path. Note that once a path is associated with the measure object, it is undefined if the path is subsequently modified and the the measure object is used. If the path is modified, you must call setPath with the path.", "history": "added in API level 1", "FullName": "public PathMeasure (Path path, boolean forceClosed)"}, "getLength()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the total length of the current contour, or 0 if no path is associated with this measure object.", "history": "Added in API level 1", "FullName": "public float getLength ()"}, "setPath(android.graphics.Path, boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a new path, or null to have none.", "history": "added in API level 1", "FullName": "public void setPath (Path path, boolean forceClosed)"}, "PathMeasure()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an empty PathMeasure object. To uses this to measure the length of a path, and/or to find the position and tangent along it, call setPath. Note that once a path is associated with the measure object, it is undefined if the path is subsequently modified and the the measure object is used. If the path is modified, you must call setPath with the path.", "history": "Added in API level 1", "FullName": "public PathMeasure ()"}, "isClosed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the current contour is closed()", "history": "Added in API level 1", "FullName": "public boolean isClosed ()"}, "getPosTan(float,float[],float[])": {"Returns": [["boolean", "false if there was no path associated with this measure object"]], "Parameters": [["float", "float: The distance along the current contour to sample"], ["float[]", "float: If not null, returns the sampled position (x==[0], y==[1])"], ["float[]", "float: If not null, returns the sampled tangent (x==[0], y==[1])"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pins distance to 0 <= distance <= getLength(), and then computes the corresponding position and tangent. Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged.", "history": "Added in API level 1", "FullName": "public boolean getPosTan (float distance, float[] pos, float[] tan)"}, "setPath(android.graphics.Path,boolean)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a new path, or null to have none.", "history": "Added in API level 1", "FullName": "public void setPath (Path path, boolean forceClosed)"}}, "Inheritance": [], "ClassName": "android.graphics.PathMeasure", "ClassDesc": ""}