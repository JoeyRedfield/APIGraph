{"Functions": {"scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."], ["@B_java#lang#Runnable_E@", "Runnable: This value must never be null."], ["long", "long: The time (in milliseconds) to run. The timebase is @B_android#os#SystemClock#uptimeMillis_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A Drawable can call this to schedule the next frame of its animation. An implementation can generally simply call @B_android#os#Handler#postAtTime_E@ with the parameters", "history": "Added in API level 26", "FullName": "public void scheduleDrawable (Drawable who, Runnable what, long when)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 26", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 26", "FullName": "public void draw (Canvas canvas)"}, "getHotspotBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the rect to populate with the hotspot bounds This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates outRect with the hotspot bounds.", "history": "Added in API level 26", "FullName": "public void getHotspotBounds (Rect outRect)"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "Added in API level 26", "FullName": "public void jumpToCurrentState ()"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 26", "FullName": "protected boolean onLevelChange (int level)"}, "setOpacity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public void setOpacity (int opacity)"}, "getTransparentRegion()": {"Returns": [["@B_android#graphics#Region_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so.", "history": "Added in API level 26", "FullName": "public Region getTransparentRegion ()"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 26", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "setHotspotBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "Added in API level 26", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 26", "FullName": "public void getOutline (Outline outline)"}, "AdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: drawable that should be rendered in the background"], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: drawable that should be rendered in the foreground"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor used to dynamically create this drawable.", "history": "Added in API level 26", "FullName": "public AdaptiveIconDrawable (Drawable backgroundDrawable, Drawable foregroundDrawable)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 26", "FullName": "public void setDither (boolean dither)"}, "unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."], ["@B_java#lang#Runnable_E@", "Runnable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A Drawable can call this to unschedule an action previously scheduled with @B_android#graphics#drawable#Drawable#Callback#scheduleDrawable_E@. An implementation can generally simply call @B_android#os#Handler#removeCallbacks_E@ with the parameters", "history": "Added in API level 26", "FullName": "public void unscheduleDrawable (Drawable who, Runnable what)"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 26", "FullName": "public int getAlpha ()"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 26", "FullName": "public int getChangingConfigurations ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 26", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 26", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 26", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 26", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 26", "FullName": "public boolean isAutoMirrored ()"}, "getIconMask()": {"Returns": [["@B_android#graphics#Path_E@", "the mask path object used to clip the drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When called before the bound is set, the returned path is identical to R.string.config_icon_mask. After the bound is set, the returned path's computed bound is same as the #getBounds().", "history": "Added in API level 26", "FullName": "public Path getIconMask ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 26", "FullName": "public int getIntrinsicHeight ()"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 26", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 26", "FullName": "public void setAlpha (int alpha)"}, "getBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the background drawable managed by this drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the foreground drawable managed by this class. The bound of this drawable is extended by @B_android#graphics#drawable#AdaptiveIconDrawable#getExtraInsetFraction_E@ * getBounds().width on left/right sides and by @B_android#graphics#drawable#AdaptiveIconDrawable#getExtraInsetFraction_E@ * getBounds().height on top/bottom sides.", "history": "Added in API level 26", "FullName": "public Drawable getBackground ()"}, "invalidateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawable needs to be redrawn. A view at this point should invalidate itself (or at least the part of itself where the drawable appears).", "history": "Added in API level 26", "FullName": "public void invalidateDrawable (Drawable who)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 26", "FullName": "protected boolean onStateChange (int[] state)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 26", "FullName": "public void applyTheme (Resources.Theme t)"}, "getExtraInsetFraction()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#AdaptiveIconDrawable#getForeground_E@"], "Permissions": [], "Description": "All four sides of the layers are padded with extra inset so as to provide extra content to reveal within the clip path when performing affine transformations on the layers.", "history": "Added in API level 26", "FullName": "public static float getExtraInsetFraction ()"}, "invalidateSelf()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable redrawn. Does nothing if there is no Callback attached to the Drawable.", "history": "Added in API level 26", "FullName": "public void invalidateSelf ()"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "added in API level 26", "FullName": "public void setHotspot (float x, float y)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setHotspot(float,float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "Added in API level 26", "FullName": "public void setHotspot (float x, float y)"}, "getForeground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the foreground drawable managed by this drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the foreground drawable managed by this class. The bound of this drawable is extended by @B_android#graphics#drawable#AdaptiveIconDrawable#getExtraInsetFraction_E@ * getBounds().width on left/right sides and by @B_android#graphics#drawable#AdaptiveIconDrawable#getExtraInsetFraction_E@ * getBounds().height on top/bottom sides.", "history": "Added in API level 26", "FullName": "public Drawable getForeground ()"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 26", "FullName": "protected void onBoundsChange (Rect bounds)"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public boolean canApplyTheme ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 26", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "added in API level 26", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 26", "FullName": "public Drawable mutate ()"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 26", "FullName": "public int getIntrinsicWidth ()"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 26", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 26", "FullName": "public void setTintList (ColorStateList tint)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.AdaptiveIconDrawable", "ClassDesc": "This class can also be created via XML inflation using <adaptive-icon> tag in addition to dynamic creation. This drawable supports two drawable layers: foreground and background. The layers are clipped when rendering using the mask defined in the device configuration. Both foreground and background layers should be sized at 108 x 108 dp. The inner 72 x 72 dp of the icon appears within the masked viewport. The outer 18 dp on each of the 4 sides of the layers is reserved for use by the system UI surfaces to create interesting visual effects, such as parallax or pulsing. Such motion effect is achieved by internally setting the bounds of the foreground and background layer as following:"}