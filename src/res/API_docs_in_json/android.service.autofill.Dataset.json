{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 26", "FullName": "public String toString ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 26", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 26", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 26", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}}, "Inheritance": [], "ClassName": "android.service.autofill.Dataset", "ClassDesc": "A Dataset object represents a group of fields (key / value pairs) used to autofill parts of a screen. For more information about the role of datasets in the autofill workflow, read @B_android#service#autofill#AutofillService_E@ documentation. In its simplest form, a dataset contains one or more fields (comprised of an @B_android#view#autofill#AutofillId_E@, a @B_android#view#autofill#AutofillValue_E@, and an optional filter @B_java#util#regex#Pattern_E@); and one or more @B_android#widget#RemoteViews_E@ for these fields (each field could have its own @B_android#widget#RemoteViews_E@, or use the default @B_android#widget#RemoteViews_E@ associated with the whole dataset). When an autofill service returns datasets in a @B_android#service#autofill#FillResponse_E@ and the screen input is focused in a view that is present in at least one of these datasets, the Android System displays a UI containing the @B_android#widget#RemoteViews_E@ of all datasets pairs that have that view's @B_android#view#autofill#AutofillId_E@. Then, when the user selects a dataset from the UI, all views in that dataset are autofilled. In a more sophisticated form, the dataset values can be protected until the user authenticates the dataset\u2014in that case, when a dataset is selected by the user, the Android System launches an intent set by the service to \"unlock\" the dataset. For example, when a data set contains credit card information (such as number, expiration date, and verification code), you could provide a dataset presentation saying \"Tap to authenticate\". Then when the user taps that option, you would launch an activity asking the user to enter the credit card code, and if the user enters a valid code, you could then \"unlock\" the dataset. You can also use authenticated datasets to offer an interactive UI for the user. For example, if the activity being autofilled is an account creation screen, you could use an authenticated dataset to automatically generate a random password for the user. See @B_android#service#autofill#Dataset#Builder#setAuthentication_E@ for more details about the dataset authentication mechanism. The autofill UI automatically changes which values are shown based on value of the view anchoring it, following the rules below:"}