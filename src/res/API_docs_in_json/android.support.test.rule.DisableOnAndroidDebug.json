{"Functions": {"DisableOnAndroidDebug(org.junit.rules.TestRule)": {"Returns": [], "Parameters": [["TestRule", "TestRule: to disable during debugging"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wrap another @B_org#junit#rules#TestRule_E@ and conditionally disable it when a debugger is attached.", "history": "", "FullName": "DisableOnAndroidDebug (TestRule rule)"}, "isDebugging()": {"Returns": [["boolean", "true if a debugger is connected, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the VM has a debugger connected. This method may be used by test classes to take additional action to disable code paths that interfere with debugging if required.", "history": "", "FullName": "boolean isDebugging ()"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.rule.DisableOnAndroidDebug", "ClassDesc": "The DisableOnAndroidDebug Rule allows you to label certain rules to be disabled when debugging. The most illustrative use case is for tests that make use of the DisableOnDebug. The important benefit of this feature is that you can disable such rules without any making any modifications to your test class to remove them during debugging. This does nothing to tackle timeouts or time sensitive code under test when debugging and may make this less useful in such circumstances. Example usage:"}