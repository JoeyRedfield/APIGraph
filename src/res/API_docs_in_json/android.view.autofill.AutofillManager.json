{"Functions": {"commit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate the current autofill context should be commited. This method is typically called by @B_android#view#View_E@ that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method after the form is submitted and another page is rendered. @B_android#app#Activity#finish_E@.", "history": "Added in API level 26", "FullName": "public void commit ()"}, "setUserData(android.service.autofill.UserData)": {"Returns": [], "Parameters": [["@B_android#service#autofill#UserData_E@", "UserData: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#service#autofill#UserData_E@ used for", "history": "Added in API level 28", "FullName": "public void setUserData (UserData userData)"}, "notifyViewClicked(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent. This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate a virtual view has been clicked.", "history": "Added in API level 28", "FullName": "public void notifyViewClicked (View view, int virtualId)"}, "notifyViewVisibilityChanged(android.view.View,int,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: @B_android#view#View_E@ that was exited. This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."], ["boolean", "boolean: visible if the view is visible in the view hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a virtual view's visibility changed.", "history": "Added in API level 27", "FullName": "public void notifyViewVisibilityChanged (View view, int virtualId, boolean isVisible)"}, "isAutofillSupported()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if autofill is supported by the current device and is supported for this user. Autofill is typically supported, but it could be unsupported in cases like:", "history": "Added in API level 26", "FullName": "public boolean isAutofillSupported ()"}, "getUserData()": {"Returns": [["@B_android#service#autofill#UserData_E@", "value previously set by @B_android#view#autofill#AutofillManager#setUserData_E@ or null if it was reset or if the caller currently does not have an enabled autofill service for the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the user data used for", "history": "Added in API level 28", "FullName": "public UserData getUserData ()"}, "notifyViewEntered(android.view.View,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent. This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."], ["@B_android#graphics#Rect_E@", "Rect: absolute boundaries of the virtual view in the screen. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a virtual view that supports autofill is entered. The virtual view boundaries must be absolute screen coordinates. For example, if the parent, non-virtual view uses bounds to draw the virtual view inside its Canvas, the absolute bounds could be calculated by:", "history": "Added in API level 26", "FullName": "public void notifyViewEntered (View view, int virtualId, Rect absBounds)"}, "getUserDataId()": {"Returns": [["@B_java#lang#String_E@", "id of the @B_android#service#autofill#UserData_E@ previously set by @B_android#view#autofill#AutofillManager#setUserData_E@ or null if it was reset or if the caller currently does not have an enabled autofill service for the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id of the @B_android#service#autofill#UserData_E@ used for This method is useful when the service must check the status of the @B_android#service#autofill#UserData_E@ in the device without fetching the whole object.", "history": "Added in API level 28", "FullName": "public String getUserDataId ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate the current autofill context should be cancelled. This method is typically called by @B_android#view#View_E@ that manage virtual views; for example, when the view is rendering an HTML page with a form and virtual views that represent the HTML elements, it should call this method if the user does not post the form but moves to another form in this page. @B_android#app#Activity#finish_E@.", "history": "Added in API level 26", "FullName": "public void cancel ()"}, "requestAutofill(android.view.View,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent. This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."], ["@B_android#graphics#Rect_E@", "Rect: absolute boundaries of the virtual view in the screen. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Explicitly requests a new autofill context for virtual views. Normally, the autofill context is automatically started if necessary when @B_android#view#autofill#AutofillManager#notifyViewEntered_E@ is called, but this method should be used in the cases where it must be explicitly started. For example, when the virtual view offers an AUTOFILL option on its contextual overflow menu, and the user selects it. The virtual view boundaries must be absolute screen coordinates. For example, if the parent view uses bounds to draw the virtual view inside its Canvas, the absolute bounds could be calculated by:", "history": "Added in API level 26", "FullName": "public void requestAutofill (View view, int virtualId, Rect absBounds)"}, "requestAutofill(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: view requesting the new autofill context. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Explicitly requests a new autofill context. Normally, the autofill context is automatically started if necessary when @B_android#view#autofill#AutofillManager#notifyViewEntered_E@ is called, but this method should be used in the cases where it must be explicitly started. For example, when the view offers an AUTOFILL option on its contextual overflow menu, and the user selects it.", "history": "Added in API level 26", "FullName": "public void requestAutofill (View view)"}, "isFieldClassificationEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if As field classification is an expensive operation, it could be disabled, either temporarily (for example, because the service exceeded a rate-limit threshold) or permanently (for example, because the device is a low-level device).", "history": "Added in API level 28", "FullName": "public boolean isFieldClassificationEnabled ()"}, "hasEnabledAutofillServices()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the calling application provides a @B_android#service#autofill#AutofillService_E@ that is enabled for the current user, or false otherwise.", "history": "Added in API level 26", "FullName": "public boolean hasEnabledAutofillServices ()"}, "notifyViewClicked(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent.This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate a virtual view has been clicked.", "history": "added in API level 28", "FullName": "public void notifyViewClicked (View view, int virtualId)"}, "getDefaultFieldClassificationAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the default algorithm used for The default algorithm is used when the algorithm on @B_android#service#autofill#UserData_E@ is invalid or not set.", "history": "Added in API level 28", "FullName": "public String getDefaultFieldClassificationAlgorithm ()"}, "getAutofillServiceComponentName()": {"Returns": [["@B_android#content#ComponentName_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the component name of the @B_android#service#autofill#AutofillService_E@ that is enabled for the current user.", "history": "Added in API level 28", "FullName": "public ComponentName getAutofillServiceComponentName ()"}, "notifyViewExited(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: @B_android#view#View_E@ that was exited. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a @B_android#view#View_E@ that supports autofill is exited.", "history": "Added in API level 26", "FullName": "public void notifyViewExited (View view)"}, "notifyViewVisibilityChanged(android.view.View,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: @B_android#view#View_E@ that was exited. This value must never be null."], ["boolean", "boolean: visible if the view is visible in the view hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a @B_android#view#View_E@ visibility changed.", "history": "Added in API level 27", "FullName": "public void notifyViewVisibilityChanged (View view, boolean isVisible)"}, "getAvailableFieldClassificationAlgorithms()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of all algorithms currently available for", "history": "Added in API level 28", "FullName": "public List<String> getAvailableFieldClassificationAlgorithms ()"}, "registerCallback(android.view.autofill.AutofillManager.AutofillCallback)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillManager#AutofillCallback_E@", "AutofillManager.AutofillCallback: callback to receive events. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a @B_android#view#autofill#AutofillManager#AutofillCallback_E@ to receive autofill events.", "history": "Added in API level 26", "FullName": "public void registerCallback (AutofillManager.AutofillCallback callback)"}, "unregisterCallback(android.view.autofill.AutofillManager.AutofillCallback)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillManager#AutofillCallback_E@", "AutofillManager.AutofillCallback: callback to stop receiving events. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a @B_android#view#autofill#AutofillManager#AutofillCallback_E@ to receive autofill events.", "history": "Added in API level 26", "FullName": "public void unregisterCallback (AutofillManager.AutofillCallback callback)"}, "isEnabled()": {"Returns": [["boolean", "whether autofill is enabled for the current user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether autofill is enabled for the current user. Typically used to determine whether the option to explicitly request autofill should be offered - see @B_android#view#autofill#AutofillManager#requestAutofill_E@.", "history": "Added in API level 26", "FullName": "public boolean isEnabled ()"}, "notifyViewClicked(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: view that has been clicked. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate a @B_android#view#View_E@ is clicked.", "history": "Added in API level 28", "FullName": "public void notifyViewClicked (View view)"}, "getNextAutofillId()": {"Returns": [["@B_android#view#autofill#AutofillId_E@", "An ID that is unique in the activity, or null if autofill is not supported in the @B_android#content#Context_E@ associated with this @B_android#view#autofill#AutofillManager_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the next unique autofill ID for the activity context. Typically used to manage views whose content is recycled - see @B_android#view#View#setAutofillId_E@ for more info.", "history": "Added in API level 28", "FullName": "public AutofillId getNextAutofillId ()"}, "notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent."], ["int", "int: id identifying the virtual child inside the parent view."], ["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: new value of the child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate the value of an autofillable virtual view has changed.", "history": "Added in API level 26", "FullName": "public void notifyValueChanged (View view, int virtualId, AutofillValue value)"}, "notifyValueChanged(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: view whose value changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate the value of an autofillable @B_android#view#View_E@ changed.", "history": "Added in API level 26", "FullName": "public void notifyValueChanged (View view)"}, "notifyViewExited(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent. This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a virtual view that supports autofill is exited.", "history": "Added in API level 26", "FullName": "public void notifyViewExited (View view, int virtualId)"}, "disableAutofillServices()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the app calling this API has enabled autofill services they will be disabled.", "history": "Added in API level 26", "FullName": "public void disableAutofillServices ()"}, "notifyViewEntered(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: @B_android#view#View_E@ that was entered. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a @B_android#view#View_E@ that supports autofill is entered.", "history": "Added in API level 26", "FullName": "public void notifyViewEntered (View view)"}, "notifyViewExited(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the virtual view parent.This value must never be null."], ["int", "int: id identifying the virtual child inside the parent view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a virtual view that supports autofill is exited.", "history": "added in API level 26", "FullName": "public void notifyViewExited (View view, int virtualId)"}}, "Inheritance": [], "ClassName": "android.view.autofill.AutofillManager", "ClassDesc": "The @B_android#view#autofill#AutofillManager_E@ class provides ways for apps and custom views to integrate with the Autofill Framework lifecycle. To learn about using Autofill in your app, read the The autofill lifecycle starts with the creation of an autofill context associated with an activity context. The autofill context is created when one of the following methods is called for the first time in an activity context, and the current user has an enabled autofill service: @B_android#view#autofill#AutofillManager#notifyViewEntered_E@ @B_android#view#autofill#AutofillManager#notifyViewEntered_E@ @B_android#view#autofill#AutofillManager#requestAutofill_E@ Typically, the context is automatically created when the first view of the activity is focused because View.onFocusChanged() indirectly calls @B_android#view#autofill#AutofillManager#notifyViewEntered_E@. App developers can call @B_android#view#autofill#AutofillManager#requestAutofill_E@ to explicitly create it (for example, a custom view developer could offer a contextual menu action in a text-field view to let users manually request autofill). After the context is created, the Android System creates a @B_android#view#ViewStructure_E@ that represents the view hierarchy by calling @B_android#view#View#dispatchProvideAutofillStructure_E@ in the root views of all application windows. By default, dispatchProvideAutofillStructure() results in subsequent calls to @B_android#view#View#onProvideAutofillStructure_E@ and @B_android#view#View#onProvideAutofillVirtualStructure_E@ for each view in the hierarchy. The resulting @B_android#view#ViewStructure_E@ is then passed to the autofill service, which parses it looking for views that can be autofilled. If the service finds such views, it returns a data structure to the Android System containing the following optional info: Datasets used to autofill subsets of views in the activity. Id of views that the service can save their values for future autofilling. When the service returns datasets, the Android System displays an autofill dataset picker UI associated with the view, when the view is focused on and is part of a dataset. The application can be notified when the UI is shown by registering an @B_android#view#autofill#AutofillManager#AutofillCallback_E@ through @B_android#view#autofill#AutofillManager#registerCallback_E@. When the user selects a dataset from the UI, all views present in the dataset are autofilled, through calls to @B_android#view#View#autofill_E@ or @B_android#view#View#autofill_E@. When the service returns ids of savable views, the Android System keeps track of changes made to these views, so they can be used to determine if the autofill save UI is shown later. The context is then finished when one of the following occurs: @B_android#view#autofill#AutofillManager#commit_E@ is called or all savable views are gone. @B_android#view#autofill#AutofillManager#cancel_E@ is called. Finally, after the autofill context is commited (i.e., not cancelled), the Android System shows an autofill save UI if the value of savable views have changed. If the user selects the option to Save, the current value of the views is then sent to the autofill service. It is safe to call AutofillManager methods from any thread. Requires the @B_android#content#pm#PackageManager#FEATURE_AUTOFILL_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}