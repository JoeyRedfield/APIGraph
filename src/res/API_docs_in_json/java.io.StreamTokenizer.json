{"Functions": {"parseNumbers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nval_E@", "@B_java#io#StreamTokenizer_E@", "@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Specifies that numbers should be parsed by this tokenizer. The syntax table of this tokenizer is modified so that each of the twelve characters: has the \"numeric\" attribute. When the parser encounters a word token that has the format of a double precision floating-point number, it treats the token as a number rather than a word, by setting the ttype field to the value TT_NUMBER and putting the numeric value of the token into the nval field.", "history": "Added in API level 1", "FullName": "public void parseNumbers ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the token"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nval_E@", "@B_java#io#StreamTokenizer#sval_E@", "@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Returns the string representation of the current stream token and the line number it occurs on. The precise string returned is unspecified, although the following example can be considered typical:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "quoteChar(int)": {"Returns": [], "Parameters": [["int", "int: the character."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nextToken_E@", "@B_java#io#StreamTokenizer#sval_E@", "@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Specifies that matching pairs of this character delimit string constants in this tokenizer. When the nextToken method encounters a string constant, the ttype field is set to the string delimiter and the sval field is set to the body of the string. If a string quote character is encountered, then a string is recognized, consisting of all characters after (but not including) the string quote character, up to (but not including) the next occurrence of that same string quote character, or a line terminator, or end of file. The usual escape sequences such as \"\\n\" and \"\\t\" are recognized and converted to single characters as the string is parsed. Any other attribute settings for the specified character are cleared.", "history": "Added in API level 1", "FullName": "public void quoteChar (int ch)"}, "whitespaceChars(int,int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are white space characters. White space characters serve only to separate tokens in the input stream. Any other attribute settings for the characters in the specified range are cleared.", "history": "Added in API level 1", "FullName": "public void whitespaceChars (int low, int hi)"}, "lowerCaseMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates that all word tokens should be lowercased."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nextToken_E@", "@B_java#io#StreamTokenizer#ttype_E@", "@B_java#io#StreamTokenizer_E@"], "Permissions": [], "Description": "Determines whether or not word token are automatically lowercased. If the flag argument is true, then the value in the sval field is lowercased whenever a word token is returned (the ttype field has the value TT_WORD by the nextToken method of this tokenizer. If the flag argument is false, then the sval field is not modified.", "history": "Added in API level 1", "FullName": "public void lowerCaseMode (boolean fl)"}, "resetSyntax()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#ordinaryChar_E@"], "Permissions": [], "Description": "Resets this tokenizer's syntax table so that all characters are \"ordinary.\" See the ordinaryChar method for more information on a character being ordinary.", "history": "Added in API level 1", "FullName": "public void resetSyntax ()"}, "ordinaryChars(int,int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#ordinaryChar_E@"], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are \"ordinary\" in this tokenizer. See the ordinaryChar method for more information on a character being ordinary.", "history": "Added in API level 1", "FullName": "public void ordinaryChars (int low, int hi)"}, "commentChar(int)": {"Returns": [], "Parameters": [["int", "int: the character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specified that the character argument starts a single-line comment. All characters from the comment character to the end of the line are ignored by this stream tokenizer. Any other attribute settings for the specified character are cleared.", "history": "Added in API level 1", "FullName": "public void commentChar (int ch)"}, "wordChars(int, int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are word constituents. A word token consists of a word constituent followed by zero or more word constituents or number constituents.", "history": "added in API level 1", "FullName": "public void wordChars (int low, int hi)"}, "lineno()": {"Returns": [["int", "the current line number of this stream tokenizer."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current line number.", "history": "Added in API level 1", "FullName": "public int lineno ()"}, "eolIsSignificant(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates that end-of-line characters are separate tokens; false indicates that end-of-line characters are white space."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nextToken_E@", "@B_java#io#StreamTokenizer#ttype_E@", "@B_java#io#StreamTokenizer_E@"], "Permissions": [], "Description": "Determines whether or not ends of line are treated as tokens. If the flag argument is true, this tokenizer treats end of lines as tokens; the nextToken method returns TT_EOL and also sets the ttype field to this value when an end of line is read. A line is a sequence of characters ending with either a carriage-return character ('\\r') or a newline character ('\\n'). In addition, a carriage-return character followed immediately by a newline character is treated as a single end-of-line token. If the flag is false, end-of-line characters are treated as white space and serve only to separate tokens.", "history": "Added in API level 1", "FullName": "public void eolIsSignificant (boolean flag)"}, "pushBack()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#nextToken_E@", "@B_java#io#StreamTokenizer#nval_E@", "@B_java#io#StreamTokenizer#sval_E@", "@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.", "history": "Added in API level 1", "FullName": "public void pushBack ()"}, "nextToken()": {"Returns": [["int", "the value of the ttype field."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#StreamTokenizer#nval_E@", "@B_java#io#StreamTokenizer#sval_E@", "@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Parses the next token from the input stream of this tokenizer. The type of the next token is returned in the ttype field. Additional information about the token may be in the nval field or the sval field of this tokenizer. Typical clients of this class first set up the syntax tables and then sit in a loop calling nextToken to parse successive tokens until TT_EOF is returned.", "history": "Added in API level 1", "FullName": "public int nextToken ()"}, "StreamTokenizer(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: a Reader object providing the input stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a tokenizer that parses the given character stream.", "history": "Added in API level 1", "FullName": "public StreamTokenizer (Reader r)"}, "StreamTokenizer(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream."]], "Throws": [], "SeeAlso": ["@B_java#io#BufferedReader_E@", "@B_java#io#InputStreamReader_E@", "@B_java#io#StreamTokenizer#StreamTokenizer_E@"], "Permissions": [], "Description": "As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example: Creates a stream tokenizer that parses the specified input stream. The stream tokenizer is initialized to the following default state: All byte values 'A' through 'Z', 'a' through 'z', and '\\u00A0' through '\\u00FF' are considered to be alphabetic. All byte values '\\u0000' through '\\u0020' are considered to be white space. '/' is a comment character. Single quote '\\'' and double quote '\"' are string quote characters. Numbers are parsed. Ends of lines are treated as white space, not as separate tokens. C-style and C++-style comments are not recognized.", "history": "Added in API level 1", "FullName": "public StreamTokenizer (InputStream is)"}, "slashStarComments(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates to recognize and ignore C-style comments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether or not the tokenizer recognizes C-style comments. If the flag argument is true, this stream tokenizer recognizes C-style comments. All text between successive occurrences of /* and */ are discarded. If the flag argument is false, then C-style comments are not treated specially.", "history": "Added in API level 1", "FullName": "public void slashStarComments (boolean flag)"}, "ordinaryChars(int, int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#ordinaryChar_E@"], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are \"ordinary\" in this tokenizer. See the ordinaryChar method for more information on a character being ordinary.", "history": "added in API level 1", "FullName": "public void ordinaryChars (int low, int hi)"}, "slashSlashComments(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates to recognize and ignore C++-style comments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether or not the tokenizer recognizes C++-style comments. If the flag argument is true, this stream tokenizer recognizes C++-style comments. Any occurrence of two consecutive slash characters ('/') is treated as the beginning of a comment that extends to the end of the line. If the flag argument is false, then C++-style comments are not treated specially.", "history": "Added in API level 1", "FullName": "public void slashSlashComments (boolean flag)"}, "wordChars(int,int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are word constituents. A word token consists of a word constituent followed by zero or more word constituents or number constituents.", "history": "Added in API level 1", "FullName": "public void wordChars (int low, int hi)"}, "ordinaryChar(int)": {"Returns": [], "Parameters": [["int", "int: the character."]], "Throws": [], "SeeAlso": ["@B_java#io#StreamTokenizer#ttype_E@"], "Permissions": [], "Description": "Specifies that the character argument is \"ordinary\" in this tokenizer. It removes any special significance the character has as a comment character, word component, string delimiter, white space, or number character. When such a character is encountered by the parser, the parser treats it as a single-character token and sets ttype field to the character value. Making a line terminator character \"ordinary\" may interfere with the ability of a StreamTokenizer to count lines. The lineno method may no longer reflect the presence of such terminator characters in its line count.", "history": "Added in API level 1", "FullName": "public void ordinaryChar (int ch)"}, "whitespaceChars(int, int)": {"Returns": [], "Parameters": [["int", "int: the low end of the range."], ["int", "int: the high end of the range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that all characters low <= c <= high are white space characters. White space characters serve only to separate tokens in the input stream. Any other attribute settings for the characters in the specified range are cleared.", "history": "added in API level 1", "FullName": "public void whitespaceChars (int low, int hi)"}}, "Inheritance": [], "ClassName": "java.io.StreamTokenizer", "ClassDesc": "The StreamTokenizer class takes an input stream and parses it into \"tokens\", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles. Each byte read from the input stream is regarded as a character in the range '\\u0000' through '\\u00FF'. The character value is used to look up five possible attributes of the character: In addition, an instance has four flags. These flags indicate: Whether line terminators are to be returned as tokens or treated as white space that merely separates tokens. Whether C-style comments are to be recognized and skipped. Whether C++-style comments are to be recognized and skipped. Whether the characters of identifiers are converted to lowercase. A typical application first constructs an instance of this class, sets up the syntax tables, and then repeatedly loops calling the nextToken method in each iteration of the loop until it returns the value TT_EOF."}