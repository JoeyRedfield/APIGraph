{"Functions": {"getColor()": {"Returns": [["int", "the color of the quote stripe."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the color of the quote stripe.", "history": "Added in API level 1", "FullName": "public int getColor ()"}, "drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: This value must never be null."], ["@B_android#graphics#Paint_E@", "Paint: This value must never be null."], ["int", "int: the current position of the margin"], ["int", "int: the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left."], ["int", "int: the top of the line"], ["int", "int: the baseline of the line"], ["int", "int: the bottom of the line"], ["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["boolean", "boolean: true if this is the first line of its paragraph"], ["@B_android#text#Layout_E@", "Layout: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders the leading margin. This is called before the margin has been adjusted by the value returned by @B_android#text#style#LeadingMarginSpan#getLeadingMargin_E@.", "history": "Added in API level 1", "FullName": "public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout)"}, "QuoteSpan(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the color of the quote stripe."], ["int", "int: the width of the stripe."], ["int", "int: the width of the gap between the stripe and the text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#QuoteSpan_E@ based on a color, a stripe width and the width of the gap between the stripe and the text.", "history": "added in API level 28", "FullName": "public QuoteSpan (int color, int stripeWidth, int gapWidth)"}, "QuoteSpan(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#text#style#QuoteSpan_E@ from a parcel.", "history": "Added in API level 3", "FullName": "public QuoteSpan (Parcel src)"}, "getGapWidth()": {"Returns": [["int", "the width of the gap between the stripe and the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the width of the gap between the stripe and the text.", "history": "Added in API level 28", "FullName": "public int getGapWidth ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "QuoteSpan(int)": {"Returns": [], "Parameters": [["int", "int: the color of the quote stripe."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#QuoteSpan_E@ based on a color.", "history": "Added in API level 1", "FullName": "public QuoteSpan (int color)"}, "QuoteSpan(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the color of the quote stripe."], ["int", "int: the width of the stripe. Value is 0 or greater"], ["int", "int: the width of the gap between the stripe and the text. Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#QuoteSpan_E@ based on a color, a stripe width and the width of the gap between the stripe and the text.", "history": "Added in API level 28", "FullName": "public QuoteSpan (int color, int stripeWidth, int gapWidth)"}, "getStripeWidth()": {"Returns": [["int", "the width of the quote stripe."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the width of the quote stripe.", "history": "Added in API level 28", "FullName": "public int getStripeWidth ()"}, "getSpanTypeId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a special type identifier for this span class.", "history": "Added in API level 3", "FullName": "public int getSpanTypeId ()"}, "QuoteSpan()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#QuoteSpan_E@ with the default values.", "history": "Added in API level 1", "FullName": "public QuoteSpan ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getLeadingMargin(boolean)": {"Returns": [["int", "the offset for the margin."]], "Parameters": [["boolean", "boolean: true if the request is for the first line of a paragraph, false for subsequent lines"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount by which to adjust the leading margin. Positive values move away from the leading edge of the paragraph, negative values move towards it.", "history": "Added in API level 1", "FullName": "public int getLeadingMargin (boolean first)"}}, "Inheritance": [], "ClassName": "android.text.style.QuoteSpan", "ClassDesc": "A span which styles paragraphs by adding a vertical stripe at the beginning of the text (respecting layout direction). A QuoteSpan must be attached from the first character to the last character of a single paragraph, otherwise the span will not be displayed. QuoteSpans allow configuring the following elements: For example, a QuoteSpan using the default values can be constructed like this: To construct a QuoteSpan with a green stripe, of 20px in width and a gap width of 40px:"}