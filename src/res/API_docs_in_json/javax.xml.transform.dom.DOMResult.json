{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "The system identifier."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the System Identifier. If no System ID was set via @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, @B_javax#xml#transform#dom#DOMResult#DOMResult_E@ or @B_javax#xml#transform#dom#DOMResult#setSystemId_E@, then null will be returned.", "history": "Added in API level 8", "FullName": "public String getSystemId ()"}, "DOMResult(org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."], ["@B_org#w3c#dom#Node_E@", "Node: The child node where the result nodes should be inserted before."], ["@B_java#lang#String_E@", "String: The system identifier which may be used in association with this node."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If nextSibling is not a sibling of node."], ["@B_java#lang#IllegalArgumentException_E@", "If node is null and nextSibling is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and the specified System ID. In practice, node and nextSibling should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. Use nextSibling to specify the child node where the result nodes should be inserted before. If nextSibling is not a sibling of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalArgumentException is thrown. If nextSibling is null, then the behavior is the same as calling @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, i.e. append the result nodes as the last child of the specified node and use the specified System ID.", "history": "Added in API level 8", "FullName": "public DOMResult (Node node, Node nextSibling, String systemId)"}, "setNextSibling(org.w3c.dom.Node)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The child node before which the result nodes will be inserted."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If nextSibling is not a descendant of node."], ["@B_java#lang#IllegalStateException_E@", "If node is null and nextSibling is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the child node before which the result nodes will be inserted. Use nextSibling to specify the child node before which the result nodes should be inserted. If nextSibling is not a descendant of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalStateException is thrown. If nextSibling is null, then the behavior is the same as calling @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, i.e. append the result nodes as the last child of the specified node.", "history": "Added in API level 8", "FullName": "public void setNextSibling (Node nextSibling)"}, "DOMResult()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Zero-argument default constructor. node, siblingNode and systemId will be set to null.", "history": "Added in API level 8", "FullName": "public DOMResult ()"}, "getNextSibling()": {"Returns": [["@B_org#w3c#dom#Node_E@", "The child node before which the result nodes will be inserted."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the child node before which the result nodes will be inserted. If no node was set via @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, @B_javax#xml#transform#dom#DOMResult#DOMResult_E@ or @B_javax#xml#transform#dom#DOMResult#setNextSibling_E@, then null will be returned.", "history": "Added in API level 8", "FullName": "public Node getNextSibling ()"}, "DOMResult(org.w3c.dom.Node,org.w3c.dom.Node)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."], ["@B_org#w3c#dom#Node_E@", "Node: The child node where the result nodes should be inserted before."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If nextSibling is not a sibling of node."], ["@B_java#lang#IllegalArgumentException_E@", "If node is null and nextSibling is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before. In practice, node and nextSibling should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. Use nextSibling to specify the child node where the result nodes should be inserted before. If nextSibling is not a sibling of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalArgumentException is thrown. If nextSibling is null, then the behavior is the same as calling @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, i.e. append the result nodes as the last child of the specified node. systemId will be set to null.", "history": "Added in API level 8", "FullName": "public DOMResult (Node node, Node nextSibling)"}, "getNode()": {"Returns": [["@B_org#w3c#dom#Node_E@", "The node to which the transformation will be appended."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the node that will contain the result DOM tree. If no node was set via @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, @B_javax#xml#transform#dom#DOMResult#DOMResult_E@ or @B_javax#xml#transform#dom#DOMResult#setNode_E@, then the node will be set by the transformation, and may be obtained from this method once the transformation is complete. Calling this method before the transformation will return null.", "history": "Added in API level 8", "FullName": "public Node getNode ()"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The system identifier as a URI string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the systemId that may be used in association with the node.", "history": "Added in API level 8", "FullName": "public void setSystemId (String systemId)"}, "DOMResult(org.w3c.dom.Node, org.w3c.dom.Node)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."], ["@B_org#w3c#dom#Node_E@", "Node: The child node where the result nodes should be inserted before."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If nextSibling is not a sibling of node."], ["@B_java#lang#IllegalArgumentException_E@", "If node is null and nextSibling is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before. In practice, node and nextSibling should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. Use nextSibling to specify the child node where the result nodes should be inserted before. If nextSibling is not a sibling of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalArgumentException is thrown. If nextSibling is null, then the behavior is the same as calling @B_javax#xml#transform#dom#DOMResult#DOMResult_E@, i.e. append the result nodes as the last child of the specified node. systemId will be set to null.", "history": "added in API level 8", "FullName": "public DOMResult (Node node, Node nextSibling)"}, "DOMResult(org.w3c.dom.Node, java.lang.String)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."], ["@B_java#lang#String_E@", "String: The system identifier which may be used in association with this node."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target with the specified System ID. In practice, the node should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. siblingNode will be set to null.", "history": "added in API level 8", "FullName": "public DOMResult (Node node, String systemId)"}, "setNode(org.w3c.dom.Node)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to which the transformation will be appended."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If nextSibling is not null and nextSibling is not a child of node."], ["@B_java#lang#IllegalStateException_E@", "If node is null and nextSibling is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the node that will contain the result DOM tree. In practice, the node should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. An IllegalStateException is thrown if nextSibling is not null and node is not a parent of nextSibling. An IllegalStateException is thrown if node is null and nextSibling is not null.", "history": "Added in API level 8", "FullName": "public void setNode (Node node)"}, "DOMResult(org.w3c.dom.Node)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target. In practice, the node should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. siblingNode and systemId will be set to null.", "history": "Added in API level 8", "FullName": "public DOMResult (Node node)"}, "DOMResult(org.w3c.dom.Node,java.lang.String)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The DOM node that will contain the result tree."], ["@B_java#lang#String_E@", "String: The system identifier which may be used in association with this node."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use a DOM node to create a new output target with the specified System ID. In practice, the node should be a @B_org#w3c#dom#Document_E@ node, a @B_org#w3c#dom#DocumentFragment_E@ node, or a @B_org#w3c#dom#Element_E@ node. In other words, a node that accepts children. siblingNode will be set to null.", "history": "Added in API level 8", "FullName": "public DOMResult (Node node, String systemId)"}}, "Inheritance": [], "ClassName": "javax.xml.transform.dom.DOMResult", "ClassDesc": "Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation, which may be retrieved with @B_javax#xml#transform#dom#DOMResult#getNode_E@."}