{"Functions": {"add(java.net.URI, java.net.HttpCookie)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: the uri this cookie associated with. if null, this cookie will not be associated with an URI"], ["@B_java#net#HttpCookie_E@", "HttpCookie: the cookie to store"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if cookie is null"]], "SeeAlso": ["@B_java#net#CookieStore#get_E@"], "Permissions": [], "Description": "Adds one HTTP cookie to the store. This is called for every incoming HTTP response. A cookie to store may or may not be associated with an URI. If it is not associated with an URI, the cookie's domain and path attribute will indicate where it comes from. If it is associated with an URI and its domain and path attribute are not specified, given URI will indicate where this cookie comes from. If a cookie corresponding to the given URI already exists, then it is replaced with the new one.", "history": "added in API level 9", "FullName": "public abstract void add (URI uri, HttpCookie cookie)"}, "remove(java.net.URI, java.net.HttpCookie)": {"Returns": [["boolean", "true if this store contained the specified cookie"]], "Parameters": [["@B_java#net#URI_E@", "URI: the uri this cookie associated with. if null, the cookie to be removed is not associated with an URI when added; if not null, the cookie to be removed is associated with the given URI when added."], ["@B_java#net#HttpCookie_E@", "HttpCookie: the cookie to remove"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if cookie is null"]], "SeeAlso": [], "Permissions": [], "Description": "Remove a cookie from store.", "history": "added in API level 9", "FullName": "public abstract boolean remove (URI uri, HttpCookie cookie)"}, "add(java.net.URI,java.net.HttpCookie)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: the uri this cookie associated with. if null, this cookie will not be associated with an URI"], ["@B_java#net#HttpCookie_E@", "HttpCookie: the cookie to store"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if cookie is null"]], "SeeAlso": ["@B_java#net#CookieStore#get_E@"], "Permissions": [], "Description": "Adds one HTTP cookie to the store. This is called for every incoming HTTP response. A cookie to store may or may not be associated with an URI. If it is not associated with an URI, the cookie's domain and path attribute will indicate where it comes from. If it is associated with an URI and its domain and path attribute are not specified, given URI will indicate where this cookie comes from. If a cookie corresponding to the given URI already exists, then it is replaced with the new one.", "history": "Added in API level 9", "FullName": "public abstract void add (URI uri, HttpCookie cookie)"}, "getCookies()": {"Returns": [["@B_java#util#List_E@", "an immutable list of http cookies; return empty list if there's no http cookie in store"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get all not-expired cookies in cookie store.", "history": "Added in API level 9", "FullName": "public abstract List<HttpCookie> getCookies ()"}, "getURIs()": {"Returns": [["@B_java#util#List_E@", "an immutable list of URIs; return empty list if no cookie in this cookie store is associated with an URI"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get all URIs which identify the cookies in this cookie store.", "history": "Added in API level 9", "FullName": "public abstract List<URI> getURIs ()"}, "remove(java.net.URI,java.net.HttpCookie)": {"Returns": [["boolean", "true if this store contained the specified cookie"]], "Parameters": [["@B_java#net#URI_E@", "URI: the uri this cookie associated with. if null, the cookie to be removed is not associated with an URI when added; if not null, the cookie to be removed is associated with the given URI when added."], ["@B_java#net#HttpCookie_E@", "HttpCookie: the cookie to remove"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if cookie is null"]], "SeeAlso": [], "Permissions": [], "Description": "Remove a cookie from store.", "history": "Added in API level 9", "FullName": "public abstract boolean remove (URI uri, HttpCookie cookie)"}, "removeAll()": {"Returns": [["boolean", "true if this store changed as a result of the call"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all cookies in this cookie store.", "history": "Added in API level 9", "FullName": "public abstract boolean removeAll ()"}, "get(java.net.URI)": {"Returns": [["@B_java#util#List_E@", "an immutable list of HttpCookie, return empty list if no cookies match the given URI"]], "Parameters": [["@B_java#net#URI_E@", "URI: the uri associated with the cookies to be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if uri is null"]], "SeeAlso": ["@B_java#net#CookieStore#add_E@"], "Permissions": [], "Description": "Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.", "history": "Added in API level 9", "FullName": "public abstract List<HttpCookie> get (URI uri)"}}, "Inheritance": [], "ClassName": "java.net.CookieStore", "ClassDesc": "A CookieStore object represents a storage for cookie. Can store and retrieve cookies. @B_java#net#CookieManager_E@ will call CookieStore.add to save cookies for every incoming HTTP response, and call CookieStore.get to retrieve cookie for every outgoing HTTP request. A CookieStore is responsible for removing HttpCookie instances which have expired."}