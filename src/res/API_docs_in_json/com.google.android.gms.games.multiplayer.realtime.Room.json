{"Functions": {"getStatus()": {"Returns": [["", "The current status of the room. One of @B_com#google#android#gms#games#multiplayer#realtime#Room#ROOM_STATUS_INVITING_E@, @B_com#google#android#gms#games#multiplayer#realtime#Room#ROOM_STATUS_ACTIVE_E@, @B_com#google#android#gms#games#multiplayer#realtime#Room#ROOM_STATUS_AUTO_MATCHING_E@, @B_com#google#android#gms#games#multiplayer#realtime#Room#ROOM_STATUS_CONNECTING_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract int getStatus ()"}, "getAutoMatchCriteria()": {"Returns": [["", "A bundle containing the automatch criteria for this room."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the automatch criteria used to create or join this room, if any. May be null if the room has no automatch properties.", "history": "", "FullName": "public abstract Bundle getAutoMatchCriteria ()"}, "getCreatorId()": {"Returns": [["", "The ID of the participant who created this Room. Note that not all participants will see the same value for the creator. In the case of an automatch, this value may differ for each participant."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getCreatorId ()"}, "getDescription()": {"Returns": [["", "Description of this room."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getDescription ()"}, "getParticipantId(java.lang.String)": {"Returns": [["", "The participant ID corresponding to given player, or null if none found."]], "Parameters": [["String", "Player ID to find participant ID for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the participant ID for a given player. This will only return a non-null ID if the player is actually a participant in the room and that player's identity is visible to the current player. Note that this will always return non-null for the current player.", "history": "", "FullName": "public abstract String getParticipantId (String playerId)"}, "getAutoMatchWaitEstimateSeconds()": {"Returns": [["", "The estimated wait time in seconds, or -1 if the room is not automatching or no estimate could be provided."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the estimated wait time for automatching to finish for players who are not automatched immediately, as measured from the time that the room entered the automatching pool.", "history": "", "FullName": "public abstract int getAutoMatchWaitEstimateSeconds ()"}, "getParticipant(java.lang.String)": {"Returns": [["", "The participant corresponding to the given ID."]], "Parameters": [["String", "Match-local ID of the participant to retrieve status for."]], "Throws": [["", "IllegalStateException} if the participant is not a participant in this match."]], "SeeAlso": [], "Permissions": [], "Description": "Get a participant in a room by its ID. Note that the participant ID must correspond to a participant in this match, or this method will throw an exception.", "history": "", "FullName": "public abstract Participant getParticipant (String participantId)"}, "getRoomId()": {"Returns": [["", "The ID of this Room."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract String getRoomId ()"}, "getDescription(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the room description into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public abstract void getDescription (CharArrayBuffer dataOut)"}, "getParticipantIds()": {"Returns": [["", "The IDs of the participants in this room. These are returned in the participant order of the room. Note that these are not stable across rooms."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the IDs of the participants of the given room.", "history": "", "FullName": "public abstract ArrayList<String> getParticipantIds ()"}, "getVariant()": {"Returns": [["", "Variant specified for this room, if any. A variant is an optional developer-controlled parameter describing the type of game to play. If specified, this value will be a positive integer. If this room had no variant specified, returns @B_com#google#android#gms#games#multiplayer#realtime#Room#ROOM_VARIANT_DEFAULT_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract int getVariant ()"}, "getParticipantStatus(java.lang.String)": {"Returns": [["", "The current status of the participant in this room. One of @B_com#google#android#gms#games#multiplayer#Participant#STATUS_INVITED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_JOINED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_DECLINED_E@, or @B_com#google#android#gms#games#multiplayer#Participant#STATUS_LEFT_E@."]], "Parameters": [["String", "Room-local ID of the participant to retrieve status for."]], "Throws": [["", "IllegalStateException} if the participant is not a participant in this room."]], "SeeAlso": [], "Permissions": [], "Description": "Get the status of a participant in a room. Note that the participant ID must correspond to a participant in this room, or this method will throw an exception.", "history": "", "FullName": "public abstract int getParticipantStatus (String participantId)"}, "getCreationTimestamp()": {"Returns": [["", "The server timestamp at which the room was created."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract long getCreationTimestamp ()"}}, "Inheritance": [], "ClassName": "com.google.android.gms.games.multiplayer.realtime.Room", "ClassDesc": "Data interface for room functionality."}