{"Functions": {"create(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element)": {"Returns": [["@B_android#support#v8#renderscript#ScriptIntrinsicHistogram_E@", "ScriptIntrinsicHistogram"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"], ["@B_android#support#v8#renderscript#Element_E@", "Element: Element type for inputs"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intrinsic for calculating the histogram of an uchar or uchar4 image. Supported elements types are @B_android#support#v8#renderscript#Element#U8_4_E@, @B_android#support#v8#renderscript#Element#U8_3_E@, @B_android#support#v8#renderscript#Element#U8_2_E@, @B_android#support#v8#renderscript#Element#U8_E@", "history": "added in version 23.0.0", "FullName": "ScriptIntrinsicHistogram create (RenderScript rs, Element e)"}, "forEach_Dot(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Script.LaunchOptions)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input image"], ["@B_android#support#v8#renderscript#Script#LaunchOptions_E@", "Script.LaunchOptions: LaunchOptions for clipping"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process an input buffer and place the histogram into the output allocation. The dot product of the input channel and the coefficients from 'setDotCoefficients' are used to calculate the output values. 1D and 2D input allocations are supported.", "history": "added in version 23.0.0", "FullName": "void forEach_Dot (Allocation ain, Script.LaunchOptions opt)"}, "getKernelID_Separate()": {"Returns": [["@B_android#support#v8#renderscript#Script#KernelID_E@", "Script.KernelID The KernelID object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a KernelID for this intrinsic kernel.", "history": "added in version 23.0.0", "FullName": "Script.KernelID getKernelID_Separate ()"}, "ScriptIntrinsicHistogram(long, android.support.v8.renderscript.RenderScript)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "ScriptIntrinsicHistogram (long id, RenderScript rs)"}, "forEach(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Script.LaunchOptions)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input image"], ["@B_android#support#v8#renderscript#Script#LaunchOptions_E@", "Script.LaunchOptions: LaunchOptions for clipping"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process an input buffer and place the histogram into the output allocation. The output allocation may be a narrower vector size than the input. In this case the vector size of the output is used to determine how many of the input channels are used in the computation. This is useful if you have an RGBA input buffer but only want the histogram for RGB. 1D and 2D input allocations are supported.", "history": "added in version 23.0.0", "FullName": "void forEach (Allocation ain, Script.LaunchOptions opt)"}, "getFieldID_Input()": {"Returns": [["@B_android#support#v8#renderscript#Script#FieldID_E@", "Script.FieldID The FieldID object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a FieldID for the input field of this intrinsic.", "history": "added in version 23.0.0", "FullName": "Script.FieldID getFieldID_Input ()"}, "forEach(android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input image"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process an input buffer and place the histogram into the output allocation. The output allocation may be a narrower vector size than the input. In this case the vector size of the output is used to determine how many of the input channels are used in the computation. This is useful if you have an RGBA input buffer but only want the histogram for RGB. 1D and 2D input allocations are supported.", "history": "added in version 23.0.0", "FullName": "void forEach (Allocation ain)"}, "forEach_Dot(android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The input image"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process an input buffer and place the histogram into the output allocation. The dot product of the input channel and the coefficients from 'setDotCoefficients' are used to calculate the output values. 1D and 2D input allocations are supported.", "history": "added in version 23.0.0", "FullName": "void forEach_Dot (Allocation ain)"}, "setOutput(android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: The output allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the output of the histogram. 32 bit integer types are supported.", "history": "added in version 23.0.0", "FullName": "void setOutput (Allocation aout)"}, "setDotCoefficients(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: Red coefficient"], ["float", "float: Green coefficient"], ["float", "float: Blue coefficient"], ["float", "float: Alpha coefficient"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the coefficients used for the RGBA to Luminocity calculation. The default is {0.299f, 0.587f, 0.114f, 0.f}. Coefficients must be >= 0 and sum to 1.0 or less.", "history": "added in version 23.0.0", "FullName": "void setDotCoefficients (float r, float g, float b, float a)"}}, "Inheritance": ["@B_android#support#v8#renderscript#BaseObj_E@", "@B_android#support#v8#renderscript#Script_E@", "@B_android#support#v8#renderscript#ScriptIntrinsic_E@"], "ClassName": "android.support.v8.renderscript.ScriptIntrinsicHistogram", "ClassDesc": "Intrinsic Histogram filter."}