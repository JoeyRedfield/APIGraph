{"Functions": {"getCompatElevation()": {"Returns": [["float", "the backward compatible elevation in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setCompatElevation_E@"], "Permissions": [], "Description": "Returns the backward compatible elevation of the FloatingActionButton.", "history": "added in version 23.2.0", "FullName": "float getCompatElevation ()"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the visibility state of this view.", "history": "", "FullName": "void setVisibility (int visibility)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the button. This method will animate the button show if the view has already been laid out.", "history": "added in version 22.2.1", "FullName": "void show ()"}, "FloatingActionButton(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "FloatingActionButton (Context context)"}, "setBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: the color of the background"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the background color for this view.", "history": "", "FullName": "void setBackgroundColor (int color)"}, "setImageResource(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable as the content of this ImageView. This does Bitmap reading and decoding on the UI thread, which can cause a latency hiccup. If that's a concern, consider using @B_android#widget#ImageView#setImageDrawable_E@ or @B_android#widget#ImageView#setImageBitmap_E@ and @B_android#graphics#BitmapFactory_E@ instead.", "history": "", "FullName": "void setImageResource (int resId)"}, "setRippleColor(int)": {"Returns": [], "Parameters": [["int", "int: ARGB color to use for the ripple"]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#getRippleColor_E@"], "Permissions": [], "Description": "Sets the ripple color for this button. When running on devices with KitKat or below, we draw this color as a filled circle rather than a ripple.", "history": "added in version 22.2.0", "FullName": "void setRippleColor (int color)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getUseCompatPadding()": {"Returns": [["boolean", "true if FloatingActionButton is adding inner padding on platforms Lollipop and after, to ensure consistent dimensions on all platforms."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setUseCompatPadding_E@"], "Permissions": [], "Description": "Returns whether FloatingActionButton will add inner padding on platforms Lollipop and after.", "history": "added in version 23.2.0", "FullName": "boolean getUseCompatPadding ()"}, "getContentRect(android.graphics.Rect)": {"Returns": [["boolean", "true if this view actually has been laid out and has a content rect, else false."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in rect the bounds of the actual floating action button content in view-local coordinates. This is defined as anything within any visible shadow.", "history": "added in version 23.2.0", "FullName": "boolean getContentRect (Rect rect)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "getBackgroundTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the background drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setBackgroundTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the background drawable, if specified.", "history": "", "FullName": "PorterDuff.Mode getBackgroundTintMode ()"}, "getContentBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the FloatingActionButton's background, minus any compatible shadow implementation.", "history": "added in version 23.2.0", "FullName": "Drawable getContentBackground ()"}, "getRippleColor()": {"Returns": [["int", "the ARGB color used for the ripple"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setRippleColor_E@"], "Permissions": [], "Description": "Returns the ripple color for this button.", "history": "added in version 25.0.0", "FullName": "int getRippleColor ()"}, "hide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hides the button. This method will animate the button hide if the view has already been laid out.", "history": "added in version 22.2.1", "FullName": "void hide ()"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view.", "history": "", "FullName": "void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function.", "history": "", "FullName": "void drawableStateChanged ()"}, "setUseCompatPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if FloatingActionButton is adding inner padding on platforms Lollipop and after, to ensure consistent dimensions on all platforms."]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#getUseCompatPadding_E@"], "Permissions": [], "Description": "Set whether FloatingActionButton should add inner padding on platforms Lollipop and after, to ensure consistent dimensions on all platforms.", "history": "added in version 23.2.0", "FullName": "void setUseCompatPadding (boolean useCompatPadding)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "setSize(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#support#design#widget#FloatingActionButton#SIZE_NORMAL_E@, @B_android#support#design#widget#FloatingActionButton#SIZE_MINI_E@ or @B_android#support#design#widget#FloatingActionButton#SIZE_AUTO_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the size of the button. The options relate to the options available on the material design specification. @B_android#support#design#widget#FloatingActionButton#SIZE_NORMAL_E@ is larger than @B_android#support#design#widget#FloatingActionButton#SIZE_MINI_E@. @B_android#support#design#widget#FloatingActionButton#SIZE_AUTO_E@ will choose an appropriate size based on the screen size.", "history": "added in version 24.0.0", "FullName": "void setSize (int size)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "getSize()": {"Returns": [["int", "one of @B_android#support#design#widget#FloatingActionButton#SIZE_NORMAL_E@, @B_android#support#design#widget#FloatingActionButton#SIZE_MINI_E@ or @B_android#support#design#widget#FloatingActionButton#SIZE_AUTO_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setSize_E@"], "Permissions": [], "Description": "Returns the chosen size for this button.", "history": "added in version 24.0.0", "FullName": "int getSize ()"}, "setBackgroundResource(int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the background to a given resource. The resource should refer to a Drawable object or 0 to remove the background.", "history": "", "FullName": "void setBackgroundResource (int resid)"}, "getBackgroundTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the background drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#setBackgroundTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the background drawable, if specified.", "history": "", "FullName": "ColorStateList getBackgroundTintList ()"}, "setCompatElevation(float)": {"Returns": [], "Parameters": [["float", "float: The backward compatible elevation in pixels."]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#FloatingActionButton#getCompatElevation_E@", "@B_android#support#design#widget#FloatingActionButton#setUseCompatPadding_E@"], "Permissions": [], "Description": "Updates the backward compatible elevation of the FloatingActionButton.", "history": "added in version 23.2.0", "FullName": "void setCompatElevation (float elevation)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#widget#ImageView_E@", "https:##developer#android#com@B_android#widget#ImageButton_E@"], "ClassName": "android.support.design.widget.FloatingActionButton", "ClassDesc": "Floating action buttons are used for a special type of promoted action. They are distinguished by a circled icon floating above the UI and have special motion behaviors related to morphing, launching, and the transferring anchor point. Floating action buttons come in two sizes: the default and the mini. The size can be controlled with the fabSize attribute. As this class descends from https:##developer#android#com@B_android#widget#ImageView_E@, you can control the icon which is displayed via https:##developer#android#com@B_android#widget#ImageView#setImageDrawable_E@. The background color of this view defaults to the your theme's colorAccent. If you wish to change this at runtime then you can do so via @B_android#support#design#widget#FloatingActionButton#setBackgroundTintList_E@."}