{"Functions": {"getMySessions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return list of all known install sessions owned by the calling app.", "history": "Added in API level 21", "FullName": "public List<PackageInstaller.SessionInfo> getMySessions ()"}, "updateSessionAppLabel(int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Update the label representing the app being installed in a specific session.", "history": "added in API level 21", "FullName": "public void updateSessionAppLabel (int sessionId, CharSequence appLabel)"}, "getStagedSessions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return list of all staged install sessions.", "history": "Added in API level 29", "FullName": "public List<PackageInstaller.SessionInfo> getStagedSessions ()"}, "getAllSessions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return list of all known install sessions, regardless of the installer.", "history": "Added in API level 21", "FullName": "public List<PackageInstaller.SessionInfo> getAllSessions ()"}, "abandonSession(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Completely abandon the given session, destroying all staged data and rendering it invalid. Abandoned sessions will be reported to @B_android#content#pm#PackageInstaller#SessionCallback_E@ listeners as failures. This is equivalent to opening the session and calling @B_android#content#pm#PackageInstaller#Session#abandon_E@.", "history": "Added in API level 21", "FullName": "public void abandonSession (int sessionId)"}, "uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)": {"Returns": [], "Parameters": [["@B_android#content#pm#VersionedPackage_E@", "VersionedPackage: The versioned package to uninstall. This value must never be null."], ["@B_android#content#IntentSender_E@", "IntentSender: Where to deliver the result. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": ["@B_android#Manifest#permission#DELETE_PACKAGES_E@", "@B_android#Manifest#permission#REQUEST_DELETE_PACKAGES_E@"], "Description": "Uninstall the given package with a specific version code, removing it completely from the device. If the version code of the package does not match the one passed in the versioned package argument this method is a no-op. Use @B_android#content#pm#PackageManager#VERSION_CODE_HIGHEST_E@ to uninstall the latest version of the package. This method is available to: the current \"installer of record\" for the package the device owner the affiliated profile owner Requires @B_android#Manifest#permission#DELETE_PACKAGES_E@ or @B_android#Manifest#permission#REQUEST_DELETE_PACKAGES_E@", "history": "Added in API level 26", "FullName": "public void uninstall (VersionedPackage versionedPackage, IntentSender statusReceiver)"}, "updateSessionAppIcon(int,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#Bitmap_E@", "Bitmap: This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Update the icon representing the app being installed in a specific session. This should be roughly @B_android#app#ActivityManager#getLauncherLargeIconSize_E@ in both dimensions.", "history": "Added in API level 21", "FullName": "public void updateSessionAppIcon (int sessionId, Bitmap appIcon)"}, "uninstall(java.lang.String,android.content.IntentSender)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to uninstall. This value must never be null."], ["@B_android#content#IntentSender_E@", "IntentSender: Where to deliver the result. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": ["@B_android#Manifest#permission#DELETE_PACKAGES_E@", "@B_android#Manifest#permission#REQUEST_DELETE_PACKAGES_E@"], "Description": "Uninstall the given package, removing it completely from the device. This method is available to: the current \"installer of record\" for the package the device owner the affiliated profile owner Requires @B_android#Manifest#permission#DELETE_PACKAGES_E@ or @B_android#Manifest#permission#REQUEST_DELETE_PACKAGES_E@", "history": "Added in API level 21", "FullName": "public void uninstall (String packageName, IntentSender statusReceiver)"}, "installExistingPackage(java.lang.String,int,android.content.IntentSender)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to install. This value must never be null."], ["int", "int: Reason for install. Value is @B_android#content#pm#PackageManager#INSTALL_REASON_UNKNOWN_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_POLICY_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_DEVICE_RESTORE_E@, @B_android#content#pm#PackageManager#INSTALL_REASON_DEVICE_SETUP_E@, or @B_android#content#pm#PackageManager#INSTALL_REASON_USER_E@"], ["@B_android#content#IntentSender_E@", "IntentSender: Where to deliver the result. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#INSTALL_PACKAGES_E@"], "Description": "Install the given package, which already exists on the device, for the user for which this installer was created. This will @B_android#content#pm#PackageInstaller#SessionParams#setWhitelistedRestrictedPermissions_E@. Requires @B_android#Manifest#permission#INSTALL_PACKAGES_E@ and android.Manifest.permission.INSTALL_EXISTING_PACKAGES", "history": "Added in API level 29", "FullName": "public void installExistingPackage (String packageName, int installReason, IntentSender statusReceiver)"}, "updateSessionAppIcon(int, android.graphics.Bitmap)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Update the icon representing the app being installed in a specific session. This should be roughly @B_android#app#ActivityManager#getLauncherLargeIconSize_E@ in both dimensions.", "history": "added in API level 21", "FullName": "public void updateSessionAppIcon (int sessionId, Bitmap appIcon)"}, "updateSessionAppLabel(int,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence: This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Update the label representing the app being installed in a specific session.", "history": "Added in API level 21", "FullName": "public void updateSessionAppLabel (int sessionId, CharSequence appLabel)"}, "registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionCallback_E@", "PackageInstaller.SessionCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register to watch for session lifecycle events. No special permissions are required to watch for these events.", "history": "Added in API level 21", "FullName": "public void registerSessionCallback (PackageInstaller.SessionCallback callback)"}, "registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionCallback_E@", "PackageInstaller.SessionCallback: This value must never be null."], ["@B_android#os#Handler_E@", "Handler: to dispatch callback events through, otherwise uses calling thread. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register to watch for session lifecycle events. No special permissions are required to watch for these events.", "history": "Added in API level 21", "FullName": "public void registerSessionCallback (PackageInstaller.SessionCallback callback, Handler handler)"}, "createSession(android.content.pm.PackageInstaller.SessionParams)": {"Returns": [["int", "positive, non-zero unique ID that represents the created session. This ID remains consistent across device reboots until the session is finalized. IDs are not reused during a given boot."]], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionParams_E@", "PackageInstaller.SessionParams: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if parameters were unsatisfiable, such as lack of disk space or unavailable media."], ["@B_java#lang#SecurityException_E@", "when installation services are unavailable, such as when called from a restricted user."], ["@B_java#lang#IllegalArgumentException_E@", "when @B_android#content#pm#PackageInstaller#SessionParams_E@ is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new session using the given parameters, returning a unique ID that represents the session. Once created, the session can be opened multiple times across multiple device boots. The system may automatically destroy sessions that have not been finalized (either committed or abandoned) within a reasonable period of time, typically on the order of a day.", "history": "Added in API level 21", "FullName": "public int createSession (PackageInstaller.SessionParams params)"}, "openSession(int)": {"Returns": [["@B_android#content#pm#PackageInstaller#Session_E@", "This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", "if parameters were unsatisfiable, such as lack of disk space or unavailable media."], ["@B_java#lang#SecurityException_E@", "when the caller does not own the session, or the session is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Open an existing session to actively perform work. To succeed, the caller must be the owner of the install session.", "history": "Added in API level 21", "FullName": "public PackageInstaller.Session openSession (int sessionId)"}, "unregisterSessionCallback(android.content.pm.PackageInstaller.SessionCallback)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionCallback_E@", "PackageInstaller.SessionCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister a previously registered callback.", "history": "Added in API level 21", "FullName": "public void unregisterSessionCallback (PackageInstaller.SessionCallback callback)"}, "getSessionInfo(int)": {"Returns": [["@B_android#content#pm#PackageInstaller#SessionInfo_E@", "details for the requested session, or null if the session does not exist."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return details for a specific session. No special permissions are required to retrieve these details.", "history": "Added in API level 21", "FullName": "public PackageInstaller.SessionInfo getSessionInfo (int sessionId)"}, "getActiveStagedSession()": {"Returns": [["@B_android#content#pm#PackageInstaller#SessionInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an active staged session, or null if there is none. Staged session is active iff: It is committed, i.e. @B_android#content#pm#PackageInstaller#SessionInfo#isCommitted_E@ is true, and it is not applied, i.e. @B_android#content#pm#PackageInstaller#SessionInfo#isStagedSessionApplied_E@ is false, and it is not failed, i.e. @B_android#content#pm#PackageInstaller#SessionInfo#isStagedSessionFailed_E@ is false. In case of a multi-apk session, reasoning above is applied to the parent session, since that is the one that should been @B_android#content#pm#PackageInstaller#Session#commit_E@.", "history": "Added in API level 29", "FullName": "public PackageInstaller.SessionInfo getActiveStagedSession ()"}}, "Inheritance": [], "ClassName": "android.content.pm.PackageInstaller", "ClassDesc": "Offers the ability to install, upgrade, and remove applications on the device. This includes support for apps packaged either as a single \"monolithic\" APK, or apps packaged as multiple \"split\" APKs. An app is delivered for installation through a @B_android#content#pm#PackageInstaller#Session_E@, which any app can create. Once the session is created, the installer can stream one or more APKs into place until it decides to either commit or destroy the session. Committing may require user intervention to complete the installation, unless the caller falls into one of the following categories, in which case the installation will complete automatically. the device owner the affiliated profile owner Sessions can install brand new apps, upgrade existing apps, or add new splits into an existing app. Apps packaged as multiple split APKs always consist of a single \"base\" APK (with a null split name) and zero or more \"split\" APKs (with unique split names). Any subset of these APKs can be installed together, as long as the following constraints are met: All APKs must have the exact same package name, version code, and signing certificates. All APKs must have unique split names. All installations must contain a single base APK. The ApiDemos project contains examples of using this API: ApiDemos/src/com/example/android/apis/content/InstallApk*.java."}