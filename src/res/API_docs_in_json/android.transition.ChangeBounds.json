{"Functions": {"setReparent(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the transition should track the parent container of target views and animate parent changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#transition#ChangeTransform_E@ to handle transitions between different parents. Setting this flag tells ChangeBounds to track the before/after parent of every view using this transition. The flag is not enabled by default because it requires the parent instances to be the same in the two scenes or else all parents must use ids to allow the transition to determine which parents are the same.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public void setReparent (boolean reparent)"}, "captureStartValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the start scene for the properties that this transition monitors. These values are then passed as the startValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureStartValues (TransitionValues transitionValues)"}, "createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["@B_android#animation#Animator_E@", "A Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for a specific target in the start scene."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for the target in the end scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. Subclasses of Transition should override this method. The method should only be called by the transition system; it is not intended to be called from external classes. This method is called by the transition's parent (all the way up to the topmost Transition in the hierarchy) with the sceneRoot and start/end values that the transition may need to set up initial target values and construct an appropriate animation. For example, if an overall Transition is a @B_android#transition#TransitionSet_E@ consisting of several child transitions in sequence, then some of the child transitions may want to set initial values on target views prior to the overall Transition commencing, to put them in an appropriate state for the delay between that start and the child Transition start time. For example, a transition that fades an item in may wish to set the starting alpha value to 0, to avoid it blinking in prior to the transition actually starting the animation. This is necessary because the scene change that triggers the Transition will automatically set the end-scene on all target views, so a Transition that wants to animate from a different value should set that value prior to returning from this method. Additionally, a Transition can perform logic to determine whether the transition needs to run on the given target and start/end values. For example, a transition that resizes objects on the screen may wish to avoid running for views which are not present in either the start or end scenes. If there is an animator created and returned from this method, the transition mechanism will apply any applicable duration, startDelay, and interpolator to that animation and start it. A return value of null indicates that no animation should run. The default implementation returns null. The method is called for every applicable target object, which is stored in the @B_android#transition#TransitionValues#view_E@ field.", "history": "Added in API level 19", "FullName": "public Animator createAnimator (ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)"}, "ChangeBounds()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public ChangeBounds ()"}, "getTransitionProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#transition#TransitionValues_E@. The default implementation returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names used stored in the @B_android#transition#TransitionValues_E@ object passed into @B_android#transition#Transition#captureStartValues_E@ that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.", "history": "Added in API level 19", "FullName": "public String[] getTransitionProperties ()"}, "setResizeClip(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Used to indicate whether the view bounds should be modified or the clip bounds should be modified by ChangeBounds."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setClipBounds_E@"], "Permissions": [], "Description": "When resizeClip is true, ChangeBounds resizes the view using the clipBounds instead of changing the dimensions of the view during the animation. When resizeClip is false, ChangeBounds resizes the View by changing its dimensions. When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore, @B_android#transition#ChangeClipBounds_E@ is not compatible with ChangeBounds in this mode.", "history": "Added in API level 19", "FullName": "public void setResizeClip (boolean resizeClip)"}, "captureEndValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the end scene for the properties that this transition monitors. These values are then passed as the endValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureEndValues (TransitionValues transitionValues)"}, "getResizeClip()": {"Returns": [["boolean", "true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. The default value is false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. The default value is false.", "history": "Added in API level 22", "FullName": "public boolean getResizeClip ()"}, "ChangeBounds(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ChangeBounds (Context context, AttributeSet attrs)"}}, "Inheritance": ["@B_android#transition#Transition_E@"], "ClassName": "android.transition.ChangeBounds", "ClassDesc": "This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. A ChangeBounds transition can be described in a resource file by using the tag changeBounds, using its attributes of @B_android#R#styleable#ChangeBounds_E@ along with the other standard attributes of @B_android#R#styleable#Transition_E@."}