{"Functions": {"minusSeconds(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the seconds subtracted, not null"]], "Parameters": [["long", "long: the seconds to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of seconds subtracted. This operates on the instant time-line, such that subtracting one second will always be a duration of one second earlier. This may cause the local date-time to change by an amount other than one second. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusSeconds (long seconds)"}, "getDayOfWeek()": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum @B_java#time#DayOfWeek_E@ for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#DayOfWeek#getValue_E@. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.", "history": "Added in API level 26", "FullName": "public DayOfWeek getDayOfWeek ()"}, "getYear()": {"Returns": [["int", "the year, from MIN_YEAR to MAX_YEAR"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).", "history": "Added in API level 26", "FullName": "public int getYear ()"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a ZonedDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The zone is not part of the calculation and will be unchanged in the result. The calculation for date and time units differ. Date units operate on the local time-line. The period is first added to the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofLocal_E@ with the offset before the addition. Time units operate on the instant time-line. The period is first added to the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofInstant_E@ with the offset before the addition. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plus (long amountToAdd, TemporalUnit unit)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a ZonedDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. The calculation for date and time units differ. Date units operate on the local time-line. The period is first subtracted from the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofLocal_E@ with the offset before the subtraction. Time units operate on the instant time-line. The period is first subtracted from the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofInstant_E@ with the offset before the subtraction. This method is equivalent to @B_java#time#ZonedDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset. This creates a zoned date-time by @B_java#time#chrono#ChronoLocalDateTime#toInstant_E@ the LocalDateTime and ZoneOffset. This combination uniquely specifies an instant without ambiguity. Converting an instant to a zoned date-time is simple as there is only one valid offset for each instant. If the valid offset is different to the offset specified, then the date-time and offset of the zoned date-time will differ from those specified. If the ZoneId to be used is a ZoneOffset, this method is equivalent to @B_java#time#ZonedDateTime#of_E@.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime ofInstant (LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)"}, "withZoneSameLocal(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible. This method changes the time-zone and retains the local date-time. The local date-time is only changed if it is invalid for the new zone, determined using the same approach as @B_java#time#ZonedDateTime#ofLocal_E@. To change the zone and adjust the local date-time, use @B_java#time#ZonedDateTime#withZoneSameInstant_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withZoneSameLocal (ZoneId zone)"}, "withEarlierOffsetAtOverlap()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the earlier offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap. This method only has any effect when the local time-line overlaps, such as at an autumn daylight savings cutover. In this scenario, there are two valid offsets for the local date-time. Calling this method will return a zoned date-time with the earlier of the two selected. If this method is called when it is not an overlap, this is returned. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withEarlierOffsetAtOverlap ()"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a ZonedDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. The calculation for date and time units differ. Date units operate on the local time-line. The period is first subtracted from the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofLocal_E@ with the offset before the subtraction. Time units operate on the instant time-line. The period is first subtracted from the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofInstant_E@ with the offset before the subtraction. This method is equivalent to @B_java#time#ZonedDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public ZonedDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "plusSeconds(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the seconds added, not null"]], "Parameters": [["long", "long: the seconds to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of seconds added. This operates on the instant time-line, such that adding one second will always be a duration of one second later. This may cause the local date-time to change by an amount other than one second. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusSeconds (long seconds)"}, "plusMonths(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the months added, not null"]], "Parameters": [["long", "long: the months to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of months added. This operates on the local time-line, @B_java#time#LocalDateTime#plusMonths_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusMonths (long months)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as a long. This queries this date-time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#ZonedDateTime#isSupported_E@ will return valid values based on this date-time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the current date-time, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the specified clock. This will query the specified clock to obtain the current date-time. The zone and offset will be set based on the time-zone in the clock. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime now (Clock clock)"}, "minusNanos(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the nanoseconds subtracted, not null"]], "Parameters": [["long", "long: the nanos to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted. This operates on the instant time-line, such that subtracting one nano will always be a duration of one nano earlier. This may cause the local date-time to change by an amount other than one nano. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusNanos (long nanos)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date-time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to another date-time. The comparison is based on the offset date-time and the zone. Only objects of type ZonedDateTime are compared, other types return false.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "plusYears(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the years added, not null"]], "Parameters": [["long", "long: the years to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of years added. This operates on the local time-line, @B_java#time#LocalDateTime#plusYears_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusYears (long years)"}, "getDayOfMonth()": {"Returns": [["int", "the day-of-month, from 1 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.", "history": "Added in API level 26", "FullName": "public int getDayOfMonth ()"}, "ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, null if no preference"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. If the preferred offset is one of the valid offsets then it is used. Otherwise the earlier valid offset is used, typically corresponding to \"summer\". In the case of a gap, where clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\".", "history": "Added in API level 26", "FullName": "public static ZonedDateTime ofLocal (LocalDateTime localDateTime, ZoneId zone, ZoneOffset preferredOffset)"}, "now()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the current date-time using the system clock, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date-time. The zone and offset will be set based on the time-zone in the clock. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime now ()"}, "withYear(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested year, not null"]], "Parameters": [["int", "int: the year to set in the result, from MIN_YEAR to MAX_YEAR"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the year altered. This operates on the local time-line, @B_java#time#LocalDateTime#withYear_E@ of the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withYear (int year)"}, "toLocalDate()": {"Returns": [["@B_java#time#LocalDate_E@", "the date part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalDate part of this date-time. This returns a LocalDate with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public LocalDate toLocalDate ()"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date-time.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "withHour(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested hour, not null"]], "Parameters": [["int", "int: the hour-of-day to set in the result, from 0 to 23"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the hour value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the hour-of-day altered. This operates on the local time-line, ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withHour (int hour)"}, "withSecond(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested second, not null"]], "Parameters": [["int", "int: the second-of-minute to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the second-of-minute altered. This operates on the local time-line, ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withSecond (int second)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minusYears(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the years subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of years subtracted. This operates on the local time-line, @B_java#time#LocalDateTime#minusYears_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusYears (long years)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as an int. This queries this date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#ZonedDateTime#isSupported_E@ will return valid values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY, EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "getMonthValue()": {"Returns": [["int", "the month-of-year, from 1 to 12"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#ZonedDateTime#getMonth_E@"], "Permissions": [], "Description": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum @B_java#time#Month_E@ is used by calling @B_java#time#ZonedDateTime#getMonth_E@.", "history": "Added in API level 26", "FullName": "public int getMonthValue ()"}, "plusNanos(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the nanoseconds added, not null"]], "Parameters": [["long", "long: the nanos to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds added. This operates on the instant time-line, such that adding one nano will always be a duration of one nano later. This may cause the local date-time to change by an amount other than one nano. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusNanos (long nanos)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]. The format consists of the LocalDateTime followed by the ZoneOffset. If the ZoneId is not the same as the offset, then the ID is output. The output is compatible with ISO-8601 if the offset and ID are the same.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "minusHours(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the hours subtracted, not null"]], "Parameters": [["long", "long: the hours to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of hours subtracted. This operates on the instant time-line, such that subtracting one hour will always be a duration of one hour earlier. This may cause the local date-time to change by an amount other than one hour. Note that this is a different approach to that used by days, months and years, thus subtracting one day is not the same as adding 24 hours. For example, consider a time-zone where the spring DST cutover means that the local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00. Subtracting one hour from 02:30+01:00 will result in 01:30+02:00 Subtracting one hour from 01:30+01:00 will result in 01:30+02:00 Subtracting one hour from 01:30+02:00 will result in 00:30+01:00 Subtracting three hours from 02:30+01:00 will result in 00:30+02:00 This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusHours (long hours)"}, "minusMonths(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the months subtracted, not null"]], "Parameters": [["long", "long: the months to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of months subtracted. This operates on the local time-line, @B_java#time#LocalDateTime#minusMonths_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusMonths (long months)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns a ZonedDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The INSTANT_SECONDS field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a DateTimeException will be thrown. The OFFSET_SECONDS field will typically be ignored. The offset of a ZonedDateTime is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#ZonedDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDateTime#with_E@. The zone is not part of the calculation and will be unchanged. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public ZonedDateTime with (TemporalField field, long newValue)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns a ZonedDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The INSTANT_SECONDS field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a DateTimeException will be thrown. The OFFSET_SECONDS field will typically be ignored. The offset of a ZonedDateTime is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other @B_java#time#ZonedDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDateTime#with_E@. The zone is not part of the calculation and will be unchanged. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime with (TemporalField field, long newValue)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a ZonedDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The zone is not part of the calculation and will be unchanged in the result. The calculation for date and time units differ. Date units operate on the local time-line. The period is first added to the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofLocal_E@ with the offset before the addition. Time units operate on the instant time-line. The period is first added to the local date-time, then converted back to a zoned date-time using the zone ID. The conversion uses @B_java#time#ZonedDateTime#ofInstant_E@ with the offset before the addition. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public ZonedDateTime plus (long amountToAdd, TemporalUnit unit)"}, "withDayOfYear(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date with the requested day, not null"]], "Parameters": [["int", "int: the day-of-year to set in the result, from 1 to 365-366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-year value is invalid, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the day-of-year altered. This operates on the local time-line, @B_java#time#LocalDateTime#withDayOfYear_E@ of the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withDayOfYear (int dayOfYear)"}, "ofInstant(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from an Instant. This creates a zoned date-time with the same instant as that specified. Calling @B_java#time#chrono#ChronoZonedDateTime#toInstant_E@ will return an instant equal to the one used here. Converting an instant to a zoned date-time is simple as there is only one valid offset for each instant.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime ofInstant (Instant instant, ZoneId zone)"}, "getDayOfYear()": {"Returns": [["int", "the day-of-year, from 1 to 365, or 366 in a leap year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.", "history": "Added in API level 26", "FullName": "public int getDayOfYear ()"}, "getHour()": {"Returns": [["int", "the hour-of-day, from 0 to 23"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hour-of-day field.", "history": "Added in API level 26", "FullName": "public int getHour ()"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date-time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#ZonedDateTime#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the @B_java#time#ZonedDateTime#plus_E@ and @B_java#time#ZonedDateTime#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "getSecond()": {"Returns": [["int", "the second-of-minute, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the second-of-minute field.", "history": "Added in API level 26", "FullName": "public int getSecond ()"}, "ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID. This creates a zoned date-time ensuring that the offset is valid for the local date-time according to the rules of the specified zone. If the offset is invalid, an exception is thrown.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime ofStrict (LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)"}, "withFixedOffsetZone()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime with the zone ID set to the offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the zone ID set to the offset. This returns a zoned date-time where the zone ID is the same as @B_java#time#ZonedDateTime#getOffset_E@. The local date-time, offset and instant of the result will be the same as in this date-time. Setting the date-time to a fixed single offset means that any future calculations, such as addition or subtraction, have no complex edge cases due to time-zone rules. This might also be useful when sending a zoned date-time across a network, as most protocols, such as ISO-8601, only handle offsets, and not region-based zone IDs. This is equivalent to ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset()).", "history": "Added in API level 26", "FullName": "public ZonedDateTime withFixedOffsetZone ()"}, "getMonth()": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#ZonedDateTime#getMonthValue_E@"], "Permissions": [], "Description": "Gets the month-of-year field using the Month enum. This method returns the enum @B_java#time#Month_E@ for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#Month#getValue_E@.", "history": "Added in API level 26", "FullName": "public Month getMonth ()"}, "plusMinutes(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the minutes added, not null"]], "Parameters": [["long", "long: the minutes to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of minutes added. This operates on the instant time-line, such that adding one minute will always be a duration of one minute later. This may cause the local date-time to change by an amount other than one minute. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusMinutes (long minutes)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a ZonedDateTime, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#ZonedDateTime#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minus (TemporalAmount amountToSubtract)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this date-time, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this date-time can be queried for the specified field. If false, then calling the @B_java#time#ZonedDateTime#range_E@, @B_java#time#ZonedDateTime#get_E@ and @B_java#time#ZonedDateTime#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA INSTANT_SECONDS OFFSET_SECONDS All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the parsed zoned date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a text string using a specific formatter. The text is parsed using the formatter, returning a date-time.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime parse (CharSequence text, DateTimeFormatter formatter)"}, "getOffset()": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zone offset, such as '+01:00'. This is the offset of the local date-time from UTC/Greenwich.", "history": "Added in API level 26", "FullName": "public ZoneOffset getOffset ()"}, "of(java.time.LocalDateTime,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a local date-time. This creates a zoned date-time matching the input local date-time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, when clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, when clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\".", "history": "Added in API level 26", "FullName": "public static ZonedDateTime of (LocalDateTime localDateTime, ZoneId zone)"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalTime part of this date-time. This returns a LocalTime with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public LocalTime toLocalTime ()"}, "withMinute(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested minute, not null"]], "Parameters": [["int", "int: the minute-of-hour to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the minute value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the minute-of-hour altered. This operates on the local time-line, ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withMinute (int minute)"}, "withLaterOffsetAtOverlap()": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the later offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap. This method only has any effect when the local time-line overlaps, such as at an autumn daylight savings cutover. In this scenario, there are two valid offsets for the local date-time. Calling this method will return a zoned date-time with the later of the two selected. If this method is called when it is not an overlap, this is returned. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withLaterOffsetAtOverlap ()"}, "plusDays(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the days added, not null"]], "Parameters": [["long", "long: the days to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of days added. This operates on the local time-line, @B_java#time#LocalDateTime#plusDays_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusDays (long days)"}, "minusMinutes(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the minutes subtracted, not null"]], "Parameters": [["long", "long: the minutes to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of minutes subtracted. This operates on the instant time-line, such that subtracting one minute will always be a duration of one minute earlier. This may cause the local date-time to change by an amount other than one minute. Note that this is a different approach to that used by days, months and years. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusMinutes (long minutes)"}, "truncatedTo(java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the time truncated, not null"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to truncate to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to truncate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the time truncated. Truncation returns a copy of the original date-time with fields smaller than the specified unit set to zero. For example, truncating with the @B_java#time#temporal#ChronoUnit#MINUTES_E@ unit will set the second-of-minute and nano-of-second field to zero. The unit must have a @B_java#time#temporal#ChronoUnit_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Other units throw an exception. This operates on the local time-line, @B_java#time#LocalDateTime#truncatedTo_E@ the underlying local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime truncatedTo (TemporalUnit unit)"}, "toLocalDateTime()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalDateTime part of this date-time. This returns a LocalDateTime with the same year, month, day and time as this date-time.", "history": "Added in API level 26", "FullName": "public LocalDateTime toLocalDateTime ()"}, "of(int,int,int,int,int,int,int,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the offset date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone. This creates a zoned date-time matching the local date-time of the seven specified fields as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, when clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, when clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\". This method exists primarily for writing test cases. Non test-code will typically use other methods to create an offset time. LocalDateTime has five additional convenience variants of the equivalent factory method taking fewer arguments. They are not provided here to reduce the footprint of the API.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)"}, "withMonth(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested month, not null"]], "Parameters": [["int", "int: the month-of-year to set in the result, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the month-of-year altered. This operates on the local time-line, @B_java#time#LocalDateTime#withMonth_E@ of the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withMonth (int month)"}, "withZoneSameInstant(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to change to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with a different time-zone, retaining the instant. This method changes the time-zone and retains the instant. This normally results in a change to the local date-time. This method is based on retaining the same instant, thus gaps and overlaps in the local time-line have no effect on the result. To change the offset while keeping the local time, use @B_java#time#ZonedDateTime#withZoneSameLocal_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withZoneSameInstant (ZoneId zone)"}, "minusWeeks(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the weeks subtracted, not null"]], "Parameters": [["long", "long: the weeks to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of weeks subtracted. This operates on the local time-line, @B_java#time#LocalDateTime#minusWeeks_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusWeeks (long weeks)"}, "withNano(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested nanosecond, not null"]], "Parameters": [["int", "int: the nano-of-second to set in the result, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nano value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the nano-of-second altered. This operates on the local time-line, ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withNano (int nanoOfSecond)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a ZonedDateTime, based on this one, with the specified amount added. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#ZonedDateTime#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plus (TemporalAmount amountToAdd)"}, "of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the offset date-time, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the local date, not null"], ["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a local date and time. This creates a zoned date-time matching the input local date and time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date time and first combined to form a local date-time. The local date-time is then resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, when clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, when clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\".", "history": "Added in API level 26", "FullName": "public static ZonedDateTime of (LocalDate date, LocalTime time, ZoneId zone)"}, "getZone()": {"Returns": [["@B_java#time#ZoneId_E@", "the time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time-zone, such as 'Europe/Paris'. This returns the zone ID. This identifies the time-zone @B_java#time#zone#ZoneRules_E@ that determine when and how the offset from UTC/Greenwich changes. The zone ID may be same as the @B_java#time#ZonedDateTime#withFixedOffsetZone_E@.", "history": "Added in API level 26", "FullName": "public ZoneId getZone ()"}, "toOffsetDateTime()": {"Returns": [["@B_java#time#OffsetDateTime_E@", "an offset date-time representing the same local date-time and offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to an OffsetDateTime. This creates an offset date-time using the local date-time and offset. The zone ID is ignored.", "history": "Added in API level 26", "FullName": "public OffsetDateTime toOffsetDateTime ()"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this date-time and the end date-time"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to a ZonedDateTime, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a ZonedDateTime"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another date-time in terms of the specified unit. This calculates the amount of time between two ZonedDateTime objects in terms of a single TemporalUnit. The start and end points are this and the specified date-time. The result will be negative if the end is before the start. For example, the amount in days between two date-times can be calculated using startDateTime.until(endDateTime, DAYS). The Temporal passed to this method is converted to a ZonedDateTime using @B_java#time#ZonedDateTime#from_E@. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time. The calculation returns a whole number, representing the number of complete units between the two date-times. For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z will only be one month as it is one minute short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. The calculation for date and time units differ. Date units operate on the local time-line, using the local date-time. For example, the period from noon on day 1 to noon the following day in days will always be counted as exactly one day, irrespective of whether there was a daylight savings change or not. Time units operate on the instant time-line. The calculation effectively converts both zoned date-times to instants and then calculates the period between the instants. For example, the period from noon on day 1 to noon the following day in hours may be 23, 24 or 25 hours (or some other amount) depending on whether there was a daylight savings change or not. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "ofInstant(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from an Instant. This creates a zoned date-time with the same instant as that specified. Calling @B_java#time#chrono#ChronoZonedDateTime#toInstant_E@ will return an instant equal to the one used here. Converting an instant to a zoned date-time is simple as there is only one valid offset for each instant.", "history": "added in API level 26", "FullName": "public static ZonedDateTime ofInstant (Instant instant, ZoneId zone)"}, "minusDays(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the days subtracted, not null"]], "Parameters": [["long", "long: the days to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of days subtracted. This operates on the local time-line, @B_java#time#LocalDateTime#minusDays_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime minusDays (long days)"}, "plusHours(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the hours added, not null"]], "Parameters": [["long", "long: the hours to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of hours added. This operates on the instant time-line, such that adding one hour will always be a duration of one hour later. This may cause the local date-time to change by an amount other than one hour. Note that this is a different approach to that used by days, months and years, thus adding one day is not the same as adding 24 hours. For example, consider a time-zone where the spring DST cutover means that the local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00. Adding one hour to 00:30+02:00 will result in 01:30+02:00 Adding one hour to 01:30+02:00 will result in 01:30+01:00 Adding one hour to 01:30+01:00 will result in 02:30+01:00 Adding three hours to 00:30+02:00 will result in 02:30+01:00 This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusHours (long hours)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to an ZonedDateTime"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a temporal object. This obtains a zoned date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ZonedDateTime. The conversion will first obtain a ZoneId from the temporal object, falling back to a ZoneOffset if necessary. It will then try to obtain an Instant, falling back to a LocalDateTime if necessary. The result will be either the combination of ZoneId or ZoneOffset with Instant or LocalDateTime. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ZonedDateTime::from.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime from (TemporalAccessor temporal)"}, "withDayOfMonth(int)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the requested day, not null"]], "Parameters": [["int", "int: the day-of-month to set in the result, from 1 to 28-31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the day-of-month altered. This operates on the local time-line, @B_java#time#LocalDateTime#withDayOfMonth_E@ of the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime withDayOfMonth (int dayOfMonth)"}, "plusWeeks(long)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this date-time with the weeks added, not null"]], "Parameters": [["long", "long: the weeks to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this ZonedDateTime with the specified number of weeks added. This operates on the local time-line, @B_java#time#LocalDateTime#plusWeeks_E@ to the local date-time. This is then converted back to a ZonedDateTime, using the zone ID to obtain the offset. When converting back to ZonedDateTime, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime plusWeeks (long weeks)"}, "of(java.time.LocalDateTime, java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#LocalDateTime_E@", "LocalDateTime: the local date-time, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a local date-time. This creates a zoned date-time matching the input local date-time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, when clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, when clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\".", "history": "added in API level 26", "FullName": "public static ZonedDateTime of (LocalDateTime localDateTime, ZoneId zone)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the parsed zoned date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"2007-12-03T10:15:30+01:00[Europe/Paris]\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]. The string must represent a valid date-time and is parsed using @B_java#time#format#DateTimeFormatter#ISO_ZONED_DATE_TIME_E@.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime parse (CharSequence text)"}, "getMinute()": {"Returns": [["int", "the minute-of-hour, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minute-of-hour field.", "history": "Added in API level 26", "FullName": "public int getMinute ()"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the current date-time using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date-time. Specifying the time-zone avoids dependence on the default time-zone. The offset will be calculated from the specified time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static ZonedDateTime now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "a ZonedDateTime based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this date-time. This returns a ZonedDateTime, based on this one, with the date-time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as @B_java#time#Month_E@ and @B_java#time#MonthDay_E@. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July: The classes @B_java#time#LocalDate_E@ and @B_java#time#LocalTime_E@ implement TemporalAdjuster, thus this method can be used to change the date, time or offset: @B_java#time#ZoneOffset_E@ also implements TemporalAdjuster however using it as an argument typically has no effect. The offset of a ZonedDateTime is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public ZonedDateTime with (TemporalAdjuster adjuster)"}, "getNano()": {"Returns": [["int", "the nano-of-second, from 0 to 999,999,999"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nano-of-second field.", "history": "Added in API level 26", "FullName": "public int getNano ()"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date-time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}}, "Inheritance": [], "ClassName": "java.time.ZonedDateTime", "ClassDesc": "A date-time with a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 Europe/Paris. ZonedDateTime is an immutable representation of a date-time with a time-zone. This class stores all date and time fields, to a precision of nanoseconds, and a time-zone, with a zone offset used to handle ambiguous local date-times. For example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\" can be stored in a ZonedDateTime. This class handles conversion from the local time-line of LocalDateTime to the instant time-line of Instant. The difference between the two time-lines is the offset from UTC/Greenwich, represented by a ZoneOffset. Converting between the two time-lines involves calculating the offset using the @B_java#time#zone#ZoneRules_E@ accessed from the ZoneId. Obtaining the offset for an instant is simple, as there is exactly one valid offset for each instant. By contrast, obtaining the offset for a local date-time is not straightforward. There are three cases: Normal, with one valid offset. For the vast majority of the year, the normal case applies, where there is a single valid offset for the local date-time. Gap, with zero valid offsets. This is when clocks jump forward typically due to the spring daylight savings change from \"winter\" to \"summer\". In a gap there are local date-time values with no valid offset. Overlap, with two valid offsets. This is when clocks are set back typically due to the autumn daylight savings change from \"summer\" to \"winter\". In an overlap there are local date-time values with two valid offsets. Any method that converts directly or implicitly from a local date-time to an instant by obtaining the offset has the potential to be complicated. For Gaps, the general strategy is that if the local date-time falls in the middle of a Gap, then the resulting zoned date-time will have a local date-time shifted forwards by the length of the Gap, resulting in a date-time in the later offset, typically \"summer\" time. For Overlaps, the general strategy is that if the local date-time falls in the middle of an Overlap, then the previous offset will be retained. If there is no previous offset, or the previous offset is invalid, then the earlier offset is used, typically \"summer\" time.. Two additional methods, @B_java#time#ZonedDateTime#withEarlierOffsetAtOverlap_E@ and @B_java#time#ZonedDateTime#withLaterOffsetAtOverlap_E@, help manage the case of an overlap. In terms of design, this class should be viewed primarily as the combination of a LocalDateTime and a ZoneId. The ZoneOffset is a vital, but secondary, piece of information, used to ensure that the class represents an instant, especially during a daylight savings overlap."}