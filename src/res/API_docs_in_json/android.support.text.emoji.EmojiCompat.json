{"Functions": {"get()": {"Returns": [["@B_android#support#text#emoji#EmojiCompat_E@", "EmojiCompat instance"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if called before @B_android#support#text#emoji#EmojiCompat#init_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Return singleton EmojiCompat instance. Should be called after @B_android#support#text#emoji#EmojiCompat#init_E@ is called to initialize the singleton instance.", "history": "added in version 26.0.0-beta1", "FullName": "EmojiCompat get ()"}, "process(java.lang.CharSequence)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: CharSequence to add the EmojiSpans"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not initialized yet"]], "SeeAlso": ["@B_android#support#text#emoji#EmojiCompat#process_E@"], "Permissions": [], "Description": "Checks a given CharSequence for emojis, and adds EmojiSpans if any emojis are found. When used on devices running API 18 or below, returns the given charSequence without processing it.", "history": "added in version 26.0.0-beta1", "FullName": "CharSequence process (CharSequence charSequence)"}, "hasEmojiGlyph(java.lang.CharSequence, int)": {"Returns": [["boolean", "true if EmojiCompat can render given emoji, cannot be null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: CharSequence representing the emoji"], ["int", "int: the metadata version to check against, should be greater than or equal to 0,"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not initialized yet"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if EmojiCompat is capable of rendering an emoji at the given metadata version. When used on devices running API 18 or below, always returns false.", "history": "added in version 26.0.0-beta1", "FullName": "boolean hasEmojiGlyph (CharSequence sequence, int metadataVersion)"}, "process(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: CharSequence to add the EmojiSpans, cannot be null"], ["int", "int: start index in the charSequence to look for emojis, should be greater than or equal to 0, also less than charSequence.length()"], ["int", "int: end index in the charSequence to look for emojis, should be greater than or equal to start parameter, also less than charSequence.length()"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not initialized yet"], ["@B_java#lang#IllegalArgumentException_E@", "in the following cases: start < 0, end < 0, end < start, start > charSequence.length(), end > charSequence.length()"]], "SeeAlso": [], "Permissions": [], "Description": "Checks a given CharSequence for emojis, and adds EmojiSpans if any emojis are found. If no emojis are found, charSequence given as the input is returned without any changes. i.e. charSequence is a String, and no emojis are found, the same String is returned. If the given input is not a Spannable (such as String), and at least one emoji is found a new @B_android#text#Spannable_E@ instance is returned. If the given input is a Spannable, the same instance is returned. When used on devices running API 18 or below, returns the given charSequence without processing it.", "history": "added in version 26.0.0-beta1", "FullName": "CharSequence process (CharSequence charSequence, int start, int end)"}, "getLoadState()": {"Returns": [["int", "one of @B_android#support#text#emoji#EmojiCompat#LOAD_STATE_LOADING_E@, @B_android#support#text#emoji#EmojiCompat#LOAD_STATE_SUCCEEDED_E@, @B_android#support#text#emoji#EmojiCompat#LOAD_STATE_FAILED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns loading state of the EmojiCompat instance. When used on devices running API 18 or below always returns @B_android#support#text#emoji#EmojiCompat#LOAD_STATE_SUCCEEDED_E@.", "history": "added in version 26.0.0-beta1", "FullName": "int getLoadState ()"}, "process(java.lang.CharSequence, int, int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: CharSequence to add the EmojiSpans, cannot be null"], ["int", "int: start index in the charSequence to look for emojis, should be greater than or equal to 0, also less than charSequence.length()"], ["int", "int: end index in the charSequence to look for emojis, should be greater than or equal to start parameter, also less than charSequence.length()"], ["int", "int: maximum number of emojis in the charSequence, should be greater than or equal to 0"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not initialized yet"], ["@B_java#lang#IllegalArgumentException_E@", "in the following cases: start < 0, end < 0, end < start, start > charSequence.length(), end > charSequence.length() maxEmojiCount < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Checks a given CharSequence for emojis, and adds EmojiSpans if any emojis are found. If no emojis are found, charSequence given as the input is returned without any changes. i.e. charSequence is a String, and no emojis are found, the same String is returned. If the given input is not a Spannable (such as String), and at least one emoji is found a new @B_android#text#Spannable_E@ instance is returned. If the given input is a Spannable, the same instance is returned. When used on devices running API 18 or below, returns the given charSequence without processing it.", "history": "added in version 26.0.0-beta1", "FullName": "CharSequence process (CharSequence charSequence, int start, int end, int maxEmojiCount)"}, "hasEmojiGlyph(java.lang.CharSequence)": {"Returns": [["boolean", "true if EmojiCompat can render given emoji, cannot be null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: CharSequence representing the emoji"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not initialized yet"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if EmojiCompat is capable of rendering an emoji. When used on devices running API 18 or below, always returns false.", "history": "added in version 26.0.0-beta1", "FullName": "boolean hasEmojiGlyph (CharSequence sequence)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.text.emoji.EmojiCompat", "ClassDesc": "Main class to keep Android devices up to date with the newest emojis by adding @B_android#support#text#emoji#EmojiSpan_E@s to a given @B_java#lang#CharSequence_E@. It is a singleton class that can be configured using a @B_android#support#text#emoji#EmojiCompat#Config_E@ instance. EmojiCompat has to be initialized using @B_android#support#text#emoji#EmojiCompat#init_E@ function before it can process a @B_java#lang#CharSequence_E@. It is suggested to make the initialization as early as possible in your app. Please check @B_android#support#text#emoji#EmojiCompat#Config_E@ for more configuration parameters. During initialization information about emojis is loaded on a background thread. Before the EmojiCompat instance is initialized, calls to functions such as @B_android#support#text#emoji#EmojiCompat#process_E@ will throw an exception. You can use the @B_android#support#text#emoji#EmojiCompat#InitCallback_E@ class to be informed about the state of initialization. After initialization the @B_android#support#text#emoji#EmojiCompat#get_E@ function can be used to get the configured instance and the @B_android#support#text#emoji#EmojiCompat#process_E@ function can be used to update a CharSequence with emoji EmojiSpans."}