{"Functions": {"RotateAnimation(float,float,int,float,int,float)": {"Returns": [], "Parameters": [["float", "float: Rotation offset to apply at the start of the animation."], ["float", "float: Rotation offset to apply at the end of the animation."], ["int", "int: Specifies how pivotXValue should be interpreted. One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT."], ["float", "float: The X coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the left edge. This value can either be an absolute number if pivotXType is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise."], ["int", "int: Specifies how pivotYValue should be interpreted. One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT."], ["float", "float: The Y coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the top edge. This value can either be an absolute number if pivotYType is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building a RotateAnimation from code", "history": "Added in API level 1", "FullName": "public RotateAnimation (float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)"}, "RotateAnimation(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: Rotation offset to apply at the start of the animation."], ["float", "float: Rotation offset to apply at the end of the animation."], ["float", "float: The X coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the left edge."], ["float", "float: The Y coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the top edge."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building a RotateAnimation from code", "history": "added in API level 1", "FullName": "public RotateAnimation (float fromDegrees, float toDegrees, float pivotX, float pivotY)"}, "RotateAnimation(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Application context to use"], ["@B_android#util#AttributeSet_E@", "AttributeSet: Attribute set from which to read values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor used when a RotateAnimation is loaded from a resource.", "history": "Added in API level 1", "FullName": "public RotateAnimation (Context context, AttributeSet attrs)"}, "RotateAnimation(float,float)": {"Returns": [], "Parameters": [["float", "float: Rotation offset to apply at the start of the animation."], ["float", "float: Rotation offset to apply at the end of the animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building a RotateAnimation from code. Default pivotX/pivotY point is (0,0).", "history": "Added in API level 1", "FullName": "public RotateAnimation (float fromDegrees, float toDegrees)"}, "RotateAnimation(float, float)": {"Returns": [], "Parameters": [["float", "float: Rotation offset to apply at the start of the animation."], ["float", "float: Rotation offset to apply at the end of the animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building a RotateAnimation from code. Default pivotX/pivotY point is (0,0).", "history": "added in API level 1", "FullName": "public RotateAnimation (float fromDegrees, float toDegrees)"}, "initialize(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "Added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}, "applyTransformation(float,android.view.animation.Transformation)": {"Returns": [], "Parameters": [["float", "float: The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function."], ["@B_android#view#animation#Transformation_E@", "Transformation: The Transformation object to fill in with the current transforms."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getTransformation. Subclasses should implement this to apply their transforms given an interpolation value. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.", "history": "Added in API level 1", "FullName": "protected void applyTransformation (float interpolatedTime, Transformation t)"}, "RotateAnimation(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: Rotation offset to apply at the start of the animation."], ["float", "float: Rotation offset to apply at the end of the animation."], ["float", "float: The X coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the left edge."], ["float", "float: The Y coordinate of the point about which the object is being rotated, specified as an absolute number where 0 is the top edge."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building a RotateAnimation from code", "history": "Added in API level 1", "FullName": "public RotateAnimation (float fromDegrees, float toDegrees, float pivotX, float pivotY)"}, "initialize(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}}, "Inheritance": ["@B_android#view#animation#Animation_E@"], "ClassName": "android.view.animation.RotateAnimation", "ClassDesc": "An animation that controls the rotation of an object. This rotation takes place in the X-Y plane. You can specify the point to use for the center of the rotation, where (0,0) is the top left point. If not specified, (0,0) is the default rotation point."}