{"Functions": {"connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#net#SocketTimeoutException_E@", "if the timeout expires before the connection can be established"], ["@B_java#io#IOException_E@", "if an I/O error occurs while opening the connection."]], "SeeAlso": ["@B_java#net#URLConnection#connected_E@", "@B_java#net#URLConnection#getConnectTimeout_E@", "@B_java#net#URLConnection#setConnectTimeout_E@"], "Permissions": [], "Description": "Opens a communications link to the resource referenced by this URL, if such a connection has not already been established. If the connect method is called when the connection has already been opened (indicated by the connected field having the value true), the call is ignored. URLConnection objects go through two phases: first they are created, then they are connected. After being created, and before being connected, various options can be specified (e.g., doInput and UseCaches). After connecting, it is an error to try to set them. Operations that depend on being connected, like getContentLength, will implicitly perform the connection, if necessary.", "history": "Added in API level 1", "FullName": "public abstract void connect ()"}, "URLConnection(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the specified URL."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a URL connection to the specified URL. A connection to the object referenced by the URL is not created.", "history": "Added in API level 1", "FullName": "protected URLConnection (URL url)"}, "setContentHandlerFactory(java.net.ContentHandlerFactory)": {"Returns": [], "Parameters": [["@B_java#net#ContentHandlerFactory_E@", "ContentHandlerFactory: the desired factory."]], "Throws": [["@B_java#lang#Error_E@", "if the factory has already been defined."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#net#ContentHandlerFactory_E@", "@B_java#net#URLConnection#getContent_E@", "@B_java#lang#SecurityManager#checkSetFactory_E@"], "Permissions": [], "Description": "Sets the ContentHandlerFactory of an application. It can be called at most once by an application. The ContentHandlerFactory instance is used to construct a content handler from a content type If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setContentHandlerFactory (ContentHandlerFactory fac)"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "an input stream that reads from this open connection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while creating the input stream."], ["@B_java#net#UnknownServiceException_E@", "if the protocol does not support input."]], "SeeAlso": ["@B_java#net#URLConnection#setReadTimeout_E@", "@B_java#net#URLConnection#getReadTimeout_E@"], "Permissions": [], "Description": "Returns an input stream that reads from this open connection. A SocketTimeoutException can be thrown when reading from the returned input stream if the read timeout expires before data is available for read.", "history": "Added in API level 1", "FullName": "public InputStream getInputStream ()"}, "getDate()": {"Returns": [["long", "the sending date of the resource that the URL references, or 0 if not known. The value returned is the number of milliseconds since January 1, 1970 GMT."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderField_E@"], "Permissions": [], "Description": "Returns the value of the date header field.", "history": "Added in API level 1", "FullName": "public long getDate ()"}, "getIfModifiedSince()": {"Returns": [["long", "the value of this object's ifModifiedSince field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setIfModifiedSince_E@"], "Permissions": [], "Description": "Returns the value of this object's ifModifiedSince field.", "history": "Added in API level 1", "FullName": "public long getIfModifiedSince ()"}, "getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "an output stream that writes to this connection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while creating the output stream."], ["@B_java#net#UnknownServiceException_E@", "if the protocol does not support output."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an output stream that writes to this connection.", "history": "Added in API level 1", "FullName": "public OutputStream getOutputStream ()"}, "setAllowUserInteraction(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#getAllowUserInteraction_E@"], "Permissions": [], "Description": "Set the value of the allowUserInteraction field of this URLConnection.", "history": "Added in API level 1", "FullName": "public void setAllowUserInteraction (boolean allowuserinteraction)"}, "setIfModifiedSince(long)": {"Returns": [], "Parameters": [["long", "long: the new value."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#getIfModifiedSince_E@"], "Permissions": [], "Description": "Sets the value of the ifModifiedSince field of this URLConnection to the specified value.", "history": "Added in API level 1", "FullName": "public void setIfModifiedSince (long ifmodifiedsince)"}, "getDoInput()": {"Returns": [["boolean", "the value of this URLConnection's doInput flag."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setDoInput_E@"], "Permissions": [], "Description": "Returns the value of this URLConnection's doInput flag.", "history": "Added in API level 1", "FullName": "public boolean getDoInput ()"}, "getPermission()": {"Returns": [["@B_java#security#Permission_E@", "the permission object representing the permission necessary to make the connection represented by this URLConnection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the computation of the permission requires network or file I/O and an exception occurs while computing it."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a permission object representing the permission necessary to make the connection represented by this object. This method returns null if no permission is required to make the connection. By default, this method returns java.security.AllPermission. Subclasses should override this method and return the permission that best represents the permission required to make a a connection to the URL. For example, a URLConnection representing a file: URL would return a java.io.FilePermission object. The permission returned may dependent upon the state of the connection. For example, the permission before connecting may be different from that after connecting. For example, an HTTP sever, say foo.com, may redirect the connection to a different host, say bar.com. Before connecting the permission returned by the connection will represent the permission needed to connect to foo.com, while the permission returned after connecting will be to bar.com. Permissions are generally used for two purposes: to protect caches of objects obtained through URLConnections, and to check the right of a recipient to learn about a particular URL. In the first case, the permission should be obtained after the object has been obtained. For example, in an HTTP connection, this will represent the permission to connect to the host from which the data was ultimately fetched. In the second case, the permission should be obtained and tested before connecting.", "history": "Added in API level 1", "FullName": "public Permission getPermission ()"}, "getLastModified()": {"Returns": [["long", "the date the resource referenced by this URLConnection was last modified, or 0 if not known."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderField_E@"], "Permissions": [], "Description": "Returns the value of the last-modified header field. The result is the number of milliseconds since January 1, 1970 GMT.", "history": "Added in API level 1", "FullName": "public long getLastModified ()"}, "getExpiration()": {"Returns": [["long", "the expiration date of the resource that this URL references, or 0 if not known. The value is the number of milliseconds since January 1, 1970 GMT."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderField_E@"], "Permissions": [], "Description": "Returns the value of the expires header field.", "history": "Added in API level 1", "FullName": "public long getExpiration ()"}, "getHeaderField(int)": {"Returns": [["@B_java#lang#String_E@", "the value of the nth header field or null if there are fewer than n+1 fields"]], "Parameters": [["int", "int: an index, where n>=0"]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderFieldKey_E@"], "Permissions": [], "Description": "Returns the value for the nnull if there are fewer than n+1fields. This method can be used in conjunction with the @B_java#net#URLConnection#getHeaderFieldKey_E@ method to iterate through all the headers in the message.", "history": "Added in API level 1", "FullName": "public String getHeaderField (int n)"}, "getContentLength()": {"Returns": [["int", "the content length of the resource that this connection's URL references, -1 if the content length is not known, or if the content length is greater than Integer.MAX_VALUE."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the content-length header field. @B_java#net#URLConnection#getContentLengthLong_E@ should be preferred over this method, since it returns a long instead and is therefore more portable.", "history": "Added in API level 1", "FullName": "public int getContentLength ()"}, "getURL()": {"Returns": [["@B_java#net#URL_E@", "the value of this URLConnection's URL field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#url_E@"], "Permissions": [], "Description": "Returns the value of this URLConnection's URL field.", "history": "Added in API level 1", "FullName": "public URL getURL ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this URLConnection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String representation of this URL connection.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getHeaderFieldLong(java.lang.String,long)": {"Returns": [["long", "the value of the named field, parsed as a long. The Default value is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: the default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as a number. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "Added in API level 24", "FullName": "public long getHeaderFieldLong (String name, long Default)"}, "setFileNameMap(java.net.FileNameMap)": {"Returns": [], "Parameters": [["@B_java#net#FileNameMap_E@", "FileNameMap: the FileNameMap to be set"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSetFactory_E@", "@B_java#net#URLConnection#getFileNameMap_E@"], "Permissions": [], "Description": "Sets the FileNameMap. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setFileNameMap (FileNameMap map)"}, "setDefaultUseCaches(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value."]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getDefaultUseCaches_E@"], "Permissions": [], "Description": "Sets the default value of the useCaches field to the specified value.", "history": "Added in API level 1", "FullName": "public void setDefaultUseCaches (boolean defaultusecaches)"}, "getHeaderFieldKey(int)": {"Returns": [["@B_java#lang#String_E@", "the key for the nth header field, or null if there are fewer than n+1 fields."]], "Parameters": [["int", "int: an index, where n>=0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key for the nnull if there are fewer than n+1 fields.", "history": "Added in API level 1", "FullName": "public String getHeaderFieldKey (int n)"}, "guessContentTypeFromStream(java.io.InputStream)": {"Returns": [["@B_java#lang#String_E@", "a guess at the content type, or null if none can be determined."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream that supports marks."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while reading the input stream."]], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#markSupported_E@", "@B_java#net#URLConnection#getContentType_E@"], "Permissions": [], "Description": "Tries to determine the type of an input stream based on the characters at the beginning of the input stream. This method can be used by subclasses that override the getContentType method. Ideally, this routine would not be needed. But many http servers return the incorrect content type; in addition, there are many nonstandard extensions. Direct inspection of the bytes to determine the content type is often more accurate than believing the content type claimed by the http server.", "history": "Added in API level 1", "FullName": "public static String guessContentTypeFromStream (InputStream is)"}, "getRequestProperties()": {"Returns": [["@B_java#util#Map_E@", "a Map of the general request properties for this connection."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable Map of general request properties for this connection. The Map keys are Strings that represent the request-header field names. Each Map value is a unmodifiable List of Strings that represents the corresponding field values.", "history": "Added in API level 1", "FullName": "public Map<String, List<String>> getRequestProperties ()"}, "getConnectTimeout()": {"Returns": [["int", "an int that indicates the connect timeout value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setConnectTimeout_E@", "@B_java#net#URLConnection#connect_E@"], "Permissions": [], "Description": "Returns setting for connect timeout. 0 return implies that the option is disabled (i.e., timeout of infinity).", "history": "Added in API level 1", "FullName": "public int getConnectTimeout ()"}, "getContent(java.lang.Class[])": {"Returns": [["@B_java#lang#Object_E@", "the object fetched that is the first match of the type specified in the classes array. null if none of the requested types are supported. The instanceof operator should be used to determine the specific kind of object returned."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class array indicating the requested types"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while getting the content."], ["@B_java#net#UnknownServiceException_E@", "if the protocol does not support the content type."]], "SeeAlso": ["@B_java#net#URLConnection#getContent_E@", "@B_java#net#ContentHandlerFactory#createContentHandler_E@", "@B_java#net#URLConnection#setContentHandlerFactory_E@"], "Permissions": [], "Description": "Retrieves the contents of this URL connection.", "history": "Added in API level 1", "FullName": "public Object getContent (Class[] classes)"}, "setDefaultRequestProperty(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the keyword by which the request is known (e.g., \"Accept\")."], ["@B_java#lang#String_E@", "String: the value associated with the key."]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setRequestProperty_E@", "@B_java#net#URLConnection#getDefaultRequestProperty_E@"], "Permissions": [], "Description": "The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Invoking this method will have no effect. Sets the default value of a general request property. When a URLConnection is created, it is initialized with these properties.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void setDefaultRequestProperty (String key, String value)"}, "getRequestProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the named general request property for this connection. If key is null, then null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword by which the request is known (e.g., \"Accept\")."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#setRequestProperty_E@"], "Permissions": [], "Description": "Returns the value of the named general request property for this connection.", "history": "Added in API level 1", "FullName": "public String getRequestProperty (String key)"}, "getContentType()": {"Returns": [["@B_java#lang#String_E@", "the content type of the resource that the URL references, or null if not known."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderField_E@"], "Permissions": [], "Description": "Returns the value of the content-type header field.", "history": "Added in API level 1", "FullName": "public String getContentType ()"}, "guessContentTypeFromName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a guess as to what the content type of the object is, based upon its file name."]], "Parameters": [["@B_java#lang#String_E@", "String: a filename."]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getContentType_E@"], "Permissions": [], "Description": "Tries to determine the content type of an object, based on the specified \"file\" component of a URL. This is a convenience method that can be used by subclasses that override the getContentType method.", "history": "Added in API level 1", "FullName": "public static String guessContentTypeFromName (String fname)"}, "getDoOutput()": {"Returns": [["boolean", "the value of this URLConnection's doOutput flag."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setDoOutput_E@"], "Permissions": [], "Description": "Returns the value of this URLConnection's doOutput flag.", "history": "Added in API level 1", "FullName": "public boolean getDoOutput ()"}, "getContentEncoding()": {"Returns": [["@B_java#lang#String_E@", "the content encoding of the resource that the URL references, or null if not known."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getHeaderField_E@"], "Permissions": [], "Description": "Returns the value of the content-encoding header field.", "history": "Added in API level 1", "FullName": "public String getContentEncoding ()"}, "getHeaderField(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the named header field, or null if there is no such field in the header."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of a header field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named header field. If called on a connection that sets the same header multiple times with possibly different values, only the last value is returned.", "history": "Added in API level 1", "FullName": "public String getHeaderField (String name)"}, "getHeaderFields()": {"Returns": [["@B_java#util#Map_E@", "a Map of header fields"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable Map of the header fields. The Map keys are Strings that represent the response-header field names. Each Map value is an unmodifiable List of Strings that represents the corresponding field values.", "history": "Added in API level 1", "FullName": "public Map<String, List<String>> getHeaderFields ()"}, "getUseCaches()": {"Returns": [["boolean", "the value of this URLConnection's useCaches field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setUseCaches_E@"], "Permissions": [], "Description": "Returns the value of this URLConnection's useCaches field.", "history": "Added in API level 1", "FullName": "public boolean getUseCaches ()"}, "getHeaderFieldLong(java.lang.String, long)": {"Returns": [["long", "the value of the named field, parsed as a long. The Default value is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: the default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as a number. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "added in API level 24", "FullName": "public long getHeaderFieldLong (String name, long Default)"}, "setDefaultAllowUserInteraction(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value."]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getDefaultAllowUserInteraction_E@"], "Permissions": [], "Description": "Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.", "history": "Added in API level 1", "FullName": "public static void setDefaultAllowUserInteraction (boolean defaultallowuserinteraction)"}, "setUseCaches(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a boolean indicating whether or not to allow caching"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#getUseCaches_E@"], "Permissions": [], "Description": "Sets the value of the useCaches field of this URLConnection to the specified value. Some protocols do caching of documents. Occasionally, it is important to be able to \"tunnel through\" and ignore the caches (e.g., the \"reload\" button in a browser). If the UseCaches flag on a connection is true, the connection is allowed to use whatever caches it can. If false, caches are to be ignored. The default value comes from DefaultUseCaches, which defaults to true.", "history": "Added in API level 1", "FullName": "public void setUseCaches (boolean usecaches)"}, "setDoOutput(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#getDoOutput_E@"], "Permissions": [], "Description": "Sets the value of the doOutput field for this URLConnection to the specified value. A URL connection can be used for input and/or output. Set the DoOutput flag to true if you intend to use the URL connection for output, false if not. The default is false.", "history": "Added in API level 1", "FullName": "public void setDoOutput (boolean dooutput)"}, "getContentLengthLong()": {"Returns": [["long", "the content length of the resource that this connection's URL references, or -1 if the content length is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the content-length header field as a long.", "history": "Added in API level 24", "FullName": "public long getContentLengthLong ()"}, "addRequestProperty(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the keyword by which the request is known (e.g., \"Accept\")."], ["@B_java#lang#String_E@", "String: the value associated with it."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"], ["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": ["@B_java#net#URLConnection#getRequestProperties_E@"], "Permissions": [], "Description": "Adds a general request property specified by a key-value pair. This method will not overwrite existing values associated with the same key.", "history": "Added in API level 1", "FullName": "public void addRequestProperty (String key, String value)"}, "getReadTimeout()": {"Returns": [["int", "an int that indicates the read timeout value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setReadTimeout_E@", "@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Returns setting for read timeout. 0 return implies that the option is disabled (i.e., timeout of infinity).", "history": "Added in API level 1", "FullName": "public int getReadTimeout ()"}, "getFileNameMap()": {"Returns": [["@B_java#net#FileNameMap_E@", "the FileNameMap"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setFileNameMap_E@"], "Permissions": [], "Description": "Loads filename map (a mimetable) from a data file. It will first try to load the user-specific table, defined by \"content.types.user.table\" property. If that fails, it tries to load the default built-in table.", "history": "Added in API level 1", "FullName": "public static FileNameMap getFileNameMap ()"}, "getDefaultAllowUserInteraction()": {"Returns": [["boolean", "the default value of the allowUserInteraction field."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setDefaultAllowUserInteraction_E@"], "Permissions": [], "Description": "Returns the default value of the allowUserInteraction field. Ths default is \"sticky\", being a part of the static state of all URLConnections. This flag applies to the next, and all following URLConnections that are created.", "history": "Added in API level 1", "FullName": "public static boolean getDefaultAllowUserInteraction ()"}, "setConnectTimeout(int)": {"Returns": [], "Parameters": [["int", "int: an int that specifies the connect timeout value in milliseconds"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the timeout parameter is negative"]], "SeeAlso": ["@B_java#net#URLConnection#getConnectTimeout_E@", "@B_java#net#URLConnection#connect_E@"], "Permissions": [], "Description": "Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection. If the timeout expires before the connection can be established, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout. Some non-standard implementation of this method may ignore the specified timeout. To see the connect timeout set, please call getConnectTimeout(). @B_java#net#HttpURLConnection_E@ will try each in", "history": "Added in API level 1", "FullName": "public void setConnectTimeout (int timeout)"}, "getAllowUserInteraction()": {"Returns": [["boolean", "the value of the allowUserInteraction field for this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setAllowUserInteraction_E@"], "Permissions": [], "Description": "Returns the value of the allowUserInteraction field for this object.", "history": "Added in API level 1", "FullName": "public boolean getAllowUserInteraction ()"}, "getDefaultUseCaches()": {"Returns": [["boolean", "the default value of a URLConnection's useCaches flag."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#setDefaultUseCaches_E@"], "Permissions": [], "Description": "Returns the default value of a URLConnection's useCaches flag. Ths default is \"sticky\", being a part of the static state of all URLConnections. This flag applies to the next, and all following URLConnections that are created.", "history": "Added in API level 1", "FullName": "public boolean getDefaultUseCaches ()"}, "getHeaderFieldDate(java.lang.String,long)": {"Returns": [["long", "the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: a default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as date. The result is the number of milliseconds since January 1, 1970 GMT represented by the named field. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "Added in API level 1", "FullName": "public long getHeaderFieldDate (String name, long Default)"}, "setReadTimeout(int)": {"Returns": [], "Parameters": [["int", "int: an int that specifies the timeout value to be used in milliseconds"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the timeout parameter is negative"]], "SeeAlso": ["@B_java#net#URLConnection#getReadTimeout_E@", "@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Sets the read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from Input stream when a connection is established to a resource. If the timeout expires before there is data available for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout. Some non-standard implementation of this method ignores the specified timeout. To see the read timeout set, please call getReadTimeout().", "history": "Added in API level 1", "FullName": "public void setReadTimeout (int timeout)"}, "getDefaultRequestProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the default request property for the specified key."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword by which the request is known (e.g., \"Accept\")."]], "Throws": [], "SeeAlso": ["@B_java#net#URLConnection#getRequestProperty_E@", "@B_java#net#URLConnection#setDefaultRequestProperty_E@"], "Permissions": [], "Description": "The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Returns the value of the default request property. Default request properties are set for every connection.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static String getDefaultRequestProperty (String key)"}, "setRequestProperty(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the keyword by which the request is known (e.g., \"Accept\")."], ["@B_java#lang#String_E@", "String: the value associated with it."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"], ["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": ["@B_java#net#URLConnection#getRequestProperty_E@"], "Permissions": [], "Description": "Sets the general request property. If a property with the key already exists, overwrite its value with the new value. NOTE: HTTP requires all request properties which can legally have multiple instances with the same key to use a comma-separated list syntax which enables multiple properties to be appended into a single property.", "history": "Added in API level 1", "FullName": "public void setRequestProperty (String key, String value)"}, "getContent()": {"Returns": [["@B_java#lang#Object_E@", "the object fetched. The instanceof operator should be used to determine the specific kind of object returned."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while getting the content."], ["@B_java#net#UnknownServiceException_E@", "if the protocol does not support the content type."]], "SeeAlso": ["@B_java#net#ContentHandlerFactory#createContentHandler_E@", "@B_java#net#URLConnection#getContentType_E@", "@B_java#net#URLConnection#setContentHandlerFactory_E@"], "Permissions": [], "Description": "Retrieves the contents of this URL connection. This method first determines the content type of the object by calling the getContentType method. If this is the first time that the application has seen that specific content type, a content handler for that content type is created:", "history": "Added in API level 1", "FullName": "public Object getContent ()"}, "getHeaderFieldInt(java.lang.String, int)": {"Returns": [["int", "the value of the named field, parsed as an integer. The Default value is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["int", "int: the default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as a number. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "added in API level 1", "FullName": "public int getHeaderFieldInt (String name, int Default)"}, "getHeaderFieldDate(java.lang.String, long)": {"Returns": [["long", "the value of the field, parsed as a date. The value of the Default argument is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["long", "long: a default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as date. The result is the number of milliseconds since January 1, 1970 GMT represented by the named field. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "added in API level 1", "FullName": "public long getHeaderFieldDate (String name, long Default)"}, "setDoInput(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if already connected"]], "SeeAlso": ["@B_java#net#URLConnection#doInput_E@", "@B_java#net#URLConnection#getDoInput_E@"], "Permissions": [], "Description": "Sets the value of the doInput field for this URLConnection to the specified value. A URL connection can be used for input and/or output. Set the DoInput flag to true if you intend to use the URL connection for input, false if not. The default is true.", "history": "Added in API level 1", "FullName": "public void setDoInput (boolean doinput)"}, "getHeaderFieldInt(java.lang.String,int)": {"Returns": [["int", "the value of the named field, parsed as an integer. The Default value is returned if the field is missing or malformed."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the header field."], ["int", "int: the default value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the named field parsed as a number. This form of getHeaderField exists because some connection types (e.g., http-ng) have pre-parsed headers. Classes for that connection type can override this method and short-circuit the parsing.", "history": "Added in API level 1", "FullName": "public int getHeaderFieldInt (String name, int Default)"}}, "Inheritance": [], "ClassName": "java.net.URLConnection", "ClassDesc": "The abstract class URLConnection is the superclass of all classes that represent a communications link between the application and a URL. Instances of this class can be used both to read from and to write to the resource referenced by the URL. In general, creating a connection to a URL is a multistep process: The setup parameters are modified using the following methods: setAllowUserInteraction setDoInput setDoOutput setIfModifiedSince setUseCaches and the general request properties are modified using the method: setRequestProperty Default values for the AllowUserInteraction and UseCaches parameters can be set using the methods setDefaultAllowUserInteraction and setDefaultUseCaches. Each of the above set methods has a corresponding get method to retrieve the value of the parameter or general request property. The specific parameters and general request properties that are applicable are protocol specific. The following methods are used to access the header fields and the contents after the connection is made to the remote object: getContent getHeaderField getInputStream getOutputStream Certain header fields are accessed frequently. The methods: getContentEncoding getContentLength getContentType getDate getExpiration getLastModifed provide convenient access to these fields. The getContentType method is used by the getContent method to determine the type of the remote object; subclasses may find it convenient to override the getContentType method. In the common case, all of the pre-connection parameters and general request properties can be ignored: the pre-connection parameters and request properties default to sensible values. For most clients of this interface, there are only two interesting methods: getInputStream and getContent, which are mirrored in the URL class by convenience methods. More information on the request properties and header fields of an http connection can be found at: close() methods on the InputStream or OutputStream of an URLConnection after a request may free network resources associated with this instance, unless particular protocol specifications specify different behaviours for it."}