{"Functions": {"getFetchSize()": {"Returns": [["int", "the default fetch size for result sets generated from this Statement object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setFetchSize_E@"], "Permissions": [], "Description": "Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object. If this Statement object has not set a fetch size by calling the method setFetchSize, the return value is implementation-specific.", "history": "Added in API level 1", "FullName": "public abstract int getFetchSize ()"}, "setFetchDirection(int)": {"Returns": [], "Parameters": [["int", "int: the initial direction for processing rows"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the given direction is not one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN"]], "SeeAlso": ["@B_java#sql#Statement#getFetchDirection_E@"], "Permissions": [], "Description": "Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object. The default value is ResultSet.FETCH_FORWARD. Note that this method sets the default fetch direction for result sets generated by this Statement object. Each result set has its own methods for getting and setting its own fetch direction.", "history": "Added in API level 1", "FullName": "public abstract void setFetchDirection (int direction)"}, "getUpdateCount()": {"Returns": [["int", "the current result as an update count; -1 if the current result is a ResultSet object or there are no more results"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#execute_E@"], "Permissions": [], "Description": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned. This method should be called only once per result.", "history": "Added in API level 1", "FullName": "public abstract int getUpdateCount ()"}, "execute(java.lang.String, int[])": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if it is an update count or there are no results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["int[]", "int: an array of the indexes of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the elements in the int array passed to this method are not valid column indexes, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Under some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). PreparedStatement or CallableStatement.", "history": "added in API level 1", "FullName": "public abstract boolean execute (String sql, int[] columnIndexes)"}, "getMaxFieldSize()": {"Returns": [["int", "the current column size limit for columns storing character and binary values; zero means there is no limit"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setMaxFieldSize_E@"], "Permissions": [], "Description": "Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object. This limit applies only to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, NCHAR, NVARCHAR, LONGNVARCHAR and LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded.", "history": "Added in API level 1", "FullName": "public abstract int getMaxFieldSize ()"}, "execute(java.lang.String, java.lang.String[])": {"Returns": [["boolean", "true if the next result is a ResultSet object; false if it is an update count or there are no more results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["@B_java#lang#String_E@", "String: an array of the names of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement,the elements of the String array passed to this method are not valid column names, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@", "@B_java#sql#Statement#getGeneratedKeys_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). PreparedStatement or CallableStatement.", "history": "added in API level 1", "FullName": "public abstract boolean execute (String sql, String[] columnNames)"}, "setMaxRows(int)": {"Returns": [], "Parameters": [["int", "int: the new max rows limit; zero means there is no limit"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the condition max >= 0 is not satisfied"]], "SeeAlso": ["@B_java#sql#Statement#getMaxRows_E@"], "Permissions": [], "Description": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number. If the limit is exceeded, the excess rows are silently dropped.", "history": "Added in API level 1", "FullName": "public abstract void setMaxRows (int max)"}, "setCursorName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new cursor name, which must be unique within a connection"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods. This name can then be used in SQL positioned update or delete statements to identify the current row in the ResultSet object generated by this statement. If the database does not support positioned update/delete, this method is a noop. To insure that a cursor has the proper isolation level to support updates, the cursor's SELECT statement should have the form SELECT FOR UPDATE. If FOR UPDATE is not present, positioned updates may fail. Statement object than the one that generated the ResultSet object being used for positioning. Also, cursor names must be unique within a connection.", "history": "Added in API level 1", "FullName": "public abstract void setCursorName (String name)"}, "setMaxFieldSize(int)": {"Returns": [], "Parameters": [["int", "int: the new column size limit in bytes; zero means there is no limit"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the condition max >= 0 is not satisfied"]], "SeeAlso": ["@B_java#sql#Statement#getMaxFieldSize_E@"], "Permissions": [], "Description": "Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object. This limit applies only to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, NCHAR, NVARCHAR, LONGNVARCHAR and LONGVARCHAR fields. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256.", "history": "Added in API level 1", "FullName": "public abstract void setMaxFieldSize (int max)"}, "getMaxRows()": {"Returns": [["int", "the current maximum number of rows for a ResultSet object produced by this Statement object; zero means there is no limit"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setMaxRows_E@"], "Permissions": [], "Description": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain. If this limit is exceeded, the excess rows are silently dropped.", "history": "Added in API level 1", "FullName": "public abstract int getMaxRows ()"}, "executeUpdate(java.lang.String, int)": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."], ["int", "int: a flag indicating whether auto-generated keys should be made available for retrieval; one of the following constants: Statement.RETURN_GENERATED_KEYS Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the given SQL statement returns a ResultSet object, the given constant is not one of those allowed, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval. The driver will ignore the flag if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). PreparedStatement or CallableStatement.", "history": "added in API level 1", "FullName": "public abstract int executeUpdate (String sql, int autoGeneratedKeys)"}, "executeUpdate(java.lang.String,int[])": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."], ["int[]", "int: an array of column indexes indicating the columns that should be returned from the inserted row"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the SQL statement returns a ResultSet object,the second argument supplied to this method is not an int array whose elements are valid column indexes, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract int executeUpdate (String sql, int[] columnIndexes)"}, "execute(java.lang.String,int[])": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if it is an update count or there are no results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["int[]", "int: an array of the indexes of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the elements in the int array passed to this method are not valid column indexes, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Under some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract boolean execute (String sql, int[] columnIndexes)"}, "getResultSetConcurrency()": {"Returns": [["int", "either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the result set concurrency for ResultSet objects generated by this Statement object.", "history": "Added in API level 1", "FullName": "public abstract int getResultSetConcurrency ()"}, "setPoolable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: requests that the statement be pooled if true and that the statement not be pooled if false"]], "Throws": [["@B_java#sql#SQLException_E@", "if this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Requests that a Statement be pooled or not pooled. The value specified is a hint to the statement pool implementation indicating whether the applicaiton wants the statement to be pooled. It is up to the statement pool manager as to whether the hint is used. The poolable value of a statement is applicable to both internal statement caches implemented by the driver and external statement caches implemented by application servers and other applications. By default, a Statement is not poolable when created, and a PreparedStatement and CallableStatement are poolable when created.", "history": "Added in API level 9", "FullName": "public abstract void setPoolable (boolean poolable)"}, "getWarnings()": {"Returns": [["@B_java#sql#SQLWarning_E@", "the first SQLWarning object or null if there are no warnings"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the first warning reported by calls on this Statement object. Subsequent Statement object warnings will be chained to this SQLWarning object. The warning chain is automatically cleared each time a statement is (re)executed. This method may not be called on a closed Statement object; doing so will cause an SQLException to be thrown. ResultSet object, any warnings associated with reads on that ResultSet object will be chained on it rather than on the Statement object that produced it.", "history": "Added in API level 1", "FullName": "public abstract SQLWarning getWarnings ()"}, "getResultSetHoldability()": {"Returns": [["int", "either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the result set holdability for ResultSet objects generated by this Statement object.", "history": "Added in API level 1", "FullName": "public abstract int getResultSetHoldability ()"}, "execute(java.lang.String)": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if it is an update count or there are no results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results. In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract boolean execute (String sql)"}, "getMoreResults()": {"Returns": [["boolean", "true if the next result is a ResultSet object; false if it is an update count or there are no more results"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#execute_E@"], "Permissions": [], "Description": "Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet. There are no more results when the following is true:", "history": "Added in API level 1", "FullName": "public abstract boolean getMoreResults ()"}, "executeQuery(java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object that contains the data produced by the given query; never null"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement to be sent to the database, typically a static SQL SELECT statement"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the given SQL statement produces anything other than a single ResultSet object, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement, which returns a single ResultSet object. PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract ResultSet executeQuery (String sql)"}, "getGeneratedKeys()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object containing the auto-generated key(s) generated by the execution of this Statement object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves any auto-generated keys created as a result of executing this Statement object. If this Statement object did not generate any keys, an empty ResultSet object is returned.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getGeneratedKeys ()"}, "getFetchDirection()": {"Returns": [["int", "the default fetch direction for result sets generated from this Statement object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setFetchDirection_E@"], "Permissions": [], "Description": "Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object. If this Statement object has not set a fetch direction by calling the method setFetchDirection, the return value is implementation-specific.", "history": "Added in API level 1", "FullName": "public abstract int getFetchDirection ()"}, "getResultSetType()": {"Returns": [["int", "one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the result set type for ResultSet objects generated by this Statement object.", "history": "Added in API level 1", "FullName": "public abstract int getResultSetType ()"}, "getMoreResults(int)": {"Returns": [["boolean", "true if the next result is a ResultSet object; false if it is an update count or there are no more results"]], "Parameters": [["int", "int: one of the following Statement constants indicating what should happen to current ResultSet objects obtained using the method getResultSet: Statement.CLOSE_CURRENT_RESULT, Statement.KEEP_CURRENT_RESULT, or Statement.CLOSE_ALL_RESULTS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the argument supplied is not one of the following: Statement.CLOSE_CURRENT_RESULT, Statement.KEEP_CURRENT_RESULT or Statement.CLOSE_ALL_RESULTS"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if DatabaseMetaData.supportsMultipleOpenResults returns false and either Statement.KEEP_CURRENT_RESULT or Statement.CLOSE_ALL_RESULTS are supplied as the argument."]], "SeeAlso": ["@B_java#sql#Statement#execute_E@"], "Permissions": [], "Description": "Moves to this Statement object's next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next result is a ResultSet object. There are no more results when the following is true:", "history": "Added in API level 1", "FullName": "public abstract boolean getMoreResults (int current)"}, "getResultSet()": {"Returns": [["@B_java#sql#ResultSet_E@", "the current result as a ResultSet object or null if the result is an update count or there are no more results"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#execute_E@"], "Permissions": [], "Description": "Retrieves the current result as a ResultSet object. This method should be called only once per result.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getResultSet ()"}, "setFetchSize(int)": {"Returns": [], "Parameters": [["int", "int: the number of rows to fetch"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the condition rows >= 0 is not satisfied."]], "SeeAlso": ["@B_java#sql#Statement#getFetchSize_E@"], "Permissions": [], "Description": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects genrated by this Statement. If the value specified is zero, then the hint is ignored. The default value is zero.", "history": "Added in API level 1", "FullName": "public abstract void setFetchSize (int rows)"}, "executeUpdate(java.lang.String)": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the given SQL statement produces a ResultSet object, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement. PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract int executeUpdate (String sql)"}, "clearWarnings()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Clears all the warnings reported on this Statement object. After a call to this method, the method getWarnings will return null until a new warning is reported for this Statement object.", "history": "Added in API level 1", "FullName": "public abstract void clearWarnings ()"}, "execute(java.lang.String,int)": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if it is an update count or there are no results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["int", "int: a constant indicating whether auto-generated keys should be made available for retrieval using the method getGeneratedKeys; one of the following constants: Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the second parameter supplied to this method is not Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@", "@B_java#sql#Statement#getGeneratedKeys_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval. The driver will ignore this signal if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s).PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract boolean execute (String sql, int autoGeneratedKeys)"}, "setQueryTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the new query timeout limit in seconds; zero means there is no limit"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the condition seconds >= 0 is not satisfied"]], "SeeAlso": ["@B_java#sql#Statement#getQueryTimeout_E@"], "Permissions": [], "Description": "Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds.By default there is no limit on the amount of time allowed for a running statement to complete. If the limit is exceeded, an SQLTimeoutException is thrown. A JDBC driver must apply this limit to the execute, executeQuery and executeUpdate methods. ResultSet methods (consult your driver vendor documentation for details). Statement batching, it is implementation defined as to whether the time-out is applied to individual SQL commands added via the addBatch method or to the entire batch of SQL commands invoked by the executeBatch method (consult your driver vendor documentation for details).", "history": "Added in API level 1", "FullName": "public abstract void setQueryTimeout (int seconds)"}, "isPoolable()": {"Returns": [["boolean", "true if the Statement is poolable; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setPoolable_E@"], "Permissions": [], "Description": "Returns a value indicating whether the Statement is poolable or not.", "history": "Added in API level 9", "FullName": "public abstract boolean isPoolable ()"}, "executeBatch()": {"Returns": [["int[]", "an array of update counts containing one element for each command in the batch. The elements of the array are ordered according to the order in which commands were added to the batch."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the driver does not support batch statements. Throws @B_java#sql#BatchUpdateException_E@ (a subclass of SQLException) if one of the commands sent to the database fails to execute properly or attempts to return a result set."], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#addBatch_E@", "@B_java#sql#DatabaseMetaData#supportsBatchUpdates_E@"], "Permissions": [], "Description": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. The int elements of the array that is returned are ordered to correspond to the commands in the batch, which are ordered according to the order in which they were added to the batch. The elements in the array returned by the method executeBatch may be one of the following: The possible implementations and return values have been modified in the Java 2 SDK, Standard Edition, version 1.3 to accommodate the option of continuing to proccess commands in a batch update after a BatchUpdateException obejct has been thrown.", "history": "Added in API level 1", "FullName": "public abstract int[] executeBatch ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Cancels this Statement object if both the DBMS and driver support aborting an SQL statement. This method can be used by one thread to cancel a statement that is being executed by another thread.", "history": "Added in API level 1", "FullName": "public abstract void cancel ()"}, "setEscapeProcessing(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable escape processing; false to disable it"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Sets escape processing on or off. If escape scanning is on (the default), the driver will do escape substitution before sending the SQL statement to the database. Note: Since prepared statements have usually been parsed prior to making this call, disabling escape processing for PreparedStatements objects will have no effect.", "history": "Added in API level 1", "FullName": "public abstract void setEscapeProcessing (boolean enable)"}, "executeUpdate(java.lang.String,java.lang.String[])": {"Returns": [["int", "either the row count for INSERT, UPDATE, or DELETE statements, or 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."], ["@B_java#lang#String_E@", "String: an array of the names of the columns that should be returned from the inserted row"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the SQL statement returns a ResultSet object, the second argument supplied to this method is not a String array whose elements are valid column names, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract int executeUpdate (String sql, String[] columnNames)"}, "addBatch(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: typically this is a SQL INSERT or UPDATE statement"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the driver does not support batch updates, the method is called on a PreparedStatement or CallableStatement"]], "SeeAlso": ["@B_java#sql#Statement#executeBatch_E@", "@B_java#sql#DatabaseMetaData#supportsBatchUpdates_E@"], "Permissions": [], "Description": "Adds the given SQL command to the current list of commmands for this Statement object. The commands in this list can be executed as a batch by calling the method executeBatch. PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract void addBatch (String sql)"}, "getQueryTimeout()": {"Returns": [["int", "the current query timeout limit in seconds; zero means there is no limit"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": ["@B_java#sql#Statement#setQueryTimeout_E@"], "Permissions": [], "Description": "Retrieves the number of seconds the driver will wait for a Statement object to execute. If the limit is exceeded, a SQLException is thrown.", "history": "Added in API level 1", "FullName": "public abstract int getQueryTimeout ()"}, "execute(java.lang.String,java.lang.String[])": {"Returns": [["boolean", "true if the next result is a ResultSet object; false if it is an update count or there are no more results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["@B_java#lang#String_E@", "String: an array of the names of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement,the elements of the String array passed to this method are not valid column names, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@", "@B_java#sql#Statement#getGeneratedKeys_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract boolean execute (String sql, String[] columnNames)"}, "isClosed()": {"Returns": [["boolean", "true if this Statement object is closed; false if it is still open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this Statement object has been closed. A Statement is closed if the method close has been called on it, or if it is automatically closed.", "history": "Added in API level 9", "FullName": "public abstract boolean isClosed ()"}, "executeUpdate(java.lang.String, int[])": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."], ["int[]", "int: an array of column indexes indicating the columns that should be returned from the inserted row"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the SQL statement returns a ResultSet object,the second argument supplied to this method is not an int array whose elements are valid column indexes, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). PreparedStatement or CallableStatement.", "history": "added in API level 1", "FullName": "public abstract int executeUpdate (String sql, int[] columnIndexes)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed. It is generally good practice to release resources as soon as you are finished with them to avoid tying up database resources. Calling the method close on a Statement object that is already closed has no effect. Statement object is closed, its current ResultSet object, if one exists, is also closed.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "executeUpdate(java.lang.String,int)": {"Returns": [["int", "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement."], ["int", "int: a flag indicating whether auto-generated keys should be made available for retrieval; one of the following constants: Statement.RETURN_GENERATED_KEYS Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the given SQL statement returns a ResultSet object, the given constant is not one of those allowed, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval. The driver will ignore the flag if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). PreparedStatement or CallableStatement.", "history": "Added in API level 1", "FullName": "public abstract int executeUpdate (String sql, int autoGeneratedKeys)"}, "execute(java.lang.String, int)": {"Returns": [["boolean", "true if the first result is a ResultSet object; false if it is an update count or there are no results"]], "Parameters": [["@B_java#lang#String_E@", "String: any SQL statement"], ["int", "int: a constant indicating whether auto-generated keys should be made available for retrieval using the method getGeneratedKeys; one of the following constants: Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement, the second parameter supplied to this method is not Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS, the method is called on a PreparedStatement or CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"], ["@B_java#sql#SQLTimeoutException_E@", "when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement"]], "SeeAlso": ["@B_java#sql#Statement#getResultSet_E@", "@B_java#sql#Statement#getUpdateCount_E@", "@B_java#sql#Statement#getMoreResults_E@", "@B_java#sql#Statement#getGeneratedKeys_E@"], "Permissions": [], "Description": "Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval. The driver will ignore this signal if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s).PreparedStatement or CallableStatement.", "history": "added in API level 1", "FullName": "public abstract boolean execute (String sql, int autoGeneratedKeys)"}, "clearBatch()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed Statement or the driver does not support batch updates"]], "SeeAlso": ["@B_java#sql#Statement#addBatch_E@", "@B_java#sql#DatabaseMetaData#supportsBatchUpdates_E@"], "Permissions": [], "Description": "Empties this Statement object's current list of SQL commands.", "history": "Added in API level 1", "FullName": "public abstract void clearBatch ()"}, "getConnection()": {"Returns": [["@B_java#sql#Connection_E@", "the connection that produced this statement"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed Statement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the Connection object that produced this Statement object.", "history": "Added in API level 1", "FullName": "public abstract Connection getConnection ()"}}, "Inheritance": [], "ClassName": "java.sql.Statement", "ClassDesc": "The object used for executing a static SQL statement and returning the results it produces. By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a statment's current ResultSet object if an open one exists."}