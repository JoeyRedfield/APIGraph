{"Functions": {"requestInterruptionFilter(int)": {"Returns": [], "Parameters": [["int", "int: One of the INTERRUPTION_FILTER_ constants."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the desired @B_android#service#notification#NotificationListenerService#getCurrentInterruptionFilter_E@. This is merely a request, the host may or may not choose to apply the requested interruption filter depending on other listener requests or other global state. Listen for updates using @B_android#service#notification#NotificationListenerService#onInterruptionFilterChanged_E@. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final void requestInterruptionFilter (int interruptionFilter)"}, "onNotificationChannelModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package the channel belongs to."], ["@B_android#os#UserHandle_E@", "UserHandle: The user on which the change was made."], ["@B_android#app#NotificationChannel_E@", "NotificationChannel: The channel that has changed."], ["int", "int: One of @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_ADDED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_DELETED_E@. Value is @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_ADDED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED_E@, or @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_DELETED_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about notification channel modifications. The caller must have @B_android#companion#CompanionDeviceManager#getAssociations_E@ in order to receive this callback.", "history": "Added in API level 26", "FullName": "public void onNotificationChannelModified (String pkg, UserHandle user, NotificationChannel channel, int modificationType)"}, "cancelNotification(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Notification to dismiss from @B_android#service#notification#StatusBarNotification#getKey_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the notification manager about dismissal of a single notification. Use this if your listener has a user interface that allows the user to dismiss individual notifications, similar to the behavior of Android's status bar and notification panel. It should be called after the user dismisses a single notification using your UI; upon being informed, the notification manager will actually remove the notification and you will get an @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@ callback. @B_android#app#Notification#contentIntent_E@ by tapping/clicking/etc., you should call this method at that time @B_android#app#Notification#FLAG_AUTO_CANCEL_E@ flag set. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final void cancelNotification (String key)"}, "onListenerConnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about when the listener is enabled and connected to the notification manager. You are safe to call @B_android#service#notification#NotificationListenerService#getActiveNotifications_E@ at this time.", "history": "Added in API level 21", "FullName": "public void onListenerConnected ()"}, "cancelNotification(java.lang.String,java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Package of the notifying app."], ["@B_java#lang#String_E@", "String: Tag of the notification as specified by the notifying app in @B_android#app#NotificationManager#notify_E@."], ["int", "int: ID of the notification as specified by the notifying app in @B_android#app#NotificationManager#notify_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#service#notification#NotificationListenerService#cancelNotification_E@ instead. Beginning with @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ this method will no longer cancel the notification. It will continue to cancel the notification for applications whose targetSdkVersion is earlier than @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@. Inform the notification manager about dismissal of a single notification. Use this if your listener has a user interface that allows the user to dismiss individual notifications, similar to the behavior of Android's status bar and notification panel. It should be called after the user dismisses a single notification using your UI; upon being informed, the notification manager will actually remove the notification and you will get an @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@ callback. @B_android#app#Notification#contentIntent_E@ by tapping/clicking/etc., you should call this method at that time @B_android#app#Notification#FLAG_AUTO_CANCEL_E@ flag set. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public final void cancelNotification (String pkg, String tag, int id)"}, "onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)": {"Returns": [], "Parameters": [["@B_android#service#notification#StatusBarNotification_E@", "StatusBarNotification: A data structure encapsulating the original @B_android#app#Notification_E@ object as well as its identifying information (tag and id) and source (package name)."], ["@B_android#service#notification#NotificationListenerService#RankingMap_E@", "NotificationListenerService.RankingMap: The current ranking map that can be used to retrieve ranking information for active notifications, including the newly posted one."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about new notifications as they are posted by apps.", "history": "Added in API level 21", "FullName": "public void onNotificationPosted (StatusBarNotification sbn, NotificationListenerService.RankingMap rankingMap)"}, "onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)": {"Returns": [], "Parameters": [["@B_android#service#notification#StatusBarNotification_E@", "StatusBarNotification: A data structure encapsulating at least the original information (tag and id) and source (package name) used to post the @B_android#app#Notification_E@ that was just removed."], ["@B_android#service#notification#NotificationListenerService#RankingMap_E@", "NotificationListenerService.RankingMap: The current ranking map that can be used to retrieve ranking information for active notifications."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn when notifications are removed. This might occur because the user has dismissed the notification using system UI (or another notification listener) or because the app has withdrawn the notification. NOTE: The @B_android#service#notification#StatusBarNotification_E@ object you receive will be \"light\"; that is, the result from @B_android#service#notification#StatusBarNotification#getNotification_E@ may be missing some heavyweight fields such as @B_android#app#Notification#contentView_E@ and @B_android#app#Notification#largeIcon_E@. However, all other fields on @B_android#service#notification#StatusBarNotification_E@, sufficient to match this call with a prior call to @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@, will be intact.", "history": "Added in API level 21", "FullName": "public void onNotificationRemoved (StatusBarNotification sbn, NotificationListenerService.RankingMap rankingMap)"}, "requestRebind(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the listener be rebound, after a previous call to @B_android#service#notification#NotificationListenerService#requestUnbind_E@. This method will fail for listeners that have not been granted the permission by the user.", "history": "Added in API level 24", "FullName": "public static void requestRebind (ComponentName componentName)"}, "getCurrentListenerHints()": {"Returns": [["int", "Zero or more of the HINT_ constants."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of hints representing current state. The current state may differ from the requested state if the hint represents state shared across all listeners or a feature the notification host does not support or refuses to grant. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final int getCurrentListenerHints ()"}, "onListenerDisconnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about when the listener is disconnected from the notification manager.You will not receive any events after this call, and may only call @B_android#service#notification#NotificationListenerService#requestRebind_E@ at this time.", "history": "Added in API level 24", "FullName": "public void onListenerDisconnected ()"}, "requestListenerHints(int)": {"Returns": [], "Parameters": [["int", "int: One or more of the HINT_ constants."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the desired @B_android#service#notification#NotificationListenerService#getCurrentListenerHints_E@. This is merely a request, the host may or may not choose to take action depending on other listener requests or other global state. Listen for updates using @B_android#service#notification#NotificationListenerService#onListenerHintsChanged_E@. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final void requestListenerHints (int hints)"}, "getCurrentRanking()": {"Returns": [["@B_android#service#notification#NotificationListenerService#RankingMap_E@", "A @B_android#service#notification#NotificationListenerService#RankingMap_E@ object providing access to ranking information"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns current ranking information. The returned object represents the current ranking snapshot and only applies for currently active notifications. Generally you should use the RankingMap that is passed with events such as @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@, @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@, and so on. This method should only be used when needing access outside of such events, for example to retrieve the RankingMap right after initialization. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public NotificationListenerService.RankingMap getCurrentRanking ()"}, "snoozeNotification(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The key of the notification to snooze"], ["long", "long: A duration to snooze the notification for, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the notification manager about snoozing a specific notification. Use this if your listener has a user interface that allows the user to snooze a notification for a time. It should be called after the user snoozes a single notification using your UI; upon being informed, the notification manager will actually remove the notification and you will get an @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@ callback. When the snoozing period expires, you will get a @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@ callback for the notification.", "history": "Added in API level 26", "FullName": "public final void snoozeNotification (String key, long durationMs)"}, "attachBaseContext(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The new base context for this wrapper."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the base context for this ContextWrapper. All calls will then be delegated to the base context. Throws IllegalStateException if a base context has already been set.", "history": "Added in API level 18", "FullName": "protected void attachBaseContext (Context base)"}, "getActiveNotifications(java.lang.String[])": {"Returns": [["@B_android#service#notification#StatusBarNotification_E@", "An array of notifications corresponding to the requested keys, in the same order as the key list."]], "Parameters": [["@B_java#lang#String_E@", "String: the keys of the notifications to request"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request one or more notifications by key. Useful if you have been keeping track of notifications but didn't want to retain the bits, and now need to go back and extract more data out of those notifications. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public StatusBarNotification[] getActiveNotifications (String[] keys)"}, "getNotificationChannelGroups(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The package to retrieve channel groups for. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all notification channel groups belonging to the given package for a given user. This method will throw a security exception if you don't have access to notifications for the given user. The caller must have @B_android#companion#CompanionDeviceManager#getAssociations_E@ or be the @B_android#service#notification#NotificationAssistantService_E@ in order to use this method.", "history": "Added in API level 26", "FullName": "public final List<NotificationChannelGroup> getNotificationChannelGroups (String pkg, UserHandle user)"}, "NotificationListenerService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 18", "FullName": "public NotificationListenerService ()"}, "onNotificationPosted(android.service.notification.StatusBarNotification)": {"Returns": [], "Parameters": [["@B_android#service#notification#StatusBarNotification_E@", "StatusBarNotification: A data structure encapsulating the original @B_android#app#Notification_E@ object as well as its identifying information (tag and id) and source (package name)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about new notifications as they are posted by apps.", "history": "Added in API level 18", "FullName": "public void onNotificationPosted (StatusBarNotification sbn)"}, "getCurrentInterruptionFilter()": {"Returns": [["int", "One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current notification interruption filter active on the host. The interruption filter defines which notifications are allowed to interrupt the user (e.g. via sound & vibration) and is applied globally. Listeners can find out whether a specific notification matched the interruption filter via @B_android#service#notification#NotificationListenerService#Ranking#matchesInterruptionFilter_E@. The current filter may differ from the previously requested filter if the notification host does not support or refuses to apply the requested filter, or if another component changed the filter in the meantime. Listen for updates using @B_android#service#notification#NotificationListenerService#onInterruptionFilterChanged_E@. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final int getCurrentInterruptionFilter ()"}, "onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)": {"Returns": [], "Parameters": [["@B_android#service#notification#NotificationListenerService#RankingMap_E@", "NotificationListenerService.RankingMap: The current ranking map that can be used to retrieve ranking information for active notifications."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to be notified when the notification ranking changes.", "history": "Added in API level 21", "FullName": "public void onNotificationRankingUpdate (NotificationListenerService.RankingMap rankingMap)"}, "clearRequestedListenerHints()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears listener hints set via @B_android#service#notification#NotificationListenerService#getCurrentListenerHints_E@. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 29", "FullName": "public final void clearRequestedListenerHints ()"}, "requestUnbind()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the service be unbound. Once this is called, you will no longer receive updates and no method calls are guaranteed to be successful, until you next receive the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event. The service will likely be killed by the system after this call. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation. I know it's tempting, but you must wait.", "history": "Added in API level 24", "FullName": "public final void requestUnbind ()"}, "onNotificationRemoved(android.service.notification.StatusBarNotification)": {"Returns": [], "Parameters": [["@B_android#service#notification#StatusBarNotification_E@", "StatusBarNotification: A data structure encapsulating at least the original information (tag and id) and source (package name) used to post the @B_android#app#Notification_E@ that was just removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn when notifications are removed. This might occur because the user has dismissed the notification using system UI (or another notification listener) or because the app has withdrawn the notification. NOTE: The @B_android#service#notification#StatusBarNotification_E@ object you receive will be \"light\"; that is, the result from @B_android#service#notification#StatusBarNotification#getNotification_E@ may be missing some heavyweight fields such as @B_android#app#Notification#contentView_E@ and @B_android#app#Notification#largeIcon_E@. However, all other fields on @B_android#service#notification#StatusBarNotification_E@, sufficient to match this call with a prior call to @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@, will be intact.", "history": "Added in API level 18", "FullName": "public void onNotificationRemoved (StatusBarNotification sbn)"}, "getNotificationChannels(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The package to retrieve channels for. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all notification channels belonging to the given package for a given user. This method will throw a security exception if you don't have access to notifications for the given user. The caller must have @B_android#companion#CompanionDeviceManager#getAssociations_E@ or be the @B_android#service#notification#NotificationAssistantService_E@ in order to use this method.", "history": "Added in API level 26", "FullName": "public final List<NotificationChannel> getNotificationChannels (String pkg, UserHandle user)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads, registered receivers, etc) at this point. Upon return, there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.", "history": "Added in API level 18", "FullName": "public void onDestroy ()"}, "cancelNotifications(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Notifications to dismiss, or null to dismiss all."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the notification manager about dismissal of specific notifications. Use this if your listener has a user interface that allows the user to dismiss multiple notifications at once. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 21", "FullName": "public final void cancelNotifications (String[] keys)"}, "getActiveNotifications()": {"Returns": [["@B_android#service#notification#StatusBarNotification_E@", "An array of active notifications, sorted in natural order."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request the list of outstanding notifications (that is, those that are visible to the current user). Useful when you don't know what's already been posted. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 18", "FullName": "public StatusBarNotification[] getActiveNotifications ()"}, "setNotificationsShown(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Notifications to mark as seen."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the notification manager that these notifications have been viewed by the user. This should only be called when there is sufficient confidence that the user is looking at the notifications, such as when the notifications appear on the screen due to an explicit user interaction. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 23", "FullName": "public final void setNotificationsShown (String[] keys)"}, "updateNotificationChannel(java.lang.String,android.os.UserHandle,android.app.NotificationChannel)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package the channel belongs to. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The user the channel belongs to. This value must never be null."], ["@B_android#app#NotificationChannel_E@", "NotificationChannel: the channel to update. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates a notification channel for a given package for a given user. This should only be used to reflect changes a user has made to the channel via the listener's user interface. This method will throw a security exception if you don't have access to notifications for the given user. The caller must have @B_android#companion#CompanionDeviceManager#getAssociations_E@ in order to use this method.", "history": "Added in API level 26", "FullName": "public final void updateNotificationChannel (String pkg, UserHandle user, NotificationChannel channel)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is not the lifecycle event you are looking for. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing any operations.", "history": "Added in API level 18", "FullName": "public IBinder onBind (Intent intent)"}, "onSilentStatusBarIconsVisibilityChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not status bar icons should be hidden for silent notifications"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to be notified when the behavior of silent notifications in the status bar changes. See @B_android#app#NotificationManager#shouldHideSilentStatusBarIcons_E@.", "history": "Added in API level 29", "FullName": "public void onSilentStatusBarIconsVisibilityChanged (boolean hideSilentStatusIcons)"}, "cancelAllNotifications()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#service#notification#NotificationListenerService#cancelNotification_E@"], "Permissions": [], "Description": "Inform the notification manager about dismissal of all notifications. Use this if your listener has a user interface that allows the user to dismiss all notifications, similar to the behavior of Android's status bar and notification panel. It should be called after the user invokes the \"dismiss all\" function of your UI; upon being informed, the notification manager will actually remove all active notifications and you will get multiple @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@ callbacks. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 18", "FullName": "public final void cancelAllNotifications ()"}, "onNotificationChannelGroupModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package the group belongs to."], ["@B_android#os#UserHandle_E@", "UserHandle: The user on which the change was made."], ["@B_android#app#NotificationChannelGroup_E@", "NotificationChannelGroup: The group that has changed."], ["int", "int: One of @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_ADDED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_DELETED_E@. Value is @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_ADDED_E@, @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED_E@, or @B_android#service#notification#NotificationListenerService#NOTIFICATION_CHANNEL_OR_GROUP_DELETED_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn about notification channel group modifications. The caller must have @B_android#companion#CompanionDeviceManager#getAssociations_E@ in order to receive this callback.", "history": "Added in API level 26", "FullName": "public void onNotificationChannelGroupModified (String pkg, UserHandle user, NotificationChannelGroup group, int modificationType)"}, "getSnoozedNotifications()": {"Returns": [["@B_android#service#notification#StatusBarNotification_E@", "An array of snoozed notifications, sorted in natural order."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#service#notification#NotificationListenerService#getActiveNotifications_E@, but returns the list of currently snoozed notifications, for all users this listener has access to. The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing this operation.", "history": "Added in API level 26", "FullName": "public final StatusBarNotification[] getSnoozedNotifications ()"}, "snoozeNotification(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The key of the notification to snooze"], ["long", "long: A duration to snooze the notification for, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the notification manager about snoozing a specific notification. Use this if your listener has a user interface that allows the user to snooze a notification for a time. It should be called after the user snoozes a single notification using your UI; upon being informed, the notification manager will actually remove the notification and you will get an @B_android#service#notification#NotificationListenerService#onNotificationRemoved_E@ callback. When the snoozing period expires, you will get a @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@ callback for the notification.", "history": "added in API level 26", "FullName": "public final void snoozeNotification (String key, long durationMs)"}, "onListenerHintsChanged(int)": {"Returns": [], "Parameters": [["int", "int: The current @B_android#service#notification#NotificationListenerService#getCurrentListenerHints_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to be notified when the @B_android#service#notification#NotificationListenerService#getCurrentListenerHints_E@ change.", "history": "Added in API level 21", "FullName": "public void onListenerHintsChanged (int hints)"}, "onInterruptionFilterChanged(int)": {"Returns": [], "Parameters": [["int", "int: The current @B_android#service#notification#NotificationListenerService#getCurrentInterruptionFilter_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to be notified when the @B_android#service#notification#NotificationListenerService#getCurrentInterruptionFilter_E@ changed.", "history": "Added in API level 21", "FullName": "public void onInterruptionFilterChanged (int interruptionFilter)"}, "onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,int)": {"Returns": [], "Parameters": [["@B_android#service#notification#StatusBarNotification_E@", "StatusBarNotification: A data structure encapsulating at least the original information (tag and id) and source (package name) used to post the @B_android#app#Notification_E@ that was just removed."], ["@B_android#service#notification#NotificationListenerService#RankingMap_E@", "NotificationListenerService.RankingMap: The current ranking map that can be used to retrieve ranking information for active notifications."], ["int", "int: see @B_android#service#notification#NotificationListenerService#REASON_LISTENER_CANCEL_E@, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to learn when notifications are removed and why. This might occur because the user has dismissed the notification using system UI (or another notification listener) or because the app has withdrawn the notification. NOTE: The @B_android#service#notification#StatusBarNotification_E@ object you receive will be \"light\"; that is, the result from @B_android#service#notification#StatusBarNotification#getNotification_E@ may be missing some heavyweight fields such as @B_android#app#Notification#contentView_E@ and @B_android#app#Notification#largeIcon_E@. However, all other fields on @B_android#service#notification#StatusBarNotification_E@, sufficient to match this call with a prior call to @B_android#service#notification#NotificationListenerService#onNotificationPosted_E@, will be intact.", "history": "Added in API level 26", "FullName": "public void onNotificationRemoved (StatusBarNotification sbn, NotificationListenerService.RankingMap rankingMap, int reason)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.notification.NotificationListenerService", "ClassDesc": "A service that receives calls from the system when new notifications are posted or removed, or their ranking changed. To extend this class, you must declare the service in your manifest file with the @B_android#Manifest#permission#BIND_NOTIFICATION_LISTENER_SERVICE_E@ permission and include an intent filter with the @B_android#service#notification#NotificationListenerService#SERVICE_INTERFACE_E@ action. For example: The service should wait for the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ event before performing any operations. The @B_android#service#notification#NotificationListenerService#requestRebind_E@ method is the @B_android#service#notification#NotificationListenerService#onListenerConnected_E@ or after @B_android#service#notification#NotificationListenerService#onListenerDisconnected_E@. Notification listeners cannot get notification access or be bound by the system on @B_android#app#admin#DevicePolicyManager_E@ might block notifications originating from a work profile. From @B_android#os#Build#VERSION_CODES#N_E@ onward all callbacks are called on the main thread. Prior to N, there is no guarantee on what thread the callback will happen."}