{"Functions": {"ContactsContract.DataUsageFeedback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public ContactsContract.DataUsageFeedback ()"}}, "Inheritance": [], "ClassName": "android.provider.ContactsContract.DataUsageFeedback", "ClassDesc": "Contacts affinity information is no longer supported as of Android version @B_android#os#Build#VERSION_CODES#Q_E@. Both update and delete calls are always ignored. API allowing applications to send usage information for each @B_android#provider#ContactsContract#Data_E@ row to the Contacts Provider. Applications can also clear all usage information. With the feedback, Contacts Provider may return more contextually appropriate results for Data listing, typically supplied with @B_android#provider#ContactsContract#Contacts#CONTENT_FILTER_URI_E@, @B_android#provider#ContactsContract#CommonDataKinds#Email#CONTENT_FILTER_URI_E@, @B_android#provider#ContactsContract#CommonDataKinds#Phone#CONTENT_FILTER_URI_E@, and users can benefit from better ranked (sorted) lists in applications that show auto-complete list. There is no guarantee for how this feedback is used, or even whether it is used at all. The ranking algorithm will make best efforts to use the feedback data, but the exact implementation, the storage data structures as well as the resulting sort order is device and version specific and can change over time. When updating usage information, users of this API need to use @B_android#content#ContentResolver#update_E@ with a Uri constructed from @B_android#provider#ContactsContract#DataUsageFeedback#FEEDBACK_URI_E@. The Uri must contain one or more data id(s) as its last path. They also need to append a query parameter to the Uri, to specify the type of the communication, which enables the Contacts Provider to differentiate between kinds of interactions using the same contact data field (for example a phone number can be used to make phone calls or send SMS). Selection and selectionArgs are ignored and must be set to null. To get data ids, you may need to call @B_android#content#ContentResolver#query_E@ toward @B_android#provider#ContactsContract#Data#CONTENT_URI_E@. @B_android#content#ContentResolver#update_E@ returns a positive integer when successful, and returns 0 if no contact with that id was found. Example: Applications can also clear all usage information with:"}