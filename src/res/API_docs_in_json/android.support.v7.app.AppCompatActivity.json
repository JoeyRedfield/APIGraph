{"Functions": {"getSupportActionBar()": {"Returns": [["@B_android#support#v7#app#ActionBar_E@", "The Activity's ActionBar, or null if it does not have one."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#getActionBar_E@. Retrieve a reference to this activity's ActionBar.", "history": "added in version 24.2.0", "FullName": "ActionBar getSupportActionBar ()"}, "onSupportContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v7#app#AppCompatActivity#onContentChanged_E@ instead.", "history": "added in version 24.2.0", "FullName": "void onSupportContentChanged ()"}, "onTitleChanged(java.lang.CharSequence, int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onTitleChanged (CharSequence title, int color)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the content view of the screen changes (due to a call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#addContentView_E@).", "history": "", "FullName": "void onContentChanged ()"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process key events. You can override this to intercept all key events before they are dispatched to the window. Be sure to call this implementation for key events that should be handled normally.", "history": "", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "findViewById(int)": {"Returns": [["T", "a view with given ID if found, or null otherwise"]], "Parameters": [["int", "int: the ID to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds a view that was identified by the android:id XML attribute that was processed in @B_android#app#Activity#onCreate_E@.", "history": "", "FullName": "T findViewById (int id)"}, "getDrawerToggleDelegate()": {"Returns": [["@B_android#support#v7#app#ActionBarDrawerToggle#Delegate_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "ActionBarDrawerToggle.Delegate getDrawerToggleDelegate ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onStart() to all fragments. Ensure any created loaders are now started.", "history": "", "FullName": "void onStart ()"}, "getDelegate()": {"Returns": [["@B_android#support#v7#app#AppCompatDelegate_E@", "The @B_android#support#v7#app#AppCompatDelegate_E@ being used by this Activity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "AppCompatDelegate getDelegate ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in @B_android#support#v7#app#AppCompatActivity#onSaveInstanceState_E@. Note: Otherwise it is null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform initialization of all fragments and loaders.", "history": "", "FullName": "void onCreate (Bundle savedInstanceState)"}, "onSupportNavigateUp()": {"Returns": [["boolean", "true if Up navigation completed successfully and this Activity was finished, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. If a parent was specified in the manifest for this activity or an activity-alias to it, default Up navigation will be handled automatically. See @B_android#support#v7#app#AppCompatActivity#getSupportParentActivityIntent_E@ for how to specify the parent. If any activity along the parent chain requires extra Intent arguments, the Activity subclass should override the method @B_android#support#v7#app#AppCompatActivity#onPrepareSupportNavigateUpTaskStack_E@ to supply those arguments. See See the @B_android#support#v4#app#TaskStackBuilder_E@ class and the Activity methods @B_android#support#v7#app#AppCompatActivity#getSupportParentActivityIntent_E@, @B_android#support#v7#app#AppCompatActivity#supportShouldUpRecreateTask_E@, and @B_android#support#v7#app#AppCompatActivity#supportNavigateUpTo_E@ for help implementing custom Up navigation.", "history": "added in version 24.2.0", "FullName": "boolean onSupportNavigateUp ()"}, "setContentView(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID to be inflated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.", "history": "", "FullName": "void setContentView (int layoutResID)"}, "setSupportProgressBarIndeterminate(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Progress bars are no longer provided in AppCompat.", "history": "added in version 24.2.0", "FullName": "void setSupportProgressBarIndeterminate (boolean indeterminate)"}, "openOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Programmatically opens the options menu. If the options menu is already open, this method does nothing.", "history": "", "FullName": "void openOptionsMenu ()"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "a Resources instance for the application's package"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Resources instance for the application's package. @B_android#content#Context#getAssets_E@. For example, they should share the same @B_android#content#res#Configuration_E@ object.", "history": "", "FullName": "Resources getResources ()"}, "onMenuOpened(int, android.view.Menu)": {"Returns": [["boolean", "The default implementation returns true."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu). Please note: AppCompat uses its own feature id for the action bar: @B_android#support#v7#app#AppCompatDelegate#FEATURE_SUPPORT_ACTION_BAR_E@.", "history": "", "FullName": "boolean onMenuOpened (int featureId, Menu menu)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onStop() to all fragments. Ensure all loaders are stopped.", "history": "", "FullName": "void onStop ()"}, "closeOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Progammatically closes the options menu. If the options menu is already closed, this method does nothing.", "history": "", "FullName": "void closeOptionsMenu ()"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call onOptionsMenuClosed() on fragments. Please note: AppCompat uses its own feature id for the action bar: @B_android#support#v7#app#AppCompatDelegate#FEATURE_SUPPORT_ACTION_BAR_E@.", "history": "", "FullName": "void onPanelClosed (int featureId, Menu menu)"}, "getSupportParentActivityIntent()": {"Returns": [["@B_android#content#Intent_E@", "a new Intent targeting the defined parent activity of sourceActivity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain an @B_android#content#Intent_E@ that will launch an explicit target activity specified by sourceActivity's @B_android#support#v4#app#NavUtils#PARENT_ACTIVITY_E@ <meta-data> element in the application's manifest. If the device is running Jellybean or newer, the android:parentActivityName attribute will be preferred if it is present.", "history": "added in version 24.2.0", "FullName": "Intent getSupportParentActivityIntent ()"}, "supportRequestWindowFeature(int)": {"Returns": [["boolean", "Returns true if the requested feature is supported and now enabled."]], "Parameters": [["int", "int: The desired feature as defined in @B_android#view#Window_E@ or @B_android#support#v4#view#WindowCompat_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#requestWindowFeature_E@", "@B_android#view#Window#requestFeature_E@"], "Permissions": [], "Description": "Enable extended support library window features. This is a convenience for calling @B_android#view#Window#requestFeature_E@.", "history": "added in version 24.2.0", "FullName": "boolean supportRequestWindowFeature (int featureId)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "Return true to prevent this event from being propagated further, or false to indicate that you have not handled this event and it should continue to be propagated."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key was pressed down and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. If the focused view didn't want this event, this method is called. The default implementation takes care of @B_android#view#KeyEvent#KEYCODE_BACK_E@ by calling @B_android#app#Activity#onBackPressed_E@, though the behavior varies based on the application compatibility mode: for @B_android#os#Build#VERSION_CODES#ECLAIR_E@ or later applications, it will set up the dispatch to call @B_android#app#Activity#onKeyUp_E@ where the action will be performed; for earlier applications, it will perform the action immediately in on-down, as those versions of the platform behaved. Other additional default key handling may be performed if configured with @B_android#app#Activity#setDefaultKeyMode_E@.", "history": "", "FullName": "boolean onKeyDown (int keyCode, KeyEvent event)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The desired content to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy. When calling this method, the layout parameters of the specified view are ignored. Both the width and the height of the view are set by default to @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. To use your own layout parameters, invoke @B_android#app#Activity#setContentView_E@ instead.", "history": "", "FullName": "void setContentView (View view)"}, "setSupportProgress(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Progress bars are no longer provided in AppCompat.", "history": "added in version 24.2.0", "FullName": "void setSupportProgress (int progress)"}, "supportNavigateUpTo(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent representing the target destination for up navigation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Navigate from sourceActivity to the activity specified by upIntent, finishing sourceActivity in the process. upIntent will have the flag @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@ set by this method, along with any others required for proper up navigation as outlined in the Android Design Guide. This method should be used when performing up navigation from within the same task as the destination. If up navigation should cross tasks in some cases, see @B_android#support#v7#app#AppCompatActivity#supportShouldUpRecreateTask_E@.", "history": "added in version 24.2.0", "FullName": "void supportNavigateUpTo (Intent upIntent)"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch context and options menu to fragments.", "history": "added in version 24.2.0", "FullName": "boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy all fragments and loaders.", "history": "", "FullName": "void onDestroy ()"}, "getMenuInflater()": {"Returns": [["@B_android#view#MenuInflater_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#view#MenuInflater_E@ with this context.", "history": "", "FullName": "MenuInflater getMenuInflater ()"}, "setTheme(int)": {"Returns": [], "Parameters": [["int", "int: The style resource describing the theme."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the base theme for this context. Note that this should be called before any views are instantiated in the Context (for example before calling @B_android#app#Activity#setContentView_E@ or @B_android#view#LayoutInflater#inflate_E@).", "history": "", "FullName": "void setTheme (int resid)"}, "onPostCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in @B_android#support#v7#app#AppCompatActivity#onSaveInstanceState_E@. Note: Otherwise it is null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when activity start-up is complete (after @B_android#app#Activity#onStart_E@ and @B_android#app#Activity#onRestoreInstanceState_E@ have been called). Applications will generally not implement this method; it is intended for system classes to do final initialization after application code has run. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.", "history": "", "FullName": "void onPostCreate (Bundle savedInstanceState)"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Save all appropriate fragment state.", "history": "", "FullName": "void onSaveInstanceState (Bundle outState)"}, "AppCompatActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "AppCompatActivity ()"}, "supportInvalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#invalidateOptionsMenu_E@ directly. Support library version of @B_android#app#Activity#invalidateOptionsMenu_E@. Invalidate the activity's options menu. This will cause relevant presentations of the menu to fully update via calls to onCreateOptionsMenu and onPrepareOptionsMenu the next time the menu is requested.", "history": "added in version 24.2.0", "FullName": "void supportInvalidateOptionsMenu ()"}, "invalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Declare that the options menu has changed, so should be recreated. The @B_android#app#Activity#onCreateOptionsMenu_E@ method will be called the next time it needs to be displayed.", "history": "", "FullName": "void invalidateOptionsMenu ()"}, "onPostResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onResume() to fragments.", "history": "", "FullName": "void onPostResume ()"}, "setSupportProgressBarVisibility(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Progress bars are no longer provided in AppCompat.", "history": "added in version 24.2.0", "FullName": "void setSupportProgressBarVisibility (boolean visible)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#content#Context_E@", "https:##developer#android#com@B_android#content#ContextWrapper_E@", "https:##developer#android#com@B_android#view#ContextThemeWrapper_E@", "https:##developer#android#com@B_android#app#Activity_E@", "@B_android#support#v4#app#FragmentActivity_E@"], "ClassName": "android.support.v7.app.AppCompatActivity", "ClassDesc": "Base class for activities that use the You can add an @B_android#support#v7#app#ActionBar_E@ to your activity when running on API level 7 or higher by extending this class for your activity and setting the activity theme to @B_android#support#v7#appcompat#R#style#Theme_AppCompat_E@ or a similar theme."}