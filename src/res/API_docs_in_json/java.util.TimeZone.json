{"Functions": {"getAvailableIDs(int)": {"Returns": [["@B_java#lang#String_E@", "an array of IDs, where the time zone for that ID has the specified GMT offset. For example, \"America/Phoenix\" and \"America/Denver\" both have GMT-07:00, but differ in daylight saving behavior."]], "Parameters": [["int", "int: the given time zone GMT offset in milliseconds."]], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#getRawOffset_E@"], "Permissions": [], "Description": "Gets the available IDs according to the given time zone offset in milliseconds.", "history": "Added in API level 1", "FullName": "public static String[] getAvailableIDs (int rawOffset)"}, "getOffset(int, int, int, int, int, int)": {"Returns": [["int", "the offset in milliseconds to add to GMT to get local time."]], "Parameters": [["int", "int: the era of the given date."], ["int", "int: the year in the given date."], ["int", "int: the month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: the day-in-month of the given date."], ["int", "int: the day-of-week of the given date."], ["int", "int: the milliseconds in day in standard local time."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add to UTC to get local time. This method returns a historically correct offset if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes.", "history": "added in API level 1", "FullName": "public abstract int getOffset (int era, int year, int month, int day, int dayOfWeek, int milliseconds)"}, "getDisplayName(boolean,int)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [["boolean", "boolean: true specifying a Daylight Saving Time name, or false specifying a Standard Time name"], ["int", "int: either @B_java#util#TimeZone#LONG_E@ or @B_java#util#TimeZone#SHORT_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if style is invalid."]], "SeeAlso": ["@B_java#util#TimeZone#getDisplayName_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@", "@B_java#text#DateFormatSymbols#getZoneStrings_E@"], "Permissions": [], "Description": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale. If the specified daylight is true, a Daylight Saving Time name is returned (even if this TimeZone doesn't observe Daylight Saving Time). Otherwise, a Standard Time name is returned. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public final String getDisplayName (boolean daylight, int style)"}, "TimeZone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "public TimeZone ()"}, "getRawOffset()": {"Returns": [["int", "the amount of raw offset time in milliseconds to add to UTC."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called If an underlying TimeZone implementation subclass supports historical GMT offset changes, the method returns the raw offset value of the current date. In Honolulu, for example, its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and this method always returns -36000000 milliseconds (i.e., -10 hours).", "history": "Added in API level 1", "FullName": "public abstract int getRawOffset ()"}, "getID()": {"Returns": [["@B_java#lang#String_E@", "the ID of this time zone."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ID of this time zone.", "history": "Added in API level 1", "FullName": "public String getID ()"}, "setRawOffset(int)": {"Returns": [], "Parameters": [["int", "int: the given base time zone offset to GMT."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the base time zone offset to GMT. This is the offset to add to UTC to get local time. If an underlying TimeZone implementation subclass supports historical GMT offset changes, the specified GMT offset is set as the latest GMT offset and the difference from the known latest GMT offset value is used to adjust all historical GMT offset values.", "history": "Added in API level 1", "FullName": "public abstract void setRawOffset (int offsetMillis)"}, "useDaylightTime()": {"Returns": [["boolean", "true if this TimeZone uses Daylight Saving Time, false, otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#inDaylightTime_E@", "@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Queries if this TimeZone uses Daylight Saving Time. If an underlying TimeZone implementation subclass supports historical and future Daylight Saving Time schedule changes, this method refers to the last known Daylight Saving Time rule that can be a future prediction and may not be the same as the current rule. Consider calling @B_java#util#TimeZone#observesDaylightTime_E@ if the current rule should also be taken into account.", "history": "Added in API level 1", "FullName": "public abstract boolean useDaylightTime ()"}, "getDisplayName(boolean, int)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [["boolean", "boolean: true specifying a Daylight Saving Time name, or false specifying a Standard Time name"], ["int", "int: either @B_java#util#TimeZone#LONG_E@ or @B_java#util#TimeZone#SHORT_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if style is invalid."]], "SeeAlso": ["@B_java#util#TimeZone#getDisplayName_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@", "@B_java#text#DateFormatSymbols#getZoneStrings_E@"], "Permissions": [], "Description": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale. If the specified daylight is true, a Daylight Saving Time name is returned (even if this TimeZone doesn't observe Daylight Saving Time). Otherwise, a Standard Time name is returned. This method is equivalent to:", "history": "added in API level 1", "FullName": "public final String getDisplayName (boolean daylight, int style)"}, "getTimeZone(java.time.ZoneId)": {"Returns": [["@B_java#util#TimeZone_E@", "the specified TimeZone, or the GMT zone if the given ID cannot be understood."]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: a @B_java#time#ZoneId_E@ from which the time zone ID is obtained"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if zoneId is null"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the TimeZone for the given zoneId.", "history": "Added in API level 26", "FullName": "public static TimeZone getTimeZone (ZoneId zoneId)"}, "setDefault(java.util.TimeZone)": {"Returns": [], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the new default TimeZone, or null"]], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#getDefault_E@"], "Permissions": [], "Description": "Sets the TimeZone that is returned by the getDefault method. timeZone is cached. If timeZone is null, the cached default TimeZone is cleared. This method doesn't change the value of the user.timezone property.", "history": "Added in API level 1", "FullName": "public static void setDefault (TimeZone timeZone)"}, "getTimeZone(java.lang.String)": {"Returns": [["@B_java#util#TimeZone_E@", "the specified TimeZone, or the GMT zone if the given ID cannot be understood."]], "Parameters": [["@B_java#lang#String_E@", "String: the ID for a TimeZone, either an abbreviation such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations is for JDK 1.1.x compatibility only and full names should be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the TimeZone for the given ID.", "history": "Added in API level 1", "FullName": "public static TimeZone getTimeZone (String id)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this TimeZone"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a copy of this TimeZone.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toZoneId()": {"Returns": [["@B_java#time#ZoneId_E@", "a ZoneId representing the same time zone as this TimeZone"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this TimeZone object to a ZoneId.", "history": "Added in API level 26", "FullName": "public ZoneId toZoneId ()"}, "setID(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new time zone ID."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone ID. This does not change any other data in the time zone object.", "history": "Added in API level 1", "FullName": "public void setID (String ID)"}, "getDefault()": {"Returns": [["@B_java#util#TimeZone_E@", "a default TimeZone."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#setDefault_E@"], "Permissions": [], "Description": "Gets the default TimeZone for this host. The source of the default TimeZone may vary with implementation.", "history": "Added in API level 1", "FullName": "public static TimeZone getDefault ()"}, "getDSTSavings()": {"Returns": [["int", "the amount of saving time in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#inDaylightTime_E@", "@B_java#util#TimeZone#getOffset_E@", "@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Returns the amount of time to be added to local standard time to get local wall clock time. The default implementation returns 3600000 milliseconds (i.e., one hour) if a call to @B_java#util#TimeZone#useDaylightTime_E@ returns true. Otherwise, 0 (zero) is returned. If an underlying TimeZone implementation subclass supports historical and future Daylight Saving Time schedule changes, this method returns the amount of saving time of the last known Daylight Saving Time rule that can be a future prediction. If the amount of saving time at any given time stamp is required, construct a @B_java#util#Calendar_E@ with this TimeZone and the time stamp, and call @B_java#util#Calendar#get_E@(@B_java#util#Calendar#DST_OFFSET_E@).", "history": "Added in API level 1", "FullName": "public int getDSTSavings ()"}, "getOffset(long)": {"Returns": [["int", "the amount of time in milliseconds to add to UTC to get local time."]], "Parameters": [["long", "long: the date represented in milliseconds since January 1, 1970 00:00:00 GMT"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the specified date, the offset value is adjusted with the amount of daylight saving. This method returns a historically correct offset value if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes.", "history": "Added in API level 1", "FullName": "public int getOffset (long date)"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#getDisplayName_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public final String getDisplayName ()"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale in which to supply the display name."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if locale is null."]], "SeeAlso": ["@B_java#util#TimeZone#getDisplayName_E@"], "Permissions": [], "Description": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public final String getDisplayName (Locale locale)"}, "getDisplayName(boolean,int,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: true for daylight time, false for standard time."], ["int", "int: either @B_java#util#TimeZone#LONG_E@ or @B_java#util#TimeZone#SHORT_E@."], ["@B_java#util#Locale_E@", "Locale: the display locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#util#TimeZone#SHORT_E@ or @B_java#util#TimeZone#LONG_E@ name of this time zone with either standard or daylight time, as written in locale. If the name is not available, the result is in the format GMT[+-]hh:mm.", "history": "Added in API level 1", "FullName": "public String getDisplayName (boolean daylightTime, int style, Locale locale)"}, "getDisplayName(boolean, int, java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: true for daylight time, false for standard time."], ["int", "int: either @B_java#util#TimeZone#LONG_E@ or @B_java#util#TimeZone#SHORT_E@."], ["@B_java#util#Locale_E@", "Locale: the display locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#util#TimeZone#SHORT_E@ or @B_java#util#TimeZone#LONG_E@ name of this time zone with either standard or daylight time, as written in locale. If the name is not available, the result is in the format GMT[+-]hh:mm.", "history": "added in API level 1", "FullName": "public String getDisplayName (boolean daylightTime, int style, Locale locale)"}, "getAvailableIDs()": {"Returns": [["@B_java#lang#String_E@", "an array of IDs."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets all the available IDs supported.", "history": "Added in API level 1", "FullName": "public static String[] getAvailableIDs ()"}, "observesDaylightTime()": {"Returns": [["boolean", "true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone#useDaylightTime_E@", "@B_java#util#TimeZone#inDaylightTime_E@", "@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time. The default implementation returns true if useDaylightTime() or inDaylightTime(new Date()) returns true.", "history": "Added in API level 24", "FullName": "public boolean observesDaylightTime ()"}, "hasSameRules(java.util.TimeZone)": {"Returns": [["boolean", "true if the other zone is not null and is the same as this one, with the possible exception of the ID"]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the TimeZone object to be compared with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this zone has the same rule and offset as another zone. That is, if this zone differs only in ID, if at all. Returns false if the other zone is null.", "history": "Added in API level 1", "FullName": "public boolean hasSameRules (TimeZone other)"}, "inDaylightTime(java.util.Date)": {"Returns": [["boolean", "true if the given date is in Daylight Saving Time, false, otherwise."]], "Parameters": [["@B_java#util#Date_E@", "Date: the given Date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if the given date is in Daylight Saving Time in this time zone.", "history": "Added in API level 1", "FullName": "public abstract boolean inDaylightTime (Date date)"}, "getOffset(int,int,int,int,int,int)": {"Returns": [["int", "the offset in milliseconds to add to GMT to get local time."]], "Parameters": [["int", "int: the era of the given date."], ["int", "int: the year in the given date."], ["int", "int: the month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: the day-in-month of the given date."], ["int", "int: the day-of-week of the given date."], ["int", "int: the milliseconds in day in standard local time."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add to UTC to get local time. This method returns a historically correct offset if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes.", "history": "Added in API level 1", "FullName": "public abstract int getOffset (int era, int year, int month, int day, int dayOfWeek, int milliseconds)"}}, "Inheritance": [], "ClassName": "java.util.TimeZone", "ClassDesc": "TimeZone represents a time zone offset, and also figures out daylight savings. Typically, you get a TimeZone using getDefault which creates a TimeZone based on the time zone where the program is running. For example, for a program running in Japan, getDefault creates a TimeZone object based on Japanese Standard Time. You can also get a TimeZone using getTimeZone along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a U.S. Pacific Time TimeZone object with: getAvailableIDs method to iterate through all the supported time zone IDs. You can then choose a supported ID to get a TimeZone. If the time zone you want is not represented by one of the supported IDs, then a custom time zone ID can be specified to produce a TimeZone. The syntax of a custom time zone ID is: The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. No daylight saving time transition schedule can be specified with a custom time zone ID. If the specified string doesn't match the syntax, \"GMT\" is used. When creating a TimeZone, the specified custom time zone ID is normalized in the following syntax:"}