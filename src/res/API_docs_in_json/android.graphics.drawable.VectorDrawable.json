{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 21", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 21", "FullName": "public void draw (Canvas canvas)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 21", "FullName": "public int getIntrinsicWidth ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the current color filter, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "Added in API level 21", "FullName": "public ColorFilter getColorFilter ()"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 21", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 21", "FullName": "public int getIntrinsicHeight ()"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 21", "FullName": "public int getAlpha ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 21", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 21", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 21", "FullName": "public boolean isAutoMirrored ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 21", "FullName": "public void setAlpha (int alpha)"}, "VectorDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public VectorDrawable ()"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 21", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 21", "FullName": "public int getChangingConfigurations ()"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 21", "FullName": "public Drawable mutate ()"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.VectorDrawable", "ClassDesc": "This lets you create a drawable based on an XML vector graphic. VectorDrawable can be defined in an XML file with the <vector> element. The vector drawable has the following elements: Here is a simple VectorDrawable in this vectordrawable.xml file. @B_android#graphics#LinearGradient_E@, @B_android#graphics#RadialGradient_E@, or @B_android#graphics#SweepGradient_E@. And we support all of 3 types of tile modes @B_android#graphics#Shader#TileMode_E@: CLAMP, REPEAT, MIRROR. All of the attributes are listed in @B_android#R#styleable#GradientColor_E@. Note that different attributes are relevant for different types of gradient. Also note that if any color item @B_android#R#styleable#GradientColorItem_E@ is defined, then startColor, centerColor and endColor will be ignored. See more details in @B_android#R#styleable#GradientColor_E@ and @B_android#R#styleable#GradientColorItem_E@. Here is a simple example that defines a linear gradient."}