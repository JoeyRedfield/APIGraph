{"Functions": {"getMediaPlayState(java.lang.Object)": {"Returns": [["int", "The current play state of this media item"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The media item"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current play state of the given media item. By default, this method returns PLAY_STATE_INITIAL which causes the media item number @B_android#support#v17#leanback#widget#AbstractMediaItemPresenter#ViewHolder#getMediaItemNameView_E@ to be displayed for different playback states. Users of this class should override this method in order to provide the play state of their custom media item data model.", "history": "added in version 24.2.0", "FullName": "int getMediaPlayState (Object item)"}, "isUsingDefaultSelectEffect()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this RowPresenter is using the default dimming effect. A subclass may (most likely) return false and override @B_android#support#v17#leanback#widget#RowPresenter#onSelectLevelChanged_E@.", "history": "added in version 24.0.0", "FullName": "boolean isUsingDefaultSelectEffect ()"}, "setBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: The ARGB color used to set as the media list background color."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the background color for the row views within the playlist. If this is not set, a default color, defaultBrandColor, from theme is used. This defaultBrandColor defaults to android:attr/colorPrimary on v21, if it's specified.", "history": "added in version 24.0.0", "FullName": "void setBackgroundColor (int color)"}, "AbstractMediaItemPresenter(int)": {"Returns": [], "Parameters": [["int", "int: The resource id of the theme that defines attributes controlling the appearance of different widgets in a media item row."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor used for creating an abstract media item presenter.", "history": "added in version 24.0.0", "FullName": "AbstractMediaItemPresenter (int themeId)"}, "setThemeId(int)": {"Returns": [], "Parameters": [["int", "int: The resource id of the theme that defines attributes controlling the appearance of different widgets in a media item row."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the theme used to style a media item row components.", "history": "added in version 24.0.0", "FullName": "void setThemeId (int themeId)"}, "getActionPresenter()": {"Returns": [["@B_android#support#v17#leanback#widget#Presenter_E@", "the presenter used to render a media item row actions."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the presenter used to render a media item row actions.", "history": "added in version 24.0.0", "FullName": "Presenter getActionPresenter ()"}, "getThemeId()": {"Returns": [["int", "The resource id of the theme that defines attributes controlling the appearance of different widgets in a media item row."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return The resource id of the theme that defines attributes controlling the appearance of different widgets in a media item row.", "history": "added in version 24.0.0", "FullName": "int getThemeId ()"}, "isClippingChildren()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the Row view should clip its children. The clipChildren flag is set on view in @B_android#support#v17#leanback#widget#RowPresenter#initializeRowViewHolder_E@. Note that Slide transition or explode transition need turn off clipChildren. Default value is false.", "history": "added in version 24.0.0", "FullName": "boolean isClippingChildren ()"}, "createRowViewHolder(android.view.ViewGroup)": {"Returns": [["@B_android#support#v17#leanback#widget#RowPresenter#ViewHolder_E@", "A ViewHolder for the Row's View."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The parent View for the Row's view holder."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to create a ViewHolder object for a Row. Subclasses will override this method to return a different concrete ViewHolder object.", "history": "added in version 24.0.0", "FullName": "RowPresenter.ViewHolder createRowViewHolder (ViewGroup parent)"}, "setHasMediaRowSeparator(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if a separator should be displayed, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether a line separator should be used between media item rows.", "history": "added in version 24.0.0", "FullName": "void setHasMediaRowSeparator (boolean hasSeparator)"}, "hasMediaRowSeparator()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "boolean hasMediaRowSeparator ()"}, "AbstractMediaItemPresenter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor used for creating an abstract media item presenter.", "history": "added in version 24.0.0", "FullName": "AbstractMediaItemPresenter ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v17#leanback#widget#Presenter_E@", "@B_android#support#v17#leanback#widget#RowPresenter_E@"], "ClassName": "android.support.v17.leanback.widget.AbstractMediaItemPresenter", "ClassDesc": "Abstract @B_android#support#v17#leanback#widget#Presenter_E@ class for rendering media items in a playlist format. Media item data provided for this presenter can implement the interface @B_android#support#v17#leanback#widget#MultiActionsProvider_E@, if the media rows wish to contain custom actions. Media items in the playlist are arranged as a vertical list with each row holding each media item's details provided by the user of this class and a set of optional custom actions. Each media item's details and actions are separately focusable. The appearance of each one of the media row components can be controlled through setting theme's attributes. Each media item row provides a view flipper for switching between different views depending on the playback state. A default layout is provided by this presenter for rendering different playback states, or a custom layout can be provided by the user by overriding the playbackMediaItemNumberViewFlipperLayout attribute in the currently specified theme. Subclasses should also override @B_android#support#v17#leanback#widget#AbstractMediaItemPresenter#getMediaPlayState_E@ to provide the current play state of their media item model in case they wish to use different views depending on the playback state. The presenter can optionally provide line separators between media rows by setting @B_android#support#v17#leanback#widget#AbstractMediaItemPresenter#setHasMediaRowSeparator_E@ to true. Subclasses must override @B_android#support#v17#leanback#widget#AbstractMediaItemPresenter#onBindMediaDetails_E@ to implement their media item model data binding to each row view. The @B_android#support#v17#leanback#widget#OnItemViewClickedListener_E@ and @B_android#support#v17#leanback#widget#OnItemViewSelectedListener_E@ can be used in the same fashion to handle selection or click events on either of media details or each individual action views. @B_android#support#v17#leanback#widget#AbstractMediaListHeaderPresenter_E@ can be used in conjunction with this presenter in order to display a playlist with a header view."}