{"Functions": {"BasicHeaderIterator(org.apache.http.Header[], java.lang.String)": {"Returns": [], "Parameters": [["@B_org#apache#http#Header_E@", "an array of headers over which to iterate"], ["@B_java#lang#String_E@", "the name of the headers over which to iterate, or null for any"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new header iterator.", "history": "Added in API level 1", "FullName": "public BasicHeaderIterator (Header[] headers, String name)"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "Removing headers is not supported.", "history": "Added in API level 1", "FullName": "public void remove ()"}, "filterHeader(int)": {"Returns": [["", "true if the header should be part of the iteration, false to skip"]], "Parameters": [["int", "the index of the header to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a header is part of the iteration.", "history": "Added in API level 1", "FullName": "protected boolean filterHeader (int index)"}, "nextHeader()": {"Returns": [["", "the next header in this iteration"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more headers"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the next header from this iteration.", "history": "Added in API level 1", "FullName": "public Header nextHeader ()"}, "next()": {"Returns": [["", "the next header in this iteration"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more headers"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next header. Same as @B_org#apache#http#message#BasicHeaderIterator#nextHeader_E@, but not type-safe.", "history": "Added in API level 1", "FullName": "public final Object next ()"}, "findNext(int)": {"Returns": [["", "the index of the next header that matches the filter name, or negative if there are no more headers"]], "Parameters": [["int", "one less than the index to consider first, -1 to search for the first header"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines the index of the next header.", "history": "Added in API level 1", "FullName": "protected int findNext (int from)"}, "hasNext()": {"Returns": [["", "true if there is another header, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether there is another header in this iteration.", "history": "Added in API level 1", "FullName": "public boolean hasNext ()"}}, "Inheritance": [], "ClassName": "org.apache.http.message.BasicHeaderIterator", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Basic implementation of a @B_org#apache#http#HeaderIterator_E@."}