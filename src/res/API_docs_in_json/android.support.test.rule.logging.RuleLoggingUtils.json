{"Functions": {"getTestRunDir()": {"Returns": [["File", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the test run directory where tests should be written to.", "history": "", "FullName": "File getTestRunDir ()"}, "writeProcessOutputToFile(java.lang.Process, java.io.File)": {"Returns": [], "Parameters": [["Process", "Process no parameter comment"], ["File", "File no parameter comment"]], "Throws": [["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Utility method to read a @B_java#lang#Process_E@'s output and write it to a file.", "history": "", "FullName": "void writeProcessOutputToFile (Process process, File logFile)"}, "startCmdAndLogOutputPostL(java.lang.String[], java.io.File)": {"Returns": [], "Parameters": [["String[]", "String: the command and parameters to execute on the system"], ["File", "File: where comamnd output is written, or in the case of an error, the exception output is written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a @B_java#lang#Process_E@ on the system using a process compatible with all Android runtimes. Standard and error output is redirected to the specified file. This command runs within the testing instrumentation and has some development permissions already granted.", "history": "", "FullName": "void startCmdAndLogOutputPostL (String[] commandParts, File logFile)"}, "getTestFile(java.lang.String, java.lang.String, java.lang.String, int)": {"Returns": [["File", "no returns description in source"]], "Parameters": [["String", "String no parameter comment"], ["String", "String no parameter comment"], ["String", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a file handle that is within the testing directory where tests should be written to.", "history": "", "FullName": "File getTestFile (String className, String testName, String filename, int testRunNumber)"}, "startProcessAndWriteOutputToFilePreL(java.lang.String[], java.io.File)": {"Returns": [], "Parameters": [["String[]", "String: the command and parameters to execute on the system"], ["File", "File: where comamnd output is written, or in the case of an error, the exception output is written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a @B_java#lang#Process_E@ on the system using a process compatible with all Android runtimes. Standard and error output is redirected to the specified file. This command runs as the current user and requires appropriate permissions be granted to the App/Test APK. If the runtime is Android M or greater use @B_android#support#test#rule#logging#RuleLoggingUtils#startCmdAndLogOutputPostL_E@ instead to run as with instrumentation permissions.", "history": "", "FullName": "void startProcessAndWriteOutputToFilePreL (String[] commandParts, File logFile)"}, "startProcessAndLogToFile(java.lang.String[], java.io.File, int)": {"Returns": [], "Parameters": [["String[]", "String: the command and parameters to execute on the system"], ["File", "File: where comamnd output is written, or in the case of an error, where the exception output is written"], ["int", "int: overrides the system Android version which is used to decide the best method to invoke the command with. This is useful for code that needs to write Android version specific tests."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a @B_java#lang#Process_E@ on the system using either @B_android#support#test#rule#logging#RuleLoggingUtils#startCmdAndLogOutputPostL_E@ or @B_android#support#test#rule#logging#RuleLoggingUtils#startProcessAndWriteOutputToFilePreL_E@ according to the Android version number passed in. This utility method eliminates the need to grant your app some system permissions when running on Android Lollipop or above by using the test instrumentation to run the specified command. If you are testing on pre-Lollipop devices you will need to ensure your test APK has been granted any permissions needed to execute the commands passed in.", "history": "", "FullName": "void startProcessAndLogToFile (String[] commandParts, File logFile, int androidVersion)"}, "assertFileContentDoesNotContain(java.lang.String, java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["String", "String: to be used when throwing an Assertion error if the content does not match"], ["File", "File: to inspect"], ["String", "String: to compare against the content of the file"]], "Throws": [["AssertionError", "is thrown when the content is not found"], ["IOException", "when the there are issues accessing the file parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Test utility method to check if a file doesn't contain the specified content.", "history": "", "FullName": "void assertFileContentDoesNotContain (String message, File file, String contentString)"}, "printFileToLogcat(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["File", "File no parameter comment"], ["String", "String no parameter comment"]], "Throws": [["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Utility method to print file to logcat for debugging purposes.", "history": "", "FullName": "void printFileToLogcat (File logFile, String logcatTag)"}, "RuleLoggingUtils()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "RuleLoggingUtils ()"}, "assertFileContentContains(java.lang.String, java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["String", "String: to be used when throwing an Assertion error if the content does not match"], ["File", "File: to inspect"], ["String", "String: to compare against the content of the file"]], "Throws": [["AssertionError", "is thrown when the content is not found"], ["IOException", "when the there are issues accessing the file parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Test utility method to check if a file contains the specified content.", "history": "", "FullName": "void assertFileContentContains (String message, File file, String contentString)"}, "getTestRunFile(java.lang.String)": {"Returns": [["File", "no returns description in source"]], "Parameters": [["String", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a file handle within the testing directory where test data can be written for the complete test run.", "history": "", "FullName": "File getTestRunFile (String filename)"}, "assertEmptyFile(java.lang.String, java.io.File)": {"Returns": [], "Parameters": [["String", "String: to be used when throwing an Assertion error if the content is not empty"], ["File", "File: to inspect"]], "Throws": [["AssertionError", "is thrown when the file isn't empty"], ["IOException", "when the there are issues accessing the file parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Test utility method to check if a file is empty.", "history": "", "FullName": "void assertEmptyFile (String message, File file)"}, "writeErrorToFileAndLogcat(java.io.File, java.lang.String, java.lang.String, java.lang.Exception)": {"Returns": [], "Parameters": [["File", "File no parameter comment"], ["String", "String no parameter comment"], ["String", "String no parameter comment"], ["Exception", "Exception no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility method to write an error message to a file and logcat as an error.", "history": "", "FullName": "void writeErrorToFileAndLogcat (File file, String logTag, String errorMessage, Exception exception)"}, "getTestDir(java.lang.String, java.lang.String, int)": {"Returns": [["File", "no returns description in source"]], "Parameters": [["String", "String no parameter comment"], ["String", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the directory where logging rules logs should be written to. This directory is on external storage so it is not removed when the app is uninstalled. This allows the files to be retrieved despite fatal (think OutOfMemory) exceptions. testRunNumber should be set whenever a test method is run more than one time in a single test run to indicate which iteration the logging is for. Use zero as a default.", "history": "", "FullName": "File getTestDir (String className, String testName, int testRunNumber)"}, "startProcess(java.lang.String[])": {"Returns": [["Process", "no returns description in source"]], "Parameters": [["String[]", "String no parameter comment"]], "Throws": [["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Start a @B_java#lang#Process_E@ with the command and arguments specified in commandParts. You must call Process.destroy() on the object returned.", "history": "", "FullName": "Process startProcess (String[] commandParts)"}, "assertFileContentStartsWith(java.lang.String, java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["String", "String: to be used if the content does not match"], ["File", "File: to inspect"], ["String", "String: to compare against the content of the file"]], "Throws": [["AssertionError", "is thrown when the content is not found"], ["IOException", "when the there are issues accessing the file parameter"]], "SeeAlso": [], "Permissions": [], "Description": "Test utility method to quickly check if a file begins with the specified content.", "history": "", "FullName": "void assertFileContentStartsWith (String message, File file, String contentString)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.test.rule.logging.RuleLoggingUtils", "ClassDesc": "Convenience methods to ensure logging rules perform certain actions in the same manner."}