{"Functions": {"getResourceBundleName()": {"Returns": [["@B_java#lang#String_E@", "the localization resource bundle name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the localization resource bundle name This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.", "history": "Added in API level 1", "FullName": "public String getResourceBundleName ()"}, "setSourceMethodName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the source method name (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the name of the method that (allegedly) issued the logging request.", "history": "Added in API level 1", "FullName": "public void setSourceMethodName (String sourceMethodName)"}, "LogRecord(java.util.logging.Level,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#util#logging#Level_E@", "Level: a logging level value"], ["@B_java#lang#String_E@", "String: the raw non-localized logging message (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a LogRecord with the given level and message values. The sequence property will be initialized with a new unique value. These sequence values are allocated in increasing order within a VM. The millis property will be initialized to the current time. The thread ID property will be initialized with a unique ID for the current thread. All other properties will be initialized to \"null\".", "history": "Added in API level 1", "FullName": "public LogRecord (Level level, String msg)"}, "setMessage(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the raw message string (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the \"raw\" log message, before localization or formatting.", "history": "Added in API level 1", "FullName": "public void setMessage (String message)"}, "setThrown(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: a throwable (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a throwable associated with the log event.", "history": "Added in API level 1", "FullName": "public void setThrown (Throwable thrown)"}, "getParameters()": {"Returns": [["@B_java#lang#Object_E@", "the log message parameters. May be null if there are no parameters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the parameters to the log message.", "history": "Added in API level 1", "FullName": "public Object[] getParameters ()"}, "setLevel(java.util.logging.Level)": {"Returns": [], "Parameters": [["@B_java#util#logging#Level_E@", "Level: the logging message level"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the logging message level, for example Level.SEVERE.", "history": "Added in API level 1", "FullName": "public void setLevel (Level level)"}, "setSequenceNumber(long)": {"Returns": [], "Parameters": [["long", "long: the sequence number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the sequence number. Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.", "history": "Added in API level 1", "FullName": "public void setSequenceNumber (long seq)"}, "getThrown()": {"Returns": [["@B_java#lang#Throwable_E@", "a throwable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get any throwable associated with the log record. If the event involved an exception, this will be the exception object. Otherwise null.", "history": "Added in API level 1", "FullName": "public Throwable getThrown ()"}, "getMillis()": {"Returns": [["long", "event time in millis since 1970"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get event time in milliseconds since 1970.", "history": "Added in API level 1", "FullName": "public long getMillis ()"}, "setMillis(long)": {"Returns": [], "Parameters": [["long", "long: event time in millis since 1970"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set event time.", "history": "Added in API level 1", "FullName": "public void setMillis (long millis)"}, "setThreadID(int)": {"Returns": [], "Parameters": [["int", "int: the thread ID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an identifier for the thread where the message originated.", "history": "Added in API level 1", "FullName": "public void setThreadID (int threadID)"}, "getThreadID()": {"Returns": [["int", "thread ID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an identifier for the thread where the message originated. This is a thread identifier within the Java VM and may or may not map to any operating system ID.", "history": "Added in API level 1", "FullName": "public int getThreadID ()"}, "getMessage()": {"Returns": [["@B_java#lang#String_E@", "the raw message string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the \"raw\" log message, before localization or formatting. May be null, which is equivalent to the empty string \"\". This message may be either the final text or a localization key. During formatting, if the source logger has a localization ResourceBundle and if that ResourceBundle has an entry for this message string, then the message string is replaced with the localized value.", "history": "Added in API level 1", "FullName": "public String getMessage ()"}, "setResourceBundle(java.util.ResourceBundle)": {"Returns": [], "Parameters": [["@B_java#util#ResourceBundle_E@", "ResourceBundle: localization bundle (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the localization resource bundle.", "history": "Added in API level 1", "FullName": "public void setResourceBundle (ResourceBundle bundle)"}, "setResourceBundleName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: localization bundle name (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the localization resource bundle name.", "history": "Added in API level 1", "FullName": "public void setResourceBundleName (String name)"}, "getSourceClassName()": {"Returns": [["@B_java#lang#String_E@", "the source class name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the name of the class that (allegedly) issued the logging request. Note that this sourceClassName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained.", "history": "Added in API level 1", "FullName": "public String getSourceClassName ()"}, "getSourceMethodName()": {"Returns": [["@B_java#lang#String_E@", "the source method name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the name of the method that (allegedly) issued the logging request. Note that this sourceMethodName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained.", "history": "Added in API level 1", "FullName": "public String getSourceMethodName ()"}, "getResourceBundle()": {"Returns": [["@B_java#util#ResourceBundle_E@", "the localization resource bundle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the localization resource bundle This is the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.", "history": "Added in API level 1", "FullName": "public ResourceBundle getResourceBundle ()"}, "setSourceClassName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the source class name (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the name of the class that (allegedly) issued the logging request.", "history": "Added in API level 1", "FullName": "public void setSourceClassName (String sourceClassName)"}, "setLoggerName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the source logger name (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the source Logger's name.", "history": "Added in API level 1", "FullName": "public void setLoggerName (String name)"}, "setParameters(java.lang.Object[])": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the log message parameters. (may be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the parameters to the log message.", "history": "Added in API level 1", "FullName": "public void setParameters (Object[] parameters)"}, "getSequenceNumber()": {"Returns": [["long", "the sequence number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the sequence number. Sequence numbers are normally assigned in the LogRecord constructor, which assigns unique sequence numbers to each new LogRecord in increasing order.", "history": "Added in API level 1", "FullName": "public long getSequenceNumber ()"}, "getLevel()": {"Returns": [["@B_java#util#logging#Level_E@", "the logging message level"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the logging message level, for example Level.SEVERE.", "history": "Added in API level 1", "FullName": "public Level getLevel ()"}, "getLoggerName()": {"Returns": [["@B_java#lang#String_E@", "source logger name (may be null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the source Logger's name.", "history": "Added in API level 1", "FullName": "public String getLoggerName ()"}}, "Inheritance": [], "ClassName": "java.util.logging.LogRecord", "ClassDesc": "LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers. When a LogRecord is passed into the logging framework it logically belongs to the framework and should no longer be used or updated by the client application. Note that if the client application has not specified an explicit source method name and source class name, then the LogRecord class will infer them automatically when they are first accessed (due to a call on getSourceMethodName or getSourceClassName) by analyzing the call stack. Therefore, if a logging Handler wants to pass off a LogRecord to another thread, or to transmit it over RMI, and if it wishes to subsequently obtain method name or class name information it should call one of getSourceClassName or getSourceMethodName to force the values to be filled in. The LogRecord class is serializable. Because objects in the parameters array may not be serializable, during serialization all objects in the parameters array are written as the corresponding Strings (using Object.toString). The ResourceBundle is not transmitted as part of the serialized form, but the resource bundle name is, and the recipient object's readObject method will attempt to locate a suitable resource bundle."}