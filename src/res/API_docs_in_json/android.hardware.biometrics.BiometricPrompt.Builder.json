{"Functions": {"setDescription(java.lang.CharSequence)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optional: Set the description to display.", "history": "Added in API level 28", "FullName": "public BiometricPrompt.Builder setDescription (CharSequence description)"}, "setConfirmationRequired(boolean)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optional: A hint to the system to require user confirmation after a biometric has been authenticated. For example, implicit modalities like Face and Iris authentication are passive, meaning they don't require an explicit user action to complete. When set to 'false', the user action (e.g. pressing a button) will not be required. BiometricPrompt will require confirmation by default. A typical use case for not requiring confirmation would be for low-risk transactions, such as re-authenticating a recently authenticated application. A typical use case for requiring confirmation would be for authorizing a purchase. Note that this is a hint to the system. The system may choose to ignore the flag. For example, if the user disables implicit authentication in Settings, or if it does not apply to a modality (e.g. Fingerprint). When ignored, the system will default to requiring confirmation.", "history": "Added in API level 29", "FullName": "public BiometricPrompt.Builder setConfirmationRequired (boolean requireConfirmation)"}, "BiometricPrompt.Builder(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a builder for a biometric dialog.", "history": "Added in API level 28", "FullName": "public BiometricPrompt.Builder (Context context)"}, "setNegativeButton(java.lang.CharSequence,java.util.concurrent.Executor,android.content.DialogInterface.OnClickListener)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#content#DialogInterface#OnClickListener_E@", "DialogInterface.OnClickListener: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Required: Set the text for the negative button. This would typically be used as a \"Cancel\" button, but may be also used to show an alternative method for authentication, such as screen that asks for a backup password. Note that this should not be set if @B_android#hardware#biometrics#BiometricPrompt#Builder#setDeviceCredentialAllowed_E@(boolean) is set to true.", "history": "Added in API level 28", "FullName": "public BiometricPrompt.Builder setNegativeButton (CharSequence text, Executor executor, DialogInterface.OnClickListener listener)"}, "setSubtitle(java.lang.CharSequence)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optional: Set the subtitle to display.", "history": "Added in API level 28", "FullName": "public BiometricPrompt.Builder setSubtitle (CharSequence subtitle)"}, "setTitle(java.lang.CharSequence)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Required: Set the title to display.", "history": "Added in API level 28", "FullName": "public BiometricPrompt.Builder setTitle (CharSequence title)"}, "build()": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt_E@", "a @B_android#hardware#biometrics#BiometricPrompt_E@ This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the required fields are not set."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#hardware#biometrics#BiometricPrompt_E@.", "history": "Added in API level 28", "FullName": "public BiometricPrompt build ()"}, "setDeviceCredentialAllowed(boolean)": {"Returns": [["@B_android#hardware#biometrics#BiometricPrompt#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean: When true, the prompt will fall back to ask for the user's device credentials (PIN, pattern, or password)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The user will first be prompted to authenticate with biometrics, but also given the option to authenticate with their device PIN, pattern, or password. Developers should first check @B_android#app#KeyguardManager#isDeviceSecure_E@ before enabling this. If the device is not secure, @B_android#hardware#biometrics#BiometricPrompt#BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL_E@ will be returned in @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationError_E@}. Defaults to false. Note that @B_android#hardware#biometrics#BiometricPrompt#Builder#setNegativeButton_E@ should not be set if this is set to true.", "history": "Added in API level 29", "FullName": "public BiometricPrompt.Builder setDeviceCredentialAllowed (boolean allowed)"}}, "Inheritance": [], "ClassName": "android.hardware.biometrics.BiometricPrompt.Builder", "ClassDesc": "A builder that collects arguments to be shown on the system-provided biometric dialog. * @apiSince 28"}