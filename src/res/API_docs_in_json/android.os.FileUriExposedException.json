{"Functions": {"FileUriExposedException(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public FileUriExposedException (String message)"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@", "@B_java#lang#RuntimeException_E@"], "ClassName": "android.os.FileUriExposedException", "ClassDesc": "The exception that is thrown when an application exposes a file:// @B_android#net#Uri_E@ to another app. This exposure is discouraged since the receiving app may not have access to the shared path. For example, the receiving app may not have requested the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ runtime permission, or the platform may be sharing the @B_android#net#Uri_E@ across user profile boundaries. Instead, apps should use content:// Uris so the platform can extend temporary permission for the receiving app to access the resource. This is only thrown for applications targeting @B_android#os#Build#VERSION_CODES#N_E@ or higher. Applications targeting earlier SDK versions are allowed to share file:// @B_android#net#Uri_E@, but it's strongly discouraged."}