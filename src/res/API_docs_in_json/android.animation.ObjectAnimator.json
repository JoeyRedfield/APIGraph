{"Functions": {"setFloatValues(float...)": {"Returns": [], "Parameters": [["float...", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets float values that will be animated between. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects.", "history": "Added in API level 11", "FullName": "public void setFloatValues (float... values)"}, "ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values. This value will never be null."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. Depending on how the PropertyValuesObjects were constructed, the target object should either have the @B_android#util#Property_E@ objects used to construct the PropertyValuesHolder objects or (if the PropertyValuesHOlder objects were created with property names) the target object should have public methods on it called setName(), where name is the name of the property passed in as the propertyName parameter for each of the PropertyValuesHolder objects."], ["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder: A set of PropertyValuesHolder objects whose values will be animated between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between the sets of values specified in PropertyValueHolder objects. This variant should be used when animating several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows you to associate a set of animation values with a property name.", "history": "Added in API level 11", "FullName": "public static ObjectAnimator ofPropertyValuesHolder (Object target, PropertyValuesHolder... values)"}, "setupStartValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract starting values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupStartValues ()"}, "ofMultiInt(java.lang.Object,java.lang.String,int[][])": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["int[][]", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates over int values for a multiple parameters setter. Only public methods that take only int parameters are supported. Each int[] contains a complete set of parameters to the setter method. At least two int[] values must be provided, a start and end. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiInt (Object target, String propertyName, int[][] values)"}, "ofMultiFloat(java.lang.Object,java.lang.String,float[][])": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["float[][]", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates over float values for a multiple parameters setter. Only public methods that take only float parameters are supported. Each float[] contains a complete set of parameters to the setter method. At least two float[] values must be provided, a start and end. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiFloat (Object target, String propertyName, float[][] values)"}, "ofFloat(java.lang.Object,java.lang.String,float...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["float...", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between float values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 11", "FullName": "public static ObjectAnimator ofFloat (Object target, String propertyName, float... values)"}, "ofMultiInt(java.lang.Object,java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates the target using a multi-int setter along the given Path. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are integer x and y coordinates used in the first and second parameter of the setter, respectively.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiInt (Object target, String propertyName, Path path)"}, "setObjectValues(java.lang.Object...)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The set of values to animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values to animate between for this animation. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects. There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate between these value objects. ValueAnimator only knows how to interpolate between the primitive types specified in the other setValues() methods.", "history": "Added in API level 11", "FullName": "public void setObjectValues (Object... values)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to @B_android#animation#Animator#AnimatorListener#onAnimationStart_E@ for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy.", "history": "Added in API level 11", "FullName": "public void start ()"}, "ofObject(T,android.util.Property<T,P>,android.animation.TypeConverter<V,P>,android.animation.TypeEvaluator<V>,V...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values. This value will never be null."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts the animated object to the Property type."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["V...", "V: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between Object values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation). This variant supplies a TypeConverter to convert from the animated values to the type of the property. If only one value is supplied, the TypeConverter must be a @B_android#animation#BidirectionalTypeConverter_E@ to retrieve the current value.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofObject (T target, Property<T, P> property, TypeConverter<V, P> converter, TypeEvaluator<V> evaluator, V... values)"}, "ofInt(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose properties are to be animated. This object should have public methods on it called setNameX() and setNameY, where nameX and nameY are the value of xPropertyName and yPropertyName parameters, respectively."], ["@B_java#lang#String_E@", "String: The name of the property for the x coordinate being animated."], ["@B_java#lang#String_E@", "String: The name of the property for the y coordinate being animated."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are integers that are set to separate properties designated by xPropertyName and yPropertyName.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofInt (Object target, String xPropertyName, String yPropertyName, Path path)"}, "getTarget()": {"Returns": [["@B_java#lang#Object_E@", "The object being animated This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The target object whose property will be animated by this animation", "history": "Added in API level 11", "FullName": "public Object getTarget ()"}, "ofMultiFloat(java.lang.Object,java.lang.String,android.animation.TypeConverter<T,float[]>,android.animation.TypeEvaluator<T>,T...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts T objects into float parameters for the multi-value setter."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["T...", "T: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates over values for a multiple float parameters setter. Only public methods that take only float parameters are supported. At least two values must be provided, a start and end. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiFloat (Object target, String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, T... values)"}, "ofObject(T,android.util.Property<T,V>,android.animation.TypeConverter<android.graphics.PointF,V>,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated. Should not be null. This value must never be null."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts a PointF to the type associated with the setter. May be null if conversion is unnecessary. This value may be null."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates a property along a Path. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. This variant animates the coordinates in a PointF to follow the Path. If property uses a type other than PointF, converter can be used to change from PointF to the type associated with the Property. The PointF passed to converter or property, if converter is null, is reused on each animation frame and should not be stored by the setter or TypeConverter.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofObject (T target, Property<T, V> property, TypeConverter<PointF, V> converter, Path path)"}, "ofObject(java.lang.Object,java.lang.String,android.animation.TypeConverter<android.graphics.PointF,?>,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts a PointF to the type associated with the setter. May be null if conversion is unnecessary. This value may be null."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates a property along a Path. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. This variant animates the coordinates in a PointF to follow the Path. If the Property associated with propertyName uses a type other than PointF, converter can be used to change from PointF to the type associated with the Property.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofObject (Object target, String propertyName, TypeConverter<PointF, ?> converter, Path path)"}, "ofFloat(T,android.util.Property<T,java.lang.Float>,float...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated."], ["float...", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between float values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 14", "FullName": "public static ObjectAnimator ofFloat (T target, Property<T, Float> property, float... values)"}, "ofObject(T,android.util.Property<T,V>,android.animation.TypeEvaluator<V>,V...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values. This value will never be null."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["V...", "V: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between Object values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 14", "FullName": "public static ObjectAnimator ofObject (T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values)"}, "clone()": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public ObjectAnimator clone ()"}, "ofMultiFloat(java.lang.Object,java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates the target using a multi-float setter along the given Path. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are float x and y coordinates used in the first and second parameter of the setter, respectively.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiFloat (Object target, String propertyName, Path path)"}, "ofArgb(java.lang.Object, java.lang.String, int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between color values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "added in API level 21", "FullName": "public static ObjectAnimator ofArgb (Object target, String propertyName, int... values)"}, "ofInt(java.lang.Object, java.lang.String, int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between int values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "added in API level 11", "FullName": "public static ObjectAnimator ofInt (Object target, String propertyName, int... values)"}, "setProperty(android.util.Property)": {"Returns": [], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the property that will be animated. Property objects will take precedence over properties specified by the @B_android#animation#ObjectAnimator#setPropertyName_E@ method. Animations should be set up to use one or the other, not both.", "history": "Added in API level 14", "FullName": "public void setProperty (Property property)"}, "ofFloat(T,android.util.Property<T,java.lang.Float>,android.util.Property<T,java.lang.Float>,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["T", "T: The object whose properties are to be animated."], ["@B_android#util#Property_E@", "Property: The property for the x coordinate being animated."], ["@B_android#util#Property_E@", "Property: The property for the y coordinate being animated."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are floats that are set to separate properties, xProperty and yProperty.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofFloat (T target, Property<T, Float> xProperty, Property<T, Float> yProperty, Path path)"}, "ofInt(T,android.util.Property<T,java.lang.Integer>,android.util.Property<T,java.lang.Integer>,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["T", "T: The object whose properties are to be animated."], ["@B_android#util#Property_E@", "Property: The property for the x coordinate being animated."], ["@B_android#util#Property_E@", "Property: The property for the y coordinate being animated."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are integers that are set to separate properties, xProperty and yProperty.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofInt (T target, Property<T, Integer> xProperty, Property<T, Integer> yProperty, Path path)"}, "ofInt(T,android.util.Property<T,java.lang.Integer>,int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between int values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 14", "FullName": "public static ObjectAnimator ofInt (T target, Property<T, Integer> property, int... values)"}, "setPropertyName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Should not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the property that will be animated. This name is used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called. For best performance of the mechanism that calls the setter function determined by the name of the property being animated, use float or int typed values, and make the setter function for those properties have a void return value. This will cause the code to take an optimized path for these constrained circumstances. Other property types and return types will work, but will have more overhead in processing the requests due to normal reflection mechanisms. Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties, otherwise the call to the setter function will fail. If this ObjectAnimator has been set up to animate several properties together, using more than one PropertyValuesHolder objects, then setting the propertyName simply sets the propertyName in the first of those PropertyValuesHolder objects.", "history": "Added in API level 11", "FullName": "public void setPropertyName (String propertyName)"}, "setDuration(long)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "ObjectAnimator The object called with setDuration(). This return value makes it easier to compose statements together that construct and then set the duration, as in ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start(). This value will never be null."]], "Parameters": [["long", "long: The length of the animation, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of the animation. The default duration is 300 milliseconds.", "history": "Added in API level 11", "FullName": "public ObjectAnimator setDuration (long duration)"}, "setTarget(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the target object whose property will be animated by this animation. Not all subclasses operate on target objects (for example, @B_android#animation#ValueAnimator_E@, but this method is on the superclass for the convenience of dealing generically with those subclasses that do handle targets.", "history": "Added in API level 11", "FullName": "public void setTarget (Object target)"}, "ofInt(java.lang.Object,java.lang.String,int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between int values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 11", "FullName": "public static ObjectAnimator ofInt (Object target, String propertyName, int... values)"}, "setIntValues(int...)": {"Returns": [], "Parameters": [["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets int values that will be animated between. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects.", "history": "Added in API level 11", "FullName": "public void setIntValues (int... values)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "ofArgb(T,android.util.Property<T,java.lang.Integer>,int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["T", "T: The object whose property is to be animated."], ["@B_android#util#Property_E@", "Property: The property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between color values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofArgb (T target, Property<T, Integer> property, int... values)"}, "ofArgb(java.lang.Object,java.lang.String,int...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between color values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofArgb (Object target, String propertyName, int... values)"}, "getPropertyName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the property that will be animated. This name will be used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called. If this animator was created with a @B_android#util#Property_E@ object instead of the string name of a property, then this method will return the @B_android#util#Property#getName_E@ of that Property object instead. If this animator was created with one or more @B_android#animation#PropertyValuesHolder_E@ objects, then this method will return the @B_android#animation#PropertyValuesHolder#getPropertyName_E@ of that object (if there was just one) or a comma-separated list of all of the names (if there are more than one).", "history": "Added in API level 11", "FullName": "public String getPropertyName ()"}, "ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object should have a public method on it called setName(), where name is the value of the propertyName parameter."], ["@B_java#lang#String_E@", "String: The name of the property being animated."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["@B_java#lang#Object_E@", "Object: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates between Object values. A single value implies that that value is the one being animated to, in which case the start value will be derived from the property being animated and the target object when @B_android#animation#ObjectAnimator#start_E@ is called for the first time. Two values imply starting and ending values. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 11", "FullName": "public static ObjectAnimator ofObject (Object target, String propertyName, TypeEvaluator evaluator, Object... values)"}, "ofMultiInt(java.lang.Object,java.lang.String,android.animation.TypeConverter<T,int[]>,android.animation.TypeEvaluator<T>,T...)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose property is to be animated. This object may have a public method on it called setName(), where name is the value of the propertyName parameter. propertyName may also be the case-sensitive complete name of the public setter method."], ["@B_java#lang#String_E@", "String: The name of the property being animated or the name of the setter method."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts T objects into int parameters for the multi-value setter."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["T...", "T: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates over values for a multiple int parameters setter. Only public methods that take only int parameters are supported. At least two values must be provided, a start and end. More than two values imply a starting value, values to animate through along the way, and an ending value (these values will be distributed evenly across the duration of the animation).", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofMultiInt (Object target, String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, T... values)"}, "setAutoCancel(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether future ObjectAnimators with the same target and properties as this ObjectAnimator will cause this ObjectAnimator to be canceled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "autoCancel controls whether an ObjectAnimator will be canceled automatically when any other ObjectAnimator with the same target and properties is started. Setting this flag may make it easier to run different animators on the same target object without having to keep track of whether there are conflicting animators that need to be manually canceled. Canceling animators must have the same exact set of target properties, in the same order.", "history": "Added in API level 18", "FullName": "public void setAutoCancel (boolean cancel)"}, "ObjectAnimator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ObjectAnimator object. This default constructor is primarily for use internally; the other constructors which take parameters are more generally useful.", "history": "Added in API level 11", "FullName": "public ObjectAnimator ()"}, "ofFloat(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An ObjectAnimator object that is set up to animate along path."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object whose properties are to be animated. This object should have public methods on it called setNameX() and setNameY, where nameX and nameY are the value of the xPropertyName and yPropertyName parameters, respectively."], ["@B_java#lang#String_E@", "String: The name of the property for the x coordinate being animated."], ["@B_java#lang#String_E@", "String: The name of the property for the y coordinate being animated."], ["@B_android#graphics#Path_E@", "Path: The Path to animate values along."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties. A Path> animation moves in two dimensions, animating coordinates (x, y) together to follow the line. In this variation, the coordinates are floats that are set to separate properties designated by xPropertyName and yPropertyName.", "history": "Added in API level 21", "FullName": "public static ObjectAnimator ofFloat (Object target, String xPropertyName, String yPropertyName, Path path)"}, "setupEndValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract ending values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupEndValues ()"}}, "Inheritance": ["@B_android#animation#Animator_E@", "@B_android#animation#ValueAnimator_E@"], "ClassName": "android.animation.ObjectAnimator", "ClassDesc": "This subclass of @B_android#animation#ValueAnimator_E@ provides support for animating properties on target objects. The constructors of this class take parameters to define the target object that will be animated as well as the name of the property that will be animated. Appropriate set/get functions are then determined internally and the animation will call these functions as necessary to animate the property. Animators can be created from either code or resource files, as shown here: Starting from API 23, it is possible to use @B_android#animation#PropertyValuesHolder_E@ and @B_android#animation#Keyframe_E@ in resource files to create more complex animations. Using PropertyValuesHolders allows animators to animate several properties in parallel, as shown in this sample: Using Keyframes allows animations to follow more complex paths from the start to the end values. Note that you can specify explicit fractional values (from 0 to 1) for each keyframe to determine when, in the overall duration, the animation should arrive at that value. Alternatively, you can leave the fractions off and the keyframes will be equally distributed within the total duration. Also, a keyframe with no value will derive its value from the target object when the animator starts, just like animators with only one value specified. In addition, an optional interpolator can be specified. The interpolator will be applied on the interval between the keyframe that the interpolator is set on and the previous keyframe. When no interpolator is supplied, the default @B_android#view#animation#AccelerateDecelerateInterpolator_E@ will be used."}