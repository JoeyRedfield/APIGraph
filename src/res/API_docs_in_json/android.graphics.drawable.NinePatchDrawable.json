{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending modeThis value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "getPaint()": {"Returns": [["@B_android#graphics#Paint_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Paint getPaint ()"}, "getTransparentRegion()": {"Returns": [["@B_android#graphics#Region_E@", "Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so.", "history": "Added in API level 1", "FullName": "public Region getTransparentRegion ()"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 1", "FullName": "public void setDither (boolean dither)"}, "getMinimumHeight()": {"Returns": [["", "The minimum height suggested by this Drawable. If this Drawable doesn't have a suggested minimum height, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumHeight ()"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 1", "FullName": "public int getOpacity ()"}, "NinePatchDrawable(android.graphics.NinePatch)": {"Returns": [], "Parameters": [["@B_android#graphics#NinePatch_E@", "NinePatch: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#drawable#NinePatchDrawable#NinePatchDrawable_E@ to ensure that the drawable has correctly set its target density. Create drawable from existing nine-patch, not dealing with density.", "history": "Added in API level 1", "FullName": "public NinePatchDrawable (NinePatch patch)"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public boolean isAutoMirrored ()"}, "getMinimumWidth()": {"Returns": [["", "The minimum width suggested by this Drawable. If this Drawable doesn't have a suggested minimum width, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumWidth ()"}, "NinePatchDrawable(android.content.res.Resources,android.graphics.NinePatch)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value may be null."], ["@B_android#graphics#NinePatch_E@", "NinePatch: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create drawable from existing nine-patch, setting initial target density based on the display metrics of the resources.", "history": "Added in API level 4", "FullName": "public NinePatchDrawable (Resources res, NinePatch patch)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 1", "FullName": "public void setAlpha (int alpha)"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "setFilterBitmap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated. This can improve appearance when bitmaps are rotated. If the drawable does not use bitmaps, this call is ignored.", "history": "Added in API level 1", "FullName": "public void setFilterBitmap (boolean filter)"}, "isFilterBitmap()": {"Returns": [["boolean", "whether this drawable filters its bitmaps"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public boolean isFilterBitmap ()"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "NinePatchDrawable(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources no parameter comment"], ["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"], ["byte[]", "byte no parameter comment"], ["@B_android#graphics#Rect_E@", "Rect no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create drawable from raw nine-patch data, setting initial target density based on the display metrics of the resources.", "history": "Added in API level 4", "FullName": "public NinePatchDrawable (Resources res, Bitmap bitmap, byte[] chunk, Rect padding, String srcName)"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "NinePatchDrawable(android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"], ["byte[]", "byte no parameter comment"], ["@B_android#graphics#Rect_E@", "Rect no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#graphics#drawable#NinePatchDrawable#NinePatchDrawable_E@ to ensure that the drawable has correctly set its target density. Create drawable from raw nine-patch data, not dealing with density.", "history": "Added in API level 1", "FullName": "public NinePatchDrawable (Bitmap bitmap, byte[] chunk, Rect padding, String srcName)"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "setTargetDensity(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas from which the density scale must be obtained. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density scale at which this drawable will be rendered. This method assumes the drawable will be rendered at the same density as the specified canvas.", "history": "Added in API level 4", "FullName": "public void setTargetDensity (Canvas canvas)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "setTargetDensity(android.util.DisplayMetrics)": {"Returns": [], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: The DisplayMetrics indicating the density scale for this drawable. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density scale at which this drawable will be rendered.", "history": "Added in API level 4", "FullName": "public void setTargetDensity (DisplayMetrics metrics)"}, "setTargetDensity(int)": {"Returns": [], "Parameters": [["int", "int: The density scale for this drawable."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density at which this drawable will be rendered.", "history": "Added in API level 4", "FullName": "public void setTargetDensity (int density)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.NinePatchDrawable", "ClassDesc": "A resizeable bitmap, with stretchable areas that you define. This type of image is defined in a .png file with a special format."}