{"Functions": {"skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if the stream does not support seek, or if this input stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "See the general contract of the skip method of InputStream.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "BufferedInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the underlying input stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a BufferedInputStream and saves its argument, the input stream in, for later use. An internal buffer array is created and stored in buf.", "history": "Added in API level 1", "FullName": "public BufferedInputStream (InputStream in)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this stream has not been marked or, if the mark has been invalidated, or the stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#BufferedInputStream#mark_E@"], "Permissions": [], "Description": "See the general contract of the reset method of InputStream. If markpos is -1 (no mark has been set or the mark has been invalidated), an IOException is thrown. Otherwise, pos is set equal to markpos.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "markSupported()": {"Returns": [["boolean", "a boolean indicating if this stream type supports the mark and reset methods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Tests if this input stream supports the mark and reset methods. The markSupported method of BufferedInputStream returns true.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "BufferedInputStream(java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the underlying input stream."], ["int", "int: the buffer size."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a BufferedInputStream with the specified buffer size, and saves its argument, the input stream in, for later use. An internal buffer array of length size is created and stored in buf.", "history": "Added in API level 1", "FullName": "public BufferedInputStream (InputStream in, int size)"}, "read(byte[], int, int)": {"Returns": [["int", "the number of bytes read, or -1 if the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: destination buffer."], ["int", "int: offset at which to start storing bytes."], ["int", "int: maximum number of bytes to read."]], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads bytes from this byte-input stream into the specified byte array, starting at the given offset. This method implements the general contract of the corresponding read method of the InputStream class. As an additional convenience, it attempts to read as many bytes as possible by repeatedly invoking the read method of the underlying stream. This iterated read continues until one of the following conditions becomes true: The specified number of bytes have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The available method of the underlying stream returns zero, indicating that further input requests would block. If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1. Otherwise this method returns the number of bytes actually read. Subclasses of this class are encouraged, but not required, to attempt to read as many bytes as possible in the same fashion.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream. Once the stream has been closed, further read(), available(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "BufferedInputStream(java.io.InputStream, int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the underlying input stream."], ["int", "int: the buffer size."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a BufferedInputStream with the specified buffer size, and saves its argument, the input stream in, for later use. An internal buffer array of length size is created and stored in buf.", "history": "added in API level 1", "FullName": "public BufferedInputStream (InputStream in, int size)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: the maximum limit of bytes that can be read before the mark position becomes invalid."]], "Throws": [], "SeeAlso": ["@B_java#io#BufferedInputStream#reset_E@"], "Permissions": [], "Description": "See the general contract of the mark method of InputStream.", "history": "Added in API level 1", "FullName": "public void mark (int readlimit)"}, "available()": {"Returns": [["int", "an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. This method returns the sum of the number of bytes remaining to be read in the buffer (count - pos) and the result of calling the @B_java#io#FilterInputStream#in_E@.available().", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[],int,int)": {"Returns": [["int", "the number of bytes read, or -1 if the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: destination buffer."], ["int", "int: offset at which to start storing bytes."], ["int", "int: maximum number of bytes to read."]], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads bytes from this byte-input stream into the specified byte array, starting at the given offset. This method implements the general contract of the corresponding InputStream#read(byte[], int, int) method of the InputStream class. As an additional convenience, it attempts to read as many bytes as possible by repeatedly invoking the read method of the underlying stream. This iterated read continues until one of the following conditions becomes true: The specified number of bytes have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The available method of the underlying stream returns zero, indicating that further input requests would block. If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1. Otherwise this method returns the number of bytes actually read. Subclasses of this class are encouraged, but not required, to attempt to read as many bytes as possible in the same fashion.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#BufferedInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the read method of InputStream.", "history": "Added in API level 1", "FullName": "public int read ()"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.io.BufferedInputStream", "ClassDesc": "A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods. When the BufferedInputStream is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The mark operation remembers a point in the input stream and the reset operation causes all the bytes read since the most recent mark operation to be reread before new bytes are taken from the contained input stream."}