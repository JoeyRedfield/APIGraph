{"Functions": {"cleanup(android.os.IBinder,boolean)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void cleanup (IBinder token, boolean unlink)"}, "TokenWatcher(android.os.Handler,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#Handler_E@", "Handler: A handler to call @B_android#os#TokenWatcher#acquired_E@ and @B_android#os#TokenWatcher#released_E@ on. If you don't care, just call it like this, although your thread will have to be a Looper thread. new TokenWatcher(new Handler())"], ["@B_java#lang#String_E@", "String: A debugging tag for this TokenWatcher"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct the TokenWatcher", "history": "Added in API level 1", "FullName": "public TokenWatcher (Handler h, String tag)"}, "isAcquired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isAcquired ()"}, "released()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the number of active tokens goes from 1 to 0.", "history": "Added in API level 1", "FullName": "public abstract void released ()"}, "acquire(android.os.IBinder, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: An IBinder object."], ["@B_java#lang#String_E@", "String: A string used by the @B_android#os#TokenWatcher#dump_E@ method for debugging, to see who has references."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Record that this token has been acquired. When acquire is called, and the current count is 0, the acquired method is called on the given handler. Note that the same token can only be acquired once. If this token has already been acquired, no action is taken. The first subsequent call to @B_android#os#TokenWatcher#release_E@ will release this token immediately.", "history": "added in API level 1", "FullName": "public void acquire (IBinder token, String tag)"}, "acquired()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the number of active tokens goes from 0 to 1.", "history": "Added in API level 1", "FullName": "public abstract void acquired ()"}, "dump()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void dump ()"}, "release(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void release (IBinder token)"}, "TokenWatcher(android.os.Handler, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#Handler_E@", "Handler: A handler to call @B_android#os#TokenWatcher#acquired_E@ and @B_android#os#TokenWatcher#released_E@ on. If you don't care, just call it like this, although your thread will have to be a Looper thread. new TokenWatcher(new Handler())"], ["@B_java#lang#String_E@", "String: A debugging tag for this TokenWatcher"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct the TokenWatcher", "history": "added in API level 1", "FullName": "public TokenWatcher (Handler h, String tag)"}, "cleanup(android.os.IBinder, boolean)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void cleanup (IBinder token, boolean unlink)"}, "acquire(android.os.IBinder,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: An IBinder object."], ["@B_java#lang#String_E@", "String: A string used by the @B_android#os#TokenWatcher#dump_E@ method for debugging, to see who has references."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Record that this token has been acquired. When acquire is called, and the current count is 0, the acquired method is called on the given handler. Note that the same token can only be acquired once. If this token has already been acquired, no action is taken. The first subsequent call to @B_android#os#TokenWatcher#release_E@ will release this token immediately.", "history": "Added in API level 1", "FullName": "public void acquire (IBinder token, String tag)"}, "dump(java.io.PrintWriter)": {"Returns": [], "Parameters": [["@B_java#io#PrintWriter_E@", "PrintWriter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public void dump (PrintWriter pw)"}}, "Inheritance": [], "ClassName": "android.os.TokenWatcher", "ClassDesc": "A TokenWatcher watches a collection of @B_android#os#IBinder_E@s. IBinders are added to the collection by calling @B_android#os#TokenWatcher#acquire_E@, and removed by calling @B_android#os#TokenWatcher#release_E@. IBinders are also implicitly removed when they become weakly reachable. Each IBinder may be added at most once. The @B_android#os#TokenWatcher#acquired_E@ method is invoked by posting to the specified handler whenever the size of the watched collection becomes nonzero. The @B_android#os#TokenWatcher#released_E@ method is invoked on the specified handler whenever the size of the watched collection becomes zero."}