{"Functions": {"connect(java.io.PipedInputStream)": {"Returns": [], "Parameters": [["@B_java#io#PipedInputStream_E@", "PipedInputStream: the piped input stream to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Connects this piped output stream to a receiver. If this object is already connected to some other piped input stream, an IOException is thrown. If snk is an unconnected piped input stream and src is an unconnected piped output stream, they may be connected by either the call:", "history": "Added in API level 1", "FullName": "public void connect (PipedInputStream snk)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this piped output stream and releases any system resources associated with this stream. This stream may no longer be used for writing bytes.", "history": "Added in API level 1", "FullName": "public void close ()"}, "write(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedOutputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this piped output stream. This method blocks until all the bytes are written to the output stream.", "history": "added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Flushes this output stream and forces any buffered output bytes to be written out. This will notify any readers that bytes are waiting in the pipe.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "PipedOutputStream(java.io.PipedInputStream)": {"Returns": [], "Parameters": [["@B_java#io#PipedInputStream_E@", "PipedInputStream: The piped input stream to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a piped output stream connected to the specified piped input stream. Data bytes written to this stream will then be available as input from snk.", "history": "Added in API level 1", "FullName": "public PipedOutputStream (PipedInputStream snk)"}, "write(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedOutputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this piped output stream. This method blocks until all the bytes are written to the output stream.", "history": "Added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "PipedOutputStream()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#PipedInputStream#connect_E@", "@B_java#io#PipedOutputStream#connect_E@"], "Permissions": [], "Description": "Creates a piped output stream that is not yet connected to a piped input stream. It must be connected to a piped input stream, either by the receiver or the sender, before being used.", "history": "Added in API level 1", "FullName": "public PipedOutputStream ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: the byte to be written."]], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedOutputStream#connect_E@, closed, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the specified byte to the piped output stream. Implements the write method of OutputStream.", "history": "Added in API level 1", "FullName": "public void write (int b)"}}, "Inheritance": ["@B_java#io#OutputStream_E@"], "ClassName": "java.io.PipedOutputStream", "ClassDesc": "A piped output stream can be connected to a piped input stream to create a communications pipe. The piped output stream is the sending end of the pipe. Typically, data is written to a PipedOutputStream object by one thread and data is read from the connected PipedInputStream by some other thread. Attempting to use both objects from a single thread is not recommended as it may deadlock the thread. The pipe is said to be"}