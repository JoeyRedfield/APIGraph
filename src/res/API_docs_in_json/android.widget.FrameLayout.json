{"Functions": {"getForegroundTintList()": {"Returns": [["", "the tint applied to the foreground drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#FrameLayout#setForegroundTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ColorStateList getForegroundTintList ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "Current width of this view."], ["int", "Current height of this view."], ["int", "Old width of this view."], ["int", "Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#FrameLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public FrameLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getForegroundGravity()": {"Returns": [["", "foreground gravity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#FrameLayout#setForegroundGravity_E@"], "Permissions": [], "Description": "Describes how the foreground is positioned.", "history": "Added in API level 16", "FullName": "public int getForegroundGravity ()"}, "FrameLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public FrameLayout (Context context)"}, "gatherTransparentRegion(android.graphics.Region)": {"Returns": [["", "Returns true if the effective visibility of the view at this point is opaque, regardless of the transparent region; returns false if it is possible for underlying windows to be seen behind the view."]], "Parameters": [["@B_android#graphics#Region_E@", "The transparent region for this ViewAncestor (window)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. SurfaceView is always considered transparent, but its children are not, therefore all View objects remove themselves from the global transparent region (passed as a parameter to this function).", "history": "Added in API level 1", "FullName": "public boolean gatherTransparentRegion (Region region)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "hotspot x coordinate"], ["float", "hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "setForeground(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "The Drawable to be drawn on top of the children."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Supply a Drawable that is to be rendered on top of all of the child views in the frame layout. Any padding in the Drawable will be taken into account by ensuring that the children are inset to be placed inside of the padding area.", "history": "Added in API level 1", "FullName": "public void setForeground (Drawable d)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getForegroundTintMode()": {"Returns": [["", "the blending mode used to apply the tint to the foreground drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#FrameLayout#setForegroundTintMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getForegroundTintMode ()"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "The Drawable to verify. Return true if it is one you are displaying, else return the result of calling through to the super class."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "Added in API level 14", "FullName": "public boolean shouldDelayChildPressedState ()"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "FrameLayout(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public FrameLayout (Context context, AttributeSet attrs, int defStyleAttr)"}, "getMeasureAllChildren()": {"Returns": [["boolean", "Whether all children are considered when measuring."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether all children, or just those in the VISIBLE or INVISIBLE state, are considered when measuring.", "history": "Added in API level 14", "FullName": "public boolean getMeasureAllChildren ()"}, "setMeasureAllChildren(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to consider children marked GONE, false otherwise. Default value is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether to consider all children, or just those in the VISIBLE or INVISIBLE state, when measuring. Defaults to false.", "history": "Added in API level 1", "FullName": "public void setMeasureAllChildren (boolean measureAll)"}, "setForegroundGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#View#getForegroundGravity_E@"], "Permissions": [], "Description": "Describes how the foreground is positioned. Defaults to START and TOP.", "history": "Added in API level 1", "FullName": "public void setForegroundGravity (int foregroundGravity)"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view.", "history": "Added in API level 1", "FullName": "public void setVisibility (int visibility)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1", "FullName": "protected ViewGroup.LayoutParams generateLayoutParams (ViewGroup.LayoutParams lp)"}, "getConsiderGoneChildrenWhenMeasuring()": {"Returns": [["boolean", "Whether all children are considered when measuring."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is deprecated in favor of @B_android#widget#FrameLayout#getMeasureAllChildren_E@, which was renamed for consistency with @B_android#widget#FrameLayout#setMeasureAllChildren_E@. Determines whether all children, or just those in the VISIBLE or INVISIBLE state, are considered when measuring.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean getConsiderGoneChildrenWhenMeasuring ()"}, "FrameLayout(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public FrameLayout (Context context, AttributeSet attrs)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#FrameLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, and a height of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@.", "history": "Added in API level 1", "FullName": "protected FrameLayout.LayoutParams generateDefaultLayoutParams ()"}, "FrameLayout(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public FrameLayout (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getForeground()": {"Returns": [["", "A Drawable or null if no foreground was set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable used as the foreground of this FrameLayout. The foreground drawable, if non-null, is always drawn on top of the children.", "history": "Added in API level 1", "FullName": "public Drawable getForeground ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.widget.FrameLayout", "ClassDesc": "FrameLayout is designed to block out an area on the screen to display a single item. Generally, FrameLayout should be used to hold a single child view, because it can be difficult to organize child views in a way that's scalable to different screen sizes without the children overlapping each other. You can, however, add multiple children to a FrameLayout and control their position within the FrameLayout by assigning gravity to each child, using the Child views are drawn in a stack, with the most recently added child on top. The size of the FrameLayout is the size of its largest child (plus padding), visible or not (if the FrameLayout's parent permits). Views that are @B_android#view#View#GONE_E@ are used for sizing only if @B_android#widget#FrameLayout#setMeasureAllChildren_E@ is set to true."}