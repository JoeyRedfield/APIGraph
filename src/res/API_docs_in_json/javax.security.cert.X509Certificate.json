{"Functions": {"getSigAlgName()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm name for the certificate signature algorithm. An example is the string \"SHA-1/DSA\". The ASN.1 definition for this is: The algorithm name is determined from the algorithm OID string.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgName ()"}, "getSerialNumber()": {"Returns": [["@B_java#math#BigInteger_E@", "the serial number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the serialNumber value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract BigInteger getSerialNumber ()"}, "getInstance(java.io.InputStream)": {"Returns": [["@B_javax#security#cert#X509Certificate_E@", "an X509Certificate object initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream with the data to be read to initialize the certificate."]], "Throws": [["@B_javax#security#cert#CertificateException_E@", "if a class initialization or certificate parsing error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Instantiates an X509Certificate object, and initializes it with the data read from the input stream inStream. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the cert.provider.x509v1 security property. Note: Only one DER-encoded certificate is expected to be in the input stream. Also, all X509Certificate subclasses must provide a constructor of the form:", "history": "Added in API level 1", "FullName": "public static final X509Certificate getInstance (InputStream inStream)"}, "getVersion()": {"Returns": [["int", "the version number from the ASN.1 encoding, i.e. 0, 1 or 2."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the version (version number) value from the certificate. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract int getVersion ()"}, "checkValidity(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to check against to see if this certificate is valid at that date/time."]], "Throws": [["@B_javax#security#cert#CertificateExpiredException_E@", "if the certificate has expired with respect to the date supplied."], ["@B_javax#security#cert#CertificateNotYetValidException_E@", "if the certificate is not yet valid with respect to the date supplied."]], "SeeAlso": ["@B_javax#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Checks that the specified date is within the certificate's validity period. In other words, this determines whether the certificate would be valid at the specified date/time.", "history": "Added in API level 1", "FullName": "public abstract void checkValidity (Date date)"}, "getSigAlgOID()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm OID string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm OID string from the certificate. An OID is represented by a set of positive whole numbers separated by periods. For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1 with DSA signature algorithm, as per the PKIX part I. See @B_javax#security#cert#X509Certificate#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgOID ()"}, "checkValidity()": {"Returns": [], "Parameters": [], "Throws": [["@B_javax#security#cert#CertificateExpiredException_E@", "if the certificate has expired."], ["@B_javax#security#cert#CertificateNotYetValidException_E@", "if the certificate is not yet valid."]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the certificate is currently valid. It is if the current date and time are within the validity period given in the certificate. The validity period consists of two date/time values: the first and last dates (and times) on which the certificate is valid. It is defined in ASN.1 as:", "history": "Added in API level 1", "FullName": "public abstract void checkValidity ()"}, "X509Certificate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public X509Certificate ()"}, "getSubjectDN()": {"Returns": [["@B_java#security#Principal_E@", "a Principal whose name is the subject name."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#security#cert#X509Certificate#getIssuerDN_E@"], "Permissions": [], "Description": "Gets the subject (subject distinguished name) value from the certificate. The ASN.1 definition for this is: See @B_javax#security#cert#X509Certificate#getIssuerDN_E@ for Name and other relevant definitions.", "history": "Added in API level 1", "FullName": "public abstract Principal getSubjectDN ()"}, "getSigAlgParams()": {"Returns": [["byte[]", "the DER-encoded signature algorithm parameters, or null if no parameters are present."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm. In most cases, the signature algorithm parameters are null; the parameters are usually supplied with the certificate's public key. See @B_javax#security#cert#X509Certificate#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract byte[] getSigAlgParams ()"}, "getNotBefore()": {"Returns": [["@B_java#util#Date_E@", "the start date of the validity period."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Gets the notBefore date from the validity period of the certificate. The relevant ASN.1 definitions are:", "history": "Added in API level 1", "FullName": "public abstract Date getNotBefore ()"}, "getIssuerDN()": {"Returns": [["@B_java#security#Principal_E@", "a Principal whose name is the issuer distinguished name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the issuer (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: Name describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the AttributeValue component is determined by the AttributeType; in general it will be a directoryString. A directoryString is usually one of PrintableString, TeletexString or UniversalString.", "history": "Added in API level 1", "FullName": "public abstract Principal getIssuerDN ()"}, "getInstance(byte[])": {"Returns": [["@B_javax#security#cert#X509Certificate_E@", "an X509Certificate object initialized with the data from certData."]], "Parameters": [["byte[]", "byte: a byte array containing the DER-encoded certificate."]], "Throws": [["@B_javax#security#cert#CertificateException_E@", "if a class initialization or certificate parsing error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the cert.provider.x509v1 security property. Note: All X509Certificate subclasses must provide a constructor of the form:", "history": "Added in API level 1", "FullName": "public static final X509Certificate getInstance (byte[] certData)"}, "getNotAfter()": {"Returns": [["@B_java#util#Date_E@", "the end date of the validity period."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Gets the notAfter date from the validity period of the certificate. See @B_javax#security#cert#X509Certificate#getNotBefore_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract Date getNotAfter ()"}}, "Inheritance": ["@B_javax#security#cert#Certificate_E@"], "ClassName": "javax.security.cert.X509Certificate", "ClassDesc": "Abstract class for X.509 v1 certificates. This provides a standard way to access all the version 1 attributes of an X.509 certificate. Attributes that are specific to X.509 v2 or v3 are not available through this interface. Future API evolution will provide full access to complete X.509 v3 attributes. The basic X.509 format was defined by ISO/IEC and ANSI X9 and is described below in ASN.1: These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). These certificates are managed and vouched for by Certificate Authorities (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a \"root\" CA. The ASN.1 definition of tbsCertificate is: Here is sample code to instantiate an X.509 certificate: In either case, the code that instantiates an X.509 certificate consults the value of the cert.provider.x509v1 security property to locate the actual implementation or instantiates a default implementation. The cert.provider.x509v1 property is set to a default implementation for X.509 such as: The value of this cert.provider.x509v1 property has to be changed to instantiate another implementation. If this security property is not set, a default implementation will be used. Currently, due to possible security restrictions on access to Security properties, this value is looked up and cached at class initialization time and will fallback on a default implementation if the Security property is not accessible. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."}