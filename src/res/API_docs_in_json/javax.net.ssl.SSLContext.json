{"Functions": {"SSLContext(javax.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLContextSpi_E@", "SSLContextSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the protocol"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an SSLContext object.", "history": "Added in API level 1", "FullName": "protected SSLContext (SSLContextSpi contextSpi, Provider provider, String protocol)"}, "getDefault()": {"Returns": [["@B_javax#net#ssl#SSLContext_E@", "the default SSL context"]], "Parameters": [], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if the @B_javax#net#ssl#SSLContext#getInstance_E@ call fails"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the default SSL context. If a default context was set using the @B_javax#net#ssl#SSLContext#setDefault_E@ method, it is returned. Otherwise, the first call of this method triggers the call SSLContext.getInstance(\"Default\"). If successful, that object is made the default SSL context and returned. The default context is immediately usable and does not require", "history": "Added in API level 9", "FullName": "public static SSLContext getDefault ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#net#ssl#SSLContext_E@", "the new SSLContext object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SSLContextSpi implementation for the specified protocol is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."], ["@B_java#lang#NullPointerException_E@", "if protocol is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SSLContext object that implements the specified secure socket protocol. A new SSLContext object encapsulating the SSLContextSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static SSLContext getInstance (String protocol, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#net#ssl#SSLContext_E@", "the new SSLContext object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names."], ["@B_java#security#Provider_E@", "Provider: an instance of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SSLContextSpi implementation for the specified protocol is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."], ["@B_java#lang#NullPointerException_E@", "if protocol is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SSLContext object that implements the specified secure socket protocol. A new SSLContext object encapsulating the SSLContextSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static SSLContext getInstance (String protocol, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this SSLContext object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this SSLContext object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getServerSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLServerSocketFactory_E@", "the ServerSocketFactory object"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the init() has not been called"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a ServerSocketFactory object for this context.", "history": "Added in API level 1", "FullName": "public final SSLServerSocketFactory getServerSocketFactory ()"}, "getSupportedSSLParameters()": {"Returns": [["@B_javax#net#ssl#SSLParameters_E@", "a copy of the SSLParameters object with the supported settings"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the supported SSL parameters could not be obtained."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the SSLParameters indicating the supported settings for this SSL context. The parameters will always have the ciphersuites and protocols arrays set to non-null values.", "history": "Added in API level 9", "FullName": "public final SSLParameters getSupportedSSLParameters ()"}, "createSSLEngine(java.lang.String,int)": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the new SSLEngine object"]], "Parameters": [["@B_java#lang#String_E@", "String: the non-authoritative name of the host"], ["int", "int: the non-authoritative port"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the underlying provider does not implement the operation."], ["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the init() has not been called"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SSLEngine using this context using advisory peer information. Applications using this factory method are providing hints for an internal session reuse strategy. Some cipher suites (such as Kerberos) require remote hostname information, in which case peerHost needs to be specified.", "history": "Added in API level 1", "FullName": "public final SSLEngine createSSLEngine (String peerHost, int peerPort)"}, "getProtocol()": {"Returns": [["@B_java#lang#String_E@", "the protocol name of this SSLContext object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the protocol name of this SSLContext object. This is the same name that was specified in one of the getInstance calls that created this SSLContext object.", "history": "Added in API level 1", "FullName": "public final String getProtocol ()"}, "createSSLEngine()": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the SSLEngine object"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the underlying provider does not implement the operation."], ["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the init() has not been called"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SSLEngine using this context. Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, @B_javax#net#ssl#SSLContext#createSSLEngine_E@ should be used instead. Some cipher suites (such as Kerberos) require remote hostname information, in which case this factory method should not be used.", "history": "Added in API level 1", "FullName": "public final SSLEngine createSSLEngine ()"}, "getSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "the SocketFactory object"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the init() has not been called"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a SocketFactory object for this context.", "history": "Added in API level 1", "FullName": "public final SSLSocketFactory getSocketFactory ()"}, "createSSLEngine(java.lang.String, int)": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the new SSLEngine object"]], "Parameters": [["@B_java#lang#String_E@", "String: the non-authoritative name of the host"], ["int", "int: the non-authoritative port"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the underlying provider does not implement the operation."], ["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the init() has not been called"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SSLEngine using this context using advisory peer information. Applications using this factory method are providing hints for an internal session reuse strategy. Some cipher suites (such as Kerberos) require remote hostname information, in which case peerHost needs to be specified.", "history": "added in API level 1", "FullName": "public final SSLEngine createSSLEngine (String peerHost, int peerPort)"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#net#ssl#SSLContext_E@", "the new SSLContext object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a SSLContextSpi implementation for the specified protocol."], ["@B_java#lang#NullPointerException_E@", "if protocol is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SSLContext object that implements the specified secure socket protocol. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SSLContext object encapsulating the SSLContextSpi implementation from the first Provider that supports the specified protocol is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static SSLContext getInstance (String protocol)"}, "getDefaultSSLParameters()": {"Returns": [["@B_javax#net#ssl#SSLParameters_E@", "a copy of the SSLParameters object with the default settings"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the default SSL parameters could not be obtained."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the SSLParameters indicating the default settings for this SSL context. The parameters will always have the ciphersuites and protocols arrays set to non-null values.", "history": "Added in API level 9", "FullName": "public final SSLParameters getDefaultSSLParameters ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#net#ssl#SSLContext_E@", "the new SSLContext object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested protocol. See the SSLContext section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard protocol names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SSLContextSpi implementation for the specified protocol is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."], ["@B_java#lang#NullPointerException_E@", "if protocol is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SSLContext object that implements the specified secure socket protocol. A new SSLContext object encapsulating the SSLContextSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static SSLContext getInstance (String protocol, String provider)"}, "setDefault(javax.net.ssl.SSLContext)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLContext_E@", "SSLContext: the SSLContext"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if context is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method does not allow SSLPermission(\"setDefaultSSLContext\")"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the default SSL context. It will be returned by subsequent calls to @B_javax#net#ssl#SSLContext#getDefault_E@. The default context must be immediately usable and not require Developers are strongly discouraged from changing the default SSLContext as it is used as the Android default for secure communication by APIs like @B_javax#net#ssl#SSLSocketFactory#getDefault_E@, @B_javax#net#ssl#SSLServerSocketFactory#getDefault_E@ and @B_javax#net#ssl#HttpsURLConnection_E@.", "history": "Added in API level 9", "FullName": "public static void setDefault (SSLContext context)"}, "getClientSessionContext()": {"Returns": [["@B_javax#net#ssl#SSLSessionContext_E@", "client session context bound to this SSL context"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets. This context may be unavailable in some environments, in which case this method returns null. For example, when the underlying SSL provider does not provide an implementation of SSLSessionContext interface, this method returns null. A non-null session context is returned otherwise.", "history": "Added in API level 1", "FullName": "public final SSLSessionContext getClientSessionContext ()"}, "init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#KeyManager_E@", "KeyManager: the sources of authentication keys or null"], ["@B_javax#net#ssl#TrustManager_E@", "TrustManager: the sources of peer authentication trust decisions or null"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this generator or null"]], "Throws": [["@B_java#security#KeyManagementException_E@", "if this operation fails"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this context. Either of the first two parameters may be null in which case the installed security providers will be searched for the highest priority implementation of the appropriate factory. Likewise, the secure random parameter may be null in which case the default implementation will be used. Only the first instance of a particular key and/or trust manager implementation type in the array is used. (For example, only the first javax.net.ssl.X509KeyManager in the array will be used.)", "history": "Added in API level 1", "FullName": "public final void init (KeyManager[] km, TrustManager[] tm, SecureRandom random)"}, "getServerSessionContext()": {"Returns": [["@B_javax#net#ssl#SSLSessionContext_E@", "server session context bound to this SSL context"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the server session context, which represents the set of SSL sessions available for use during the handshake phase of server-side SSL sockets. This context may be unavailable in some environments, in which case this method returns null. For example, when the underlying SSL provider does not provide an implementation of SSLSessionContext interface, this method returns null. A non-null session context is returned otherwise.", "history": "Added in API level 1", "FullName": "public final SSLSessionContext getServerSessionContext ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SSLContext", "ClassDesc": "Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngines. This class is initialized with an optional set of key and trust managers and source of secure random bytes. Android provides the following SSLContext protocols:"}