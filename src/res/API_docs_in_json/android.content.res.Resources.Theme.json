{"Functions": {"getAttributeResolutionStack(int,int,int)": {"Returns": [["int[]", "ordered list of resource ID that are considered when resolving attribute values. This value will never be null."]], "Parameters": [["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies defaults values for the TypedArray. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the TypedArray, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of an explicit style resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ordered list of resource ID that are considered when resolving attribute values when making an equivalent call to @B_android#content#res#Resources#Theme#obtainStyledAttributes_E@ . The list will include a set of explicit styles (explicitStyleRes and it will include the default styles (defStyleAttr and defStyleRes).", "history": "Added in API level 29", "FullName": "public int[] getAttributeResolutionStack (int defStyleAttr, int defStyleRes, int explicitStyleRes)"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "Resources to which this theme belongs."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the resources to which this theme belongs.", "history": "Added in API level 21", "FullName": "public Resources getResources ()"}, "applyStyle(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The resource ID of a style resource from which to obtain attribute values."], ["boolean", "boolean: If true, values in the style resource will always be used in the theme; otherwise, they will only be used if not already defined in the theme."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Place new attribute values into the theme. The style resource specified by The semantics of this function depends on the", "history": "Added in API level 1", "FullName": "public void applyStyle (int resId, boolean force)"}, "resolveAttribute(int,android.util.TypedValue,boolean)": {"Returns": [["boolean", "boolean Returns true if the attribute was found and outValue is valid, else false."]], "Parameters": [["int", "int: The resource identifier of the desired theme attribute."], ["@B_android#util#TypedValue_E@", "TypedValue: Filled in with the ultimate resource value supplied by the attribute."], ["boolean", "boolean: If true, resource references will be walked; if false, outValue may be a TYPE_REFERENCE. In either case, it will never be a TYPE_ATTRIBUTE."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the value of an attribute in the Theme. The contents of @B_android#content#res#Resources#getValue_E@.", "history": "Added in API level 1", "FullName": "public boolean resolveAttribute (int resid, TypedValue outValue, boolean resolveRefs)"}, "dump(int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The log priority to use."], ["@B_java#lang#String_E@", "String: The log tag to use."], ["@B_java#lang#String_E@", "String: Text to prefix each line printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print contents of this theme out to the log. For debugging only.", "history": "Added in API level 1", "FullName": "public void dump (int priority, String tag, String prefix)"}, "getExplicitStyle(android.util.AttributeSet)": {"Returns": [["int", "The resource ID for the style specified using style=\"...\" in the @B_android#util#AttributeSet_E@'s backing XML element or @B_android#content#res#Resources#ID_NULL_E@ otherwise if not specified or otherwise not applicable."]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: The base set of attribute values. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the resource ID for the style specified using style=\"...\" in the @B_android#util#AttributeSet_E@'s backing XML element or @B_android#content#res#Resources#ID_NULL_E@ otherwise if not specified or otherwise not applicable. Each @B_android#view#View_E@ can have an explicit style specified in the layout file. This style is used first during the @B_android#view#View_E@ attribute resolution, then if an attribute is not defined there the resource system looks at default style and theme as fallbacks.", "history": "Added in API level 29", "FullName": "public int getExplicitStyle (AttributeSet set)"}, "obtainStyledAttributes(int[])": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it. This value will never be null."]], "Parameters": [["int[]", "int: The desired attributes. These attribute IDs must be sorted in ascending order. This value must never be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#obtainAttributes_E@", "@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Return a TypedArray holding the values defined by Be sure to call @B_android#content#res#TypedArray#recycle_E@ when you are done with the array.", "history": "Added in API level 1", "FullName": "public TypedArray obtainStyledAttributes (int[] attrs)"}, "obtainStyledAttributes(int, int[])": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it."]], "Parameters": [["int", "int: The desired style resource."], ["int[]", "int: The desired attributes in the style. These attribute IDs must be sorted in ascending order."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#obtainAttributes_E@", "@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Return a TypedArray holding the values defined by the style resource Be sure to call @B_android#content#res#TypedArray#recycle_E@ when you are done with the array.", "history": "added in API level 1", "FullName": "public TypedArray obtainStyledAttributes (int resId, int[] attrs)"}, "rebase()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rebases the theme against the parent Resource object's current configuration by re-applying the styles passed to @B_android#content#res#Resources#Theme#applyStyle_E@.", "history": "Added in API level 29", "FullName": "public void rebase ()"}, "obtainStyledAttributes(android.util.AttributeSet,int[],int,int)": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it."]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: The base set of attribute values. May be null. This value may be null."], ["int[]", "int: The desired attributes to be retrieved. These attribute IDs must be sorted in ascending order. This value must never be null."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies defaults values for the TypedArray. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the TypedArray, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": ["@B_android#content#res#Resources#obtainAttributes_E@", "@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Return a TypedArray holding the attribute values in Be sure to call @B_android#content#res#TypedArray#recycle_E@ when you are done with the array. When determining the final value of a particular attribute, there are four inputs that come into play: Each of these inputs is considered in-order, with the first listed taking precedence over the following ones. In other words, if in the AttributeSet you have supplied <Button textColor=\"#ff000000\">, then the button's text will always be black, regardless of what is specified in any of the styles.", "history": "Added in API level 1", "FullName": "public TypedArray obtainStyledAttributes (AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)"}, "applyStyle(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The resource ID of a style resource from which to obtain attribute values."], ["boolean", "boolean: If true, values in the style resource will always be used in the theme; otherwise, they will only be used if not already defined in the theme."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Place new attribute values into the theme. The style resource specified by The semantics of this function depends on the", "history": "added in API level 1", "FullName": "public void applyStyle (int resId, boolean force)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "getChangingConfigurations()": {"Returns": [["int", "a bit mask of configuration changes, as defined by @B_android#content#pm#ActivityInfo_E@ Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ActivityInfo_E@"], "Permissions": [], "Description": "Returns a bit mask of configuration changes that will impact this theme (and thus require completely reloading it).", "history": "Added in API level 23", "FullName": "public int getChangingConfigurations ()"}, "setTo(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The existing Theme to copy from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this theme to hold the same contents as the theme", "history": "Added in API level 1", "FullName": "public void setTo (Resources.Theme other)"}, "getDrawable(int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return a drawable object associated with a particular resource ID and styled for the Theme.", "history": "Added in API level 21", "FullName": "public Drawable getDrawable (int id)"}, "obtainStyledAttributes(int,int[])": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it. This value will never be null."]], "Parameters": [["int", "int: The desired style resource."], ["int[]", "int: The desired attributes in the style. These attribute IDs must be sorted in ascending order. This value must never be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#obtainAttributes_E@", "@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Return a TypedArray holding the values defined by the style resource Be sure to call @B_android#content#res#TypedArray#recycle_E@ when you are done with the array.", "history": "Added in API level 1", "FullName": "public TypedArray obtainStyledAttributes (int resId, int[] attrs)"}, "dump(int, java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The log priority to use."], ["@B_java#lang#String_E@", "String: The log tag to use."], ["@B_java#lang#String_E@", "String: Text to prefix each line printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print contents of this theme out to the log. For debugging only.", "history": "added in API level 1", "FullName": "public void dump (int priority, String tag, String prefix)"}}, "Inheritance": [], "ClassName": "android.content.res.Resources.Theme", "ClassDesc": "This class holds the current attribute values for a particular theme. In other words, a Theme is a set of values for resource attributes; these are used in conjunction with @B_android#content#res#TypedArray_E@ to resolve the final value for an attribute. The Theme's attributes come into play in two ways: (1) a styled attribute can explicit reference a value in the theme through the \"?themeAttribute\" syntax; (2) if no value has been defined for a particular styled attribute, as a last resort we will try to find that attribute's value in the Theme. You will normally use the @B_android#content#res#Resources#Theme#obtainStyledAttributes_E@ APIs to retrieve XML attributes with style and theme information applied."}