{"Functions": {"addIdleHandler(android.os.MessageQueue.IdleHandler)": {"Returns": [], "Parameters": [["@B_android#os#MessageQueue#IdleHandler_E@", "MessageQueue.IdleHandler: The IdleHandler to be added. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new @B_android#os#MessageQueue#IdleHandler_E@ to this message queue. This may be removed automatically for you by returning false from @B_android#os#MessageQueue#IdleHandler#queueIdle_E@ when it is invoked, or explicitly removing it with @B_android#os#MessageQueue#removeIdleHandler_E@. This method is safe to call from any thread.", "history": "Added in API level 1", "FullName": "public void addIdleHandler (MessageQueue.IdleHandler handler)"}, "removeOnFileDescriptorEventListener(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor whose listener will be unregistered. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#MessageQueue#OnFileDescriptorEventListener_E@", "@B_android#os#MessageQueue#addOnFileDescriptorEventListener_E@"], "Permissions": [], "Description": "Removes a file descriptor listener. This method does nothing if no listener has been registered for the specified file descriptor.", "history": "Added in API level 23", "FullName": "public void removeOnFileDescriptorEventListener (FileDescriptor fd)"}, "addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue.OnFileDescriptorEventListener)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor for which a listener will be registered. This value must never be null."], ["int", "int: The set of events to receive: a combination of the @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_INPUT_E@, @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_OUTPUT_E@, and @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_ERROR_E@ event masks. If the requested set of events is zero, then the listener is unregistered. Value is either 0 or a combination of @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_INPUT_E@, @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_OUTPUT_E@, and @B_android#os#MessageQueue#OnFileDescriptorEventListener#EVENT_ERROR_E@"], ["@B_android#os#MessageQueue#OnFileDescriptorEventListener_E@", "MessageQueue.OnFileDescriptorEventListener: The listener to invoke when file descriptor events occur. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#MessageQueue#OnFileDescriptorEventListener_E@", "@B_android#os#MessageQueue#removeOnFileDescriptorEventListener_E@"], "Permissions": [], "Description": "Adds a file descriptor listener to receive notification when file descriptor related events occur. If the file descriptor has already been registered, the specified events and listener will replace any that were previously associated with it. It is not possible to set more than one listener per file descriptor. It is important to always unregister the listener when the file descriptor is no longer of use.", "history": "Added in API level 23", "FullName": "public void addOnFileDescriptorEventListener (FileDescriptor fd, int events, MessageQueue.OnFileDescriptorEventListener listener)"}, "isIdle()": {"Returns": [["boolean", "True if the looper is idle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the looper has no pending messages which are due to be processed. This method is safe to call from any thread.", "history": "Added in API level 23", "FullName": "public boolean isIdle ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "removeIdleHandler(android.os.MessageQueue.IdleHandler)": {"Returns": [], "Parameters": [["@B_android#os#MessageQueue#IdleHandler_E@", "MessageQueue.IdleHandler: The IdleHandler to be removed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove an @B_android#os#MessageQueue#IdleHandler_E@ from the queue that was previously added with @B_android#os#MessageQueue#addIdleHandler_E@. If the given object is not currently in the idle list, nothing is done. This method is safe to call from any thread.", "history": "Added in API level 1", "FullName": "public void removeIdleHandler (MessageQueue.IdleHandler handler)"}}, "Inheritance": [], "ClassName": "android.os.MessageQueue", "ClassDesc": "Low-level class holding the list of messages to be dispatched by a @B_android#os#Looper_E@. Messages are not added directly to a MessageQueue, but rather through @B_android#os#Handler_E@ objects associated with the Looper. You can retrieve the MessageQueue for the current thread with @B_android#os#Looper#myQueue_E@."}