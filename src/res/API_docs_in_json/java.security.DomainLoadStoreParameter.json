{"Functions": {"getConfiguration()": {"Returns": [["@B_java#net#URI_E@", "the identifier for the configuration data"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the identifier for the domain configuration data.", "history": "Added in API level 26", "FullName": "public URI getConfiguration ()"}, "getProtectionParams()": {"Returns": [["@B_java#util#Map_E@", "an unmodifiable map of keystore names to protection parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the keystore protection parameters for keystores in this domain.", "history": "Added in API level 26", "FullName": "public Map<String, KeyStore.ProtectionParameter> getProtectionParams ()"}, "getProtectionParameter()": {"Returns": [["@B_java#security#KeyStore#ProtectionParameter_E@", "always returns null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the keystore protection parameters for this domain. Keystore domains do not support a protection parameter.", "history": "Added in API level 26", "FullName": "public KeyStore.ProtectionParameter getProtectionParameter ()"}, "DomainLoadStoreParameter(java.net.URI,java.util.Map<java.lang.String,java.security.KeyStore.ProtectionParameter>)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: identifier for the domain configuration data. The name of the target domain should be specified in the java.net.URI fragment component when it is necessary to distinguish between several domain configurations at the same location."], ["@B_java#util#Map_E@", "Map: the map from keystore name to the parameter used to protect keystore data. A java.util.Collections.EMPTY_MAP should be used when protection parameters are not required or when they have been specified by properties in the domain configuration data. It is cloned to prevent subsequent modification."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if configuration or protectionParams is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DomainLoadStoreParameter for a keystore domain with the parameters used to protect keystore data.", "history": "Added in API level 26", "FullName": "public DomainLoadStoreParameter (URI configuration, Map<String, KeyStore.ProtectionParameter> protectionParams)"}}, "Inheritance": [], "ClassName": "java.security.DomainLoadStoreParameter", "ClassDesc": "Configuration data that specifies the keystores in a keystore domain. A keystore domain is a collection of keystores that are presented as a single logical keystore. The configuration data is used during KeyStore @B_java#security#KeyStore#load_E@ and @B_java#security#KeyStore#store_E@ operations. The following syntax is supported for configuration data: domainName and keystoreName are identifiers and property is a key/value pairing. The key and value are separated by an 'equals' symbol and the value is enclosed in double quotes. A property value may be either a printable string or a binary string of colon-separated pairs of hexadecimal digits. Multi-valued properties are represented as a comma-separated list of values, enclosed in square brackets. See @B_java#util#Arrays#toString_E@. To ensure that keystore entries are uniquely identified, each entry's alias is prefixed by its keystoreName followed by the entry name separator and each keystoreName must be unique within its domain. Entry name prefixes are omitted when storing a keystore. Properties are context-sensitive: properties that apply to all the keystores in a domain are located in the domain clause, and properties that apply only to a specific keystore are located in that keystore's clause. Unless otherwise specified, a property in a keystore clause overrides a property of the same name in the domain clause. All property names are case-insensitive. The following properties are supported: For example, configuration data for a simple keystore domain comprising three keystores is shown below:"}