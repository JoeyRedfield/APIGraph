{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "setReferenceCounted(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to make the wake lock reference counted, false to make the wake lock non-reference counted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this WakeLock is reference counted. Wake locks are reference counted by default. If a wake lock is reference counted, then each call to @B_android#os#PowerManager#WakeLock#acquire_E@ must be balanced by an equal number of calls to @B_android#os#PowerManager#WakeLock#release_E@. If a wake lock is not reference counted, then one call to @B_android#os#PowerManager#WakeLock#release_E@ is sufficient to undo the effect of all previous calls to @B_android#os#PowerManager#WakeLock#acquire_E@.", "history": "Added in API level 1", "FullName": "public void setReferenceCounted (boolean value)"}, "isHeld()": {"Returns": [["boolean", "True if the wake lock is held."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the wake lock has been acquired but not yet released.", "history": "Added in API level 1", "FullName": "public boolean isHeld ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the wake lock. This method releases your claim to the CPU or screen being on. The screen may turn off shortly after you release the wake lock, or it may not if there are other wake locks still held.", "history": "Added in API level 1", "FullName": "public void release ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "setWorkSource(android.os.WorkSource)": {"Returns": [], "Parameters": [["@B_android#os#WorkSource_E@", "WorkSource: The work source, or null if none."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the work source associated with the wake lock. The work source is used to determine on behalf of which application the wake lock is being held. This is useful in the case where a service is performing work on behalf of an application so that the cost of that work can be accounted to the application. Make sure to follow the tag naming convention when using WorkSource to make it easier for app developers to understand wake locks attributed to them. See @B_android#os#PowerManager#newWakeLock_E@ documentation.", "history": "Added in API level 9", "FullName": "public void setWorkSource (WorkSource ws)"}, "release(int)": {"Returns": [], "Parameters": [["int", "int: Combination of flag values to modify the release behavior. Currently only @B_android#os#PowerManager#RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY_E@ is supported. Passing 0 is equivalent to calling @B_android#os#PowerManager#WakeLock#release_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the wake lock with flags to modify the release behavior. This method releases your claim to the CPU or screen being on. The screen may turn off shortly after you release the wake lock, or it may not if there are other wake locks still held.", "history": "Added in API level 21", "FullName": "public void release (int flags)"}, "acquire()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the wake lock. Ensures that the device is on at the level requested when the wake lock was created.", "history": "Added in API level 1", "FullName": "public void acquire ()"}, "acquire(long)": {"Returns": [], "Parameters": [["long", "long: The timeout after which to release the wake lock, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the wake lock with a timeout. Ensures that the device is on at the level requested when the wake lock was created. The lock will be released after the given timeout expires.", "history": "Added in API level 1", "FullName": "public void acquire (long timeout)"}}, "Inheritance": [], "ClassName": "android.os.PowerManager.WakeLock", "ClassDesc": "A wake lock is a mechanism to indicate that your application needs to have the device stay on. Any application using a WakeLock must request the android.permission.WAKE_LOCK permission in an <uses-permission> element of the application's manifest. Obtain a wake lock by calling @B_android#os#PowerManager#newWakeLock_E@. Call @B_android#os#PowerManager#WakeLock#acquire_E@ to acquire the wake lock and force the device to stay on at the level that was requested when the wake lock was created. Call @B_android#os#PowerManager#WakeLock#release_E@ when you are done and don't need the lock anymore. It is very important to do this as soon as possible to avoid running down the device's battery excessively."}