{"Functions": {"getFillBefore()": {"Returns": [["boolean", "true if the animation applies its transformation before it starts"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If fillBefore is true, this animation will apply its transformation before the start time of the animation. If fillBefore is false and @B_android#view#animation#Animation#isFillEnabled_E@ is true, the transformation will not be applied until the start time of the animation.", "history": "Added in API level 1", "FullName": "public boolean getFillBefore ()"}, "isFillEnabled()": {"Returns": [["boolean", "true if the animation will take fillBefore into account"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If fillEnabled is true, this animation will apply the value of fillBefore.", "history": "Added in API level 3", "FullName": "public boolean isFillEnabled ()"}, "getTransformation(long,android.view.animation.Transformation,float)": {"Returns": [["boolean", "True if the animation is still running"]], "Parameters": [["long", "long: Where we are in the animation. This is wall clock time."], ["@B_android#view#animation#Transformation_E@", "Transformation: A transformation object that is provided by the caller and will be filled in by the animation."], ["float", "float: Scaling factor to apply to any inputs to the transform operation, such pivot points being rotated or scaled around."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.", "history": "Added in API level 11", "FullName": "public boolean getTransformation (long currentTime, Transformation outTransformation, float scale)"}, "scaleCurrentDuration(float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale the duration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "How much to scale the duration by.", "history": "Added in API level 1", "FullName": "public void scaleCurrentDuration (float scale)"}, "willChangeTransformationMatrix()": {"Returns": [["boolean", "true if this animation will change the transformation matrix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this animation will affect the transformation matrix. For instance, a fade animation will not affect the matrix whereas a scale animation will.", "history": "Added in API level 1", "FullName": "public boolean willChangeTransformationMatrix ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to start the animation the first time @B_android#view#animation#Animation#getTransformation_E@ is invoked.", "history": "Added in API level 1", "FullName": "public void start ()"}, "willChangeBounds()": {"Returns": [["boolean", "true if this animation will change the view's bounds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this animation will affect the bounds of the animated view. For instance, a fade animation will not affect the bounds whereas a 200% scale animation will.", "history": "Added in API level 1", "FullName": "public boolean willChangeBounds ()"}, "startNow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to start the animation at the current time in milliseconds.", "history": "Added in API level 1", "FullName": "public void startNow ()"}, "setRepeatMode(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#view#animation#Animation#RESTART_E@ or @B_android#view#animation#Animation#REVERSE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines what this animation should do when it reaches the end. This setting is applied only when the repeat count is either greater than 0 or @B_android#view#animation#Animation#INFINITE_E@. Defaults to @B_android#view#animation#Animation#RESTART_E@.", "history": "Added in API level 1", "FullName": "public void setRepeatMode (int repeatMode)"}, "setDetachWallpaper(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the wallpaper should be detached from the animation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All window animations are running with detached wallpaper. If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs. That is, the animation will only be applied to the window, and the wallpaper behind it will remain static.", "history": "Added in API level 5 Deprecated in API level 29", "FullName": "public void setDetachWallpaper (boolean detachWallpaper)"}, "restrictDuration(long)": {"Returns": [], "Parameters": [["long", "long: The maximum duration the animation is allowed to run."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensure that the duration that this animation will run is not longer than", "history": "Added in API level 1", "FullName": "public void restrictDuration (long durationMillis)"}, "getStartTime()": {"Returns": [["long", "the time in milliseconds when the animation should start or @B_android#view#animation#Animation#START_ON_FIRST_FRAME_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start. If the animation has not startet yet, this method might return @B_android#view#animation#Animation#START_ON_FIRST_FRAME_E@.", "history": "Added in API level 1", "FullName": "public long getStartTime ()"}, "ensureInterpolator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gurantees that this animation has an interpolator. Will use a AccelerateDecelerateInterpolator is nothing else was specified.", "history": "Added in API level 1", "FullName": "protected void ensureInterpolator ()"}, "setRepeatCount(int)": {"Returns": [], "Parameters": [["int", "int: the number of times the animation should be repeated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets how many times the animation should be repeated. If the repeat count is 0, the animation is never repeated. If the repeat count is greater than 0 or @B_android#view#animation#Animation#INFINITE_E@, the repeat mode will be taken into account. The repeat count is 0 by default.", "history": "Added in API level 1", "FullName": "public void setRepeatCount (int repeatCount)"}, "setDuration(long)": {"Returns": [], "Parameters": [["long", "long: Duration in milliseconds"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the duration is < 0"]], "SeeAlso": [], "Permissions": [], "Description": "How long this animation should last. The duration cannot be negative.", "history": "Added in API level 1", "FullName": "public void setDuration (long durationMillis)"}, "getStartOffset()": {"Returns": [["long", "the start offset in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start, relative to StartTime", "history": "Added in API level 1", "FullName": "public long getStartOffset ()"}, "clone()": {"Returns": [["@B_android#view#animation#Animation_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "protected Animation clone ()"}, "getRepeatMode()": {"Returns": [["int", "either one of @B_android#view#animation#Animation#REVERSE_E@ or @B_android#view#animation#Animation#RESTART_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines what this animation should do when it reaches the end.", "history": "Added in API level 1", "FullName": "public int getRepeatMode ()"}, "getBackgroundColor()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the background color behind the animation.", "history": "Added in API level 12", "FullName": "public int getBackgroundColor ()"}, "Animation(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: the set of attributes holding the animation parameters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new animation whose parameters come from the specified context and attributes set.", "history": "Added in API level 1", "FullName": "public Animation (Context context, AttributeSet attrs)"}, "getZAdjustment()": {"Returns": [["int", "Returns one of @B_android#view#animation#Animation#ZORDER_NORMAL_E@, @B_android#view#animation#Animation#ZORDER_TOP_E@, or @B_android#view#animation#Animation#ZORDER_BOTTOM_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Z ordering mode to use while running the animation as previously set by @B_android#view#animation#Animation#setZAdjustment_E@.", "history": "Added in API level 1", "FullName": "public int getZAdjustment ()"}, "setStartOffset(long)": {"Returns": [], "Parameters": [["long", "long: When this Animation should start, in milliseconds from the start time of the root AnimationSet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start relative to the start time. This is most useful when composing complex animations using an @B_android#view#animation#AnimationSet_E@ where some of the animations components start at different times.", "history": "Added in API level 1", "FullName": "public void setStartOffset (long startOffset)"}, "getTransformation(long,android.view.animation.Transformation)": {"Returns": [["boolean", "True if the animation is still running"]], "Parameters": [["long", "long: Where we are in the animation. This is wall clock time."], ["@B_android#view#animation#Transformation_E@", "Transformation: A transformation object that is provided by the caller and will be filled in by the animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.", "history": "Added in API level 1", "FullName": "public boolean getTransformation (long currentTime, Transformation outTransformation)"}, "hasEnded()": {"Returns": [["boolean", "true if the animation has ended, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this animation has ended or not.", "history": "Added in API level 1", "FullName": "public boolean hasEnded ()"}, "setInterpolator(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment"], ["int", "int: The resource identifier of the interpolator to load"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the acceleration curve for this animation. The interpolator is loaded as a resource from the specified context.", "history": "added in API level 1", "FullName": "public void setInterpolator (Context context, int resID)"}, "setAnimationListener(android.view.animation.Animation.AnimationListener)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation#AnimationListener_E@", "Animation.AnimationListener: the animation listener to be notified"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Binds an animation listener to this animation. The animation listener is notified of animation events such as the end of the animation or the repetition of the animation.", "history": "Added in API level 1", "FullName": "public void setAnimationListener (Animation.AnimationListener listener)"}, "setFillEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the animation should take the value of fillBefore into account"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#setFillBefore_E@", "@B_android#view#animation#Animation#setFillAfter_E@"], "Permissions": [], "Description": "If fillEnabled is true, the animation will apply the value of fillBefore. Otherwise, fillBefore is ignored and the animation transformation is always applied until the animation ends.", "history": "Added in API level 3", "FullName": "public void setFillEnabled (boolean fillEnabled)"}, "resolveSize(int,float,int,int)": {"Returns": [["float", "The dimension to use for the animation"]], "Parameters": [["int", "int: One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT."], ["float", "float: The dimension associated with the type parameter"], ["int", "int: The size of the object being animated"], ["int", "int: The size of the parent of the object being animated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the information in the description of a size to an actual dimension", "history": "Added in API level 1", "FullName": "protected float resolveSize (int type, float value, int size, int parentSize)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "getDuration()": {"Returns": [["long", "the duration in milliseconds of the animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "How long this animation should last", "history": "Added in API level 1", "FullName": "public long getDuration ()"}, "initialize(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}, "hasStarted()": {"Returns": [["boolean", "true if the animation has started, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this animation has started or not.", "history": "Added in API level 1", "FullName": "public boolean hasStarted ()"}, "setBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: The background color. If 0, no background. Currently must be black, with any desired alpha level."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set background behind animation.", "history": "Added in API level 12", "FullName": "public void setBackgroundColor (int bg)"}, "isInitialized()": {"Returns": [["boolean", "Has this animation been initialized."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#initialize_E@"], "Permissions": [], "Description": "Whether or not the animation has been initialized.", "history": "Added in API level 1", "FullName": "public boolean isInitialized ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#reset_E@", "@B_android#view#animation#Animation#start_E@", "@B_android#view#animation#Animation#startNow_E@"], "Permissions": [], "Description": "Cancel the animation. Cancelling an animation invokes the animation listener, if set, to notify the end of the animation. If you cancel an animation manually, you must call @B_android#view#animation#Animation#reset_E@ before starting the animation again.", "history": "Added in API level 8", "FullName": "public void cancel ()"}, "getScaleFactor()": {"Returns": [["float", "float The scale factor that should be applied to pre-scaled values in an Animation such as the pivot points in @B_android#view#animation#ScaleAnimation_E@ and @B_android#view#animation#RotateAnimation_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The scale factor is set by the call to getTransformation. Overrides of @B_android#view#animation#Animation#getTransformation_E@ will get this value directly. Overrides of @B_android#view#animation#Animation#applyTransformation_E@ can call this method to get the value.", "history": "Added in API level 11", "FullName": "protected float getScaleFactor ()"}, "setStartTime(long)": {"Returns": [], "Parameters": [["long", "long: the start time in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start. When the start time is set to @B_android#view#animation#Animation#START_ON_FIRST_FRAME_E@, the animation will start the first time @B_android#view#animation#Animation#getTransformation_E@ is invoked. The time passed to this method should be obtained by calling @B_android#view#animation#AnimationUtils#currentAnimationTimeMillis_E@ instead of @B_java#lang#System#currentTimeMillis_E@.", "history": "Added in API level 1", "FullName": "public void setStartTime (long startTimeMillis)"}, "setInterpolator(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment"], ["int", "int: The resource identifier of the interpolator to load"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the acceleration curve for this animation. The interpolator is loaded as a resource from the specified context.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Context context, int resID)"}, "getRepeatCount()": {"Returns": [["int", "the number of times the animation should repeat, or @B_android#view#animation#Animation#INFINITE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines how many times the animation should repeat. The default value is 0.", "history": "Added in API level 1", "FullName": "public int getRepeatCount ()"}, "computeDurationHint()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute a hint at how long the entire animation may last, in milliseconds. Animations can be written to cause themselves to run for a different duration than what is computed here, but generally this should be accurate.", "history": "Added in API level 3", "FullName": "public long computeDurationHint ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#initialize_E@"], "Permissions": [], "Description": "Reset the initialization state of this animation.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "resolveSize(int, float, int, int)": {"Returns": [["float", "The dimension to use for the animation"]], "Parameters": [["int", "int: One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT."], ["float", "float: The dimension associated with the type parameter"], ["int", "int: The size of the object being animated"], ["int", "int: The size of the parent of the object being animated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the information in the description of a size to an actual dimension", "history": "added in API level 1", "FullName": "protected float resolveSize (int type, float value, int size, int parentSize)"}, "setFillAfter(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the animation should apply its transformation after it ends"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#setFillEnabled_E@"], "Permissions": [], "Description": "If fillAfter is true, the transformation that this animation performed will persist when it is finished. Defaults to false if not set. Note that this applies to individual animations and when using an @B_android#view#animation#AnimationSet_E@ to chain animations.", "history": "Added in API level 1", "FullName": "public void setFillAfter (boolean fillAfter)"}, "Animation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new animation with a duration of 0ms, the default interpolator, with fillBefore set to true and fillAfter set to false", "history": "Added in API level 1", "FullName": "public Animation ()"}, "applyTransformation(float,android.view.animation.Transformation)": {"Returns": [], "Parameters": [["float", "float: The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function."], ["@B_android#view#animation#Transformation_E@", "Transformation: The Transformation object to fill in with the current transforms."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper for getTransformation. Subclasses should implement this to apply their transforms given an interpolation value. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.", "history": "Added in API level 1", "FullName": "protected void applyTransformation (float interpolatedTime, Transformation t)"}, "setZAdjustment(int)": {"Returns": [], "Parameters": [["int", "int: The desired mode, one of @B_android#view#animation#Animation#ZORDER_NORMAL_E@, @B_android#view#animation#Animation#ZORDER_TOP_E@, or @B_android#view#animation#Animation#ZORDER_BOTTOM_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the Z ordering mode to use while running the animation.", "history": "Added in API level 1", "FullName": "public void setZAdjustment (int zAdjustment)"}, "initialize(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "Added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}, "getFillAfter()": {"Returns": [["boolean", "true if the animation applies its transformation after it ends"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If fillAfter is true, this animation will apply its transformation after the end time of the animation.", "history": "Added in API level 1", "FullName": "public boolean getFillAfter ()"}, "setFillBefore(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the animation should apply its transformation before it starts"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#setFillEnabled_E@"], "Permissions": [], "Description": "If fillBefore is true, this animation will apply its transformation before the start time of the animation. Defaults to true if @B_android#view#animation#Animation#setFillEnabled_E@ is not set to true. Note that this applies when using an @B_android#view#animation#AnimationSet_E@ to chain animations. The transformation is not applied before the AnimationSet itself starts.", "history": "Added in API level 1", "FullName": "public void setFillBefore (boolean fillBefore)"}, "getDetachWallpaper()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All window animations are running with detached wallpaper. Return value of @B_android#view#animation#Animation#setDetachWallpaper_E@.", "history": "Added in API level 5 Deprecated in API level 29", "FullName": "public boolean getDetachWallpaper ()"}, "getInterpolator()": {"Returns": [["@B_android#view#animation#Interpolator_E@", "the @B_android#view#animation#Interpolator_E@ associated to this animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the acceleration curve type for this animation.", "history": "Added in API level 1", "FullName": "public Interpolator getInterpolator ()"}, "setInterpolator(android.view.animation.Interpolator)": {"Returns": [], "Parameters": [["@B_android#view#animation#Interpolator_E@", "Interpolator: The interpolator which defines the acceleration curve"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the acceleration curve for this animation. Defaults to a linear interpolation.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Interpolator i)"}}, "Inheritance": [], "ClassName": "android.view.animation.Animation", "ClassDesc": "Abstraction for an Animation that can be applied to Views, Surfaces, or other objects. See the @B_android#view#animation#package-summary_E@."}