{"Functions": {"set(T,long)": {"Returns": [], "Parameters": [["T", "T: An object whose field to set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet.", "history": "Added in API level 1", "FullName": "public abstract void set (T obj, long newValue)"}, "newUpdater(java.lang.Class<U>,java.lang.String)": {"Returns": [["@B_java#util#concurrent#atomic#AtomicLongFieldUpdater_E@", "the updater"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class of the objects holding the field"], ["@B_java#lang#String_E@", "String: the name of the field to be updated"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is not a volatile long type"], ["@B_java#lang#RuntimeException_E@", "with a nested reflection-based exception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.", "history": "Added in API level 1", "FullName": "public static AtomicLongFieldUpdater<U> newUpdater (Class<U> tclass, String fieldName)"}, "getAndSet(T,long)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public long getAndSet (T obj, long newValue)"}, "addAndGet(T, long)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value of the field of the given object managed by this updater.", "history": "added in API level 1", "FullName": "public long addAndGet (T obj, long delta)"}, "getAndIncrement(T)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long getAndIncrement (T obj)"}, "getAndUpdate(T,java.util.function.LongUnaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long getAndUpdate (T obj, LongUnaryOperator updateFunction)"}, "addAndGet(T,long)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long addAndGet (T obj, long delta)"}, "compareAndSet(T,long,long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["T", "T: An object whose field to conditionally set"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if obj is not an instance of the class possessing the field established in the constructor"]], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field.", "history": "Added in API level 1", "FullName": "public abstract boolean compareAndSet (T obj, long expect, long update)"}, "lazySet(T,long)": {"Returns": [], "Parameters": [["T", "T: An object whose field to set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the field of the given object managed by this updater to the given updated value.", "history": "Added in API level 9", "FullName": "public abstract void lazySet (T obj, long newValue)"}, "getAndAccumulate(T,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long getAndAccumulate (T obj, long x, LongBinaryOperator accumulatorFunction)"}, "decrementAndGet(T)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long decrementAndGet (T obj)"}, "AtomicLongFieldUpdater()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected do-nothing constructor for use by subclasses.", "history": "Added in API level 1", "FullName": "protected AtomicLongFieldUpdater ()"}, "lazySet(T, long)": {"Returns": [], "Parameters": [["T", "T: An object whose field to set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the field of the given object managed by this updater to the given updated value.", "history": "added in API level 9", "FullName": "public abstract void lazySet (T obj, long newValue)"}, "weakCompareAndSet(T,long,long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["T", "T: An object whose field to conditionally set"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if obj is not an instance of the class possessing the field established in the constructor"]], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field. compareAndSet.", "history": "Added in API level 1", "FullName": "public abstract boolean weakCompareAndSet (T obj, long expect, long update)"}, "get(T)": {"Returns": [["long", "the current value"]], "Parameters": [["T", "T: An object whose field to get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value held in the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public abstract long get (T obj)"}, "accumulateAndGet(T,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long accumulateAndGet (T obj, long x, LongBinaryOperator accumulatorFunction)"}, "set(T, long)": {"Returns": [], "Parameters": [["T", "T: An object whose field to set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet.", "history": "added in API level 1", "FullName": "public abstract void set (T obj, long newValue)"}, "getAndAdd(T, long)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value of the field of the given object managed by this updater.", "history": "added in API level 1", "FullName": "public long getAndAdd (T obj, long delta)"}, "updateAndGet(T,java.util.function.LongUnaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long updateAndGet (T obj, LongUnaryOperator updateFunction)"}, "weakCompareAndSet(T, long, long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["T", "T: An object whose field to conditionally set"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if obj is not an instance of the class possessing the field established in the constructor"]], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field. compareAndSet.", "history": "added in API level 1", "FullName": "public abstract boolean weakCompareAndSet (T obj, long expect, long update)"}, "newUpdater(java.lang.Class<U>, java.lang.String)": {"Returns": [["@B_java#util#concurrent#atomic#AtomicLongFieldUpdater_E@", "the updater"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class of the objects holding the field"], ["@B_java#lang#String_E@", "String: the name of the field to be updated"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the field is not a volatile long type"], ["@B_java#lang#RuntimeException_E@", "with a nested reflection-based exception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.", "history": "added in API level 1", "FullName": "public static AtomicLongFieldUpdater<U> newUpdater (Class<U> tclass, String fieldName)"}, "getAndDecrement(T)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long getAndDecrement (T obj)"}, "compareAndSet(T, long, long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["T", "T: An object whose field to conditionally set"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if obj is not an instance of the class possessing the field established in the constructor"]], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field.", "history": "added in API level 1", "FullName": "public abstract boolean compareAndSet (T obj, long expect, long update)"}, "incrementAndGet(T)": {"Returns": [["long", "the updated value"]], "Parameters": [["T", "T: An object whose field to get and set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long incrementAndGet (T obj)"}, "getAndSet(T, long)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the field of the given object managed by this updater to the given value and returns the old value.", "history": "added in API level 1", "FullName": "public long getAndSet (T obj, long newValue)"}, "getAndAdd(T,long)": {"Returns": [["long", "the previous value"]], "Parameters": [["T", "T: An object whose field to get and set"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value of the field of the given object managed by this updater.", "history": "Added in API level 1", "FullName": "public long getAndAdd (T obj, long delta)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicLongFieldUpdater<T>", "ClassDesc": "A reflection-based utility that enables atomic updates to designated volatile long fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates. Note that the guarantees of the compareAndSet method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of compareAndSet and set on the same updater."}