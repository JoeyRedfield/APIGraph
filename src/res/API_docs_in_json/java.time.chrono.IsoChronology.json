{"Functions": {"range(java.time.temporal.ChronoField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "no returns description in source"]], "Parameters": [["@B_java#time#temporal#ChronoField_E@", "ChronoField no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public ValueRange range (ChronoField field)"}, "zonedDateTime(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO zoned date-time in this chronology from an Instant. This is equivalent to @B_java#time#ZonedDateTime#ofInstant_E@.", "history": "added in API level 26", "FullName": "public ZonedDateTime zonedDateTime (Instant instant, ZoneId zone)"}, "dateEpochDay(long)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["long", "long: the epoch day"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the epoch-day. This is equivalent to @B_java#time#LocalDate#ofEpochDay_E@.", "history": "Added in API level 26", "FullName": "public LocalDate dateEpochDay (long epochDay)"}, "zonedDateTime(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the ISO zoned date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the date-time object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date-time"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO zoned date-time from another date-time object. This is equivalent to @B_java#time#ZonedDateTime#from_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime zonedDateTime (TemporalAccessor temporal)"}, "dateNow(java.time.Clock)": {"Returns": [["@B_java#time#LocalDate_E@", "the current ISO local date, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current ISO local date from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public LocalDate dateNow (Clock clock)"}, "date(int, int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["int", "int: the ISO proleptic-year"], ["int", "int: the ISO month-of-year"], ["int", "int: the ISO day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields. This is equivalent to @B_java#time#LocalDate#of_E@.", "history": "added in API level 26", "FullName": "public LocalDate date (int prolepticYear, int month, int dayOfMonth)"}, "zonedDateTime(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO zoned date-time in this chronology from an Instant. This is equivalent to @B_java#time#ZonedDateTime#ofInstant_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime zonedDateTime (Instant instant, ZoneId zone)"}, "period(int,int,int)": {"Returns": [["@B_java#time#Period_E@", "the period in terms of this chronology, not nullthe ISO period, not null"]], "Parameters": [["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a period for this chronology based on years, months and days. This returns a period tied to the ISO chronology using the specified years, months and days. See @B_java#time#Period_E@ for further details.", "history": "Added in API level 26", "FullName": "public Period period (int years, int months, int days)"}, "dateYearDay(int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["int", "int: the ISO proleptic-year"], ["int", "int: the ISO day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the proleptic-year and day-of-year fields. This is equivalent to @B_java#time#LocalDate#ofYearDay_E@.", "history": "added in API level 26", "FullName": "public LocalDate dateYearDay (int prolepticYear, int dayOfYear)"}, "getCalendarType()": {"Returns": [["@B_java#lang#String_E@", "the calendar system type - 'iso8601'"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#IsoChronology#getId_E@"], "Permissions": [], "Description": "Gets the calendar type of the underlying calendar system - 'iso8601'. The calendar type is an identifier defined by the Unicode Locale Data Markup Language (LDML) specification. It can be used to lookup the Chronology using @B_java#time#chrono#Chronology#of_E@. It can also be used as part of a locale, accessible via @B_java#util#Locale#getUnicodeLocaleType_E@ with the key 'ca'.", "history": "Added in API level 26", "FullName": "public String getCalendarType ()"}, "prolepticYear(java.time.chrono.Era, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public int prolepticYear (Era era, int yearOfEra)"}, "dateNow()": {"Returns": [["@B_java#time#LocalDate_E@", "the current ISO local date using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current ISO local date from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public LocalDate dateNow ()"}, "resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long>,java.time.format.ResolverStyle)": {"Returns": [["@B_java#time#LocalDate_E@", "the resolved date, null if insufficient information to create a date"]], "Parameters": [["@B_java#util#Map_E@", "Map: the map of fields to values, which can be updated, not null"], ["@B_java#time#format#ResolverStyle_E@", "ResolverStyle: the requested type of resolve, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the date cannot be resolved, typically because of a conflict in the input data"]], "SeeAlso": [], "Permissions": [], "Description": "Resolves parsed ChronoField values into a date during parsing. Most TemporalField implementations are resolved using the resolve method on the field. By contrast, the ChronoField class defines fields that only have meaning relative to the chronology. As such, ChronoField date fields are resolved here in the context of a specific chronology. ChronoField instances on the ISO calendar system are resolved as follows. EPOCH_DAY - If present, this is converted to a LocalDate and all other date fields are then cross-checked against the date. PROLEPTIC_MONTH - If present, then it is split into the YEAR and MONTH_OF_YEAR. If the mode is strict or smart then the field is validated. YEAR_OF_ERA and ERA - If both are present, then they are combined to form a YEAR. In lenient mode, the YEAR_OF_ERA range is not validated, in smart and strict mode it is. The ERA is validated for range in all three modes. If only the YEAR_OF_ERA is present, and the mode is smart or lenient, then the current era (CE/AD) is assumed. In strict mode, no era is assumed and the YEAR_OF_ERA is left untouched. If only the ERA is present, then it is left untouched. YEAR, MONTH_OF_YEAR and DAY_OF_MONTH - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is smart or strict, then the month and day are validated, with the day validated from 1 to 31. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in days. If the mode is smart, and the day-of-month is greater than the maximum for the year-month, then the day-of-month is adjusted to the last day-of-month. If the mode is strict, then the three fields must form a valid date. YEAR and DAY_OF_YEAR - If both are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in days. If the mode is smart or strict, then the two fields must form a valid date. YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and ALIGNED_DAY_OF_WEEK_IN_MONTH - If all four are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in weeks, then in days. If the mode is smart or strict, then the all four fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year and month, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the month. YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and DAY_OF_WEEK - If all four are present, then they are combined to form a LocalDate. The approach is the same as described above for years, months and weeks in ALIGNED_DAY_OF_WEEK_IN_MONTH. The day-of-week is adjusted as the next or same matching day-of-week once the years, months and weeks have been handled. YEAR, ALIGNED_WEEK_OF_YEAR and ALIGNED_DAY_OF_WEEK_IN_YEAR - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in weeks, then in days. If the mode is smart or strict, then the all three fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the year. YEAR, ALIGNED_WEEK_OF_YEAR and DAY_OF_WEEK - If all three are present, then they are combined to form a LocalDate. The approach is the same as described above for years and weeks in ALIGNED_DAY_OF_WEEK_IN_YEAR. The day-of-week is adjusted as the next or same matching day-of-week once the years and weeks have been handled.", "history": "Added in API level 26", "FullName": "public LocalDate resolveDate (Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "the chronology ID - 'ISO'"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#IsoChronology#getCalendarType_E@"], "Permissions": [], "Description": "Gets the ID of the chronology - 'ISO'. The ID uniquely identifies the Chronology. It can be used to lookup the Chronology using @B_java#time#chrono#Chronology#of_E@.", "history": "Added in API level 26", "FullName": "public String getId ()"}, "dateNow(java.time.ZoneId)": {"Returns": [["@B_java#time#LocalDate_E@", "the current ISO local date using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId no parameter comment"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current ISO local date from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public LocalDate dateNow (ZoneId zone)"}, "prolepticYear(java.time.chrono.Era,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int prolepticYear (Era era, int yearOfEra)"}, "isLeapYear(long)": {"Returns": [["boolean", "true if the year is leap, false otherwise"]], "Parameters": [["long", "long: the ISO proleptic year to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.", "history": "Added in API level 26", "FullName": "public boolean isLeapYear (long prolepticYear)"}, "date(java.time.chrono.Era, int, int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the ISO era, not null"], ["int", "int: the ISO year-of-era"], ["int", "int: the ISO month-of-year"], ["int", "int: the ISO day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the type of era is not IsoEra"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.", "history": "added in API level 26", "FullName": "public LocalDate date (Era era, int yearOfEra, int month, int dayOfMonth)"}, "date(java.time.chrono.Era,int,int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the ISO era, not null"], ["int", "int: the ISO year-of-era"], ["int", "int: the ISO month-of-year"], ["int", "int: the ISO day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the type of era is not IsoEra"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.", "history": "Added in API level 26", "FullName": "public LocalDate date (Era era, int yearOfEra, int month, int dayOfMonth)"}, "eras()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public List<Era> eras ()"}, "dateYearDay(java.time.chrono.Era,int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the ISO era, not null"], ["int", "int: the ISO year-of-era"], ["int", "int: the ISO day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the era, year-of-era and day-of-year fields.", "history": "Added in API level 26", "FullName": "public LocalDate dateYearDay (Era era, int yearOfEra, int dayOfYear)"}, "dateYearDay(int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["int", "int: the ISO proleptic-year"], ["int", "int: the ISO day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the proleptic-year and day-of-year fields. This is equivalent to @B_java#time#LocalDate#ofYearDay_E@.", "history": "Added in API level 26", "FullName": "public LocalDate dateYearDay (int prolepticYear, int dayOfYear)"}, "date(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the date-time object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from another date-time object. This is equivalent to @B_java#time#LocalDate#from_E@.", "history": "Added in API level 26", "FullName": "public LocalDate date (TemporalAccessor temporal)"}, "dateYearDay(java.time.chrono.Era, int, int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the ISO era, not null"], ["int", "int: the ISO year-of-era"], ["int", "int: the ISO day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the era, year-of-era and day-of-year fields.", "history": "added in API level 26", "FullName": "public LocalDate dateYearDay (Era era, int yearOfEra, int dayOfYear)"}, "date(int,int,int)": {"Returns": [["@B_java#time#LocalDate_E@", "the ISO local date, not null"]], "Parameters": [["int", "int: the ISO proleptic-year"], ["int", "int: the ISO month-of-year"], ["int", "int: the ISO day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields. This is equivalent to @B_java#time#LocalDate#of_E@.", "history": "Added in API level 26", "FullName": "public LocalDate date (int prolepticYear, int month, int dayOfMonth)"}, "period(int, int, int)": {"Returns": [["@B_java#time#Period_E@", "the period in terms of this chronology, not nullthe ISO period, not null"]], "Parameters": [["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a period for this chronology based on years, months and days. This returns a period tied to the ISO chronology using the specified years, months and days. See @B_java#time#Period_E@ for further details.", "history": "added in API level 26", "FullName": "public Period period (int years, int months, int days)"}, "eraOf(int)": {"Returns": [["@B_java#time#chrono#IsoEra_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public IsoEra eraOf (int eraValue)"}, "localDateTime(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the ISO local date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the date-time object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date-time"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an ISO local date-time from another date-time object. This is equivalent to @B_java#time#LocalDateTime#from_E@.", "history": "Added in API level 26", "FullName": "public LocalDateTime localDateTime (TemporalAccessor temporal)"}}, "Inheritance": ["@B_java#time#chrono#AbstractChronology_E@"], "ClassName": "java.time.chrono.IsoChronology", "ClassDesc": "The ISO calendar system. This chronology defines the rules of the ISO calendar system. This calendar system is based on the ISO-8601 standard, which is the The fields are defined as follows: era - There are two eras, 'Current Era' (CE) and 'Before Current Era' (BCE). year-of-era - The year-of-era is the same as the proleptic-year for the current CE era. For the BCE era before the ISO epoch the year increases from 1 upwards as time goes backwards. proleptic-year - The proleptic year is the same as the year-of-era for the current era. For the previous era, years have zero, then negative values. month-of-year - There are 12 months in an ISO year, numbered from 1 to 12. day-of-month - There are between 28 and 31 days in each of the ISO month, numbered from 1 to 31. Months 4, 6, 9 and 11 have 30 days, Months 1, 3, 5, 7, 8, 10 and 12 have 31 days. Month 2 has 28 days, or 29 in a leap year. day-of-year - There are 365 days in a standard ISO year and 366 in a leap year. The days are numbered from 1 to 365 or 1 to 366. leap-year - Leap years occur every 4 years, except where the year is divisble by 100 and not divisble by 400."}