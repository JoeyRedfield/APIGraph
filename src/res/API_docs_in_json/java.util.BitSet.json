{"Functions": {"BitSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new bit set. All bits are initially false.", "history": "Added in API level 1", "FullName": "public BitSet ()"}, "valueOf(java.nio.ByteBuffer)": {"Returns": [["@B_java#util#BitSet_E@", "a BitSet containing all the bits in the buffer in the specified range"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: a byte buffer containing a little-endian representation of a sequence of bits between its position and limit, to be used as the initial bits of the new bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bit set containing all the bits in the given byte buffer between its position and limit. More precisely, BitSet.valueOf(bb).get(n) == ((bb.get(bb.position()+n/8) & (1<<(n%8))) != 0) for all n < 8 * bb.remaining(). The byte buffer is not modified by this method, and no reference to the buffer is retained by the bit set.", "history": "Added in API level 19", "FullName": "public static BitSet valueOf (ByteBuffer bb)"}, "clear(int,int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be cleared"], ["int", "int: index after the last bit to be cleared"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.", "history": "Added in API level 1", "FullName": "public void clear (int fromIndex, int toIndex)"}, "set(int, boolean)": {"Returns": [], "Parameters": [["int", "int: a bit index"], ["boolean", "boolean: a boolean value to set"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bit at the specified index to the specified value.", "history": "added in API level 1", "FullName": "public void set (int bitIndex, boolean value)"}, "set(int,boolean)": {"Returns": [], "Parameters": [["int", "int: a bit index"], ["boolean", "boolean: a boolean value to set"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bit at the specified index to the specified value.", "history": "Added in API level 1", "FullName": "public void set (int bitIndex, boolean value)"}, "get(int,int)": {"Returns": [["@B_java#util#BitSet_E@", "a new BitSet from a range of this BitSet"]], "Parameters": [["int", "int: index of the first bit to include"], ["int", "int: index after the last bit to include"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).", "history": "Added in API level 1", "FullName": "public BitSet get (int fromIndex, int toIndex)"}, "cardinality()": {"Returns": [["int", "the number of bits set to true in this BitSet"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bits set to true in this BitSet.", "history": "Added in API level 1", "FullName": "public int cardinality ()"}, "set(int, int, boolean)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be set"], ["int", "int: index after the last bit to be set"], ["boolean", "boolean: value to set the selected bits to"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.", "history": "added in API level 1", "FullName": "public void set (int fromIndex, int toIndex, boolean value)"}, "toByteArray()": {"Returns": [["byte[]", "a byte array containing a little-endian representation of all the bits in this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new byte array containing all the bits in this bit set. More precisely, if byte[] bytes = s.toByteArray(); then bytes.length == (s.length()+7)/8 and s.get(n) == ((bytes[n/8] & (1<<(n%8))) != 0) for all n < 8 * bytes.length.", "history": "Added in API level 19", "FullName": "public byte[] toByteArray ()"}, "flip(int)": {"Returns": [], "Parameters": [["int", "int: the index of the bit to flip"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bit at the specified index to the complement of its current value.", "history": "Added in API level 1", "FullName": "public void flip (int bitIndex)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets all of the bits in this BitSet to false.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "stream()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of integers representing set indices"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream of indices for which this BitSet contains a bit in the set state. The indices are returned in order, from lowest to highest. The size of the stream is the number of bits in the set state, equal to the value returned by the @B_java#util#BitSet#cardinality_E@ method. The bit set must remain constant during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined.", "history": "Added in API level 24", "FullName": "public IntStream stream ()"}, "xor(java.util.BitSet)": {"Returns": [], "Parameters": [["@B_java#util#BitSet_E@", "BitSet: a bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a logical true if and only if one of the following statements holds: The bit initially has the value true, and the corresponding bit in the argument has the value false. The bit initially has the value false, and the corresponding bit in the argument has the value true.", "history": "Added in API level 1", "FullName": "public void xor (BitSet set)"}, "valueOf(byte[])": {"Returns": [["@B_java#util#BitSet_E@", "a BitSet containing all the bits in the byte array"]], "Parameters": [["byte[]", "byte: a byte array containing a little-endian representation of a sequence of bits to be used as the initial bits of the new bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bit set containing all the bits in the given byte array. More precisely, BitSet.valueOf(bytes).get(n) == ((bytes[n/8] & (1<<(n%8))) != 0) for all n < 8 * bytes.length. This method is equivalent to BitSet.valueOf(ByteBuffer.wrap(bytes)).", "history": "Added in API level 19", "FullName": "public static BitSet valueOf (byte[] bytes)"}, "set(int,int,boolean)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be set"], ["int", "int: index after the last bit to be set"], ["boolean", "boolean: value to set the selected bits to"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.", "history": "Added in API level 1", "FullName": "public void set (int fromIndex, int toIndex, boolean value)"}, "valueOf(long[])": {"Returns": [["@B_java#util#BitSet_E@", "a BitSet containing all the bits in the long array"]], "Parameters": [["long[]", "long: a long array containing a little-endian representation of a sequence of bits to be used as the initial bits of the new bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bit set containing all the bits in the given long array. More precisely, BitSet.valueOf(longs).get(n) == ((longs[n/64] & (1L<<(n%64))) != 0) for all n < 64 * longs.length. This method is equivalent to BitSet.valueOf(LongBuffer.wrap(longs)).", "history": "Added in API level 19", "FullName": "public static BitSet valueOf (long[] longs)"}, "previousSetBit(int)": {"Returns": [["int", "the index of the previous set bit, or -1 if there is no such bit"]], "Parameters": [["int", "int: the index to start checking from (inclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is less than -1"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index. If no such bit exists, or if -1 is given as the starting index, then -1 is returned. To iterate over the true bits in a BitSet, use the following loop:", "history": "Added in API level 19", "FullName": "public int previousSetBit (int fromIndex)"}, "flip(int,int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to flip"], ["int", "int: index after the last bit to flip"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.", "history": "Added in API level 1", "FullName": "public void flip (int fromIndex, int toIndex)"}, "nextSetBit(int)": {"Returns": [["int", "the index of the next set bit, or -1 if there is no such bit"]], "Parameters": [["int", "int: the index to start checking from (inclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned. To iterate over the true bits in a BitSet, use the following loop:", "history": "Added in API level 1", "FullName": "public int nextSetBit (int fromIndex)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#BitSet#size_E@"], "Permissions": [], "Description": "Cloning this BitSet produces a new BitSet that is equal to it. The clone of the bit set is another bit set that has exactly the same bits set to true as this bit set.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "BitSet(int)": {"Returns": [], "Parameters": [["int", "int: the initial size of the bit set"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if the specified initial size is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1. All bits are initially false.", "history": "Added in API level 1", "FullName": "public BitSet (int nbits)"}, "hashCode()": {"Returns": [["int", "the hash code value for this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this bit set. The hash code depends only on which bits are set within this BitSet. The hash code is defined to be the result of the following calculation:", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "intersects(java.util.BitSet)": {"Returns": [["boolean", "boolean indicating whether this BitSet intersects the specified BitSet"]], "Parameters": [["@B_java#util#BitSet_E@", "BitSet: BitSet to intersect with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.", "history": "Added in API level 1", "FullName": "public boolean intersects (BitSet set)"}, "size()": {"Returns": [["int", "the number of bits currently in this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bits of space actually in use by this BitSet to represent bit values. The maximum element in the set is the size - 1st element.", "history": "Added in API level 1", "FullName": "public int size ()"}, "and(java.util.BitSet)": {"Returns": [], "Parameters": [["@B_java#util#BitSet_E@", "BitSet: a bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a logical true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true.", "history": "Added in API level 1", "FullName": "public void and (BitSet set)"}, "previousClearBit(int)": {"Returns": [["int", "the index of the previous clear bit, or -1 if there is no such bit"]], "Parameters": [["int", "int: the index to start checking from (inclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is less than -1"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index. If no such bit exists, or if -1 is given as the starting index, then -1 is returned.", "history": "Added in API level 19", "FullName": "public int previousClearBit (int fromIndex)"}, "or(java.util.BitSet)": {"Returns": [], "Parameters": [["@B_java#util#BitSet_E@", "BitSet: a bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a logical true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value true.", "history": "Added in API level 1", "FullName": "public void or (BitSet set)"}, "isEmpty()": {"Returns": [["boolean", "boolean indicating whether this BitSet is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this BitSet contains no bits that are set to true.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "toLongArray()": {"Returns": [["long[]", "a long array containing a little-endian representation of all the bits in this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new long array containing all the bits in this bit set. More precisely, if long[] longs = s.toLongArray(); then longs.length == (s.length()+63)/64 and s.get(n) == ((longs[n/64] & (1L<<(n%64))) != 0) for all n < 64 * longs.length.", "history": "Added in API level 19", "FullName": "public long[] toLongArray ()"}, "valueOf(java.nio.LongBuffer)": {"Returns": [["@B_java#util#BitSet_E@", "a BitSet containing all the bits in the buffer in the specified range"]], "Parameters": [["@B_java#nio#LongBuffer_E@", "LongBuffer: a long buffer containing a little-endian representation of a sequence of bits between its position and limit, to be used as the initial bits of the new bit set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bit set containing all the bits in the given long buffer between its position and limit. More precisely, BitSet.valueOf(lb).get(n) == ((lb.get(lb.position()+n/64) & (1L<<(n%64))) != 0) for all n < 64 * lb.remaining(). The long buffer is not modified by this method, and no reference to the buffer is retained by the bit set.", "history": "Added in API level 19", "FullName": "public static BitSet valueOf (LongBuffer lb)"}, "set(int,int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be set"], ["int", "int: index after the last bit to be set"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.", "history": "Added in API level 1", "FullName": "public void set (int fromIndex, int toIndex)"}, "set(int)": {"Returns": [], "Parameters": [["int", "int: a bit index"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bit at the specified index to true.", "history": "Added in API level 1", "FullName": "public void set (int bitIndex)"}, "get(int, int)": {"Returns": [["@B_java#util#BitSet_E@", "a new BitSet from a range of this BitSet"]], "Parameters": [["int", "int: index of the first bit to include"], ["int", "int: index after the last bit to include"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).", "history": "added in API level 1", "FullName": "public BitSet get (int fromIndex, int toIndex)"}, "set(int, int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be set"], ["int", "int: index after the last bit to be set"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.", "history": "added in API level 1", "FullName": "public void set (int fromIndex, int toIndex)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this bit set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this bit set. For every index for which this BitSet contains a bit in the set state, the decimal representation of that index is included in the result. Such indices are listed in order from lowest to highest, separated by \", \" (a comma and a space) and surrounded by braces, resulting in the usual mathematical notation for a set of integers. Example: drPepper.toString() returns \"{}\". drPepper.toString() returns \"{2}\". drPepper.toString() returns \"{2, 4, 10}\".", "history": "Added in API level 1", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with"]], "Throws": [], "SeeAlso": ["@B_java#util#BitSet#size_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Bitset object that has exactly the same set of bits set to true as this bit set. That is, for every nonnegative int index k,", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "get(int)": {"Returns": [["boolean", "the value of the bit with the specified index"]], "Parameters": [["int", "int: the bit index"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the bit with the specified index. The value is true if the bit with the index bitIndex is currently set in this BitSet; otherwise, the result is false.", "history": "Added in API level 1", "FullName": "public boolean get (int bitIndex)"}, "flip(int, int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to flip"], ["int", "int: index after the last bit to flip"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.", "history": "added in API level 1", "FullName": "public void flip (int fromIndex, int toIndex)"}, "length()": {"Returns": [["int", "the logical size of this BitSet"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the \"logical size\" of this BitSet: the index of the highest set bit in the BitSet plus one. Returns zero if the BitSet contains no set bits.", "history": "Added in API level 1", "FullName": "public int length ()"}, "nextClearBit(int)": {"Returns": [["int", "the index of the next clear bit"]], "Parameters": [["int", "int: the index to start checking from (inclusive)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first bit that is set to false that occurs on or after the specified starting index.", "history": "Added in API level 1", "FullName": "public int nextClearBit (int fromIndex)"}, "andNot(java.util.BitSet)": {"Returns": [], "Parameters": [["@B_java#util#BitSet_E@", "BitSet: the BitSet with which to mask this BitSet"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.", "history": "Added in API level 1", "FullName": "public void andNot (BitSet set)"}, "clear(int, int)": {"Returns": [], "Parameters": [["int", "int: index of the first bit to be cleared"], ["int", "int: index after the last bit to be cleared"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.", "history": "added in API level 1", "FullName": "public void clear (int fromIndex, int toIndex)"}, "clear(int)": {"Returns": [], "Parameters": [["int", "int: the index of the bit to be cleared"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the bit specified by the index to false.", "history": "Added in API level 1", "FullName": "public void clear (int bitIndex)"}}, "Inheritance": [], "ClassName": "java.util.BitSet", "ClassDesc": "This class implements a vector of bits that grows as needed. Each component of the bit set has a boolean value. The bits of a BitSet are indexed by nonnegative integers. Individual indexed bits can be examined, set, or cleared. One BitSet may be used to modify the contents of another BitSet through logical AND, logical inclusive OR, and logical exclusive OR operations. By default, all bits in the set initially have the value false. Every bit set has a current size, which is the number of bits of space currently in use by the bit set. Note that the size is related to the implementation of a bit set, so it may change with implementation. The length of a bit set relates to logical length of a bit set and is defined independently of implementation. Unless otherwise noted, passing a null parameter to any of the methods in a BitSet will result in a NullPointerException. A BitSet is not safe for multithreaded use without external synchronization."}