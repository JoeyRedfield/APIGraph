{"Functions": {"sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList<java.lang.String>,java.util.ArrayList<android.app.PendingIntent>,java.util.ArrayList<android.app.PendingIntent>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["@B_java#util#ArrayList_E@", "ArrayList: an ArrayList of strings that, in order, comprise the original message"], ["@B_java#util#ArrayList_E@", "ArrayList: if not null, an ArrayList of PendingIntents (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU For RESULT_ERROR_GENERIC_FAILURE each sentIntent may include the extra \"errorCode\" containing a radio technology specific value, generally only useful for troubleshooting. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period."], ["@B_java#util#ArrayList_E@", "ArrayList: if not null, an ArrayList of PendingIntents (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or data are empty"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SEND_SMS_E@"], "Description": "Send a multi-part text based SMS. The callee should have already divided the message into correctly sized parts by calling divideMessage. @B_android#Manifest#permission#SEND_SMS_E@ permission. and only if an app is not selected as the default SMS app, the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider). For information about how to behave as the default SMS app, see @B_android#provider#Telephony_E@. @B_android#telephony#SmsManager#getDefault_E@ is used to instantiate this manager on a multi-SIM device, this operation may fail sending the SMS message because no suitable default subscription could be found. In this case, if sentIntent is non-null, then the @B_android#app#PendingIntent_E@ will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string \"noDefault\" containing the boolean value true. See @B_android#telephony#SmsManager#getDefault_E@ for more information on the conditions where this operation may fail.", "history": "Added in API level 4", "FullName": "public void sendMultipartTextMessage (String destinationAddress, String scAddress, ArrayList<String> parts, ArrayList<PendingIntent> sentIntents, ArrayList<PendingIntent> deliveryIntents)"}, "createAppSpecificSmsToken(android.app.PendingIntent)": {"Returns": [["@B_java#lang#String_E@", "Token to include in an SMS message. The token will be 11 characters long."]], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#provider#Telephony#Sms#Intents#getMessagesFromIntent_E@"], "Permissions": [], "Description": "Create a single use app specific incoming SMS request for the calling package. This method returns a token that if included in a subsequent incoming SMS message will cause intent to be sent with the SMS data. The token is only good for one use, after an SMS has been received containing the token all subsequent SMS messages with the token will be routed as normal. An app can only have one request at a time, if the app already has a request pending it will be replaced with a new request. @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription.", "history": "Added in API level 26", "FullName": "public String createAppSpecificSmsToken (PendingIntent intent)"}, "getCarrierConfigValues()": {"Returns": [["@B_android#os#Bundle_E@", "bundle key/values pairs of configuration values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get carrier-dependent configuration values. @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription.", "history": "Added in API level 21", "FullName": "public Bundle getCarrierConfigValues ()"}, "getSubscriptionId()": {"Returns": [["int", "associated subscription ID or @B_android#telephony#SubscriptionManager#INVALID_SUBSCRIPTION_ID_E@ if the default subscription id cannot be determined or the device has multiple active subscriptions and and no default is set (\"ask every time\") by the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the associated subscription id. If the instance was returned by @B_android#telephony#SmsManager#getDefault_E@, then this method may return different values at different points in time (if the user changes the default subscription id). @B_android#telephony#SubscriptionManager#INVALID_SUBSCRIPTION_ID_E@ if the device has multiple active subscriptions and no default is set.", "history": "Added in API level 22", "FullName": "public int getSubscriptionId ()"}, "sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["@B_java#lang#String_E@", "String: the body of the message to send"], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is successfully sent, or failed. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU RESULT_ERROR_NO_SERVICE For RESULT_ERROR_GENERIC_FAILURE the sentIntent may include the extra \"errorCode\" containing a radio technology specific value, generally only useful for troubleshooting. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or text are empty"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SEND_SMS_E@"], "Description": "Send a text based SMS. @B_android#Manifest#permission#SEND_SMS_E@ permission. and only if an app is not selected as the default SMS app, the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider). For information about how to behave as the default SMS app, see @B_android#provider#Telephony_E@. @B_android#telephony#SmsManager#getDefault_E@ is used to instantiate this manager on a multi-SIM device, this operation may fail sending the SMS message because no suitable default subscription could be found. In this case, if sentIntent is non-null, then the @B_android#app#PendingIntent_E@ will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string \"noDefault\" containing the boolean value true. See @B_android#telephony#SmsManager#getDefault_E@ for more information on the conditions where this operation may fail.", "history": "Added in API level 4", "FullName": "public void sendTextMessage (String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)"}, "getDefault()": {"Returns": [["@B_android#telephony#SmsManager_E@", "the @B_android#telephony#SmsManager_E@ associated with the default subscription id."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#SubscriptionManager#getDefaultSmsSubscriptionId_E@"], "Permissions": [], "Description": "Get the SmsManager associated with the default subscription id. The instance will always be associated with the default subscription id, even if the default subscription id changes. @B_android#telephony#SmsManager_E@ may start an activity to kick off a subscription disambiguation dialog. Most operations will not complete until the user has chosen the subscription that will be associated with the operation. If the user cancels the dialog without choosing a subscription, one of the following will happen, depending on the target SDK version of the application. For compatibility purposes, if the target SDK level is <= 28, telephony will still send the SMS over the first available subscription. If the target SDK level is > 28, the operation will fail to complete. @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ if the application will perform the operation while in the background because this can cause unpredictable results, such as the operation being sent over the wrong subscription or failing completely, depending on the user's default SMS subscription setting.", "history": "Added in API level 4", "FullName": "public static SmsManager getDefault ()"}, "getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager.FinancialSmsCallback)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: the parameters to filter SMS messages returned."], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor on which callback will be invoked. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#telephony#SmsManager#FinancialSmsCallback_E@", "SmsManager.FinancialSmsCallback: a callback to receive CursorWindow with SMS messages. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SMS_FINANCIAL_TRANSACTIONS_E@"], "Description": "Get SMS messages for the calling financial app. The result will be delivered asynchronously in the passing in callback interface. @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription. Requires @B_android#Manifest#permission#SMS_FINANCIAL_TRANSACTIONS_E@", "history": "Added in API level 29", "FullName": "public void getSmsMessagesForFinancialApp (Bundle params, Executor executor, SmsManager.FinancialSmsCallback callback)"}, "divideMessage(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "an ArrayList of strings that, in order, comprise the original message."]], "Parameters": [["@B_java#lang#String_E@", "String: the original message. Must not be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if text is null."]], "SeeAlso": [], "Permissions": [], "Description": "Divide a message text into several fragments, none bigger than the maximum SMS message size.", "history": "Added in API level 4", "FullName": "public ArrayList<String> divideMessage (String text)"}, "createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)": {"Returns": [["@B_java#lang#String_E@", "Token to include in an SMS message. This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: this is a list of prefixes string separated by REGEX_PREFIX_DELIMITER. The matching SMS message should have at least one of the prefixes in the beginning of the message. This value may be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: this intent is sent when the matching SMS message is received. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a single use app specific incoming SMS request for the calling package. This method returns a token that if included in a subsequent incoming SMS message, and the SMS message has a prefix from the given prefixes list, the provided intent will be sent with the SMS data to the calling package. The token is only good for one use within a reasonable amount of time. After an SMS has been received containing the token all subsequent SMS messages with the token will be routed as normal. An app can only have one request at a time, if the app already has a request pending it will be replaced with a new request. @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription.", "history": "Added in API level 29", "FullName": "public String createAppSpecificSmsTokenWithPackageInfo (String prefixes, PendingIntent intent)"}, "sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["short", "short: the port to deliver the message to"], ["byte[]", "byte: the body of the message to send"], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is successfully sent, or failed. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU For RESULT_ERROR_GENERIC_FAILURE the sentIntent may include the extra \"errorCode\" containing a radio technology specific value, generally only useful for troubleshooting. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or data are empty"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SEND_SMS_E@"], "Description": "Send a data based SMS to a specific application port. @B_android#Manifest#permission#SEND_SMS_E@ permission. @B_android#telephony#SmsManager#getDefault_E@ is used to instantiate this manager on a multi-SIM device, this operation may fail sending the SMS message because no suitable default subscription could be found. In this case, if sentIntent is non-null, then the @B_android#app#PendingIntent_E@ will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string \"noDefault\" containing the boolean value true. See @B_android#telephony#SmsManager#getDefault_E@ for more information on the conditions where this operation may fail.", "history": "Added in API level 4", "FullName": "public void sendDataMessage (String destinationAddress, String scAddress, short destinationPort, byte[] data, PendingIntent sentIntent, PendingIntent deliveryIntent)"}, "getDefaultSmsSubscriptionId()": {"Returns": [["int", "the user-defined default SMS subscription id, or the active subscription id if there's only one active subscription available, otherwise @B_android#telephony#SubscriptionManager#INVALID_SUBSCRIPTION_ID_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get default sms subscription id. @B_android#telephony#SubscriptionManager#getDefaultSmsSubscriptionId_E@ if the user has not chosen a default. In this case it returns the active subscription id if there's only one active subscription available.", "history": "Added in API level 22", "FullName": "public static int getDefaultSmsSubscriptionId ()"}, "sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: application context"], ["@B_android#net#Uri_E@", "Uri: the content Uri from which the message pdu will be read"], ["@B_java#lang#String_E@", "String: the optional location url where message should be sent to"], ["@B_android#os#Bundle_E@", "Bundle: the carrier-specific messaging configuration values to override for sending the message."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is successfully sent, or failed"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if contentUri is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Send an MMS message @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription.", "history": "Added in API level 21", "FullName": "public void sendMultimediaMessage (Context context, Uri contentUri, String locationUrl, Bundle configOverrides, PendingIntent sentIntent)"}, "downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: application context"], ["@B_java#lang#String_E@", "String: the location URL of the MMS message to be downloaded, usually obtained from the MMS WAP push notification"], ["@B_android#net#Uri_E@", "Uri: the content uri to which the downloaded pdu will be written"], ["@B_android#os#Bundle_E@", "Bundle: the carrier-specific messaging configuration values to override for downloading the message."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is downloaded, or the download is failed"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if locationUrl or contentUri is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Download an MMS message from carrier by a given location URL @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the operation being completed on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the operation is performed on the correct subscription.", "history": "Added in API level 21", "FullName": "public void downloadMultimediaMessage (Context context, String locationUrl, Uri contentUri, Bundle configOverrides, PendingIntent downloadedIntent)"}, "injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)": {"Returns": [], "Parameters": [["byte[]", "byte: is the byte array of pdu to be injected into android application framework"], ["@B_java#lang#String_E@", "String: is the format of SMS pdu (@B_android#telephony#SmsMessage#FORMAT_3GPP_E@ or @B_android#telephony#SmsMessage#FORMAT_3GPP2_E@) Value is @B_android#telephony#SmsMessage#FORMAT_3GPP_E@, or @B_android#telephony#SmsMessage#FORMAT_3GPP2_E@"], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is successfully received by the android application framework, or failed. This intent is broadcasted at the same time an SMS received from radio is acknowledged back. The result code will be @B_android#provider#Telephony#Sms#Intents#RESULT_SMS_HANDLED_E@ for success, or @B_android#provider#Telephony#Sms#Intents#RESULT_SMS_GENERIC_ERROR_E@ for error."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the format is invalid."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Inject an SMS PDU into the android application framework. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or carrier privileges per @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the SMS being injected on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the SMS is delivered to the correct subscription.", "history": "Added in API level 22", "FullName": "public void injectSmsPdu (byte[] pdu, String format, PendingIntent receivedIntent)"}, "getSmsManagerForSubscriptionId(int)": {"Returns": [["@B_android#telephony#SmsManager_E@", "the instance of the SmsManager associated with subscription"]], "Parameters": [["int", "int: an SMS subscription ID, typically accessed using @B_android#telephony#SubscriptionManager_E@"]], "Throws": [], "SeeAlso": ["@B_android#telephony#SubscriptionManager#getActiveSubscriptionInfoList_E@", "@B_android#telephony#SubscriptionManager#getDefaultSmsSubscriptionId_E@"], "Permissions": [], "Description": "Get the instance of the SmsManager associated with a particular subscription ID. @B_android#telephony#SmsManager_E@ in this manner will never cause an SMS disambiguation dialog to appear, unlike @B_android#telephony#SmsManager#getDefault_E@.", "history": "Added in API level 22", "FullName": "public static SmsManager getSmsManagerForSubscriptionId (int subId)"}, "sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#app#PendingIntent_E@", "PendingIntent no parameter comment"], ["@B_android#app#PendingIntent_E@", "PendingIntent no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#telephony#SmsManager#sendTextMessage_E@"], "Permissions": ["@B_android#Manifest#permission#SEND_SMS_E@", "@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Send a text based SMS without writing it into the SMS Provider. The message will be sent directly over the network and will not be visible in SMS applications. Intended for internal carrier use only. Requires Permission: Both @B_android#Manifest#permission#SEND_SMS_E@ and @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@), or that the calling app is the default IMS app (see @B_android#telephony#CarrierConfigManager#KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING_E@). @B_android#telephony#SmsManager_E@ instance has been created with @B_android#telephony#SmsManager#getDefault_E@, and no user-defined default subscription is defined, the subscription ID associated with this message will be INVALID, which will result in the SMS being sent on the subscription associated with logical slot 0. Use @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@ to ensure the SMS is sent on the correct subscription. Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ and @B_android#Manifest#permission#SEND_SMS_E@", "history": "Added in API level 28", "FullName": "public void sendTextMessageWithoutPersisting (String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)"}}, "Inheritance": [], "ClassName": "android.telephony.SmsManager", "ClassDesc": "Manages SMS operations such as sending data, text, and pdu SMS messages. Get this object by calling the static method @B_android#telephony#SmsManager#getDefault_E@. To create an instance of @B_android#telephony#SmsManager_E@ associated with a specific subscription ID, call @B_android#telephony#SmsManager#getSmsManagerForSubscriptionId_E@. This is typically used for devices that support multiple active subscriptions at once. For information about how to behave as the default SMS app on Android 4.4 (API level 19) and higher, see @B_android#provider#Telephony_E@."}