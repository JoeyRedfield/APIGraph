{"Functions": {"onChildViewAttachedToWindow(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View which is attached to the RecyclerView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view is attached to the RecyclerView.", "history": "added in version 22.2.0", "FullName": "void onChildViewAttachedToWindow (View view)"}, "onChildViewDetachedFromWindow(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View which is being detached from the RecyclerView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view is detached from RecyclerView.", "history": "added in version 22.2.0", "FullName": "void onChildViewDetachedFromWindow (View view)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v7#widget#RecyclerView#ItemDecoration_E@"], "ClassName": "android.support.v7.widget.helper.ItemTouchHelper", "ClassDesc": "This is a utility class to add swipe to dismiss and drag & drop support to RecyclerView. It works with a RecyclerView and a Callback class, which configures what type of interactions are enabled and also receives events when user performs these actions. Depending on which functionality you support, you should override @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onMove_E@ and / or @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onSwiped_E@. This class is designed to work with any LayoutManager but for certain situations, it can be optimized for your custom LayoutManager by extending methods in the @B_android#support#v7#widget#helper#ItemTouchHelper#Callback_E@ class or implementing @B_android#support#v7#widget#helper#ItemTouchHelper#ViewDropHandler_E@ interface in your LayoutManager. By default, ItemTouchHelper moves the items' translateX/Y properties to reposition them. You can customize these behaviors by overriding @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onChildDraw_E@ or @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onChildDrawOver_E@. Most of the time you only need to override onChildDraw."}