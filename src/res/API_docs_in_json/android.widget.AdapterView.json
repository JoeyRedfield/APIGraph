{"Functions": {"addView(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."], ["int", "int: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void addView (View child, int index)"}, "getOnItemClickListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "The callback to be invoked with an item in this AdapterView has been clicked, or null if no callback has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final AdapterView.OnItemClickListener getOnItemClickListener ()"}, "getEmptyView()": {"Returns": [["@B_android#view#View_E@", "The view to show if the adapter is empty."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When the current adapter is empty, the AdapterView can display a special view called the empty view. The empty view is used to provide feedback to the user that no data is available in this AdapterView.", "history": "Added in API level 1", "FullName": "public View getEmptyView ()"}, "performItemClick(android.view.View,int,long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "Added in API level 1", "FullName": "public boolean performItemClick (View view, int position, long id)"}, "onProvideAutofillStructure(android.view.ViewStructure,int)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure: fill in with structured view data for autofill purposes."], ["int", "int: optional flags. Value is either 0 or @B_android#view#View#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates a @B_android#view#ViewStructure_E@ to fullfil an autofill request. The structure should contain at least the following properties: Autofill id (@B_android#view#ViewStructure#setAutofillId_E@). Autofill type (@B_android#view#ViewStructure#setAutofillType_E@). Autofill value (@B_android#view#ViewStructure#setAutofillValue_E@). Whether the data is sensitive (@B_android#view#ViewStructure#setDataIsSensitive_E@). It's also recommended to set the following properties - the more properties the structure has, the higher the changes of an @B_android#service#autofill#AutofillService_E@ properly using the structure: Autofill hints (@B_android#view#ViewStructure#setAutofillHints_E@). Autofill options (@B_android#view#ViewStructure#setAutofillOptions_E@) when the view can only be filled with predefined values (typically used when the autofill type is @B_android#view#View#AUTOFILL_TYPE_LIST_E@). Resource id (@B_android#view#ViewStructure#setId_E@). Class name (@B_android#view#ViewStructure#setClassName_E@). Content description (@B_android#view#ViewStructure#setContentDescription_E@). Visual properties such as visibility (@B_android#view#ViewStructure#setVisibility_E@), dimensions (@B_android#view#ViewStructure#setDimens_E@), and opacity (@B_android#view#ViewStructure#setOpaque_E@). For views representing text fields, text properties such as the text itself (@B_android#view#ViewStructure#setText_E@), text hints (@B_android#view#ViewStructure#setHint_E@, input type (@B_android#view#ViewStructure#setInputType_E@), For views representing HTML nodes, its web domain (@B_android#view#ViewStructure#setWebDomain_E@) and HTML properties ((@B_android#view#ViewStructure#setHtmlInfo_E@). The default implementation of this method already sets most of these properties based on related @B_android#view#View_E@ methods (for example, the autofill id is set using @B_android#view#View#getAutofillId_E@, the autofill type set using @B_android#view#View#getAutofillType_E@, etc.), and views in the standard Android widgets library also override it to set their relevant properties (for example, @B_android#widget#TextView_E@ already sets the text properties), so it's recommended to only override this method (and call super.onProvideAutofillStructure()) when: The view contents does not include PII (Personally Identifiable Information), so it can call @B_android#view#ViewStructure#setDataIsSensitive_E@ passing false. The view can only be autofilled with predefined options, so it can call @B_android#view#ViewStructure#setAutofillOptions_E@. left and top values set in @B_android#view#ViewStructure#setDimens_E@ must be relative to the next @B_android#view#View#isImportantForAutofill_E@ predecessor view included in the structure. Views support the Autofill Framework mainly by: Providing the metadata defining what the view means and how it can be autofilled. Notifying the Android System when the view value changed by calling @B_android#view#autofill#AutofillManager#notifyValueChanged_E@. Implementing the methods that autofill the view. This method is responsible for the former; @B_android#view#View#autofill_E@ is responsible for the latter. It also sets the autofill options in the structure; when overridden, it should set it as well, either explicitly by calling @B_android#view#ViewStructure#setAutofillOptions_E@ or implicitly by calling super.onProvideAutofillStructure(structure, flags).", "history": "Added in API level 26", "FullName": "public void onProvideAutofillStructure (ViewStructure structure, int flags)"}, "setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemLongClickListener_E@", "AdapterView.OnItemLongClickListener: The callback that will run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an item in this AdapterView has been clicked and held", "history": "Added in API level 1", "FullName": "public void setOnItemLongClickListener (AdapterView.OnItemLongClickListener listener)"}, "setFocusableInTouchMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, this view can receive the focus while in touch mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this view can receive focus while in touch mode. Setting this to true will also ensure that this view is focusable.", "history": "Added in API level 1", "FullName": "public void setFocusableInTouchMode (boolean focusable)"}, "getAdapter()": {"Returns": [["T", "The adapter used to provide this view's content."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter currently associated with this widget.", "history": "Added in API level 1", "FullName": "public abstract T getAdapter ()"}, "setFocusable(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#view#View#NOT_FOCUSABLE_E@, @B_android#view#View#FOCUSABLE_E@, or @B_android#view#View#FOCUSABLE_AUTO_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this view can receive focus. Setting this to @B_android#view#View#FOCUSABLE_AUTO_E@ tells the framework to determine focusability automatically based on the view's interactivity. This is the default. Setting this to NOT_FOCUSABLE will ensure that this view is also not focusable in touch mode.", "history": "Added in API level 26", "FullName": "public void setFocusable (int focusable)"}, "setOnClickListener(android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: The callback that will run This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when this view is clicked. If this view is not clickable, it becomes clickable.", "history": "Added in API level 1", "FullName": "public void setOnClickListener (View.OnClickListener l)"}, "getLastVisiblePosition()": {"Returns": [["int", "The position within the adapter's data set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position within the adapter's data set for the last item displayed on screen.", "history": "Added in API level 1", "FullName": "public int getLastVisiblePosition ()"}, "setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "AdapterView.OnItemClickListener: The callback that will be invoked. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an item in this AdapterView has been clicked.", "history": "Added in API level 1", "FullName": "public void setOnItemClickListener (AdapterView.OnItemClickListener listener)"}, "canAnimate()": {"Returns": [["boolean", "true if the children can be animated, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the view group has the ability to animate its children after the first layout.", "history": "Added in API level 1", "FullName": "protected boolean canAnimate ()"}, "getOnItemSelectedListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final AdapterView.OnItemSelectedListener getOnItemSelectedListener ()"}, "getItemAtPosition(int)": {"Returns": [["@B_java#lang#Object_E@", "The data associated with the specified position in the list"]], "Parameters": [["int", "int: Which data to get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the data associated with the specified position in the list.", "history": "Added in API level 1", "FullName": "public Object getItemAtPosition (int position)"}, "getSelectedItemPosition()": {"Returns": [["int", "int Position (starting at 0), or @B_android#widget#AdapterView#INVALID_POSITION_E@ if there is nothing selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the position of the currently selected item within the adapter's data set", "history": "Added in API level 1", "FullName": "public int getSelectedItemPosition ()"}, "AdapterView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AdapterView (Context context, AttributeSet attrs)"}, "addView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."], ["int", "int: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "added in API level 1", "FullName": "public void addView (View child, int index)"}, "getSelectedItemId()": {"Returns": [["long", "The id corresponding to the currently selected item, or @B_android#widget#AdapterView#INVALID_ROW_ID_E@ if nothing is selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public long getSelectedItemId ()"}, "setFocusable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, this view can receive the focus."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this view can receive the focus. Setting this to false will also ensure that this view is not focusable in touch mode.", "history": "Added in API level 1", "FullName": "void setFocusable (boolean focusable)"}, "getPositionForView(android.view.View)": {"Returns": [["int", "the position within the adapter's data set of the view, or @B_android#widget#AdapterView#INVALID_POSITION_E@ if the view does not correspond to a list item (or it is not currently visible)"]], "Parameters": [["@B_android#view#View_E@", "View: an adapter item, or a descendant of an adapter item. This must be visible in this AdapterView at the time of the call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position within the adapter's data set for the view, where view is a an adapter item or a descendant of an adapter item.", "history": "Added in API level 1", "FullName": "public int getPositionForView (View view)"}, "getFirstVisiblePosition()": {"Returns": [["int", "The position within the adapter's data set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position within the adapter's data set for the first item displayed on screen.", "history": "Added in API level 1", "FullName": "public int getFirstVisiblePosition ()"}, "AdapterView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AdapterView (Context context)"}, "getSelectedView()": {"Returns": [["@B_android#view#View_E@", "The view corresponding to the currently selected item, or null if nothing is selected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract View getSelectedView ()"}, "dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The SparseArray in which to save the view's state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to prevent freezing of any views created by the adapter.", "history": "Added in API level 1", "FullName": "protected void dispatchSaveInstanceState (SparseArray<Parcelable> container)"}, "dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The SparseArray which holds previously saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to prevent thawing of any views created by the adapter.", "history": "Added in API level 1", "FullName": "protected void dispatchRestoreInstanceState (SparseArray<Parcelable> container)"}, "removeView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void removeView (View child)"}, "AdapterView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AdapterView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "AdapterView.OnItemSelectedListener: The callback that will run This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an item in this AdapterView has been selected.", "history": "Added in API level 1", "FullName": "public void setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener)"}, "getCount()": {"Returns": [["int", "The number of items owned by the Adapter associated with this AdapterView. (This is the number of data items, which may be larger than the number of visible views.)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getCount ()"}, "getItemIdAtPosition(int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public long getItemIdAtPosition (int position)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setAdapter(T)": {"Returns": [], "Parameters": [["T", "T: The adapter to use to create this view's content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides the data and the views to represent the data in this widget.", "history": "Added in API level 1", "FullName": "public abstract void setAdapter (T adapter)"}, "setEmptyView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view to show if the adapter is empty", "history": "Added in API level 1", "FullName": "public void setEmptyView (View emptyView)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "getSelectedItem()": {"Returns": [["@B_java#lang#Object_E@", "The data corresponding to the currently selected item, or null if there is nothing selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Object getSelectedItem ()"}, "addView(android.view.View,int,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."], ["int", "int: Ignored."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void addView (View child, int index, ViewGroup.LayoutParams params)"}, "performItemClick(android.view.View, int, long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "added in API level 1", "FullName": "public boolean performItemClick (View view, int position, long id)"}, "addView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void addView (View child)"}, "removeAllViews()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void removeAllViews ()"}, "removeViewAt(int)": {"Returns": [], "Parameters": [["int", "int: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void removeViewAt (int index)"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently selected item. To support accessibility subclasses that override this method must invoke the overridden super method first.", "history": "Added in API level 1", "FullName": "public abstract void setSelection (int position)"}, "getOnItemLongClickListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemLongClickListener_E@", "The callback to be invoked with an item in this AdapterView has been clicked and held, or null if no callback has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final AdapterView.OnItemLongClickListener getOnItemLongClickListener ()"}, "AdapterView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AdapterView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "addView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Ignored."], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: Ignored."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "Every time this method is invoked."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not supported and throws an UnsupportedOperationException when called.", "history": "Added in API level 1", "FullName": "public void addView (View child, ViewGroup.LayoutParams params)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "@B_android#widget#Adapter_E@", "ClassDesc": "An AdapterView is a view whose children are determined by an @B_android#widget#Adapter_E@. See @B_android#widget#ListView_E@, @B_android#widget#GridView_E@, @B_android#widget#Spinner_E@ and @B_android#widget#Gallery_E@ for commonly used subclasses of AdapterView."}