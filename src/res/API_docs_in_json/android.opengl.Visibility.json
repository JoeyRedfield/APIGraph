{"Functions": {"visibilityTest(float[],int,float[],int,char[],int,int)": {"Returns": [["int", "2 if all of the mesh is visible, 1 if some part of the mesh is visible, 0 if no part is visible."]], "Parameters": [["float[]", "float: the world space to screen space transform matrix, as an OpenGL column matrix."], ["int", "int: an index into the ws array where the data starts."], ["float[]", "float: the vertex positions (x, y, z)."], ["int", "int: the index in the positions array where the data starts."], ["char[]", "char: the indices of the triangle list. The indices are expressed as chars because they are unsigned 16-bit values."], ["int", "int: the index in the indices array where the index data starts."], ["int", "int: the number of indices in use. Typically a multiple of three. If not a multiple of three, the remaining one or two indices will be ignored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if ws is null, wsOffset < 0, positions is null, positionsOffset < 0, indices is null, indicesOffset < 0, indicesOffset > indices.length - indexCount"]], "SeeAlso": [], "Permissions": [], "Description": "Test whether a given triangle mesh is visible on the screen. The mesh is specified as an indexed triangle list.", "history": "Added in API level 3", "FullName": "public static int visibilityTest (float[] ws, int wsOffset, float[] positions, int positionsOffset, char[] indices, int indicesOffset, int indexCount)"}, "Visibility()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public Visibility ()"}, "frustumCullSpheres(float[],int,float[],int,int,int[],int,int)": {"Returns": [["int", "the number of spheres that intersected the frustum. Can be larger than resultsCapacity, in which case only the first resultsCapacity results are written into the results array."]], "Parameters": [["float[]", "float: a float array containing the mode-view-projection matrix"], ["int", "int: The offset of the mvp data within the mvp array."], ["float[]", "float: a float array containing the sphere data."], ["int", "int: an offset into the sphere array where the sphere data starts"], ["int", "int: the number of spheres to cull."], ["int[]", "int: an integer array containing the indices of the spheres that are either contained entirely within or intersect the frustum."], ["int", "int: an offset into the results array where the results start."], ["int", "int: the number of array elements available for storing results."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if mvp is null, mvpOffset < 0, mvpOffset > mvp.length - 16, spheres is null, spheresOffset < 0, spheresOffset > spheres.length - sphereCount, results is null, resultsOffset < 0, resultsOffset > results.length - resultsCapacity."]], "SeeAlso": [], "Permissions": [], "Description": "Given an OpenGL ES ModelView-Projection matrix (which implicitly describes a frustum) and a list of spheres, determine which spheres intersect the frustum. A ModelView-Projection matrix can be computed by multiplying the a Projection matrix by the a ModelView matrix (in that order.). There are several possible ways to obtain the current ModelView and Projection matrices. The most generally applicable way is to keep track of the current matrices in application code. If that is not convenient, there are two optional OpenGL ES extensions which may be used to read the current matrices from OpenGL ES: GL10Ext.glQueryMatrixxOES GL11.GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES and GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES The problem with reading back the matrices is that your application will only work with devices that support the extension(s) that it uses. A frustum is a six-sided truncated pyramid that defines the portion of world space that is visible in the view. Spheres are described as four floating point values: x, y, z, and r, in world-space coordinates. R is the radius of the sphere.", "history": "Added in API level 3", "FullName": "public static int frustumCullSpheres (float[] mvp, int mvpOffset, float[] spheres, int spheresOffset, int spheresCount, int[] results, int resultsOffset, int resultsCapacity)"}, "computeBoundingSphere(float[],int,int,float[],int)": {"Returns": [], "Parameters": [["float[]", "float: positions in x, y, z triples"], ["int", "int: offset into positions array"], ["int", "int: number of position triples to process"], ["float[]", "float: array containing the output as (x, y, z, r)"], ["int", "int: offset where the sphere data will be written"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if positions is null, positionsOffset < 0, positionsOffset > positions.length - positionsCount, sphere is null, sphereOffset < 0, sphereOffset > sphere.length - 4."]], "SeeAlso": [], "Permissions": [], "Description": "Compute a bounding sphere for a set of points. It is approximately the minimal bounding sphere of an axis-aligned box that bounds the points.", "history": "Added in API level 3", "FullName": "public static void computeBoundingSphere (float[] positions, int positionsOffset, int positionsCount, float[] sphere, int sphereOffset)"}}, "Inheritance": [], "ClassName": "android.opengl.Visibility", "ClassDesc": "A collection of utility methods for computing the visibility of triangle meshes."}