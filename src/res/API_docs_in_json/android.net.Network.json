{"Functions": {"getNetworkHandle()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a handle representing this Network, for use with the NDK API.", "history": "Added in API level 23", "FullName": "public long getNetworkHandle ()"}, "fromNetworkHandle(long)": {"Returns": [["@B_android#net#Network_E@", "A @B_android#net#Network_E@ object derived from networkHandle."]], "Parameters": [["long", "long: a handle returned from @B_android#net#Network#getNetworkHandle_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#net#Network_E@ object given a handle returned from @B_android#net#Network#getNetworkHandle_E@.", "history": "Added in API level 28", "FullName": "public static Network fromNetworkHandle (long networkHandle)"}, "openConnection(java.net.URL, java.net.Proxy)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection to the resource referred to by this URL."]], "Parameters": [["@B_java#net#URL_E@", "URL no parameter comment"], ["@B_java#net#Proxy_E@", "Proxy: the proxy through which the connection will be established."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if the URL protocol is not HTTP or HTTPS."], ["@B_java#lang#IllegalArgumentException_E@", "if the argument proxy is null."], ["@B_java#io#IOException_E@", "if an error occurs while opening the connection."]], "SeeAlso": ["@B_java#net#URL#openConnection_E@"], "Permissions": [], "Description": "Opens the specified @B_java#net#URL_E@ on this Network, such that all traffic will be sent on this Network. The URL protocol must be HTTP or HTTPS.", "history": "added in API level 23", "FullName": "public URLConnection openConnection (URL url, Proxy proxy)"}, "getAllByName(java.lang.String)": {"Returns": [["@B_java#net#InetAddress_E@", "the array of addresses associated with the specified host."]], "Parameters": [["@B_java#lang#String_E@", "String: the hostname or literal IP string to be resolved."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if the address lookup fails."]], "SeeAlso": [], "Permissions": [], "Description": "Operates the same as InetAddress.getAllByName except that host resolution is done on this network.", "history": "Added in API level 21", "FullName": "public InetAddress[] getAllByName (String host)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "openConnection(java.net.URL)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection to the resource referred to by this URL."]], "Parameters": [["@B_java#net#URL_E@", "URL no parameter comment"]], "Throws": [["@B_java#net#MalformedURLException_E@", "if the URL protocol is not HTTP or HTTPS."], ["@B_java#io#IOException_E@", "if an error occurs while opening the connection."]], "SeeAlso": ["@B_java#net#URL#openConnection_E@"], "Permissions": [], "Description": "Opens the specified @B_java#net#URL_E@ on this Network, such that all traffic will be sent on this Network. The URL protocol must be HTTP or HTTPS.", "history": "Added in API level 21", "FullName": "public URLConnection openConnection (URL url)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getSocketFactory()": {"Returns": [["@B_javax#net#SocketFactory_E@", "a @B_javax#net#SocketFactory_E@ which produces @B_java#net#Socket_E@ instances bound to this Network."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_javax#net#SocketFactory_E@ bound to this network. Any @B_java#net#Socket_E@ created by this factory will have its traffic sent over this Network. Note that if this Network ever disconnects, this factory and any @B_java#net#Socket_E@ it produced in the past or future will cease to work.", "history": "Added in API level 21", "FullName": "public SocketFactory getSocketFactory ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "bindSocket(java.net.Socket)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "Socket no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the specified @B_java#net#Socket_E@ to this Network. All data traffic on the socket will be sent on this Network, irrespective of any process-wide network binding set by @B_android#net#ConnectivityManager#bindProcessToNetwork_E@. The socket must not be connected.", "history": "Added in API level 21", "FullName": "public void bindSocket (Socket socket)"}, "getByName(java.lang.String)": {"Returns": [["@B_java#net#InetAddress_E@", "the InetAddress instance representing the host."]], "Parameters": [["@B_java#lang#String_E@", "String: the hostname to be resolved to an address or null."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if the address lookup fails."]], "SeeAlso": [], "Permissions": [], "Description": "Operates the same as InetAddress.getByName except that host resolution is done on this network.", "history": "Added in API level 21", "FullName": "public InetAddress getByName (String host)"}, "openConnection(java.net.URL,java.net.Proxy)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection to the resource referred to by this URL."]], "Parameters": [["@B_java#net#URL_E@", "URL no parameter comment"], ["@B_java#net#Proxy_E@", "Proxy: the proxy through which the connection will be established."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if the URL protocol is not HTTP or HTTPS."], ["@B_java#lang#IllegalArgumentException_E@", "if the argument proxy is null."], ["@B_java#io#IOException_E@", "if an error occurs while opening the connection."]], "SeeAlso": ["@B_java#net#URL#openConnection_E@"], "Permissions": [], "Description": "Opens the specified @B_java#net#URL_E@ on this Network, such that all traffic will be sent on this Network. The URL protocol must be HTTP or HTTPS.", "history": "Added in API level 23", "FullName": "public URLConnection openConnection (URL url, Proxy proxy)"}, "bindSocket(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the specified @B_java#io#FileDescriptor_E@ to this Network. All data traffic on the socket represented by this file descriptor will be sent on this Network, irrespective of any process-wide network binding set by @B_android#net#ConnectivityManager#bindProcessToNetwork_E@. The socket must not be connected.", "history": "Added in API level 23", "FullName": "public void bindSocket (FileDescriptor fd)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "bindSocket(java.net.DatagramSocket)": {"Returns": [], "Parameters": [["@B_java#net#DatagramSocket_E@", "DatagramSocket no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the specified @B_java#net#DatagramSocket_E@ to this Network. All data traffic on the socket will be sent on this Network, irrespective of any process-wide network binding set by @B_android#net#ConnectivityManager#bindProcessToNetwork_E@. The socket must not be connected.", "history": "Added in API level 22", "FullName": "public void bindSocket (DatagramSocket socket)"}}, "Inheritance": [], "ClassName": "android.net.Network", "ClassDesc": "Identifies a Network. This is supplied to applications via @B_android#net#ConnectivityManager#NetworkCallback_E@ in response to the active @B_android#net#ConnectivityManager#requestNetwork_E@ or passive @B_android#net#ConnectivityManager#registerNetworkCallback_E@ calls. It is used to direct traffic to the given Network, either on a @B_java#net#Socket_E@ basis through a targeted @B_javax#net#SocketFactory_E@ or process-wide via @B_android#net#ConnectivityManager#bindProcessToNetwork_E@."}