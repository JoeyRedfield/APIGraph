{"Functions": {"handle(javax.security.auth.callback.Callback[])": {"Returns": [], "Parameters": [["@B_javax#security#auth#callback#Callback_E@", "Callback: an array of Callback objects provided by an underlying security service which contains the information requested to be retrieved or displayed."]], "Throws": [["@B_java#io#IOException_E@", "if an input or output error occurs."], ["@B_javax#security#auth#callback#UnsupportedCallbackException_E@", "if the implementation of this method does not support one or more of the Callbacks specified in the callbacks parameter."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve or display the information requested in the provided Callbacks. The handle method implementation checks the instance(s) of the Callback object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an handle method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.", "history": "Added in API level 1", "FullName": "public abstract void handle (Callback[] callbacks)"}}, "Inheritance": [], "ClassName": "javax.security.auth.callback.CallbackHandler", "ClassDesc": "An application implements a CallbackHandler and passes it to underlying security services so that they may interact with the application to retrieve specific authentication data, such as usernames and passwords, or to display certain information, such as error and warning messages. CallbackHandlers are implemented in an application-dependent fashion. For example, implementations for an application with a graphical user interface (GUI) may pop up windows to prompt for requested information or to display error messages. An implementation may also choose to obtain requested information from an alternate source without asking the end user. Underlying security services make requests for different types of information by passing individual Callbacks to the CallbackHandler. The CallbackHandler implementation decides how to retrieve and display information depending on the Callbacks passed to it. For example, if the underlying service needs a username and password to authenticate a user, it uses a NameCallback and PasswordCallback. The CallbackHandler can then choose to prompt for a username and password serially, or to prompt for both in a single window. A default CallbackHandler class implementation may be specified by setting the value of the auth.login.defaultCallbackHandler security property. If the security property is set to the fully qualified name of a CallbackHandler implementation class, then a LoginContext will load the specified CallbackHandler and pass it to the underlying LoginModules. The LoginContext only loads the default handler if it was not provided one. All default handler implementations must provide a public zero-argument constructor."}