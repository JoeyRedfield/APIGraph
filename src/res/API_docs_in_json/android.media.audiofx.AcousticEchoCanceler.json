{"Functions": {"isAvailable()": {"Returns": [["boolean", "true if the device implements acoustic echo cancellation, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the device implements acoustic echo cancellation.", "history": "Added in API level 16", "FullName": "public static boolean isAvailable ()"}, "create(int)": {"Returns": [["@B_android#media#audiofx#AcousticEchoCanceler_E@", "AcousticEchoCanceler created or null if the device does not implement AEC."]], "Parameters": [["int", "int: system wide unique audio session identifier. The AcousticEchoCanceler will be applied to the AudioRecord with the same audio session."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an AcousticEchoCanceler and attaches it to the AudioRecord on the audio session specified.", "history": "Added in API level 16", "FullName": "public static AcousticEchoCanceler create (int audioSession)"}}, "Inheritance": ["@B_android#media#audiofx#AudioEffect_E@"], "ClassName": "android.media.audiofx.AcousticEchoCanceler", "ClassDesc": "Acoustic Echo Canceler (AEC). Acoustic Echo Canceler (AEC) is an audio pre-processor which removes the contribution of the signal received from the remote party from the captured audio signal. AEC is used by voice communication applications (voice chat, video conferencing, SIP calls) where the presence of echo with significant delay in the signal received from the remote party is highly disturbing. AEC is often used in conjunction with noise suppression (NS). An application creates an AcousticEchoCanceler object to instantiate and control an AEC engine in the audio capture path. To attach the AcousticEchoCanceler to a particular @B_android#media#AudioRecord_E@, specify the audio session ID of this AudioRecord when creating the AcousticEchoCanceler. The audio session is retrieved by calling @B_android#media#AudioRecord#getAudioSessionId_E@ on the AudioRecord instance. On some devices, an AEC can be inserted by default in the capture path by the platform according to the @B_android#media#MediaRecorder#AudioSource_E@ used. The application should call AcousticEchoCanceler.getEnable() after creating the AEC to check the default AEC activation state on a particular AudioRecord session. See @B_android#media#audiofx#AudioEffect_E@ class for more details on controlling audio effects."}