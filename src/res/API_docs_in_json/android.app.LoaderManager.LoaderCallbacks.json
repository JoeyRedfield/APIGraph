{"Functions": {"onLoaderReset(android.content.Loader<D>)": {"Returns": [], "Parameters": [["@B_android#content#Loader_E@", "Loader: The Loader that is being reset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a previously created loader is being reset, and thus making its data unavailable. The application should at this point remove any references it has to the Loader's data.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void onLoaderReset (Loader<D> loader)"}, "onLoadFinished(android.content.Loader<D>, D)": {"Returns": [], "Parameters": [["@B_android#content#Loader_E@", "Loader: The Loader that has finished."], ["D", "D: The data generated by the Loader."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a previously created loader has finished its load. Note that normally an application is not allowed to commit fragment transactions while in this call, since it can happen after an activity's state is saved. See @B_android#app#FragmentManager#beginTransaction_E@ for further discussion on this. This function is guaranteed to be called prior to the release of the last data that was supplied for this Loader. At this point you should remove all use of the old data (since it will be released soon), but should not do your own release of the data since its Loader owns it and will take care of that. The Loader will take care of management of its data so you don't have to. In particular: The Loader will monitor for changes to the data, and report them to you through new calls here. You should not monitor the data yourself. For example, if the data is a @B_android#database#Cursor_E@ and you place it in a @B_android#widget#CursorAdapter_E@, use the @B_android#widget#CursorAdapter#CursorAdapter_E@ constructor without passing in either @B_android#widget#CursorAdapter#FLAG_AUTO_REQUERY_E@ or @B_android#widget#CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER_E@ (that is, use 0 for the flags argument). This prevents the CursorAdapter from doing its own observing of the Cursor, which is not needed since when a change happens you will get a new Cursor throw another call here. The Loader will release the data once it knows the application is no longer using it. For example, if the data is a @B_android#database#Cursor_E@ from a @B_android#content#CursorLoader_E@, you should not call close() on it yourself. If the Cursor is being placed in a @B_android#widget#CursorAdapter_E@, you should use the @B_android#widget#CursorAdapter#swapCursor_E@ method so that the old Cursor is not closed.", "history": "added in API level 11", "FullName": "public abstract void onLoadFinished (Loader<D> loader, D data)"}, "onCreateLoader(int,android.os.Bundle)": {"Returns": [["@B_android#content#Loader_E@", "Return a new Loader instance that is ready to start loading."]], "Parameters": [["int", "int: The ID whose loader is to be created."], ["@B_android#os#Bundle_E@", "Bundle: Any arguments supplied by the caller."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instantiate and return a new Loader for the given ID.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Loader<D> onCreateLoader (int id, Bundle args)"}, "onLoadFinished(android.content.Loader<D>,D)": {"Returns": [], "Parameters": [["@B_android#content#Loader_E@", "Loader: The Loader that has finished."], ["D", "D: The data generated by the Loader."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a previously created loader has finished its load. Note that normally an application is not allowed to commit fragment transactions while in this call, since it can happen after an activity's state is saved. See @B_android#app#FragmentManager#beginTransaction_E@ for further discussion on this. This function is guaranteed to be called prior to the release of the last data that was supplied for this Loader. At this point you should remove all use of the old data (since it will be released soon), but should not do your own release of the data since its Loader owns it and will take care of that. The Loader will take care of management of its data so you don't have to. In particular: The Loader will monitor for changes to the data, and report them to you through new calls here. You should not monitor the data yourself. For example, if the data is a @B_android#database#Cursor_E@ and you place it in a @B_android#widget#CursorAdapter_E@, use the @B_android#widget#CursorAdapter#CursorAdapter_E@ constructor without passing in either @B_android#widget#CursorAdapter#FLAG_AUTO_REQUERY_E@ or @B_android#widget#CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER_E@ (that is, use 0 for the flags argument). This prevents the CursorAdapter from doing its own observing of the Cursor, which is not needed since when a change happens you will get a new Cursor throw another call here. The Loader will release the data once it knows the application is no longer using it. For example, if the data is a @B_android#database#Cursor_E@ from a @B_android#content#CursorLoader_E@, you should not call close() on it yourself. If the Cursor is being placed in a @B_android#widget#CursorAdapter_E@, you should use the @B_android#widget#CursorAdapter#swapCursor_E@ method so that the old Cursor is not closed.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void onLoadFinished (Loader<D> loader, D data)"}, "onCreateLoader(int, android.os.Bundle)": {"Returns": [["@B_android#content#Loader_E@", "Return a new Loader instance that is ready to start loading."]], "Parameters": [["int", "int: The ID whose loader is to be created."], ["@B_android#os#Bundle_E@", "Bundle: Any arguments supplied by the caller."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instantiate and return a new Loader for the given ID.", "history": "added in API level 11", "FullName": "public abstract Loader<D> onCreateLoader (int id, Bundle args)"}}, "Inheritance": [], "ClassName": "android.app.LoaderManager.LoaderCallbacks<D>", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#LoaderManager#LoaderCallbacks_E@ Callback interface for a client to interact with the manager."}