{"Functions": {"onGetRoot(java.lang.String,int,android.os.Bundle)": {"Returns": [["@B_android#service#media#MediaBrowserService#BrowserRoot_E@", "The @B_android#service#media#MediaBrowserService#BrowserRoot_E@ for accessing this app's content or null."]], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the application which is requesting access to browse media. This value must never be null."], ["int", "int: The uid of the application which is requesting access to browse media."], ["@B_android#os#Bundle_E@", "Bundle: An optional bundle of service-specific arguments to send to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#service#media#MediaBrowserService#BrowserRoot_E@"], "Permissions": [], "Description": "Called to get the root information for browsing by a particular client. The implementation should verify that the client package has permission to access browse media information before returning the root id; it should return null if the client is not allowed to access this information.", "history": "Added in API level 21", "FullName": "public abstract MediaBrowserService.BrowserRoot onGetRoot (String clientPackageName, int clientUid, Bundle rootHints)"}, "onLoadItem(java.lang.String,android.service.media.MediaBrowserService.Result<android.media.browse.MediaBrowser.MediaItem>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id for the specific @B_android#media#browse#MediaBrowser#MediaItem_E@."], ["@B_android#service#media#MediaBrowserService#Result_E@", "Result: The Result to send the item to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get information about a specific media item. Implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@. If loading the item will be an expensive operation @B_android#service#media#MediaBrowserService#Result#detach_E@ may be called before returning from this function, and then @B_android#service#media#MediaBrowserService#Result#sendResult_E@ called when the item has been loaded. When the given itemId is invalid, implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with null. The default implementation will invoke @B_android#media#browse#MediaBrowser#ItemCallback#onError_E@.", "history": "Added in API level 23", "FullName": "public void onLoadItem (String itemId, Result<MediaBrowser.MediaItem> result)"}, "getCurrentBrowserInfo()": {"Returns": [["@B_android#media#session#MediaSessionManager#RemoteUserInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If this method is called outside of @B_android#service#media#MediaBrowserService#onGetRoot_E@ or @B_android#service#media#MediaBrowserService#onLoadChildren_E@ or @B_android#service#media#MediaBrowserService#onLoadItem_E@."]], "SeeAlso": ["@B_android#media#session#MediaSessionManager#isTrustedForMediaControl_E@"], "Permissions": [], "Description": "Gets the browser information who sent the current request.", "history": "Added in API level 28", "FullName": "public final MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo ()"}, "notifyChildrenChanged(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id of the parent media item whose children changed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.", "history": "Added in API level 21", "FullName": "public void notifyChildrenChanged (String parentId)"}, "onLoadChildren(java.lang.String,android.service.media.MediaBrowserService.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>>,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id of the parent media item whose children are to be queried. This value must never be null."], ["@B_android#service#media#MediaBrowserService#Result_E@", "Result: The Result to send the list of children to. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: The bundle of service-specific arguments sent from the media browser. The information returned through the result should be affected by the contents of this bundle. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get information about the children of a media item. Implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with the list of children. If loading the children will be an expensive operation that should be performed on another thread, @B_android#service#media#MediaBrowserService#Result#detach_E@ may be called before returning from this function, and then @B_android#service#media#MediaBrowserService#Result#sendResult_E@ called when the loading is complete. In case the media item does not have any children, call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with an empty list. When the given parentId is invalid, implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with null, which will invoke @B_android#media#browse#MediaBrowser#SubscriptionCallback#onError_E@.", "history": "Added in API level 24", "FullName": "public void onLoadChildren (String parentId, Result<List<MediaBrowser.MediaItem>> result, Bundle options)"}, "getSessionToken()": {"Returns": [["@B_android#media#session#MediaSession#Token_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the session token, or null if it has not yet been created or if it has been destroyed.", "history": "Added in API level 21", "FullName": "public MediaSession.Token getSessionToken ()"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Service's state into the given stream. This gets invoked if you run \"adb shell dumpsys activity service <yourservicename>\" (note that for this command to work, the service must be running, and you must specify a fully-qualified service name). This is distinct from \"dumpsys <servicename>\", which only works for named system services and which invokes the @B_android#os#IBinder#dump_E@ method on the @B_android#os#IBinder_E@ interface registered with ServiceManager.", "history": "Added in API level 21", "FullName": "public void dump (FileDescriptor fd, PrintWriter writer, String[] args)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 21", "FullName": "public IBinder onBind (Intent intent)"}, "notifyChildrenChanged(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id of the parent media item whose children changed. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: The bundle of service-specific arguments to send to the media browser. The contents of this bundle may contain the information about the change. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.", "history": "Added in API level 24", "FullName": "public void notifyChildrenChanged (String parentId, Bundle options)"}, "getBrowserRootHints()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If this method is called outside of @B_android#service#media#MediaBrowserService#onGetRoot_E@ or @B_android#service#media#MediaBrowserService#onLoadChildren_E@ or @B_android#service#media#MediaBrowserService#onLoadItem_E@."]], "SeeAlso": ["@B_android#service#media#MediaBrowserService#BrowserRoot_E@"], "Permissions": [], "Description": "Gets the root hints sent from the currently connected @B_android#media#browse#MediaBrowser_E@. The root hints are service-specific arguments included in an optional bundle sent to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing.", "history": "Added in API level 24", "FullName": "public final Bundle getBrowserRootHints ()"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the service is first created. Do not call this method directly.", "history": "Added in API level 21", "FullName": "public void onCreate ()"}, "onLoadChildren(java.lang.String,android.service.media.MediaBrowserService.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id of the parent media item whose children are to be queried. This value must never be null."], ["@B_android#service#media#MediaBrowserService#Result_E@", "Result: The Result to send the list of children to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get information about the children of a media item. Implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with the list of children. If loading the children will be an expensive operation that should be performed on another thread, @B_android#service#media#MediaBrowserService#Result#detach_E@ may be called before returning from this function, and then @B_android#service#media#MediaBrowserService#Result#sendResult_E@ called when the loading is complete. In case the media item does not have any children, call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with an empty list. When the given parentId is invalid, implementations must call @B_android#service#media#MediaBrowserService#Result#sendResult_E@ with null, which will invoke @B_android#media#browse#MediaBrowser#SubscriptionCallback#onError_E@.", "history": "Added in API level 21", "FullName": "public abstract void onLoadChildren (String parentId, Result<List<MediaBrowser.MediaItem>> result)"}, "setSessionToken(android.media.session.MediaSession.Token)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaSession#Token_E@", "MediaSession.Token: The token for the service's @B_android#media#session#MediaSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call to set the media session. This should be called as soon as possible during the service's startup. It may only be called once.", "history": "Added in API level 21", "FullName": "public void setSessionToken (MediaSession.Token token)"}, "MediaBrowserService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public MediaBrowserService ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.media.MediaBrowserService", "ClassDesc": "Base class for media browser services. Media browser services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a @B_android#media#session#MediaSession_E@. To extend this class, you must declare the service in your manifest file with an intent filter with the @B_android#service#media#MediaBrowserService#SERVICE_INTERFACE_E@ action. For example:"}