{"Functions": {"requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new @B_org#apache#http#impl#conn#tsccm#PoolEntryRequest_E@, from which a @B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@ can be obtained, or the request can be aborted.", "history": "Added in API level 1", "FullName": "public PoolEntryRequest requestPoolEntry (HttpRoute route, Object state)"}, "handleLostEntry(org.apache.http.conn.routing.HttpRoute)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route of the pool entry that was lost"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles cleaning up for a lost pool entry with the given route. A lost pool entry corresponds to a connection that was garbage collected instead of being properly released.", "history": "Added in API level 1", "FullName": "protected void handleLostEntry (HttpRoute route)"}, "getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, java.lang.Object)": {"Returns": [["", "an available pool entry for the given route, or null if none is available"]], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#RouteSpecificPool_E@", "the route-specific pool from which to get an entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If available, get a free pool entry for a route.", "history": "Added in API level 1", "FullName": "protected BasicPoolEntry getFreeEntry (RouteSpecificPool rospl, Object state)"}, "getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getConnectionsInPool (HttpRoute route)"}, "getRoutePool(org.apache.http.conn.routing.HttpRoute, boolean)": {"Returns": [["", "the pool for the argument route, never null if create is true"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route"], ["boolean", "whether to create the pool if it doesn't exist"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a route-specific pool of available connections.", "history": "Added in API level 1", "FullName": "protected RouteSpecificPool getRoutePool (HttpRoute route, boolean create)"}, "deleteClosedConnections()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes all entries for closed connections.", "history": "Added in API level 1", "FullName": "public void deleteClosedConnections ()"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shuts down this pool and all associated resources. Overriding methods MUST call the implementation here!", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, org.apache.http.conn.ClientConnectionOperator)": {"Returns": [["", "the new pool entry for a new connection"]], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#RouteSpecificPool_E@", "the route-specific pool for which to create the entry"], ["@B_org#apache#http#conn#ClientConnectionOperator_E@", "the operator for creating a connection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new pool entry. This method assumes that the new connection will be handed out immediately.", "history": "Added in API level 1", "FullName": "protected BasicPoolEntry createEntry (RouteSpecificPool rospl, ClientConnectionOperator op)"}, "freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the entry for the connection to release"], ["boolean", "true if the entry is deemed reusable, false otherwise."], ["long", "The duration that the entry should remain free and reusable."], ["@B_java#util#concurrent#TimeUnit_E@", "The unit of time the duration is measured in."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an entry into the pool. The connection of the entry is expected to be in a suitable state, either open and re-usable, or closed. The pool will not make any attempt to determine whether it can be re-used or not.", "history": "Added in API level 1", "FullName": "public void freeEntry (BasicPoolEntry entry, boolean reusable, long validDuration, TimeUnit timeUnit)"}, "ConnPoolByRoute(org.apache.http.conn.ClientConnectionOperator, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new connection pool, managed by route.", "history": "Added in API level 1", "FullName": "public ConnPoolByRoute (ClientConnectionOperator operator, HttpParams params)"}, "notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#RouteSpecificPool_E@", "the pool in which to notify, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies a waiting thread that a connection is available. This will wake a thread waiting in the specific route pool, if there is one. Otherwise, a thread in the connection pool will be notified.", "history": "Added in API level 1", "FullName": "protected void notifyWaitingThread (RouteSpecificPool rospl)"}, "newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute)": {"Returns": [["", "the new pool"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new route-specific pool. Called by @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute#getRoutePool_E@ when necessary.", "history": "Added in API level 1", "FullName": "protected RouteSpecificPool newRouteSpecificPool (HttpRoute route)"}, "newWaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool)": {"Returns": [["", "a waiting thread representation"]], "Parameters": [["@B_java#util#concurrent#locks#Condition_E@", "the condition to wait for"], ["@B_org#apache#http#impl#conn#tsccm#RouteSpecificPool_E@", "the route specific pool, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new waiting thread. Called by @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute#getRoutePool_E@ when necessary.", "history": "Added in API level 1", "FullName": "protected WaitingThread newWaitingThread (Condition cond, RouteSpecificPool rospl)"}, "createRouteToPoolMap()": {"Returns": [["", "a map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the map for @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute#routeToPool_E@. Called once by the constructor.", "history": "Added in API level 1", "FullName": "protected Map<HttpRoute, RouteSpecificPool> createRouteToPoolMap ()"}, "deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the pool entry for the connection to delete"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes a given pool entry. This closes the pooled connection and removes all references, so that it can be GCed.", "history": "Added in API level 1", "FullName": "protected void deleteEntry (BasicPoolEntry entry)"}, "deleteLeastUsedEntry()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Delete an old, free pool entry to make room for a new one. Used to replace pool entries with ones for a different route.", "history": "Added in API level 1", "FullName": "protected void deleteLeastUsedEntry ()"}, "getEntryBlocking(org.apache.http.conn.routing.HttpRoute, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.impl.conn.tsccm.WaitingThreadAborter)": {"Returns": [["", "pool entry holding a connection for the route"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route for which to get the connection"], ["long", "the timeout, 0 or negative for no timeout"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit for the timeout, may be null only if there is no timeout"], ["@B_org#apache#http#impl#conn#tsccm#WaitingThreadAborter_E@", "an object which can abort a @B_org#apache#http#impl#conn#tsccm#WaitingThread_E@."]], "Throws": [["@B_org#apache#http#conn#ConnectionPoolTimeoutException_E@", "if the timeout expired"], ["@B_java#lang#InterruptedException_E@", "if the calling thread was interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a pool entry with a connection within the given timeout. If a @B_org#apache#http#impl#conn#tsccm#WaitingThread_E@ is used to block, @B_org#apache#http#impl#conn#tsccm#WaitingThreadAborter#setWaitingThread_E@ must be called before blocking, to allow the thread to be interrupted.", "history": "Added in API level 1", "FullName": "protected BasicPoolEntry getEntryBlocking (HttpRoute route, Object state, long timeout, TimeUnit tunit, WaitingThreadAborter aborter)"}, "createFreeConnQueue()": {"Returns": [["", "a queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the queue for @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute#freeConnections_E@. Called once by the constructor.", "history": "Added in API level 1", "FullName": "protected Queue<BasicPoolEntry> createFreeConnQueue ()"}, "createWaitingThreadQueue()": {"Returns": [["", "a queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the queue for @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute#waitingThreads_E@. Called once by the constructor.", "history": "Added in API level 1", "FullName": "protected Queue<WaitingThread> createWaitingThreadQueue ()"}}, "Inheritance": ["@B_org#apache#http#impl#conn#tsccm#AbstractConnPool_E@"], "ClassName": "org.apache.http.impl.conn.tsccm.ConnPoolByRoute", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A connection pool that maintains connections by route. This class is derived from MultiThreadedHttpConnectionManager in HttpClient 3.x, see there for original authors. It implements the same algorithm for connection re-use and connection-per-host enforcement: connections are re-used only for the exact same route connection limits are enforced per route rather than per host Note that access to the pool datastructures is synchronized via the @B_org#apache#http#impl#conn#tsccm#AbstractConnPool#poolLock_E@ in the base class, not via synchronized methods."}