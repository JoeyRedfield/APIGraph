{"Functions": {"getCurrentPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getCurrentPosition ()"}, "VideoView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public VideoView (Context context, AttributeSet attrs)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "VideoView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public VideoView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "canSeekForward()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public boolean canSeekForward ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setMediaController(android.widget.MediaController)": {"Returns": [], "Parameters": [["@B_android#widget#MediaController_E@", "MediaController no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setMediaController (MediaController controller)"}, "getDuration()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getDuration ()"}, "getAudioSessionId()": {"Returns": [["int", "The audio session, or 0 if there was an error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the audio session id for the player used by this VideoView. This can be used to apply audio effects to the audio track of a video.", "history": "Added in API level 18", "FullName": "public int getAudioSessionId ()"}, "canSeekBackward()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public boolean canSeekBackward ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void start ()"}, "VideoView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public VideoView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setVideoURI(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI of the video."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets video URI.", "history": "Added in API level 1", "FullName": "public void setVideoURI (Uri uri)"}, "setAudioAttributes(android.media.AudioAttributes)": {"Returns": [], "Parameters": [["@B_android#media#AudioAttributes_E@", "AudioAttributes: non-null AudioAttributes. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#media#AudioAttributes_E@ to be used during the playback of the video.", "history": "Added in API level 26", "FullName": "public void setAudioAttributes (AudioAttributes attributes)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setVideoPath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the path of the video."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets video path.", "history": "Added in API level 1", "FullName": "public void setVideoPath (String path)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "seekTo(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void seekTo (int msec)"}, "stopPlayback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void stopPlayback ()"}, "resolveAdjustedSize(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int resolveAdjustedSize (int desiredSize, int measureSpec)"}, "pause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void pause ()"}, "setAudioFocusRequest(int)": {"Returns": [], "Parameters": [["int", "int: the type of audio focus gain that will be requested, or @B_android#media#AudioManager#AUDIOFOCUS_NONE_E@ to disable the use audio focus during playback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets which type of audio focus will be requested during the playback, or configures playback to not request audio focus. Valid values for focus requests are @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@, and @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_E@. Or use @B_android#media#AudioManager#AUDIOFOCUS_NONE_E@ to express that audio focus should not be requested when playback starts. You can for instance use this when playing a silent animation through this class, and you don't want to affect other audio applications playing in the background.", "history": "Added in API level 26", "FullName": "public void setAudioFocusRequest (int focusGain)"}, "isPlaying()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isPlaying ()"}, "setVideoURI(android.net.Uri,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI of the video."], ["@B_java#util#Map_E@", "Map: the headers for the URI request. Note that the cross domain redirection is allowed by default, but that can be changed with key/value pairs through the headers parameter with \"android-allow-cross-domain-redirect\" as the key and \"0\" or \"1\" as the value to disallow or allow cross domain redirection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets video URI using specific headers.", "history": "Added in API level 21", "FullName": "public void setVideoURI (Uri uri, Map<String, String> headers)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle trackball motion events. The relative movement of the trackball since the last event can be retrieve with @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@. These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).", "history": "Added in API level 1", "FullName": "public boolean onTrackballEvent (MotionEvent ev)"}, "setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaPlayer#OnCompletionListener_E@", "MediaPlayer.OnCompletionListener: The callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the end of a media file has been reached during playback.", "history": "Added in API level 1", "FullName": "public void setOnCompletionListener (MediaPlayer.OnCompletionListener l)"}, "setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaPlayer#OnPreparedListener_E@", "MediaPlayer.OnPreparedListener: The callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the media file is loaded and ready to go.", "history": "Added in API level 1", "FullName": "public void setOnPreparedListener (MediaPlayer.OnPreparedListener l)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "canPause()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public boolean canPause ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "resolveAdjustedSize(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public int resolveAdjustedSize (int desiredSize, int measureSpec)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "addSubtitleSource(java.io.InputStream,android.media.MediaFormat)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: input stream containing the subtitle data. It will be closed by the media framework."], ["@B_android#media#MediaFormat_E@", "MediaFormat: the format of the subtitle track(s). Must contain at least the mime type (@B_android#media#MediaFormat#KEY_MIME_E@) and the language (@B_android#media#MediaFormat#KEY_LANGUAGE_E@) of the file. If the file itself contains the language information, specify \"und\" for the language."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an external subtitle source file (from the provided input stream.) Note that a single external subtitle source may contain multiple or no supported tracks in it. If the source contained at least one track in it, one will receive an @B_android#media#MediaPlayer#MEDIA_INFO_METADATA_UPDATE_E@ info message. Otherwise, if reading the source takes excessive time, one will receive a @B_android#media#MediaPlayer#MEDIA_INFO_SUBTITLE_TIMED_OUT_E@ message. If the source contained no supported track (including an empty source file or null input stream), one will receive a @B_android#media#MediaPlayer#MEDIA_INFO_UNSUPPORTED_SUBTITLE_E@ message. One can find the total number of available tracks using @B_android#media#MediaPlayer#getTrackInfo_E@ to see what additional tracks become available after this method call.", "history": "Added in API level 19", "FullName": "public void addSubtitleSource (InputStream is, MediaFormat format)"}, "suspend()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 8", "FullName": "public void suspend ()"}, "VideoView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public VideoView (Context context)"}, "getBufferPercentage()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getBufferPercentage ()"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 8", "FullName": "public void resume ()"}, "setOnErrorListener(android.media.MediaPlayer.OnErrorListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaPlayer#OnErrorListener_E@", "MediaPlayer.OnErrorListener: The callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an error occurs during playback or setup. If no listener is specified, or if the listener returned false, VideoView will inform the user of any errors.", "history": "Added in API level 1", "FullName": "public void setOnErrorListener (MediaPlayer.OnErrorListener l)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setOnInfoListener(android.media.MediaPlayer.OnInfoListener)": {"Returns": [], "Parameters": [["@B_android#media#MediaPlayer#OnInfoListener_E@", "MediaPlayer.OnInfoListener: The callback that will be run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an informational event occurs during playback or setup.", "history": "Added in API level 17", "FullName": "public void setOnInfoListener (MediaPlayer.OnInfoListener l)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#SurfaceView_E@"], "ClassName": "android.widget.VideoView", "ClassDesc": "Displays a video file. The VideoView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the video so that it can be used in any layout manager, and provides various display options such as scaling and tinting. Note: VideoView does not retain its full state when going into the background. In particular, it does not restore the current play state, play position, selected tracks, or any subtitle tracks added via @B_android#widget#VideoView#addSubtitleSource_E@. Applications should save and restore these on their own in @B_android#app#Activity#onSaveInstanceState_E@ and @B_android#app#Activity#onRestoreInstanceState_E@. Also note that the audio session id (from @B_android#widget#VideoView#getAudioSessionId_E@) may change from its previously returned value when the VideoView is restored. By default, VideoView requests audio focus with @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@. Use @B_android#widget#VideoView#setAudioFocusRequest_E@ to change this behavior. The default @B_android#media#AudioAttributes_E@ used during playback have a usage of @B_android#media#AudioAttributes#USAGE_MEDIA_E@ and a content type of @B_android#media#AudioAttributes#CONTENT_TYPE_MOVIE_E@, use @B_android#widget#VideoView#setAudioAttributes_E@ to modify them."}