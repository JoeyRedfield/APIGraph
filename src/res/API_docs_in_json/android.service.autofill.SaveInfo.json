{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 26", "FullName": "public String toString ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 26", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 26", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 26", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}}, "Inheritance": [], "ClassName": "android.service.autofill.SaveInfo", "ClassDesc": "Information used to indicate that an @B_android#service#autofill#AutofillService_E@ is interested on saving the user-inputed data for future use, through a @B_android#service#autofill#AutofillService#onSaveRequest_E@ call. A @B_android#service#autofill#SaveInfo_E@ is always associated with a @B_android#service#autofill#FillResponse_E@, and it contains at least two pieces of information: Typically, the @B_android#service#autofill#SaveInfo_E@ contains the same ids as the @B_android#service#autofill#Dataset_E@: The save type flags are used to display the appropriate strings in the autofill save UI. You can pass multiple values, but try to keep it short if possible. In the above example, just SaveInfo.SAVE_DATA_TYPE_PASSWORD would be enough. There might be cases where the @B_android#service#autofill#AutofillService_E@ knows how to fill the screen, but the user has no data for it. In that case, the @B_android#service#autofill#FillResponse_E@ should contain just the @B_android#service#autofill#SaveInfo_E@, but no @B_android#service#autofill#Dataset_E@: There might be cases where the user data in the @B_android#service#autofill#AutofillService_E@ is enough to populate some fields but not all, and the service would still be interested on saving the other fields. In that case, the service could set the @B_android#service#autofill#SaveInfo#Builder#setOptionalIds_E@ as well: The @B_android#service#autofill#AutofillService#onSaveRequest_E@ can be triggered after any of the following events: The @B_android#app#Activity_E@ finishes. The app explicitly calls @B_android#view#autofill#AutofillManager#commit_E@. All required views become invisible (if the @B_android#service#autofill#SaveInfo_E@ was created with the @B_android#service#autofill#SaveInfo#FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE_E@ flag). The user clicks a specific view (defined by @B_android#service#autofill#SaveInfo#Builder#setTriggerId_E@. But it is only triggered when all conditions below are met: The @B_android#service#autofill#SaveInfo_E@ associated with the @B_android#service#autofill#FillResponse_E@ is not null neither has the @B_android#service#autofill#SaveInfo#FLAG_DELAY_SAVE_E@ flag. The @B_android#view#autofill#AutofillValue_E@s of all required views (as set by the requiredIds passed to the @B_android#service#autofill#SaveInfo#Builder_E@ constructor are not empty. The @B_android#view#autofill#AutofillValue_E@ of at least one view (be it required or optional) has changed (i.e., it's neither the same value passed in a @B_android#service#autofill#Dataset_E@, nor the initial value presented in the view). There is no @B_android#service#autofill#Dataset_E@ in the last @B_android#service#autofill#FillResponse_E@ that completely matches the screen state (i.e., all required and optional fields in the dataset have the same value as the fields in the screen). The user explicitly tapped the autofill save UI asking to save data for autofill. The service can also customize some aspects of the autofill save UI: Add a simple subtitle by calling @B_android#service#autofill#SaveInfo#Builder#setDescription_E@. Add a customized subtitle by calling @B_android#service#autofill#SaveInfo#Builder#setCustomDescription_E@. Customize the button used to reject the save request by calling @B_android#service#autofill#SaveInfo#Builder#setNegativeAction_E@. Decide whether the UI should be shown based on the user input validation by calling @B_android#service#autofill#SaveInfo#Builder#setValidator_E@."}