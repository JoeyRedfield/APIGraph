{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). This implementation first gets a list iterator pointing to the indexed element (with Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "AbstractSequentialList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "protected AbstractSequentialList ()"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list. This implementation first gets a list iterator pointing to the indexed element (with", "history": "Added in API level 1", "FullName": "public E get (int index)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation). This implementation first gets a list iterator pointing to the indexed element (with Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) This implementation gets an iterator over the specified collection and a list iterator over this list pointing to the indexed element (with Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list (in proper sequence). This implementation merely returns a list iterator over the list.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [["int", "int: index of first element to be returned from the list iterator (by a call to the next method)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence).", "history": "Added in API level 1", "FullName": "public abstract ListIterator<E> listIterator (int index)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). This implementation first gets a list iterator pointing to the indexed element (with Note that this implementation will throw an", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation). This implementation first gets a list iterator pointing to the indexed element (with Note that this implementation will throw an", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) This implementation gets an iterator over the specified collection and a list iterator over this list pointing to the indexed element (with Note that this implementation will throw an", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "remove(int)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. This implementation first gets a list iterator pointing to the indexed element (with Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public E remove (int index)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractList_E@"], "ClassName": "java.util.AbstractSequentialList<E>", "ClassDesc": "This class provides a skeletal implementation of the This class is the opposite of the To implement a list the programmer needs only to extend this class and provide implementations for the For a modifiable list the programmer should additionally implement the list iterator's The programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the This class is a member of the"}