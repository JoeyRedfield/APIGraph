{"Functions": {"setAdd(android.support.v8.renderscript.Float4)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Float4_E@", "Float4: The float4 value to be added."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0}", "history": "added in version 23.0.0", "FullName": "void setAdd (Float4 f)"}, "ScriptIntrinsicColorMatrix(long, android.support.v8.renderscript.RenderScript)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "ScriptIntrinsicColorMatrix (long id, RenderScript rs)"}, "setColorMatrix(android.support.v8.renderscript.Matrix4f)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Matrix4f_E@", "Matrix4f: The 4x4 matrix to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color matrix which will be applied to each cell of the image.", "history": "added in version 23.0.0", "FullName": "void setColorMatrix (Matrix4f m)"}, "create(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element)": {"Returns": [["@B_android#support#v8#renderscript#ScriptIntrinsicColorMatrix_E@", "ScriptIntrinsicColorMatrix"]], "Parameters": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"], ["@B_android#support#v8#renderscript#Element_E@", "Element: Element type for intputs and outputs"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intrinsic for applying a color matrix to an allocation. Supported elements types are @B_android#support#v8#renderscript#Element#U8_4_E@", "history": "added in version 23.0.0", "FullName": "ScriptIntrinsicColorMatrix create (RenderScript rs, Element e)"}, "setYUVtoRGB()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert from YUV to RGB with a direct copy of the 4th channel.", "history": "added in version 23.0.0", "FullName": "void setYUVtoRGB ()"}, "setColorMatrix(android.support.v8.renderscript.Matrix3f)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Matrix3f_E@", "Matrix3f: The 3x3 matrix to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color matrix which will be applied to each cell of the image. This will set the alpha channel to be a copy.", "history": "added in version 23.0.0", "FullName": "void setColorMatrix (Matrix3f m)"}, "setAdd(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The red add value."], ["float", "float: The green add value."], ["float", "float: The blue add value."], ["float", "float: The alpha add value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0}", "history": "added in version 23.0.0", "FullName": "void setAdd (float r, float g, float b, float a)"}, "setGreyscale()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.", "history": "added in version 23.0.0", "FullName": "void setGreyscale ()"}, "forEach(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Script.LaunchOptions)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: Input allocation"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: Output allocation"], ["@B_android#support#v8#renderscript#Script#LaunchOptions_E@", "Script.LaunchOptions: LaunchOptions for clipping"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoke the kernel and apply the matrix to each cell of input @B_android#support#v8#renderscript#Allocation_E@ and copy to the output @B_android#support#v8#renderscript#Allocation_E@. If the vector size of the input is less than four, the remaining components are treated as zero for the matrix multiply. If the output vector size is less than four, the unused vector components are discarded.", "history": "added in version 23.0.0", "FullName": "void forEach (Allocation ain, Allocation aout, Script.LaunchOptions opt)"}, "getKernelID()": {"Returns": [["@B_android#support#v8#renderscript#Script#KernelID_E@", "Script.KernelID The KernelID object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a KernelID for this intrinsic kernel.", "history": "added in version 23.0.0", "FullName": "Script.KernelID getKernelID ()"}, "forEach(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: Input allocation"], ["@B_android#support#v8#renderscript#Allocation_E@", "Allocation: Output allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoke the kernel and apply the matrix to each cell of ain and copy to aout.", "history": "added in version 23.0.0", "FullName": "void forEach (Allocation ain, Allocation aout)"}, "setRGBtoYUV()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert from RGB to YUV with a direct copy of the 4th channel.", "history": "added in version 23.0.0", "FullName": "void setRGBtoYUV ()"}}, "Inheritance": ["@B_android#support#v8#renderscript#BaseObj_E@", "@B_android#support#v8#renderscript#Script_E@", "@B_android#support#v8#renderscript#ScriptIntrinsic_E@"], "ClassName": "android.support.v8.renderscript.ScriptIntrinsicColorMatrix", "ClassDesc": "Intrinsic for applying a color matrix to allocations. This has the same effect as loading each element and converting it to a @B_android#support#v8#renderscript#Element#F32_4_E@, multiplying the result by the 4x4 color matrix as performed by rsMatrixMultiply() and writing it to the output after conversion back to @B_android#support#v8#renderscript#Element#U8_4_E@."}