{"Functions": {"gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)": {"Returns": [], "Parameters": [["@B_javax#microedition#khronos#opengles#GL10_E@", "GL10: a GL10 interface"], ["float", "float: eye point X"], ["float", "float: eye point Y"], ["float", "float: eye point Z"], ["float", "float: center of view X"], ["float", "float: center of view Y"], ["float", "float: center of view Z"], ["float", "float: up vector X"], ["float", "float: up vector Y"], ["float", "float: up vector Z"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Define a viewing transformation in terms of an eye point, a center of view, and an up vector.", "history": "Added in API level 1", "FullName": "public static void gluLookAt (GL10 gl, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)"}, "gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)": {"Returns": [["int", "A return value of GL_TRUE indicates success, a return value of GL_FALSE indicates failure."]], "Parameters": [["float", "float: object coordinates X"], ["float", "float: object coordinates Y"], ["float", "float: object coordinates Z"], ["float[]", "float: the current modelview matrix"], ["int", "int: the offset into the model array where the modelview maxtrix data starts."], ["float[]", "float: the current projection matrix"], ["int", "int: the offset into the project array where the project matrix data starts."], ["int[]", "int: the current view, {x, y, width, height}"], ["int", "int: the offset into the view array where the view vector data starts."], ["float[]", "float: the output vector {winX, winY, winZ}, that returns the computed window coordinates."], ["int", "int: the offset into the win array where the win vector data starts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Map object coordinates into window coordinates. gluProject transforms the specified object coordinates into window coordinates using model, proj, and view. The result is stored in win. Note that you can use the OES_matrix_get extension, if present, to get the current modelView and projection matrices.", "history": "Added in API level 1", "FullName": "public static int gluProject (float objX, float objY, float objZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] win, int winOffset)"}, "gluErrorString(int)": {"Returns": [["@B_java#lang#String_E@", "the error string for the input error code, or NULL if the input was not a valid GL or GLU error code."]], "Parameters": [["int", "int: - a GL or GLU error code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an error string from a GL or GLU error code.", "history": "Added in API level 1", "FullName": "public static String gluErrorString (int error)"}, "gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set up a 2D orthographic projection matrix", "history": "Added in API level 1", "FullName": "public static void gluOrtho2D (GL10 gl, float left, float right, float bottom, float top)"}, "gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)": {"Returns": [], "Parameters": [["@B_javax#microedition#khronos#opengles#GL10_E@", "GL10: a GL10 interface"], ["float", "float: specifies the field of view angle, in degrees, in the Y direction."], ["float", "float: specifies the aspect ration that determins the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height)."], ["float", "float: specifies the distance from the viewer to the near clipping plane (always positive)."], ["float", "float: specifies the distance from the viewer to the far clipping plane (always positive)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set up a perspective projection matrix", "history": "Added in API level 1", "FullName": "public static void gluPerspective (GL10 gl, float fovy, float aspect, float zNear, float zFar)"}, "GLU()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public GLU ()"}, "gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)": {"Returns": [["int", "A return value of GL10.GL_TRUE indicates success, a return value of GL10.GL_FALSE indicates failure."]], "Parameters": [["float", "float: window coordinates X"], ["float", "float: window coordinates Y"], ["float", "float: window coordinates Z"], ["float[]", "float: the current modelview matrix"], ["int", "int: the offset into the model array where the modelview maxtrix data starts."], ["float[]", "float: the current projection matrix"], ["int", "int: the offset into the project array where the project matrix data starts."], ["int[]", "int: the current view, {x, y, width, height}"], ["int", "int: the offset into the view array where the view vector data starts."], ["float[]", "float: the output vector {objX, objY, objZ, objW}, that returns the computed homogeneous object coordinates."], ["int", "int: the offset into the obj array where the obj vector data starts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Map window coordinates to object coordinates. gluUnProject maps the specified window coordinates into object coordinates using model, proj, and view. The result is stored in obj. Note that you can use the OES_matrix_get extension, if present, to get the current modelView and projection matrices.", "history": "Added in API level 1", "FullName": "public static int gluUnProject (float winX, float winY, float winZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] obj, int objOffset)"}}, "Inheritance": [], "ClassName": "android.opengl.GLU", "ClassDesc": "A set of GL utilities inspired by the OpenGL Utility Toolkit."}