{"Functions": {"setMaxDeliveryLatency(int, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["int", "the maximum interval between detection and reporting of events"], ["TimeUnit", "unit for the given interval. Intervals can be specified in up to microsecond granularity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum latency between a data point being detected and reported to the application. The max delivery latency is passed along to the underlying data source and used to enable batching. Batching can save battery by reducing the number of times the Application Processor is awaken, and the number of network transfers for external data sources. The max latency is a hint to the system, and events can be received faster or slower than the specified interval. If no interval is specified, or if the underlying data source does not support batching, events are reported as soon as they are detected. Example usage:", "history": "", "FullName": "public SensorRequest.Builder setMaxDeliveryLatency (int interval, TimeUnit unit)"}, "setFastestRate(int, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["int", "the fastest interval between data points, in the given unit"], ["TimeUnit", "unit for the interval. Intervals can be specified in up to microsecond granularity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fastest interval between two consecutive data points, in the given unit. The system will not deliver data points faster than this rate, even if they're passively available from other applications. Example:", "history": "", "FullName": "public SensorRequest.Builder setFastestRate (int fastestInterval, TimeUnit unit)"}, "setDataType(com.google.android.gms.fitness.data.DataType)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#fitness#data#DataType_E@", "the data type for which we want to receive live events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the data type for the request. This can be used instead of @B_com#google#android#gms#fitness#request#SensorRequest#Builder#setDataSource_E@ to use a default data source for the request, based on the data type and the available data sources. It's not necessary to set the data type if the data source is also set.", "history": "", "FullName": "public SensorRequest.Builder setDataType (DataType dataType)"}, "setTimeout(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the timeout duration after which the registration expires"], ["TimeUnit", "unit for the timeout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the timeout for the registration for the sensor request to expire. Registration for this sensor request will automatically expire after this time and app will stop getting live sensor updates. This timeout is intended to avoid situations where an app fails to unregister from a sensor request. If apps do not set a timeout value, a default timeout will be chosen for the sensor registration request to expire.", "history": "", "FullName": "public SensorRequest.Builder setTimeout (long timeout, TimeUnit timeUnit)"}, "setDataSource(com.google.android.gms.fitness.data.DataSource)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#fitness#data#DataSource_E@", "the data source from which we want to receive live events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the specific data source for this registration. Either this method or @B_com#google#android#gms#fitness#request#SensorRequest#Builder#setDataType_E@ must be called to specify the data source for each request.", "history": "", "FullName": "public SensorRequest.Builder setDataSource (DataSource dataSource)"}, "SensorRequest.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public SensorRequest.Builder ()"}, "build()": {"Returns": [], "Parameters": [], "Throws": [["IllegalStateException", "if the builder doesn't have enough data to build a valid request"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes building and returns the request.", "history": "", "FullName": "public SensorRequest build ()"}, "setSamplingRate(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the desired interval between data points, in the given unit"], ["TimeUnit", "unit for the interval. Intervals can be specified in up to microsecond granularity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the desired interval between two consecutive data points, in the given unit. This is only a hint to the system. Events may be received faster or slower than the specified rate (usually faster). Example:", "history": "", "FullName": "public SensorRequest.Builder setSamplingRate (long interval, TimeUnit unit)"}, "setAccuracyMode(int)": {"Returns": [], "Parameters": [["int", "the accuracy mode to be passed to the data sources"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the accuracy policy (mode) expected by the application. The Accuracy mode is passed along to the underlying data source. Setting this value has a direct impact in battery usage: i.e. a high accuracy can improve the quality of the data collected at the expense of higher battery consumption. The accuracy mode is a hint to the system. If no accuracy is specified, or if the underlying data source does not support it, a balanced policy is used. Example usage:", "history": "", "FullName": "public SensorRequest.Builder setAccuracyMode (int accuracyMode)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.request.SensorRequest.Builder", "ClassDesc": "Builder used to create new SensorRequests."}