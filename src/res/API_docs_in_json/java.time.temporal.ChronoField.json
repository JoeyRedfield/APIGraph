{"Functions": {"isDateBased()": {"Returns": [["boolean", "true if it is a component of a date"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this field represents a component of a date. Fields from day-of-week to era are date-based.", "history": "Added in API level 26", "FullName": "public boolean isDateBased ()"}, "range()": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. This method returns the range of the field in the ISO-8601 calendar system. This range may be incorrect for other calendar systems. Use @B_java#time#chrono#Chronology#range_E@ to access the correct range for a different calendar system. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field.", "history": "Added in API level 26", "FullName": "public ValueRange range ()"}, "isSupportedBy(java.time.temporal.TemporalAccessor)": {"Returns": [["boolean", "true if the date-time can be queried for this field, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to query, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this field is supported by the temporal object. This determines whether the temporal accessor supports this field. If this returns false, then the temporal cannot be queried for this field. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#TemporalAccessor#isSupported_E@: isSupported(TemporalField), as it is a lot clearer to read in code. Implementations should determine whether they are supported using the fields available in @B_java#time#temporal#ChronoField_E@.", "history": "Added in API level 26", "FullName": "public boolean isSupportedBy (TemporalAccessor temporal)"}, "checkValidIntValue(long)": {"Returns": [["int", "the value that was passed in"]], "Parameters": [["long", "long: the value to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified value is valid and fits in an int. This validates that the value is within the outer range of valid values returned by @B_java#time#temporal#ChronoField#range_E@. It also checks that all valid values are within the bounds of an int. This method checks against the range of the field in the ISO-8601 calendar system. This range may be incorrect for other calendar systems. Use @B_java#time#chrono#Chronology#range_E@ to access the correct range for a different calendar system.", "history": "Added in API level 26", "FullName": "public int checkValidIntValue (long value)"}, "adjustInto(R,long)": {"Returns": [["R", "the adjusted temporal object, not null"]], "Parameters": [["R", "R: the temporal object to adjust, not null"], ["long", "long: the new value of the field"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the specified temporal object with the value of this field set. This returns a new temporal object based on the specified one with the value for this field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object has the same observable type as the specified object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the implementation is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#with_E@: with(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in @B_java#time#temporal#ChronoField_E@. If the field is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.", "history": "Added in API level 26", "FullName": "public R adjustInto (R temporal, long newValue)"}, "isTimeBased()": {"Returns": [["boolean", "true if it is a component of a time"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this field represents a component of a time. Fields from nano-of-second to am-pm-of-day are time-based.", "history": "Added in API level 26", "FullName": "public boolean isTimeBased ()"}, "getFrom(java.time.temporal.TemporalAccessor)": {"Returns": [["long", "the value of this field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to query, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of this field from the specified temporal object. This queries the temporal object for the value of this field. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#TemporalAccessor#getLong_E@ (or @B_java#time#temporal#TemporalAccessor#get_E@): getLong(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in @B_java#time#temporal#ChronoField_E@. If the field is not supported an UnsupportedTemporalTypeException must be thrown.", "history": "Added in API level 26", "FullName": "public long getFrom (TemporalAccessor temporal)"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the display name for the locale or a suitable default, not null"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the display name for the field in the requested locale. If there is no display name for the locale then a suitable default must be returned. The default implementation must check the locale is not null and return toString().", "history": "Added in API level 26", "FullName": "public String getDisplayName (Locale locale)"}, "values()": {"Returns": [["@B_java#time#temporal#ChronoField_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static final ChronoField[] values ()"}, "rangeRefinedBy(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for this field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object used to refine the result, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the range of valid values for this field using the temporal object to refine the result. This uses the temporal object to find the range of valid values for the field. This is similar to @B_java#time#temporal#TemporalField#range_E@, however this method refines the result using the temporal. For example, if the field is DAY_OF_MONTH the range method is not accurate as there are four possible month lengths, 28, 29, 30 and 31 days. Using this method with a date allows the range to be accurate, returning just one of those four options. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#TemporalAccessor#range_E@: range(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in @B_java#time#temporal#ChronoField_E@. If the field is not supported an UnsupportedTemporalTypeException must be thrown.", "history": "Added in API level 26", "FullName": "public ValueRange rangeRefinedBy (TemporalAccessor temporal)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the name of this enum constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this enum constant, as contained in the declaration. This method may be overridden, though it typically isn't necessary or desirable. An enum type should override this method when a more \"programmer-friendly\" string form exists.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "adjustInto(R, long)": {"Returns": [["R", "the adjusted temporal object, not null"]], "Parameters": [["R", "R: the temporal object to adjust, not null"], ["long", "long: the new value of the field"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the specified temporal object with the value of this field set. This returns a new temporal object based on the specified one with the value for this field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object has the same observable type as the specified object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the implementation is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#with_E@: with(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in @B_java#time#temporal#ChronoField_E@. If the field is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.", "history": "added in API level 26", "FullName": "public R adjustInto (R temporal, long newValue)"}, "checkValidValue(long)": {"Returns": [["long", "the value that was passed in"]], "Parameters": [["long", "long: the value to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks that the specified value is valid for this field. This validates that the value is within the outer range of valid values returned by @B_java#time#temporal#ChronoField#range_E@. This method checks against the range of the field in the ISO-8601 calendar system. This range may be incorrect for other calendar systems. Use @B_java#time#chrono#Chronology#range_E@ to access the correct range for a different calendar system.", "history": "Added in API level 26", "FullName": "public long checkValidValue (long value)"}, "getBaseUnit()": {"Returns": [["@B_java#time#temporal#TemporalUnit_E@", "the unit defining the base unit of the field, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unit that the field is measured in. The unit of the field is the period that varies within the range. For example, in the field 'MonthOfYear', the unit is 'Months'. See also @B_java#time#temporal#TemporalField#getRangeUnit_E@.", "history": "Added in API level 26", "FullName": "public TemporalUnit getBaseUnit ()"}, "getRangeUnit()": {"Returns": [["@B_java#time#temporal#TemporalUnit_E@", "the unit defining the range of the field, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range that the field is bound by. The range of the field is the period that the field varies within. For example, in the field 'MonthOfYear', the range is 'Years'. See also @B_java#time#temporal#TemporalField#getBaseUnit_E@. The range is never null. For example, the 'Year' field is shorthand for 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.", "history": "Added in API level 26", "FullName": "public TemporalUnit getRangeUnit ()"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#temporal#ChronoField_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static ChronoField valueOf (String name)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.time.temporal.ChronoField", "ClassDesc": "A standard set of fields. This set of fields provide field-based access to manipulate a date, time or date-time. The standard set of fields can be extended by implementing @B_java#time#temporal#TemporalField_E@. These fields are intended to be applicable in multiple calendar systems. For example, most non-ISO calendar systems define dates as a year, month and day, just with slightly different rules. The documentation of each field explains how it operates."}