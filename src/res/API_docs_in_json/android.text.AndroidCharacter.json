{"Functions": {"getDirectionalities(char[],byte[],int)": {"Returns": [], "Parameters": [["char[]", "char no parameter comment"], ["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill in the first count bytes of dest with the directionalities from the first count chars of src. This is just like Character.getDirectionality() except it is a batch operation.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public static void getDirectionalities (char[] src, byte[] dest, int count)"}, "mirror(char[],int,int)": {"Returns": [["boolean", "true if replacements were made"]], "Parameters": [["char[]", "char: array of characters to apply mirror operation"], ["int", "int: first character in array to mirror"], ["int", "int: maximum number of characters to mirror"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replace the specified slice of text with the chars' right-to-left mirrors (if any), returning true if any replacements were made.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public static boolean mirror (char[] text, int start, int count)"}, "getEastAsianWidths(char[], int, int, byte[])": {"Returns": [], "Parameters": [["char[]", "char: character array of input to measure"], ["int", "int: first character in array to measure"], ["int", "int: maximum number of characters to measure"], ["byte[]", "byte: byte array of results for each character in src"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the first count bytes of dest with the East Asian Width from count chars of src starting at start. East Asian Width is calculated based on dest will be one of @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NEUTRAL_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_AMBIGUOUS_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_HALF_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_FULL_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NARROW_E@, or @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_WIDE_E@.", "history": "added in API level 8", "FullName": "public static void getEastAsianWidths (char[] src, int start, int count, byte[] dest)"}, "mirror(char[], int, int)": {"Returns": [["boolean", "true if replacements were made"]], "Parameters": [["char[]", "char: array of characters to apply mirror operation"], ["int", "int: first character in array to mirror"], ["int", "int: maximum number of characters to mirror"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replace the specified slice of text with the chars' right-to-left mirrors (if any), returning true if any replacements were made.", "history": "added in API level 1", "FullName": "public static boolean mirror (char[] text, int start, int count)"}, "getDirectionalities(char[], byte[], int)": {"Returns": [], "Parameters": [["char[]", "char no parameter comment"], ["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill in the first count bytes of dest with the directionalities from the first count chars of src. This is just like Character.getDirectionality() except it is a batch operation.", "history": "added in API level 1", "FullName": "public static void getDirectionalities (char[] src, byte[] dest, int count)"}, "getEastAsianWidth(char)": {"Returns": [["int", "the East Asian Width for input"]], "Parameters": [["char", "char: the character to measure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculate the East Asian Width of a character according to @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NEUTRAL_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_AMBIGUOUS_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_HALF_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_FULL_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NARROW_E@, or @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_WIDE_E@.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public static int getEastAsianWidth (char input)"}, "AndroidCharacter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public AndroidCharacter ()"}, "getEastAsianWidths(char[],int,int,byte[])": {"Returns": [], "Parameters": [["char[]", "char: character array of input to measure"], ["int", "int: first character in array to measure"], ["int", "int: maximum number of characters to measure"], ["byte[]", "byte: byte array of results for each character in src"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fill the first count bytes of dest with the East Asian Width from count chars of src starting at start. East Asian Width is calculated based on dest will be one of @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NEUTRAL_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_AMBIGUOUS_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_HALF_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_FULL_WIDTH_E@, @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_NARROW_E@, or @B_android#text#AndroidCharacter#EAST_ASIAN_WIDTH_WIDE_E@.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public static void getEastAsianWidths (char[] src, int start, int count, byte[] dest)"}, "getMirror(char)": {"Returns": [["char", "no returns description in source"]], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the right-to-left mirror (or the original char if none) of the specified char.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public static char getMirror (char ch)"}}, "Inheritance": [], "ClassName": "android.text.AndroidCharacter", "ClassDesc": "Use various methods from @B_android#icu#lang#UCharacter_E@, instead. AndroidCharacter exposes some character properties that used to be not easily accessed from java.lang.Character, but are now available in ICU."}