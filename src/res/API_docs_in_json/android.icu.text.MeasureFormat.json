{"Functions": {"formatMeasurePerUnit(android.icu.util.Measure,android.icu.util.MeasureUnit,java.lang.StringBuilder,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuilder_E@", "appendTo."]], "Parameters": [["@B_android#icu#util#Measure_E@", "Measure: the measure object. In above example, 3.5 meters."], ["@B_android#icu#util#MeasureUnit_E@", "MeasureUnit: the per unit. In above example, it is MeasureUnit.SECOND"], ["@B_java#lang#StringBuilder_E@", "StringBuilder: formatted string appended here."], ["@B_java#text#FieldPosition_E@", "FieldPosition: The field position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a single measure per unit. An example of such a formatted string is \"3.5 meters per second.\"", "history": "Added in API level 26", "FullName": "public StringBuilder formatMeasurePerUnit (Measure measure, MeasureUnit perUnit, StringBuilder appendTo, FieldPosition pos)"}, "getCurrencyFormat(java.util.Locale)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "a formatter object"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: desired @B_java#util#Locale_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a formatter for CurrencyAmount objects in the given @B_java#util#Locale_E@.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getCurrencyFormat (Locale locale)"}, "getCurrencyFormat()": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "a formatter object"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Return a formatter for CurrencyAmount objects in the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getCurrencyFormat ()"}, "formatMeasures(java.lang.StringBuilder,java.text.FieldPosition,android.icu.util.Measure...)": {"Returns": [["@B_java#lang#StringBuilder_E@", "appendTo."]], "Parameters": [["@B_java#lang#StringBuilder_E@", "StringBuilder: the formatted string appended here."], ["@B_java#text#FieldPosition_E@", "FieldPosition: Identifies a field in the formatted text."], ["@B_android#icu#util#Measure_E@", "Measure: the measures to format."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#MeasureFormat#formatMeasures_E@"], "Permissions": [], "Description": "Formats a sequence of measures. If the fieldPosition argument identifies a NumberFormat field, then its indices are set to the beginning and end of the first such field encountered. MeasureFormat itself does not supply any fields.", "history": "Added in API level 24", "FullName": "public StringBuilder formatMeasures (StringBuilder appendTo, FieldPosition fpos, Measure... measures)"}, "getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "The new MeasureFormat object."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale."], ["@B_android#icu#text#MeasureFormat#FormatWidth_E@", "MeasureFormat.FormatWidth: hints how long formatted strings should be."], ["@B_android#icu#text#NumberFormat_E@", "NumberFormat: This is defensively copied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a format from the locale, formatWidth, and format.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getInstance (ULocale locale, MeasureFormat.FormatWidth formatWidth, NumberFormat format)"}, "getCurrencyFormat(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "a formatter object"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: desired locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a formatter for CurrencyAmount objects in the given locale.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getCurrencyFormat (ULocale locale)"}, "getNumberFormat()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a copy of the number format.", "history": "Added in API level 24", "FullName": "public NumberFormat getNumberFormat ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Two MeasureFormats, a and b, are equal if and only if they have the same formatWidth, locale, and equal number formats.", "history": "Added in API level 24", "FullName": "public final boolean equals (Object other)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the string buffer passed in as toAppendTo, with formatted text appended"]], "Parameters": [["@B_java#lang#Object_E@", "Object: must be a Collection<? extends Measure>, Measure[], or Measure object."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: Formatted string appended here."], ["@B_java#text#FieldPosition_E@", "FieldPosition: Identifies a field in the formatted text."]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Able to format Collection<? extends Measure>, Measure[], and Measure by delegating to formatMeasures. If the pos argument identifies a NumberFormat field, then its indices are set to the beginning and end of the first such field encountered. MeasureFormat itself does not supply any fields. Calling a formatMeasures method is preferred over calling this method as they give better performance.", "history": "Added in API level 24", "FullName": "public StringBuffer format (Object obj, StringBuffer toAppendTo, FieldPosition fpos)"}, "getUnitDisplayName(android.icu.util.MeasureUnit)": {"Returns": [["@B_java#lang#String_E@", "The display name in the locale and width specified in @B_android#icu#text#MeasureFormat#getInstance_E@, or null if there is no display name available for the specified unit."]], "Parameters": [["@B_android#icu#util#MeasureUnit_E@", "MeasureUnit: The unit for which to get a display name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the display name of the specified @B_android#icu#util#MeasureUnit_E@ corresponding to the current locale and format width.", "history": "Added in API level 28", "FullName": "public String getUnitDisplayName (MeasureUnit unit)"}, "getInstance(java.util.Locale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "The new MeasureFormat object."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the @B_java#util#Locale_E@."], ["@B_android#icu#text#MeasureFormat#FormatWidth_E@", "MeasureFormat.FormatWidth: hints how long formatted strings should be."], ["@B_android#icu#text#NumberFormat_E@", "NumberFormat: This is defensively copied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a format from the @B_java#util#Locale_E@, formatWidth, and format.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getInstance (Locale locale, MeasureFormat.FormatWidth formatWidth, NumberFormat format)"}, "getInstance(java.util.Locale,android.icu.text.MeasureFormat.FormatWidth)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "The new MeasureFormat object."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the @B_java#util#Locale_E@."], ["@B_android#icu#text#MeasureFormat#FormatWidth_E@", "MeasureFormat.FormatWidth: hints how long formatted strings should be."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a format from the @B_java#util#Locale_E@ and formatWidth.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getInstance (Locale locale, MeasureFormat.FormatWidth formatWidth)"}, "getWidth()": {"Returns": [["@B_android#icu#text#MeasureFormat#FormatWidth_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the format width this instance is using.", "history": "Added in API level 24", "FullName": "public MeasureFormat.FormatWidth getWidth ()"}, "getLocale()": {"Returns": [["@B_android#icu#util#ULocale_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the locale of this instance.", "history": "Added in API level 24", "FullName": "public final ULocale getLocale ()"}, "formatMeasures(android.icu.util.Measure...)": {"Returns": [["@B_java#lang#String_E@", "the formatted string."]], "Parameters": [["@B_android#icu#util#Measure_E@", "Measure: a sequence of one or more measures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a sequence of measures. Uses the ListFormatter unit lists. So, for example, one could format \u201c3 feet, 2 inches\u201d. Zero values are formatted (eg, \u201c3 feet, 0 inches\u201d). It is the caller\u2019s responsibility to have the appropriate values in appropriate order, and using the appropriate Number values. Typically the units should be in descending order, with all but the last Measure having integer values (eg, not \u201c3.2 feet, 2 inches\u201d).", "history": "Added in API level 24", "FullName": "public final String formatMeasures (Measure... measures)"}, "getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth)": {"Returns": [["@B_android#icu#text#MeasureFormat_E@", "The new MeasureFormat object."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale."], ["@B_android#icu#text#MeasureFormat#FormatWidth_E@", "MeasureFormat.FormatWidth: hints how long formatted strings should be."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a format from the locale, formatWidth, and format.", "history": "Added in API level 24", "FullName": "public static MeasureFormat getInstance (ULocale locale, MeasureFormat.FormatWidth formatWidth)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public final int hashCode ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@"], "ClassName": "android.icu.text.MeasureFormat", "ClassDesc": "A formatter for Measure objects. To format a Measure object, first create a formatter object using a MeasureFormat factory method. Then use that object's format or formatMeasures methods. Here is sample code: This class does not do conversions from one unit to another. It simply formats whatever units it is given This class is immutable and thread-safe so long as its deprecated subclass, TimeUnitFormat, is never used. TimeUnitFormat is not thread-safe, and is mutable. Although this class has existing subclasses, this class does not support new sub-classes."}