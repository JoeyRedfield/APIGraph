{"Functions": {"descendingKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<K> descendingKeySet ()"}, "headMap(K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "navigableKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<K> navigableKeySet ()"}, "headMap(K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are strictly less than toKey"]], "Parameters": [["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to headMap(toKey, false).", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> headMap (K toKey)"}, "subMap(K, K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> subMap (K fromKey, K toKey)"}, "tailMap(K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "subMap(K, boolean, K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "descendingMap()": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a reverse order view of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. The returned map has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> descendingMap ()"}, "tailMap(K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than or equal to fromKey"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to tailMap(fromKey, true).", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> tailMap (K fromKey)"}, "headMap(K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "subMap(K,boolean,K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "keySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are This method is equivalent to method navigableKeySet.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<K> keySet ()"}, "tailMap(K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "subMap(K,K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "Added in API level 9", "FullName": "public abstract ConcurrentNavigableMap<K, V> subMap (K fromKey, K toKey)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ConcurrentNavigableMap<K, V>", "ClassDesc": "A @B_java#util#concurrent#ConcurrentMap_E@ supporting @B_java#util#NavigableMap_E@ operations, and recursively so for its navigable sub-maps."}