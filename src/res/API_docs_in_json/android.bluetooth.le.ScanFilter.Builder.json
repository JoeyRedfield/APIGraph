{"Functions": {"setServiceData(android.os.ParcelUuid,byte[],byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"], ["byte[]", "byte no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If serviceDataUuid is null or serviceDataMask is null while serviceData is not or serviceDataMask and serviceData has different length."]], "SeeAlso": [], "Permissions": [], "Description": "Set partial filter on service data. For any bit in the mask, set it to 1 if it needs to match the one in service data, otherwise set it to 0 to ignore that bit. The serviceDataMask must have the same length of the serviceData.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setServiceData (ParcelUuid serviceDataUuid, byte[] serviceData, byte[] serviceDataMask)"}, "setManufacturerData(int,byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the manufacturerId is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on on manufacturerData. A negative manufacturerId is considered as invalid id. Note the first two bytes of the manufacturerData is the manufacturerId.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setManufacturerData (int manufacturerId, byte[] manufacturerData)"}, "setManufacturerData(int, byte[], byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["byte[]", "byte no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the manufacturerId is invalid, or manufacturerData is null while manufacturerDataMask is not, or manufacturerData and manufacturerDataMask have different length."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on partial manufacture data. For any bit in the mask, set it the 1 if it needs to match the one in manufacturer data, otherwise set it to 0. The manufacturerDataMask must have the same length of manufacturerData.", "history": "added in API level 21", "FullName": "public ScanFilter.Builder setManufacturerData (int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)"}, "setServiceSolicitationUuid(android.os.ParcelUuid)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "This value will never be null."]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set filter on service solicitation uuid.", "history": "Added in API level 29", "FullName": "public ScanFilter.Builder setServiceSolicitationUuid (ParcelUuid serviceSolicitationUuid)"}, "setServiceSolicitationUuid(android.os.ParcelUuid,android.os.ParcelUuid)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid: can only be null if solicitationUuidMask is null. This value may be null."], ["@B_android#os#ParcelUuid_E@", "ParcelUuid: can be null or a mask with no restriction. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If serviceSolicitationUuid is null but serviceSolicitationUuidMask is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on partial service Solicitation uuid. The SolicitationUuidMask is the bit mask for the serviceSolicitationUuid. Set any bit in the mask to 1 to indicate a match is needed for the bit in serviceSolicitationUuid, and 0 to ignore that bit.", "history": "Added in API level 29", "FullName": "public ScanFilter.Builder setServiceSolicitationUuid (ParcelUuid serviceSolicitationUuid, ParcelUuid solicitationUuidMask)"}, "setDeviceAddress(java.lang.String)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The device Bluetooth address for the filter. It needs to be in the format of \"01:02:03:AB:CD:EF\". The device address can be validated using @B_android#bluetooth#BluetoothAdapter#checkBluetoothAddress_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the deviceAddress is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on device address.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setDeviceAddress (String deviceAddress)"}, "build()": {"Returns": [["@B_android#bluetooth#le#ScanFilter_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the filter cannot be built."]], "SeeAlso": [], "Permissions": [], "Description": "Build @B_android#bluetooth#le#ScanFilter_E@.", "history": "Added in API level 21", "FullName": "public ScanFilter build ()"}, "setServiceData(android.os.ParcelUuid, byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If serviceDataUuid is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set filtering on service data.", "history": "added in API level 21", "FullName": "public ScanFilter.Builder setServiceData (ParcelUuid serviceDataUuid, byte[] serviceData)"}, "setManufacturerData(int,byte[],byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["byte[]", "byte no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the manufacturerId is invalid, or manufacturerData is null while manufacturerDataMask is not, or manufacturerData and manufacturerDataMask have different length."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on partial manufacture data. For any bit in the mask, set it the 1 if it needs to match the one in manufacturer data, otherwise set it to 0. The manufacturerDataMask must have the same length of manufacturerData.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setManufacturerData (int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask)"}, "setServiceUuid(android.os.ParcelUuid)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set filter on service uuid.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setServiceUuid (ParcelUuid serviceUuid)"}, "ScanFilter.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public ScanFilter.Builder ()"}, "setManufacturerData(int, byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the manufacturerId is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on on manufacturerData. A negative manufacturerId is considered as invalid id. Note the first two bytes of the manufacturerData is the manufacturerId.", "history": "added in API level 21", "FullName": "public ScanFilter.Builder setManufacturerData (int manufacturerId, byte[] manufacturerData)"}, "setServiceData(android.os.ParcelUuid,byte[])": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"], ["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If serviceDataUuid is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set filtering on service data.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setServiceData (ParcelUuid serviceDataUuid, byte[] serviceData)"}, "setDeviceName(java.lang.String)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set filter on device name.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setDeviceName (String deviceName)"}, "setServiceUuid(android.os.ParcelUuid,android.os.ParcelUuid)": {"Returns": [["@B_android#bluetooth#le#ScanFilter#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"], ["@B_android#os#ParcelUuid_E@", "ParcelUuid no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If serviceUuid is null but uuidMask is not null."]], "SeeAlso": [], "Permissions": [], "Description": "Set filter on partial service uuid. The uuidMask is the bit mask for the serviceUuid. Set any bit in the mask to 1 to indicate a match is needed for the bit in serviceUuid, and 0 to ignore that bit.", "history": "Added in API level 21", "FullName": "public ScanFilter.Builder setServiceUuid (ParcelUuid serviceUuid, ParcelUuid uuidMask)"}}, "Inheritance": [], "ClassName": "android.bluetooth.le.ScanFilter.Builder", "ClassDesc": "Builder class for @B_android#bluetooth#le#ScanFilter_E@."}