{"Functions": {"getPosition()": {"Returns": [["@B_android#media#MicrophoneInfo#Coordinate3F_E@", "the geometric location of the microphone or @B_android#media#MicrophoneInfo#POSITION_UNKNOWN_E@ if the geometric location is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns A @B_android#media#MicrophoneInfo#Coordinate3F_E@ object that represents the geometric location of microphone in meters, from bottom-left-back corner of appliance. X-axis, Y-axis and Z-axis show as the x, y, z values.", "history": "Added in API level 28", "FullName": "public MicrophoneInfo.Coordinate3F getPosition ()"}, "getIndexInTheGroup()": {"Returns": [["int", "the microphone's index in its group or @B_android#media#MicrophoneInfo#INDEX_IN_THE_GROUP_UNKNOWN_E@ if the index in the group is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns unique index for device within its group.", "history": "Added in API level 28", "FullName": "public int getIndexInTheGroup ()"}, "getDescription()": {"Returns": [["@B_java#lang#String_E@", "the description of the microphone"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns alphanumeric code that uniquely identifies the device.", "history": "Added in API level 28", "FullName": "public String getDescription ()"}, "getMinSpl()": {"Returns": [["float", "the minimum level in dB or @B_android#media#MicrophoneInfo#SPL_UNKNOWN_E@ if minimum SPL is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the level in dB of the minimum SPL that can be registered by the device at 1000Hz.", "history": "Added in API level 28", "FullName": "public float getMinSpl ()"}, "getGroup()": {"Returns": [["int", "the group of the microphone or @B_android#media#MicrophoneInfo#GROUP_UNKNOWN_E@ if the group is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns A device group id that can be used to group together microphones on the same peripheral, attachments or logical groups. Main body is usually group 0.", "history": "Added in API level 28", "FullName": "public int getGroup ()"}, "getType()": {"Returns": [["int", "the device type of the microphone"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the device type identifier of the microphone (e.g AudioDeviceInfo.TYPE_BUILTIN_MIC).", "history": "Added in API level 28", "FullName": "public int getType ()"}, "getSensitivity()": {"Returns": [["float", "the sensitivity of the microphone or @B_android#media#MicrophoneInfo#SENSITIVITY_UNKNOWN_E@ if the sensitivity is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the level in dBFS produced by a 1000Hz tone at 94 dB SPL.", "history": "Added in API level 28", "FullName": "public float getSensitivity ()"}, "getOrientation()": {"Returns": [["@B_android#media#MicrophoneInfo#Coordinate3F_E@", "the orientation of the microphone or @B_android#media#MicrophoneInfo#ORIENTATION_UNKNOWN_E@ if orientation is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns A @B_android#media#MicrophoneInfo#Coordinate3F_E@ object that represents the orientation of microphone. X-axis, Y-axis and Z-axis show as the x, y, z value. The orientation will be normalized such as sqrt(x^2 + y^2 + z^2) equals 1.", "history": "Added in API level 28", "FullName": "public MicrophoneInfo.Coordinate3F getOrientation ()"}, "getChannelMapping()": {"Returns": [["@B_java#util#List_E@", "a @B_android#util#Pair_E@ list for channel mapping"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#util#Pair_E@ list for channel mapping, which indicating how this microphone is used by each channels or a capture stream. For each @B_android#util#Pair_E@, the first value is channel index, the second value is channel mapping type, which could be either @B_android#media#MicrophoneInfo#CHANNEL_MAPPING_DIRECT_E@ or @B_android#media#MicrophoneInfo#CHANNEL_MAPPING_PROCESSED_E@. If a channel has contributions from more than one microphone, it is likely the HAL did some extra processing to combine the sources, but this is to be inferred by the user. Empty list when the MicrophoneInfo is returned by AudioManager.getMicrophones(). At least one entry when the MicrophoneInfo is returned by AudioRecord.getActiveMicrophones().", "history": "Added in API level 28", "FullName": "public List<Pair<Integer, Integer>> getChannelMapping ()"}, "getLocation()": {"Returns": [["int", "the location of the microphone Value is either 0 or a combination of @B_android#media#MicrophoneInfo#LOCATION_UNKNOWN_E@, @B_android#media#MicrophoneInfo#LOCATION_MAINBODY_E@, @B_android#media#MicrophoneInfo#LOCATION_MAINBODY_MOVABLE_E@, and @B_android#media#MicrophoneInfo#LOCATION_PERIPHERAL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the location of the microphone. The return value is one of @B_android#media#MicrophoneInfo#LOCATION_UNKNOWN_E@, @B_android#media#MicrophoneInfo#LOCATION_MAINBODY_E@, @B_android#media#MicrophoneInfo#LOCATION_MAINBODY_MOVABLE_E@, or @B_android#media#MicrophoneInfo#LOCATION_PERIPHERAL_E@.", "history": "Added in API level 28", "FullName": "public int getLocation ()"}, "getFrequencyResponse()": {"Returns": [["@B_java#util#List_E@", "the frequency response of the microphone"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#util#Pair_E@ list of frequency responses. For every @B_android#util#Pair_E@ in the list, the first value represents frequency in Hz, and the second value represents response in dB.", "history": "Added in API level 28", "FullName": "public List<Pair<Float, Float>> getFrequencyResponse ()"}, "getMaxSpl()": {"Returns": [["float", "the maximum level in dB or @B_android#media#MicrophoneInfo#SPL_UNKNOWN_E@ if maximum SPL is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the level in dB of the maximum SPL supported by the device at 1000Hz.", "history": "Added in API level 28", "FullName": "public float getMaxSpl ()"}, "getId()": {"Returns": [["int", "the microphone's id"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns The system unique device ID that corresponds to the id returned by @B_android#media#AudioDeviceInfo#getId_E@.", "history": "Added in API level 28", "FullName": "public int getId ()"}, "getDirectionality()": {"Returns": [["int", "the directionality of microphone Value is either 0 or a combination of @B_android#media#MicrophoneInfo#DIRECTIONALITY_UNKNOWN_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_OMNI_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_BI_DIRECTIONAL_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_CARDIOID_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_HYPER_CARDIOID_E@, and @B_android#media#MicrophoneInfo#DIRECTIONALITY_SUPER_CARDIOID_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the directionality of microphone. The return value is one of @B_android#media#MicrophoneInfo#DIRECTIONALITY_UNKNOWN_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_OMNI_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_BI_DIRECTIONAL_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_CARDIOID_E@, @B_android#media#MicrophoneInfo#DIRECTIONALITY_HYPER_CARDIOID_E@, or @B_android#media#MicrophoneInfo#DIRECTIONALITY_SUPER_CARDIOID_E@.", "history": "Added in API level 28", "FullName": "public int getDirectionality ()"}, "getAddress()": {"Returns": [["@B_java#lang#String_E@", "the address of the microphone This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns The \"address\" string of the microphone that corresponds to the address returned by @B_android#media#AudioDeviceInfo#getAddress_E@", "history": "Added in API level 28", "FullName": "public String getAddress ()"}}, "Inheritance": [], "ClassName": "android.media.MicrophoneInfo", "ClassDesc": "Class providing information on a microphone. It indicates the location and orientation of the microphone on the device as well as useful information like frequency response and sensitivity. It can be used by applications implementing special pre processing effects like noise suppression of beam forming that need to know about precise microphone characteristics in order to adapt their algorithms."}