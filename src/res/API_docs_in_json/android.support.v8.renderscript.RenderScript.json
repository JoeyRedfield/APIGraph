{"Functions": {"finish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wait for any pending asynchronous opeations (such as copies to a RS allocation or RS script executions) to complete.", "history": "added in version 23.0.0", "FullName": "void finish ()"}, "releaseAllContexts()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases all the process contexts. This is the same as calling .destroy() on each unique context retreived with create(...). If no contexts have been created this function does nothing. Typically you call this when your application is losing focus and will not be using a context for some time. This has no effect on a context created with createMultiContext()", "history": "added in version 23.0.0", "FullName": "void releaseAllContexts ()"}, "setPriority(android.support.v8.renderscript.RenderScript.Priority)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#RenderScript#Priority_E@", "RenderScript.Priority: New priority to be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the priority of the worker threads for this context.", "history": "added in version 23.0.0", "FullName": "void setPriority (RenderScript.Priority p)"}, "contextDump()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the currently available debugging information about the state of the RS context to the log.", "history": "added in version 23.0.0", "FullName": "void contextDump ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "", "FullName": "void finalize ()"}, "getApplicationContext()": {"Returns": [["@B_android#content#Context_E@", "The application context."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the application context associated with the RenderScript context.", "history": "added in version 23.0.0", "FullName": "Context getApplicationContext ()"}, "create(android.content.Context, int, android.support.v8.renderscript.RenderScript.ContextType, int)": {"Returns": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context."], ["int", "int: The target SDK Version."], ["@B_android#support#v8#renderscript#RenderScript#ContextType_E@", "RenderScript.ContextType: The type of context to be created."], ["int", "int: The OR of the CREATE_FLAG_* options desired"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets or creates a RenderScript context of the specified type.", "history": "added in version 23.0.0", "FullName": "RenderScript create (Context ctx, int sdkVersion, RenderScript.ContextType ct, int flags)"}, "create(android.content.Context)": {"Returns": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a RenderScript context. See documentation for @create for details", "history": "added in version 23.0.0", "FullName": "RenderScript create (Context ctx)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroys this RenderScript context. Once this function is called, using this context or any objects belonging to this context is illegal. This function is a NOP if the context was created with create(). Please use releaseAllContexts() to clean up contexts created with the create function.", "history": "added in version 23.0.0", "FullName": "void destroy ()"}, "setMessageHandler(android.support.v8.renderscript.RenderScript.RSMessageHandler)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#RenderScript#RSMessageHandler_E@", "RenderScript.RSMessageHandler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "void setMessageHandler (RenderScript.RSMessageHandler msg)"}, "forceCompat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force using support lib runtime. Should be used before context create.", "history": "added in version 23.0.0", "FullName": "void forceCompat ()"}, "setErrorHandler(android.support.v8.renderscript.RenderScript.RSErrorHandler)": {"Returns": [], "Parameters": [["@B_android#support#v8#renderscript#RenderScript#RSErrorHandler_E@", "RenderScript.RSErrorHandler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "void setErrorHandler (RenderScript.RSErrorHandler msg)"}, "createMultiContext(android.content.Context, android.support.v8.renderscript.RenderScript.ContextType, int, int)": {"Returns": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context."], ["@B_android#support#v8#renderscript#RenderScript#ContextType_E@", "RenderScript.ContextType no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a RenderScript context. This is an advanced function intended for applications which need to create more than one RenderScript context to be used at the same time. If you need a single context please use create()", "history": "added in version 23.0.0", "FullName": "RenderScript createMultiContext (Context ctx, RenderScript.ContextType ct, int flags, int API_number)"}, "create(android.content.Context, android.support.v8.renderscript.RenderScript.ContextType)": {"Returns": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context."], ["@B_android#support#v8#renderscript#RenderScript#ContextType_E@", "RenderScript.ContextType: The type of context to be created."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "calls create(ctx, ct, CREATE_FLAG_NONE) See documentation for @create for details", "history": "added in version 23.0.0", "FullName": "RenderScript create (Context ctx, RenderScript.ContextType ct)"}, "sendMessage(int, int[])": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Place a message into the message queue to be sent back to the message handler once all previous commands have been executed.", "history": "added in version 23.0.0", "FullName": "void sendMessage (int id, int[] data)"}, "create(android.content.Context, android.support.v8.renderscript.RenderScript.ContextType, int)": {"Returns": [["@B_android#support#v8#renderscript#RenderScript_E@", "RenderScript"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context."], ["@B_android#support#v8#renderscript#RenderScript#ContextType_E@", "RenderScript.ContextType: The type of context to be created."], ["int", "int: The OR of the CREATE_FLAG_* options desired"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets or creates a RenderScript context of the specified type. The returned context will be cached for future reuse within the process. When an application is finished using RenderScript it should call releaseAllContexts() A process context is a context designed for easy creation and lifecycle management. Multiple calls to this function will return the same object provided they are called with the same options. This allows it to be used any time a RenderScript context is needed.", "history": "added in version 23.0.0", "FullName": "RenderScript create (Context ctx, RenderScript.ContextType ct, int flags)"}, "getMessageHandler()": {"Returns": [["@B_android#support#v8#renderscript#RenderScript#RSMessageHandler_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "RenderScript.RSMessageHandler getMessageHandler ()"}, "getErrorHandler()": {"Returns": [["@B_android#support#v8#renderscript#RenderScript#RSErrorHandler_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "RenderScript.RSErrorHandler getErrorHandler ()"}, "setBlackList(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: User provided black list string. Format: \"(MANUFACTURER1:PRODUCT1:MODEL1), (MANUFACTURER2:PRODUCT2:MODEL2)...\" e.g. : To Blacklist Nexus 7(2013) and Nexus 5. mBlackList = \"(asus:razor:Nexus 7), (LGE:hammerhead:Nexus 5)\";"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the blackList of Models to only use support lib runtime. Should be used before context create.", "history": "added in version 23.0.0", "FullName": "void setBlackList (String blackList)"}}, "Inheritance": [], "ClassName": "android.support.v8.renderscript.RenderScript", "ClassDesc": "This class provides access to a RenderScript context, which controls RenderScript initialization, resource management, and teardown. An instance of the RenderScript class must be created before any other RS objects can be created."}