{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system identifier of the external subset. This may be an absolute URI or not.", "history": "Added in API level 1", "FullName": "public abstract String getSystemId ()"}, "getInternalSubset()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The internal subset as a string, or null if there is none. This is does not contain the delimiting square brackets.", "history": "Added in API level 1", "FullName": "public abstract String getInternalSubset ()"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The public identifier of the external subset.", "history": "Added in API level 1", "FullName": "public abstract String getPublicId ()"}, "getEntities()": {"Returns": [["@B_org#w3c#dom#NamedNodeMap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A NamedNodeMap containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded. For example in: foo and the first declaration of bar but not the second declaration of bar or baz. Every node in this map also implements the Entity interface. The DOM Level 2 does not support editing entities, therefore entities cannot be altered in any way.", "history": "Added in API level 1", "FullName": "public abstract NamedNodeMap getEntities ()"}, "getNotations()": {"Returns": [["@B_org#w3c#dom#NamedNodeMap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A NamedNodeMap containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the Notation interface. The DOM Level 2 does not support editing notations, therefore notations cannot be altered in any way.", "history": "Added in API level 1", "FullName": "public abstract NamedNodeMap getNotations ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The name of DTD; i.e., the name immediately following the DOCTYPE keyword.", "history": "Added in API level 1", "FullName": "public abstract String getName ()"}}, "Inheritance": [], "ClassName": "org.w3c.dom.DocumentType", "ClassDesc": "Each Document has a doctype attribute whose value is either null or a DocumentType object. The DocumentType interface in the DOM Core provides an interface to the list of entities that are defined for the document, and little else because the effect of namespaces and the various XML schema efforts on DTD representation are not clearly understood as of this writing. DOM Level 3 doesn't support editing DocumentType nodes. DocumentType nodes are read-only. See also the"}