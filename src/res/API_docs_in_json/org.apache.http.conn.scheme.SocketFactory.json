{"Functions": {"createSocket()": {"Returns": [["@B_java#net#Socket_E@", "a new socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while creating the socket"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, unconnected socket. The socket should subsequently be passed to @B_org#apache#http#conn#scheme#SocketFactory#connectSocket_E@.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract Socket createSocket ()"}, "isSecure(java.net.Socket)": {"Returns": [["boolean", "true if the connection of the socket should be considered secure, or false if it should not"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the connected socket to check"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is invalid, for example because it is not a connected socket or was created by a different socket factory. Note that socket factories are not required to check these conditions, they may simply return a default value when called with an invalid socket argument."]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a socket provides a secure connection. The socket must be @B_org#apache#http#conn#scheme#SocketFactory#connectSocket_E@ by this factory. The factory will As a rule of thumb, plain sockets are not secure and TLS/SSL sockets are secure. However, there may be application specific deviations. For example, a plain socket to a host in the same intranet (\"trusted zone\") could be considered secure. On the other hand, a TLS/SSL socket could be considered insecure based on the cypher suite chosen for the connection.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract boolean isSecure (Socket sock)"}, "connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)": {"Returns": [["@B_java#net#Socket_E@", "the connected socket. The returned object may be different from the sock argument if this factory supports a layered protocol."]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the socket to connect, as obtained from @B_org#apache#http#conn#scheme#SocketFactory#createSocket_E@. null indicates that a new socket should be created and connected."], ["@B_java#lang#String_E@", "String: the host to connect to"], ["int", "int: the port to connect to on the host"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address to bind the socket to, or null for any"], ["int", "int: the port on the local machine, 0 or a negative number for any"], ["@B_org#apache#http#params#HttpParams_E@", "HttpParams: additional @B_org#apache#http#params#HttpParams_E@ for connecting"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#net#UnknownHostException_E@", "if the IP address of the target host can not be determined"], ["@B_org#apache#http#conn#ConnectTimeoutException_E@", "if the socket cannot be connected within the time limit defined in the params"]], "SeeAlso": [], "Permissions": [], "Description": "Connects a socket to the given host.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract Socket connectSocket (Socket sock, String host, int port, InetAddress localAddress, int localPort, HttpParams params)"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.scheme.SocketFactory", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A factory for creating and connecting sockets. The factory encapsulates the logic for establishing a socket connection. Both @B_java#lang#Object#equals_E@ and @B_java#lang#Object#hashCode_E@ must be overridden for the correct operation of some connection managers."}