{"Functions": {"start()": {"Returns": [], "Parameters": [], "Throws": [["@B_android#util#AndroidRuntimeException_E@", "if this method is not called on the main thread"]], "SeeAlso": [], "Permissions": [], "Description": "Starts an animation. If the animation has already been started, no op. Note that calling @B_android#support#animation#DynamicAnimation#start_E@ will not immediately set the property value to start value of the animation. The property values will be changed at each animation pulse, which happens before the draw pass. As a result, the changes will be reflected in the next frame, the same as if the values were set immediately. This method should only be called on main thread.", "history": "added in version 25.3.0", "FullName": "void start ()"}, "setStartVelocity(float)": {"Returns": [["T", "the Animation whose start velocity is being set"]], "Parameters": [["float", "float: start velocity of the animation in pixel/second"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start velocity of the animation. Default velocity is 0. Unit: pixel/second Note when using a fixed value as the start velocity (as opposed to getting the velocity through touch events), it is recommended to define such a value in dp/second and convert it to pixel/second based on the density of the screen to achieve a consistent look across different screens. To convert from dp/second to pixel/second:", "history": "added in version 25.3.0", "FullName": "T setStartVelocity (float startVelocity)"}, "setMaxValue(float)": {"Returns": [["T", "the Animation whose max value is being set"]], "Parameters": [["float", "float: maximum value of the property to be animated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the max value of the animation. Animations will not animate beyond their max value. Whether or not animation will come to an end when max value is reached is dependent on the child animation's implementation.", "history": "added in version 25.3.0", "FullName": "T setMaxValue (float max)"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [["@B_android#util#AndroidRuntimeException_E@", "if this method is not called on the main thread"]], "SeeAlso": [], "Permissions": [], "Description": "Cancels the on-going animation. If the animation hasn't started, no op. Note that this method should only be called on main thread.", "history": "added in version 25.3.0", "FullName": "void cancel ()"}, "setMinimumVisibleChange(float)": {"Returns": [["T", "the animation whose min visible change is being set"]], "Parameters": [["float", "float: minimum change in property value that is visible to usersValue is 0.0 or greater."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given threshold is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "This method sets the minimal change of animation value that is visible to users, which helps determine a reasonable threshold for the animation's termination condition. It is critical to set the minimal visible change for custom properties (i.e. non-ViewPropertys) unless the custom property is in pixels. For custom properties, this minimum visible change defaults to change in pixel (i.e. @B_android#support#animation#DynamicAnimation#MIN_VISIBLE_CHANGE_PIXELS_E@. It is recommended to adjust this value that is reasonable for the property to be animated. A general rule of thumb to calculate such a value is: minimum visible change = range of custom property value / corresponding pixel range. For example, if the property to be animated is a progress (from 0 to 100) that corresponds to a 200-pixel change. Then the min visible change should be 100 / 200. (i.e. 0.5). It's not necessary to call this method when animating @B_android#support#animation#DynamicAnimation#ViewProperty_E@s, as the minimum visible change will be derived from the property. For example, if the property to be animated is in pixels (i.e. @B_android#support#animation#DynamicAnimation#TRANSLATION_X_E@, @B_android#support#animation#DynamicAnimation#TRANSLATION_Y_E@, @B_android#support#animation#DynamicAnimation#TRANSLATION_Z_E@, @@B_android#support#animation#DynamicAnimation#SCROLL_X_E@ or @B_android#support#animation#DynamicAnimation#SCROLL_Y_E@), the default minimum visible change is 1 (pixel). For @B_android#support#animation#DynamicAnimation#ROTATION_E@, @B_android#support#animation#DynamicAnimation#ROTATION_X_E@ or @B_android#support#animation#DynamicAnimation#ROTATION_Y_E@, the animation will use @B_android#support#animation#DynamicAnimation#MIN_VISIBLE_CHANGE_ROTATION_DEGREES_E@ as the min visible change, which is 1/10. Similarly, the minimum visible change for alpha ( i.e. @B_android#support#animation#DynamicAnimation#MIN_VISIBLE_CHANGE_ALPHA_E@ is defined as 1 / 256.", "history": "added in version 25.4.0", "FullName": "T setMinimumVisibleChange (float minimumVisibleChange)"}, "getMinimumVisibleChange()": {"Returns": [["float", "minimum change in property value that is visible to users"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum change in the animation property that could be visibly different to users.", "history": "added in version 25.4.0", "FullName": "float getMinimumVisibleChange ()"}, "setMinValue(float)": {"Returns": [["T", "the Animation whose min value is being set"]], "Parameters": [["float", "float: minimum value of the property to be animated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the min value of the animation. Animations will not animate beyond their min value. Whether or not animation will come to an end when min value is reached is dependent on the child animation's implementation.", "history": "added in version 25.3.0", "FullName": "T setMinValue (float min)"}, "setStartValue(float)": {"Returns": [["T", "the Animation whose start value is being set"]], "Parameters": [["float", "float: start value for the animation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the start value of the animation. If start value is not set, the animation will get the current value for the view's property, and use that as the start value.", "history": "added in version 25.3.0", "FullName": "T setStartValue (float startValue)"}, "isRunning()": {"Returns": [["boolean", "true if the animation is currently running, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the animation is currently running.", "history": "added in version 25.3.0", "FullName": "boolean isRunning ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "@B_android#support#animation#DynamicAnimation_E@", "ClassDesc": "This class is the base class of physics-based animations. It manages the animation's lifecycle such as @B_android#support#animation#DynamicAnimation#start_E@ and @B_android#support#animation#DynamicAnimation#cancel_E@. This base class also handles the common setup for all the subclass animations. For example, DynamicAnimation supports adding @B_android#support#animation#DynamicAnimation#OnAnimationEndListener_E@ and @B_android#support#animation#DynamicAnimation#OnAnimationUpdateListener_E@ so that the important animation events can be observed through the callbacks. The start conditions for any subclass of DynamicAnimation can be set using @B_android#support#animation#DynamicAnimation#setStartValue_E@ and @B_android#support#animation#DynamicAnimation#setStartVelocity_E@."}