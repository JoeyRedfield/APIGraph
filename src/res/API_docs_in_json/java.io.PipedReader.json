{"Functions": {"PipedReader(int)": {"Returns": [], "Parameters": [["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedReader so that it is not yet @B_java#io#PipedReader#connect_E@ and uses the specified pipe size for the pipe's buffer. It must be PipedWriter before being used.", "history": "Added in API level 9", "FullName": "public PipedReader (int pipeSize)"}, "connect(java.io.PipedWriter)": {"Returns": [], "Parameters": [["@B_java#io#PipedWriter_E@", "PipedWriter: The piped writer to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Causes this piped reader to be connected to the piped writer src. If this object is already connected to some other piped writer, an IOException is thrown. If src is an unconnected piped writer and snk is an unconnected piped reader, they may be connected by either the call: or the call: The two calls have the same effect.", "history": "Added in API level 1", "FullName": "public void connect (PipedWriter src)"}, "PipedReader()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedReader so that it is not yet PipedWriter before being used.", "history": "Added in API level 1", "FullName": "public PipedReader ()"}, "read(char[], int, int)": {"Returns": [["int", "the total number of characters read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["char[]", "char: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the maximum number of characters read."]], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedReader#connect_E@, closed, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len characters of data from this piped stream into an array of characters. Less than len characters will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. This method blocks until at least one character of input is available.", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "PipedReader(java.io.PipedWriter,int)": {"Returns": [], "Parameters": [["@B_java#io#PipedWriter_E@", "PipedWriter: the stream to connect to."], ["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."], ["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedReader so that it is connected to the piped writer src and uses the specified pipe size for the pipe's buffer. Data written to src will then be available as input from this stream.", "history": "Added in API level 9", "FullName": "public PipedReader (PipedWriter src, int pipeSize)"}, "PipedReader(java.io.PipedWriter)": {"Returns": [], "Parameters": [["@B_java#io#PipedWriter_E@", "PipedWriter: the stream to connect to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedReader so that it is connected to the piped writer src. Data written to src will then be available as input from this stream.", "history": "Added in API level 1", "FullName": "public PipedReader (PipedWriter src)"}, "PipedReader(java.io.PipedWriter, int)": {"Returns": [], "Parameters": [["@B_java#io#PipedWriter_E@", "PipedWriter: the stream to connect to."], ["int", "int: the size of the pipe's buffer."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."], ["@B_java#lang#IllegalArgumentException_E@", "if pipeSize <= 0."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PipedReader so that it is connected to the piped writer src and uses the specified pipe size for the pipe's buffer. Data written to src will then be available as input from this stream.", "history": "added in API level 9", "FullName": "public PipedReader (PipedWriter src, int pipeSize)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this piped stream and releases any system resources associated with the stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedReader#connect_E@, or closed."]], "SeeAlso": [], "Permissions": [], "Description": "Tell whether this stream is ready to be read. A piped character stream is ready if the circular buffer is not empty.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "read()": {"Returns": [["int", "the next character of data, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedReader#connect_E@, closed, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next character of data from this piped stream. If no character is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public int read ()"}, "read(char[],int,int)": {"Returns": [["int", "the total number of characters read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["char[]", "char: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the maximum number of characters read."]], "Throws": [["@B_java#io#IOException_E@", "if the pipe is broken, @B_java#io#PipedReader#connect_E@, closed, or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len characters of data from this piped stream into an array of characters. Less than len characters will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. This method blocks until at least one character of input is available.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}}, "Inheritance": ["@B_java#io#Reader_E@"], "ClassName": "java.io.PipedReader", "ClassDesc": "Piped character-input streams."}