{"Functions": {"findDecoderForFormat(android.media.MediaFormat)": {"Returns": [["@B_java#lang#String_E@", "the name of a decoder that supports the given format and feature requests, or null if no such codec has been found."]], "Parameters": [["@B_android#media#MediaFormat_E@", "MediaFormat: A decoder media format with optional feature directives."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format is not a valid media format."], ["@B_java#lang#NullPointerException_E@", "if format is null."]], "SeeAlso": ["@B_android#media#MediaCodecInfo#CodecCapabilities#isFormatSupported_E@"], "Permissions": [], "Description": "Find a decoder supporting a given @B_android#media#MediaFormat_E@ in the list of media-codecs. @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, format must not contain a format.setString(MediaFormat.KEY_FRAME_RATE, null) to clear any existing frame rate setting in the format.", "history": "Added in API level 21", "FullName": "public String findDecoderForFormat (MediaFormat format)"}, "findEncoderForFormat(android.media.MediaFormat)": {"Returns": [["@B_java#lang#String_E@", "the name of an encoder that supports the given format and feature requests, or null if no such codec has been found."]], "Parameters": [["@B_android#media#MediaFormat_E@", "MediaFormat: An encoder media format with optional feature directives."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format is not a valid media format."], ["@B_java#lang#NullPointerException_E@", "if format is null."]], "SeeAlso": ["@B_android#media#MediaCodecInfo#CodecCapabilities#isFormatSupported_E@"], "Permissions": [], "Description": "Find an encoder supporting a given @B_android#media#MediaFormat_E@ in the list of media-codecs. @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, format must not contain a format.setString(MediaFormat.KEY_FRAME_RATE, null) to clear any existing frame rate setting in the format.", "history": "Added in API level 21", "FullName": "public String findEncoderForFormat (MediaFormat format)"}, "getCodecCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#MediaCodecList_E@"], "Permissions": [], "Description": "Use @B_android#media#MediaCodecList#getCodecInfos_E@ instead. Count the number of available (regular) codecs.", "history": "Added in API level 16 Deprecated in API level 21", "FullName": "public static int getCodecCount ()"}, "getCodecInfoAt(int)": {"Returns": [["@B_android#media#MediaCodecInfo_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#media#MediaCodecList_E@"], "Permissions": [], "Description": "Use @B_android#media#MediaCodecList#getCodecInfos_E@ instead. Return the @B_android#media#MediaCodecInfo_E@ object for the codec at the given index in the regular list.", "history": "Added in API level 16 Deprecated in API level 21", "FullName": "public static MediaCodecInfo getCodecInfoAt (int index)"}, "MediaCodecList(int)": {"Returns": [], "Parameters": [["int", "int: Either REGULAR_CODECS or ALL_CODECS."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a list of media-codecs of a specific kind.", "history": "Added in API level 21", "FullName": "public MediaCodecList (int kind)"}, "getCodecInfos()": {"Returns": [["@B_android#media#MediaCodecInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of @B_android#media#MediaCodecInfo_E@ objects for the list of media-codecs.", "history": "Added in API level 21", "FullName": "public MediaCodecInfo[] getCodecInfos ()"}}, "Inheritance": [], "ClassName": "android.media.MediaCodecList", "ClassDesc": "Allows you to enumerate available codecs, each specified as a @B_android#media#MediaCodecInfo_E@ object, find a codec supporting a given format and query the capabilities of a given codec. See @B_android#media#MediaCodecInfo_E@ for sample usage."}