{"Functions": {"onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled in this function, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onTrackballEvent_E@"], "Permissions": [], "Description": "Implement this to handle trackball events on your input method.", "history": "Added in API level 3", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "getKeyDispatcherState()": {"Returns": [["@B_android#view#KeyEvent#DispatcherState_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the global @B_android#view#KeyEvent#DispatcherState_E@ for used for processing events from the target application. Normally you will not need to use this directly, but just use the standard high-level event callbacks like @B_android#view#KeyEvent#Callback#onKeyDown_E@.", "history": "Added in API level 5", "FullName": "public KeyEvent.DispatcherState getKeyDispatcherState ()"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle @B_android#os#Binder#dump_E@ calls on your input method.", "history": "Added in API level 3", "FullName": "protected void dump (FileDescriptor fd, PrintWriter fout, String[] args)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled in this function, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onGenericMotionEvent_E@"], "Permissions": [], "Description": "Implement this to handle generic motion events on your input method.", "history": "Added in API level 17", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "onCreateInputMethodSessionInterface()": {"Returns": [["@B_android#inputmethodservice#AbstractInputMethodService#AbstractInputMethodSessionImpl_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework when a new InputMethodSession interface is needed for a new client of the input method.", "history": "Added in API level 3", "FullName": "public abstract AbstractInputMethodService.AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface ()"}, "AbstractInputMethodService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public AbstractInputMethodService ()"}, "onCreateInputMethodInterface()": {"Returns": [["@B_android#inputmethodservice#AbstractInputMethodService#AbstractInputMethodImpl_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework during initialization, when the InputMethod interface for this service needs to be created.", "history": "Added in API level 3", "FullName": "public abstract AbstractInputMethodService.AbstractInputMethodImpl onCreateInputMethodInterface ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 3", "FullName": "public final IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.inputmethodservice.AbstractInputMethodService", "ClassDesc": "AbstractInputMethodService provides a abstract base class for input methods. Normal input method implementations will not derive from this directly, instead building on top of @B_android#inputmethodservice#InputMethodService_E@ or another more complete base class. Be sure to read @B_android#view#inputmethod#InputMethod_E@ for more information on the basics of writing input methods. This class combines a Service (representing the input method component to the system with the InputMethod interface that input methods must implement. This base class takes care of reporting your InputMethod from the service when clients bind to it, but provides no standard implementation of the InputMethod interface itself. Derived classes must implement that interface."}