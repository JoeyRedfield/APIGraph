{"Functions": {"available()": {"Returns": [["int", "the number of bytes that can be read from this input stream without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes that can be read from this input stream without blocking. The available method of InputStream returns 0. This method", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 is there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to b.length bytes of data from this input stream into an array of bytes. The read method of InputStream calls the read method of three arguments with the arguments b, 0, and b.length.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "markSupported()": {"Returns": [["boolean", "false, since this class does not support the mark and reset methods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Tests if this input stream supports the mark and reset methods, which it does not.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "CipherInputStream(java.io.InputStream,javax.crypto.Cipher)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the to-be-processed input stream"], ["@B_javax#crypto#Cipher_E@", "Cipher: an initialized Cipher object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a CipherInputStream from an InputStream and a Cipher. Note: if the specified input stream or cipher is null, a NullPointerException may be thrown later when they are used.", "history": "Added in API level 1", "FullName": "public CipherInputStream (InputStream is, Cipher c)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array buf"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until some input is available. If the first argument is null, up to len bytes are read and discarded.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "CipherInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the to-be-processed input stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a CipherInputStream from an InputStream without specifying a Cipher. This has the effect of constructing a CipherInputStream using a NullCipher. Note: if the specified input stream is null, a NullPointerException may be thrown later when it is used.", "history": "Added in API level 1", "FullName": "protected CipherInputStream (InputStream is)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream. The close method of CipherInputStream calls the close method of its underlying input stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public int read ()"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Skips n bytes of input from the bytes that can be read from this input stream without blocking. Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to n or the result of a call to @B_javax#crypto#CipherInputStream#available_E@, whichever is smaller. If n is less than zero, no bytes are skipped. The actual number of bytes skipped is returned.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array buf"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until some input is available. If the first argument is null, up to len bytes are read and discarded.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "javax.crypto.CipherInputStream", "ClassDesc": "A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream. For example, if the Cipher is initialized for decryption, the CipherInputStream will attempt to read in data and decrypt them, before returning the decrypted data. This class adheres strictly to the semantics, especially the failure semantics, of its ancestor classes java.io.FilterInputStream and java.io.InputStream. This class has exactly those methods specified in its ancestor classes, and overrides them all. Moreover, this class catches all exceptions that are not thrown by its ancestor classes. In particular, the skip method skips, and the available method counts only data that have been processed by the encapsulated Cipher. It is crucial for a programmer using this class not to use methods that are not defined or overriden in this class (such as a new method or constructor that is later added to one of the super classes), because the design and implementation of those methods are unlikely to have considered security impact with regard to CipherInputStream."}