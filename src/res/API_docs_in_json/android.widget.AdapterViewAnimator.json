{"Functions": {"showPrevious()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually shows the previous child.", "history": "Added in API level 11", "FullName": "public void showPrevious ()"}, "AdapterViewAnimator(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AdapterViewAnimator (Context context, AttributeSet attrs)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onRemoteAdapterDisconnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when the adapter disconnects from the RemoteViewsService.", "history": "Added in API level 11", "FullName": "public void onRemoteAdapterDisconnected ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "fyiWillBeAdvancedByHostKThx()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an @B_android#appwidget#AppWidgetHost_E@ to indicate that it will be automatically advancing the views of this @B_android#widget#AdapterViewAnimator_E@ by calling @B_android#widget#AdapterViewAnimator#advance_E@ at some point in the future. This allows subclasses to perform any required setup, for example, to stop automatically advancing their children.", "history": "Added in API level 11", "FullName": "public void fyiWillBeAdvancedByHostKThx ()"}, "getSelectedView()": {"Returns": [["@B_android#view#View_E@", "The view corresponding to the currently selected item, or null if nothing is selected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public View getSelectedView ()"}, "AdapterViewAnimator(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AdapterViewAnimator (Context context)"}, "deferNotifyDataSetChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not connected yet.", "history": "Added in API level 14", "FullName": "public void deferNotifyDataSetChanged ()"}, "setInAnimation(android.animation.ObjectAnimator)": {"Returns": [], "Parameters": [["@B_android#animation#ObjectAnimator_E@", "ObjectAnimator: The animation started when a View enters the screen."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getInAnimation_E@", "@B_android#widget#AdapterViewAnimator#setInAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that enters the screen.", "history": "Added in API level 11", "FullName": "public void setInAnimation (ObjectAnimator inAnimation)"}, "showNext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually shows the next child.", "history": "Added in API level 11", "FullName": "public void showNext ()"}, "AdapterViewAnimator(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public AdapterViewAnimator (Context context, AttributeSet attrs, int defStyleAttr)"}, "getAdapter()": {"Returns": [["@B_android#widget#Adapter_E@", "The adapter used to provide this view's content."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter currently associated with this widget.", "history": "Added in API level 11", "FullName": "public Adapter getAdapter ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setAdapter(android.widget.Adapter)": {"Returns": [], "Parameters": [["@B_android#widget#Adapter_E@", "Adapter: The adapter to use to create this view's content."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides the data and the views to represent the data in this widget.", "history": "Added in API level 11", "FullName": "public void setAdapter (Adapter adapter)"}, "getOutAnimation()": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An Animation or null if none is set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#setOutAnimation_E@"], "Permissions": [], "Description": "Returns the current animation used to animate a View that exits the screen.", "history": "Added in API level 11", "FullName": "public ObjectAnimator getOutAnimation ()"}, "advance()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an @B_android#appwidget#AppWidgetHost_E@ in order to advance the current view when it is being used within an app widget.", "history": "Added in API level 11", "FullName": "public void advance ()"}, "setInAnimation(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The resource id of the animation."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getInAnimation_E@", "@B_android#widget#AdapterViewAnimator#setInAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that enters the screen.", "history": "Added in API level 11", "FullName": "public void setInAnimation (Context context, int resourceID)"}, "setOutAnimation(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The resource id of the animation."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getOutAnimation_E@", "@B_android#widget#AdapterViewAnimator#setOutAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that exit the screen.", "history": "added in API level 11", "FullName": "public void setOutAnimation (Context context, int resourceID)"}, "onRemoteAdapterConnected()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when the adapter connects to the RemoteViewsService.", "history": "Added in API level 11", "FullName": "public boolean onRemoteAdapterConnected ()"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment, this method returns -1.", "history": "Added in API level 11", "FullName": "public int getBaseline ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#AdapterViewAnimator#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "getDisplayedChild()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the currently displayed child view.", "history": "Added in API level 11", "FullName": "public int getDisplayedChild ()"}, "AdapterViewAnimator(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AdapterViewAnimator (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setOutAnimation(android.animation.ObjectAnimator)": {"Returns": [], "Parameters": [["@B_android#animation#ObjectAnimator_E@", "ObjectAnimator: The animation started when a View exit the screen."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getOutAnimation_E@", "@B_android#widget#AdapterViewAnimator#setOutAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that exit the screen.", "history": "Added in API level 11", "FullName": "public void setOutAnimation (ObjectAnimator outAnimation)"}, "setRemoteViewsAdapter(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent used to identify the RemoteViewsService for the adapter to connect to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AdapterViewAnimator to use a remote views adapter which connects to a RemoteViewsService through the specified intent.", "history": "Added in API level 11", "FullName": "public void setRemoteViewsAdapter (Intent intent)"}, "getCurrentView()": {"Returns": [["@B_android#view#View_E@", "The View currently displayed."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getDisplayedChild_E@"], "Permissions": [], "Description": "Returns the View corresponding to the currently displayed child.", "history": "Added in API level 11", "FullName": "public View getCurrentView ()"}, "getInAnimation()": {"Returns": [["@B_android#animation#ObjectAnimator_E@", "An Animation or null if none is set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#setInAnimation_E@"], "Permissions": [], "Description": "Returns the current animation used to animate a View that enters the screen.", "history": "Added in API level 11", "FullName": "public ObjectAnimator getInAnimation ()"}, "setInAnimation(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The resource id of the animation."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getInAnimation_E@", "@B_android#widget#AdapterViewAnimator#setInAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that enters the screen.", "history": "added in API level 11", "FullName": "public void setInAnimation (Context context, int resourceID)"}, "setDisplayedChild(int)": {"Returns": [], "Parameters": [["int", "int: the index of the child view to display"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets which child view will be displayed.", "history": "Added in API level 11", "FullName": "public void setDisplayedChild (int whichChild)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 11", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public Parcelable onSaveInstanceState ()"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently selected item. To support accessibility subclasses that override this method must invoke the overridden super method first.", "history": "Added in API level 11", "FullName": "public void setSelection (int position)"}, "setAnimateFirstView(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to animate the current View the first time it is displayed, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the current View should be animated the first time the ViewAnimation is displayed.", "history": "Added in API level 11", "FullName": "public void setAnimateFirstView (boolean animate)"}, "setOutAnimation(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application's environment."], ["int", "int: The resource id of the animation."]], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterViewAnimator#getOutAnimation_E@", "@B_android#widget#AdapterViewAnimator#setOutAnimation_E@"], "Permissions": [], "Description": "Specifies the animation used to animate a View that exit the screen.", "history": "Added in API level 11", "FullName": "public void setOutAnimation (Context context, int resourceID)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@"], "ClassName": "android.widget.AdapterViewAnimator", "ClassDesc": "Base class for a @B_android#widget#AdapterView_E@ that will perform animations when switching between its views."}