{"Functions": {"getPrivateCredentials()": {"Returns": [["@B_java#util#Set_E@", "A Set of private credentials held by this Subject."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Set of private credentials held by this Subject. The returned Set is backed by this Subject's internal private Credential Set. Any modification to the returned Set affects the internal private Credential Set as well. A caller requires permissions to access the Credentials in the returned Set, or to modify the Set itself. A SecurityException is thrown if the caller does not have the proper permissions. While iterating through the Set, a SecurityException is thrown if the caller does not have permission to access a particular Credential. The Iterator is nevertheless advanced to next element in the Set.", "history": "Added in API level 1", "FullName": "public Set<Object> getPrivateCredentials ()"}, "getSubject(java.security.AccessControlContext)": {"Returns": [["@B_javax#security#auth#Subject_E@", "the Subject associated with the provided AccessControlContext, or null if no Subject is associated with the provided AccessControlContext."]], "Parameters": [["@B_java#security#AccessControlContext_E@", "AccessControlContext: the AccessControlContext from which to retrieve the Subject."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have permission to get the Subject."], ["@B_java#lang#NullPointerException_E@", "if the provided AccessControlContext is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get the Subject associated with the provided AccessControlContext. The AccessControlContext may contain many Subjects (from nested doAs calls). In this situation, the most recent Subject associated with the AccessControlContext is returned.", "history": "Added in API level 1", "FullName": "public static Subject getSubject (AccessControlContext acc)"}, "getPublicCredentials(java.lang.Class<T>)": {"Returns": [["@B_java#util#Set_E@", "a Set of public credentials that are instances of the specified Class."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the returned Set of public credentials will all be instances of this class."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified Class is null."]], "SeeAlso": [], "Permissions": [], "Description": "Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class. The returned Set is not backed by this Subject's internal public Credential Set. A new Set is created and returned for each method invocation. Modifications to the returned Set will not affect the internal public Credential Set.", "history": "Added in API level 1", "FullName": "public Set<T> getPublicCredentials (Class<T> c)"}, "Subject(boolean,java.util.Set<?extendsjava.security.Principal>,java.util.Set<?>,java.util.Set<?>)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the Subject is to be read-only, and false otherwise."], ["@B_java#util#Set_E@", "Set: the Set of Principals to be associated with this Subject."], ["@B_java#util#Set_E@", "Set: the Set of public credentials to be associated with this Subject."], ["@B_java#util#Set_E@", "Set: the Set of private credentials to be associated with this Subject."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified principals, pubCredentials, or privCredentials are null."]], "SeeAlso": [], "Permissions": [], "Description": "Create an instance of a Subject with Principals and credentials. The Principals and credentials from the specified Sets are copied into newly constructed Sets. These newly created Sets check whether this Subject has been set read-only before permitting subsequent modifications. The newly created Sets also prevent illegal modifications by ensuring that callers have sufficient permissions. To modify the Principals Set, the caller must have AuthPermission(\"modifyPrincipals\"). To modify the public credential Set, the caller must have AuthPermission(\"modifyPublicCredentials\"). To modify the private credential Set, the caller must have AuthPermission(\"modifyPrivateCredentials\").", "history": "Added in API level 1", "FullName": "public Subject (boolean readOnly, Set<? extends Principal> principals, Set<?> pubCredentials, Set<?> privCredentials)"}, "isReadOnly()": {"Returns": [["boolean", "true if this Subject is read-only, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query whether this Subject is read-only.", "history": "Added in API level 1", "FullName": "public boolean isReadOnly ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified Object is equal to this Subject."]], "Parameters": [["@B_java#lang#Object_E@", "Object: Object to be compared for equality with this Subject."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have permission to access the private credentials for this Subject, or if the caller does not have permission to access the private credentials for the provided Subject."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified Object with this Subject for equality. Returns true if the given object is also a Subject and the two Subject instances are equivalent. More formally, two Subject instances are equal if their Principal and Credential Sets are equal.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "getPublicCredentials()": {"Returns": [["@B_java#util#Set_E@", "A Set of public credentials held by this Subject."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Set of public credentials held by this Subject. The returned Set is backed by this Subject's internal public Credential Set. Any modification to the returned Set affects the internal public Credential Set as well.", "history": "Added in API level 1", "FullName": "public Set<Object> getPublicCredentials ()"}, "getPrivateCredentials(java.lang.Class<T>)": {"Returns": [["@B_java#util#Set_E@", "a Set of private credentials that are instances of the specified Class."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the returned Set of private credentials will all be instances of this class."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified Class is null."]], "SeeAlso": [], "Permissions": [], "Description": "Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class. The caller must have permission to access all of the requested Credentials, or a SecurityException will be thrown. The returned Set is not backed by this Subject's internal private Credential Set. A new Set is created and returned for each method invocation. Modifications to the returned Set will not affect the internal private Credential Set.", "history": "Added in API level 1", "FullName": "public Set<T> getPrivateCredentials (Class<T> c)"}, "doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)": {"Returns": [["T", "the value returned by the PrivilegedExceptionAction's run method."]], "Parameters": [["@B_javax#security#auth#Subject_E@", "Subject: the Subject that the specified action will run as. This parameter may be null."], ["@B_java#security#PrivilegedExceptionAction_E@", "PrivilegedExceptionAction: the code to be run as the specified Subject."], ["@B_java#security#AccessControlContext_E@", "AccessControlContext: the AccessControlContext to be tied to the specified subject and action."]], "Throws": [["@B_java#security#PrivilegedActionException_E@", "if the PrivilegedExceptionAction.run method throws a checked exception."], ["@B_java#lang#NullPointerException_E@", "if the specified PrivilegedExceptionAction is null."], ["@B_java#lang#SecurityException_E@", "if the caller does not have permission to invoke this method."]], "SeeAlso": [], "Permissions": [], "Description": "Perform privileged work as a particular Subject. This method behaves exactly as Subject.doAs, except that instead of retrieving the current Thread's AccessControlContext, it uses the provided AccessControlContext. If the provided AccessControlContext is null, this method instantiates a new AccessControlContext with an empty collection of ProtectionDomains.", "history": "Added in API level 1", "FullName": "public static T doAsPrivileged (Subject subject, PrivilegedExceptionAction<T> action, AccessControlContext acc)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of this Subject."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the String representation of this Subject.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Subject()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an instance of a Subject with an empty Set of Principals and empty Sets of public and private credentials. The newly constructed Sets check whether this Subject has been set read-only before permitting subsequent modifications. The newly created Sets also prevent illegal modifications by ensuring that callers have sufficient permissions. To modify the Principals Set, the caller must have AuthPermission(\"modifyPrincipals\"). To modify the public credential Set, the caller must have AuthPermission(\"modifyPublicCredentials\"). To modify the private credential Set, the caller must have AuthPermission(\"modifyPrivateCredentials\").", "history": "Added in API level 1", "FullName": "public Subject ()"}, "setReadOnly()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have permission to set this Subject to be read-only."]], "SeeAlso": [], "Permissions": [], "Description": "Set this Subject to be read-only. Modifications (additions and removals) to this Subject's Principal Set and credential Sets will be disallowed. The destroy operation on this Subject's credentials will still be permitted. Subsequent attempts to modify the Subject's Principal and credential Sets will result in an IllegalStateException being thrown. Also, once a Subject is read-only, it can not be reset to being writable again.", "history": "Added in API level 1", "FullName": "public void setReadOnly ()"}, "getPrincipals(java.lang.Class<T>)": {"Returns": [["@B_java#util#Set_E@", "a Set of Principals that are instances of the specified Class."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the returned Set of Principals will all be instances of this class."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified Class is null."]], "SeeAlso": [], "Permissions": [], "Description": "Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class. The returned Set is not backed by this Subject's internal Principal Set. A new Set is created and returned for each method invocation. Modifications to the returned Set will not affect the internal Principal Set.", "history": "Added in API level 1", "FullName": "public Set<T> getPrincipals (Class<T> c)"}, "doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction<T>,java.security.AccessControlContext)": {"Returns": [["T", "the value returned by the PrivilegedAction's run method."]], "Parameters": [["@B_javax#security#auth#Subject_E@", "Subject: the Subject that the specified action will run as. This parameter may be null."], ["@B_java#security#PrivilegedAction_E@", "PrivilegedAction: the code to be run as the specified Subject."], ["@B_java#security#AccessControlContext_E@", "AccessControlContext: the AccessControlContext to be tied to the specified subject and action."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the PrivilegedAction is null."], ["@B_java#lang#SecurityException_E@", "if the caller does not have permission to invoke this method."]], "SeeAlso": [], "Permissions": [], "Description": "Perform privileged work as a particular Subject. This method behaves exactly as Subject.doAs, except that instead of retrieving the current Thread's AccessControlContext, it uses the provided AccessControlContext. If the provided AccessControlContext is null, this method instantiates a new AccessControlContext with an empty collection of ProtectionDomains.", "history": "Added in API level 1", "FullName": "public static T doAsPrivileged (Subject subject, PrivilegedAction<T> action, AccessControlContext acc)"}, "hashCode()": {"Returns": [["int", "a hashcode for this Subject."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have permission to access this Subject's private credentials."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this Subject.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>)": {"Returns": [["T", "the value returned by the PrivilegedExceptionAction's run method."]], "Parameters": [["@B_javax#security#auth#Subject_E@", "Subject: the Subject that the specified action will run as. This parameter may be null."], ["@B_java#security#PrivilegedExceptionAction_E@", "PrivilegedExceptionAction: the code to be run as the specified Subject."]], "Throws": [["@B_java#security#PrivilegedActionException_E@", "if the PrivilegedExceptionAction.run method throws a checked exception."], ["@B_java#lang#NullPointerException_E@", "if the specified PrivilegedExceptionAction is null."], ["@B_java#lang#SecurityException_E@", "if the caller does not have permission to invoke this method."]], "SeeAlso": [], "Permissions": [], "Description": "Perform work as a particular Subject. This method first retrieves the current Thread's AccessControlContext via AccessController.getContext, and then instantiates a new AccessControlContext using the retrieved context along with a new SubjectDomainCombiner (constructed using the provided Subject). Finally, this method invokes AccessController.doPrivileged, passing it the provided PrivilegedExceptionAction, as well as the newly constructed AccessControlContext.", "history": "Added in API level 1", "FullName": "public static T doAs (Subject subject, PrivilegedExceptionAction<T> action)"}, "doAs(javax.security.auth.Subject,java.security.PrivilegedAction<T>)": {"Returns": [["T", "the value returned by the PrivilegedAction's run method."]], "Parameters": [["@B_javax#security#auth#Subject_E@", "Subject: the Subject that the specified action will run as. This parameter may be null."], ["@B_java#security#PrivilegedAction_E@", "PrivilegedAction: the code to be run as the specified Subject."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the PrivilegedAction is null."], ["@B_java#lang#SecurityException_E@", "if the caller does not have permission to invoke this method."]], "SeeAlso": [], "Permissions": [], "Description": "Perform work as a particular Subject. This method first retrieves the current Thread's AccessControlContext via AccessController.getContext, and then instantiates a new AccessControlContext using the retrieved context along with a new SubjectDomainCombiner (constructed using the provided Subject). Finally, this method invokes AccessController.doPrivileged, passing it the provided PrivilegedAction, as well as the newly constructed AccessControlContext.", "history": "Added in API level 1", "FullName": "public static T doAs (Subject subject, PrivilegedAction<T> action)"}, "getPrincipals()": {"Returns": [["@B_java#util#Set_E@", "The Set of Principals associated with this Subject."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Set of Principals associated with this Subject. Each Principal represents an identity for this Subject. The returned Set is backed by this Subject's internal Principal Set. Any modification to the returned Set affects the internal Principal Set as well.", "history": "Added in API level 1", "FullName": "public Set<Principal> getPrincipals ()"}}, "Inheritance": [], "ClassName": "javax.security.auth.Subject", "ClassDesc": "A Subject represents a grouping of related information for a single entity, such as a person. Such information includes the Subject's identities as well as its security-related attributes (passwords and cryptographic keys, for example). Subjects may potentially have multiple identities. Each identity is represented as a Principal within the Subject. Principals simply bind names to a Subject. For example, a Subject that happens to be a person, Alice, might have two Principals: one which binds \"Alice Bar\", the name on her driver license, to the Subject, and another which binds, \"999-99-9999\", the number on her student identification card, to the Subject. Both Principals refer to the same Subject even though each has a different name. A Subject may also own security-related attributes, which are referred to as credentials. Sensitive credentials that require special protection, such as private cryptographic keys, are stored within a private credential Set. Credentials intended to be shared, such as public key certificates or Kerberos server tickets are stored within a public credential Set. Different permissions are required to access and modify the different credential Sets. To retrieve all the Principals associated with a Subject, invoke the getPrincipals method. To retrieve all the public or private credentials belonging to a Subject, invoke the getPublicCredentials method or getPrivateCredentials method, respectively. To modify the returned Set of Principals and credentials, use the methods defined in the Set class. For example: This Subject class implements Serializable. While the Principals associated with the Subject are serialized, the credentials associated with the Subject are not. Note that the java.security.Principal class does not implement Serializable. Therefore all concrete Principal implementations associated with Subjects must implement Serializable."}