{"Functions": {"resetThreadExternalAllocCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetThreadExternalAllocCount ()"}, "startMethodTracing(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."], ["int", "int: The maximum amount of trace data we gather. If not given, it defaults to 8MB."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing, specifying the trace log file name and the buffer size. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "Added in API level 1", "FullName": "public static void startMethodTracing (String tracePath, int bufferSize)"}, "startMethodTracing(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."], ["int", "int: The maximum amount of trace data we gather. If not given, it defaults to 8MB."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing, specifying the trace log file name and the buffer size. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "added in API level 1", "FullName": "public static void startMethodTracing (String tracePath, int bufferSize)"}, "getGlobalGcInvocationCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the number of non-concurrent GC invocations between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getGlobalGcInvocationCount ()"}, "getMemoryInfo(android.os.Debug.MemoryInfo)": {"Returns": [], "Parameters": [["@B_android#os#Debug#MemoryInfo_E@", "Debug.MemoryInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves information about this processes memory usages. This information is broken down by how much is in use by dalvik, the native heap, and everything else. @B_android#app#ActivityManager#getProcessMemoryInfo_E@ instead.", "history": "Added in API level 1", "FullName": "public static void getMemoryInfo (Debug.MemoryInfo memoryInfo)"}, "getGlobalExternalFreedSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getGlobalExternalFreedSize ()"}, "waitForDebugger()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wait until a debugger attaches. As soon as the debugger attaches, this returns, so you will need to place a breakpoint after the waitForDebugger() call if you want to start tracing immediately.", "history": "Added in API level 1", "FullName": "public static void waitForDebugger ()"}, "getThreadGcInvocationCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the number of thread-local non-concurrent GC invocations between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getThreadGcInvocationCount ()"}, "getBinderReceivedTransactions()": {"Returns": [["int", "The number of received transactions or -1 if it could not read the stats."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of received transactions from the binder driver.", "history": "Added in API level 1", "FullName": "public static int getBinderReceivedTransactions ()"}, "getNativeHeapAllocatedSize()": {"Returns": [["long", "The allocated size in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of allocated memory in the native heap.", "history": "Added in API level 1", "FullName": "public static long getNativeHeapAllocatedSize ()"}, "getBinderDeathObjectCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of death notification links to Binder objects that exist in the current process.", "history": "Added in API level 1", "FullName": "public static int getBinderDeathObjectCount ()"}, "resetGlobalAllocCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalAllocCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the global count of objects allocated.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetGlobalAllocCount ()"}, "getLoadedClassCount()": {"Returns": [["int", "the number of loaded classes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of loaded classes.", "history": "Added in API level 1", "FullName": "public static int getLoadedClassCount ()"}, "setGlobalAllocationLimit(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. Establish a global object allocation limit. This feature was never enabled in release builds. The allocation limits feature was removed in Honeycomb. This method exists for compatibility and always returns -1 and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int setGlobalAllocationLimit (int limit)"}, "getGlobalFreedSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the global size, in bytes, of objects freed by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getGlobalFreedSize ()"}, "startMethodTracing(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."], ["int", "int: The maximum amount of trace data we gather. If not given, it defaults to 8MB."], ["int", "int: Flags to control method tracing. The only one that is currently defined is @B_android#os#Debug#TRACE_COUNT_ALLOCS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing, specifying the trace log file name, the buffer size, and flags. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "added in API level 1", "FullName": "public static void startMethodTracing (String tracePath, int bufferSize, int flags)"}, "changeDebugPort(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "no longer needed or useful Change the JDWP port.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void changeDebugPort (int port)"}, "startMethodTracing(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."], ["int", "int: The maximum amount of trace data we gather. If not given, it defaults to 8MB."], ["int", "int: Flags to control method tracing. The only one that is currently defined is @B_android#os#Debug#TRACE_COUNT_ALLOCS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing, specifying the trace log file name, the buffer size, and flags. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "Added in API level 1", "FullName": "public static void startMethodTracing (String tracePath, int bufferSize, int flags)"}, "dumpHprofData(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Full pathname of output file (e.g. \"/sdcard/dump.hprof\")."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the VM was built without HPROF support."], ["@B_java#io#IOException_E@", "if an error occurs while opening or writing files."]], "SeeAlso": [], "Permissions": [], "Description": "Dump \"hprof\" data to the specified file. This may cause a GC.", "history": "Added in API level 3", "FullName": "public static void dumpHprofData (String fileName)"}, "getGlobalClassInitTime()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the time spent successfully initializing classes between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 8 Deprecated in API level 23", "FullName": "public static int getGlobalClassInitTime ()"}, "getThreadExternalAllocSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getThreadExternalAllocSize ()"}, "getGlobalFreedCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the global count of objects freed by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getGlobalFreedCount ()"}, "resetGlobalAllocSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalAllocSize_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the global size of objects allocated.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetGlobalAllocSize ()"}, "resetGlobalExternalAllocCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetGlobalExternalAllocCount ()"}, "attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the library containing the agent. This value must never be null."], ["@B_java#lang#String_E@", "String: the options passed to the agent. This value may be null."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the classloader determining the library search path. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if the agent could not be attached."], ["@B_java#lang#SecurityException_E@", "if the app is not debuggable."]], "SeeAlso": [], "Permissions": [], "Description": "Attach a library as a jvmti agent to the current runtime, with the given classloader determining the library search path. Note: agents may only be attached to debuggable apps. Otherwise, this function will throw a SecurityException.", "history": "Added in API level 28", "FullName": "public static void attachJvmtiAgent (String library, String options, ClassLoader classLoader)"}, "getGlobalExternalAllocSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and always returns 0.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getGlobalExternalAllocSize ()"}, "getGlobalAllocSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the global size, in bytes, of objects allocated by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getGlobalAllocSize ()"}, "resetGlobalClassInitCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalClassInitCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the count of classes initialized.", "history": "Added in API level 8 Deprecated in API level 23", "FullName": "public static void resetGlobalClassInitCount ()"}, "getBinderLocalObjectCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of active local Binder objects that exist in the current process.", "history": "Added in API level 1", "FullName": "public static int getBinderLocalObjectCount ()"}, "setAllocationLimit(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. Establish an object allocation limit in the current thread. This feature was never enabled in release builds. The allocation limits feature was removed in Honeycomb. This method exists for compatibility and always returns -1 and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int setAllocationLimit (int limit)"}, "startNativeTracing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable qemu tracing. For this to work requires running everything inside the qemu emulator; otherwise, this method will have no effect. The trace file is specified on the command line when the emulator is started. For example, the following command line emulator -trace foo will start running the emulator and create a trace file named \"foo\". This method simply enables writing the trace records to the trace file. The main differences between this and @B_android#os#Debug#startMethodTracing_E@ are that tracing in the qemu emulator traces every cpu instruction of every process, including kernel code, so we have more complete information, including all context switches. We can also get more detailed information such as cache misses. The sequence of calls is determined by post-processing the instruction trace. The qemu tracing is also done without modifying the application or perturbing the timing of calls because no instrumentation is added to the application being traced. One limitation of using this method compared to using @B_android#os#Debug#startMethodTracing_E@ on the real device is that the emulator does not model all of the real hardware effects such as memory and bus contention. The emulator also has a simple cache model and cannot capture all the complexities of a real cache.", "history": "Added in API level 1", "FullName": "public static void startNativeTracing ()"}, "getThreadExternalAllocCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getThreadExternalAllocCount ()"}, "threadCpuTimeNanos()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an indication of thread CPU usage. The value returned indicates the amount of time that the current thread has spent executing code or waiting for certain types of I/O. The time is expressed in nanoseconds, and is only meaningful when compared to the result from an earlier call. Note that nanosecond resolution does not imply nanosecond accuracy. On system which don't support this operation, the call returns -1.", "history": "Added in API level 1", "FullName": "public static long threadCpuTimeNanos ()"}, "resetGlobalFreedSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalFreedSize_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the global size of objects freed.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetGlobalFreedSize ()"}, "stopAllocCounting()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Stop counting the number and aggregate size of memory allocations.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public static void stopAllocCounting ()"}, "dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])": {"Returns": [["boolean", "true if the service was dumped successfully, false if the service could not be found or had an error while dumping"]], "Parameters": [["@B_java#lang#String_E@", "String: of the service to dump"], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: to write dump output to (usually an output log file)"], ["@B_java#lang#String_E@", "String: to pass to the service's dump method, may be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a debugging dump of a system service by name. Most services require the caller to hold android.permission.DUMP.", "history": "Added in API level 8", "FullName": "public static boolean dumpService (String name, FileDescriptor fd, String[] args)"}, "enableEmulatorTraceOutput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable \"emulator traces\", in which information about the current method is made available to the \"emulator -trace\" feature. There is no corresponding \"disable\" call -- this is intended for use by the framework when tracing should be turned on and left that way, so that traces captured with F9/F10 will include the necessary data. This puts the VM into \"profile\" mode, which has performance consequences. To temporarily enable tracing, use @B_android#os#Debug#startNativeTracing_E@.", "history": "Added in API level 1", "FullName": "public static void enableEmulatorTraceOutput ()"}, "resetGlobalExternalFreedCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetGlobalExternalFreedCount ()"}, "getNativeHeapFreeSize()": {"Returns": [["long", "The freed size in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of free memory in the native heap.", "history": "Added in API level 1", "FullName": "public static long getNativeHeapFreeSize ()"}, "getNativeHeapSize()": {"Returns": [["long", "The size of the native heap in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the native heap.", "history": "Added in API level 1", "FullName": "public static long getNativeHeapSize ()"}, "startMethodTracingSampling(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."], ["int", "int: The maximum amount of trace data we gather. If not given, it defaults to 8MB."], ["int", "int: The amount of time between each sample in microseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start sampling-based method tracing, specifying the trace log file name, the buffer size, and the sampling interval. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See", "history": "Added in API level 21", "FullName": "public static void startMethodTracingSampling (String tracePath, int bufferSize, int intervalUs)"}, "startMethodTracing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing with default log name and buffer size. By default, the trace file is called \"dmtrace.trace\" and it's placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "Added in API level 1", "FullName": "public static void startMethodTracing ()"}, "isDebuggerConnected()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if a debugger is currently attached.", "history": "Added in API level 1", "FullName": "public static boolean isDebuggerConnected ()"}, "resetThreadAllocSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getThreadAllocSize_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the thread-local count of objects allocated.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetThreadAllocSize ()"}, "resetThreadGcInvocationCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getThreadGcInvocationCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the thread-local count of non-concurrent GC invocations.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetThreadGcInvocationCount ()"}, "resetGlobalExternalFreedSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetGlobalExternalFreedSize ()"}, "resetGlobalClassInitTime()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalClassInitTime_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the count of time spent initializing classes.", "history": "Added in API level 8 Deprecated in API level 23", "FullName": "public static void resetGlobalClassInitTime ()"}, "resetGlobalExternalAllocSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetGlobalExternalAllocSize ()"}, "getRuntimeStats()": {"Returns": [["@B_java#util#Map_E@", "a map of the names/values of the supported runtime statistics."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a map of the names/values of the runtime statistics that @B_android#os#Debug#getRuntimeStat_E@ supports.", "history": "Added in API level 23", "FullName": "public static Map<String, String> getRuntimeStats ()"}, "resetThreadAllocCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getThreadAllocCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the thread-local count of objects allocated.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetThreadAllocCount ()"}, "resetAllCounts()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#startAllocCounting_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears all the global and thread-local memory allocation counters.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetAllCounts ()"}, "startMethodTracing(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Path to the trace log file to create. If null, this will default to \"dmtrace.trace\". If the file already exists, it will be truncated. If the path given does not end in \".trace\", it will be appended for you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start method tracing, specifying the trace log file path. When a relative file path is given, the trace file will be placed under your package-specific directory on primary shared/external storage, as returned by @B_android#content#Context#getExternalFilesDir_E@. See When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative, consider using sampling-based method tracing via @B_android#os#Debug#startMethodTracingSampling_E@ or \"native\" tracing in the emulator via @B_android#os#Debug#startNativeTracing_E@.", "history": "Added in API level 1", "FullName": "public static void startMethodTracing (String tracePath)"}, "getGlobalClassInitCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 8 Deprecated in API level 23", "FullName": "public static int getGlobalClassInitCount ()"}, "stopMethodTracing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop method tracing.", "history": "Added in API level 1", "FullName": "public static void stopMethodTracing ()"}, "resetThreadExternalAllocSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and has no effect.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void resetThreadExternalAllocSize ()"}, "startAllocCounting()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Start counting the number and aggregate size of memory allocations. The @B_android#os#Debug#startAllocCounting_E@ method resets the counts and enables counting. The @B_android#os#Debug#stopAllocCounting_E@ method disables the counting so that the analysis code doesn't cause additional allocations. The various get methods return the specified value. And the various reset methods reset the specified count. Counts are kept for the system as a whole (global) and for each thread. The per-thread counts for threads other than the current thread are not cleared by the \"reset\" or \"start\" calls.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public static void startAllocCounting ()"}, "getRuntimeStat(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the specified runtime statistic or null if the runtime statistic doesn't exist."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the runtime statistic to look up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of a particular runtime statistic or null if no such runtime statistic exists. The following table lists the runtime statistics that the runtime supports. Note runtime statistics may be added or removed in a future API level.", "history": "Added in API level 23", "FullName": "public static String getRuntimeStat (String statName)"}, "printLoadedClasses(int)": {"Returns": [], "Parameters": [["int", "int: See constants above."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dump a list of all currently loaded class to the log file.", "history": "Added in API level 1", "FullName": "public static void printLoadedClasses (int flags)"}, "getBinderProxyObjectCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of references to remote proxy Binder objects that exist in the current process.", "history": "Added in API level 1", "FullName": "public static int getBinderProxyObjectCount ()"}, "getThreadAllocSize()": {"Returns": [["int", "The allocated size in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the thread-local size of objects allocated by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getThreadAllocSize ()"}, "getThreadAllocCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the thread-local count of objects allocated by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getThreadAllocCount ()"}, "getGlobalExternalAllocCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and always returns 0.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getGlobalExternalAllocCount ()"}, "getGlobalExternalFreedCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete. This method exists for compatibility and always returns 0.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getGlobalExternalFreedCount ()"}, "resetGlobalFreedCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalFreedCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the global count of objects freed.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetGlobalFreedCount ()"}, "stopNativeTracing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop qemu tracing. See @B_android#os#Debug#startNativeTracing_E@ to start tracing. Tracing can be started and stopped as many times as desired. When the qemu emulator itself is stopped then the buffered trace records are flushed and written to the trace file. In fact, it is not necessary to call this method at all; simply killing qemu is sufficient. But starting and stopping a trace is useful for examining a specific region of code.", "history": "Added in API level 1", "FullName": "public static void stopNativeTracing ()"}, "waitingForDebugger()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns \"true\" if one or more threads is waiting for a debugger to attach.", "history": "Added in API level 1", "FullName": "public static boolean waitingForDebugger ()"}, "getPss()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the PSS memory used by the process as given by the smaps.", "history": "Added in API level 14", "FullName": "public static long getPss ()"}, "getGlobalAllocCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Returns the global count of objects allocated by the runtime between a @B_android#os#Debug#startAllocCounting_E@ and @B_android#os#Debug#stopAllocCounting_E@.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static int getGlobalAllocCount ()"}, "resetGlobalGcInvocationCount()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Debug#getGlobalGcInvocationCount_E@"], "Permissions": [], "Description": "Accurate counting is a burden on the runtime and may be removed. Clears the count of non-concurrent GC invocations.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static void resetGlobalGcInvocationCount ()"}, "getBinderSentTransactions()": {"Returns": [["int", "The number of sent transactions or -1 if it could not read t."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of sent transactions from this process.", "history": "Added in API level 1", "FullName": "public static int getBinderSentTransactions ()"}}, "Inheritance": [], "ClassName": "android.os.Debug", "ClassDesc": "Provides various debugging methods for Android applications, including tracing and allocation counts. Debug can create log files that give details about an application, such as a call stack and start/stop times for any running methods. See @B_android#os#Debug#stopMethodTracing_E@."}