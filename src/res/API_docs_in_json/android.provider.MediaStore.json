{"Functions": {"setIncludePending(android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#MediaStore#MediaColumns_E@", "@B_android#provider#MediaStore#setIncludePending_E@"], "Permissions": [], "Description": "Update the given @B_android#net#Uri_E@ to also include any pending media items from calls such as @B_android#content#ContentResolver#query_E@. By default no pending items are returned.", "history": "Added in API level 29", "FullName": "public static Uri setIncludePending (Uri uri)"}, "MediaStore()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public MediaStore ()"}, "getExternalVolumeNames(android.content.Context)": {"Returns": [["@B_java#util#Set_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return list of all specific volume names that make up @B_android#provider#MediaStore#VOLUME_EXTERNAL_E@. This includes a unique volume name for each shared storage device that is currently attached, which typically includes @B_android#provider#MediaStore#VOLUME_EXTERNAL_PRIMARY_E@. Each specific volume name can be passed to APIs like @B_android#provider#MediaStore#Images#Media#getContentUri_E@ to interact with media on that storage device.", "history": "Added in API level 29", "FullName": "public static Set<String> getExternalVolumeNames (Context context)"}, "getMediaUri(android.content.Context,android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "An equivalent @B_android#provider#MediaStore_E@ Uri. Returns null if no equivalent was found."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The @B_android#provider#DocumentsProvider_E@ Uri to convert. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#MediaStore#getDocumentUri_E@"], "Permissions": [], "Description": "Return a @B_android#provider#MediaStore_E@ Uri that is an equivalent to the given @B_android#provider#DocumentsProvider_E@ Uri. This allows apps with Storage Access Framework permissions to convert between @B_android#provider#MediaStore_E@ and @B_android#provider#DocumentsProvider_E@ Uris that refer to the same underlying item. Note that this method doesn't grant any new permissions; callers must already hold permissions obtained with @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@ or related APIs.", "history": "Added in API level 29", "FullName": "public static Uri getMediaUri (Context context, Uri documentUri)"}, "getMediaScannerUri()": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Uri for querying the state of the media scanner.", "history": "Added in API level 1", "FullName": "public static Uri getMediaScannerUri ()"}, "setRequireOriginal(android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_MEDIA_LOCATION_E@"], "Description": "Update the given @B_android#net#Uri_E@ to indicate that the caller requires the original file contents when calling @B_android#content#ContentResolver#openFileDescriptor_E@. This can be useful when the caller wants to ensure they're backing up the exact bytes of the underlying media, without any Exif redaction being performed. If the original file contents cannot be provided, a @B_java#lang#UnsupportedOperationException_E@ will be thrown when the returned @B_android#net#Uri_E@ is used, such as when the caller doesn't hold @B_android#Manifest#permission#ACCESS_MEDIA_LOCATION_E@.", "history": "Added in API level 29", "FullName": "public static Uri setRequireOriginal (Uri uri)"}, "getDocumentUri(android.content.Context,android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "An equivalent @B_android#provider#DocumentsProvider_E@ Uri. Returns null if no equivalent was found."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The @B_android#provider#MediaStore_E@ Uri to convert. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#MediaStore#getMediaUri_E@"], "Permissions": [], "Description": "Return a @B_android#provider#DocumentsProvider_E@ Uri that is an equivalent to the given @B_android#provider#MediaStore_E@ Uri. This allows apps with Storage Access Framework permissions to convert between @B_android#provider#MediaStore_E@ and @B_android#provider#DocumentsProvider_E@ Uris that refer to the same underlying item. Note that this method doesn't grant any new permissions; callers must already hold permissions obtained with @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@ or related APIs.", "history": "Added in API level 26", "FullName": "public static Uri getDocumentUri (Context context, Uri mediaUri)"}, "getVersion(android.content.Context,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_java#lang#String_E@", "String: specific volume to obtain an opaque version string for. Must be one of the values returned from @B_android#provider#MediaStore#getExternalVolumeNames_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an opaque version string describing the @B_android#provider#MediaStore_E@ state. Applications that import data from @B_android#provider#MediaStore_E@ into their own caches can use this to detect that @B_android#provider#MediaStore_E@ has undergone substantial changes, and that data should be rescanned. No other assumptions should be made about the meaning of the version.", "history": "Added in API level 29", "FullName": "public static String getVersion (Context context, String volumeName)"}, "getVersion(android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an opaque version string describing the @B_android#provider#MediaStore_E@ state. Applications that import data from @B_android#provider#MediaStore_E@ into their own caches can use this to detect that @B_android#provider#MediaStore_E@ has undergone substantial changes, and that data should be rescanned. No other assumptions should be made about the meaning of the version. This method returns the version for @B_android#provider#MediaStore#VOLUME_EXTERNAL_PRIMARY_E@; to obtain a version for a different volume, use @B_android#provider#MediaStore#getVersion_E@.", "history": "Added in API level 12", "FullName": "public static String getVersion (Context context)"}, "getVolumeName(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the volume name that the given @B_android#net#Uri_E@ references.", "history": "Added in API level 29", "FullName": "public static String getVolumeName (Uri uri)"}}, "Inheritance": [], "ClassName": "android.provider.MediaStore", "ClassDesc": "The contract between the media provider and applications. Contains definitions for the supported URIs and columns. The media provider provides an indexed collection of common media types, such as @B_android#provider#MediaStore#Audio_E@, @B_android#provider#MediaStore#Video_E@, and @B_android#provider#MediaStore#Images_E@, from any attached storage devices. Each collection is organized based on the primary MIME type of the underlying content; for example, image/* content is indexed under @B_android#provider#MediaStore#Images_E@. The @B_android#provider#MediaStore#Files_E@ collection provides a broad view across all collections, and does not filter by MIME type."}