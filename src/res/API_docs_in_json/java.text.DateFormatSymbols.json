{"Functions": {"setLocalPatternChars(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new localized date-time pattern characters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets localized date-time pattern characters. For example: 'u', 't', etc.", "history": "Added in API level 1", "FullName": "public void setLocalPatternChars (String newLocalPatternChars)"}, "setZoneStrings(java.lang.String[][])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new time zone strings."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the length of any row in newZoneStrings is less than 5"], ["@B_java#lang#NullPointerException_E@", "if newZoneStrings is null"]], "SeeAlso": ["@B_java#text#DateFormatSymbols#getZoneStrings_E@"], "Permissions": [], "Description": "Sets time zone strings. The argument must be a two-dimensional array of strings of size n by m, where m is at least 5. Each of the n rows is an entry containing the localized names for a single TimeZone. Each such row contains (with i ranging from 0..n-1): zoneStrings[i][0] - time zone ID zoneStrings[i][1] - long name of zone in standard time zoneStrings[i][2] - short name of zone in standard time zoneStrings[i][3] - long name of zone in daylight saving time zoneStrings[i][4] - short name of zone in daylight saving time The zone ID is not localized; it's one of the valid IDs of the @B_java#util#TimeZone_E@ class that are not", "history": "Added in API level 1", "FullName": "public void setZoneStrings (String[][] newZoneStrings)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override equals", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getShortMonths()": {"Returns": [["@B_java#lang#String_E@", "the short month strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets short month strings. For example: \"Jan\", \"Feb\", etc. If the language requires different forms for formatting and stand-alone usages, This method returns short month names in the formatting form. For example, the preferred abbreviation for January in the Catalan language is de gen. in the formatting form, while it is gen. in the stand-alone form. This method returns \"de gen.\" in this case. Refer to the", "history": "Added in API level 1", "FullName": "public String[] getShortMonths ()"}, "setEras(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new era strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets era strings. For example: \"AD\" and \"BC\".", "history": "Added in API level 1", "FullName": "public void setEras (String[] newEras)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "setWeekdays(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 1", "FullName": "public void setWeekdays (String[] newWeekdays)"}, "DateFormatSymbols(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [["@B_java#util#MissingResourceException_E@", "if the resources for the specified locale cannot be found or cannot be loaded."]], "SeeAlso": ["@B_java#text#DateFormatSymbols#getInstance_E@"], "Permissions": [], "Description": "Construct a DateFormatSymbols object by loading format data from resources for the given locale. It is recommended that the @B_java#text#DateFormatSymbols#getInstance_E@ method is used instead.", "history": "Added in API level 1", "FullName": "public DateFormatSymbols (Locale locale)"}, "getZoneStrings()": {"Returns": [["@B_java#lang#String_E@", "the time zone strings."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DateFormatSymbols#setZoneStrings_E@"], "Permissions": [], "Description": "Gets time zone strings. Use of this method is discouraged; use @B_java#util#TimeZone#getDisplayName_E@ instead. The value returned is a two-dimensional array of strings of size n by m, where m is at least 5. Each of the n rows is an entry containing the localized names for a single TimeZone. Each such row contains (with i ranging from 0..n-1): zoneStrings[i][0] - time zone ID zoneStrings[i][1] - long name of zone in standard time zoneStrings[i][2] - short name of zone in standard time zoneStrings[i][3] - long name of zone in daylight saving time zoneStrings[i][4] - short name of zone in daylight saving time The zone ID is not localized; it's one of the valid IDs of the @B_java#util#TimeZone_E@ class that are not If @B_java#text#DateFormatSymbols#setZoneStrings_E@ has been called on this DateFormatSymbols instance, then the strings provided by that call are returned. Otherwise, the returned array contains names provided by the runtime.", "history": "Added in API level 1", "FullName": "public String[][] getZoneStrings ()"}, "getInstance()": {"Returns": [["@B_java#text#DateFormatSymbols_E@", "a DateFormatSymbols instance."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the DateFormatSymbols instance for the default locale. This is equivalent to calling @B_java#text#DateFormatSymbols#getInstance_E@.", "history": "Added in API level 9", "FullName": "public static final DateFormatSymbols getInstance ()"}, "getAmPmStrings()": {"Returns": [["@B_java#lang#String_E@", "the ampm strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets ampm strings. For example: \"AM\" and \"PM\".", "history": "Added in API level 1", "FullName": "public String[] getAmPmStrings ()"}, "setMonths(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new month strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets month strings. For example: \"January\", \"February\", etc.", "history": "Added in API level 1", "FullName": "public void setMonths (String[] newMonths)"}, "setShortMonths(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new short month strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets short month strings. For example: \"Jan\", \"Feb\", etc.", "history": "Added in API level 1", "FullName": "public void setShortMonths (String[] newShortMonths)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode. Generates a hash code for the DateFormatSymbols object.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getShortWeekdays()": {"Returns": [["@B_java#lang#String_E@", "the short weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.", "history": "Added in API level 1", "FullName": "public String[] getShortWeekdays ()"}, "setAmPmStrings(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new ampm strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets ampm strings. For example: \"AM\" and \"PM\".", "history": "Added in API level 1", "FullName": "public void setAmPmStrings (String[] newAmpms)"}, "getMonths()": {"Returns": [["@B_java#lang#String_E@", "the month strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets month strings. For example: \"January\", \"February\", etc. If the language requires different forms for formatting and stand-alone usages, this method returns month names in the formatting form. For example, the preferred month name for January in the Czech language is ledna in the formatting form, while it is leden in the stand-alone form. This method returns \"ledna\" in this case. Refer to the", "history": "Added in API level 1", "FullName": "public String[] getMonths ()"}, "getWeekdays()": {"Returns": [["@B_java#lang#String_E@", "the weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 1", "FullName": "public String[] getWeekdays ()"}, "getEras()": {"Returns": [["@B_java#lang#String_E@", "the era strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets era strings. For example: \"AD\" and \"BC\".", "history": "Added in API level 1", "FullName": "public String[] getEras ()"}, "setShortWeekdays(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new short weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.", "history": "Added in API level 1", "FullName": "public void setShortWeekdays (String[] newShortWeekdays)"}, "DateFormatSymbols()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "if the resources for the default locale cannot be found or cannot be loaded."]], "SeeAlso": ["@B_java#text#DateFormatSymbols#getInstance_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Construct a DateFormatSymbols object by loading format data from resources for the default @B_java#util#Locale#Category#FORMAT_E@ locale. It is recommended that the @B_java#text#DateFormatSymbols#getInstance_E@ method is used instead. This is equivalent to calling @B_java#text#DateFormatSymbols#DateFormatSymbols_E@.", "history": "Added in API level 1", "FullName": "public DateFormatSymbols ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of locales for which localized DateFormatSymbols instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances.", "history": "Added in API level 9", "FullName": "public static Locale[] getAvailableLocales ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_java#text#DateFormatSymbols_E@", "a DateFormatSymbols instance."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the DateFormatSymbols instance for the specified locale.", "history": "Added in API level 9", "FullName": "public static final DateFormatSymbols getInstance (Locale locale)"}, "getLocalPatternChars()": {"Returns": [["@B_java#lang#String_E@", "the localized date-time pattern characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets localized date-time pattern characters. For example: 'u', 't', etc.", "history": "Added in API level 1", "FullName": "public String getLocalPatternChars ()"}}, "Inheritance": [], "ClassName": "java.text.DateFormatSymbols", "ClassDesc": "DateFormatSymbols is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. SimpleDateFormat uses DateFormatSymbols to encapsulate this information. Typically you shouldn't use DateFormatSymbols directly. Rather, you are encouraged to create a date-time formatter with the DateFormat class's factory methods: getTimeInstance, getDateInstance, or getDateTimeInstance. These methods automatically create a DateFormatSymbols for the formatter so that you don't have to. After the formatter is created, you may modify its format pattern using the setPattern method. For more information about creating formatters using DateFormat's factory methods, see @B_java#text#DateFormat_E@. If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with: DateFormatSymbols objects are cloneable. When you obtain a DateFormatSymbols object, feel free to modify the date-time formatting data. For instance, you can replace the localized date-time format pattern characters with the ones that you feel easy to remember. Or you can change the representative cities to your favorite ones. New DateFormatSymbols subclasses may be added to support SimpleDateFormat for date-time formatting for additional locales."}