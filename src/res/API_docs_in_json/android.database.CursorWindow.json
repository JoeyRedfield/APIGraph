{"Functions": {"CursorWindow(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the cursor window, or null if none."], ["long", "long: Size of cursor window in bytes. Note: Memory is dynamically allocated as data rows are added to the window. Depending on the amount of data stored, the actual amount of memory allocated can be lower than specified size, but cannot exceed it. Value is a non-negative number of bytes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new empty cursor window and gives it a name. The cursor initially has no rows or columns. Call @B_android#database#CursorWindow#setNumColumns_E@ to set the number of columns before adding any rows to the cursor.", "history": "Added in API level 28", "FullName": "public CursorWindow (String name, long windowSizeBytes)"}, "newFromParcel(android.os.Parcel)": {"Returns": [["@B_android#database#CursorWindow_E@", "no returns description in source"]], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static CursorWindow newFromParcel (Parcel p)"}, "isBlob(int,int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean isBlob (int row, int column)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the cursor window and frees its underlying resources when all other remaining references have been released.", "history": "Since: API Level 1", "FullName": "public void close ()"}, "putString(java.lang.String,int,int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["@B_java#lang#String_E@", "String: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a string into the field at the specified row and column index.", "history": "Added in API level 1", "FullName": "public boolean putString (String value, int row, int column)"}, "onAllReferencesReleased()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the last reference to the object was released by a call to @B_android#database#sqlite#SQLiteClosable#releaseReference_E@ or @B_android#database#sqlite#SQLiteClosable#close_E@.", "history": "Added in API level 1", "FullName": "protected void onAllReferencesReleased ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "allocRow()": {"Returns": [["boolean", "True if successful, false if the cursor window is out of memory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new row at the end of this cursor window.", "history": "Added in API level 1", "FullName": "public boolean allocRow ()"}, "getLong(int,int)": {"Returns": [["long", "The value of the field as a long."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a long. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is 0L. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the value obtained by parsing the string value with strtoll. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is the long value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is the floating-point value converted to a long. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public long getLong (int row, int column)"}, "isFloat(int,int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isFloat (int row, int column)"}, "putString(java.lang.String, int, int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["@B_java#lang#String_E@", "String: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a string into the field at the specified row and column index.", "history": "added in API level 1", "FullName": "public boolean putString (String value, int row, int column)"}, "isNull(int, int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "added in API level 1", "FullName": "public boolean isNull (int row, int column)"}, "CursorWindow(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this window will be used in this process only, false if it might be sent to another processes. This argument is ignored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "There is no longer a distinction between local and remote cursor windows. Use the @B_android#database#CursorWindow#CursorWindow_E@ constructor instead. Creates a new empty cursor window. The cursor initially has no rows or columns. Call @B_android#database#CursorWindow#setNumColumns_E@ to set the number of columns before adding any rows to the cursor.", "history": "Added in API level 1", "FullName": "public CursorWindow (boolean localWindow)"}, "putBlob(byte[],int,int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["byte[]", "byte: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a byte array into the field at the specified row and column index.", "history": "Added in API level 1", "FullName": "public boolean putBlob (byte[] value, int row, int column)"}, "getType(int, int)": {"Returns": [["int", "The field type."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of the field at the specified row and column index. The returned field types are: @B_android#database#Cursor#FIELD_TYPE_NULL_E@ @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@ @B_android#database#Cursor#FIELD_TYPE_STRING_E@ @B_android#database#Cursor#FIELD_TYPE_BLOB_E@", "history": "added in API level 11", "FullName": "public int getType (int row, int column)"}, "putLong(long, int, int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["long", "long: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a long integer into the field at the specified row and column index.", "history": "added in API level 1", "FullName": "public boolean putLong (long value, int row, int column)"}, "getBlob(int,int)": {"Returns": [["byte[]", "The value of the field as a byte array."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a byte array. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is null. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then the result is the blob value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the array of bytes that make up the internal representation of the string value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ or @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public byte[] getBlob (int row, int column)"}, "copyStringToBuffer(int,int,android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."], ["@B_android#database#CharArrayBuffer_E@", "CharArrayBuffer: The @B_android#database#CharArrayBuffer_E@ to hold the string. It is automatically resized if the requested string is larger than the buffer's current capacity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the text of the field at the specified row and column index into a @B_android#database#CharArrayBuffer_E@. The buffer is populated as follows: If the buffer is too small for the value to be copied, then it is automatically resized. If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the buffer is set to an empty string. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the buffer is set to the contents of the string. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the buffer is set to a string representation of the integer in decimal, obtained by formatting the value with the printf family of functions using format specifier %lld. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the buffer is set to a string representation of the floating-point value in decimal, obtained by formatting the value with the printf family of functions using format specifier %g. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public void copyStringToBuffer (int row, int column, CharArrayBuffer buffer)"}, "CursorWindow(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the cursor window, or null if none."], ["long", "long: Size of cursor window in bytes. Note: Memory is dynamically allocated as data rows are added to the window. Depending on the amount of data stored, the actual amount of memory allocated can be lower than specified size, but cannot exceed it. Value is a non-negative number of bytes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new empty cursor window and gives it a name. The cursor initially has no rows or columns. Call @B_android#database#CursorWindow#setNumColumns_E@ to set the number of columns before adding any rows to the cursor.", "history": "added in API level 28", "FullName": "public CursorWindow (String name, long windowSizeBytes)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getFloat(int, int)": {"Returns": [["float", "The value of the field as an float."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a float. The result is determined by invoking @B_android#database#CursorWindow#getDouble_E@ and converting the result to float.", "history": "added in API level 1", "FullName": "public float getFloat (int row, int column)"}, "putDouble(double, int, int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["double", "double: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a double-precision floating point value into the field at the specified row and column index.", "history": "added in API level 1", "FullName": "public boolean putDouble (double value, int row, int column)"}, "getLong(int, int)": {"Returns": [["long", "The value of the field as a long."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a long. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is 0L. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the value obtained by parsing the string value with strtoll. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is the long value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is the floating-point value converted to a long. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "added in API level 1", "FullName": "public long getLong (int row, int column)"}, "isLong(int,int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isLong (int row, int column)"}, "setNumColumns(int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["int", "int: The new number of columns."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of columns in this window. This method must be called before any rows are added to the window, otherwise it will fail to set the number of columns if it differs from the current number of columns.", "history": "Added in API level 1", "FullName": "public boolean setNumColumns (int columnNum)"}, "getStartPosition()": {"Returns": [["int", "The zero-based start position."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the start position of this cursor window. The start position is the zero-based index of the first row that this window contains relative to the entire result set of the @B_android#database#Cursor_E@.", "history": "Added in API level 1", "FullName": "public int getStartPosition ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "putNull(int, int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a null value into the field at the specified row and column index.", "history": "added in API level 1", "FullName": "public boolean putNull (int row, int column)"}, "getString(int,int)": {"Returns": [["@B_java#lang#String_E@", "The value of the field as a string."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a string. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is null. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the string value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is a string representation of the integer in decimal, obtained by formatting the value with the printf family of functions using format specifier %lld. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is a string representation of the floating-point value in decimal, obtained by formatting the value with the printf family of functions using format specifier %g. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public String getString (int row, int column)"}, "getFloat(int,int)": {"Returns": [["float", "The value of the field as an float."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a float. The result is determined by invoking @B_android#database#CursorWindow#getDouble_E@ and converting the result to float.", "history": "Added in API level 1", "FullName": "public float getFloat (int row, int column)"}, "putDouble(double,int,int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["double", "double: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a double-precision floating point value into the field at the specified row and column index.", "history": "Added in API level 1", "FullName": "public boolean putDouble (double value, int row, int column)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "isString(int, int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_STRING_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_STRING_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "added in API level 5", "FullName": "public boolean isString (int row, int column)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears out the existing contents of the window, making it safe to reuse for new data. The start position (@B_android#database#CursorWindow#getStartPosition_E@), number of rows (@B_android#database#CursorWindow#getNumRows_E@), and number of columns in the cursor are all reset to zero.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "getInt(int, int)": {"Returns": [["int", "The value of the field as an int."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as an int. The result is determined by invoking @B_android#database#CursorWindow#getLong_E@ and converting the result to int.", "history": "added in API level 1", "FullName": "public int getInt (int row, int column)"}, "getDouble(int, int)": {"Returns": [["double", "The value of the field as a double."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a double. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is 0.0. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the value obtained by parsing the string value with strtod. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is the integer value converted to a double. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is the double value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "added in API level 1", "FullName": "public double getDouble (int row, int column)"}, "getBlob(int, int)": {"Returns": [["byte[]", "The value of the field as a byte array."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a byte array. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is null. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then the result is the blob value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the array of bytes that make up the internal representation of the string value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ or @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "added in API level 1", "FullName": "public byte[] getBlob (int row, int column)"}, "getType(int,int)": {"Returns": [["int", "The field type."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of the field at the specified row and column index. The returned field types are: @B_android#database#Cursor#FIELD_TYPE_NULL_E@ @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@ @B_android#database#Cursor#FIELD_TYPE_STRING_E@ @B_android#database#Cursor#FIELD_TYPE_BLOB_E@", "history": "Added in API level 11", "FullName": "public int getType (int row, int column)"}, "putNull(int,int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a null value into the field at the specified row and column index.", "history": "Added in API level 1", "FullName": "public boolean putNull (int row, int column)"}, "getDouble(int,int)": {"Returns": [["double", "The value of the field as a double."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a double. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is 0.0. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the value obtained by parsing the string value with strtod. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is the integer value converted to a double. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is the double value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public double getDouble (int row, int column)"}, "isLong(int, int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@.", "history": "added in API level 5", "FullName": "public boolean isLong (int row, int column)"}, "getShort(int, int)": {"Returns": [["short", "The value of the field as a short."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a short. The result is determined by invoking @B_android#database#CursorWindow#getLong_E@ and converting the result to short.", "history": "added in API level 1", "FullName": "public short getShort (int row, int column)"}, "isString(int,int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_STRING_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_STRING_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isString (int row, int column)"}, "getShort(int,int)": {"Returns": [["short", "The value of the field as a short."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a short. The result is determined by invoking @B_android#database#CursorWindow#getLong_E@ and converting the result to short.", "history": "Added in API level 1", "FullName": "public short getShort (int row, int column)"}, "putLong(long,int,int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["long", "long: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a long integer into the field at the specified row and column index.", "history": "Added in API level 1", "FullName": "public boolean putLong (long value, int row, int column)"}, "putBlob(byte[], int, int)": {"Returns": [["boolean", "True if successful."]], "Parameters": [["byte[]", "byte: The value to store."], ["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a byte array into the field at the specified row and column index.", "history": "added in API level 1", "FullName": "public boolean putBlob (byte[] value, int row, int column)"}, "CursorWindow(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the cursor window, or null if none."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new empty cursor window and gives it a name. The cursor initially has no rows or columns. Call @B_android#database#CursorWindow#setNumColumns_E@ to set the number of columns before adding any rows to the cursor.", "history": "Added in API level 15", "FullName": "public CursorWindow (String name)"}, "getInt(int,int)": {"Returns": [["int", "The value of the field as an int."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as an int. The result is determined by invoking @B_android#database#CursorWindow#getLong_E@ and converting the result to int.", "history": "Added in API level 1", "FullName": "public int getInt (int row, int column)"}, "getString(int, int)": {"Returns": [["@B_java#lang#String_E@", "The value of the field as a string."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the field at the specified row and column index as a string. The result is determined as follows: If the field is of type @B_android#database#Cursor#FIELD_TYPE_NULL_E@, then the result is null. If the field is of type @B_android#database#Cursor#FIELD_TYPE_STRING_E@, then the result is the string value. If the field is of type @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@, then the result is a string representation of the integer in decimal, obtained by formatting the value with the printf family of functions using format specifier %lld. If the field is of type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@, then the result is a string representation of the floating-point value in decimal, obtained by formatting the value with the printf family of functions using format specifier %g. If the field is of type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@, then a @B_android#database#sqlite#SQLiteException_E@ is thrown.", "history": "added in API level 1", "FullName": "public String getString (int row, int column)"}, "isBlob(int, int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_BLOB_E@ or @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "added in API level 1", "FullName": "public boolean isBlob (int row, int column)"}, "setStartPosition(int)": {"Returns": [], "Parameters": [["int", "int: The new zero-based start position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the start position of this cursor window. The start position is the zero-based index of the first row that this window contains relative to the entire result set of the @B_android#database#Cursor_E@.", "history": "Added in API level 1", "FullName": "public void setStartPosition (int pos)"}, "getNumRows()": {"Returns": [["int", "The number of rows in this cursor window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of rows in this window.", "history": "Added in API level 1", "FullName": "public int getNumRows ()"}, "isNull(int,int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_NULL_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_NULL_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean isNull (int row, int column)"}, "freeLastRow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Frees the last row in this cursor window.", "history": "Added in API level 1", "FullName": "public void freeLastRow ()"}, "isFloat(int, int)": {"Returns": [["boolean", "True if the field has type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@."]], "Parameters": [["int", "int: The zero-based row index."], ["int", "int: The zero-based column index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#CursorWindow#getType_E@ instead. Returns true if the field at the specified row and column index has type @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@.", "history": "added in API level 5", "FullName": "public boolean isFloat (int row, int column)"}}, "Inheritance": ["@B_android#database#sqlite#SQLiteClosable_E@"], "ClassName": "android.database.CursorWindow", "ClassDesc": "A buffer containing multiple cursor rows. A @B_android#database#CursorWindow_E@ is read-write when initially created and used locally. When sent to a remote process (by writing it to a @B_android#os#Parcel_E@), the remote process receives a read-only view of the cursor window. Typically the cursor window will be allocated by the producer, filled with data, and then sent to the consumer for reading."}