{"Functions": {"getPixel(int,int)": {"Returns": [["int", "The argb @B_android#graphics#Color_E@ at the specified coordinate"]], "Parameters": [["int", "int: The x coordinate (0...width-1) of the pixel to return"], ["int", "int: The y coordinate (0...height-1) of the pixel to return"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if x, y exceed the bitmap's bounds"], ["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#graphics#Color_E@ at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public int getPixel (int x, int y)"}, "createBitmap(android.graphics.Bitmap)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bitmap from the source bitmap. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density and color space as the original bitmap.", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (Bitmap src)"}, "getPixels(int[], int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int[]", "int: The array to receive the bitmap's colors"], ["int", "int: The first index to write into pixels[]"], ["int", "int: The number of entries in pixels[] to skip between rows (must be >= bitmap's width). Can be negative."], ["int", "int: The x coordinate of the first pixel to read from the bitmap"], ["int", "int: The y coordinate of the first pixel to read from the bitmap"], ["int", "int: The number of pixels to read from each row"], ["int", "int: The number of rows to read"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the pixels array is too small to receive the specified number of pixels."], ["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a @B_android#graphics#Color_E@. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value. The returned colors are non-premultiplied ARGB values in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "added in API level 1", "FullName": "public void getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height)"}, "getConfig()": {"Returns": [["@B_android#graphics#Bitmap#Config_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the bitmap's internal config is in one of the public formats, return that config, otherwise return null.", "history": "Added in API level 1", "FullName": "public Bitmap.Config getConfig ()"}, "getScaledHeight(int)": {"Returns": [["int", "The scaled height of this bitmap, according to the density scale factor."]], "Parameters": [["int", "int: The density of the target canvas of the bitmap."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that returns the height of this bitmap divided by the density scale factor. Returns the bitmap's height multiplied by the ratio of the target density to the bitmap's source density", "history": "Added in API level 4", "FullName": "public int getScaledHeight (int targetDensity)"}, "isPremultiplied()": {"Returns": [["boolean", "true if the underlying pixels have been pre-multiplied, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setPremultiplied_E@", "@B_android#graphics#BitmapFactory#Options#inPremultiplied_E@"], "Permissions": [], "Description": "Indicates whether pixels stored in this bitmaps are stored pre-multiplied. When a pixel is pre-multiplied, the RGB components have been multiplied by the alpha component. For instance, if the original color is a 50% translucent red (128, 255, 0, 0), the pre-multiplied form is (128, 128, 0, 0). This method always returns false if @B_android#graphics#Bitmap#getConfig_E@ is @B_android#graphics#Bitmap#Config#RGB_565_E@. The return value is undefined if @B_android#graphics#Bitmap#getConfig_E@ is @B_android#graphics#Bitmap#Config#ALPHA_8_E@. This method only returns true if @B_android#graphics#Bitmap#hasAlpha_E@ returns true. A bitmap with no alpha channel can be used both as a pre-multiplied and as a non pre-multiplied bitmap. Only pre-multiplied bitmaps may be drawn by the view system or @B_android#graphics#Canvas_E@. If a non-pre-multiplied bitmap with an alpha channel is drawn to a Canvas, a RuntimeException will be thrown.", "history": "Added in API level 17", "FullName": "public boolean isPremultiplied ()"}, "createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A bitmap that represents the specified subset of source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap we are subsetting This value must never be null."], ["int", "int: The x coordinate of the first pixel in source"], ["int", "int: The y coordinate of the first pixel in source"], ["int", "int: The number of pixels in each row"], ["int", "int: The number of rows"], ["@B_android#graphics#Matrix_E@", "Matrix: Optional matrix to be applied to the pixels This value may be null."], ["boolean", "boolean: true if the source should be filtered. Only applies if the matrix contains more than just translation."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0, or if the source bitmap has already been recycled"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density and color space as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. The returned bitmap will always be mutable except in the following scenarios: (1) In situations where the source bitmap is returned and the source bitmap is immutable (2) The source bitmap is a hardware bitmap. That is @B_android#graphics#Bitmap#getConfig_E@ is equivalent to @B_android#graphics#Bitmap#Config#HARDWARE_E@", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)"}, "compress(android.graphics.Bitmap.CompressFormat,int,java.io.OutputStream)": {"Returns": [["boolean", "true if successfully compressed to the specified stream."]], "Parameters": [["@B_android#graphics#Bitmap#CompressFormat_E@", "Bitmap.CompressFormat: The format of the compressed image"], ["int", "int: Hint to the compressor, 0-100. 0 meaning compress for small size, 100 meaning compress for max quality. Some formats, like PNG which is lossless, will ignore the quality setting"], ["@B_java#io#OutputStream_E@", "OutputStream: The outputstream to write the compressed data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a compressed version of the bitmap to the specified outputstream. If this returns true, the bitmap can be reconstructed by passing a corresponding inputstream to BitmapFactory.decodeStream(). Note: not all Formats support all bitmap configs directly, so it is possible that the returned bitmap from BitmapFactory could be in a different bitdepth, and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque pixels). This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 1", "FullName": "public boolean compress (Bitmap.CompressFormat format, int quality, OutputStream stream)"}, "setConfig(android.graphics.Bitmap.Config)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#reconfigure_E@", "@B_android#graphics#Bitmap#setWidth_E@", "@B_android#graphics#Bitmap#setHeight_E@"], "Permissions": [], "Description": "Convenience method for calling @B_android#graphics#Bitmap#reconfigure_E@ with the current height and width. WARNING: this method should not be used on bitmaps currently used by the view system, see @B_android#graphics#Bitmap#reconfigure_E@ for more details.", "history": "Added in API level 19", "FullName": "public void setConfig (Bitmap.Config config)"}, "getRowBytes()": {"Returns": [["int", "number of bytes between rows of the native bitmap pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of bytes between rows in the bitmap's pixels. Note that this refers to the pixels as stored natively by the bitmap. If you call getPixels() or setPixels(), then the pixels are uniformly treated as 32bit values, packed according to the Color class. As of @B_android#os#Build#VERSION_CODES#KITKAT_E@, this method should not be used to calculate the memory usage of the bitmap. Instead, see @B_android#graphics#Bitmap#getAllocationByteCount_E@.", "history": "Added in API level 1", "FullName": "public int getRowBytes ()"}, "getDensity()": {"Returns": [["int", "A scaling factor of the default density or @B_android#graphics#Bitmap#DENSITY_NONE_E@ if the scaling factor is unknown."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#util#DisplayMetrics_E@", "@B_android#util#DisplayMetrics#densityDpi_E@", "@B_android#graphics#Bitmap_E@"], "Permissions": [], "Description": "Returns the density for this bitmap. The default density is the same density as the current display, unless the current application does not support different screen densities in which case it is @B_android#util#DisplayMetrics#DENSITY_DEFAULT_E@. Note that compatibility mode is determined by the application that was initially loaded into a process -- applications that share the same process should all have the same compatibility, or ensure they explicitly set the density of their bitmaps appropriately.", "history": "Added in API level 4", "FullName": "public int getDensity ()"}, "setHasMipMap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: indicates whether the renderer should attempt to use mipmaps"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#hasMipMap_E@"], "Permissions": [], "Description": "Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size, you may be able to obtain a higher quality by turning this property on. Note that if the renderer respects this hint it might have to allocate extra memory to hold the mipmap levels for this bitmap. This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect.", "history": "Added in API level 17", "FullName": "public void setHasMipMap (boolean hasMipMap)"}, "eraseColor(long)": {"Returns": [], "Parameters": [["long", "long: The color to fill as packed by the @B_android#graphics#Color_E@ class."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable."], ["@B_java#lang#IllegalArgumentException_E@", "if the color space encoded in the ColorLong is invalid or unknown."]], "SeeAlso": [], "Permissions": [], "Description": "Fills the bitmap's pixels with the specified ColorLong.", "history": "Added in API level 29", "FullName": "public void eraseColor (long color)"}, "sameAs(android.graphics.Bitmap)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. If any of those differ, return false. If other is null, return false.", "history": "Added in API level 12", "FullName": "public boolean sameAs (Bitmap other)"}, "copyPixelsFromBuffer(java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels. The data in the buffer is not changed in any way (unlike setPixels(), which converts from unpremultipled 32bit to whatever the bitmap's native format is. The pixels in the source buffer are assumed to be in the bitmap's color space. After this method returns, the current position of the buffer is updated: the position is incremented by the number of elements read from the buffer. If you need to read the bitmap from the buffer again you must first rewind the buffer.", "history": "Added in API level 3", "FullName": "public void copyPixelsFromBuffer (Buffer src)"}, "createBitmap(int[],int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["int[]", "int: Array of sRGB @B_android#graphics#Color_E@ used to initialize the pixels. This array must be at least as large as width * height. This value must never be null."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if the color array's length is less than the number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per @B_android#graphics#Bitmap#getDensity_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (int[] colors, int width, int height, Bitmap.Config config)"}, "hasAlpha()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values. For some configs, this is always false (e.g. RGB_565), since they do not support per-pixel alpha. However, for configs that do, the bitmap may be flagged to be known that all of its pixels are opaque. In this case hasAlpha() will also return false. If a config such as ARGB_8888 is not so flagged, it will return true by default.", "history": "Added in API level 1", "FullName": "public boolean hasAlpha ()"}, "copy(android.graphics.Bitmap.Config,boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the new bitmap, or null if the copy could not be made."]], "Parameters": [["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The desired config for the resulting bitmap"], ["boolean", "boolean: True if the resulting bitmap should be mutable (i.e. its pixels can be modified)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if config is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and isMutable is true"]], "SeeAlso": [], "Permissions": [], "Description": "Tries to make a new bitmap based on the dimensions of this bitmap, setting the new bitmap's config to the one specified, and then copying this bitmap's pixels into the new bitmap. If the conversion is not supported, or the allocator fails, then this returns NULL. The returned bitmap has the same density and color space as the original, except in the following cases. When copying to @B_android#graphics#Bitmap#Config#ALPHA_8_E@, the color space is dropped. When copying to or from @B_android#graphics#Bitmap#Config#RGBA_F16_E@, EXTENDED or non-EXTENDED variants may be adjusted as appropriate.", "history": "Added in API level 1", "FullName": "public Bitmap copy (Bitmap.Config config, boolean isMutable)"}, "hasMipMap()": {"Returns": [["boolean", "true if the renderer should attempt to use mipmaps, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setHasMipMap_E@"], "Permissions": [], "Description": "Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size, you may be able to obtain a higher quality This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect.", "history": "Added in API level 17", "FullName": "public boolean hasMipMap ()"}, "getScaledHeight(android.util.DisplayMetrics)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#graphics#Bitmap#getScaledHeight_E@ with the target density of the given @B_android#util#DisplayMetrics_E@.", "history": "Added in API level 4", "FullName": "public int getScaledHeight (DisplayMetrics metrics)"}, "createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."], ["boolean", "boolean: If the bitmap is ARGB_8888 or RGBA_16F this flag can be used to mark the bitmap as opaque. Doing so will clear the bitmap in black instead of transparent."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the bitmap. If the config is @B_android#graphics#Bitmap#Config#RGBA_F16_E@ and @B_android#graphics#ColorSpace#Named#SRGB_E@ or @B_android#graphics#ColorSpace#Named#LINEAR_SRGB_E@ is provided then the corresponding extended range variant is assumed. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, if Config is Config.HARDWARE (because hardware bitmaps are always immutable), if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@, or if the color space is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is as per @B_android#graphics#Bitmap#getDensity_E@.", "history": "Added in API level 26", "FullName": "public static Bitmap createBitmap (int width, int height, Bitmap.Config config, boolean hasAlpha, ColorSpace colorSpace)"}, "createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "An immutable bitmap with a configuration specified by the config parameter This value will never be null."]], "Parameters": [["@B_android#graphics#Picture_E@", "Picture: The recorded @B_android#graphics#Picture_E@ of drawing commands that will be drawn into the returned Bitmap. This value must never be null."], ["int", "int: The width of the bitmap to create. The picture's width will be scaled to match if necessary."], ["int", "int: The height of the bitmap to create. The picture's height will be scaled to match if necessary."], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The @B_android#graphics#Bitmap#Config_E@ of the created bitmap. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Bitmap from the given @B_android#graphics#Picture_E@ source of recorded drawing commands. The bitmap will be immutable with the given width and height. If the width and height are not the same as the Picture's width & height, the Picture will be scaled to fit the given width and height.", "history": "Added in API level 28", "FullName": "public static Bitmap createBitmap (Picture source, int width, int height, Bitmap.Config config)"}, "getGenerationId()": {"Returns": [["int", "The current generation ID for this bitmap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the generation ID of this bitmap. The generation ID changes whenever the bitmap is modified. This can be used as an efficient way to check if a bitmap has changed.", "history": "Added in API level 12", "FullName": "public int getGenerationId ()"}, "createBitmap(android.graphics.Bitmap,int,int,int,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A copy of a subset of the source bitmap or the source bitmap itself."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap we are subsetting This value must never be null."], ["int", "int: The x coordinate of the first pixel in source"], ["int", "int: The y coordinate of the first pixel in source"], ["int", "int: The number of pixels in each row"], ["int", "int: The number of rows"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a bitmap from the specified subset of the source bitmap. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density and color space as the original bitmap.", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height)"}, "wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A bitmap wrapping the buffer, or null if there was a problem creating the bitmap."]], "Parameters": [["@B_android#hardware#HardwareBuffer_E@", "HardwareBuffer: The HardwareBuffer to wrap. This value must never be null."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the bitmap. Must be a @B_android#graphics#ColorSpace#Rgb_E@ colorspace. If null, SRGB is assumed. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the HardwareBuffer has an invalid usage, or an invalid colorspace is given."]], "SeeAlso": [], "Permissions": [], "Description": "Create a hardware bitmap backed by a @B_android#hardware#HardwareBuffer_E@. The passed HardwareBuffer's usage flags must contain @B_android#hardware#HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE_E@. The bitmap will keep a reference to the buffer so that callers can safely close the HardwareBuffer without affecting the Bitmap. However the HardwareBuffer must not be modified while a wrapped Bitmap is accessing it. Doing so will result in undefined behavior.", "history": "Added in API level 29", "FullName": "public static Bitmap wrapHardwareBuffer (HardwareBuffer hardwareBuffer, ColorSpace colorSpace)"}, "createScaledBitmap(android.graphics.Bitmap,int,int,boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The new scaled bitmap or the source bitmap if no scaling is required."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The source bitmap. This value must never be null."], ["int", "int: The new bitmap's desired width."], ["int", "int: The new bitmap's desired height."], ["boolean", "boolean: Whether or not bilinear filtering should be used when scaling the bitmap. If this is true then bilinear filtering will be used when scaling which has better image quality at the cost of worse performance. If this is false then nearest-neighbor scaling is used instead which will have worse image quality but is faster. Recommended default is to set filter to 'true' as the cost of bilinear filtering is typically minimal and the improved image quality is significant."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if width is <= 0, or height is <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new bitmap, scaled from an existing bitmap, when possible. If the specified width and height are the same as the current width and height of the source bitmap, the source bitmap is returned and no new bitmap is created.", "history": "Added in API level 1", "FullName": "public static Bitmap createScaledBitmap (Bitmap src, int dstWidth, int dstHeight, boolean filter)"}, "setHasAlpha(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tell the bitmap if all of the pixels are known to be opaque (false) or if some of the pixels may contain non-opaque alpha values (true). Note, for some configs (e.g. RGB_565) this call is ignored, since it does not support per-pixel alpha values. This is meant as a drawing hint, as in some cases a bitmap that is known to be opaque can take a faster drawing case than one that may have non-opaque per-pixel alpha values.", "history": "Added in API level 12", "FullName": "public void setHasAlpha (boolean hasAlpha)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bitmap's height", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "getNinePatchChunk()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an optional array of private data, used by the UI system for some bitmaps. Not intended to be called by applications.", "history": "Added in API level 1", "FullName": "public byte[] getNinePatchChunk ()"}, "getScaledWidth(android.graphics.Canvas)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#graphics#Bitmap#getScaledWidth_E@ with the target density of the given @B_android#graphics#Canvas_E@.", "history": "Added in API level 4", "FullName": "public int getScaledWidth (Canvas canvas)"}, "createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Display metrics for the display this bitmap will be drawn on. This value may be null."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."], ["boolean", "boolean: If the bitmap is ARGB_8888 or RGBA_16F this flag can be used to mark the bitmap as opaque. Doing so will clear the bitmap in black instead of transparent."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the bitmap. If the config is @B_android#graphics#Bitmap#Config#RGBA_F16_E@ and @B_android#graphics#ColorSpace#Named#SRGB_E@ or @B_android#graphics#ColorSpace#Named#LINEAR_SRGB_E@ is provided then the corresponding extended range variant is assumed. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, if Config is Config.HARDWARE (because hardware bitmaps are always immutable), if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@, or if the color space is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given @B_android#util#DisplayMetrics_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public static Bitmap createBitmap (DisplayMetrics display, int width, int height, Bitmap.Config config, boolean hasAlpha, ColorSpace colorSpace)"}, "getScaledWidth(android.util.DisplayMetrics)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#graphics#Bitmap#getScaledWidth_E@ with the target density of the given @B_android#util#DisplayMetrics_E@.", "history": "Added in API level 4", "FullName": "public int getScaledWidth (DisplayMetrics metrics)"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bitmap's width", "history": "Added in API level 1", "FullName": "public int getWidth ()"}, "copy(android.graphics.Bitmap.Config, boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the new bitmap, or null if the copy could not be made."]], "Parameters": [["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The desired config for the resulting bitmap"], ["boolean", "boolean: True if the resulting bitmap should be mutable (i.e. its pixels can be modified)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if config is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and isMutable is true"]], "SeeAlso": [], "Permissions": [], "Description": "Tries to make a new bitmap based on the dimensions of this bitmap, setting the new bitmap's config to the one specified, and then copying this bitmap's pixels into the new bitmap. If the conversion is not supported, or the allocator fails, then this returns NULL. The returned bitmap has the same density and color space as the original.", "history": "added in API level 1", "FullName": "public Bitmap copy (Bitmap.Config config, boolean isMutable)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: Parcel object to write the bitmap data into"], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write the bitmap and its pixels to the parcel. The bitmap can be rebuilt from the parcel by calling CREATOR.createFromParcel(). If this bitmap is @B_android#graphics#Bitmap#Config#HARDWARE_E@, it may be unparceled with a different pixel format (e.g. 565, 8888), but the content will be preserved to the best quality permitted by the final pixel format", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel p, int flags)"}, "extractAlpha(android.graphics.Paint,int[])": {"Returns": [["@B_android#graphics#Bitmap_E@", "new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call."]], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior."], ["int[]", "int: Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's.", "history": "Added in API level 1", "FullName": "public Bitmap extractAlpha (Paint paint, int[] offsetXY)"}, "createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Display metrics for the display this bitmap will be drawn on. This value must never be null."], ["int[]", "int: Array of sRGB @B_android#graphics#Color_E@ used to initialize the pixels. This value must never be null."], ["int", "int: Number of values to skip before the first color in the array of colors."], ["int", "int: Number of colors in the array between rows (must be >= width or <= -width)."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if the color array's length is less than the number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given @B_android#util#DisplayMetrics_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 17", "FullName": "public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)"}, "setPixel(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The x coordinate of the pixel to replace (0...width-1)"], ["int", "int: The y coordinate of the pixel to replace (0...height-1)"], ["int", "int: The ARGB color to write into the bitmap"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable"], ["@B_java#lang#IllegalArgumentException_E@", "if x, y are outside of the bitmap's bounds."]], "SeeAlso": [], "Permissions": [], "Description": "Write the specified @B_android#graphics#Color_E@ into the bitmap (assuming it is mutable) at the x,y coordinate. The color must be a non-premultiplied ARGB value in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public void setPixel (int x, int y, int color)"}, "createBitmap(android.graphics.Picture)": {"Returns": [["@B_android#graphics#Bitmap_E@", "An immutable bitmap with a HARDWARE config whose contents are created from the recorded drawing commands in the Picture source. This value will never be null."]], "Parameters": [["@B_android#graphics#Picture_E@", "Picture: The recorded @B_android#graphics#Picture_E@ of drawing commands that will be drawn into the returned Bitmap. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Bitmap from the given @B_android#graphics#Picture_E@ source of recorded drawing commands. Equivalent to calling @B_android#graphics#Bitmap#createBitmap_E@ with width and height the same as the Picture's width and height and a Config.HARDWARE config.", "history": "Added in API level 28", "FullName": "public static Bitmap createBitmap (Picture source)"}, "setPixel(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The x coordinate of the pixel to replace (0...width-1)"], ["int", "int: The y coordinate of the pixel to replace (0...height-1)"], ["int", "int: The ARGB color to write into the bitmap"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable"], ["@B_java#lang#IllegalArgumentException_E@", "if x, y are outside of the bitmap's bounds."]], "SeeAlso": [], "Permissions": [], "Description": "Write the specified @B_android#graphics#Color_E@ into the bitmap (assuming it is mutable) at the x,y coordinate. The color must be a non-premultiplied ARGB value in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "added in API level 1", "FullName": "public void setPixel (int x, int y, int color)"}, "setHeight(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#reconfigure_E@", "@B_android#graphics#Bitmap#setWidth_E@", "@B_android#graphics#Bitmap#setConfig_E@"], "Permissions": [], "Description": "Convenience method for calling @B_android#graphics#Bitmap#reconfigure_E@ with the current width and config. WARNING: this method should not be used on bitmaps currently used by the view system, see @B_android#graphics#Bitmap#reconfigure_E@ for more details.", "history": "Added in API level 19", "FullName": "public void setHeight (int height)"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Free the native object associated with this bitmap, and clear the reference to the pixel data. This will not free the pixel data synchronously; it simply allows it to be garbage collected if there are no other references. The bitmap is marked as \"dead\", meaning it will throw an exception if getPixels() or setPixels() is called, and will draw nothing. This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the bitmap. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this bitmap.", "history": "Added in API level 1", "FullName": "public void recycle ()"}, "createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Display metrics for the display this bitmap will be drawn on. This value may be null."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if Config is Config.HARDWARE, because hardware bitmaps are always immutable"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given @B_android#util#DisplayMetrics_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 17", "FullName": "public static Bitmap createBitmap (DisplayMetrics display, int width, int height, Bitmap.Config config)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "No special parcel contents.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "getScaledWidth(int)": {"Returns": [["int", "The scaled width of this bitmap, according to the density scale factor."]], "Parameters": [["int", "int: The density of the target canvas of the bitmap."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that returns the width of this bitmap divided by the density scale factor. Returns the bitmap's width multiplied by the ratio of the target density to the bitmap's source density", "history": "Added in API level 4", "FullName": "public int getScaledWidth (int targetDensity)"}, "setPremultiplied(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#isPremultiplied_E@", "@B_android#graphics#BitmapFactory#Options#inPremultiplied_E@"], "Permissions": [], "Description": "Sets whether the bitmap should treat its data as pre-multiplied. Bitmaps are always treated as pre-multiplied by the view system and @B_android#graphics#Canvas_E@ for performance reasons. Storing un-pre-multiplied data in a Bitmap (through @B_android#graphics#Bitmap#setPixel_E@, @B_android#graphics#Bitmap#setPixels_E@, or @B_android#graphics#BitmapFactory#Options#inPremultiplied_E@) can lead to incorrect blending if drawn by the framework. This method will not affect the behavior of a bitmap without an alpha channel, or if @B_android#graphics#Bitmap#hasAlpha_E@ returns false. Calling @B_android#graphics#Bitmap#createBitmap_E@ or @B_android#graphics#Bitmap#createScaledBitmap_E@ with a source Bitmap whose colors are not pre-multiplied may result in a RuntimeException, since those functions require drawing the source, which is not supported for un-pre-multiplied Bitmaps.", "history": "Added in API level 19", "FullName": "public void setPremultiplied (boolean premultiplied)"}, "getPixels(int[],int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int[]", "int: The array to receive the bitmap's colors"], ["int", "int: The first index to write into pixels[]"], ["int", "int: The number of entries in pixels[] to skip between rows (must be >= bitmap's width). Can be negative."], ["int", "int: The x coordinate of the first pixel to read from the bitmap"], ["int", "int: The y coordinate of the first pixel to read from the bitmap"], ["int", "int: The number of pixels to read from each row"], ["int", "int: The number of rows to read"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the pixels array is too small to receive the specified number of pixels."], ["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a @B_android#graphics#Color_E@. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value. The returned colors are non-premultiplied ARGB values in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public void getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height)"}, "createBitmap(int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if Config is Config.HARDWARE, because hardware bitmaps are always immutable"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is as per @B_android#graphics#Bitmap#getDensity_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (int width, int height, Bitmap.Config config)"}, "createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Display metrics for the display this bitmap will be drawn on. This value may be null."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."], ["boolean", "boolean: If the bitmap is ARGB_8888 or RGBA_16F this flag can be used to mark the bitmap as opaque. Doing so will clear the bitmap in black instead of transparent."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if Config is Config.HARDWARE, because hardware bitmaps are always immutable"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given @B_android#util#DisplayMetrics_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public static Bitmap createBitmap (DisplayMetrics display, int width, int height, Bitmap.Config config, boolean hasAlpha)"}, "createBitmap(int[],int,int,int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["int[]", "int: Array of sRGB @B_android#graphics#Color_E@ used to initialize the pixels. This value must never be null."], ["int", "int: Number of values to skip before the first color in the array of colors."], ["int", "int: Number of colors in the array between rows (must be >= width or <= -width)."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if the color array's length is less than the number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per @B_android#graphics#Bitmap#getDensity_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public static Bitmap createBitmap (int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)"}, "setDensity(int)": {"Returns": [], "Parameters": [["int", "int: The density scaling factor to use with this bitmap or @B_android#graphics#Bitmap#DENSITY_NONE_E@ if the density is unknown."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#getDensity_E@", "@B_android#util#DisplayMetrics_E@", "@B_android#util#DisplayMetrics#densityDpi_E@", "@B_android#graphics#Bitmap_E@"], "Permissions": [], "Description": "Specifies the density for this bitmap. When the bitmap is drawn to a Canvas that also has a density, it will be scaled appropriately.", "history": "Added in API level 4", "FullName": "public void setDensity (int density)"}, "getScaledHeight(android.graphics.Canvas)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for calling @B_android#graphics#Bitmap#getScaledHeight_E@ with the target density of the given @B_android#graphics#Canvas_E@.", "history": "Added in API level 4", "FullName": "public int getScaledHeight (Canvas canvas)"}, "copyPixelsToBuffer(java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Copy the bitmap's pixels into the specified buffer (allocated by the caller). An exception is thrown if the buffer is not large enough to hold all of the pixels (taking into account the number of bytes per pixel) or if the Buffer subclass is not one of the support types (ByteBuffer, ShortBuffer, IntBuffer). The content of the bitmap is copied into the buffer as-is. This means that if this bitmap stores its pixels pre-multiplied (see @B_android#graphics#Bitmap#isPremultiplied_E@, the values in the buffer will also be pre-multiplied. The pixels remain in the color space of the bitmap. After this method returns, the current position of the buffer is updated: the position is incremented by the number of elements written in the buffer.", "history": "Added in API level 1", "FullName": "public void copyPixelsToBuffer (Buffer dst)"}, "setColorSpace(android.graphics.ColorSpace)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: to assign to the bitmap This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the specified color space is null, not @B_android#graphics#ColorSpace#Model#RGB_E@, has a transfer function that is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@, or whose components min/max values reduce the numerical range compared to the previously assigned color space."], ["@B_java#lang#IllegalArgumentException_E@", "If the Config (returned by @B_android#graphics#Bitmap#getConfig_E@) is @B_android#graphics#Bitmap#Config#ALPHA_8_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Modifies the bitmap to have the specified @B_android#graphics#ColorSpace_E@, without affecting the underlying allocation backing the bitmap. This affects how the framework will interpret the color at each pixel. A bitmap with @B_android#graphics#Bitmap#Config#ALPHA_8_E@ never has a color space, since a color space does not affect the alpha channel. Other Configs must always have a non-null ColorSpace.", "history": "Added in API level 29", "FullName": "public void setColorSpace (ColorSpace colorSpace)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: Parcel object to write the bitmap data into"], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write the bitmap and its pixels to the parcel. The bitmap can be rebuilt from the parcel by calling CREATOR.createFromParcel(). If this bitmap is @B_android#graphics#Bitmap#Config#HARDWARE_E@, it may be unparceled with a different pixel format (e.g. 565, 8888), but the content will be preserved to the best quality permitted by the final pixel format", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel p, int flags)"}, "createBitmap(int,int,android.graphics.Bitmap.Config,boolean)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. This value must never be null."], ["boolean", "boolean: If the bitmap is ARGB_8888 or RGBA_16F this flag can be used to mark the bitmap as opaque. Doing so will clear the bitmap in black instead of transparent."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if Config is Config.HARDWARE, because hardware bitmaps are always immutable"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a mutable bitmap with the specified width and height. Its initial density is as per @B_android#graphics#Bitmap#getDensity_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public static Bitmap createBitmap (int width, int height, Bitmap.Config config, boolean hasAlpha)"}, "setPixels(int[], int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int[]", "int: The colors to write to the bitmap"], ["int", "int: The index of the first color to read from pixels[]"], ["int", "int: The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative)."], ["int", "int: The x coordinate of the first pixel to write to in the bitmap."], ["int", "int: The y coordinate of the first pixel to write to in the bitmap."], ["int", "int: The number of colors to copy from pixels[] per row"], ["int", "int: The number of rows to write to the bitmap"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable"], ["@B_java#lang#IllegalArgumentException_E@", "if x, y, width, height are outside of the bitmap's bounds."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the pixels array is too small to receive the specified number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int representing a non-premultiplied ARGB @B_android#graphics#Color_E@ in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "added in API level 1", "FullName": "public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height)"}, "getColorSpace()": {"Returns": [["@B_android#graphics#ColorSpace_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the color space associated with this bitmap. If the color space is unknown, this method returns null.", "history": "Added in API level 26", "FullName": "public ColorSpace getColorSpace ()"}, "isMutable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the bitmap is marked as mutable (i.e. can be drawn into)", "history": "Added in API level 1", "FullName": "public boolean isMutable ()"}, "extractAlpha(android.graphics.Paint, int[])": {"Returns": [["@B_android#graphics#Bitmap_E@", "new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call."]], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior."], ["int[]", "int: Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's.", "history": "added in API level 1", "FullName": "public Bitmap extractAlpha (Paint paint, int[] offsetXY)"}, "getPixel(int, int)": {"Returns": [["int", "The argb @B_android#graphics#Color_E@ at the specified coordinate"]], "Parameters": [["int", "int: The x coordinate (0...width-1) of the pixel to return"], ["int", "int: The y coordinate (0...height-1) of the pixel to return"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if x, y exceed the bitmap's bounds"], ["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#graphics#Color_E@ at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "added in API level 1", "FullName": "public int getPixel (int x, int y)"}, "getAllocationByteCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#reconfigure_E@"], "Permissions": [], "Description": "Returns the size of the allocated memory used to store this bitmap's pixels. This can be larger than the result of @B_android#graphics#Bitmap#getByteCount_E@ if a bitmap is reused to decode other bitmaps of smaller size, or by manual reconfiguration. See @B_android#graphics#Bitmap#reconfigure_E@, @B_android#graphics#Bitmap#setWidth_E@, @B_android#graphics#Bitmap#setHeight_E@, @B_android#graphics#Bitmap#setConfig_E@, and @B_android#graphics#BitmapFactory#Options#inBitmap_E@. If a bitmap is not modified in this way, this value will be the same as that returned by @B_android#graphics#Bitmap#getByteCount_E@. This value will not change over the lifetime of a Bitmap.", "history": "Added in API level 19", "FullName": "public int getAllocationByteCount ()"}, "eraseColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable."]], "SeeAlso": [], "Permissions": [], "Description": "Fills the bitmap's pixels with the specified @B_android#graphics#Color_E@.", "history": "Added in API level 1", "FullName": "public void eraseColor (int c)"}, "createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap.Config)": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Display metrics for the display this bitmap will be drawn on. This value may be null."], ["int[]", "int: Array of sRGB @B_android#graphics#Color_E@ used to initialize the pixels. This array must be at least as large as width * height. This value must never be null."], ["int", "int: The width of the bitmap"], ["int", "int: The height of the bitmap"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config: The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the width or height are <= 0, or if the color array's length is less than the number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given @B_android#util#DisplayMetrics_E@. The newly created bitmap is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 17", "FullName": "public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config)"}, "setWidth(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#reconfigure_E@", "@B_android#graphics#Bitmap#setHeight_E@", "@B_android#graphics#Bitmap#setConfig_E@"], "Permissions": [], "Description": "Convenience method for calling @B_android#graphics#Bitmap#reconfigure_E@ with the current height and config. WARNING: this method should not be used on bitmaps currently used by the view system, see @B_android#graphics#Bitmap#reconfigure_E@ for more details.", "history": "Added in API level 19", "FullName": "public void setWidth (int width)"}, "extractAlpha()": {"Returns": [["@B_android#graphics#Bitmap_E@", "new bitmap containing the alpha channel of the original bitmap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new bitmap that captures the alpha values of the original. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.", "history": "Added in API level 1", "FullName": "public Bitmap extractAlpha ()"}, "prepareToDraw()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Builds caches associated with the bitmap that are used for drawing it. Starting in @B_android#os#Build#VERSION_CODES#N_E@, this call initiates an asynchronous upload to the GPU on RenderThread, if the Bitmap is not already uploaded. With Hardware Acceleration, Bitmaps must be uploaded to the GPU in order to be rendered. This is done by default the first time a Bitmap is drawn, but the process can take several milliseconds, depending on the size of the Bitmap. Each time a Bitmap is modified and drawn again, it must be re-uploaded. Calling this method in advance can save time in the first frame it's used. For example, it is recommended to call this on an image decoding worker thread when a decoded Bitmap is about to be displayed. It is recommended to make any pre-draw modifications to the Bitmap before calling this method, so the cached, uploaded copy may be reused without re-uploading. In @B_android#os#Build#VERSION_CODES#KITKAT_E@ and below, for purgeable bitmaps, this call would attempt to ensure that the pixels have been decoded.", "history": "Added in API level 4", "FullName": "public void prepareToDraw ()"}, "getByteCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum number of bytes that can be used to store this bitmap's pixels. As of @B_android#os#Build#VERSION_CODES#KITKAT_E@, the result of this method can no longer be used to determine memory usage of a bitmap. See @B_android#graphics#Bitmap#getAllocationByteCount_E@.", "history": "Added in API level 12", "FullName": "public int getByteCount ()"}, "setPixels(int[],int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int[]", "int: The colors to write to the bitmap"], ["int", "int: The index of the first color to read from pixels[]"], ["int", "int: The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative)."], ["int", "int: The x coordinate of the first pixel to write to in the bitmap."], ["int", "int: The y coordinate of the first pixel to write to in the bitmap."], ["int", "int: The number of colors to copy from pixels[] per row"], ["int", "int: The number of rows to write to the bitmap"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the bitmap is not mutable"], ["@B_java#lang#IllegalArgumentException_E@", "if x, y, width, height are outside of the bitmap's bounds."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the pixels array is too small to receive the specified number of pixels."]], "SeeAlso": [], "Permissions": [], "Description": "Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int representing a non-premultiplied ARGB @B_android#graphics#Color_E@ in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height)"}, "reconfigure(int,int,android.graphics.Bitmap.Config)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#graphics#Bitmap#Config_E@", "Bitmap.Config no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setWidth_E@", "@B_android#graphics#Bitmap#setHeight_E@", "@B_android#graphics#Bitmap#setConfig_E@"], "Permissions": [], "Description": "Modifies the bitmap to have a specified width, height, and @B_android#graphics#Bitmap#Config_E@, without affecting the underlying allocation backing the bitmap. Bitmap pixel data is not re-initialized for the new configuration. This method can be used to avoid allocating a new bitmap, instead reusing an existing bitmap's allocation for a new configuration of equal or lesser size. If the Bitmap's allocation isn't large enough to support the new configuration, an IllegalArgumentException will be thrown and the bitmap will not be modified. The result of @B_android#graphics#Bitmap#getByteCount_E@ will reflect the new configuration, while @B_android#graphics#Bitmap#getAllocationByteCount_E@ will reflect that of the initial configuration. Note: This may change this result of hasAlpha(). When converting to 565, the new bitmap will always be considered opaque. When converting from 565, the new bitmap will be considered non-opaque, and will respect the value set by setPremultiplied(). WARNING: This method should NOT be called on a bitmap currently in use by the view system, Canvas, or the AndroidBitmap NDK API. It does not make guarantees about how the underlying pixel buffer is remapped to the new config, just that the allocation is reused. Additionally, the view system does not account for bitmap properties being modifying during use, e.g. while attached to drawables. In order to safely ensure that a Bitmap is no longer in use by the View system it is necessary to wait for a draw pass to occur after invalidate()'ing any view that had previously drawn the Bitmap in the last draw pass due to hardware acceleration's caching of draw commands. As an example, here is how this can be done for an ImageView:", "history": "Added in API level 19", "FullName": "public void reconfigure (int width, int height, Bitmap.Config config)"}, "getColor(int,int)": {"Returns": [["@B_android#graphics#Color_E@", "The @B_android#graphics#Color_E@ at the specified coordinate This value will never be null."]], "Parameters": [["int", "int: The x coordinate (0...width-1) of the pixel to return"], ["int", "int: The y coordinate (0...height-1) of the pixel to return"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if x, y exceed the bitmap's bounds"], ["@B_java#lang#IllegalStateException_E@", "if the bitmap's config is @B_android#graphics#Bitmap#Config#HARDWARE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#graphics#Color_E@ at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively).", "history": "Added in API level 29", "FullName": "public Color getColor (int x, int y)"}, "isRecycled()": {"Returns": [["boolean", "true if the bitmap has been recycled"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this bitmap has been recycled. If so, then it is an error to try to access its pixels, and the bitmap will not draw.", "history": "Added in API level 1", "FullName": "public boolean isRecycled ()"}}, "Inheritance": [], "ClassName": "android.graphics.Bitmap", "ClassDesc": ""}