{"Functions": {"getConnection(long, java.util.concurrent.TimeUnit)": {"Returns": [["", "a connection that can be used to communicate along the given route"]], "Parameters": [["long", "the timeout, 0 or negative for no timeout"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit for the timeout, may be null only if there is no timeout"]], "Throws": [["@B_org#apache#http#conn#ConnectionPoolTimeoutException_E@", "in case of a timeout"], ["@B_java#lang#InterruptedException_E@", "if the calling thread is interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a connection within a given time. This method will block until a connection becomes available, the timeout expires, or the connection manager is @B_org#apache#http#conn#ClientConnectionManager#shutdown_E@. Timeouts are handled with millisecond precision. If @B_org#apache#http#conn#ClientConnectionRequest#abortRequest_E@ is called while this is blocking or before this began, an @B_java#lang#InterruptedException_E@ will be thrown.", "history": "Added in API level 1", "FullName": "public abstract ManagedClientConnection getConnection (long timeout, TimeUnit tunit)"}, "abortRequest()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Aborts the call to @B_org#apache#http#conn#ClientConnectionRequest#getConnection_E@, causing it to throw an @B_java#lang#InterruptedException_E@.", "history": "Added in API level 1", "FullName": "public abstract void abortRequest ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.ClientConnectionRequest", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Encapsulates a request for a @B_org#apache#http#conn#ManagedClientConnection_E@."}