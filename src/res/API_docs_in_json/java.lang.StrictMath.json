{"Functions": {"floorMod(long,long)": {"Returns": [["long", "the floor modulus x - (floorDiv(x, y) * y)"]], "Parameters": [["long", "long: the dividend"], ["long", "long: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorMod_E@", "@B_java#lang#StrictMath#floorDiv_E@"], "Permissions": [], "Description": "Returns the floor modulus of the long arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) == x See @B_java#lang#Math#floorMod_E@ for examples and a comparison to the % operator.", "history": "Added in API level 24", "FullName": "public static long floorMod (long x, long y)"}, "copySign(double, double)": {"Returns": [["double", "a value with the magnitude of magnitude and the sign of sign."]], "Parameters": [["double", "double: the parameter providing the magnitude of the result"], ["double", "double: the parameter providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN sign argument is always treated as if it were positive.", "history": "added in API level 9", "FullName": "public static double copySign (double magnitude, double sign)"}, "hypot(double,double)": {"Returns": [["double", "sqrt(x2 +y2) without intermediate overflow or underflow"]], "Parameters": [["double", "double: a value"], ["double", "double: a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns sqrt(Special cases: If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN.", "history": "Added in API level 1", "FullName": "public static double hypot (double x, double y)"}, "nextAfter(float, double)": {"Returns": [["float", "The floating-point number adjacent to start in the direction of direction."]], "Parameters": [["float", "float: starting floating-point value"], ["double", "double: value indicating which of start's neighbors or start should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, a value equivalent to direction is returned. If start is \u00b1@B_java#lang#Float#MIN_VALUE_E@ and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, @B_java#lang#Float#MAX_VALUE_E@ with the same sign as start is returned. If start is equal to \u00b1 @B_java#lang#Float#MAX_VALUE_E@ and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.", "history": "added in API level 9", "FullName": "public static float nextAfter (float start, double direction)"}, "signum(float)": {"Returns": [["float", "the signum function of the argument"]], "Parameters": [["float", "float: the floating-point value whose signum is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument.", "history": "Added in API level 1", "FullName": "public static float signum (float f)"}, "tanh(double)": {"Returns": [["double", "The hyperbolic tangent of x."]], "Parameters": [["double", "double: The number whose hyperbolic tangent is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hyperbolic tangent of a double value. The hyperbolic tangent of Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. If the argument is positive infinity, then the result is +1.0. If the argument is negative infinity, then the result is -1.0.", "history": "Added in API level 1", "FullName": "public static double tanh (double x)"}, "scalb(double, int)": {"Returns": [["double", "d \u00d7 2scaleFactor"]], "Parameters": [["double", "double: number to be scaled by a power of two."], ["int", "int: power of 2 used to scale d"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns d \u00d7 2@B_java#lang#Double#MIN_EXPONENT_E@ and @B_java#lang#Double#MAX_EXPONENT_E@, the answer is calculated exactly. If the exponent of the result would be larger than Double.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal d. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.", "history": "added in API level 9", "FullName": "public static double scalb (double d, int scaleFactor)"}, "log1p(double)": {"Returns": [["double", "the value ln(x + 1), the natural log of x + 1"]], "Parameters": [["double", "double: a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the natural logarithm of the sum of the argument and 1. Note that for small values x, the result of log1p(x) is much closer to the true result of ln(1 + x) than the floating-point evaluation of log(1.0+x). Special cases: If the argument is NaN or less than -1, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative one, then the result is negative infinity. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double log1p (double x)"}, "cbrt(double)": {"Returns": [["double", "the cube root of a."]], "Parameters": [["double", "double: a value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the cube root of a double value. For positive finite x, cbrt(-x) == -cbrt(x); that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double cbrt (double a)"}, "round(float)": {"Returns": [["int", "the value of the argument rounded to the nearest int value."]], "Parameters": [["float", "float: a floating-point value to be rounded to an integer."]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer_E@"], "Permissions": [], "Description": "Returns the closest int to the argument, with ties rounding to positive infinity. Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Integer.MIN_VALUE, the result is equal to the value of Integer.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Integer.MAX_VALUE, the result is equal to the value of Integer.MAX_VALUE.", "history": "Added in API level 1", "FullName": "public static int round (float a)"}, "log10(double)": {"Returns": [["double", "the base 10 logarithm of a."]], "Parameters": [["double", "double: a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the base 10 logarithm of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. If the argument is equal to 10", "history": "Added in API level 1", "FullName": "public static double log10 (double a)"}, "floorMod(int,int)": {"Returns": [["int", "the floor modulus x - (floorDiv(x, y) * y)"]], "Parameters": [["int", "int: the dividend"], ["int", "int: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorMod_E@", "@B_java#lang#StrictMath#floorDiv_E@"], "Permissions": [], "Description": "Returns the floor modulus of the int arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) == x See @B_java#lang#Math#floorMod_E@ for examples and a comparison to the % operator.", "history": "Added in API level 24", "FullName": "public static int floorMod (int x, int y)"}, "atan2(double, double)": {"Returns": [["double", "the theta component of the point (r, theta) in polar coordinates that corresponds to the point (x, y) in Cartesian coordinates."]], "Parameters": [["double", "double: the ordinate coordinate"], ["double", "double: the abscissa coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the angle x, y) to polar coordinates (r, y/x in the range of -If either argument is NaN, then the result is NaN. If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the double value closest to If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the double value closest to -If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the double value closest to If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the double value closest to -If both arguments are positive infinity, then the result is the double value closest to If the first argument is positive infinity and the second argument is negative infinity, then the result is the double value closest to 3*If the first argument is negative infinity and the second argument is positive infinity, then the result is the double value closest to -If both arguments are negative infinity, then the result is the double value closest to -3*", "history": "added in API level 1", "FullName": "public static double atan2 (double y, double x)"}, "addExact(long, long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#addExact_E@"], "Permissions": [], "Description": "Returns the sum of its arguments, throwing an exception if the result overflows a long.", "history": "added in API level 24", "FullName": "public static long addExact (long x, long y)"}, "nextAfter(double,double)": {"Returns": [["double", "The floating-point number adjacent to start in the direction of direction."]], "Parameters": [["double", "double: starting floating-point value"], ["double", "double: value indicating which of start's neighbors or start should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, direction is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). If start is \u00b1@B_java#lang#Double#MIN_VALUE_E@ and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, @B_java#lang#Double#MAX_VALUE_E@ with the same sign as start is returned. If start is equal to \u00b1 @B_java#lang#Double#MAX_VALUE_E@ and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.", "history": "Added in API level 9", "FullName": "public static double nextAfter (double start, double direction)"}, "max(float,float)": {"Returns": [["float", "the larger of a and b."]], "Parameters": [["float", "float: an argument."], ["float", "float: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.", "history": "Added in API level 1", "FullName": "public static float max (float a, float b)"}, "sqrt(double)": {"Returns": [["double", "the positive square root of a."]], "Parameters": [["double", "double: a value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the correctly rounded positive square root of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is the same as the argument. Otherwise, the result is the double value closest to the true mathematical square root of the argument value.", "history": "Added in API level 1", "FullName": "public static double sqrt (double a)"}, "toRadians(double)": {"Returns": [["double", "the measurement of the angle angdeg in radians."]], "Parameters": [["double", "double: an angle, in degrees"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.", "history": "Added in API level 1", "FullName": "public static double toRadians (double angdeg)"}, "IEEEremainder(double,double)": {"Returns": [["double", "the remainder when f1 is divided by f2."]], "Parameters": [["double", "double: the dividend."], ["double", "double: the divisor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1 - f2 \u00d7 f1/f2, and if two mathematical integers are equally close to f1/f2, then If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.", "history": "Added in API level 1", "FullName": "public static double IEEEremainder (double f1, double f2)"}, "min(double,double)": {"Returns": [["double", "the smaller of a and b."]], "Parameters": [["double", "double: an argument."], ["double", "double: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.", "history": "Added in API level 1", "FullName": "public static double min (double a, double b)"}, "pow(double, double)": {"Returns": [["double", "the value ab."]], "Parameters": [["double", "double: base."], ["double", "double: the exponent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the first argument raised to the power of the second argument. Special cases: If the second argument is positive or negative zero, then the result is 1.0. If the second argument is 1.0, then the result is the same as the first argument. If the second argument is NaN, then the result is NaN. If the first argument is NaN and the second argument is nonzero, then the result is NaN. If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. If the first argument is finite and less than zero if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument if the second argument is finite and not an integer, then the result is NaN. If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value. (In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method @B_java#lang#StrictMath#ceil_E@ or, equivalently, a fixed point of the method @B_java#lang#StrictMath#floor_E@. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)", "history": "added in API level 1", "FullName": "public static double pow (double a, double b)"}, "ulp(float)": {"Returns": [["float", "the size of an ulp of the argument"]], "Parameters": [["float", "float: the floating-point value whose ulp is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of an ulp of the argument. An ulp, unit in the last place, of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Float.MIN_VALUE. If the argument is \u00b1Float.MAX_VALUE, then the result is equal to 2", "history": "Added in API level 1", "FullName": "public static float ulp (float f)"}, "atan(double)": {"Returns": [["double", "the arc tangent of the argument."]], "Parameters": [["double", "double: the value whose arc tangent is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arc tangent of a value; the returned angle is in the range -If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double atan (double a)"}, "floorDiv(int,int)": {"Returns": [["int", "the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient."]], "Parameters": [["int", "int: the dividend"], ["int", "int: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorDiv_E@", "@B_java#lang#Math#floor_E@"], "Permissions": [], "Description": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the -1, then integer overflow occurs and the result is equal to the Integer.MIN_VALUE. See @B_java#lang#Math#floorDiv_E@ for examples and a comparison to the integer division / operator.", "history": "Added in API level 24", "FullName": "public static int floorDiv (int x, int y)"}, "nextUp(float)": {"Returns": [["float", "The adjacent floating-point value closer to positive infinity."]], "Parameters": [["float", "float: starting floating-point value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point value adjacent to f in the direction of positive infinity. This method is semantically equivalent to nextAfter(f, Float.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is @B_java#lang#Float#MIN_VALUE_E@", "history": "Added in API level 9", "FullName": "public static float nextUp (float f)"}, "multiplyExact(int,int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#multiplyExact_E@"], "Permissions": [], "Description": "Returns the product of the arguments, throwing an exception if the result overflows an int.", "history": "Added in API level 24", "FullName": "public static int multiplyExact (int x, int y)"}, "floor(double)": {"Returns": [["double", "the largest (closest to positive infinity) floating-point value that less than or equal to the argument and is equal to a mathematical integer."]], "Parameters": [["double", "double: a value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.", "history": "Added in API level 1", "FullName": "public static double floor (double a)"}, "scalb(float,int)": {"Returns": [["float", "f \u00d7 2scaleFactor"]], "Parameters": [["float", "float: number to be scaled by a power of two."], ["int", "int: power of 2 used to scale f"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns f \u00d7 2@B_java#lang#Float#MIN_EXPONENT_E@ and @B_java#lang#Float#MAX_EXPONENT_E@, the answer is calculated exactly. If the exponent of the result would be larger than Float.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal f. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.", "history": "Added in API level 9", "FullName": "public static float scalb (float f, int scaleFactor)"}, "min(double, double)": {"Returns": [["double", "the smaller of a and b."]], "Parameters": [["double", "double: an argument."], ["double", "double: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.", "history": "added in API level 1", "FullName": "public static double min (double a, double b)"}, "cosh(double)": {"Returns": [["double", "The hyperbolic cosine of x."]], "Parameters": [["double", "double: The number whose hyperbolic cosine is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hyperbolic cosine of a double value. The hyperbolic cosine of Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is positive infinity. If the argument is zero, then the result is 1.0.", "history": "Added in API level 1", "FullName": "public static double cosh (double x)"}, "floorDiv(long, long)": {"Returns": [["long", "the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."]], "Parameters": [["long", "long: the dividend"], ["long", "long: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorDiv_E@", "@B_java#lang#Math#floor_E@"], "Permissions": [], "Description": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the -1, then integer overflow occurs and the result is equal to the Long.MIN_VALUE. See @B_java#lang#Math#floorDiv_E@ for examples and a comparison to the integer division / operator.", "history": "added in API level 24", "FullName": "public static long floorDiv (long x, long y)"}, "round(double)": {"Returns": [["long", "the value of the argument rounded to the nearest long value."]], "Parameters": [["double", "double: a floating-point value to be rounded to a long."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long_E@"], "Permissions": [], "Description": "Returns the closest long to the argument, with ties rounding to positive infinity. Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Long.MIN_VALUE, the result is equal to the value of Long.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Long.MAX_VALUE, the result is equal to the value of Long.MAX_VALUE.", "history": "Added in API level 1", "FullName": "public static long round (double a)"}, "floorMod(long, long)": {"Returns": [["long", "the floor modulus x - (floorDiv(x, y) * y)"]], "Parameters": [["long", "long: the dividend"], ["long", "long: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorMod_E@", "@B_java#lang#StrictMath#floorDiv_E@"], "Permissions": [], "Description": "Returns the floor modulus of the long arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) == x See @B_java#lang#Math#floorMod_E@ for examples and a comparison to the % operator.", "history": "added in API level 24", "FullName": "public static long floorMod (long x, long y)"}, "multiplyExact(int, int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#multiplyExact_E@"], "Permissions": [], "Description": "Returns the product of the arguments, throwing an exception if the result overflows an int.", "history": "added in API level 24", "FullName": "public static int multiplyExact (int x, int y)"}, "asin(double)": {"Returns": [["double", "the arc sine of the argument."]], "Parameters": [["double", "double: the value whose arc sine is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arc sine of a value; the returned angle is in the range -If the argument is NaN or its absolute value is greater than 1, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double asin (double a)"}, "tan(double)": {"Returns": [["double", "the tangent of the argument."]], "Parameters": [["double", "double: an angle, in radians."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the trigonometric tangent of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double tan (double a)"}, "rint(double)": {"Returns": [["double", "the closest floating-point value to a that is equal to a mathematical integer."]], "Parameters": [["double", "double: a value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer. If two double values that are mathematical integers are equally close to the value of the argument, the result is the integer value that is even. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.", "history": "Added in API level 1", "FullName": "public static double rint (double a)"}, "addExact(int,int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#addExact_E@"], "Permissions": [], "Description": "Returns the sum of its arguments, throwing an exception if the result overflows an int.", "history": "Added in API level 24", "FullName": "public static int addExact (int x, int y)"}, "abs(float)": {"Returns": [["float", "the absolute value of the argument."]], "Parameters": [["float", "float: the argument whose absolute value is to be determined"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))", "history": "Added in API level 1", "FullName": "public static float abs (float a)"}, "toDegrees(double)": {"Returns": [["double", "the measurement of the angle angrad in degrees."]], "Parameters": [["double", "double: an angle, in radians"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should cos(toRadians(90.0)) to exactly equal 0.0.", "history": "Added in API level 1", "FullName": "public static double toDegrees (double angrad)"}, "abs(int)": {"Returns": [["int", "the absolute value of the argument."]], "Parameters": [["int", "int: the argument whose absolute value is to be determined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of @B_java#lang#Integer#MIN_VALUE_E@, the most negative representable int value, the result is that same value, which is negative.", "history": "Added in API level 1", "FullName": "public static int abs (int a)"}, "getExponent(double)": {"Returns": [["int", "the unbiased exponent of the argument"]], "Parameters": [["double", "double: a double value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unbiased exponent used in the representation of a double. Special cases: If the argument is NaN or infinite, then the result is @B_java#lang#Double#MAX_EXPONENT_E@ + 1. If the argument is zero or subnormal, then the result is @B_java#lang#Double#MIN_EXPONENT_E@ -1.", "history": "Added in API level 9", "FullName": "public static int getExponent (double d)"}, "ulp(double)": {"Returns": [["double", "the size of an ulp of the argument"]], "Parameters": [["double", "double: the floating-point value whose ulp is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of an ulp of the argument. An ulp, unit in the last place, of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Double.MIN_VALUE. If the argument is \u00b1Double.MAX_VALUE, then the result is equal to 2", "history": "Added in API level 1", "FullName": "public static double ulp (double d)"}, "nextAfter(double, double)": {"Returns": [["double", "The floating-point number adjacent to start in the direction of direction."]], "Parameters": [["double", "double: starting floating-point value"], ["double", "double: value indicating which of start's neighbors or start should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, direction is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). If start is \u00b1@B_java#lang#Double#MIN_VALUE_E@ and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, @B_java#lang#Double#MAX_VALUE_E@ with the same sign as start is returned. If start is equal to \u00b1 @B_java#lang#Double#MAX_VALUE_E@ and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.", "history": "added in API level 9", "FullName": "public static double nextAfter (double start, double direction)"}, "min(int, int)": {"Returns": [["int", "the smaller of a and b."]], "Parameters": [["int", "int: an argument."], ["int", "int: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two int values. That is, the result the argument closer to the value of @B_java#lang#Integer#MIN_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "added in API level 1", "FullName": "public static int min (int a, int b)"}, "multiplyExact(long, long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#multiplyExact_E@"], "Permissions": [], "Description": "Returns the product of the arguments, throwing an exception if the result overflows a long.", "history": "added in API level 24", "FullName": "public static long multiplyExact (long x, long y)"}, "floorDiv(long,long)": {"Returns": [["long", "the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."]], "Parameters": [["long", "long: the dividend"], ["long", "long: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorDiv_E@", "@B_java#lang#Math#floor_E@"], "Permissions": [], "Description": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the -1, then integer overflow occurs and the result is equal to the Long.MIN_VALUE. See @B_java#lang#Math#floorDiv_E@ for examples and a comparison to the integer division / operator.", "history": "Added in API level 24", "FullName": "public static long floorDiv (long x, long y)"}, "scalb(float, int)": {"Returns": [["float", "f \u00d7 2scaleFactor"]], "Parameters": [["float", "float: number to be scaled by a power of two."], ["int", "int: power of 2 used to scale f"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns f \u00d7 2@B_java#lang#Float#MIN_EXPONENT_E@ and @B_java#lang#Float#MAX_EXPONENT_E@, the answer is calculated exactly. If the exponent of the result would be larger than Float.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal f. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.", "history": "added in API level 9", "FullName": "public static float scalb (float f, int scaleFactor)"}, "max(long, long)": {"Returns": [["long", "the larger of a and b."]], "Parameters": [["long", "long: an argument."], ["long", "long: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two long values. That is, the result is the argument closer to the value of @B_java#lang#Long#MAX_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "added in API level 1", "FullName": "public static long max (long a, long b)"}, "nextUp(double)": {"Returns": [["double", "The adjacent floating-point value closer to positive infinity."]], "Parameters": [["double", "double: starting floating-point value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point value adjacent to d in the direction of positive infinity. This method is semantically equivalent to nextAfter(d, Double.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is @B_java#lang#Double#MIN_VALUE_E@", "history": "Added in API level 9", "FullName": "public static double nextUp (double d)"}, "pow(double,double)": {"Returns": [["double", "the value ab."]], "Parameters": [["double", "double: base."], ["double", "double: the exponent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the first argument raised to the power of the second argument. Special cases: If the second argument is positive or negative zero, then the result is 1.0. If the second argument is 1.0, then the result is the same as the first argument. If the second argument is NaN, then the result is NaN. If the first argument is NaN and the second argument is nonzero, then the result is NaN. If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. If the first argument is finite and less than zero if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument if the second argument is finite and not an integer, then the result is NaN. If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value. (In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method @B_java#lang#StrictMath#ceil_E@ or, equivalently, a fixed point of the method @B_java#lang#StrictMath#floor_E@. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)", "history": "Added in API level 1", "FullName": "public static double pow (double a, double b)"}, "sinh(double)": {"Returns": [["double", "The hyperbolic sine of x."]], "Parameters": [["double", "double: The number whose hyperbolic sine is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hyperbolic sine of a double value. The hyperbolic sine of Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double sinh (double x)"}, "subtractExact(int, int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value to subtract from the first"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#subtractExact_E@"], "Permissions": [], "Description": "Returns the difference of the arguments, throwing an exception if the result overflows an int.", "history": "added in API level 24", "FullName": "public static int subtractExact (int x, int y)"}, "toIntExact(long)": {"Returns": [["int", "the argument as an int"]], "Parameters": [["long", "long: the long value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the argument overflows an int"]], "SeeAlso": ["@B_java#lang#Math#toIntExact_E@"], "Permissions": [], "Description": "Returns the value of the long argument; throwing an exception if the value overflows an int.", "history": "Added in API level 24", "FullName": "public static int toIntExact (long value)"}, "addExact(long,long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#addExact_E@"], "Permissions": [], "Description": "Returns the sum of its arguments, throwing an exception if the result overflows a long.", "history": "Added in API level 24", "FullName": "public static long addExact (long x, long y)"}, "floorDiv(int, int)": {"Returns": [["int", "the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient."]], "Parameters": [["int", "int: the dividend"], ["int", "int: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorDiv_E@", "@B_java#lang#Math#floor_E@"], "Permissions": [], "Description": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the -1, then integer overflow occurs and the result is equal to the Integer.MIN_VALUE. See @B_java#lang#Math#floorDiv_E@ for examples and a comparison to the integer division / operator.", "history": "added in API level 24", "FullName": "public static int floorDiv (int x, int y)"}, "subtractExact(int,int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value to subtract from the first"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#subtractExact_E@"], "Permissions": [], "Description": "Returns the difference of the arguments, throwing an exception if the result overflows an int.", "history": "Added in API level 24", "FullName": "public static int subtractExact (int x, int y)"}, "max(int,int)": {"Returns": [["int", "the larger of a and b."]], "Parameters": [["int", "int: an argument."], ["int", "int: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two int values. That is, the result is the argument closer to the value of @B_java#lang#Integer#MAX_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "Added in API level 1", "FullName": "public static int max (int a, int b)"}, "acos(double)": {"Returns": [["double", "the arc cosine of the argument."]], "Parameters": [["double", "double: the value whose arc cosine is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arc cosine of a value; the returned angle is in the range 0.0 through If the argument is NaN or its absolute value is greater than 1, then the result is NaN.", "history": "Added in API level 1", "FullName": "public static double acos (double a)"}, "min(float, float)": {"Returns": [["float", "the smaller of a and b."]], "Parameters": [["float", "float: an argument."], ["float", "float: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.", "history": "added in API level 1", "FullName": "public static float min (float a, float b)"}, "copySign(double,double)": {"Returns": [["double", "a value with the magnitude of magnitude and the sign of sign."]], "Parameters": [["double", "double: the parameter providing the magnitude of the result"], ["double", "double: the parameter providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN sign argument is always treated as if it were positive.", "history": "Added in API level 9", "FullName": "public static double copySign (double magnitude, double sign)"}, "copySign(float,float)": {"Returns": [["float", "a value with the magnitude of magnitude and the sign of sign."]], "Parameters": [["float", "float: the parameter providing the magnitude of the result"], ["float", "float: the parameter providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN sign argument is always treated as if it were positive.", "history": "Added in API level 9", "FullName": "public static float copySign (float magnitude, float sign)"}, "nextDown(double)": {"Returns": [["double", "The adjacent floating-point value closer to negative infinity."]], "Parameters": [["double", "double: starting floating-point value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point value adjacent to d in the direction of negative infinity. This method is semantically equivalent to nextAfter(d, Double.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is negative infinity, the result is negative infinity. If the argument is zero, the result is -Double.MIN_VALUE", "history": "Added in API level 24", "FullName": "public static double nextDown (double d)"}, "atan2(double,double)": {"Returns": [["double", "the theta component of the point (r, theta) in polar coordinates that corresponds to the point (x, y) in Cartesian coordinates."]], "Parameters": [["double", "double: the ordinate coordinate"], ["double", "double: the abscissa coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the angle x, y) to polar coordinates (r, y/x in the range of -If either argument is NaN, then the result is NaN. If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the double value closest to If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the double value closest to -If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the double value closest to If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the double value closest to -If both arguments are positive infinity, then the result is the double value closest to If the first argument is positive infinity and the second argument is negative infinity, then the result is the double value closest to 3*If the first argument is negative infinity and the second argument is positive infinity, then the result is the double value closest to -If both arguments are negative infinity, then the result is the double value closest to -3*", "history": "Added in API level 1", "FullName": "public static double atan2 (double y, double x)"}, "min(int,int)": {"Returns": [["int", "the smaller of a and b."]], "Parameters": [["int", "int: an argument."], ["int", "int: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two int values. That is, the result the argument closer to the value of @B_java#lang#Integer#MIN_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "Added in API level 1", "FullName": "public static int min (int a, int b)"}, "cos(double)": {"Returns": [["double", "the cosine of the argument."]], "Parameters": [["double", "double: an angle, in radians."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the trigonometric cosine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN.", "history": "Added in API level 1", "FullName": "public static double cos (double a)"}, "min(long, long)": {"Returns": [["long", "the smaller of a and b."]], "Parameters": [["long", "long: an argument."], ["long", "long: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two long values. That is, the result is the argument closer to the value of @B_java#lang#Long#MIN_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "added in API level 1", "FullName": "public static long min (long a, long b)"}, "max(int, int)": {"Returns": [["int", "the larger of a and b."]], "Parameters": [["int", "int: an argument."], ["int", "int: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two int values. That is, the result is the argument closer to the value of @B_java#lang#Integer#MAX_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "added in API level 1", "FullName": "public static int max (int a, int b)"}, "min(long,long)": {"Returns": [["long", "the smaller of a and b."]], "Parameters": [["long", "long: an argument."], ["long", "long: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two long values. That is, the result is the argument closer to the value of @B_java#lang#Long#MIN_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "Added in API level 1", "FullName": "public static long min (long a, long b)"}, "subtractExact(long,long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value to subtract from the first"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#subtractExact_E@"], "Permissions": [], "Description": "Returns the difference of the arguments, throwing an exception if the result overflows a long.", "history": "Added in API level 24", "FullName": "public static long subtractExact (long x, long y)"}, "expm1(double)": {"Returns": [["double", "the value ex - 1."]], "Parameters": [["double", "double: the exponent to raise e to in the computation of ex -1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns expm1(x) + 1 is much closer to the true result of exp(x). Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is -1.0. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double expm1 (double x)"}, "ceil(double)": {"Returns": [["double", "the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer."]], "Parameters": [["double", "double: a value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. If the argument value is less than zero but greater than -1.0, then the result is negative zero. Note that the value of StrictMath.ceil(x) is exactly the value of -StrictMath.floor(-x).", "history": "Added in API level 1", "FullName": "public static double ceil (double a)"}, "min(float,float)": {"Returns": [["float", "the smaller of a and b."]], "Parameters": [["float", "float: an argument."], ["float", "float: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.", "history": "Added in API level 1", "FullName": "public static float min (float a, float b)"}, "signum(double)": {"Returns": [["double", "the signum function of the argument"]], "Parameters": [["double", "double: the floating-point value whose signum is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument.", "history": "Added in API level 1", "FullName": "public static double signum (double d)"}, "log(double)": {"Returns": [["double", "the value ln a, the natural logarithm of a."]], "Parameters": [["double", "double: a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the natural logarithm (base double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity.", "history": "Added in API level 1", "FullName": "public static double log (double a)"}, "scalb(double,int)": {"Returns": [["double", "d \u00d7 2scaleFactor"]], "Parameters": [["double", "double: number to be scaled by a power of two."], ["int", "int: power of 2 used to scale d"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns d \u00d7 2@B_java#lang#Double#MIN_EXPONENT_E@ and @B_java#lang#Double#MAX_EXPONENT_E@, the answer is calculated exactly. If the exponent of the result would be larger than Double.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal d. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.", "history": "Added in API level 9", "FullName": "public static double scalb (double d, int scaleFactor)"}, "IEEEremainder(double, double)": {"Returns": [["double", "the remainder when f1 is divided by f2."]], "Parameters": [["double", "double: the dividend."], ["double", "double: the divisor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1 - f2 \u00d7 f1/f2, and if two mathematical integers are equally close to f1/f2, then If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.", "history": "added in API level 1", "FullName": "public static double IEEEremainder (double f1, double f2)"}, "copySign(float, float)": {"Returns": [["float", "a value with the magnitude of magnitude and the sign of sign."]], "Parameters": [["float", "float: the parameter providing the magnitude of the result"], ["float", "float: the parameter providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first floating-point argument with the sign of the second floating-point argument. For this method, a NaN sign argument is always treated as if it were positive.", "history": "added in API level 9", "FullName": "public static float copySign (float magnitude, float sign)"}, "multiplyExact(long,long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#multiplyExact_E@"], "Permissions": [], "Description": "Returns the product of the arguments, throwing an exception if the result overflows a long.", "history": "Added in API level 24", "FullName": "public static long multiplyExact (long x, long y)"}, "max(long,long)": {"Returns": [["long", "the larger of a and b."]], "Parameters": [["long", "long: an argument."], ["long", "long: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two long values. That is, the result is the argument closer to the value of @B_java#lang#Long#MAX_VALUE_E@. If the arguments have the same value, the result is that same value.", "history": "Added in API level 1", "FullName": "public static long max (long a, long b)"}, "getExponent(float)": {"Returns": [["int", "the unbiased exponent of the argument"]], "Parameters": [["float", "float: a float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unbiased exponent used in the representation of a float. Special cases: If the argument is NaN or infinite, then the result is @B_java#lang#Float#MAX_EXPONENT_E@ + 1. If the argument is zero or subnormal, then the result is @B_java#lang#Float#MIN_EXPONENT_E@ -1.", "history": "Added in API level 9", "FullName": "public static int getExponent (float f)"}, "max(double, double)": {"Returns": [["double", "the larger of a and b."]], "Parameters": [["double", "double: an argument."], ["double", "double: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.", "history": "added in API level 1", "FullName": "public static double max (double a, double b)"}, "abs(double)": {"Returns": [["double", "the absolute value of the argument."]], "Parameters": [["double", "double: the argument whose absolute value is to be determined"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)", "history": "Added in API level 1", "FullName": "public static double abs (double a)"}, "subtractExact(long, long)": {"Returns": [["long", "the result"]], "Parameters": [["long", "long: the first value"], ["long", "long: the second value to subtract from the first"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows a long"]], "SeeAlso": ["@B_java#lang#Math#subtractExact_E@"], "Permissions": [], "Description": "Returns the difference of the arguments, throwing an exception if the result overflows a long.", "history": "added in API level 24", "FullName": "public static long subtractExact (long x, long y)"}, "abs(long)": {"Returns": [["long", "the absolute value of the argument."]], "Parameters": [["long", "long: the argument whose absolute value is to be determined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of a long value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of @B_java#lang#Long#MIN_VALUE_E@, the most negative representable long value, the result is that same value, which is negative.", "history": "Added in API level 1", "FullName": "public static long abs (long a)"}, "addExact(int, int)": {"Returns": [["int", "the result"]], "Parameters": [["int", "int: the first value"], ["int", "int: the second value"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the result overflows an int"]], "SeeAlso": ["@B_java#lang#Math#addExact_E@"], "Permissions": [], "Description": "Returns the sum of its arguments, throwing an exception if the result overflows an int.", "history": "added in API level 24", "FullName": "public static int addExact (int x, int y)"}, "sin(double)": {"Returns": [["double", "the sine of the argument."]], "Parameters": [["double", "double: an angle, in radians."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the trigonometric sine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument.", "history": "Added in API level 1", "FullName": "public static double sin (double a)"}, "nextDown(float)": {"Returns": [["float", "The adjacent floating-point value closer to negative infinity."]], "Parameters": [["float", "float: starting floating-point value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point value adjacent to f in the direction of negative infinity. This method is semantically equivalent to nextAfter(f, Float.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is negative infinity, the result is negative infinity. If the argument is zero, the result is -Float.MIN_VALUE", "history": "Added in API level 24", "FullName": "public static float nextDown (float f)"}, "max(float, float)": {"Returns": [["float", "the larger of a and b."]], "Parameters": [["float", "float: an argument."], ["float", "float: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.", "history": "added in API level 1", "FullName": "public static float max (float a, float b)"}, "floorMod(int, int)": {"Returns": [["int", "the floor modulus x - (floorDiv(x, y) * y)"]], "Parameters": [["int", "int: the dividend"], ["int", "int: the divisor"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the divisor y is zero"]], "SeeAlso": ["@B_java#lang#Math#floorMod_E@", "@B_java#lang#StrictMath#floorDiv_E@"], "Permissions": [], "Description": "Returns the floor modulus of the int arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) == x See @B_java#lang#Math#floorMod_E@ for examples and a comparison to the % operator.", "history": "added in API level 24", "FullName": "public static int floorMod (int x, int y)"}, "random()": {"Returns": [["double", "a pseudorandom double greater than or equal to 0.0 and less than 1.0."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Random#nextDouble_E@"], "Permissions": [], "Description": "Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.", "history": "Added in API level 1", "FullName": "public static double random ()"}, "hypot(double, double)": {"Returns": [["double", "sqrt(x2 +y2) without intermediate overflow or underflow"]], "Parameters": [["double", "double: a value"], ["double", "double: a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns sqrt(Special cases: If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN.", "history": "added in API level 1", "FullName": "public static double hypot (double x, double y)"}, "exp(double)": {"Returns": [["double", "the value ea, where e is the base of the natural logarithms."]], "Parameters": [["double", "double: the exponent to raise e to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns Euler's number double value. Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is positive zero.", "history": "Added in API level 1", "FullName": "public static double exp (double a)"}, "max(double,double)": {"Returns": [["double", "the larger of a and b."]], "Parameters": [["double", "double: an argument."], ["double", "double: another argument."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.", "history": "Added in API level 1", "FullName": "public static double max (double a, double b)"}, "nextAfter(float,double)": {"Returns": [["float", "The floating-point number adjacent to start in the direction of direction."]], "Parameters": [["float", "float: starting floating-point value"], ["double", "double: value indicating which of start's neighbors or start should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, a value equivalent to direction is returned. If start is \u00b1@B_java#lang#Float#MIN_VALUE_E@ and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, @B_java#lang#Float#MAX_VALUE_E@ with the same sign as start is returned. If start is equal to \u00b1 @B_java#lang#Float#MAX_VALUE_E@ and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.", "history": "Added in API level 9", "FullName": "public static float nextAfter (float start, double direction)"}}, "Inheritance": [], "ClassName": "java.lang.StrictMath", "ClassDesc": "The class StrictMath contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. To help ensure portability of Java programs, the definitions of some of the numeric functions in this package require that they produce the same results as certain published algorithms. These algorithms are available from the well-known network library netlib as the package \"Freely Distributable Math Library,\" The Java math library is defined with respect to fdlibm version 5.3. Where fdlibm provides more than one definition for a function (such as acos), use the \"IEEE 754 core function\" version (residing in a file whose name begins with the letter e). The methods which require fdlibm semantics are sin, cos, tan, asin, acos, atan, exp, log, log10, cbrt, atan2, pow, sinh, cosh, tanh, hypot, expm1, and log1p. The platform uses signed two's complement integer arithmetic with int and long primitive types. The developer should choose the primitive type to ensure that arithmetic operations consistently produce correct results, which in some cases means the operations will not overflow the range of values of the computation. The best practice is to choose the primitive type and algorithm to avoid overflow. In cases where the size is int or long and overflow errors need to be detected, the methods addExact, subtractExact, multiplyExact, and toIntExact throw an ArithmeticException when the results overflow. For other arithmetic operations such as divide, absolute value, increment, decrement, and negation overflow occurs only with a specific minimum or maximum value and should be checked against the minimum or maximum as appropriate."}