{"Functions": {"performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: An open, read-only @B_android#os#ParcelFileDescriptor_E@ pointing to the last backup state provided by the application. May be null, in which case no prior state is being provided and the application should perform a full backup."], ["@B_android#app#backup#BackupDataOutput_E@", "BackupDataOutput: An open, read/write @B_android#app#backup#BackupDataOutput_E@ pointing to the backup data destination. Typically the application will use backup helper classes to write to this file."], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: An open, read/write @B_android#os#ParcelFileDescriptor_E@ pointing to an empty file. The application should record the final backup state here after writing the requested data to the data output stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Based on oldState, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in newState with the state as it exists now. When oldState is null, all the files will be backed up. This should only be called directly from within the @B_android#app#backup#BackupAgentHelper_E@ implementation. See @B_android#app#backup#BackupAgent#onBackup_E@ for a description of parameter meanings.", "history": "Added in API level 8", "FullName": "public void performBackup (ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 8", "FullName": "protected void finalize ()"}, "restoreEntity(android.app.backup.BackupDataInputStream)": {"Returns": [], "Parameters": [["@B_android#app#backup#BackupDataInputStream_E@", "BackupDataInputStream: An open @B_android#app#backup#BackupDataInputStream_E@ from which the backup data can be read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restore one record [representing a single file] from the restore dataset. This should only be called directly from within the @B_android#app#backup#BackupAgentHelper_E@ implementation.", "history": "Added in API level 8", "FullName": "public void restoreEntity (BackupDataInputStream data)"}, "FileBackupHelper(android.content.Context,java.lang.String...)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The backup agent's Context object"], ["@B_java#lang#String_E@", "String: A list of the files to be backed up or restored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a helper to manage backup/restore of entire files within the application's data directory hierarchy.", "history": "Added in API level 8", "FullName": "public FileBackupHelper (Context context, String... files)"}}, "Inheritance": [], "ClassName": "android.app.backup.FileBackupHelper", "ClassDesc": "A helper class that can be used in conjunction with @B_android#app#backup#BackupAgentHelper_E@ to manage the backup of a set of files. Whenever backup is performed, all files changed since the last backup will be saved in their entirety. When backup first occurs, every file in the list provided to @B_android#app#backup#FileBackupHelper#FileBackupHelper_E@ will be backed up. During restore, if the helper encounters data for a file that was not specified when the FileBackupHelper object was constructed, that data will be ignored."}