{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 14", "FullName": "public String toString ()"}, "findLibrary(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The absolute path of the native library"]], "Parameters": [["@B_java#lang#String_E@", "String: The library name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute path name of a native library. The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns", "history": "Added in API level 14", "FullName": "public String findLibrary (String name)"}, "getPackage(java.lang.String)": {"Returns": [["@B_java#lang#Package_E@", "the package information for the class, or null if there is no package information available for it"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the class"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns package information for the given package. Unfortunately, instances of this class don't really have this information, and as a non-secure ClassLoader, it isn't even required to, according to the spec. Yet, we want to provide it, in order to make all those hopeful callers of myClass.getPackage().getName() happy. Thus we construct a Package object the first time it is being requested and fill most of the fields with dummy values. The Package object is then put into the ClassLoader's package cache, so we see the same one next time. We don't create Package objects for null arguments or for the default package. There is a limited chance that we end up with multiple Package objects representing the same package: It can happen when when a package is scattered across different JAR files which were loaded by different ClassLoader instances. This is rather unlikely, and given that this whole thing is more or less a workaround, probably not worth the effort to address.", "history": "Added in API level 14", "FullName": "protected Package getPackage (String name)"}, "findClass(java.lang.String)": {"Returns": [["@B_java#lang#Class_E@", "The resulting Class object"]], "Parameters": [["@B_java#lang#String_E@", "String: The binary name of the class"]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Finds the class with the specified @B_java#lang#ClassLoader#loadClass_E@ method after checking the parent class loader for the requested class. The default implementation throws a", "history": "Added in API level 14", "FullName": "protected Class<?> findClass (String name)"}, "BaseDexClassLoader(java.lang.String,java.io.File,java.lang.String,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the list of jar/apk files containing classes and resources, delimited by File.pathSeparator, which defaults to \":\" on Android."], ["@B_java#io#File_E@", "File: this parameter is deprecated and has no effect since API level 26."], ["@B_java#lang#String_E@", "String: the list of directories containing native libraries, delimited by File.pathSeparator; may be null"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the parent class loader"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an instance. Note that all the *.jar and *.apk files from dexPath might be first extracted in-memory before the code is loaded. This can be avoided by passing raw dex files (*.dex) in the dexPath.", "history": "Added in API level 14", "FullName": "public BaseDexClassLoader (String dexPath, File optimizedDirectory, String librarySearchPath, ClassLoader parent)"}, "findResources(java.lang.String)": {"Returns": [["@B_java#util#Enumeration_E@", "An enumeration of @B_java#net#URL_E@ objects for the resources"]], "Parameters": [["@B_java#lang#String_E@", "String: The resource name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an enumeration of @B_java#net#URL_E@ objects representing all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.", "history": "Added in API level 14", "FullName": "protected Enumeration<URL> findResources (String name)"}, "findResource(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "A URL object for reading the resource, or null if the resource could not be found"]], "Parameters": [["@B_java#lang#String_E@", "String: The resource name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.", "history": "Added in API level 14", "FullName": "protected URL findResource (String name)"}}, "Inheritance": ["@B_java#lang#ClassLoader_E@"], "ClassName": "dalvik.system.BaseDexClassLoader", "ClassDesc": "Base class for common functionality between various dex-based @B_java#lang#ClassLoader_E@ implementations."}