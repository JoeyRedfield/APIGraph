{"Functions": {"findAccessibilityNodeInfosByText(java.lang.String,int)": {"Returns": [["@B_java#util#List_E@", "A list of node info."]], "Parameters": [["@B_java#lang#String_E@", "String: The searched text."], ["int", "int: A client defined virtual view id which defined the root of the tree in which to perform the search."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeProvider#createAccessibilityNodeInfo_E@", "@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Finds @B_android#view#accessibility#AccessibilityNodeInfo_E@s by text. The match is case insensitive containment. The search is relative to the virtual view, i.e. a descendant of the host View, with the given virtualViewId or the host View itself virtualViewId equals to @B_android#view#accessibility#AccessibilityNodeProvider#HOST_VIEW_ID_E@.", "history": "Added in API level 16", "FullName": "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText (String text, int virtualViewId)"}, "performAction(int, int, android.os.Bundle)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: A client defined virtual view id."], ["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle: Optional action arguments."]], "Throws": [], "SeeAlso": ["@B_android#view#View#performAccessibilityAction_E@", "@B_android#view#accessibility#AccessibilityNodeProvider#createAccessibilityNodeInfo_E@", "@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Performs an accessibility action on a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to @B_android#view#accessibility#AccessibilityNodeProvider#HOST_VIEW_ID_E@.", "history": "added in API level 16", "FullName": "public boolean performAction (int virtualViewId, int action, Bundle arguments)"}, "findFocus(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The node info of the focused view or null."]], "Parameters": [["int", "int: The focus to find. One of @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_INPUT_E@ or @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Find the virtual view, such as a descendant of the host View, that has the specified focus type.", "history": "Added in API level 19", "FullName": "public AccessibilityNodeInfo findFocus (int focus)"}, "createAccessibilityNodeInfo(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "A populated @B_android#view#accessibility#AccessibilityNodeInfo_E@ for a virtual descendant or the host View."]], "Parameters": [["int", "int: A client defined virtual view id."]], "Throws": [], "SeeAlso": ["@B_android#view#View#createAccessibilityNodeInfo_E@", "@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Returns an @B_android#view#accessibility#AccessibilityNodeInfo_E@ representing a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to @B_android#view#accessibility#AccessibilityNodeProvider#HOST_VIEW_ID_E@. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. The implementer is responsible for obtaining an accessibility node info from the pool of reusable instances and setting the desired properties of the node info before returning it.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeInfo createAccessibilityNodeInfo (int virtualViewId)"}, "performAction(int,int,android.os.Bundle)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: A client defined virtual view id."], ["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle: Optional action arguments."]], "Throws": [], "SeeAlso": ["@B_android#view#View#performAccessibilityAction_E@", "@B_android#view#accessibility#AccessibilityNodeProvider#createAccessibilityNodeInfo_E@", "@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Performs an accessibility action on a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to @B_android#view#accessibility#AccessibilityNodeProvider#HOST_VIEW_ID_E@.", "history": "Added in API level 16", "FullName": "public boolean performAction (int virtualViewId, int action, Bundle arguments)"}, "addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The virtual view id used to create the node"], ["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: The info to which to add the extra data"], ["@B_java#lang#String_E@", "String: A key specifying the type of extra data to add to the info. The extra data should be added to the @B_android#os#Bundle_E@ returned by the info's @B_android#view#accessibility#AccessibilityNodeInfo#getExtras_E@ method."], ["@B_android#os#Bundle_E@", "Bundle: A @B_android#os#Bundle_E@ holding any arguments relevant for this request."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setAvailableExtraData_E@"], "Permissions": [], "Description": "Adds extra data to an @B_android#view#accessibility#AccessibilityNodeInfo_E@ based on an explicit request for the additional data. This method only needs to be implemented if a virtual view offers to provide additional data.", "history": "Added in API level 26", "FullName": "public void addExtraDataToAccessibilityNodeInfo (int virtualViewId, AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)"}, "AccessibilityNodeProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 16", "FullName": "public AccessibilityNodeProvider ()"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityNodeProvider", "ClassDesc": "This class is the contract a client should implement to enable support of a virtual view hierarchy rooted at a given view for accessibility purposes. A virtual view hierarchy is a tree of imaginary Views that is reported as a part of the view hierarchy when an @B_android#accessibilityservice#AccessibilityService_E@ explores the window content. Since the virtual View tree does not exist this class is responsible for managing the @B_android#view#accessibility#AccessibilityNodeInfo_E@s describing that tree to accessibility services. The main use case of these APIs is to enable a custom view that draws complex content, for example a monthly calendar grid, to be presented as a tree of logical nodes, for example month days each containing events, thus conveying its logical structure. A typical use case is to override @B_android#view#View#getAccessibilityNodeProvider_E@ of the View that is a root of a virtual View hierarchy to return an instance of this class. In such a case this instance is responsible for managing @B_android#view#accessibility#AccessibilityNodeInfo_E@s describing the virtual sub-tree rooted at the View including the one representing the View itself. Similarly the returned instance is responsible for performing accessibility actions on any virtual view or the root view itself. For example:"}