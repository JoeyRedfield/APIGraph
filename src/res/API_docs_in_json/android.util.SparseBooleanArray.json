{"Functions": {"indexOfValue(boolean)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an index for which @B_android#util#SparseBooleanArray#valueAt_E@ would return the specified key, or a negative number if no keys map to the specified value. Beware that this is a linear search, unlike lookups by key, and that multiple keys can map to the same value and this will find only one of them.", "history": "Added in API level 1", "FullName": "public int indexOfValue (boolean value)"}, "keyAt(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseBooleanArray stores. The keys corresponding to indices in ascending order are guaranteed to be in ascending order, e.g., keyAt(0) will return the smallest key and keyAt(size()-1) will return the largest key. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 1", "FullName": "public int keyAt (int index)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all key-value mappings from this SparseBooleanArray.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "removeAt(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping at the specified index. For indices outside of the range 0...size()-1, the behavior is undefined.", "history": "Added in API level 28", "FullName": "public void removeAt (int index)"}, "valueAt(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseBooleanArray stores. The values corresponding to indices in ascending order are guaranteed to be associated with keys in ascending order, e.g., valueAt(0) will return the value associated with the smallest key and valueAt(size()-1) will return the value associated with the largest key. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 1", "FullName": "public boolean valueAt (int index)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object that)"}, "setValueAt(int,boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Directly set the value at a particular index. For indices outside of the range 0...size()-1, the behavior is undefined for apps targeting @B_android#os#Build#VERSION_CODES#P_E@ and earlier, and an @B_java#lang#ArrayIndexOutOfBoundsException_E@ is thrown for apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ and later.", "history": "Added in API level 29", "FullName": "public void setValueAt (int index, boolean value)"}, "put(int, boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.", "history": "added in API level 1", "FullName": "public void put (int key, boolean value)"}, "clone()": {"Returns": [["@B_android#util#SparseBooleanArray_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "public SparseBooleanArray clone ()"}, "get(int,boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made.", "history": "Added in API level 1", "FullName": "public boolean get (int key, boolean valueIfKeyNotFound)"}, "SparseBooleanArray()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SparseBooleanArray containing no mappings.", "history": "Added in API level 1", "FullName": "public SparseBooleanArray ()"}, "get(int, boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made.", "history": "added in API level 1", "FullName": "public boolean get (int key, boolean valueIfKeyNotFound)"}, "size()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings that this SparseBooleanArray currently stores.", "history": "Added in API level 1", "FullName": "public int size ()"}, "indexOfKey(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index for which @B_android#util#SparseBooleanArray#keyAt_E@ would return the specified key, or a negative number if the specified key is not mapped.", "history": "Added in API level 1", "FullName": "public int indexOfKey (int key)"}, "append(int, boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.", "history": "added in API level 1", "FullName": "public void append (int key, boolean value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: This implementation composes a string by iterating over its mappings.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "get(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the boolean mapped from the specified key, or false if no such mapping has been made.", "history": "Added in API level 1", "FullName": "public boolean get (int key)"}, "delete(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping from the specified key, if there was any.", "history": "Added in API level 1", "FullName": "public void delete (int key)"}, "SparseBooleanArray(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SparseBooleanArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings. If you supply an initial capacity of 0, the sparse array will be initialized with a light-weight representation not requiring any additional array allocations.", "history": "Added in API level 1", "FullName": "public SparseBooleanArray (int initialCapacity)"}, "put(int,boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.", "history": "Added in API level 1", "FullName": "public void put (int key, boolean value)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "append(int,boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.", "history": "Added in API level 1", "FullName": "public void append (int key, boolean value)"}}, "Inheritance": [], "ClassName": "android.util.SparseBooleanArray", "ClassDesc": "SparseBooleanArrays map integers to booleans. Unlike a normal array of booleans there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Booleans, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. It is possible to iterate over the items in this container using @B_android#util#SparseBooleanArray#keyAt_E@ and @B_android#util#SparseBooleanArray#valueAt_E@. Iterating over the keys using keyAt(int) with ascending values of the index will return the keys in ascending order, or the values corresponding to the keys in ascending order in the case of valueAt(int)."}