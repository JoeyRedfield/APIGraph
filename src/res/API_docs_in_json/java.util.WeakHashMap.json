{"Functions": {"replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [], "SeeAlso": ["@B_java#util#WeakHashMap#put_E@"], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not null. The @B_java#util#WeakHashMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if there is a mapping for key; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.", "history": "Added in API level 1", "FullName": "public int size ()"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose mapping is to be removed from the map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for a key from this weak hash map if it is present. More formally, if this map contains a mapping from key (key==null ? k==null : key.equals(k)), that mapping is removed. (The map can contain at most one such mapping.) Returns the value to which this map previously associated the key, or The map will not contain a mapping for the specified key once the call returns.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "WeakHashMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new", "history": "Added in API level 1", "FullName": "public WeakHashMap (Map<? extends K, ? extends V> m)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "WeakHashMap(int)": {"Returns": [], "Parameters": [["int", "int: The initial capacity of the WeakHashMap"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty", "history": "Added in API level 1", "FullName": "public WeakHashMap (int initialCapacity)"}, "WeakHashMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty", "history": "Added in API level 1", "FullName": "public WeakHashMap ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map. The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "WeakHashMap(int, float)": {"Returns": [], "Parameters": [["int", "int: The initial capacity of the WeakHashMap"], ["float", "float: The load factor of the WeakHashMap"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative, or if the load factor is nonpositive."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty", "history": "added in API level 1", "FullName": "public WeakHashMap (int initialCapacity, float loadFactor)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated."], ["V", "V: value to be associated with the specified key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "WeakHashMap(int,float)": {"Returns": [], "Parameters": [["int", "int: The initial capacity of the WeakHashMap"], ["float", "float: The load factor of the WeakHashMap"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative, or if the load factor is nonpositive."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty", "history": "Added in API level 1", "FullName": "public WeakHashMap (int initialCapacity, float loadFactor)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated."], ["V", "V: value to be associated with the specified key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.WeakHashMap<K, V>", "ClassDesc": "Hash table based implementation of the weak keys. An entry in a Both null values and the null key are supported. This class has performance characteristics similar to those of the initial capacity and load factor. Like most collection classes, this class is not synchronized. A synchronized @B_java#util#Collections#synchronizedMap_E@ method. This class is intended primarily for use with key objects whose The behavior of the Each key object in a The iterators returned by the @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw This class is a member of the"}