{"Functions": {"getMinorVersion()": {"Returns": [["int", "this driver's minor version number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the driver's minor version number. Initially this should be 0.", "history": "Added in API level 1", "FullName": "public abstract int getMinorVersion ()"}, "jdbcCompliant()": {"Returns": [["boolean", "true if this driver is JDBC Compliant; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether this driver is a genuine JDBC Complianttrue here if it passes the JDBC compliance tests; otherwise it is required to return false. JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level. It is expected that JDBC compliant drivers will be available for all the major commercial databases. This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.", "history": "Added in API level 1", "FullName": "public abstract boolean jdbcCompliant ()"}, "acceptsURL(java.lang.String)": {"Returns": [["boolean", "true if this driver understands the given URL; false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the driver thinks that it can open a connection to the given URL. Typically drivers will return true if they understand the subprotocol specified in the URL and false if they do not.", "history": "Added in API level 1", "FullName": "public abstract boolean acceptsURL (String url)"}, "getPropertyInfo(java.lang.String,java.util.Properties)": {"Returns": [["@B_java#sql#DriverPropertyInfo_E@", "an array of DriverPropertyInfo objects describing possible properties. This array may be an empty array if no properties are required."]], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the database to which to connect"], ["@B_java#util#Properties_E@", "Properties: a proposed list of tag/value pairs that will be sent on connect open"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets information about the possible properties for this driver. The getPropertyInfo method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to the getPropertyInfo method.", "history": "Added in API level 1", "FullName": "public abstract DriverPropertyInfo[] getPropertyInfo (String url, Properties info)"}, "connect(java.lang.String,java.util.Properties)": {"Returns": [["@B_java#sql#Connection_E@", "a Connection object that represents a connection to the URL"]], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the database to which to connect"], ["@B_java#util#Properties_E@", "Properties: a list of arbitrary string tag/value pairs as connection arguments. Normally at least a \"user\" and \"password\" property should be included."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to make a database connection to the given URL. The driver should return \"null\" if it realizes it is the wrong kind of driver to connect to the given URL. This will be common, as when the JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn. The driver should throw an SQLException if it is the right driver to connect to the given URL but has trouble connecting to the database. The java.util.Properties argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least \"user\" and \"password\" properties should be included in the Properties object.", "history": "Added in API level 1", "FullName": "public abstract Connection connect (String url, Properties info)"}, "getMajorVersion()": {"Returns": [["int", "this driver's major version number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the driver's major version number. Initially this should be 1.", "history": "Added in API level 1", "FullName": "public abstract int getMajorVersion ()"}, "connect(java.lang.String, java.util.Properties)": {"Returns": [["@B_java#sql#Connection_E@", "a Connection object that represents a connection to the URL"]], "Parameters": [["@B_java#lang#String_E@", "String: the URL of the database to which to connect"], ["@B_java#util#Properties_E@", "Properties: a list of arbitrary string tag/value pairs as connection arguments. Normally at least a \"user\" and \"password\" property should be included."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to make a database connection to the given URL. The driver should return \"null\" if it realizes it is the wrong kind of driver to connect to the given URL. This will be common, as when the JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn. The driver should throw an SQLException if it is the right driver to connect to the given URL but has trouble connecting to the database. The java.util.Properties argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least \"user\" and \"password\" properties should be included in the Properties object.", "history": "added in API level 1", "FullName": "public abstract Connection connect (String url, Properties info)"}}, "Inheritance": [], "ClassName": "java.sql.Driver", "ClassDesc": "The interface that every driver class must implement. The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface. The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to connect to the target URL. It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast quantities of supporting code. When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a driver by calling"}