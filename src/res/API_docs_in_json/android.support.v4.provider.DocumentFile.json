{"Functions": {"createFile(java.lang.String, java.lang.String)": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "file representing newly created document, or null if failed"]], "Parameters": [["@B_java#lang#String_E@", "String: MIME type of new document, such as image/png or audio/flac"], ["@B_java#lang#String_E@", "String: name of new document, without any file extension appended; the underlying provider may choose to append the extension"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "when working with a single document created from @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@."]], "SeeAlso": ["@B_android#provider#DocumentsContract#createDocument_E@"], "Permissions": [], "Description": "Create a new document as a direct child of this directory.", "history": "added in version 22.0.0", "FullName": "DocumentFile createFile (String mimeType, String displayName)"}, "length()": {"Returns": [["long", "the number of bytes in this file."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Returns the length of this file in bytes. Returns 0 if the file does not exist, or if the length is unknown. The result for a directory is not defined.", "history": "added in version 22.0.0", "FullName": "long length ()"}, "exists()": {"Returns": [["boolean", "true if this file exists, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a boolean indicating whether this file can be found.", "history": "added in version 22.0.0", "FullName": "boolean exists ()"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Return the MIME type of this document.", "history": "added in version 22.0.0", "FullName": "String getType ()"}, "listFiles()": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "an array of files or null."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "when working with a single document created from @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@."]], "SeeAlso": ["@B_android#provider#DocumentsContract#buildChildDocumentsUriUsingTree_E@"], "Permissions": [], "Description": "Returns an array of files contained in the directory represented by this file.", "history": "added in version 22.0.0", "FullName": "DocumentFile[] listFiles ()"}, "findFile(java.lang.String)": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "when working with a single document created from @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Search through @B_android#support#v4#provider#DocumentFile#listFiles_E@ for the first document matching the given display name. Returns null when no matching document is found.", "history": "added in version 22.0.0", "FullName": "DocumentFile findFile (String displayName)"}, "lastModified()": {"Returns": [["long", "the time when this file was last modified."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Returns the time when this file was last modified, measured in milliseconds since January 1st, 1970, midnight. Returns 0 if the file does not exist, or if the modified time is unknown.", "history": "added in version 22.0.0", "FullName": "long lastModified ()"}, "canWrite()": {"Returns": [["boolean", "true if this file can be written, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Indicates whether the current context is allowed to write to this file.", "history": "added in version 22.0.0", "FullName": "boolean canWrite ()"}, "isDirectory()": {"Returns": [["boolean", "true if this file is a directory, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Indicates if this file represents a directory.", "history": "added in version 22.0.0", "FullName": "boolean isDirectory ()"}, "renameTo(java.lang.String)": {"Returns": [["boolean", "true on success."]], "Parameters": [["@B_java#lang#String_E@", "String: the new display name."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "when working with a single document created from @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@."]], "SeeAlso": ["@B_android#provider#DocumentsContract#renameDocument_E@"], "Permissions": [], "Description": "Renames this file to displayName. Note that this method does IOException on failure. Callers must check the return value. Some providers may need to create a new document to reflect the rename, potentially with a different MIME type, so @B_android#support#v4#provider#DocumentFile#getUri_E@ and @B_android#support#v4#provider#DocumentFile#getType_E@ may change to reflect the rename. When renaming a directory, children previously enumerated through @B_android#support#v4#provider#DocumentFile#listFiles_E@ may no longer be valid.", "history": "added in version 22.0.0", "FullName": "boolean renameTo (String displayName)"}, "getParentFile()": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the parent file of this document. Only defined inside of the user-selected tree; you can never escape above the top of the tree. The underlying @B_android#provider#DocumentsProvider_E@ only defines a forward mapping from parent to child, so the reverse mapping of child to parent offered here is purely a convenience method, and it may be incorrect if the underlying tree structure changes.", "history": "added in version 22.0.0", "FullName": "DocumentFile getParentFile ()"}, "canRead()": {"Returns": [["boolean", "true if this file can be read, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the current context is allowed to read from this file.", "history": "added in version 22.0.0", "FullName": "boolean canRead ()"}, "isVirtual()": {"Returns": [["boolean", "true if this file is a virtual document."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Indicates if this file represents a virtual document.", "history": "added in version 25.1.0", "FullName": "boolean isVirtual ()"}, "delete()": {"Returns": [["boolean", "true if this file was deleted, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#deleteDocument_E@"], "Permissions": [], "Description": "Deletes this file. Note that this method does IOException on failure. Callers must check the return value.", "history": "added in version 22.0.0", "FullName": "boolean delete ()"}, "isFile()": {"Returns": [["boolean", "true if this file is a file, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Indicates if this file represents a file.", "history": "added in version 22.0.0", "FullName": "boolean isFile ()"}, "getUri()": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent#setData_E@", "@B_android#content#Intent#setClipData_E@", "@B_android#content#ContentResolver#openInputStream_E@", "@B_android#content#ContentResolver#openOutputStream_E@", "@B_android#content#ContentResolver#openFileDescriptor_E@"], "Permissions": [], "Description": "Return a Uri for the underlying document represented by this file. This can be used with other platform APIs to manipulate or share the underlying content. You can use @B_android#support#v4#provider#DocumentFile#isDocumentUri_E@ to test if the returned Uri is backed by a @B_android#provider#DocumentsProvider_E@.", "history": "added in version 22.0.0", "FullName": "Uri getUri ()"}, "createDirectory(java.lang.String)": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "file representing newly created directory, or null if failed"]], "Parameters": [["@B_java#lang#String_E@", "String: name of new directory"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "when working with a single document created from @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@."]], "SeeAlso": ["@B_android#provider#DocumentsContract#createDocument_E@"], "Permissions": [], "Description": "Create a new directory as a direct child of this directory.", "history": "added in version 22.0.0", "FullName": "DocumentFile createDirectory (String displayName)"}, "fromFile(java.io.File)": {"Returns": [["@B_android#support#v4#provider#DocumentFile_E@", "no returns description in source"]], "Parameters": [["@B_java#io#File_E@", "File no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#support#v4#provider#DocumentFile_E@ representing the filesystem tree rooted at the given @B_java#io#File_E@. This doesn't give you any additional access to the underlying files beyond what your app already has. @B_android#support#v4#provider#DocumentFile#getUri_E@ will return file:// Uris for files explored through this tree.", "history": "added in version 22.0.0", "FullName": "DocumentFile fromFile (File file)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Return the display name of this document.", "history": "added in version 22.0.0", "FullName": "String getName ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.provider.DocumentFile", "ClassDesc": "Representation of a document backed by either a https:##developer#android#com@B_android#provider#DocumentsProvider_E@ or a raw file on disk. This is a utility class designed to emulate the traditional @B_java#io#File_E@ interface. It offers a simplified view of a tree of documents, but it has substantial overhead. For optimal performance and a richer feature set, use the https:##developer#android#com@B_android#provider#DocumentsContract_E@ methods and constants directly. There are several differences between documents and traditional files: Documents express their display name and MIME type as separate fields, instead of relying on file extensions. Some documents providers may still choose to append extensions to their display names, but that's an implementation detail. A single document may appear as the child of multiple directories, so it doesn't inherently know who its parent is. That is, documents don't have a strong notion of path. You can easily traverse a tree of documents from parent to child, but not from child to parent. Each document has a unique identifier within that provider. This identifier is an opaque implementation detail of the provider, and as such it must not be parsed. Before using this class, first consider if you really need access to an entire subtree of documents. The principle of least privilege dictates that you should only ask for access to documents you really need. If you only need the user to pick a single file, use https:##developer#android#com@B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@ or https:##developer#android#com@B_android#content#Intent#ACTION_GET_CONTENT_E@. If you want to let the user pick multiple files, add https:##developer#android#com@B_android#content#Intent#EXTRA_ALLOW_MULTIPLE_E@. If you only need the user to save a single file, use https:##developer#android#com@B_android#content#Intent#ACTION_CREATE_DOCUMENT_E@. If you use these APIs, you can pass the resulting https:##developer#android#com@B_android#content#Intent#getData_E@ into @B_android#support#v4#provider#DocumentFile#fromSingleUri_E@ to work with that document. If you really do need full access to an entire subtree of documents, start by launching https:##developer#android#com@B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@ to let the user pick a directory. Then pass the resulting https:##developer#android#com@B_android#content#Intent#getData_E@ into @B_android#support#v4#provider#DocumentFile#fromTreeUri_E@ to start working with the user selected tree. As you navigate the tree of DocumentFile instances, you can always use @B_android#support#v4#provider#DocumentFile#getUri_E@ to obtain the Uri representing the underlying document for that object, for use with https:##developer#android#com@B_android#content#ContentResolver#openInputStream_E@, etc. To simplify your code on devices running https:##developer#android#com@B_android#os#Build#VERSION_CODES#KITKAT_E@ or earlier, you can use @B_android#support#v4#provider#DocumentFile#fromFile_E@ which emulates the behavior of a https:##developer#android#com@B_android#provider#DocumentsProvider_E@."}