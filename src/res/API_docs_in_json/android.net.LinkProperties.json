{"Functions": {"setDomains(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A @B_java#lang#String_E@ listing in priority order the comma separated domains to search when resolving host names on this link. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the DNS domain search path used on this link.", "history": "Added in API level 29", "FullName": "public void setDomains (String domains)"}, "addRoute(android.net.RouteInfo)": {"Returns": [["boolean", "false if the route was already present, true if it was added."]], "Parameters": [["@B_android#net#RouteInfo_E@", "RouteInfo: A @B_android#net#RouteInfo_E@ to add to this object. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a @B_android#net#RouteInfo_E@ to this LinkProperties, if not present. If the @B_android#net#RouteInfo_E@ had an interface name set and that differs from the interface set for this LinkProperties an @B_java#lang#IllegalArgumentException_E@ will be thrown. The proper course is to add either un-named or properly named @B_android#net#RouteInfo_E@.", "history": "Added in API level 29", "FullName": "public boolean addRoute (RouteInfo route)"}, "getInterfaceName()": {"Returns": [["@B_java#lang#String_E@", "The interface name set for this link or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the interface name for this link. May be null if not set.", "history": "Added in API level 21", "FullName": "public String getInterfaceName ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement the Parcelable interface", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getLinkAddresses()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable @B_java#util#List_E@ of @B_android#net#LinkAddress_E@ for this link. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the @B_android#net#LinkAddress_E@ on this link. Typically a link will have one IPv4 address and one or more IPv6 addresses.", "history": "Added in API level 21", "FullName": "public List<LinkAddress> getLinkAddresses ()"}, "getPrivateDnsServerName()": {"Returns": [["@B_java#lang#String_E@", "The private DNS server name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the private DNS server name that is in use. If not null, private DNS is in strict mode. In this mode, applications should ensure that all DNS queries are encrypted and sent to this hostname and that queries are only sent if the hostname's certificate is valid. If null and @B_android#net#LinkProperties#isPrivateDnsActive_E@ is true, private DNS is in opportunistic mode, and applications should ensure that DNS queries are encrypted and sent to a DNS server returned by @B_android#net#LinkProperties#getDnsServers_E@. System DNS will handle each of these cases correctly, but applications implementing their own DNS lookups must make sure to follow these requirements.", "history": "Added in API level 28", "FullName": "public String getPrivateDnsServerName ()"}, "setLinkAddresses(java.util.Collection<android.net.LinkAddress>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: The @B_java#util#Collection_E@ of @B_android#net#LinkAddress_E@ to set in this object. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the @B_android#net#LinkAddress_E@ in this LinkProperties with the given @B_java#util#Collection_E@ of @B_android#net#LinkAddress_E@.", "history": "Added in API level 29", "FullName": "public void setLinkAddresses (Collection<LinkAddress> addresses)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement the Parcelable interface.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this object to its initial state.", "history": "Added in API level 29", "FullName": "public void clear ()"}, "isPrivateDnsActive()": {"Returns": [["boolean", "true if private DNS is in use, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether private DNS is currently in use on this network. When private DNS is in use, applications must not send unencrypted DNS queries as doing so could reveal private user information. Furthermore, if private DNS is in use and @B_android#net#LinkProperties#getPrivateDnsServerName_E@ is not null, DNS queries must be sent to the specified DNS server.", "history": "Added in API level 28", "FullName": "public boolean isPrivateDnsActive ()"}, "getHttpProxy()": {"Returns": [["@B_android#net#ProxyInfo_E@", "The @B_android#net#ProxyInfo_E@ set on this link or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the recommended @B_android#net#ProxyInfo_E@ (or null) set on this link.", "history": "Added in API level 21", "FullName": "public ProxyInfo getHttpProxy ()"}, "LinkProperties()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new LinkProperties with default values.", "history": "Added in API level 29", "FullName": "public LinkProperties ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if both objects are equal, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be tested for equality."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this LinkProperties instance against the target LinkProperties in obj. Two LinkPropertieses are equal if all their fields are equal in values. For collection fields, such as mDnses, containsAll() is used to check if two collections contains the same elements, independent of order. There are two thoughts regarding containsAll() 1. Duplicated elements. eg, (A, B, B) and (A, A, B) are equal. 2. Worst case performance is O(n^2).", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "setInterfaceName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the network interface used for this link. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the interface name for this link. All @B_android#net#RouteInfo_E@ already set for this will have their interface changed to match this new value.", "history": "Added in API level 29", "FullName": "public void setInterfaceName (String iface)"}, "getRoutes()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable @B_java#util#List_E@ of @B_android#net#RouteInfo_E@ for this link. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the @B_android#net#RouteInfo_E@ set on this link.", "history": "Added in API level 21", "FullName": "public List<RouteInfo> getRoutes ()"}, "setMtu(int)": {"Returns": [], "Parameters": [["int", "int: The MTU to use for this link."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Maximum Transmission Unit size to use on this link. This should not be used unless the system default (1500) is incorrect. Values less than 68 or greater than 10000 will be ignored.", "history": "Added in API level 29", "FullName": "public void setMtu (int mtu)"}, "getMtu()": {"Returns": [["int", "The mtu value set for this link."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets any non-default MTU size set for this link. Note that if the default is being used this will return 0.", "history": "Added in API level 29", "FullName": "public int getMtu ()"}, "getDomains()": {"Returns": [["@B_java#lang#String_E@", "A @B_java#lang#String_E@ containing the comma separated domains to search when resolving host names on this link or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the DNS domains search path set for this link. May be null if not set.", "history": "Added in API level 21", "FullName": "public String getDomains ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "setHttpProxy(android.net.ProxyInfo)": {"Returns": [], "Parameters": [["@B_android#net#ProxyInfo_E@", "ProxyInfo: A @B_android#net#ProxyInfo_E@ defining the HTTP Proxy to use on this link. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the recommended @B_android#net#ProxyInfo_E@ to use on this link, or null for none. Note that Http Proxies are only a hint - the system recommends their use, but it does not enforce it and applications may ignore them.", "history": "Added in API level 29", "FullName": "public void setHttpProxy (ProxyInfo proxy)"}, "setDnsServers(java.util.Collection<java.net.InetAddress>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: The @B_java#util#Collection_E@ of DNS servers to set in this object. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the DNS servers in this LinkProperties with the given @B_java#util#Collection_E@ of @B_java#net#InetAddress_E@ objects.", "history": "Added in API level 29", "FullName": "public void setDnsServers (Collection<InetAddress> dnsServers)"}, "getDnsServers()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable @B_java#util#List_E@ of @B_java#net#InetAddress_E@ for DNS servers on this link. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the @B_java#net#InetAddress_E@ for DNS servers on this link.", "history": "Added in API level 21", "FullName": "public List<InetAddress> getDnsServers ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate hashcode based on significant fields Equal objects must produce the same hash code, while unequal objects may have the same hash codes.", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement the Parcelable interface.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}}, "Inheritance": [], "ClassName": "android.net.LinkProperties", "ClassDesc": "Describes the properties of a network link. A link represents a connection to a network. It may have multiple addresses and multiple gateways, multiple dns servers but only one http proxy and one network interface. Note that this is just a holder of data. Modifying it does not affect live networks."}