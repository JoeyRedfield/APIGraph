{"Functions": {"getCurrentActivity()": {"Returns": [["@B_android#app#Activity_E@", "the currently running (resumed) Activity, or null if there is not one"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#LocalActivityManager#startActivity_E@", "@B_android#app#LocalActivityManager#getCurrentId_E@"], "Permissions": [], "Description": "Retrieve the Activity that is currently running.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public Activity getCurrentActivity ()"}, "saveInstanceState()": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle holding the newly created state of all known activities"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#LocalActivityManager#dispatchCreate_E@"], "Permissions": [], "Description": "Retrieve the state of all activities known by the group. For activities that have previously run and are now stopped or finished, the last saved state is used. For the current running activity, its @B_android#app#Activity#onSaveInstanceState_E@ is called to retrieve its current state.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public Bundle saveInstanceState ()"}, "startActivity(java.lang.String,android.content.Intent)": {"Returns": [["@B_android#view#Window_E@", "Returns the window of the activity. The caller needs to take care of adding this window to a view hierarchy, and likewise dealing with removing the old window if the activity has changed."]], "Parameters": [["@B_java#lang#String_E@", "String: Unique identifier of the activity to be started"], ["@B_android#content#Intent_E@", "Intent: The Intent describing the activity to be started"]], "Throws": [["", "android.content.ActivityNotFoundException"]], "SeeAlso": [], "Permissions": [], "Description": "Start a new activity running in the group. Every activity you start must have a unique string ID associated with it -- this is used to keep track of the activity, so that if you later call startActivity() again on it the same activity object will be retained. When there had previously been an activity started under this id, it may either be destroyed and a new one started, or the current one re-used, based on these conditions, in order: If the Intent maps to a different activity component than is currently running, the current activity is finished and a new one started. If the current activity uses a non-multiple launch mode (such as singleTop), or the Intent has the @B_android#content#Intent#FLAG_ACTIVITY_SINGLE_TOP_E@ flag set, then the current activity will remain running and its @B_android#app#Activity#onNewIntent_E@ method called. If the new Intent is the same (excluding extras) as the previous one, and the new Intent does not have the @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@ set, then the current activity will remain running as-is. Otherwise, the current activity will be finished and a new one started. If the given Intent can not be resolved to an available Activity, this method throws @B_android#content#ActivityNotFoundException_E@. Warning: There is an issue where, if the Intent does not include an explicit component, we can restore the state for a different activity class than was previously running when the state was saved (if the set of available activities changes between those points).", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public Window startActivity (String id, Intent intent)"}, "dispatchResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onResume_E@"], "Permissions": [], "Description": "Called by the container activity in its @B_android#app#Activity#onResume_E@ so that LocalActivityManager can perform the corresponding action on the activities it holds.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void dispatchResume ()"}, "getCurrentId()": {"Returns": [["@B_java#lang#String_E@", "the ID of the currently running (resumed) Activity, or null if there is not one"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#LocalActivityManager#startActivity_E@", "@B_android#app#LocalActivityManager#getCurrentActivity_E@"], "Permissions": [], "Description": "Retrieve the ID of the activity that is currently running.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public String getCurrentId ()"}, "dispatchStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onStop_E@"], "Permissions": [], "Description": "Called by the container activity in its @B_android#app#Activity#onStop_E@ so that LocalActivityManager can perform the corresponding action on the activities it holds.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void dispatchStop ()"}, "dispatchDestroy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onDestroy_E@"], "Permissions": [], "Description": "Called by the container activity in its @B_android#app#Activity#onDestroy_E@ so that LocalActivityManager can perform the corresponding action on the activities it holds.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void dispatchDestroy (boolean finishing)"}, "removeAllActivities()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all activities from this LocalActivityManager, performing an @B_android#app#Activity#onDestroy_E@ on any that are currently instantiated.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void removeAllActivities ()"}, "dispatchCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: a previously saved state; does nothing if this is null"]], "Throws": [], "SeeAlso": ["@B_android#app#LocalActivityManager#saveInstanceState_E@"], "Permissions": [], "Description": "Restore a state that was previously returned by @B_android#app#LocalActivityManager#saveInstanceState_E@. This adds to the activity group information about all activity IDs that had previously been saved, even if they have not been started yet, so if the user later navigates to them the correct state will be restored. Note: This does", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void dispatchCreate (Bundle state)"}, "getActivity(java.lang.String)": {"Returns": [["@B_android#app#Activity_E@", "the associated Activity object, or null if the id is unknown or its activity is not currently instantiated"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#LocalActivityManager#startActivity_E@"], "Permissions": [], "Description": "Return the Activity object associated with a string ID.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public Activity getActivity (String id)"}, "LocalActivityManager(android.app.Activity,boolean)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the host of the embedded activities"], ["boolean", "boolean: True if the LocalActivityManger should keep a maximum of one activity resumed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new LocalActivityManager for holding activities running within the given", "history": "Added in API level 1", "FullName": "public LocalActivityManager (Activity parent, boolean singleMode)"}, "destroyActivity(java.lang.String, boolean)": {"Returns": [["@B_android#view#Window_E@", "Returns the window that was used to display the activity, or null if there was none."]], "Parameters": [["@B_java#lang#String_E@", "String: Unique identifier of the activity to be destroyed"], ["boolean", "boolean: If true, this activity will be finished, so its id and all state are removed from the group."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy the activity associated with a particular id. This activity will go through the normal lifecycle events and fine onDestroy(), and then the id removed from the group.", "history": "added in API level 1", "FullName": "public Window destroyActivity (String id, boolean finish)"}, "dispatchPause(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set to true if the parent activity has been finished; this can be determined by calling Activity.isFinishing()"]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onPause_E@", "@B_android#app#Activity#isFinishing_E@"], "Permissions": [], "Description": "Called by the container activity in its @B_android#app#Activity#onPause_E@ so that LocalActivityManager can perform the corresponding action on the activities it holds.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public void dispatchPause (boolean finishing)"}, "destroyActivity(java.lang.String,boolean)": {"Returns": [["@B_android#view#Window_E@", "Returns the window that was used to display the activity, or null if there was none."]], "Parameters": [["@B_java#lang#String_E@", "String: Unique identifier of the activity to be destroyed"], ["boolean", "boolean: If true, this activity will be finished, so its id and all state are removed from the group."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy the activity associated with a particular id. This activity will go through the normal lifecycle events and fine onDestroy(), and then the id removed from the group.", "history": "Added in API level 1 Deprecated in API level 13", "FullName": "public Window destroyActivity (String id, boolean finish)"}}, "Inheritance": [], "ClassName": "android.app.LocalActivityManager", "ClassDesc": "Use the new @B_android#app#Fragment_E@ and @B_android#app#FragmentManager_E@ APIs instead; these are also available on older platforms through the Android compatibility package. Helper class for managing multiple running embedded activities in the same process. This class is not normally used directly, but rather created for you as part of the @B_android#app#ActivityGroup_E@ implementation."}