{"Functions": {"attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#wifi#aware#AttachCallback_E@", "AttachCallback: A callback for attach events, extended from @B_android#net#wifi#aware#AttachCallback_E@. This value must never be null."], ["@B_android#net#wifi#aware#IdentityChangedListener_E@", "IdentityChangedListener: A listener for changed identity, extended from @B_android#net#wifi#aware#IdentityChangedListener_E@. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The Handler on whose thread to execute the callbacks of the attachCallback and identityChangedListener objects. If a null is provided then the application's main thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers. The device will attach to an existing cluster if it can find one or create a new cluster (if it is the first to enable Aware in its vicinity). Results (e.g. successful attach to a cluster) are provided to the attachCallback object. An application @B_android#net#wifi#aware#WifiAwareSession#close_E@ when done with the Wi-Fi Aware object. Note: a Aware cluster is a shared resource - if the device is already attached to a cluster then this function will simply indicate success immediately using the same attachCallback. This version of the API attaches a listener to receive the MAC address of the Aware interface on startup and whenever it is updated (it is randomized at regular intervals for privacy). The application must have the @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission to execute this attach request. Otherwise, use the @B_android#net#wifi#aware#WifiAwareManager#attach_E@ version. Note that aside from permission requirements this listener will wake up the host at regular intervals causing higher power consumption, do not use it unless the information is necessary (e.g. for OOB discovery).", "history": "Added in API level 26", "FullName": "public void attach (AttachCallback attachCallback, IdentityChangedListener identityChangedListener, Handler handler)"}, "isAvailable()": {"Returns": [["boolean", "A boolean indicating whether the app can use the Aware API at this time (true) or not (false)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current status of Aware API: whether or not Aware is available. To track changes in the state of Aware API register for the @B_android#net#wifi#aware#WifiAwareManager#ACTION_WIFI_AWARE_STATE_CHANGED_E@ broadcast.", "history": "Added in API level 26", "FullName": "public boolean isAvailable ()"}, "attach(android.net.wifi.aware.AttachCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#wifi#aware#AttachCallback_E@", "AttachCallback: A callback for attach events, extended from @B_android#net#wifi#aware#AttachCallback_E@. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The Handler on whose thread to execute the callbacks of the attachCallback object. If a null is provided then the application's main thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers. The device will attach to an existing cluster if it can find one or create a new cluster (if it is the first to enable Aware in its vicinity). Results (e.g. successful attach to a cluster) are provided to the attachCallback object. An application @B_android#net#wifi#aware#WifiAwareSession#close_E@ when done with the Wi-Fi Aware object. Note: a Aware cluster is a shared resource - if the device is already attached to a cluster then this function will simply indicate success immediately using the same attachCallback.", "history": "Added in API level 26", "FullName": "public void attach (AttachCallback attachCallback, Handler handler)"}, "getCharacteristics()": {"Returns": [["@B_android#net#wifi#aware#Characteristics_E@", "An object specifying configuration limitations of Aware."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify limitations on configurations, e.g. the maximum service name length.", "history": "Added in API level 26", "FullName": "public Characteristics getCharacteristics ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.aware.WifiAwareManager", "ClassDesc": "This class provides the primary API for managing Wi-Fi Aware operations: discovery and peer-to-peer data connections. The class provides access to: Initialize a Aware cluster (peer-to-peer synchronization). Refer to @B_android#net#wifi#aware#WifiAwareManager#attach_E@. Create discovery sessions (publish or subscribe sessions). Refer to @B_android#net#wifi#aware#WifiAwareSession#publish_E@ and @B_android#net#wifi#aware#WifiAwareSession#subscribe_E@. Create a Aware network specifier to be used with @B_android#net#ConnectivityManager#requestNetwork_E@ to set-up a Aware connection with a peer. Refer to @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@. Aware may not be usable when Wi-Fi is disabled (and other conditions). To validate that the functionality is available use the @B_android#net#wifi#aware#WifiAwareManager#isAvailable_E@ function. To track changes in Aware usability register for the @B_android#net#wifi#aware#WifiAwareManager#ACTION_WIFI_AWARE_STATE_CHANGED_E@ broadcast. Note that this broadcast is not sticky - you should register for it and then check the above API to avoid a race condition. An application must use @B_android#net#wifi#aware#WifiAwareManager#attach_E@ to initialize a Aware cluster - before making any other Aware operation. Aware cluster membership is a device-wide operation - the API guarantees that the device is in a cluster or joins a Aware cluster (or starts one if none can be found). Information about attach success (or failure) are returned in callbacks of @B_android#net#wifi#aware#AttachCallback_E@. Proceed with Aware discovery or connection setup only after receiving confirmation that Aware attach succeeded - @B_android#net#wifi#aware#AttachCallback#onAttached_E@. When an application is finished using Aware it @B_android#net#wifi#aware#WifiAwareSession#close_E@ API to indicate to the Aware service that the device may detach from the Aware cluster. The device will actually disable Aware once the last application detaches. Once a Aware attach is confirmed use the @B_android#net#wifi#aware#WifiAwareSession#publish_E@ or @B_android#net#wifi#aware#WifiAwareSession#subscribe_E@ to create publish or subscribe Aware discovery sessions. Events are called on the provided callback object @B_android#net#wifi#aware#DiscoverySessionCallback_E@. Specifically, the @B_android#net#wifi#aware#DiscoverySessionCallback#onPublishStarted_E@ and @B_android#net#wifi#aware#DiscoverySessionCallback#onSubscribeStarted_E@ return @B_android#net#wifi#aware#PublishDiscoverySession_E@ and @B_android#net#wifi#aware#SubscribeDiscoverySession_E@ objects respectively on which additional session operations can be performed, e.g. updating the session @B_android#net#wifi#aware#PublishDiscoverySession#updatePublish_E@ and @B_android#net#wifi#aware#SubscribeDiscoverySession#updateSubscribe_E@. Sessions can also be used to send messages using the @B_android#net#wifi#aware#DiscoverySession#sendMessage_E@ APIs. When an application is finished with a discovery session it @B_android#net#wifi#aware#DiscoverySession#close_E@ API. Creating connections between Aware devices is managed by the standard @B_android#net#ConnectivityManager#requestNetwork_E@. The @B_android#net#NetworkRequest_E@ object should be constructed with: @B_android#net#NetworkRequest#Builder#addTransportType_E@ of @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ using @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@."}