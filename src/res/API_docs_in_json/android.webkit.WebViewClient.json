{"Functions": {"onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback"], ["@B_android#webkit#ClientCertRequest_E@", "ClientCertRequest: An instance of a @B_android#webkit#ClientCertRequest_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application to handle a SSL client certificate request. The host application is responsible for showing the UI if desired and providing the keys. There are three ways to respond: @B_android#webkit#ClientCertRequest#proceed_E@, @B_android#webkit#ClientCertRequest#cancel_E@, or @B_android#webkit#ClientCertRequest#ignore_E@. Webview stores the response in memory (for the life of the application) if @B_android#webkit#ClientCertRequest#proceed_E@ or @B_android#webkit#ClientCertRequest#cancel_E@ is called and does not call onReceivedClientCertRequest() again for the same host and port pair. Webview does not store the response if @B_android#webkit#ClientCertRequest#ignore_E@ is called. Note that, multiple layers in chromium network stack might be caching the responses, so the behavior for ignore is only a best case effort. This method is called on the UI thread. During the callback, the connection is suspended. For most use cases, the application program should implement the @B_android#security#KeyChainAliasCallback_E@ interface and pass it to @B_android#security#KeyChain#choosePrivateKeyAlias_E@ to start an activity for the user to choose the proper alias. The keychain activity will provide the alias through the callback method in the implemented interface. Next the application should create an async task to call @B_android#security#KeyChain#getPrivateKey_E@ to receive the key. An example implementation of client certificates can be seen at", "history": "Added in API level 21", "FullName": "public void onReceivedClientCertRequest (WebView view, ClientCertRequest request)"}, "onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#webkit#WebResourceRequest_E@", "WebResourceRequest: The originating request."], ["@B_android#webkit#WebResourceResponse_E@", "WebResourceResponse: Information about the error occurred."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that an HTTP error has been received from the server while loading a resource. HTTP errors have status codes >= 400. This callback will be called for any resource (iframe, image, etc.), not just for the main page. Thus, it is recommended to perform minimum required work in this callback. Note that the content of the server response may not be provided within the errorResponse parameter.", "history": "Added in API level 23", "FullName": "public void onReceivedHttpError (WebView view, WebResourceRequest request, WebResourceResponse errorResponse)"}, "onPageCommitVisible(android.webkit.WebView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The @B_android#webkit#WebView_E@ for which the navigation occurred."], ["@B_java#lang#String_E@", "String: The URL corresponding to the page navigation that triggered this callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that @B_android#webkit#WebView_E@ content left over from previous page navigations will no longer be drawn. This callback can be used to determine the point at which it is safe to make a recycled @B_android#webkit#WebView_E@ visible, ensuring that no stale content is shown. It is called at the earliest point at which it can be guaranteed that @B_android#webkit#WebView#onDraw_E@ will no longer draw any content from previous navigations. The next draw will display either the @B_android#webkit#WebView#setBackgroundColor_E@ of the @B_android#webkit#WebView_E@, or some of the contents of the newly loaded page. This method is called when the body of the HTTP response has started loading, is reflected in the DOM, and will be visible in subsequent draws. This callback occurs early in the document loading process, and as such you should expect that linked resources (for example, CSS and images) may not be available. For more fine-grained notification of visual state updates, see @B_android#webkit#WebView#postVisualStateCallback_E@. Please note that all the conditions and recommendations applicable to @B_android#webkit#WebView#postVisualStateCallback_E@ also apply to this API. This callback is only called for main frame navigations.", "history": "Added in API level 23", "FullName": "public void onPageCommitVisible (WebView view, String url)"}, "onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#os#Message_E@", "Message: The message to send if the browser should not resend"], ["@B_android#os#Message_E@", "Message: The message to send if the browser should resend data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As the host application if the browser should resend data as the requested page was a result of a POST. The default is to not resend the data.", "history": "Added in API level 1", "FullName": "public void onFormResubmission (WebView view, Message dontResend, Message resend)"}, "onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView requesting the login."], ["@B_java#lang#String_E@", "String: The account realm used to look up accounts."], ["@B_java#lang#String_E@", "String: An optional account. If not null, the account should be checked against accounts on the device. If it is a valid account, it should be used to log in the user. This value may be null."], ["@B_java#lang#String_E@", "String: Authenticator specific arguments used to log in the user."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a request to automatically log in the user has been processed.", "history": "Added in API level 12", "FullName": "public void onReceivedLoginRequest (WebView view, String realm, String account, String args)"}, "doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_java#lang#String_E@", "String: The url being visited."], ["boolean", "boolean: true if this url is being reloaded."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application to update its visited links database.", "history": "Added in API level 1", "FullName": "public void doUpdateVisitedHistory (WebView view, String url, boolean isReload)"}, "shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)": {"Returns": [["boolean", "true to cancel the current load, otherwise return false."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_java#lang#String_E@", "String: The URL to be loaded."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebViewClient#shouldOverrideUrlLoading_E@ instead. Give the host application a chance to take control when a URL is about to be loaded in the current WebView. If a WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the URL. If a WebViewClient is provided, returning true causes the current WebView to abort loading the URL, while returning false causes the WebView to continue loading the URL as usual. @B_android#webkit#WebView#loadUrl_E@ with the same URL and then return true. This unnecessarily cancels the current load and starts a new load with the same URL. The correct way to continue loading a given URL is to simply return false, without calling @B_android#webkit#WebView#loadUrl_E@. @B_android#webkit#WebView#loadUrl_E@ with such a URL will fail.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public boolean shouldOverrideUrlLoading (WebView view, String url)"}, "onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#webkit#WebResourceRequest_E@", "WebResourceRequest: The originating request."], ["@B_android#webkit#WebResourceError_E@", "WebResourceError: Information about the error occurred."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report web resource loading error to the host application. These errors usually indicate inability to connect to the server. Note that unlike the deprecated version of the callback, the new version will be called for any resource (iframe, image, etc.), not just for the main page. Thus, it is recommended to perform minimum required work in this callback.", "history": "Added in API level 23", "FullName": "public void onReceivedError (WebView view, WebResourceRequest request, WebResourceError error)"}, "shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)": {"Returns": [["boolean", "true if the host application wants to handle the key event itself, otherwise return false"]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Give the host application a chance to handle the key event synchronously. e.g. menu shortcut key events need to be filtered this way. If return true, WebView will not handle the key event. If return false, WebView will always handle the key event, so none of the super in the view chain will see the key event. The default behavior returns false.", "history": "Added in API level 1", "FullName": "public boolean shouldOverrideKeyEvent (WebView view, KeyEvent event)"}, "onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a key was not handled by the WebView. Except system keys, WebView always consumes the keys in the normal flow or if @B_android#webkit#WebViewClient#shouldOverrideKeyEvent_E@ returns true. This is called asynchronously from where the key is dispatched. It gives the host application a chance to handle the unhandled key events.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void onUnhandledKeyEvent (WebView view, KeyEvent event)"}, "onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#webkit#SslErrorHandler_E@", "SslErrorHandler: An @B_android#webkit#SslErrorHandler_E@ that will handle the user's response."], ["@B_android#net#http#SslError_E@", "SslError: The SSL error object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that an SSL error occurred while loading a resource. The host application must call either @B_android#webkit#SslErrorHandler#cancel_E@ or @B_android#webkit#SslErrorHandler#proceed_E@. Note that the decision may be retained for use in response to future SSL errors. The default behavior is to cancel the load. This API is only called for recoverable SSL certificate errors. In the case of non-recoverable errors (such as when the server fails the client), WebView will call @B_android#webkit#WebViewClient#onReceivedError_E@ with @B_android#webkit#WebViewClient#ERROR_FAILED_SSL_HANDSHAKE_E@. Applications are advised not to prompt the user about SSL errors, as the user is unlikely to be able to make an informed security decision and WebView does not provide any UI for showing the details of the error in a meaningful way. Application overrides of this method may display custom error pages or silently log issues, but it is strongly recommended to always call @B_android#webkit#SslErrorHandler#cancel_E@ and never allow proceeding past errors.", "history": "Added in API level 8", "FullName": "public void onReceivedSslError (WebView view, SslErrorHandler handler, SslError error)"}, "onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that hit the malicious resource."], ["@B_android#webkit#WebResourceRequest_E@", "WebResourceRequest: Object containing the details of the request."], ["int", "int: The reason the resource was caught by Safe Browsing, corresponding to a SAFE_BROWSING_THREAT_* value. Value is @B_android#webkit#WebViewClient#SAFE_BROWSING_THREAT_UNKNOWN_E@, @B_android#webkit#WebViewClient#SAFE_BROWSING_THREAT_MALWARE_E@, @B_android#webkit#WebViewClient#SAFE_BROWSING_THREAT_PHISHING_E@, @B_android#webkit#WebViewClient#SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE_E@, or @B_android#webkit#WebViewClient#SAFE_BROWSING_THREAT_BILLING_E@"], ["@B_android#webkit#SafeBrowsingResponse_E@", "SafeBrowsingResponse: Applications must invoke one of the callback methods."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a loading URL has been flagged by Safe Browsing. The application must invoke the callback to indicate the preferred response. The default behavior is to show an interstitial to the user, with the reporting checkbox visible. If the application needs to show its own custom interstitial UI, the callback can be invoked asynchronously with @B_android#webkit#SafeBrowsingResponse#backToSafety_E@ or @B_android#webkit#SafeBrowsingResponse#proceed_E@, depending on user response.", "history": "Added in API level 27", "FullName": "public void onSafeBrowsingHit (WebView view, WebResourceRequest request, int threatType, SafeBrowsingResponse callback)"}, "onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["int", "int: The error code corresponding to an ERROR_* value."], ["@B_java#lang#String_E@", "String: A String describing the error."], ["@B_java#lang#String_E@", "String: The url that failed to load."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebViewClient#onReceivedError_E@ instead. Report an error to the host application. These errors are unrecoverable (i.e. the main resource is unavailable). The errorCode parameter corresponds to one of the ERROR_* constants.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void onReceivedError (WebView view, int errorCode, String description, String failingUrl)"}, "onScaleChanged(android.webkit.WebView,float,float)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["float", "float: The old scale factor"], ["float", "float: The new scale factor"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that the scale applied to the WebView has changed.", "history": "Added in API level 1", "FullName": "public void onScaleChanged (WebView view, float oldScale, float newScale)"}, "shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)": {"Returns": [["boolean", "true to cancel the current load, otherwise return false."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#webkit#WebResourceRequest_E@", "WebResourceRequest: Object containing the details of the request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Give the host application a chance to take control when a URL is about to be loaded in the current WebView. If a WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the URL. If a WebViewClient is provided, returning true causes the current WebView to abort loading the URL, while returning false causes the WebView to continue loading the URL as usual. @B_android#webkit#WebView#loadUrl_E@ with the request's URL and then return true. This unnecessarily cancels the current load and starts a new load with the same URL. The correct way to continue loading a given URL is to simply return false, without calling @B_android#webkit#WebView#loadUrl_E@. @B_android#webkit#WebView#loadUrl_E@ with such a URL will fail.", "history": "Added in API level 24", "FullName": "public boolean shouldOverrideUrlLoading (WebView view, WebResourceRequest request)"}, "onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: the WebView that is initiating the callback"], ["@B_android#webkit#HttpAuthHandler_E@", "HttpAuthHandler: the HttpAuthHandler used to set the WebView's response"], ["@B_java#lang#String_E@", "String: the host requiring authentication"], ["@B_java#lang#String_E@", "String: the realm for which authentication is required"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#getHttpAuthUsernamePassword_E@"], "Permissions": [], "Description": "Notifies the host application that the WebView received an HTTP authentication request. The host application can use the supplied @B_android#webkit#HttpAuthHandler_E@ to set the WebView's response to the request. The default behavior is to cancel the request.", "history": "Added in API level 1", "FullName": "public void onReceivedHttpAuthRequest (WebView view, HttpAuthHandler handler, String host, String realm)"}, "shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)": {"Returns": [["@B_android#webkit#WebResourceResponse_E@", "A @B_android#webkit#WebResourceResponse_E@ containing the response information or null if the WebView should load the resource itself."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The @B_android#webkit#WebView_E@ that is requesting the resource."], ["@B_android#webkit#WebResourceRequest_E@", "WebResourceRequest: Object containing the details of the request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application of a resource request and allow the application to return the data. If the return value is null, the WebView will continue to load the resource as usual. Otherwise, the return response and data will be used. This callback is invoked for a variety of URL schemes (e.g., http(s):, data:, file:, etc.), not only those schemes which send requests over the network. This is not called for javascript: URLs, blob: URLs, or for assets accessed via file:///android_asset/ or file:///android_res/ URLs. In the case of redirects, this is only called for the initial resource URL, not any subsequent redirect URLs. @B_android#webkit#WebView#setSafeBrowsingWhitelist_E@ or ignore the warning with @B_android#webkit#WebViewClient#onSafeBrowsingHit_E@.", "history": "Added in API level 21", "FullName": "public WebResourceResponse shouldInterceptRequest (WebView view, WebResourceRequest request)"}, "onPageFinished(android.webkit.WebView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_java#lang#String_E@", "String: The url of the page."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a page has finished loading. This method is called only for main frame. Receiving an onPageFinished() callback does not guarantee that the next frame drawn by WebView will reflect the state of the DOM at this point. In order to be notified that the current DOM state is ready to be rendered, request a visual state callback with @B_android#webkit#WebView#postVisualStateCallback_E@ and wait for the supplied callback to be triggered.", "history": "Added in API level 1", "FullName": "public void onPageFinished (WebView view, String url)"}, "shouldInterceptRequest(android.webkit.WebView,java.lang.String)": {"Returns": [["@B_android#webkit#WebResourceResponse_E@", "A @B_android#webkit#WebResourceResponse_E@ containing the response information or null if the WebView should load the resource itself."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The @B_android#webkit#WebView_E@ that is requesting the resource."], ["@B_java#lang#String_E@", "String: The raw url of the resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebViewClient#shouldInterceptRequest_E@ instead. Notify the host application of a resource request and allow the application to return the data. If the return value is null, the WebView will continue to load the resource as usual. Otherwise, the return response and data will be used. This callback is invoked for a variety of URL schemes (e.g., http(s):, data:, file:, etc.), not only those schemes which send requests over the network. This is not called for javascript: URLs, blob: URLs, or for assets accessed via file:///android_asset/ or file:///android_res/ URLs. In the case of redirects, this is only called for the initial resource URL, not any subsequent redirect URLs. @B_android#webkit#WebView#setSafeBrowsingWhitelist_E@ or ignore the warning with @B_android#webkit#WebViewClient#onSafeBrowsingHit_E@.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public WebResourceResponse shouldInterceptRequest (WebView view, String url)"}, "onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_java#lang#String_E@", "String: The url to be loaded."], ["@B_android#graphics#Bitmap_E@", "Bitmap: The favicon for this page if it already exists in the database."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that a page has started loading. This method is called once for each main frame load so a page with iframes or framesets will call onPageStarted one time for the main frame. This also means that onPageStarted will not be called when the contents of an embedded frame changes, i.e. clicking a link whose target is an iframe, it will also not be called for fragment navigations (navigations to #fragment_id).", "history": "Added in API level 1", "FullName": "public void onPageStarted (WebView view, String url, Bitmap favicon)"}, "onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_android#os#Message_E@", "Message: The message to send if the host wants to cancel"], ["@B_android#os#Message_E@", "Message: The message to send if the host wants to continue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer called. When the WebView encounters a redirect loop, it will cancel the load. Notify the host application that there have been an excessive number of HTTP redirects. As the host application if it would like to continue trying to load the resource. The default behavior is to send the cancel message.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void onTooManyRedirects (WebView view, Message cancelMsg, Message continueMsg)"}, "WebViewClient()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public WebViewClient ()"}, "onRenderProcessGone(android.webkit.WebView,android.webkit.RenderProcessGoneDetail)": {"Returns": [["boolean", "true if the host application handled the situation that process has exited, otherwise, application will crash if render process crashed, or be killed if render process was killed by the system."]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView which needs to be cleaned up."], ["@B_android#webkit#RenderProcessGoneDetail_E@", "RenderProcessGoneDetail: the reason why it exited."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify host application that the given WebView's render process has exited. Multiple WebView instances may be associated with a single render process; onRenderProcessGone will be called for each WebView that was affected. The application's implementation of this callback should only attempt to clean up the specific WebView given as a parameter, and should not assume that other WebView instances are affected. The given WebView can't be used, and should be removed from the view hierarchy, all references to it should be cleaned up, e.g any references in the Activity or other classes saved using @B_android#view#View#findViewById_E@ and similar calls, etc. To cause an render process crash for test purpose, the application can call loadUrl(\"chrome://crash\") on the WebView. Note that multiple WebView instances may be affected if they share a render process, not just the specific WebView which loaded chrome://crash.", "history": "Added in API level 26", "FullName": "public boolean onRenderProcessGone (WebView view, RenderProcessGoneDetail detail)"}, "onLoadResource(android.webkit.WebView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: The WebView that is initiating the callback."], ["@B_java#lang#String_E@", "String: The url of the resource the WebView will load."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the host application that the WebView will load the resource specified by the given url.", "history": "Added in API level 1", "FullName": "public void onLoadResource (WebView view, String url)"}}, "Inheritance": [], "ClassName": "android.webkit.WebViewClient", "ClassDesc": ""}