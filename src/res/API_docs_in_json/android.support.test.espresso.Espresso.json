{"Functions": {"getIdlingResources()": {"Returns": [["@B_android#support#test#espresso#IdlingResource_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of all currently registered @B_android#support#test#espresso#IdlingResource_E@s.", "history": "", "FullName": "List<IdlingResource> getIdlingResources ()"}, "pressBack()": {"Returns": [], "Parameters": [], "Throws": [["@B_android#support#test#espresso#PerformException_E@", "if currently displayed activity is root activity, since pressing back button would result in application closing."]], "SeeAlso": [], "Permissions": [], "Description": "Press on the back button.", "history": "", "FullName": "void pressBack ()"}, "onView(org.hamcrest.Matcher<android.view.View>)": {"Returns": [["@B_android#support#test#espresso#ViewInteraction_E@", "no returns description in source"]], "Parameters": [["Matcher", "Matcher: used to select the view."]], "Throws": [], "SeeAlso": ["@B_android#support#test#espresso#Espresso#onData_E@"], "Permissions": [], "Description": "Creates a @B_android#support#test#espresso#ViewInteraction_E@ for a given view. Note: the view has to be part of the view hierarchy. This may not be the case if it is rendered as part of an AdapterView (e.g. ListView). If this is the case, use Espresso.onData to load the view first.", "history": "", "FullName": "ViewInteraction onView (Matcher<View> viewMatcher)"}, "openContextualActionModeOverflowMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens the overflow menu displayed in the contextual options of an ActionMode. This works with both native and SherlockActionBar action modes. Note the significant difference in UX between ActionMode and ActionBar overflows - ActionMode will always present an overflow icon and that icon only responds to clicks. The menu button (if present) has no impact on it.", "history": "", "FullName": "void openContextualActionModeOverflowMenu ()"}, "closeSoftKeyboard()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes soft keyboard if open.", "history": "", "FullName": "void closeSoftKeyboard ()"}, "registerLooperAsIdlingResource(android.os.Looper)": {"Returns": [], "Parameters": [["Looper", "Looper no parameter comment"]], "Throws": [["IllegalArgumentException", "if looper is the main looper."]], "SeeAlso": [], "Permissions": [], "Description": "Registers a Looper for idle checking with the framework. This is intended for use with non-UI thread loopers.", "history": "", "FullName": "void registerLooperAsIdlingResource (Looper looper)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.Espresso", "ClassDesc": "Entry point to the Espresso framework. Test authors can initiate testing by using one of the on* methods (e.g. onView) or perform top-level user actions (e.g. pressBack)."}