{"Functions": {"getFamily()": {"Returns": [["@B_java#lang#String_E@", "the font family name This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#style#TypefaceSpan#TypefaceSpan_E@"], "Permissions": [], "Description": "Returns the font family name set in the span.", "history": "Added in API level 1", "FullName": "public String getFamily ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written.This value must never be null."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "TypefaceSpan(android.graphics.Typeface)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: the typeface This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a @B_android#text#style#TypefaceSpan_E@ from a @B_android#graphics#Typeface_E@. The previous style of the TextPaint is overridden and the style of the typeface is used.", "history": "Added in API level 28", "FullName": "public TypefaceSpan (Typeface typeface)"}, "getSpanTypeId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a special type identifier for this span class.", "history": "Added in API level 3", "FullName": "public int getSpanTypeId ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: This value must never be null."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "updateDrawState(android.text.TextPaint)": {"Returns": [], "Parameters": [["@B_android#text#TextPaint_E@", "TextPaint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void updateDrawState (TextPaint ds)"}, "updateMeasureState(android.text.TextPaint)": {"Returns": [], "Parameters": [["@B_android#text#TextPaint_E@", "TextPaint: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Classes that extend MetricAffectingSpan implement this method to update the text formatting in a way that can change the width or height of characters.", "history": "Added in API level 1", "FullName": "public void updateMeasureState (TextPaint paint)"}, "TypefaceSpan(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The font family for this typeface. Examples include \"monospace\", \"serif\", and \"sans-serif\" This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a @B_android#text#style#TypefaceSpan_E@ based on the font family. The previous style of the TextPaint is kept. If the font family is null, the text paint is not modified.", "history": "Added in API level 1", "FullName": "public TypefaceSpan (String family)"}, "getTypeface()": {"Returns": [["@B_android#graphics#Typeface_E@", "the typeface set This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#style#TypefaceSpan#TypefaceSpan_E@"], "Permissions": [], "Description": "Returns the typeface set in the span.", "history": "Added in API level 28", "FullName": "public Typeface getTypeface ()"}, "TypefaceSpan(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a @B_android#text#style#TypefaceSpan_E@ from a parcel.", "history": "Added in API level 3", "FullName": "public TypefaceSpan (Parcel src)"}}, "Inheritance": ["@B_android#text#style#CharacterStyle_E@", "@B_android#text#style#MetricAffectingSpan_E@"], "ClassName": "android.text.style.TypefaceSpan", "ClassDesc": "Span that updates the typeface of the text it's attached to. The TypefaceSpan can be constructed either based on a font family or based on a Typeface. When @B_android#text#style#TypefaceSpan#TypefaceSpan_E@ is used, the previous style of the TextView is kept. When @B_android#text#style#TypefaceSpan#TypefaceSpan_E@ is used, the Typeface style replaces the TextView's style. For example, let's consider a TextView with android:textStyle=\"italic\" and a typeface created based on a font from resources, with a bold style. When applying a TypefaceSpan based the typeface, the text will only keep the bold style, overriding the TextView's textStyle. When applying a TypefaceSpan based on a font family: \"monospace\", the resulted text will keep the italic style."}