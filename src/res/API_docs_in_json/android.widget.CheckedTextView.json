{"Functions": {"toggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the checked state of the view to the inverse of its current state", "history": "Added in API level 1", "FullName": "public void toggle ()"}, "CheckedTextView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CheckedTextView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getCheckMarkTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the check mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkTintList_E@"], "Permissions": [], "Description": "Returns the tint applied to the check mark drawable, if specified.", "history": "Added in API level 21", "FullName": "public ColorStateList getCheckMarkTintList ()"}, "getCheckMarkTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the check mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the check mark drawable, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getCheckMarkTintBlendMode ()"}, "setCheckMarkTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#CheckedTextView#setCheckMarkTintList_E@ to the check mark drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setCheckMarkTintMode (PorterDuff.Mode tintMode)"}, "isChecked()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isChecked ()"}, "getCheckMarkTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the check mark drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the check mark drawable, if specified.", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getCheckMarkTintMode ()"}, "setCheckMarkDrawable(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of drawable to use as the check mark"]], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkDrawable_E@", "@B_android#widget#CheckedTextView#getCheckMarkDrawable_E@"], "Permissions": [], "Description": "Sets the check mark to the drawable with the specified resource ID. When this view is checked, the drawable's state set will include @B_android#R#attr#state_checked_E@.", "history": "Added in API level 1", "FullName": "public void setCheckMarkDrawable (int resId)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 1", "FullName": "protected int[] onCreateDrawableState (int extraSpace)"}, "setCheckMarkDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to use for the check mark This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkDrawable_E@", "@B_android#widget#CheckedTextView#getCheckMarkDrawable_E@"], "Permissions": [], "Description": "Set the check mark to the specified drawable. When this view is checked, the drawable's state set will include @B_android#R#attr#state_checked_E@.", "history": "Added in API level 1", "FullName": "public void setCheckMarkDrawable (Drawable d)"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true set the state to checked, false to uncheck"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the checked state of this view.", "history": "Added in API level 1", "FullName": "public void setChecked (boolean checked)"}, "onPaddingChanged(int)": {"Returns": [], "Parameters": [["int", "the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolve padding depending on the layout direction. Subclasses that care about padding resolution should override this method. The default implementation does nothing.", "history": "Since: API Level 16", "FullName": "public void onPaddingChanged (int layoutDirection)"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "CheckedTextView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public CheckedTextView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#CheckedTextView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "setPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "the left padding in pixels"], ["int", "the top padding in pixels"], ["int", "the right padding in pixels"], ["int", "the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingLeft_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingRight_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "Since: API Level 1", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "setVisibility(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the visibility state of this view.", "history": "Added in API level 1", "FullName": "public void setVisibility (int visibility)"}, "getCheckMarkDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The drawable use to represent the checkmark, if any."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkDrawable_E@"], "Permissions": [], "Description": "Gets the checkmark drawable", "history": "Added in API level 16", "FullName": "public Drawable getCheckMarkDrawable ()"}, "setPaddingRelative(int, int, int, int)": {"Returns": [], "Parameters": [["int", "the start padding in pixels"], ["int", "the top padding in pixels"], ["int", "the end padding in pixels"], ["int", "the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the relative padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. from the values set in this call.", "history": "Since: API Level 16", "FullName": "public void setPaddingRelative (int start, int top, int end, int bottom)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "setCheckMarkTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#getCheckMarkTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the check mark drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#CheckedTextView#setCheckMarkDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setCheckMarkTintList (ColorStateList tint)"}, "setCheckMarkTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CheckedTextView#setCheckMarkTintList_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#CheckedTextView#setCheckMarkTintList_E@ to the check mark drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setCheckMarkTintBlendMode (BlendMode tintMode)"}, "CheckedTextView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CheckedTextView (Context context, AttributeSet attrs)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "CheckedTextView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CheckedTextView (Context context)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@"], "ClassName": "android.widget.CheckedTextView", "ClassDesc": "An extension to @B_android#widget#TextView_E@ that supports the @B_android#widget#Checkable_E@ interface and displays. This is useful when used in a @B_android#widget#ListView_E@ where the @B_android#widget#AbsListView#setChoiceMode_E@ has been set to something other than @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@."}