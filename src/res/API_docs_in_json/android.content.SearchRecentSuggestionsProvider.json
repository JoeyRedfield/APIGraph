{"Functions": {"insert(android.net.Uri,android.content.ContentValues)": {"Returns": [["@B_android#net#Uri_E@", "The URI for the newly inserted item."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The content:// URI of the insertion request. This must not be null. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to add to the database. This must not be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public Uri insert (Uri uri, ContentValues values)"}, "SearchRecentSuggestionsProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public SearchRecentSuggestionsProvider ()"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "a MIME type string, or null if there is no type."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI to query. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public String getType (Uri uri)"}, "onCreate()": {"Returns": [["boolean", "true if the provider was successfully loaded, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public boolean onCreate ()"}, "setupSuggestions(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This must match the authority that you've declared in your manifest."], ["int", "int: You can use mode flags here to determine certain functional aspects of your database. Note, this value should not change from run to run, because when it does change, your suggestions database may be wiped."]], "Throws": [], "SeeAlso": ["@B_android#content#SearchRecentSuggestionsProvider_E@"], "Permissions": [], "Description": "In order to use this class, you must extend it, and call this setup function from your constructor. In your application or activities, you must provide the same values when you create the @B_android#provider#SearchRecentSuggestions_E@ helper.", "history": "added in API level 1", "FullName": "protected void setupSuggestions (String authority, int mode)"}, "setupSuggestions(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This must match the authority that you've declared in your manifest."], ["int", "int: You can use mode flags here to determine certain functional aspects of your database. Note, this value should not change from run to run, because when it does change, your suggestions database may be wiped."]], "Throws": [], "SeeAlso": ["@B_android#content#SearchRecentSuggestionsProvider_E@"], "Permissions": [], "Description": "In order to use this class, you must extend it, and call this setup function from your constructor. In your application or activities, you must provide the same values when you create the @B_android#provider#SearchRecentSuggestions_E@ helper.", "history": "Added in API level 1", "FullName": "protected void setupSuggestions (String authority, int mode)"}, "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This can potentially have a record ID if this is an update request for a specific record. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to update in the database. This must not be null. This value may be null."], ["@B_java#lang#String_E@", "String: An optional filter to match rows to update. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public int update (Uri uri, ContentValues values, String selection, String[] selectionArgs)"}, "delete(android.net.Uri,java.lang.String,java.lang.String[])": {"Returns": [["int", "The number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The full URI to query, including a row ID (if a specific record is requested). This value must never be null."], ["@B_java#lang#String_E@", "String: An optional restriction to apply to rows when deleting. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public int delete (Uri uri, String selection, String[] selectionArgs)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is provided for use by the ContentResolver. Do not override, or directly call from your own code.", "history": "Added in API level 1", "FullName": "public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)"}}, "Inheritance": ["@B_android#content#ContentProvider_E@"], "ClassName": "android.content.SearchRecentSuggestionsProvider", "ClassDesc": "This superclass can be used to create a simple search suggestions provider for your application. It creates suggestions (as the user types) based on recent queries and/or recent views. In order to use this class, you must do the following. Implement and test query search, as described in @B_android#app#SearchManager_E@. (This provider will send any suggested queries via the standard @B_android#content#Intent#ACTION_SEARCH_E@ Intent, which you'll already support once you have implemented and tested basic searchability.) Create a Content Provider within your application by extending @B_android#content#SearchRecentSuggestionsProvider_E@. The class you create will be very simple - typically, it will have only a constructor. But the constructor has a very important responsibility: When it calls @B_android#content#SearchRecentSuggestionsProvider#setupSuggestions_E@, it Create a manifest entry describing your provider. Typically this would be as simple as adding the following lines: Please note that you In order for the Content Resolver to do this, you must update your searchable activity's XML configuration file with information about your content provider. The following additions are usually sufficient: In your searchable activities, capture any user-generated queries and record them for future searches by calling @B_android#provider#SearchRecentSuggestions#saveRecentQuery_E@."}