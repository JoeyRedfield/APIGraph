{"Functions": {"PriorityQueue(java.util.PriorityQueue<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#PriorityQueue_E@", "PriorityQueue: the priority queue whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of c cannot be compared to one another according to c's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified priority queue or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue containing the elements in the specified priority queue. This priority queue will be ordered according to the same ordering as the given priority queue.", "history": "Added in API level 1", "FullName": "public PriorityQueue (PriorityQueue<? extends E> c)"}, "PriorityQueue(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this priority queue. If null, the natural ordering of the elements will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue with the default initial capacity and whose elements are ordered according to the specified comparator.", "history": "added in API level 24", "FullName": "public PriorityQueue (Comparator<? super E> comparator)"}, "poll()": {"Returns": [["E", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public E poll ()"}, "PriorityQueue(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of the specified collection cannot be compared to one another according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue containing the elements in the specified collection. If the specified collection is an instance of a @B_java#util#SortedSet_E@ or is another PriorityQueue, this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the", "history": "Added in API level 1", "FullName": "public PriorityQueue (Collection<? extends E> c)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E no parameter comment"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in this priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If the queue fits in the specified array with room to spare (i.e., the array has more elements than the queue), the element in the array immediately following the end of the collection is set to null. Like the @B_java#util#PriorityQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "PriorityQueue(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of the specified collection cannot be compared to one another according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue containing the elements in the specified collection. If the specified collection is an instance of a @B_java#util#SortedSet_E@ or is another PriorityQueue, this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the", "history": "added in API level 1", "FullName": "public PriorityQueue (Collection<? extends E> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this priority queue. The queue will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in this priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this queue. The iterator does not return the elements in any particular order.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "PriorityQueue(java.util.SortedSet<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: the sorted set whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of the specified sorted set cannot be compared to one another according to the sorted set's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified sorted set or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue containing the elements in the specified sorted set. This priority queue will be ordered according to the same ordering as the given sorted set.", "history": "added in API level 1", "FullName": "public PriorityQueue (SortedSet<? extends E> c)"}, "PriorityQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue with the default initial capacity (11) that orders its elements according to their", "history": "Added in API level 1", "FullName": "public PriorityQueue ()"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "Added in API level 1", "FullName": "public int size ()"}, "PriorityQueue(int,java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["int", "int: the initial capacity for this priority queue"], ["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this priority queue. If null, the Comparable of the elements will be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if initialCapacity is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator.", "history": "Added in API level 1", "FullName": "public PriorityQueue (int initialCapacity, Comparator<? super E> comparator)"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order this queue, or null if this queue is sorted according to the natural ordering of its elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the", "history": "Added in API level 1", "FullName": "public Comparator<? super E> comparator ()"}, "PriorityQueue(java.util.SortedSet<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: the sorted set whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of the specified sorted set cannot be compared to one another according to the sorted set's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified sorted set or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue containing the elements in the specified sorted set. This priority queue will be ordered according to the same ordering as the given sorted set.", "history": "Added in API level 1", "FullName": "public PriorityQueue (SortedSet<? extends E> c)"}, "peek()": {"Returns": [["E", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue. The elements are in no particular order. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "PriorityQueue(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this priority queue. If null, the Comparable of the elements will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue with the default initial capacity and whose elements are ordered according to the specified comparator.", "history": "Added in API level 24", "FullName": "public PriorityQueue (Comparator<? super E> comparator)"}, "PriorityQueue(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity for this priority queue"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if initialCapacity is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityQueue with the specified initial capacity that orders its elements according to their", "history": "Added in API level 1", "FullName": "public PriorityQueue (int initialCapacity)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this queue. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, and @B_java#util#Spliterator#NONNULL_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public final Spliterator<E> spliterator ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.PriorityQueue<E>", "ClassDesc": "An unbounded priority @B_java#util#Comparator_E@ provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements. A priority queue relying on natural ordering also does not permit insertion of non-comparable objects (doing so may result in ClassCastException). The head of this queue is the least element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements -- ties are broken arbitrarily. The queue retrieval operations poll, remove, peek, and element access the element at the head of the queue. A priority queue is unbounded, but has an internal This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces. The Iterator provided in method @B_java#util#PriorityQueue#iterator_E@ is not guaranteed to traverse the elements of the priority queue in any particular order. If you need ordered traversal, consider using Arrays.sort(pq.toArray()). PriorityQueue instance concurrently if any of the threads modifies the queue. Instead, use the thread-safe @B_java#util#concurrent#PriorityBlockingQueue_E@ class. Implementation note: this implementation provides O(log(n)) time for the enqueuing and dequeuing methods (offer, poll, remove() and add); linear time for the remove(Object) and contains(Object) methods; and constant time for the retrieval methods (peek, element, and size). This class is a member of the"}