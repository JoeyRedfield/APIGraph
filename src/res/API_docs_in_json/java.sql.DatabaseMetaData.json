{"Functions": {"supportsConvert(int,int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: the type to convert from; one of the type codes from the class java.sql.Types"], ["int", "int: the type to convert to; one of the type codes from the class java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the JDBC scalar function CONVERT for conversions between the JDBC types java.sql.Types.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsConvert (int fromType, int toType)"}, "locatorsUpdateCopy()": {"Returns": [["boolean", "true if updates are made to a copy of the LOB; false if updates are made directly to the LOB"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether updates made to a LOB are made on a copy or directly to the LOB.", "history": "Added in API level 1", "FullName": "public abstract boolean locatorsUpdateCopy ()"}, "othersInsertsAreVisible(int)": {"Returns": [["boolean", "true if inserts made by others are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether inserts made by others are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean othersInsertsAreVisible (int type)"}, "getCatalogs()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row has a single String column that is a catalog name"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the catalog names available in this database. The results are ordered by catalog name. The catalog column is:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getCatalogs ()"}, "nullsAreSortedAtStart()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether NULL values are sorted at the start regardless of sort order.", "history": "Added in API level 1", "FullName": "public abstract boolean nullsAreSortedAtStart ()"}, "getURL()": {"Returns": [["@B_java#lang#String_E@", "the URL for this DBMS or null if it cannot be generated"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the URL for this DBMS.", "history": "Added in API level 1", "FullName": "public abstract String getURL ()"}, "getMaxStatements()": {"Returns": [["int", "the maximum number of statements that can be open at one time; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of active statements to this database that can be open at the same time.", "history": "Added in API level 1", "FullName": "public abstract int getMaxStatements ()"}, "getSystemFunctions()": {"Returns": [["@B_java#lang#String_E@", "a list of system functions supported by this database"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a comma-separated list of system functions available with this database. These are the Open Group CLI system function names used in the JDBC function escape clause.", "history": "Added in API level 1", "FullName": "public abstract String getSystemFunctions ()"}, "getDriverMajorVersion()": {"Returns": [["int", "JDBC driver major version"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this JDBC driver's major version number.", "history": "Added in API level 1", "FullName": "public abstract int getDriverMajorVersion ()"}, "supportsMixedCaseIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as case sensitive and as a result stores them in mixed case.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMixedCaseIdentifiers ()"}, "supportsOuterJoins()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports some form of outer join.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOuterJoins ()"}, "supportsExpressionsInOrderBy()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports expressions in ORDER BY lists.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsExpressionsInOrderBy ()"}, "getSuperTables(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a type description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; \"\" retrieves those without a catalog; null means drop catalog name from the selection criteria"], ["@B_java#lang#String_E@", "String: a schema name pattern; \"\" retrieves those without a schema"], ["@B_java#lang#String_E@", "String: a table name pattern; may be a fully-qualified name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the table hierarchies defined in a particular schema in this database. Only supertable information for tables matching the catalog, schema and table name are returned. The table name parameter may be a fully- qualified name, in which case, the catalog and schemaPattern parameters are ignored. If a table does not have a super table, it is not listed here. Supertables have to be defined in the same catalog and schema as the sub tables. Therefore, the type description does not need to include this information for the supertable. Each type description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getSuperTables (String catalog, String schemaPattern, String tableNamePattern)"}, "getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is an index column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in this database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in this database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in this database"], ["boolean", "boolean: when true, return only indices for unique values; when false, return indices regardless of whether unique or not"], ["boolean", "boolean: when true, result is allowed to reflect approximate or out of data values; when false, results are requested to be accurate"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a description of the given table's indices and statistics. They are ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION. Each index column description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getIndexInfo (String catalog, String schema, String table, boolean unique, boolean approximate)"}, "supportsANSI92IntermediateSQL()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsANSI92IntermediateSQL ()"}, "usesLocalFiles()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database stores tables in a local file.", "history": "Added in API level 1", "FullName": "public abstract boolean usesLocalFiles ()"}, "getMaxColumnsInIndex()": {"Returns": [["int", "the maximum number of columns allowed; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of columns this database allows in an index.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnsInIndex ()"}, "getSQLStateType()": {"Returns": [["int", "the type of SQLSTATE; one of: sqlStateXOpen or sqlStateSQL"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the SQLSTATE returned by SQLException.getSQLState is X/Open (now known as Open Group) SQL CLI or SQL:2003.", "history": "Added in API level 1", "FullName": "public abstract int getSQLStateType ()"}, "supportsCatalogsInTableDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog name can be used in a table definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCatalogsInTableDefinitions ()"}, "getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a foreign key column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means drop catalog name from the selection criteria"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means drop schema name from the selection criteria"], ["@B_java#lang#String_E@", "String: the name of the table that exports the key; must match the table name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means drop catalog name from the selection criteria"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means drop schema name from the selection criteria"], ["@B_java#lang#String_E@", "String: the name of the table that imports the key; must match the table name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getImportedKeys_E@"], "Permissions": [], "Description": "Retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the parent table (could be the same or a different table). The number of columns returned from the parent table must match the number of columns that make up the foreign key. They are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ. Each foreign key column description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getCrossReference (String parentCatalog, String parentSchema, String parentTable, String foreignCatalog, String foreignSchema, String foreignTable)"}, "getDatabaseMinorVersion()": {"Returns": [["int", "underlying database's minor version"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the minor version number of the underlying database.", "history": "Added in API level 1", "FullName": "public abstract int getDatabaseMinorVersion ()"}, "supportsExtendedSQLGrammar()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ODBC Extended SQL grammar.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsExtendedSQLGrammar ()"}, "othersUpdatesAreVisible(int)": {"Returns": [["boolean", "true if updates made by others are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether updates made by others are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean othersUpdatesAreVisible (int type)"}, "supportsCoreSQLGrammar()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ODBC Core SQL grammar.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCoreSQLGrammar ()"}, "supportsMultipleResultSets()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports getting multiple ResultSet objects from a single call to the method execute.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMultipleResultSets ()"}, "getMaxCatalogNameLength()": {"Returns": [["int", "the maximum number of characters allowed in a catalog name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters that this database allows in a catalog name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxCatalogNameLength ()"}, "storesUpperCaseIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in upper case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesUpperCaseIdentifiers ()"}, "supportsOpenCursorsAcrossCommit()": {"Returns": [["boolean", "true if cursors always remain open; false if they might not remain open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports keeping cursors open across commits.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOpenCursorsAcrossCommit ()"}, "nullPlusNonNullIsNull()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports concatenations between NULL and non-NULL values being NULL.", "history": "Added in API level 1", "FullName": "public abstract boolean nullPlusNonNullIsNull ()"}, "getProcedures(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a procedure description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a procedure name pattern; must match the procedure name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the stored procedures available in the given catalog. Only procedure descriptions matching the schema and procedure name criteria are returned. They are ordered by PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_ NAME. Each procedure description has the the following columns: A user may not have permissions to execute any of the procedures that are returned by getProcedures", "history": "Added in API level 1", "FullName": "public abstract ResultSet getProcedures (String catalog, String schemaPattern, String procedureNamePattern)"}, "supportsSubqueriesInComparisons()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports subqueries in comparison expressions.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSubqueriesInComparisons ()"}, "getMaxColumnsInTable()": {"Returns": [["int", "the maximum number of columns allowed; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of columns this database allows in a table.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnsInTable ()"}, "getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row describes a user function parameter, column or return type"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a procedure name pattern; must match the function name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a parameter name pattern; must match the parameter or column name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the given catalog's system or user function parameters and return type. Only descriptions matching the schema, function and parameter name criteria are returned. They are ordered by FUNCTION_CAT, FUNCTION_SCHEM, FUNCTION_NAME and SPECIFIC_ NAME. Within this, the return value, if any, is first. Next are the parameter descriptions in call order. The column descriptions follow in column number order. Each row in the ResultSet is a parameter description, column description or return type description with the following fields: The PRECISION column represents the specified column size for the given parameter or column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 9", "FullName": "public abstract ResultSet getFunctionColumns (String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern)"}, "getUserName()": {"Returns": [["@B_java#lang#String_E@", "the database user name"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the user name as known to this database.", "history": "Added in API level 1", "FullName": "public abstract String getUserName ()"}, "supportsDataDefinitionAndDataManipulationTransactions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports both data definition and data manipulation statements within a transaction.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsDataDefinitionAndDataManipulationTransactions ()"}, "getIdentifierQuoteString()": {"Returns": [["@B_java#lang#String_E@", "the quoting string or a space if quoting is not supported"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the string used to quote SQL identifiers. This method returns a space \" \" if identifier quoting is not supported.", "history": "Added in API level 1", "FullName": "public abstract String getIdentifierQuoteString ()"}, "supportsGroupBy()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports some form of GROUP BY clause.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsGroupBy ()"}, "supportsOrderByUnrelated()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports using a column that is not in the SELECT statement in an ORDER BY clause.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOrderByUnrelated ()"}, "getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a table privilege description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name pattern; must match the table name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the access rights for each table available in a catalog. Note that a table privilege applies to one or more columns in the table. It would be wrong to assume that this privilege applies to all columns (this may be true for some systems but is not true for all.) Only privileges matching the schema and table name criteria are returned. They are ordered by TABLE_CAT, TABLE_SCHEM, TABLE_NAME, and PRIVILEGE. Each privilige description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getTablePrivileges (String catalog, String schemaPattern, String tableNamePattern)"}, "supportsCatalogsInProcedureCalls()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog name can be used in a procedure call statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCatalogsInProcedureCalls ()"}, "supportsSchemasInProcedureCalls()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a schema name can be used in a procedure call statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSchemasInProcedureCalls ()"}, "getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row describes a stored procedure parameter or column"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a procedure name pattern; must match the procedure name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a column name pattern; must match the column name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the given catalog's stored procedure parameter and result columns. Only descriptions matching the schema, procedure and parameter name criteria are returned. They are ordered by PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value, if any, is first. Next are the parameter descriptions in call order. The column descriptions follow in column number order. Each row in the ResultSet is a parameter description or column description with the following fields: The PRECISION column represents the specified column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getProcedureColumns (String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern)"}, "supportsMixedCaseQuotedIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case quoted SQL identifiers as case sensitive and as a result stores them in mixed case.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMixedCaseQuotedIdentifiers ()"}, "supportsResultSetConcurrency(int,int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: defined in java.sql.ResultSet"], ["int", "int: type defined in java.sql.ResultSet"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the given concurrency type in combination with the given result set type.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsResultSetConcurrency (int type, int concurrency)"}, "getSuperTypes(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which a row gives information about the designated UDT"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; \"\" retrieves those without a catalog; null means drop catalog name from the selection criteria"], ["@B_java#lang#String_E@", "String: a schema name pattern; \"\" retrieves those without a schema"], ["@B_java#lang#String_E@", "String: a UDT name pattern; may be a fully-qualified name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the user-defined type (UDT) hierarchies defined in a particular schema in this database. Only the immediate super type/ sub type relationship is modeled. Only supertype information for UDTs matching the catalog, schema, and type name is returned. The type name parameter may be a fully-qualified name. When the UDT name supplied is a fully-qualified name, the catalog and schemaPattern parameters are ignored. If a UDT does not have a direct super type, it is not listed here. A row of the ResultSet object returned by this method describes the designated UDT and a direct supertype. A row has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getSuperTypes (String catalog, String schemaPattern, String typeNamePattern)"}, "getJDBCMinorVersion()": {"Returns": [["int", "JDBC version minor number"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the minor JDBC version number for this driver.", "history": "Added in API level 1", "FullName": "public abstract int getJDBCMinorVersion ()"}, "supportsAlterTableWithDropColumn()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports ALTER TABLE with drop column.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsAlterTableWithDropColumn ()"}, "getMaxConnections()": {"Returns": [["int", "the maximum number of active connections possible at one time; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of concurrent connections to this database that are possible.", "history": "Added in API level 1", "FullName": "public abstract int getMaxConnections ()"}, "nullsAreSortedLow()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether NULL values are sorted low. Sorted low means that NULL values sort lower than any other value in a domain. In an ascending order, if this method returns true, NULL values will appear at the beginning. By contrast, the method nullsAreSortedAtStart indicates whether NULL values are sorted at the beginning regardless of sort order.", "history": "Added in API level 1", "FullName": "public abstract boolean nullsAreSortedLow ()"}, "supportsTransactions()": {"Returns": [["boolean", "true if transactions are supported; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports transactions. If not, invoking the method commit is a noop, and the isolation level is TRANSACTION_NONE.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsTransactions ()"}, "getFunctions(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a function description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a function name pattern; must match the function name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the system and user functions available in the given catalog. Only system and user function descriptions matching the schema and function name criteria are returned. They are ordered by FUNCTION_CAT, FUNCTION_SCHEM, FUNCTION_NAME and SPECIFIC_ NAME. Each function description has the the following columns: A user may not have permission to execute any of the functions that are returned by getFunctions", "history": "Added in API level 9", "FullName": "public abstract ResultSet getFunctions (String catalog, String schemaPattern, String functionNamePattern)"}, "allProceduresAreCallable()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the current user can call all the procedures returned by the method getProcedures.", "history": "Added in API level 1", "FullName": "public abstract boolean allProceduresAreCallable ()"}, "getRowIdLifetime()": {"Returns": [["@B_java#sql#RowIdLifetime_E@", "the status indicating the lifetime of a RowId"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this data source supports the SQL ROWID type, and if so the lifetime for which a RowId object remains valid. The returned int values have the following relationship:", "history": "Added in API level 9", "FullName": "public abstract RowIdLifetime getRowIdLifetime ()"}, "nullsAreSortedHigh()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether NULL values are sorted high. Sorted high means that NULL values sort higher than any other value in a domain. In an ascending order, if this method returns true, NULL values will appear at the end. By contrast, the method nullsAreSortedAtEnd indicates whether NULL values are sorted at the end regardless of sort order.", "history": "Added in API level 1", "FullName": "public abstract boolean nullsAreSortedHigh ()"}, "dataDefinitionIgnoredInTransactions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database ignores a data definition statement within a transaction.", "history": "Added in API level 1", "FullName": "public abstract boolean dataDefinitionIgnoredInTransactions ()"}, "getSearchStringEscape()": {"Returns": [["@B_java#lang#String_E@", "the string used to escape wildcard characters"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the string that can be used to escape wildcard characters. This is the string that can be used to escape '_' or '%' in the catalog search parameters that are a pattern (and therefore use one of the wildcard characters). The '_' character represents any single character; the '%' character represents any sequence of zero or more characters.", "history": "Added in API level 1", "FullName": "public abstract String getSearchStringEscape ()"}, "supportsNamedParameters()": {"Returns": [["boolean", "true if named parameters are supported; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports named parameters to callable statements.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsNamedParameters ()"}, "getJDBCMajorVersion()": {"Returns": [["int", "JDBC version major number"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the major JDBC version number for this driver.", "history": "Added in API level 1", "FullName": "public abstract int getJDBCMajorVersion ()"}, "getClientInfoProperties()": {"Returns": [["@B_java#sql#ResultSet_E@", "A ResultSet object; each row is a supported client info property"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a list of the client info properties that the driver supports. The result set contains the following columns The ResultSet is sorted by the NAME column", "history": "Added in API level 9", "FullName": "public abstract ResultSet getClientInfoProperties ()"}, "getResultSetHoldability()": {"Returns": [["int", "the default holdability; either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this database's default holdability for ResultSet objects.", "history": "Added in API level 1", "FullName": "public abstract int getResultSetHoldability ()"}, "getMaxTablesInSelect()": {"Returns": [["int", "the maximum number of tables allowed in a SELECT statement; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of tables this database allows in a SELECT statement.", "history": "Added in API level 1", "FullName": "public abstract int getMaxTablesInSelect ()"}, "getDriverName()": {"Returns": [["@B_java#lang#String_E@", "JDBC driver name"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of this JDBC driver.", "history": "Added in API level 1", "FullName": "public abstract String getDriverName ()"}, "getExportedKeys(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a foreign key column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in this database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in this database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getImportedKeys_E@"], "Permissions": [], "Description": "Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table). They are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ. Each foreign key column description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getExportedKeys (String catalog, String schema, String table)"}, "supportsSavepoints()": {"Returns": [["boolean", "true if savepoints are supported; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports savepoints.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSavepoints ()"}, "getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a table description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name pattern; must match the table name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a list of table types, which must be from the list of table types returned from @B_java#sql#DatabaseMetaData#getTableTypes_E@,to include; null returns all types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the tables available in the given catalog. Only table descriptions matching the catalog, schema, table name and type criteria are returned. They are ordered by TABLE_TYPE, TABLE_CAT, TABLE_SCHEM and TABLE_NAME. Each table description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getTables (String catalog, String schemaPattern, String tableNamePattern, String[] types)"}, "supportsSubqueriesInExists()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports subqueries in EXISTS expressions.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSubqueriesInExists ()"}, "doesMaxRowSizeIncludeBlobs()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the return value for the method getMaxRowSize includes the SQL data types LONGVARCHAR and LONGVARBINARY.", "history": "Added in API level 1", "FullName": "public abstract boolean doesMaxRowSizeIncludeBlobs ()"}, "supportsMinimumSQLGrammar()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ODBC Minimum SQL grammar.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMinimumSQLGrammar ()"}, "supportsOpenStatementsAcrossCommit()": {"Returns": [["boolean", "true if statements always remain open; false if they might not remain open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports keeping statements open across commits.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOpenStatementsAcrossCommit ()"}, "getMaxBinaryLiteralLength()": {"Returns": [["int", "max the maximum length (in hex characters) for a binary literal; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of hex characters this database allows in an inline binary literal.", "history": "Added in API level 1", "FullName": "public abstract int getMaxBinaryLiteralLength ()"}, "getProcedureTerm()": {"Returns": [["@B_java#lang#String_E@", "the vendor term for \"procedure\""]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the database vendor's preferred term for \"procedure\".", "history": "Added in API level 1", "FullName": "public abstract String getProcedureTerm ()"}, "supportsConvert(int, int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: the type to convert from; one of the type codes from the class java.sql.Types"], ["int", "int: the type to convert to; one of the type codes from the class java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the JDBC scalar function CONVERT for conversions between the JDBC types java.sql.Types.", "history": "added in API level 1", "FullName": "public abstract boolean supportsConvert (int fromType, int toType)"}, "supportsResultSetConcurrency(int, int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: defined in java.sql.ResultSet"], ["int", "int: type defined in java.sql.ResultSet"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the given concurrency type in combination with the given result set type.", "history": "added in API level 1", "FullName": "public abstract boolean supportsResultSetConcurrency (int type, int concurrency)"}, "getMaxProcedureNameLength()": {"Returns": [["int", "the maximum number of characters allowed in a procedure name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters that this database allows in a procedure name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxProcedureNameLength ()"}, "getMaxCursorNameLength()": {"Returns": [["int", "the maximum number of characters allowed in a cursor name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters that this database allows in a cursor name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxCursorNameLength ()"}, "getExtraNameCharacters()": {"Returns": [["@B_java#lang#String_E@", "the string containing the extra characters"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves all the \"extra\" characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _).", "history": "Added in API level 1", "FullName": "public abstract String getExtraNameCharacters ()"}, "supportsTransactionIsolationLevel(int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: one of the transaction isolation levels defined in java.sql.Connection"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the given transaction isolation level.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsTransactionIsolationLevel (int level)"}, "storesMixedCaseQuotedIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in mixed case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesMixedCaseQuotedIdentifiers ()"}, "supportsStatementPooling()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports statement pooling.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsStatementPooling ()"}, "insertsAreDetected(int)": {"Returns": [["boolean", "true if changes are detected by the specified result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether or not a visible row insert can be detected by calling the method ResultSet.rowInserted.", "history": "Added in API level 1", "FullName": "public abstract boolean insertsAreDetected (int type)"}, "getSchemas(java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a schema description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database;\"\" retrieves those without a catalog; null means catalog name should not be used to narrow down the search."], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; null means schema name should not be used to narrow down the search."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves the schema names available in this database. The results are ordered by TABLE_CATALOG and TABLE_SCHEM. The schema columns are:", "history": "Added in API level 9", "FullName": "public abstract ResultSet getSchemas (String catalog, String schemaPattern)"}, "supportsAlterTableWithAddColumn()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports ALTER TABLE with add column.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsAlterTableWithAddColumn ()"}, "isReadOnly()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database is in read-only mode.", "history": "Added in API level 1", "FullName": "public abstract boolean isReadOnly ()"}, "supportsSchemasInTableDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a schema name can be used in a table definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSchemasInTableDefinitions ()"}, "supportsGetGeneratedKeys()": {"Returns": [["boolean", "true if auto-generated keys can be retrieved after a statement has executed; false otherwise If true is returned, the JDBC driver must support the returning of auto-generated keys for at least SQL INSERT statements"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether auto-generated keys can be retrieved after a statement has been executed", "history": "Added in API level 1", "FullName": "public abstract boolean supportsGetGeneratedKeys ()"}, "getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet object in which each row describes a UDT"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema pattern name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a type name pattern; must match the type name as it is stored in the database; may be a fully qualified name"], ["int[]", "int: a list of user-defined types (JAVA_OBJECT, STRUCT, or DISTINCT) to include; null returns all types"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the user-defined types (UDTs) defined in a particular schema. Schema-specific UDTs may have type JAVA_OBJECT, STRUCT, or DISTINCT. Only types matching the catalog, schema, type name and type criteria are returned. They are ordered by DATA_TYPE, TYPE_CAT, TYPE_SCHEM and TYPE_NAME. The type name parameter may be a fully-qualified name. In this case, the catalog and schemaPattern parameters are ignored. Each type description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getUDTs (String catalog, String schemaPattern, String typeNamePattern, int[] types)"}, "supportsCatalogsInPrivilegeDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog name can be used in a privilege definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCatalogsInPrivilegeDefinitions ()"}, "supportsResultSetType(int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: defined in java.sql.ResultSet"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the given result set type.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsResultSetType (int type)"}, "supportsSchemasInPrivilegeDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a schema name can be used in a privilege definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSchemasInPrivilegeDefinitions ()"}, "supportsLimitedOuterJoins()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database provides limited support for outer joins. (This will be true if the method supportsFullOuterJoins returns true).", "history": "Added in API level 1", "FullName": "public abstract boolean supportsLimitedOuterJoins ()"}, "supportsOpenStatementsAcrossRollback()": {"Returns": [["boolean", "true if statements always remain open; false if they might not remain open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports keeping statements open across rollbacks.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOpenStatementsAcrossRollback ()"}, "getMaxStatementLength()": {"Returns": [["int", "the maximum number of characters allowed for an SQL statement; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters this database allows in an SQL statement.", "history": "Added in API level 1", "FullName": "public abstract int getMaxStatementLength ()"}, "getTypeInfo()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is an SQL type description"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a description of all the data types supported by this database. They are ordered by DATA_TYPE and then by how closely the data type maps to the corresponding JDBC SQL type. If the database supports SQL distinct types, then getTypeInfo() will return a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT. If the database supports SQL structured types, then getTypeInfo() will return a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT. If SQL distinct or structured types are supported, then information on the individual types may be obtained from the getUDTs() method. Each type description has the following columns: The PRECISION column represents the maximum column size that the server supports for the given datatype. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getTypeInfo ()"}, "supportsConvert()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the JDBC scalar function CONVERT for the conversion of one JDBC type to another. The JDBC types are the generic SQL data types defined in java.sql.Types.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsConvert ()"}, "getMaxColumnsInSelect()": {"Returns": [["int", "the maximum number of columns allowed; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of columns this database allows in a SELECT list.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnsInSelect ()"}, "supportsCorrelatedSubqueries()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports correlated subqueries.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCorrelatedSubqueries ()"}, "supportsNonNullableColumns()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether columns in this database may be defined as non-nullable.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsNonNullableColumns ()"}, "getStringFunctions()": {"Returns": [["@B_java#lang#String_E@", "the list of string functions supported by this database"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a comma-separated list of string functions available with this database. These are the Open Group CLI string function names used in the JDBC function escape clause.", "history": "Added in API level 1", "FullName": "public abstract String getStringFunctions ()"}, "ownInsertsAreVisible(int)": {"Returns": [["boolean", "true if inserts are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a result set's own inserts are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean ownInsertsAreVisible (int type)"}, "getMaxCharLiteralLength()": {"Returns": [["int", "the maximum number of characters allowed for a character literal; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters this database allows for a character literal.", "history": "Added in API level 1", "FullName": "public abstract int getMaxCharLiteralLength ()"}, "autoCommitFailureClosesAllResultSets()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a SQLException while autoCommit is true inidcates that all open ResultSets are closed, even ones that are holdable. When a SQLException occurs while autocommit is true, it is vendor specific whether the JDBC driver responds with a commit operation, a rollback operation, or by doing neither a commit nor a rollback. A potential result of this difference is in whether or not holdable ResultSets are closed.", "history": "Added in API level 9", "FullName": "public abstract boolean autoCommitFailureClosesAllResultSets ()"}, "storesUpperCaseQuotedIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in upper case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesUpperCaseQuotedIdentifiers ()"}, "supportsMultipleOpenResults()": {"Returns": [["boolean", "true if a CallableStatement object can return multiple ResultSet objects simultaneously; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a datanase access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether it is possible to have multiple ResultSet objects returned from a CallableStatement object simultaneously.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMultipleOpenResults ()"}, "supportsIntegrityEnhancementFacility()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the SQL Integrity Enhancement Facility.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsIntegrityEnhancementFacility ()"}, "getDatabaseProductName()": {"Returns": [["@B_java#lang#String_E@", "database product name"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of this database product.", "history": "Added in API level 1", "FullName": "public abstract String getDatabaseProductName ()"}, "usesLocalFilePerTable()": {"Returns": [["boolean", "true if this database uses a local file for each table; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database uses a file for each table.", "history": "Added in API level 1", "FullName": "public abstract boolean usesLocalFilePerTable ()"}, "allTablesAreSelectable()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the current user can use all the tables returned by the method getTables in a SELECT statement.", "history": "Added in API level 1", "FullName": "public abstract boolean allTablesAreSelectable ()"}, "supportsFullOuterJoins()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports full nested outer joins.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsFullOuterJoins ()"}, "supportsResultSetHoldability(int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: one of the following constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves whether this database supports the given result set holdability.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsResultSetHoldability (int holdability)"}, "getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is an attribute description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a type name pattern; must match the type name as it is stored in the database"], ["@B_java#lang#String_E@", "String: an attribute name pattern; must match the attribute name as it is declared in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the given attribute of the given type for a user-defined type (UDT) that is available in the given schema and catalog. Descriptions are returned only for attributes of UDTs matching the catalog, schema, type, and attribute name criteria. They are ordered by TYPE_CAT, TYPE_SCHEM, TYPE_NAME and ORDINAL_POSITION. This description does not contain inherited attributes. The ResultSet object that is returned has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getAttributes (String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern)"}, "getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in the database"], ["int", "int: the scope of interest; use same values as SCOPE"], ["boolean", "boolean: include columns that are nullable."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a description of a table's optimal set of columns that uniquely identifies a row. They are ordered by SCOPE. Each column description has the following columns: The COLUMN_SIZE column represents the specified column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getBestRowIdentifier (String catalog, String schema, String table, int scope, boolean nullable)"}, "getMaxIndexLength()": {"Returns": [["int", "the maximum number of bytes allowed; this limit includes the composite of all the constituent parts of the index; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of bytes this database allows for an index, including all of the parts of the index.", "history": "Added in API level 1", "FullName": "public abstract int getMaxIndexLength ()"}, "getMaxRowSize()": {"Returns": [["int", "the maximum number of bytes allowed for a row; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of bytes this database allows in a single row.", "history": "Added in API level 1", "FullName": "public abstract int getMaxRowSize ()"}, "supportsCatalogsInDataManipulation()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog name can be used in a data manipulation statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCatalogsInDataManipulation ()"}, "supportsStoredFunctionsUsingCallSyntax()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports invoking user-defined or vendor functions using the stored procedure escape syntax.", "history": "Added in API level 9", "FullName": "public abstract boolean supportsStoredFunctionsUsingCallSyntax ()"}, "supportsSubqueriesInQuantifieds()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports subqueries in quantified expressions.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSubqueriesInQuantifieds ()"}, "getSchemaTerm()": {"Returns": [["@B_java#lang#String_E@", "the vendor term for \"schema\""]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the database vendor's preferred term for \"schema\".", "history": "Added in API level 1", "FullName": "public abstract String getSchemaTerm ()"}, "supportsDataManipulationTransactionsOnly()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports only data manipulation statements within a transaction.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsDataManipulationTransactionsOnly ()"}, "getSchemas()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a schema description"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the schema names available in this database. The results are ordered by TABLE_CATALOG and TABLE_SCHEM. The schema columns are:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getSchemas ()"}, "supportsCatalogsInIndexDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog name can be used in an index definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsCatalogsInIndexDefinitions ()"}, "getMaxSchemaNameLength()": {"Returns": [["int", "the maximum number of characters allowed in a schema name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters that this database allows in a schema name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxSchemaNameLength ()"}, "supportsUnion()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports SQL UNION.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsUnion ()"}, "supportsANSI92EntryLevelSQL()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ANSI92 entry level SQL grammar.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsANSI92EntryLevelSQL ()"}, "getMaxColumnNameLength()": {"Returns": [["int", "the maximum number of characters allowed for a column name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters this database allows for a column name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnNameLength ()"}, "supportsPositionedUpdate()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports positioned UPDATE statements.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsPositionedUpdate ()"}, "getImportedKeys(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a primary key column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getExportedKeys_E@"], "Permissions": [], "Description": "Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table). They are ordered by PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ. Each primary key column description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getImportedKeys (String catalog, String schema, String table)"}, "supportsANSI92FullSQL()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports the ANSI92 full SQL grammar supported.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsANSI92FullSQL ()"}, "supportsBatchUpdates()": {"Returns": [["boolean", "true if this database supports batch upcates; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports batch updates.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsBatchUpdates ()"}, "getDatabaseProductVersion()": {"Returns": [["@B_java#lang#String_E@", "database version number"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the version number of this database product.", "history": "Added in API level 1", "FullName": "public abstract String getDatabaseProductVersion ()"}, "supportsMultipleTransactions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database allows having multiple transactions open at once (on different connections).", "history": "Added in API level 1", "FullName": "public abstract boolean supportsMultipleTransactions ()"}, "getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name pattern; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name pattern; must match the table name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a column name pattern; must match the column name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of table columns available in the specified catalog. Only column descriptions matching the catalog, schema, table and column name criteria are returned. They are ordered by TABLE_CAT,TABLE_SCHEM, TABLE_NAME, and ORDINAL_POSITION. Each column description has the following columns: The COLUMN_SIZE column specifies the column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getColumns (String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern)"}, "supportsOpenCursorsAcrossRollback()": {"Returns": [["boolean", "true if cursors always remain open; false if they might not remain open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports keeping cursors open across rollbacks.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsOpenCursorsAcrossRollback ()"}, "getSQLKeywords()": {"Returns": [["@B_java#lang#String_E@", "the list of this database's keywords that are not also SQL:2003 keywords"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a comma-separated list of all of this database's SQL keywords that are NOT also SQL:2003 keywords.", "history": "Added in API level 1", "FullName": "public abstract String getSQLKeywords ()"}, "getCatalogSeparator()": {"Returns": [["@B_java#lang#String_E@", "the separator string"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the String that this database uses as the separator between a catalog and table name.", "history": "Added in API level 1", "FullName": "public abstract String getCatalogSeparator ()"}, "getMaxUserNameLength()": {"Returns": [["int", "the maximum number of characters allowed for a user name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters this database allows in a user name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxUserNameLength ()"}, "getMaxColumnsInOrderBy()": {"Returns": [["int", "the maximum number of columns allowed; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of columns this database allows in an ORDER BY clause.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnsInOrderBy ()"}, "getMaxTableNameLength()": {"Returns": [["int", "the maximum number of characters allowed for a table name; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of characters this database allows in a table name.", "history": "Added in API level 1", "FullName": "public abstract int getMaxTableNameLength ()"}, "storesLowerCaseQuotedIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in lower case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesLowerCaseQuotedIdentifiers ()"}, "supportsSchemasInDataManipulation()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a schema name can be used in a data manipulation statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSchemasInDataManipulation ()"}, "getDriverMinorVersion()": {"Returns": [["int", "JDBC driver minor version number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this JDBC driver's minor version number.", "history": "Added in API level 1", "FullName": "public abstract int getDriverMinorVersion ()"}, "getDatabaseMajorVersion()": {"Returns": [["int", "the underlying database's major version"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the major version number of the underlying database.", "history": "Added in API level 1", "FullName": "public abstract int getDatabaseMajorVersion ()"}, "getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a primary key column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a description of the given table's primary key columns. They are ordered by COLUMN_NAME. Each primary key column description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getPrimaryKeys (String catalog, String schema, String table)"}, "storesLowerCaseIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in lower case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesLowerCaseIdentifiers ()"}, "supportsGroupByBeyondSelect()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports using columns not included in the SELECT statement in a GROUP BY clause provided that all of the columns in the SELECT statement are included in the GROUP BY clause.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsGroupByBeyondSelect ()"}, "getTimeDateFunctions()": {"Returns": [["@B_java#lang#String_E@", "the list of time and date functions supported by this database"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a comma-separated list of the time and date functions available with this database.", "history": "Added in API level 1", "FullName": "public abstract String getTimeDateFunctions ()"}, "getDriverVersion()": {"Returns": [["@B_java#lang#String_E@", "JDBC driver version"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the version number of this JDBC driver as a String.", "history": "Added in API level 1", "FullName": "public abstract String getDriverVersion ()"}, "supportsSchemasInIndexDefinitions()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a schema name can be used in an index definition statement.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSchemasInIndexDefinitions ()"}, "supportsGroupByUnrelated()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports using a column that is not in the SELECT statement in a GROUP BY clause.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsGroupByUnrelated ()"}, "othersDeletesAreVisible(int)": {"Returns": [["boolean", "true if deletes made by others are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether deletes made by others are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean othersDeletesAreVisible (int type)"}, "ownUpdatesAreVisible(int)": {"Returns": [["boolean", "true if updates are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether for the given type of ResultSet object, the result set's own updates are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean ownUpdatesAreVisible (int type)"}, "getCatalogTerm()": {"Returns": [["@B_java#lang#String_E@", "the vendor term for \"catalog\""]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the database vendor's preferred term for \"catalog\".", "history": "Added in API level 1", "FullName": "public abstract String getCatalogTerm ()"}, "supportsSelectForUpdate()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports SELECT FOR UPDATE statements.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSelectForUpdate ()"}, "getTableTypes()": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row has a single String column that is a table type"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the table types available in this database. The results are ordered by table type. The table type is:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getTableTypes ()"}, "supportsColumnAliasing()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports column aliasing. If so, the SQL AS clause can be used to provide names for computed columns or to provide alias names for columns as required.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsColumnAliasing ()"}, "getVersionColumns(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a column description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a description of a table's columns that are automatically updated when any value in a row is updated. They are unordered. Each column description has the following columns: The COLUMN_SIZE column represents the specified column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract ResultSet getVersionColumns (String catalog, String schema, String table)"}, "supportsPositionedDelete()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports positioned DELETE statements.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsPositionedDelete ()"}, "supportsStoredProcedures()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports stored procedure calls that use the stored procedure escape syntax.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsStoredProcedures ()"}, "ownDeletesAreVisible(int)": {"Returns": [["boolean", "true if deletes are visible for the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a result set's own deletes are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean ownDeletesAreVisible (int type)"}, "getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "ResultSet - each row is a column privilege description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database; \"\" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; \"\" retrieves those without a schema; null means that the schema name should not be used to narrow the search"], ["@B_java#lang#String_E@", "String: a table name; must match the table name as it is stored in the database"], ["@B_java#lang#String_E@", "String: a column name pattern; must match the column name as it is stored in the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves a description of the access rights for a table's columns. Only privileges matching the column name criteria are returned. They are ordered by COLUMN_NAME and PRIVILEGE. Each privilige description has the following columns:", "history": "Added in API level 1", "FullName": "public abstract ResultSet getColumnPrivileges (String catalog, String schema, String table, String columnNamePattern)"}, "dataDefinitionCausesTransactionCommit()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a data definition statement within a transaction forces the transaction to commit.", "history": "Added in API level 1", "FullName": "public abstract boolean dataDefinitionCausesTransactionCommit ()"}, "supportsDifferentTableCorrelationNames()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether, when table correlation names are supported, they are restricted to being different from the names of the tables.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsDifferentTableCorrelationNames ()"}, "getDefaultTransactionIsolation()": {"Returns": [["int", "the default isolation level"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Connection_E@"], "Permissions": [], "Description": "Retrieves this database's default transaction isolation level. The possible values are defined in java.sql.Connection.", "history": "Added in API level 1", "FullName": "public abstract int getDefaultTransactionIsolation ()"}, "getMaxColumnsInGroupBy()": {"Returns": [["int", "the maximum number of columns allowed; a result of zero means that there is no limit or the limit is not known"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the maximum number of columns this database allows in a GROUP BY clause.", "history": "Added in API level 1", "FullName": "public abstract int getMaxColumnsInGroupBy ()"}, "deletesAreDetected(int)": {"Returns": [["boolean", "true if deletes are detected by the given result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether or not a visible row delete can be detected by calling the method ResultSet.rowDeleted. If the method deletesAreDetected returns false, it means that deleted rows are removed from the result set.", "history": "Added in API level 1", "FullName": "public abstract boolean deletesAreDetected (int type)"}, "getSchemas(java.lang.String, java.lang.String)": {"Returns": [["@B_java#sql#ResultSet_E@", "a ResultSet object in which each row is a schema description"]], "Parameters": [["@B_java#lang#String_E@", "String: a catalog name; must match the catalog name as it is stored in the database;\"\" retrieves those without a catalog; null means catalog name should not be used to narrow down the search."], ["@B_java#lang#String_E@", "String: a schema name; must match the schema name as it is stored in the database; null means schema name should not be used to narrow down the search."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getSearchStringEscape_E@"], "Permissions": [], "Description": "Retrieves the schema names available in this database. The results are ordered by TABLE_CATALOG and TABLE_SCHEM. The schema columns are:", "history": "added in API level 9", "FullName": "public abstract ResultSet getSchemas (String catalog, String schemaPattern)"}, "supportsUnionAll()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports SQL UNION ALL.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsUnionAll ()"}, "getNumericFunctions()": {"Returns": [["@B_java#lang#String_E@", "the list of math functions supported by this database"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a comma-separated list of math functions available with this database. These are the Open /Open CLI math function names used in the JDBC function escape clause.", "history": "Added in API level 1", "FullName": "public abstract String getNumericFunctions ()"}, "isCatalogAtStart()": {"Returns": [["boolean", "true if the catalog name appears at the beginning of a fully qualified table name; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether a catalog appears at the start of a fully qualified table name. If not, the catalog appears at the end.", "history": "Added in API level 1", "FullName": "public abstract boolean isCatalogAtStart ()"}, "supportsLikeEscapeClause()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports specifying a LIKE escape clause.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsLikeEscapeClause ()"}, "storesMixedCaseIdentifiers()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in mixed case.", "history": "Added in API level 1", "FullName": "public abstract boolean storesMixedCaseIdentifiers ()"}, "supportsTableCorrelationNames()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports table correlation names.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsTableCorrelationNames ()"}, "nullsAreSortedAtEnd()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether NULL values are sorted at the end regardless of sort order.", "history": "Added in API level 1", "FullName": "public abstract boolean nullsAreSortedAtEnd ()"}, "updatesAreDetected(int)": {"Returns": [["boolean", "true if changes are detected by the result set type; false otherwise"]], "Parameters": [["int", "int: the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether or not a visible row update can be detected by calling the method ResultSet.rowUpdated.", "history": "Added in API level 1", "FullName": "public abstract boolean updatesAreDetected (int type)"}, "getConnection()": {"Returns": [["@B_java#sql#Connection_E@", "the connection that produced this metadata object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the connection that produced this metadata object.", "history": "Added in API level 1", "FullName": "public abstract Connection getConnection ()"}, "supportsSubqueriesInIns()": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this database supports subqueries in IN expressions.", "history": "Added in API level 1", "FullName": "public abstract boolean supportsSubqueriesInIns ()"}}, "Inheritance": [], "ClassName": "java.sql.DatabaseMetaData", "ClassDesc": "Comprehensive information about the database as a whole. This interface is implemented by driver vendors to let users know the capabilities of a Database Management System (DBMS) in combination with the driver based on JDBC A user for this interface is commonly a tool that needs to discover how to deal with the underlying DBMS. This is especially true for applications that are intended to be used with more than one DBMS. For example, a tool might use the method getTypeInfo to find out what data types can be used in a CREATE TABLE statement. Or a user might call the method supportsCorrelatedSubqueries to see if it is possible to use a correlated subquery or supportsBatchUpdates to see if it is possible to use batch updates. Some DatabaseMetaData methods return lists of information in the form of ResultSet objects. Regular ResultSet methods, such as getString and getInt, can be used to retrieve the data from these ResultSet objects. If a given form of metadata is not available, an empty ResultSet will be returned. Additional columns beyond the columns defined to be returned by the ResultSet object for a given method can be defined by the JDBC driver vendor and must be accessed by their Some DatabaseMetaData methods take arguments that are String patterns. These arguments all have names such as fooPattern. Within a pattern String, \"%\" means match any substring of 0 or more characters, and \"_\" means match any one character. Only metadata entries matching the search pattern are returned. If a search pattern argument is set to null, that argument's criterion will be dropped from the search."}