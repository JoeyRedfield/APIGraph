{"Functions": {"createStatement()": {"Returns": [["@B_java#sql#Statement_E@", "a new default Statement object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Statement object for sending SQL statements to the database. SQL statements without parameters are normally executed using Statement objects. If the same SQL statement is executed many times, it may be more efficient to use a PreparedStatement object. Result sets created using the returned Statement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract Statement createStatement ()"}, "setSavepoint(java.lang.String)": {"Returns": [["@B_java#sql#Savepoint_E@", "the new Savepoint object"]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the name of the savepoint"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is currently in auto-commit mode"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Savepoint_E@"], "Permissions": [], "Description": "Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it. if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly createdsavepoint.", "history": "Added in API level 1", "FullName": "public abstract Savepoint setSavepoint (String name)"}, "createArrayOf(java.lang.String,java.lang.Object[])": {"Returns": [["@B_java#sql#Array_E@", "an Array object whose elements map to the specified SQL type"]], "Parameters": [["@B_java#lang#String_E@", "String: the SQL name of the type the elements of the array map to. The typeName is a database-specific name which may be the name of a built-in type, a user-defined type or a standard SQL type supported by this database. This is the value returned by Array.getBaseTypeName"], ["@B_java#lang#Object_E@", "Object: the elements that populate the returned object"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database error occurs, the JDBC type is not appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Factory method for creating Array objects. createArrayOf is used to create an array object that maps to a primitive data type, then it is implementation-defined whether the Array object is an array of that primitive data type or an array of Object. Object array to the default JDBC SQL type defined in java.sql.Types for the given class of Object. The default mapping is specified in Appendix B of the JDBC specification. If the resulting JDBC type is not the appropriate type for the given typeName then it is implementation defined whether an SQLException is thrown or the driver supports the resulting conversion.", "history": "Added in API level 9", "FullName": "public abstract Array createArrayOf (String typeName, Object[] elements)"}, "getTypeMap()": {"Returns": [["@B_java#util#Map_E@", "the java.util.Map object associated with this Connection object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Connection#setTypeMap_E@"], "Permissions": [], "Description": "Retrieves the Map object associated with this Connection object. Unless the application has added an entry, the type map returned will be empty. You must invoke setTypeMap after making changes to the Map object returned from getTypeMap as a JDBC driver may create an internal copy of the Map object passed to setTypeMap:", "history": "Added in API level 1", "FullName": "public abstract Map<String, Class<?>> getTypeMap ()"}, "createSQLXML()": {"Returns": [["@B_java#sql#SQLXML_E@", "An object that implements the SQLXML interface"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if an object that implements the SQLXML interface can not be constructed, this method is called on a closed connection or a database access error occurs."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an object that implements the SQLXML interface. The object returned initially contains no data. The createXmlStreamWriter object and setString method of the SQLXML interface may be used to add data to the SQLXML object.", "history": "Added in API level 9", "FullName": "public abstract SQLXML createSQLXML ()"}, "prepareStatement(java.lang.String,int[])": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column indexes"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"], ["int[]", "int: an array of column indexes indicating the columns that should be returned from the inserted row or rows"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int[] columnIndexes)"}, "getAutoCommit()": {"Returns": [["boolean", "the current state of this Connection object's auto-commit mode"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#setAutoCommit_E@"], "Permissions": [], "Description": "Retrieves the current auto-commit mode for this Connection object.", "history": "Added in API level 1", "FullName": "public abstract boolean getAutoCommit ()"}, "getHoldability()": {"Returns": [["int", "the holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#setHoldability_E@", "@B_java#sql#DatabaseMetaData#getResultSetHoldability_E@", "@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Retrieves the current holdability of ResultSet objects created using this Connection object.", "history": "Added in API level 1", "FullName": "public abstract int getHoldability ()"}, "prepareStatement(java.lang.String,int,int,int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters"], ["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the prepareStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "createStruct(java.lang.String,java.lang.Object[])": {"Returns": [["@B_java#sql#Struct_E@", "a Struct object that maps to the given SQL type and is populated with the given attributes"]], "Parameters": [["@B_java#lang#String_E@", "String: the SQL type name of the SQL structured type that this Struct object maps to. The typeName is the name of a user-defined type that has been defined for this database. It is the value returned by Struct.getSQLTypeName."], ["@B_java#lang#Object_E@", "Object: the attributes that populate the returned object"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database error occurs, the typeName is null or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Factory method for creating Struct objects.", "history": "Added in API level 9", "FullName": "public abstract Struct createStruct (String typeName, Object[] attributes)"}, "nativeSQL(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the native form of this statement"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' parameter placeholders"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the given SQL statement into the system's native SQL grammar. A driver may convert the JDBC SQL grammar into its system's native SQL grammar prior to sending it. This method returns the native form of the statement that the driver would have sent.", "history": "Added in API level 1", "FullName": "public abstract String nativeSQL (String sql)"}, "prepareStatement(java.lang.String)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new default PreparedStatement object containing the pre-compiled SQL statement"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PreparedStatement object for sending parameterized SQL statements to the database. A SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLException objects. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql)"}, "prepareStatement(java.lang.String,int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled SQL statement, that will have the capability of returning auto-generated keys"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"], ["int", "int: a flag indicating whether auto-generated keys should be returned; one of Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameter is not a Statement constant indicating whether auto-generated keys should be returned"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys. The given constant tells the driver whether it should make auto-generated keys available for retrieval. This parameter is ignored if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int autoGeneratedKeys)"}, "prepareCall(java.lang.String,int,int,int)": {"Returns": [["@B_java#sql#CallableStatement_E@", "a new CallableStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters"], ["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type, result set concurrency type and holdability to be overridden.", "history": "Added in API level 1", "FullName": "public abstract CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "prepareStatement(java.lang.String,int,int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters"], ["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency)"}, "setHoldability(int)": {"Returns": [], "Parameters": [["int", "int: a ResultSet holdability constant; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access occurs, this method is called on a closed connection, or the given parameter is not a ResultSet constant indicating holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the given holdability is not supported"]], "SeeAlso": ["@B_java#sql#Connection#getHoldability_E@", "@B_java#sql#DatabaseMetaData#getResultSetHoldability_E@", "@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Changes the default holdability of ResultSet objects created using this Connection object to the given holdability. The default holdability of ResultSet objects can be be determined by invoking @B_java#sql#DatabaseMetaData#getResultSetHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract void setHoldability (int holdability)"}, "getMetaData()": {"Returns": [["@B_java#sql#DatabaseMetaData_E@", "a DatabaseMetaData object for this Connection object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection. The metadata includes information about the database's tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on.", "history": "Added in API level 1", "FullName": "public abstract DatabaseMetaData getMetaData ()"}, "getWarnings()": {"Returns": [["@B_java#sql#SQLWarning_E@", "the first SQLWarning object or null if there are none"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#SQLWarning_E@"], "Permissions": [], "Description": "Retrieves the first warning reported by calls on this Connection object. If there is more than one warning, subsequent warnings will be chained to the first one and can be retrieved by calling the method SQLWarning.getNextWarning on the warning that was retrieved previously. This method may not be called on a closed connection; doing so will cause an SQLException to be thrown.", "history": "Added in API level 1", "FullName": "public abstract SQLWarning getWarnings ()"}, "createBlob()": {"Returns": [["@B_java#sql#Blob_E@", "An object that implements the Blob interface"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if an object that implements the Blob interface can not be constructed, this method is called on a closed connection or a database access error occurs."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an object that implements the Blob interface. The object returned initially contains no data. The setBinaryStream and setBytes methods of the Blob interface may be used to add data to the Blob.", "history": "Added in API level 9", "FullName": "public abstract Blob createBlob ()"}, "getClientInfo(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The value of the client info property specified"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the client info property to retrieve"]], "Throws": [["@B_java#sql#SQLException_E@", "if the database server returns an error when fetching the client info value from the database or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getClientInfoProperties_E@"], "Permissions": [], "Description": "Returns the value of the client info property specified by name. This method may return null if the specified client info property has not been set and does not have a default value. This method will also return null if the specified client info property name is not supported by the driver. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver.", "history": "Added in API level 9", "FullName": "public abstract String getClientInfo (String name)"}, "commit()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called while participating in a distributed transaction, if this method is called on a closed conection or this Connection object is in auto-commit mode"]], "SeeAlso": ["@B_java#sql#Connection#setAutoCommit_E@"], "Permissions": [], "Description": "Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.", "history": "Added in API level 1", "FullName": "public abstract void commit ()"}, "rollback()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is in auto-commit mode"]], "SeeAlso": ["@B_java#sql#Connection#setAutoCommit_E@"], "Permissions": [], "Description": "Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.", "history": "Added in API level 1", "FullName": "public abstract void rollback ()"}, "prepareStatement(java.lang.String, int, int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters"], ["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency)"}, "createStatement(int,int,int)": {"Returns": [["@B_java#sql#Statement_E@", "a new Statement object that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the createStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.", "history": "Added in API level 1", "FullName": "public abstract Statement createStatement (int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "createNClob()": {"Returns": [["@B_java#sql#NClob_E@", "An object that implements the NClob interface"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if an object that implements the NClob interface can not be constructed, this method is called on a closed connection or a database access error occurs."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an object that implements the NClob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the NClob interface may be used to add data to the NClob.", "history": "Added in API level 9", "FullName": "public abstract NClob createNClob ()"}, "prepareStatement(java.lang.String, int, int, int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters"], ["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the prepareStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.", "history": "added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "setAutoCommit(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable auto-commit mode; false to disable it"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, setAutoCommit(true) is called while participating in a distributed transaction, or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#getAutoCommit_E@"], "Permissions": [], "Description": "Sets this connection's auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode. The commit occurs when the statement completes. The time when the statement completes depends on the type of SQL Statement: For DML statements, such as Insert, Update or Delete, and DDL statements, the statement is complete as soon as it has finished executing. For Select statements, the statement is complete when the associated result set is closed. For CallableStatement objects or for statements that return multiple results, the statement is complete when all of the associated result sets have been closed, and all update counts and output parameters have been retrieved. setAutoCommit is called and the auto-commit mode is not changed, the call is a no-op.", "history": "Added in API level 1", "FullName": "public abstract void setAutoCommit (boolean autoCommit)"}, "rollback(java.sql.Savepoint)": {"Returns": [], "Parameters": [["@B_java#sql#Savepoint_E@", "Savepoint: the Savepoint object to roll back to"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection, the Savepoint object is no longer valid, or this Connection object is currently in auto-commit mode"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Savepoint_E@", "@B_java#sql#Connection#rollback_E@"], "Permissions": [], "Description": "Undoes all changes made after the given Savepoint object was set. This method should be used only when auto-commit has been disabled.", "history": "Added in API level 1", "FullName": "public abstract void rollback (Savepoint savepoint)"}, "createStruct(java.lang.String, java.lang.Object[])": {"Returns": [["@B_java#sql#Struct_E@", "a Struct object that maps to the given SQL type and is populated with the given attributes"]], "Parameters": [["@B_java#lang#String_E@", "String: the SQL type name of the SQL structured type that this Struct object maps to. The typeName is the name of a user-defined type that has been defined for this database. It is the value returned by Struct.getSQLTypeName."], ["@B_java#lang#Object_E@", "Object: the attributes that populate the returned object"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database error occurs, the typeName is null or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Factory method for creating Struct objects.", "history": "added in API level 9", "FullName": "public abstract Struct createStruct (String typeName, Object[] attributes)"}, "getTransactionIsolation()": {"Returns": [["int", "the current transaction isolation level, which will be one of the following constants: Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, Connection.TRANSACTION_SERIALIZABLE, or Connection.TRANSACTION_NONE."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#setTransactionIsolation_E@"], "Permissions": [], "Description": "Retrieves this Connection object's current transaction isolation level.", "history": "Added in API level 1", "FullName": "public abstract int getTransactionIsolation ()"}, "clearWarnings()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "SQLException if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Clears all warnings reported for this Connection object. After a call to this method, the method getWarnings returns null until a new warning is reported for this Connection object.", "history": "Added in API level 1", "FullName": "public abstract void clearWarnings ()"}, "prepareStatement(java.lang.String,java.lang.String[])": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column names"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"], ["@B_java#lang#String_E@", "String: an array of column names indicating the columns that should be returned from the inserted row or rows"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the names of the columns in the target table that contain the auto-generated keys that should be returned. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, String[] columnNames)"}, "prepareCall(java.lang.String, int, int)": {"Returns": [["@B_java#sql#CallableStatement_E@", "a new CallableStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters"], ["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "added in API level 1", "FullName": "public abstract CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency)"}, "setTypeMap(java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the java.util.Map object to install as the replacement for this Connection object's default type map"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameter is not a java.util.Map object"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Connection#getTypeMap_E@"], "Permissions": [], "Description": "Installs the given TypeMap object as the type map for this Connection object. The type map will be used for the custom mapping of SQL structured types and distinct types. You must set the the values for the TypeMap prior to callng setMap as a JDBC driver may create an internal copy of the TypeMap:", "history": "Added in API level 1", "FullName": "public abstract void setTypeMap (Map<String, Class<?>> map)"}, "setReadOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true enables read-only mode; false disables it"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or this method is called during a transaction"]], "SeeAlso": [], "Permissions": [], "Description": "Puts this connection in read-only mode as a hint to the driver to enable database optimizations.", "history": "Added in API level 1", "FullName": "public abstract void setReadOnly (boolean readOnly)"}, "releaseSavepoint(java.sql.Savepoint)": {"Returns": [], "Parameters": [["@B_java#sql#Savepoint_E@", "Savepoint: the Savepoint object to be removed"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given Savepoint object is not a valid savepoint in the current transaction"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified Savepoint and subsequent Savepoint objects from the current transaction. Any reference to the savepoint after it have been removed will cause an SQLException to be thrown.", "history": "Added in API level 1", "FullName": "public abstract void releaseSavepoint (Savepoint savepoint)"}, "setSavepoint()": {"Returns": [["@B_java#sql#Savepoint_E@", "the new Savepoint object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this Connection object is currently in auto-commit mode"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Savepoint_E@"], "Permissions": [], "Description": "Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it. if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly createdsavepoint.", "history": "Added in API level 1", "FullName": "public abstract Savepoint setSavepoint ()"}, "getCatalog()": {"Returns": [["@B_java#lang#String_E@", "the current catalog name or null if there is none"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#setCatalog_E@"], "Permissions": [], "Description": "Retrieves this Connection object's current catalog name.", "history": "Added in API level 1", "FullName": "public abstract String getCatalog ()"}, "setCatalog(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of a catalog (subspace in this Connection object's database) in which to work"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#getCatalog_E@"], "Permissions": [], "Description": "Sets the given catalog name in order to select a subspace of this Connection object's database in which to work. If the driver does not support catalogs, it will silently ignore this request. Calling setCatalog has no effect on previously created or prepared Statement objects. It is implementation defined whether a DBMS prepare operation takes place immediately when the Connection method prepareStatement or prepareCall is invoked. For maximum portability, setCatalog should be called before a Statement is created or prepared.", "history": "Added in API level 1", "FullName": "public abstract void setCatalog (String catalog)"}, "prepareCall(java.lang.String, int, int, int)": {"Returns": [["@B_java#sql#CallableStatement_E@", "a new CallableStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters"], ["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type, result set concurrency type and holdability to be overridden.", "history": "added in API level 1", "FullName": "public abstract CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "prepareCall(java.lang.String,int,int)": {"Returns": [["@B_java#sql#CallableStatement_E@", "a new CallableStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given type and concurrency"]], "Parameters": [["@B_java#lang#String_E@", "String: a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters"], ["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract CallableStatement prepareCall (String sql, int resultSetType, int resultSetConcurrency)"}, "isValid(int)": {"Returns": [["boolean", "true if the connection is valid, false otherwise"]], "Parameters": [["int", "int: - The time in seconds to wait for the database operation used to validate the connection to complete. If the timeout period expires before the operation completes, this method returns false. A value of 0 indicates a timeout is not applied to the database operation."]], "Throws": [["@B_java#sql#SQLException_E@", "if the value supplied for timeout is less then 0"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#getClientInfoProperties_E@"], "Permissions": [], "Description": "Returns true if the connection has not been closed and is still valid. The driver shall submit a query on the connection or use some other mechanism that positively verifies the connection is still valid when this method is called. The query submitted by the driver to validate the connection shall be executed in the context of the current transaction.", "history": "Added in API level 9", "FullName": "public abstract boolean isValid (int timeout)"}, "setClientInfo(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the client info property to set"], ["@B_java#lang#String_E@", "String: The value to set the client info property to. If the value is null, the current value of the specified property is cleared."]], "Throws": [["@B_java#sql#SQLClientInfoException_E@", "if the database server returns an error while setting the client info value on the database server or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the client info property specified by name to the value specified by value. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver and the maximum length that may be specified for each property. The driver stores the value specified in a suitable location in the database. For example in a special register, session parameter, or system table column. For efficiency the driver may defer setting the value in the database until the next time a statement is executed or prepared. Other than storing the client information in the appropriate place in the database, these methods shall not alter the behavior of the connection in anyway. The values supplied to these methods are used for accounting, diagnostics and debugging purposes only. The driver shall generate a warning if the client info name specified is not recognized by the driver. If the value specified to this method is greater than the maximum length for the property the driver may either truncate the value and generate a warning or generate a SQLClientInfoException. If the driver generates a SQLClientInfoException, the value specified was not set on the connection. The following are standard client info properties. Drivers are not required to support these properties however if the driver supports a client info property that can be described by one of the standard properties, the standard property name should be used. ApplicationName - The name of the application currently utilizing the connection ClientUser - The name of the user that the application using the connection is performing work for. This may not be the same as the user name that was used in establishing the connection. ClientHostname - The hostname of the computer the application using the connection is running on.", "history": "Added in API level 9", "FullName": "public abstract void setClientInfo (String name, String value)"}, "isClosed()": {"Returns": [["boolean", "true if this Connection object is closed; false if it is still open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this Connection object has been closed. A connection is closed if the method close has been called on it or if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method Connection.close has been called. This method generally cannot be called to determine whether a connection to a database is valid or invalid. A typical client can determine that a connection is invalid by catching any exceptions that might be thrown when an operation is attempted.", "history": "Added in API level 1", "FullName": "public abstract boolean isClosed ()"}, "getClientInfo()": {"Returns": [["@B_java#util#Properties_E@", "A Properties object that contains the name and current value of each of the client info properties supported by the driver."]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if the database server returns an error when fetching the client info values from the database or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list containing the name and current value of each client info property supported by the driver. The value of a client info property may be null if the property has not been set and does not have a default value.", "history": "Added in API level 9", "FullName": "public abstract Properties getClientInfo ()"}, "setTransactionIsolation(int)": {"Returns": [], "Parameters": [["int", "int: one of the following Connection constants: Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or Connection.TRANSACTION_SERIALIZABLE. (Note that Connection.TRANSACTION_NONE cannot be used because it specifies that transactions are not supported.)"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameter is not one of the Connection constants"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#supportsTransactionIsolationLevel_E@", "@B_java#sql#Connection#getTransactionIsolation_E@"], "Permissions": [], "Description": "Attempts to change the transaction isolation level for this Connection object to the one given. The constants defined in the interface Connection are the possible transaction isolation levels.", "history": "Added in API level 1", "FullName": "public abstract void setTransactionIsolation (int level)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "SQLException if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically released. Calling the method close on a Connection object that is already closed is a no-op. It is close method. If the close method is called and there is an active transaction, the results are implementation-defined.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "createStatement(int, int, int)": {"Returns": [["@B_java#sql#Statement_E@", "a new Statement object that will generate ResultSet objects with the given type, concurrency, and holdability"]], "Parameters": [["int", "int: one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"], ["int", "int: one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type, concurrency, and holdability"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."]], "SeeAlso": ["@B_java#sql#ResultSet_E@"], "Permissions": [], "Description": "Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the createStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.", "history": "added in API level 1", "FullName": "public abstract Statement createStatement (int resultSetType, int resultSetConcurrency, int resultSetHoldability)"}, "createStatement(int,int)": {"Returns": [["@B_java#sql#Statement_E@", "a new Statement object that will generate ResultSet objects with the given type and concurrency"]], "Parameters": [["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Statement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the createStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract Statement createStatement (int resultSetType, int resultSetConcurrency)"}, "isReadOnly()": {"Returns": [["boolean", "true if this Connection object is read-only; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "SQLException if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this Connection object is in read-only mode.", "history": "Added in API level 1", "FullName": "public abstract boolean isReadOnly ()"}, "setClientInfo(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the client info property to set"], ["@B_java#lang#String_E@", "String: The value to set the client info property to. If the value is null, the current value of the specified property is cleared."]], "Throws": [["@B_java#sql#SQLClientInfoException_E@", "if the database server returns an error while setting the client info value on the database server or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the client info property specified by name to the value specified by value. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver and the maximum length that may be specified for each property. The driver stores the value specified in a suitable location in the database. For example in a special register, session parameter, or system table column. For efficiency the driver may defer setting the value in the database until the next time a statement is executed or prepared. Other than storing the client information in the appropriate place in the database, these methods shall not alter the behavior of the connection in anyway. The values supplied to these methods are used for accounting, diagnostics and debugging purposes only. The driver shall generate a warning if the client info name specified is not recognized by the driver. If the value specified to this method is greater than the maximum length for the property the driver may either truncate the value and generate a warning or generate a SQLClientInfoException. If the driver generates a SQLClientInfoException, the value specified was not set on the connection. The following are standard client info properties. Drivers are not required to support these properties however if the driver supports a client info property that can be described by one of the standard properties, the standard property name should be used. ApplicationName - The name of the application currently utilizing the connection ClientUser - The name of the user that the application using the connection is performing work for. This may not be the same as the user name that was used in establishing the connection. ClientHostname - The hostname of the computer the application using the connection is running on.", "history": "added in API level 9", "FullName": "public abstract void setClientInfo (String name, String value)"}, "prepareCall(java.lang.String)": {"Returns": [["@B_java#sql#CallableStatement_E@", "a new default CallableStatement object containing the pre-compiled SQL statement"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' parameter placeholders. Typically this statement is specified using JDBC call escape syntax."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CallableStatement object for calling database stored procedures. The CallableStatement object provides methods for setting up its IN and OUT parameters, and methods for executing the call to a stored procedure. prepareCall is done; others may wait until the CallableStatement object is executed. This has no direct effect on users; however, it does affect which method throws certain SQLExceptions. Result sets created using the returned CallableStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "Added in API level 1", "FullName": "public abstract CallableStatement prepareCall (String sql)"}, "prepareStatement(java.lang.String, int)": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled SQL statement, that will have the capability of returning auto-generated keys"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"], ["int", "int: a flag indicating whether auto-generated keys should be returned; one of Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameter is not a Statement constant indicating whether auto-generated keys should be returned"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys. The given constant tells the driver whether it should make auto-generated keys available for retrieval. This parameter is ignored if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int autoGeneratedKeys)"}, "createClob()": {"Returns": [["@B_java#sql#Clob_E@", "An object that implements the Clob interface"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if an object that implements the Clob interface can not be constructed, this method is called on a closed connection or a database access error occurs."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this data type"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an object that implements the Clob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the Clob interface may be used to add data to the Clob.", "history": "Added in API level 9", "FullName": "public abstract Clob createClob ()"}, "setClientInfo(java.util.Properties)": {"Returns": [], "Parameters": [["@B_java#util#Properties_E@", "Properties: the list of client info properties to set"]], "Throws": [["@B_java#sql#SQLClientInfoException_E@", "if the database server returns an error while setting the clientInfo values on the database server or this method is called on a closed connection"]], "SeeAlso": ["@B_java#sql#Connection#setClientInfo_E@"], "Permissions": [], "Description": "Sets the value of the connection's client info properties. The Properties object contains the names and values of the client info properties to be set. The set of client info properties contained in the properties list replaces the current set of client info properties on the connection. If a property that is currently set on the connection is not present in the properties list, that property is cleared. Specifying an empty properties list will clear all of the properties on the connection. See setClientInfo (String, String) for more information. If an error occurs in setting any of the client info properties, a SQLClientInfoException is thrown. The SQLClientInfoException contains information indicating which client info properties were not set. The state of the client information is unknown because some databases do not allow multiple client info properties to be set atomically. For those databases, one or more properties may have been set before the error occurred.", "history": "Added in API level 9", "FullName": "public abstract void setClientInfo (Properties properties)"}, "createStatement(int, int)": {"Returns": [["@B_java#sql#Statement_E@", "a new Statement object that will generate ResultSet objects with the given type and concurrency"]], "Parameters": [["int", "int: a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"], ["int", "int: a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs, this method is called on a closed connection or the given parameters are not ResultSet constants indicating type and concurrency"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a Statement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the createStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "added in API level 1", "FullName": "public abstract Statement createStatement (int resultSetType, int resultSetConcurrency)"}, "prepareStatement(java.lang.String, int[])": {"Returns": [["@B_java#sql#PreparedStatement_E@", "a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column indexes"]], "Parameters": [["@B_java#lang#String_E@", "String: an SQL statement that may contain one or more '?' IN parameter placeholders"], ["int[]", "int: an array of column indexes indicating the columns that should be returned from the inserted row or rows"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed connection"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling @B_java#sql#Connection#getHoldability_E@.", "history": "added in API level 1", "FullName": "public abstract PreparedStatement prepareStatement (String sql, int[] columnIndexes)"}}, "Inheritance": [], "ClassName": "java.sql.Connection", "ClassDesc": "A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection. A Connection object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the getMetaData method. Connection, JDBC applications should use the appropriate Connection method such as setAutoCommit or setTransactionIsolation. Applications should not invoke SQL commands directly to change the connection's configuration when there is a JDBC method available. By default a Connection object is in auto-commit mode, which means that it automatically commits changes after executing each statement. If auto-commit mode has been disabled, the method commit must be called explicitly in order to commit changes; otherwise, database changes will not be saved. A new Connection object created using the JDBC 2.1 core API has an initially empty type map associated with it. A user may enter a custom mapping for a UDT in this type map. When a UDT is retrieved from a data source with the method ResultSet.getObject, the getObject method will check the connection's type map to see if there is an entry for that UDT. If so, the getObject method will map the UDT to the class indicated. If there is no entry, the UDT will be mapped using the standard mapping. A user may create a new type map, which is a java.util.Map object, make an entry in it, and pass it to the java.sql methods that can perform custom mapping. In this case, the method will use the given type map instead of the one associated with the connection. For example, the following code fragment specifies that the SQL type ATHLETES will be mapped to the class Athletes in the Java programming language. The code fragment retrieves the type map for the Connection object con, inserts the entry into it, and then sets the type map with the new entry as the connection's type map."}