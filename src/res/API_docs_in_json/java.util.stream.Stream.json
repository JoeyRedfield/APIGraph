{"Functions": {"distinct()": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the distinct elements (according to @B_java#lang#Object#equals_E@) of this stream. For ordered streams, the selection of distinct elements is stable (for duplicated elements, the element appearing first in the encounter order is preserved.) For unordered streams, no stability guarantees are made. This is a", "history": "Added in API level 24", "FullName": "public abstract Stream<T> distinct ()"}, "of(T)": {"Returns": [["@B_java#util#stream#Stream_E@", "a singleton sequential stream"]], "Parameters": [["T", "T: the single element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential Stream containing a single element.", "history": "Added in API level 24", "FullName": "public static Stream<T> of (T t)"}, "forEach(java.util.function.Consumer<?superT>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: a non-interfering action to perform on the elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs an action for each element of this stream. This is a The behavior of this operation is explicitly nondeterministic. For parallel stream pipelines, this operation does not guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of parallelism. For any given element, the action may be performed at whatever time and in whatever thread the library chooses. If the action accesses shared state, it is responsible for providing the required synchronization.", "history": "Added in API level 24", "FullName": "public abstract void forEach (Consumer<? super T> action)"}, "noneMatch(java.util.function.Predicate<?superT>)": {"Returns": [["boolean", "true if either no elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether no elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean noneMatch (Predicate<? super T> predicate)"}, "reduce(T,java.util.function.BinaryOperator<T>)": {"Returns": [["T", "the result of the reduction"]], "Parameters": [["T", "T: the identity value for the accumulating function"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a The identity value must be an identity for the accumulator function. This means that for all t, accumulator.apply(identity, t) is equal to t. The accumulator function must be an This is a", "history": "Added in API level 24", "FullName": "public abstract T reduce (T identity, BinaryOperator<T> accumulator)"}, "flatMap(java.util.function.Function<?superT,?extendsjava.util.stream.Stream<?extendsR>>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a non-interfering, stateless function to apply to each element which produces a stream of new values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is @B_java#util#stream#BaseStream#close_E@ after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) This is an", "history": "Added in API level 24", "FullName": "public abstract Stream<R> flatMap (Function<? super T, ? extends Stream<? extends R>> mapper)"}, "findFirst()": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the first element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the element selected is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_java#util#Optional_E@ describing the first element of this stream, or an empty Optional if the stream is empty. If the stream has no encounter order, then any element may be returned. This is a", "history": "Added in API level 24", "FullName": "public abstract Optional<T> findFirst ()"}, "noneMatch(java.util.function.Predicate<? super T>)": {"Returns": [["boolean", "true if either no elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether no elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "added in API level 24", "FullName": "public abstract boolean noneMatch (Predicate<? super T> predicate)"}, "collect(java.util.function.Supplier<R>,java.util.function.BiConsumer<R,?superT>,java.util.function.BiConsumer<R,R>)": {"Returns": [["R", "the result of the reduction"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a function that creates a new result container. For a parallel execution, this function may be called multiple times and must return a fresh value each time."], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: an associative, non-interfering, stateless function for incorporating an additional element into a result"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: an associative, non-interfering, stateless function for combining two values, which must be compatible with the accumulator function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a ArrayList, and elements are incorporated by updating the state of the result rather than by replacing the result. This produces a result equivalent to: Like @B_java#util#stream#Stream#reduce_E@, collect operations can be parallelized without requiring additional synchronization. This is a", "history": "Added in API level 24", "FullName": "public abstract R collect (Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)"}, "limit(long)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["long", "long: the number of elements the stream should be limited to"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if maxSize is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length. This is a", "history": "Added in API level 24", "FullName": "public abstract Stream<T> limit (long maxSize)"}, "reduce(U,java.util.function.BiFunction<U,?superT,U>,java.util.function.BinaryOperator<U>)": {"Returns": [["U", "the result of the reduction"]], "Parameters": [["U", "U: the identity value for the combiner function"], ["@B_java#util#function#BiFunction_E@", "BiFunction: an associative, non-interfering, stateless function for incorporating an additional element into a result"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: an associative, non-interfering, stateless function for combining two values, which must be compatible with the accumulator function"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#reduce_E@"], "Permissions": [], "Description": "Performs a The identity value must be an identity for the combiner function. This means that for all u, combiner(identity, u) is equal to u. Additionally, the combiner function must be compatible with the accumulator function; for all u and t, the following must hold: This is a", "history": "Added in API level 24", "FullName": "public abstract U reduce (U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)"}, "max(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the maximum element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to compare elements of this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the maximum element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum element of this stream according to the provided Comparator. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract Optional<T> max (Comparator<? super T> comparator)"}, "forEachOrdered(java.util.function.Consumer<?superT>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: a non-interfering action to perform on the elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#forEach_E@"], "Permissions": [], "Description": "Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order. This is a This operation processes the elements one at a time, in encounter order if one exists. Performing the action for one element", "history": "Added in API level 24", "FullName": "public abstract void forEachOrdered (Consumer<? super T> action)"}, "min(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the minimum element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to compare elements of this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the minimum element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum element of this stream according to the provided Comparator. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract Optional<T> min (Comparator<? super T> comparator)"}, "peek(java.util.function.Consumer<? super T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: a non-interfering action to perform on the elements as they are consumed from the stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream. This is an For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation. If the action modifies shared state, it is responsible for providing the required synchronization.", "history": "added in API level 24", "FullName": "public abstract Stream<T> peek (Consumer<? super T> action)"}, "skip(long)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["long", "long: the number of leading elements to skip"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if n is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream. If this stream contains fewer than n elements then an empty stream will be returned. This is a", "history": "Added in API level 24", "FullName": "public abstract Stream<T> skip (long n)"}, "findAny()": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing some element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the element selected is null"]], "SeeAlso": ["@B_java#util#stream#Stream#findFirst_E@"], "Permissions": [], "Description": "Returns an @B_java#util#Optional_E@ describing some element of the stream, or an empty Optional if the stream is empty. This is a The behavior of this operation is explicitly nondeterministic; it is free to select any element in the stream. This is to allow for maximal performance in parallel operations; the cost is that multiple invocations on the same source may not return the same result. (If a stable result is desired, use @B_java#util#stream#Stream#findFirst_E@ instead.)", "history": "Added in API level 24", "FullName": "public abstract Optional<T> findAny ()"}, "sorted(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to be used to compare stream elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator. For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made. This is a", "history": "added in API level 24", "FullName": "public abstract Stream<T> sorted (Comparator<? super T> comparator)"}, "mapToDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract DoubleStream mapToDouble (ToDoubleFunction<? super T> mapper)"}, "flatMapToLong(java.util.function.Function<?superT,?extendsjava.util.stream.LongStream>)": {"Returns": [["@B_java#util#stream#LongStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a non-interfering, stateless function to apply to each element which produces a stream of new values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#flatMap_E@"], "Permissions": [], "Description": "Returns an LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is @B_java#util#stream#BaseStream#close_E@ after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) This is an", "history": "Added in API level 24", "FullName": "public abstract LongStream flatMapToLong (Function<? super T, ? extends LongStream> mapper)"}, "sorted()": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, sorted according to natural order. If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed. For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made. This is a", "history": "Added in API level 24", "FullName": "public abstract Stream<T> sorted ()"}, "allMatch(java.util.function.Predicate<? super T>)": {"Returns": [["boolean", "true if either all elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether all elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "added in API level 24", "FullName": "public abstract boolean allMatch (Predicate<? super T> predicate)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing the elements of this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract Object[] toArray ()"}, "mapToLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#stream#LongStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a LongStream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract LongStream mapToLong (ToLongFunction<? super T> mapper)"}, "of(T...)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["T...", "T: the elements of the new stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered stream whose elements are the specified values.", "history": "Added in API level 24", "FullName": "public static Stream<T> of (T... values)"}, "count()": {"Returns": [["long", "the count of elements in this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the count of elements in this stream. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract long count ()"}, "flatMapToDouble(java.util.function.Function<?superT,?extendsjava.util.stream.DoubleStream>)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a non-interfering, stateless function to apply to each element which produces a stream of new values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#flatMap_E@"], "Permissions": [], "Description": "Returns an DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is @B_java#util#stream#BaseStream#close_E@ after its contents have placed been into this stream. (If a mapped stream is null an empty stream is used, instead.) This is an", "history": "Added in API level 24", "FullName": "public abstract DoubleStream flatMapToDouble (Function<? super T, ? extends DoubleStream> mapper)"}, "anyMatch(java.util.function.Predicate<?superT>)": {"Returns": [["boolean", "true if any elements of the stream match the provided predicate, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then false is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean anyMatch (Predicate<? super T> predicate)"}, "forEach(java.util.function.Consumer<? super T>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: a non-interfering action to perform on the elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs an action for each element of this stream. This is a The behavior of this operation is explicitly nondeterministic. For parallel stream pipelines, this operation does not guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of parallelism. For any given element, the action may be performed at whatever time and in whatever thread the library chooses. If the action accesses shared state, it is responsible for providing the required synchronization.", "history": "added in API level 24", "FullName": "public abstract void forEach (Consumer<? super T> action)"}, "toArray(java.util.function.IntFunction<A[]>)": {"Returns": [["A[]", "an array containing the elements in this stream"]], "Parameters": [["@B_java#util#function#IntFunction_E@", "IntFunction: a function which produces a new array of the desired type and the provided length"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the array returned from the array generator is not a supertype of the runtime type of every element in this stream"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing. This is a", "history": "Added in API level 24", "FullName": "public abstract A[] toArray (IntFunction<A[]> generator)"}, "iterate(T,java.util.function.UnaryOperator<T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new sequential Stream"]], "Parameters": [["T", "T: the initial element"], ["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a function to be applied to to the previous element to produce a new element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc. The first element (position 0) in the Stream will be the provided seed. For n > 0, the element at position n, will be the result of applying the function f to the element at position n - 1.", "history": "Added in API level 24", "FullName": "public static Stream<T> iterate (T seed, UnaryOperator<T> f)"}, "peek(java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: a non-interfering action to perform on the elements as they are consumed from the stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream. This is an For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation. If the action modifies shared state, it is responsible for providing the required synchronization.", "history": "Added in API level 24", "FullName": "public abstract Stream<T> peek (Consumer<? super T> action)"}, "min(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the minimum element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to compare elements of this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the minimum element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum element of this stream according to the provided Comparator. This is a special case of a This is a", "history": "added in API level 24", "FullName": "public abstract Optional<T> min (Comparator<? super T> comparator)"}, "collect(java.util.stream.Collector<?superT,A,R>)": {"Returns": [["R", "the result of the reduction"]], "Parameters": [["@B_java#util#stream#Collector_E@", "Collector: the Collector describing the reduction"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#collect_E@", "@B_java#util#stream#Collectors_E@"], "Permissions": [], "Description": "Performs a Collector. A Collector encapsulates the functions used as arguments to @B_java#util#stream#Stream#collect_E@, allowing for reuse of collection strategies and composition of collect operations such as multiple-level grouping or partitioning. If the stream is parallel, and the Collector is @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@, and either the stream is unordered or the collector is @B_java#util#stream#Collector#Characteristics#UNORDERED_E@, then a concurrent reduction will be performed (see @B_java#util#stream#Collector_E@ for details on concurrent reduction.) This is a When executed in parallel, multiple intermediate results may be instantiated, populated, and merged so as to maintain isolation of mutable data structures. Therefore, even when executed in parallel with non-thread-safe data structures (such as ArrayList), no additional synchronization is needed for a parallel reduction.", "history": "Added in API level 24", "FullName": "public abstract R collect (Collector<? super T, A, R> collector)"}, "concat(java.util.stream.Stream<?extendsT>,java.util.stream.Stream<?extendsT>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the concatenation of the two input streams"]], "Parameters": [["@B_java#util#stream#Stream_E@", "Stream: the first stream"], ["@B_java#util#stream#Stream_E@", "Stream: the second stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream. The resulting stream is ordered if both of the input streams are ordered, and parallel if either of the input streams is parallel. When the resulting stream is closed, the close handlers for both input streams are invoked.", "history": "Added in API level 24", "FullName": "public static Stream<T> concat (Stream<? extends T> a, Stream<? extends T> b)"}, "empty()": {"Returns": [["@B_java#util#stream#Stream_E@", "an empty sequential stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty sequential Stream.", "history": "Added in API level 24", "FullName": "public static Stream<T> empty ()"}, "filter(java.util.function.Predicate<? super T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to each element to determine if it should be included"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream that match the given predicate. This is an", "history": "added in API level 24", "FullName": "public abstract Stream<T> filter (Predicate<? super T> predicate)"}, "generate(java.util.function.Supplier<T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new infinite sequential unordered Stream"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: the Supplier of generated elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential unordered stream where each element is generated by the provided Supplier. This is suitable for generating constant streams, streams of random elements, etc.", "history": "Added in API level 24", "FullName": "public static Stream<T> generate (Supplier<T> s)"}, "sorted(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to be used to compare stream elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator. For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made. This is a", "history": "Added in API level 24", "FullName": "public abstract Stream<T> sorted (Comparator<? super T> comparator)"}, "iterate(T, java.util.function.UnaryOperator<T>)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new sequential Stream"]], "Parameters": [["T", "T: the initial element"], ["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a function to be applied to to the previous element to produce a new element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc. The first element (position 0) in the Stream will be the provided seed. For n > 0, the element at position n, will be the result of applying the function f to the element at position n - 1.", "history": "added in API level 24", "FullName": "public static Stream<T> iterate (T seed, UnaryOperator<T> f)"}, "reduce(java.util.function.BinaryOperator<T>)": {"Returns": [["@B_java#util#Optional_E@", "an @B_java#util#Optional_E@ describing the result of the reduction"]], "Parameters": [["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the result of the reduction is null"]], "SeeAlso": ["@B_java#util#stream#Stream#reduce_E@", "@B_java#util#stream#Stream#min_E@", "@B_java#util#stream#Stream#max_E@"], "Permissions": [], "Description": "Performs a Optional describing the reduced value, if any. This is equivalent to: The accumulator function must be an This is a", "history": "Added in API level 24", "FullName": "public abstract Optional<T> reduce (BinaryOperator<T> accumulator)"}, "filter(java.util.function.Predicate<?superT>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to each element to determine if it should be included"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream that match the given predicate. This is an", "history": "Added in API level 24", "FullName": "public abstract Stream<T> filter (Predicate<? super T> predicate)"}, "builder()": {"Returns": [["@B_java#util#stream#Stream#Builder_E@", "a stream builder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a builder for a Stream.", "history": "Added in API level 24", "FullName": "public static Builder<T> builder ()"}, "map(java.util.function.Function<?superT,?extendsR>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract Stream<R> map (Function<? super T, ? extends R> mapper)"}, "max(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#Optional_E@", "an Optional describing the maximum element of this stream, or an empty Optional if the stream is empty"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a non-interfering, stateless Comparator to compare elements of this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the maximum element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum element of this stream according to the provided Comparator. This is a special case of a This is a", "history": "added in API level 24", "FullName": "public abstract Optional<T> max (Comparator<? super T> comparator)"}, "flatMapToInt(java.util.function.Function<?superT,?extendsjava.util.stream.IntStream>)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: a non-interfering, stateless function to apply to each element which produces a stream of new values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#flatMap_E@"], "Permissions": [], "Description": "Returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is @B_java#util#stream#BaseStream#close_E@ after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream flatMapToInt (Function<? super T, ? extends IntStream> mapper)"}, "reduce(T, java.util.function.BinaryOperator<T>)": {"Returns": [["T", "the result of the reduction"]], "Parameters": [["T", "T: the identity value for the accumulating function"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a The identity value must be an identity for the accumulator function. This means that for all t, accumulator.apply(identity, t) is equal to t. The accumulator function must be an This is a", "history": "added in API level 24", "FullName": "public abstract T reduce (T identity, BinaryOperator<T> accumulator)"}, "allMatch(java.util.function.Predicate<?superT>)": {"Returns": [["boolean", "true if either all elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether all elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean allMatch (Predicate<? super T> predicate)"}, "anyMatch(java.util.function.Predicate<? super T>)": {"Returns": [["boolean", "true if any elements of the stream match the provided predicate, otherwise false"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then false is returned and the predicate is not evaluated. This is a", "history": "added in API level 24", "FullName": "public abstract boolean anyMatch (Predicate<? super T> predicate)"}, "mapToInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an IntStream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream mapToInt (ToIntFunction<? super T> mapper)"}}, "Inheritance": [], "ClassName": "java.util.stream.Stream<T>", "ClassDesc": "A sequence of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using @B_java#util#stream#Stream_E@ and @B_java#util#stream#IntStream_E@: widgets is a Collection<Widget>. We create a stream of Widget objects via @B_java#util#Collection#stream_E@, filter it to produce a stream containing only the red widgets, and then transform it into a stream of int values representing the weight of each red widget. Then this stream is summed to produce a total weight. In addition to Stream, which is a stream of object references, there are primitive specializations for @B_java#util#stream#IntStream_E@, @B_java#util#stream#LongStream_E@, and @B_java#util#stream#DoubleStream_E@, all of which are referred to as \"streams\" and conform to the characteristics and restrictions described here. To perform a computation, stream stream pipeline. A stream pipeline consists of a source (which might be an array, a collection, a generator function, an I/O channel, etc), zero or more intermediate operations (which transform a stream into another stream, such as @B_java#util#stream#Stream#filter_E@), and a terminal operation (which produces a result or side-effect, such as @B_java#util#stream#Stream#count_E@ or @B_java#util#stream#Stream#forEach_E@). Streams are lazy; computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed. Collections and streams, while bearing some superficial similarities, have different goals. Collections are primarily concerned with the efficient management of, and access to, their elements. By contrast, streams do not provide a means to directly access or manipulate their elements, and are instead concerned with declaratively describing their source and the computational operations which will be performed in aggregate on that source. However, if the provided stream operations do not offer the desired functionality, the @B_java#util#stream#BaseStream#iterator_E@ and @B_java#util#stream#BaseStream#spliterator_E@ operations can be used to perform a controlled traversal. A stream pipeline, like the \"widgets\" example above, can be viewed as a query on the stream source. Unless the source was explicitly designed for concurrent modification (such as a @B_java#util#concurrent#ConcurrentHashMap_E@), unpredictable or erroneous behavior may result from modifying the stream source while it is being queried. Most stream operations accept parameters that describe user-specified behavior, such as the lambda expression w -> w.getWeight() passed to mapToInt in the example above. To preserve correct behavior, these behavioral parameters: must be in most cases must be Such parameters are always instances of a @B_java#util#function#Function_E@, and are often lambda expressions or method references. Unless otherwise specified these parameters must be non-null. A stream should be operated on (invoking an intermediate or terminal stream operation) only once. This rules out, for example, \"forked\" streams, where the same source feeds two or more pipelines, or multiple traversals of the same stream. A stream implementation may throw @B_java#lang#IllegalStateException_E@ if it detects that the stream is being reused. However, since some stream operations may return their receiver rather than a new stream object, it may not be possible to detect reuse in all cases. Streams have a @B_java#util#stream#BaseStream#close_E@ method and implement @B_java#lang#AutoCloseable_E@, but nearly all stream instances do not actually need to be closed after use. Generally, only streams whose source is an IO channel (such as those returned by @B_java#nio#file#Files#lines_E@) will require closing. Most streams are backed by collections, arrays, or generating functions, which require no special resource management. (If a stream does require closing, it can be declared as a resource in a try-with-resources statement.) Stream pipelines may execute either sequentially or in @B_java#util#Collection#stream_E@ creates a sequential stream, and @B_java#util#Collection#parallelStream_E@ creates a parallel one.) This choice of execution mode may be modified by the @B_java#util#stream#BaseStream#sequential_E@ or @B_java#util#stream#BaseStream#parallel_E@ methods, and may be queried with the @B_java#util#stream#BaseStream#isParallel_E@ method."}