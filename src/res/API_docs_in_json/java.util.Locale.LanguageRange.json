{"Functions": {"equals(java.lang.Object)": {"Returns": [["boolean", "true if this object's range and weight are the same as the obj's; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object to the specified object. The result is true if and only if the argument is not null and is a LanguageRange object that contains the same range and weight values as this object.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "parse(java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [["@B_java#util#List_E@", "a Language Priority List with customization. The list is modifiable."]], "Parameters": [["@B_java#lang#String_E@", "String: a list of comma-separated language ranges or a list of language ranges in the form of the \"Accept-Language\" header defined in RFC 2616"], ["@B_java#util#Map_E@", "Map: a map containing information to customize language ranges"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if ranges is null"], ["@B_java#lang#IllegalArgumentException_E@", "if a language range or a weight found in the given ranges is ill-formed"]], "SeeAlso": ["@B_java#util#Locale#LanguageRange#parse_E@", "@B_java#util#Locale#LanguageRange#mapEquivalents_E@"], "Permissions": [], "Description": "Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map. This method is equivalent to mapEquivalents(parse(ranges), map).", "history": "Added in API level 26", "FullName": "public static List<Locale.LanguageRange> parse (String ranges, Map<String, List<String>> map)"}, "Locale.LanguageRange(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a language range"], ["double", "double: a weight value between MIN_WEIGHT and MAX_WEIGHT"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given range is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given weight is less than MIN_WEIGHT or greater than MAX_WEIGHT"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a LanguageRange using the given range and weight. Note that no validation is done against the IANA Language Subtag Registry at time of construction.", "history": "Added in API level 26", "FullName": "public Locale.LanguageRange (String range, double weight)"}, "mapEquivalents(java.util.List<java.util.Locale.LanguageRange>,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [["@B_java#util#List_E@", "a new Language Priority List with customization. The list is modifiable."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List"], ["@B_java#util#Map_E@", "Map: a map containing information to customize language ranges"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList is null"]], "SeeAlso": ["@B_java#util#Locale#LanguageRange#parse_E@"], "Permissions": [], "Description": "Generates a new customized Language Priority List using the given priorityList and map. If the given map is empty, this method returns a copy of the given priorityList. In the map, a key represents a language range whereas a value is a list of equivalents of it. '*' cannot be used in the map. Each equivalent language range has the same weight value as its original language range. For example, if a user's Language Priority List consists of five language ranges (\"zh\", \"zh-CN\", \"en\", \"zh-TW\", and \"zh-HK\"), the newly generated Language Priority List which is customized using the above map example will consists of \"zh\", \"zh-Hans\", \"zh-CN\", \"zh-Hans-CN\", \"en\", \"zh-TW\", and \"zh-HK\". \"zh-HK\" and \"zh-TW\" aren't converted to \"zh-Hans-HK\" nor \"zh-Hans-TW\" even if they are included in the Language Priority List. In this example, mapping is used to clearly distinguish Simplified Chinese and Traditional Chinese. If the \"zh\"-to-\"zh\" mapping isn't included in the map, a simple replacement will be performed and the customized list won't include \"zh\" and \"zh-CN\".", "history": "Added in API level 26", "FullName": "public static List<Locale.LanguageRange> mapEquivalents (List<Locale.LanguageRange> priorityList, Map<String, List<String>> map)"}, "getWeight()": {"Returns": [["double", "the weight value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the weight of this LanguageRange.", "history": "Added in API level 26", "FullName": "public double getWeight ()"}, "getRange()": {"Returns": [["@B_java#lang#String_E@", "the language range."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the language range of this LanguageRange.", "history": "Added in API level 26", "FullName": "public String getRange ()"}, "Locale.LanguageRange(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a language range"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given range is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a LanguageRange using the given range. Note that no validation is done against the IANA Language Subtag Registry at time of construction. This is equivalent to LanguageRange(range, MAX_WEIGHT).", "history": "Added in API level 26", "FullName": "public Locale.LanguageRange (String range)"}, "Locale.LanguageRange(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a language range"], ["double", "double: a weight value between MIN_WEIGHT and MAX_WEIGHT"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given range is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given weight is less than MIN_WEIGHT or greater than MAX_WEIGHT"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a LanguageRange using the given range and weight. Note that no validation is done against the IANA Language Subtag Registry at time of construction.", "history": "added in API level 26", "FullName": "public Locale.LanguageRange (String range, double weight)"}, "parse(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "a Language Priority List consisting of language ranges included in the given ranges and their equivalent language ranges if available. The list is modifiable."]], "Parameters": [["@B_java#lang#String_E@", "String: a list of comma-separated language ranges or a list of language ranges in the form of the \"Accept-Language\" header defined in RFC 2616"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if ranges is null"], ["@B_java#lang#IllegalArgumentException_E@", "if a language range or a weight found in the given ranges is ill-formed"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the given ranges to generate a Language Priority List. This method performs a syntactic check for each language range in the given ranges but doesn't do validation using the IANA Language Subtag Registry. The ranges to be given can take one of the following forms: \";q=\", and the default weight value is MAX_WEIGHT when it is omitted. Unlike a weighted list, language ranges in a prioritized list are sorted in the descending order based on its priority. The first language range has the highest priority and meets the user's preference most. In either case, language ranges are sorted in descending order in the Language Priority List based on priority or weight. If a language range appears in the given ranges more than once, only the first one is included on the Language Priority List. The returned list consists of language ranges from the given ranges and their equivalents found in the IANA Language Subtag Registry. For example, if the given ranges is \"Accept-Language: iw,en-us;q=0.7,en;q=0.3\", the elements in the list to be returned are: \"iw\" and \"he\", have the same highest priority in the list. By adding \"he\" to the user's Language Priority List, locale-matching method can find Hebrew as a matching locale (or language tag) even if the application or system offers only \"he\" as a supported locale (or language tag).", "history": "Added in API level 26", "FullName": "public static List<Locale.LanguageRange> parse (String ranges)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.Locale.LanguageRange", "ClassDesc": "This class expresses a Language Range defined in Language Priority List. There are two types of language ranges: basic and extended. In RFC 4647, the syntax of language ranges is expressed in \"en\" (English), \"ja-JP\" (Japanese, Japan), \"*\" (special language range which matches any language tag) are basic language ranges, whereas \"*-CH\" (any languages, Switzerland), \"es-*\" (Spanish, any regions), and \"zh-Hant-*\" (Traditional Chinese, any regions) are extended language ranges."}