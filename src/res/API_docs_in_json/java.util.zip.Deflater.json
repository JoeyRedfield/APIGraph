{"Functions": {"Deflater(int)": {"Returns": [], "Parameters": [["int", "int: the compression level (0-9)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new compressor using the specified compression level. Compressed data will be generated in ZLIB format.", "history": "Added in API level 1", "FullName": "public Deflater (int level)"}, "needsInput()": {"Returns": [["boolean", "true if the input data buffer is empty and setInput() should be called in order to provide more input"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the input data buffer is empty and setInput() should be called in order to provide more input.", "history": "Added in API level 1", "FullName": "public boolean needsInput ()"}, "deflate(byte[], int, int)": {"Returns": [["int", "the actual number of bytes of compressed data written to the output buffer"]], "Parameters": [["byte[]", "byte: the buffer for the compressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes of compressed data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compresses the input data and fills specified buffer with compressed data. Returns actual number of bytes of compressed data. A return value of 0 indicates that @B_java#util#zip#Deflater#needsInput_E@ should be called in order to determine if more input data is required. This method uses @B_java#util#zip#Deflater#NO_FLUSH_E@ as its compression flush mode. An invocation of this method of the form deflater.deflate(b, off, len) yields the same result as the invocation of deflater.deflate(b, off, len, Deflater.NO_FLUSH).", "history": "added in API level 1", "FullName": "public int deflate (byte[] b, int off, int len)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the compressor when garbage is collected.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "deflate(byte[],int,int)": {"Returns": [["int", "the actual number of bytes of compressed data written to the output buffer"]], "Parameters": [["byte[]", "byte: the buffer for the compressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes of compressed data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compresses the input data and fills specified buffer with compressed data. Returns actual number of bytes of compressed data. A return value of 0 indicates that @B_java#util#zip#Deflater#needsInput_E@ should be called in order to determine if more input data is required. This method uses @B_java#util#zip#Deflater#NO_FLUSH_E@ as its compression flush mode. An invocation of this method of the form deflater.deflate(b, off, len) yields the same result as the invocation of deflater.deflate(b, off, len, Deflater.NO_FLUSH).", "history": "Added in API level 1", "FullName": "public int deflate (byte[] b, int off, int len)"}, "deflate(byte[], int, int, int)": {"Returns": [["int", "the actual number of bytes of compressed data written to the output buffer"]], "Parameters": [["byte[]", "byte: the buffer for the compressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes of compressed data"], ["int", "int: the compression flush mode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the flush mode is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Compresses the input data and fills the specified buffer with compressed data. Returns actual number of bytes of data compressed. Compression flush mode is one of the following three modes: @B_java#util#zip#Deflater#NO_FLUSH_E@: allows the deflater to decide how much data to accumulate, before producing output, in order to achieve the best compression (should be used in normal use scenario). A return value of 0 in this flush mode indicates that @B_java#util#zip#Deflater#needsInput_E@ should be called in order to determine if more input data is required. @B_java#util#zip#Deflater#SYNC_FLUSH_E@: all pending output in the deflater is flushed, to the specified output buffer, so that an inflater that works on compressed data can get all input data available so far (In particular the @B_java#util#zip#Deflater#needsInput_E@ returns true after this invocation if enough output space is provided). Flushing with @B_java#util#zip#Deflater#SYNC_FLUSH_E@ may degrade compression for some compression algorithms and so it should be used only when necessary. @B_java#util#zip#Deflater#FULL_FLUSH_E@: all pending output is flushed out as with @B_java#util#zip#Deflater#SYNC_FLUSH_E@. The compression state is reset so that the inflater that works on the compressed output data can restart from this point if previous compressed data has been damaged or if random access is desired. Using @B_java#util#zip#Deflater#FULL_FLUSH_E@ too often can seriously degrade compression. In the case of @B_java#util#zip#Deflater#FULL_FLUSH_E@ or @B_java#util#zip#Deflater#SYNC_FLUSH_E@, if the return value is len, the space available in output buffer b, this method should be invoked again with the same flush parameter and more output space.", "history": "added in API level 19", "FullName": "public int deflate (byte[] b, int off, int len, int flush)"}, "getBytesRead()": {"Returns": [["long", "the total (non-negative) number of uncompressed bytes input so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of uncompressed bytes input so far.", "history": "Added in API level 1", "FullName": "public long getBytesRead ()"}, "setDictionary(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#inflate_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets preset dictionary for compression. A preset dictionary is used when the history buffer can be predetermined. When the data is later uncompressed with Inflater.inflate(), Inflater.getAdler() can be called in order to get the Adler-32 value of the dictionary required for decompression.", "history": "Added in API level 1", "FullName": "public void setDictionary (byte[] b)"}, "getAdler()": {"Returns": [["int", "the ADLER-32 value of the uncompressed data"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ADLER-32 value of the uncompressed data.", "history": "Added in API level 1", "FullName": "public int getAdler ()"}, "Deflater()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new compressor with the default compression level. Compressed data will be generated in ZLIB format.", "history": "Added in API level 1", "FullName": "public Deflater ()"}, "getBytesWritten()": {"Returns": [["long", "the total (non-negative) number of compressed bytes output so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of compressed bytes output so far.", "history": "Added in API level 1", "FullName": "public long getBytesWritten ()"}, "finish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When called, indicates that compression should end with the current contents of the input buffer.", "history": "Added in API level 1", "FullName": "public void finish ()"}, "Deflater(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the compression level (0-9)"], ["boolean", "boolean: if true then use GZIP compatible compression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new compressor using the specified compression level. If 'nowrap' is true then the ZLIB header and checksum fields will not be used in order to support the compression format used in both GZIP and PKZIP.", "history": "added in API level 1", "FullName": "public Deflater (int level, boolean nowrap)"}, "finished()": {"Returns": [["boolean", "true if the end of the compressed data output stream has been reached"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the end of the compressed data output stream has been reached.", "history": "Added in API level 1", "FullName": "public boolean finished ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets deflater so that a new set of input data can be processed. Keeps current compression level and strategy settings.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setInput(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Deflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for compression. This should be called whenever needsInput() returns true indicating that more input data is required.", "history": "Added in API level 1", "FullName": "public void setInput (byte[] b)"}, "setStrategy(int)": {"Returns": [], "Parameters": [["int", "int: the new compression strategy"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the compression strategy is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the compression strategy to the specified value. If the compression strategy is changed, the next invocation of deflate will compress the input available so far with the old strategy (and may be flushed); the new strategy will take effect only after that invocation.", "history": "Added in API level 1", "FullName": "public void setStrategy (int strategy)"}, "setInput(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Deflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for compression. This should be called whenever needsInput() returns true indicating that more input data is required.", "history": "added in API level 1", "FullName": "public void setInput (byte[] b, int off, int len)"}, "setDictionary(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#inflate_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets preset dictionary for compression. A preset dictionary is used when the history buffer can be predetermined. When the data is later uncompressed with Inflater.inflate(), Inflater.getAdler() can be called in order to get the Adler-32 value of the dictionary required for decompression.", "history": "added in API level 1", "FullName": "public void setDictionary (byte[] b, int off, int len)"}, "deflate(byte[])": {"Returns": [["int", "the actual number of bytes of compressed data written to the output buffer"]], "Parameters": [["byte[]", "byte: the buffer for the compressed data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compresses the input data and fills specified buffer with compressed data. Returns actual number of bytes of compressed data. A return value of 0 indicates that @B_java#util#zip#Deflater#needsInput_E@ should be called in order to determine if more input data is required. This method uses @B_java#util#zip#Deflater#NO_FLUSH_E@ as its compression flush mode. An invocation of this method of the form deflater.deflate(b) yields the same result as the invocation of deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH).", "history": "Added in API level 1", "FullName": "public int deflate (byte[] b)"}, "deflate(byte[],int,int,int)": {"Returns": [["int", "the actual number of bytes of compressed data written to the output buffer"]], "Parameters": [["byte[]", "byte: the buffer for the compressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes of compressed data"], ["int", "int: the compression flush mode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the flush mode is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Compresses the input data and fills the specified buffer with compressed data. Returns actual number of bytes of data compressed. Compression flush mode is one of the following three modes: @B_java#util#zip#Deflater#NO_FLUSH_E@: allows the deflater to decide how much data to accumulate, before producing output, in order to achieve the best compression (should be used in normal use scenario). A return value of 0 in this flush mode indicates that @B_java#util#zip#Deflater#needsInput_E@ should be called in order to determine if more input data is required. @B_java#util#zip#Deflater#SYNC_FLUSH_E@: all pending output in the deflater is flushed, to the specified output buffer, so that an inflater that works on compressed data can get all input data available so far (In particular the @B_java#util#zip#Deflater#needsInput_E@ returns true after this invocation if enough output space is provided). Flushing with @B_java#util#zip#Deflater#SYNC_FLUSH_E@ may degrade compression for some compression algorithms and so it should be used only when necessary. @B_java#util#zip#Deflater#FULL_FLUSH_E@: all pending output is flushed out as with @B_java#util#zip#Deflater#SYNC_FLUSH_E@. The compression state is reset so that the inflater that works on the compressed output data can restart from this point if previous compressed data has been damaged or if random access is desired. Using @B_java#util#zip#Deflater#FULL_FLUSH_E@ too often can seriously degrade compression. In the case of @B_java#util#zip#Deflater#FULL_FLUSH_E@ or @B_java#util#zip#Deflater#SYNC_FLUSH_E@, if the return value is len, the space available in output buffer b, this method should be invoked again with the same flush parameter and more output space.", "history": "Added in API level 19", "FullName": "public int deflate (byte[] b, int off, int len, int flush)"}, "getTotalIn()": {"Returns": [["int", "the total number of uncompressed bytes input so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of uncompressed bytes input so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the @B_java#util#zip#Deflater#getBytesRead_E@ method is now the preferred means of obtaining this information.", "history": "Added in API level 1", "FullName": "public int getTotalIn ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined.", "history": "Added in API level 1", "FullName": "public void end ()"}, "Deflater(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the compression level (0-9)"], ["boolean", "boolean: if true then use GZIP compatible compression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new compressor using the specified compression level. If 'nowrap' is true then the ZLIB header and checksum fields will not be used in order to support the compression format used in both GZIP and PKZIP.", "history": "Added in API level 1", "FullName": "public Deflater (int level, boolean nowrap)"}, "setDictionary(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#inflate_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets preset dictionary for compression. A preset dictionary is used when the history buffer can be predetermined. When the data is later uncompressed with Inflater.inflate(), Inflater.getAdler() can be called in order to get the Adler-32 value of the dictionary required for decompression.", "history": "Added in API level 1", "FullName": "public void setDictionary (byte[] b, int off, int len)"}, "setInput(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Deflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for compression. This should be called whenever needsInput() returns true indicating that more input data is required.", "history": "Added in API level 1", "FullName": "public void setInput (byte[] b, int off, int len)"}, "setLevel(int)": {"Returns": [], "Parameters": [["int", "int: the new compression level (0-9)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the compression level is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the compression level to the specified value. If the compression level is changed, the next invocation of deflate will compress the input available so far with the old level (and may be flushed); the new level will take effect only after that invocation.", "history": "Added in API level 1", "FullName": "public void setLevel (int level)"}, "getTotalOut()": {"Returns": [["int", "the total number of compressed bytes output so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of compressed bytes output so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the @B_java#util#zip#Deflater#getBytesWritten_E@ method is now the preferred means of obtaining this information.", "history": "Added in API level 1", "FullName": "public int getTotalOut ()"}}, "Inheritance": [], "ClassName": "java.util.zip.Deflater", "ClassDesc": "This class provides support for general purpose compression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the The following code fragment demonstrates a trivial compression and decompression of a string using"}