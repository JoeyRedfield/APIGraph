{"Functions": {"replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not null. The @B_java#util#HashMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "LinkedHashMap(int,float,boolean)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"], ["boolean", "boolean: the ordering mode - true for access-order, false for insertion-order"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "Added in API level 1", "FullName": "public LinkedHashMap (int initialCapacity, float loadFactor, boolean accessOrder)"}, "LinkedHashMap(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty insertion-ordered", "history": "Added in API level 1", "FullName": "public LinkedHashMap (int initialCapacity)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map. The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "added in API level 26", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "LinkedHashMap(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty insertion-ordered", "history": "Added in API level 1", "FullName": "public LinkedHashMap (int initialCapacity, float loadFactor)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "LinkedHashMap(int, float, boolean)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"], ["boolean", "boolean: the ordering mode - true for access-order, false for insertion-order"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "added in API level 1", "FullName": "public LinkedHashMap (int initialCapacity, float loadFactor, boolean accessOrder)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own @B_java#util#Spliterator_E@ typically provides faster sequential performance but much poorer parallel performance than that of HashMap.", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own @B_java#util#Spliterator_E@ typically provides faster sequential performance but much poorer parallel performance than that of HashMap.", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "LinkedHashMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty insertion-ordered", "history": "Added in API level 1", "FullName": "public LinkedHashMap ()"}, "LinkedHashMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an insertion-ordered", "history": "Added in API level 1", "FullName": "public LinkedHashMap (Map<? extends K, ? extends V> m)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own @B_java#util#Spliterator_E@ typically provides faster sequential performance but much poorer parallel performance than that of HashMap.", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "removeEldestEntry(java.util.Map.Entry<K, V>)": {"Returns": [["boolean", "true if the eldest entry should be removed from the map; false if it should be retained."]], "Parameters": [["@B_java#util#Map#Entry_E@", "Entry: The least recently inserted entry in the map, or if this is an access-ordered map, the least recently accessed entry. This is the entry that will be removed it this method returns true. If the map was empty prior to the put or putAll invocation resulting in this invocation, this will be the entry that was just inserted; in other words, if the map contains a single entry, the eldest entry is also the newest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns Sample use: this override will allow the map to grow up to 100 entries and then delete the eldest entry each time a new entry is added, maintaining a steady state of 100 entries. This method typically does not modify the map in any way, instead allowing the map to modify itself as directed by its return value. It This implementation merely returns", "history": "added in API level 1", "FullName": "protected boolean removeEldestEntry (Entry<K, V> eldest)"}, "removeEldestEntry(java.util.Map.Entry<K,V>)": {"Returns": [["boolean", "true if the eldest entry should be removed from the map; false if it should be retained."]], "Parameters": [["@B_java#util#Map#Entry_E@", "Entry: The least recently inserted entry in the map, or if this is an access-ordered map, the least recently accessed entry. This is the entry that will be removed it this method returns true. If the map was empty prior to the put or putAll invocation resulting in this invocation, this will be the entry that was just inserted; in other words, if the map contains a single entry, the eldest entry is also the newest."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns Sample use: this override will allow the map to grow up to 100 entries and then delete the eldest entry each time a new entry is added, maintaining a steady state of 100 entries. This method typically does not modify the map in any way, instead allowing the map to modify itself as directed by its return value. It This implementation merely returns", "history": "Added in API level 1", "FullName": "protected boolean removeEldestEntry (Entry<K, V> eldest)"}, "LinkedHashMap(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty insertion-ordered", "history": "added in API level 1", "FullName": "public LinkedHashMap (int initialCapacity, float loadFactor)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@", "@B_java#util#HashMap_E@"], "ClassName": "java.util.LinkedHashMap<K, V>", "ClassDesc": "Hash table and linked list implementation of the This implementation spares its clients from the unspecified, generally chaotic ordering provided by @B_java#util#HashMap_E@ (and @B_java#util#Hashtable_E@), without incurring the increased cost associated with @B_java#util#TreeMap_E@. It can be used to produce a copy of a map that has the same order as the original, regardless of the original map's implementation: A special @B_java#util#LinkedHashMap#LinkedHashMap_E@ is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, from least-recently accessed to most-recently (put, putIfAbsent, get, getOrDefault, compute, computeIfAbsent, computeIfPresent, or merge methods results in an access to the corresponding entry (assuming it exists after the invocation completes). The replace methods only result in an access of the entry if the value is replaced. The putAll method generates one entry access for each mapping in the specified map, in the order that key-value mappings are provided by the specified map's entry set iterator. The @B_java#util#LinkedHashMap#removeEldestEntry_E@ method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map. This class provides all of the optional A linked hash map has two parameters that affect its performance: must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be \"wrapped\" using the @B_java#util#Collections#synchronizedMap_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the map:The iterators returned by the fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw The spliterators returned by the spliterator method of the collections returned by all of this class's collection view methods are , fail-fast, and additionally report @B_java#util#Spliterator#ORDERED_E@. Note: The implementation of these spliterators in Android Nougat (API levels 24 and 25) uses the wrong order (inconsistent with the iterators, which use the correct order), despite reporting @B_java#util#Spliterator#ORDERED_E@. You may use the following code fragments to obtain a correctly ordered Spliterator on API level 24 and 25: For a Collection view c = lhm.keySet(), c = lhm.entrySet() or c = lhm.values(), use java.util.Spliterators.spliterator(c, c.spliterator().characteristics()) instead of c.spliterator(). Instead of c.stream() or c.parallelStream(), use java.util.stream.StreamSupport.stream(spliterator, false) to construct a (nonparallel) @B_java#util#stream#Stream_E@ from such a Spliterator. Note that these workarounds are only suggested where lhm is a LinkedHashMap. This class is a member of the"}