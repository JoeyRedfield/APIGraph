{"Functions": {"formatDate(java.util.Date, java.lang.String)": {"Returns": [["", "A formatted date string."]], "Parameters": [["@B_java#util#Date_E@", "The date to format."], ["@B_java#lang#String_E@", "The pattern to use for formatting the date."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given date pattern is invalid."]], "SeeAlso": ["@B_java#text#SimpleDateFormat_E@"], "Permissions": [], "Description": "Formats the given date according to the specified pattern. The pattern must conform to that used by the @B_java#text#SimpleDateFormat_E@ class.", "history": "Added in API level 1", "FullName": "public static String formatDate (Date date, String pattern)"}, "parseDate(java.lang.String, java.lang.String[], java.util.Date)": {"Returns": [["", "the parsed date"]], "Parameters": [["@B_java#lang#String_E@", "the date value to parse"], ["@B_java#lang#String_E@", "the date formats to use"], ["@B_java#util#Date_E@", "During parsing, two digit years will be placed in the range startDate to startDate + 100 years. This value may be null. When null is given as a parameter, year 2000 will be used."]], "Throws": [["@B_org#apache#http#impl#cookie#DateParseException_E@", "if none of the dataFormats could parse the dateValue"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the date value using the given date formats.", "history": "Added in API level 1", "FullName": "public static Date parseDate (String dateValue, String[] dateFormats, Date startDate)"}, "parseDate(java.lang.String, java.lang.String[])": {"Returns": [["", "the parsed date"]], "Parameters": [["@B_java#lang#String_E@", "the date value to parse"], ["@B_java#lang#String_E@", "the date formats to use"]], "Throws": [["@B_org#apache#http#impl#cookie#DateParseException_E@", "if none of the dataFormats could parse the dateValue"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the date value using the given date formats.", "history": "Added in API level 1", "FullName": "public static Date parseDate (String dateValue, String[] dateFormats)"}, "parseDate(java.lang.String)": {"Returns": [["", "the parsed date"]], "Parameters": [["@B_java#lang#String_E@", "the date value to parse"]], "Throws": [["@B_org#apache#http#impl#cookie#DateParseException_E@", "if the value could not be parsed using any of the supported date formats"]], "SeeAlso": [], "Permissions": [], "Description": "Parses a date value. The formats used for parsing the date value are retrieved from the default http params.", "history": "Added in API level 1", "FullName": "public static Date parseDate (String dateValue)"}, "formatDate(java.util.Date)": {"Returns": [["", "An RFC 1123 formatted date string."]], "Parameters": [["@B_java#util#Date_E@", "The date to format."]], "Throws": [], "SeeAlso": ["@B_org#apache#http#impl#cookie#DateUtils_E@"], "Permissions": [], "Description": "Formats the given date according to the RFC 1123 pattern.", "history": "Added in API level 1", "FullName": "public static String formatDate (Date date)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.cookie.DateUtils", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A utility class for parsing and formatting HTTP dates as used in cookies and other headers. This class handles dates as defined by RFC 2616 section 3.3.1 as well as some other common non-standard formats."}