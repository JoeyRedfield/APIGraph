{"Functions": {"getSocket()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected Socket getSocket ()"}, "getRemoteAddress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public InetAddress getRemoteAddress ()"}, "getRemotePort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getRemotePort ()"}, "bind(java.net.Socket, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void bind (Socket socket, HttpParams params)"}, "SocketHttpClientConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SocketHttpClientConnection ()"}, "getLocalAddress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public InetAddress getLocalAddress ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this connection gracefully. This method will attempt to flush the transmitter's internal buffer prior to closing the underlying socket. This method MUST NOT be called from a different thread to force shutdown of the connection. Use @B_org#apache#http#HttpConnection#shutdown_E@ instead.", "history": "Added in API level 1", "FullName": "public void close ()"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Force-closes this connection. This is the only method of a connection which may be called from a different thread to terminate the connection. This method will not attempt to flush the transmitter's internal buffer prior to closing the underlying socket.", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "isOpen()": {"Returns": [["", "true if it is open, false if it is closed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this connection is open.", "history": "Added in API level 1", "FullName": "public boolean isOpen ()"}, "assertNotOpen()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void assertNotOpen ()"}, "assertOpen()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void assertOpen ()"}, "createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected SessionInputBuffer createSessionInputBuffer (Socket socket, int buffersize, HttpParams params)"}, "setSocketTimeout(int)": {"Returns": [], "Parameters": [["int", "timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the socket timeout value.", "history": "Added in API level 1", "FullName": "public void setSocketTimeout (int timeout)"}, "createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected SessionOutputBuffer createSessionOutputBuffer (Socket socket, int buffersize, HttpParams params)"}, "getSocketTimeout()": {"Returns": [["", "positive value in milliseconds if a timeout is set, 0 if timeout is disabled or -1 if timeout is undefined."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket timeout value.", "history": "Added in API level 1", "FullName": "public int getSocketTimeout ()"}, "getLocalPort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getLocalPort ()"}}, "Inheritance": ["@B_org#apache#http#impl#AbstractHttpClientConnection_E@"], "ClassName": "org.apache.http.impl.SocketHttpClientConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Implementation of a client-side HTTP connection that can be bound to a network Socket in order to receive and transmit data."}