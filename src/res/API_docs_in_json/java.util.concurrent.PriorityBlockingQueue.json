{"Functions": {"drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "PriorityBlockingQueue(int,java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["int", "int: the initial capacity for this priority queue"], ["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this priority queue. If null, the Comparable of the elements will be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if initialCapacity is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to the specified comparator.", "history": "Added in API level 1", "FullName": "public PriorityBlockingQueue (int initialCapacity, Comparator<? super E> comparator)"}, "PriorityBlockingQueue(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this priority queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if elements of the specified collection cannot be compared to one another according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityBlockingQueue containing the elements in the specified collection. If the specified collection is a @B_java#util#SortedSet_E@ or a @B_java#util#PriorityQueue_E@, this priority queue will be ordered according to the same ordering. Otherwise, this priority queue will be ordered according to the", "history": "Added in API level 1", "FullName": "public PriorityBlockingQueue (Collection<? extends E> c)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never return false.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "Integer.MAX_VALUE always"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained.", "history": "Added in API level 1", "FullName": "public int remainingCapacity ()"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically removes all of the elements from this queue. The queue will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true (as specified by @B_java#util#concurrent#BlockingQueue#offer_E@)"]], "Parameters": [["E", "E: the element to add"], ["long", "long: This parameter is ignored as the method never blocks"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: This parameter is ignored as the method never blocks"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block or return false.", "history": "Added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this queue. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this queue. The iterator does not return the elements in any particular order. The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "PriorityBlockingQueue(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity for this priority queue"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if initialCapacity is less than 1"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to their", "history": "Added in API level 1", "FullName": "public PriorityBlockingQueue (int initialCapacity)"}, "poll()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array. The returned array elements are in no particular order. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the @B_java#util#concurrent#PriorityBlockingQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "Added in API level 1", "FullName": "public int size ()"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the elements in this queue, or null if this queue uses the", "history": "Added in API level 1", "FullName": "public Comparator<? super E> comparator ()"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.", "history": "Added in API level 1", "FullName": "public E take ()"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block.", "history": "Added in API level 1", "FullName": "public void put (E e)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue. The returned array elements are in no particular order. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "PriorityBlockingQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PriorityBlockingQueue with the default initial capacity (11) that orders its elements according to their", "history": "Added in API level 1", "FullName": "public PriorityBlockingQueue ()"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true (as specified by @B_java#util#concurrent#BlockingQueue#offer_E@)"]], "Parameters": [["E", "E: the element to add"], ["long", "long: This parameter is ignored as the method never blocks"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: This parameter is ignored as the method never blocks"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block or return false.", "history": "added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with elements currently in the priority queue according to the priority queue's ordering"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this priority queue.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.PriorityBlockingQueue<E>", "ClassDesc": "An unbounded @B_java#util#PriorityQueue_E@ and supplies blocking retrieval operations. While this queue is logically unbounded, attempted additions may fail due to resource exhaustion (causing OutOfMemoryError). This class does not permit null elements. A priority queue relying on ClassCastException). This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces. The Iterator provided in method @B_java#util#concurrent#PriorityBlockingQueue#iterator_E@ is not guaranteed to traverse the elements of the PriorityBlockingQueue in any particular order. If you need ordered traversal, consider using Arrays.sort(pq.toArray()). Also, method drainTo can be used to remove some or all elements in priority order and place them in another collection. Operations on this class make no guarantees about the ordering of elements with equal priority. If you need to enforce an ordering, you can define custom classes or comparators that use a secondary key to break ties in primary priority values. For example, here is a class that applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a new FIFOEntry(anEntry) instead of a plain entry object."}