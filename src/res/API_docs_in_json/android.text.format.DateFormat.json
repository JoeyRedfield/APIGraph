{"Functions": {"format(java.lang.CharSequence,long)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["long", "long: in milliseconds since Jan 1, 1970 GMT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a CharSequence containing the requested date.", "history": "Added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, long inTimeInMillis)"}, "getDateFormatOrder(android.content.Context)": {"Returns": [["char[]", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current date format stored as a char array. Returns a 3 element array containing the day ('d'), month ('M'), and year ('y')) in the order specified by the user's format preference. Note that this order is", "history": "Added in API level 3", "FullName": "public static char[] getDateFormatOrder (Context context)"}, "getBestDateTimePattern(java.util.Locale,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a string pattern suitable for use with @B_java#text#SimpleDateFormat_E@."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale into which the skeleton should be localized"], ["@B_java#lang#String_E@", "String: a skeleton as described above"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the best possible localized form of the given skeleton for the given locale. A skeleton is similar to, and uses the same format characters as, a Unicode One difference is that order is irrelevant. For example, \"MMMMd\" will return \"MMMM d\" in the en_US locale, but \"d. MMMM\" in the de_CH locale. Note also in that second example that the necessary punctuation for German was added. For the same input in es_ES, we'd have even more extra text: \"d 'de' MMMM\". This method will automatically correct for grammatical necessity. Given the same \"MMMMd\" input, this method will return \"d LLLL\" in the fa_IR locale, where stand-alone months are necessary. Lengths are preserved where meaningful, so \"Md\" would give a different result to \"MMMd\", say, except in a locale such as ja_JP where there is only one length of month. This method will only return patterns that are in CLDR, and is useful whenever you know what elements you want in your format string but don't want to make your code specific to any one locale.", "history": "Added in API level 18", "FullName": "public static String getBestDateTimePattern (Locale locale, String skeleton)"}, "getTimeFormat(android.content.Context)": {"Returns": [["@B_java#text#DateFormat_E@", "the @B_java#text#DateFormat_E@ object that properly formats the time."]], "Parameters": [["@B_android#content#Context_E@", "Context: the application context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#text#DateFormat_E@ object that can format the time according to the context's locale and the user's 12-/24-hour clock preference.", "history": "Added in API level 3", "FullName": "public static DateFormat getTimeFormat (Context context)"}, "format(java.lang.CharSequence, java.util.Date)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["@B_java#util#Date_E@", "Date: the date to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a @B_java#util#Date_E@ object, returns a CharSequence containing the requested date.", "history": "added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, Date inDate)"}, "is24HourFormat(android.content.Context)": {"Returns": [["boolean", "true if 24 hour time format is selected, false otherwise."]], "Parameters": [["@B_android#content#Context_E@", "Context: the context to use for the content resolver"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if times should be formatted as 24 hour times, false if times should be formatted as 12 hour (AM/PM) times. Based on the user's chosen locale and other preferences.", "history": "Added in API level 3", "FullName": "public static boolean is24HourFormat (Context context)"}, "getLongDateFormat(android.content.Context)": {"Returns": [["@B_java#text#DateFormat_E@", "the @B_java#text#DateFormat_E@ object that formats the date in long form."]], "Parameters": [["@B_android#content#Context_E@", "Context: the application context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#text#DateFormat_E@ object that can format the date in long form (such as Monday, January 3, 2000) for the context's locale.", "history": "Added in API level 3", "FullName": "public static DateFormat getLongDateFormat (Context context)"}, "getMediumDateFormat(android.content.Context)": {"Returns": [["@B_java#text#DateFormat_E@", "the @B_java#text#DateFormat_E@ object that formats the date in long form."]], "Parameters": [["@B_android#content#Context_E@", "Context: the application context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#text#DateFormat_E@ object that can format the date in medium form (such as Jan 3, 2000) for the context's locale.", "history": "Added in API level 3", "FullName": "public static DateFormat getMediumDateFormat (Context context)"}, "format(java.lang.CharSequence,java.util.Calendar)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["@B_java#util#Calendar_E@", "Calendar: the date to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a @B_java#util#Calendar_E@ object, returns a CharSequence containing the requested date.", "history": "Added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, Calendar inDate)"}, "getDateFormat(android.content.Context)": {"Returns": [["@B_java#text#DateFormat_E@", "the @B_java#text#DateFormat_E@ object that properly formats the date."]], "Parameters": [["@B_android#content#Context_E@", "Context: the application context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#text#DateFormat_E@ object that can format the date in short form according to the context's locale.", "history": "Added in API level 3", "FullName": "public static DateFormat getDateFormat (Context context)"}, "format(java.lang.CharSequence, long)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["long", "long: in milliseconds since Jan 1, 1970 GMT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a CharSequence containing the requested date.", "history": "added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, long inTimeInMillis)"}, "DateFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public DateFormat ()"}, "format(java.lang.CharSequence, java.util.Calendar)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["@B_java#util#Calendar_E@", "Calendar: the date to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a @B_java#util#Calendar_E@ object, returns a CharSequence containing the requested date.", "history": "added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, Calendar inDate)"}, "format(java.lang.CharSequence,java.util.Date)": {"Returns": [["@B_java#lang#CharSequence_E@", "a @B_java#lang#CharSequence_E@ containing the requested text"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the format string, as described in @B_android#text#format#DateFormat_E@"], ["@B_java#util#Date_E@", "Date: the date to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a format string and a @B_java#util#Date_E@ object, returns a CharSequence containing the requested date.", "history": "Added in API level 3", "FullName": "public static CharSequence format (CharSequence inFormat, Date inDate)"}}, "Inheritance": [], "ClassName": "android.text.format.DateFormat", "ClassDesc": "Utility class for producing strings with formatted date/time. Most callers should avoid supplying their own format strings to this class' format methods and rely on the correctly localized ones supplied by the system. This class' factory methods return appropriately-localized @B_java#text#DateFormat_E@ instances, suitable for both formatting and parsing dates. For the canonical documentation of format strings, see @B_java#text#SimpleDateFormat_E@. In cases where the system does not provide a suitable pattern, this class offers the @B_android#text#format#DateFormat#getBestDateTimePattern_E@ method. The format methods in this class implement a subset of Unicode acdEHhLKkLMmsyz. Up to API level 17, only adEhkMmszy were supported. Note that this class incorrectly implements k as if it were H for backwards compatibility. See @B_java#text#SimpleDateFormat_E@ for more documentation about patterns, or if you need a more complete or correct implementation. Note that the non-format methods in this class are implemented by SimpleDateFormat."}