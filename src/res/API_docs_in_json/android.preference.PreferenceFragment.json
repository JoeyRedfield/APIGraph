{"Functions": {"onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#app#Fragment#onCreateView_E@ and before @B_android#app#Fragment#onViewStateRestored_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onActivityCreated (Bundle savedInstanceState)"}, "onActivityResult(int,int,android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the result from a previous call to @B_android#app#Fragment#startActivityForResult_E@. This follows the related Activity API as described there in @B_android#app#Activity#onActivityResult_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onActivityResult (int requestCode, int resultCode, Intent data)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStop ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer in use. This is called after @B_android#app#Fragment#onStop_E@ and before @B_android#app#Fragment#onDetach_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroy ()"}, "findPreference(java.lang.CharSequence)": {"Returns": [["@B_android#preference#Preference_E@", "The @B_android#preference#Preference_E@ with the key, or null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The key of the preference to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#preference#PreferenceGroup#findPreference_E@"], "Permissions": [], "Description": "Finds a @B_android#preference#Preference_E@ based on its key.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public Preference findPreference (CharSequence key)"}, "addPreferencesFromResource(int)": {"Returns": [], "Parameters": [["int", "int: The XML resource ID to inflate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates the given XML resource and adds the preference hierarchy to the current preference hierarchy.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void addPreferencesFromResource (int preferencesResId)"}, "onViewCreated(android.view.View,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View returned by @B_android#preference#PreferenceFragment#onCreateView_E@."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called immediately after @B_android#app#Fragment#onCreateView_E@ has returned, but before any saved state has been restored in to the view. This gives subclasses a chance to initialize themselves once they know their view hierarchy has been completely created. The fragment's view hierarchy is not however attached to its parent at this point.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public void onViewCreated (View view, Bundle savedInstanceState)"}, "setPreferenceScreen(android.preference.PreferenceScreen)": {"Returns": [], "Parameters": [["@B_android#preference#PreferenceScreen_E@", "PreferenceScreen: The root @B_android#preference#PreferenceScreen_E@ of the preference hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the root of the preference hierarchy that this fragment is showing.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setPreferenceScreen (PreferenceScreen preferenceScreen)"}, "PreferenceFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 11", "FullName": "public PreferenceFragment ()"}, "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {"Returns": [["@B_android#view#View_E@", "Return the View for the fragment's UI, or null."]], "Parameters": [["@B_android#view#LayoutInflater_E@", "LayoutInflater: The LayoutInflater object that can be used to inflate any views in the fragment,"], ["@B_android#view#ViewGroup_E@", "ViewGroup: This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to have the fragment instantiate its user interface view. This is optional, and non-graphical fragments can return null (which is the default implementation). This will be called between @B_android#app#Fragment#onCreate_E@ and @B_android#app#Fragment#onActivityCreated_E@. If you return a View from here, you will later be called in @B_android#app#Fragment#onDestroyView_E@ when the view is being released.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#app#Fragment#onStop_E@ and before @B_android#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroyView ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStart ()"}, "onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#preference#PreferenceScreen_E@", "PreferenceScreen no parameter comment"], ["@B_android#preference#Preference_E@", "Preference no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean onPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference)"}, "addPreferencesFromIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The @B_android#content#Intent_E@ to query activities."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds preferences from activities that match the given @B_android#content#Intent_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void addPreferencesFromIntent (Intent intent)"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#app#Fragment#onCreate_E@, @B_android#app#Fragment#onCreateView_E@, and @B_android#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onSaveInstanceState (Bundle outState)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#app#Fragment#onAttach_E@ and before @B_android#app#Fragment#onCreateView_E@, but is not called if the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@). Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#app#Fragment#onActivityCreated_E@. If your app's targetSdkVersion is @B_android#os#Build#VERSION_CODES#M_E@ or lower, child fragments being restored from the savedInstanceState are restored after onCreate returns. When targeting @B_android#os#Build#VERSION_CODES#N_E@ or above and running on an N or newer platform version they are restored by Fragment.onCreate. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCreate (Bundle savedInstanceState)"}, "getPreferenceScreen()": {"Returns": [["@B_android#preference#PreferenceScreen_E@", "The @B_android#preference#PreferenceScreen_E@ that is the root of the preference hierarchy."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the root of the preference hierarchy that this fragment is showing.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public PreferenceScreen getPreferenceScreen ()"}, "getPreferenceManager()": {"Returns": [["@B_android#preference#PreferenceManager_E@", "The @B_android#preference#PreferenceManager_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#preference#PreferenceManager_E@ used by this fragment.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public PreferenceManager getPreferenceManager ()"}, "onActivityResult(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Receive the result from a previous call to @B_android#app#Fragment#startActivityForResult_E@. This follows the related Activity API as described there in @B_android#app#Activity#onActivityResult_E@.", "history": "added in API level 11", "FullName": "public void onActivityResult (int requestCode, int resultCode, Intent data)"}}, "Inheritance": ["@B_android#app#Fragment_E@"], "ClassName": "android.preference.PreferenceFragment", "ClassDesc": "Use the Shows a hierarchy of @B_android#preference#Preference_E@ objects as lists. These preferences will automatically save to @B_android#content#SharedPreferences_E@ as the user interacts with them. To retrieve an instance of @B_android#content#SharedPreferences_E@ that the preference hierarchy in this fragment will use, call @B_android#preference#PreferenceManager#getDefaultSharedPreferences_E@ with a context in the same package as this fragment. Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. A @B_android#preference#PreferenceScreen_E@ object should be at the top of the preference hierarchy. Furthermore, subsequent @B_android#preference#PreferenceScreen_E@ in the hierarchy denote a screen break--that is the preferences contained within subsequent @B_android#preference#PreferenceScreen_E@ should be shown on another screen. The preference framework handles showing these other screens from the preference hierarchy. The preference hierarchy can be formed in multiple ways: From an XML file specifying the hierarchy From different @B_android#app#Activity_E@ that each specify its own preferences in an XML file via @B_android#app#Activity_E@ meta-data From an object hierarchy rooted with @B_android#preference#PreferenceScreen_E@ To inflate from XML, use the @B_android#preference#PreferenceFragment#addPreferencesFromResource_E@. The root element should be a @B_android#preference#PreferenceScreen_E@. Subsequent elements can point to actual @B_android#preference#Preference_E@ subclasses. As mentioned above, subsequent @B_android#preference#PreferenceScreen_E@ in the hierarchy will result in the screen break. To specify an @B_android#content#Intent_E@ to query @B_android#app#Activity_E@ that each have preferences, use @B_android#preference#PreferenceFragment#addPreferencesFromIntent_E@. Each @B_android#app#Activity_E@ can specify meta-data in the manifest (via the key @B_android#preference#PreferenceManager#METADATA_KEY_PREFERENCES_E@) that points to an XML resource. These XML resources will be inflated into a single preference hierarchy and shown by this fragment. To specify an object hierarchy rooted with @B_android#preference#PreferenceScreen_E@, use @B_android#preference#PreferenceFragment#setPreferenceScreen_E@. As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see @B_android#preference#PreferenceFragment#onPreferenceTreeClick_E@."}