{"Functions": {"setPrinter(android.util.Printer)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer: the printer associated with this layout"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#getPrinter_E@"], "Permissions": [], "Description": "Set the printer that will log diagnostics from this layout. The default value is created by @B_android#util#LogPrinter_E@.", "history": "added in version 24.2.0", "FullName": "void setPrinter (Printer printer)"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly.", "history": "", "FullName": "void requestLayout ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "", "FullName": "protected void onDraw (Canvas canvas)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#v7#widget#GridLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "GridLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 24.2.0", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "getUseDefaultMargins()": {"Returns": [["boolean", "true if default margins should be allocated"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setUseDefaultMargins_E@"], "Permissions": [], "Description": "Returns whether or not this GridLayout will allocate default margins when no corresponding layout parameters are defined.", "history": "added in version 24.2.0", "FullName": "boolean getUseDefaultMargins ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthSpec, int heightSpec)"}, "spec(int)": {"Returns": [["@B_android#support#v7#widget#GridLayout#Spec_E@", "no returns description in source"]], "Parameters": [["int", "int: the start index"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#spec_E@"], "Permissions": [], "Description": "Return a Spec, spec, where: spec.span = [start, start + 1] To leave the start index undefined, use the value @B_android#support#v7#widget#GridLayout#UNDEFINED_E@.", "history": "added in version 24.2.0", "FullName": "GridLayout.Spec spec (int start)"}, "setAlignmentMode(int)": {"Returns": [], "Parameters": [["int", "int: either @B_android#support#v7#widget#GridLayout#ALIGN_BOUNDS_E@ or @B_android#support#v7#widget#GridLayout#ALIGN_MARGINS_E@"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout_E@", "@B_android#support#v7#widget#GridLayout#getAlignmentMode_E@"], "Permissions": [], "Description": "Sets the alignment mode to be used for all of the alignments between the children of this container. The default value of this property is @B_android#support#v7#widget#GridLayout#ALIGN_MARGINS_E@.", "history": "added in version 24.2.0", "FullName": "void setAlignmentMode (int alignmentMode)"}, "spec(int, int)": {"Returns": [["@B_android#support#v7#widget#GridLayout#Spec_E@", "no returns description in source"]], "Parameters": [["int", "int: the start"], ["int", "int: the size"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#spec_E@"], "Permissions": [], "Description": "Return a Spec, spec, where: spec.span = [start, start + size] To leave the start index undefined, use the value @B_android#support#v7#widget#GridLayout#UNDEFINED_E@.", "history": "added in version 24.2.0", "FullName": "GridLayout.Spec spec (int start, int size)"}, "getColumnCount()": {"Returns": [["int", "the current number of columns"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setColumnCount_E@", "@B_android#support#v7#widget#GridLayout#LayoutParams#columnSpec_E@"], "Permissions": [], "Description": "Returns the current number of columns. This is either the last value that was set with @B_android#support#v7#widget#GridLayout#setColumnCount_E@ or, if no such value was set, the maximum value of each the upper bounds defined in @B_android#support#v7#widget#GridLayout#LayoutParams#columnSpec_E@.", "history": "added in version 24.2.0", "FullName": "int getColumnCount ()"}, "setColumnCount(int)": {"Returns": [], "Parameters": [["int", "int: the number of columns."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#getColumnCount_E@", "@B_android#support#v7#widget#GridLayout#LayoutParams#columnSpec_E@"], "Permissions": [], "Description": "ColumnCount is used only to generate default column/column indices when they are not specified by a component's layout parameters.", "history": "added in version 24.2.0", "FullName": "void setColumnCount (int columnCount)"}, "spec(int, int, float)": {"Returns": [["@B_android#support#v7#widget#GridLayout#Spec_E@", "no returns description in source"]], "Parameters": [["int", "int: the start"], ["int", "int: the size"], ["float", "float: the weight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to: spec(start, 1, default_alignment, weight) - where default_alignment is specified in @B_android#widget#GridLayout#LayoutParams_E@.", "history": "added in version 24.2.0", "FullName": "GridLayout.Spec spec (int start, int size, float weight)"}, "setRowCount(int)": {"Returns": [], "Parameters": [["int", "int: the number of rows"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#getRowCount_E@", "@B_android#support#v7#widget#GridLayout#LayoutParams#rowSpec_E@"], "Permissions": [], "Description": "RowCount is used only to generate default row/column indices when they are not specified by a component's layout parameters.", "history": "added in version 24.2.0", "FullName": "void setRowCount (int rowCount)"}, "GridLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "GridLayout (Context context)"}, "setRowOrderPreserved(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to force GridLayout to respect the order of row boundaries"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#isRowOrderPreserved_E@"], "Permissions": [], "Description": "When this property is true, GridLayout is forced to place the row boundaries so that their associated grid indices are in ascending order in the view. When this property is false GridLayout is at liberty to place the vertical row boundaries in whatever order best fits the given constraints. The default value of this property is true.", "history": "added in version 24.2.0", "FullName": "void setRowOrderPreserved (boolean rowOrderPreserved)"}, "resolveSizeAndState(int, int, int)": {"Returns": [["", "Size information bit mask as defined by @B_android#view#View#MEASURED_SIZE_MASK_E@ and @B_android#support#v7#widget#GridLayout#MEASURED_STATE_TOO_SMALL_E@."]], "Parameters": [["int", "How big the view wants to be"], ["int", "Constraints imposed by the parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. Will take the desired size, unless a different size is imposed by the constraints. The returned value is a compound integer, with the resolved size in the @B_android#view#View#MEASURED_SIZE_MASK_E@ bits and optionally the bit @B_android#support#v7#widget#GridLayout#MEASURED_STATE_TOO_SMALL_E@ set if the resulting size is smaller than the size the view wants to be.", "history": "", "FullName": "public static int resolveSizeAndState (int size, int measureSpec, int childMeasuredState)"}, "isColumnOrderPreserved()": {"Returns": [["boolean", "true if column boundaries must appear in the order of their indices, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setColumnOrderPreserved_E@"], "Permissions": [], "Description": "Returns whether or not column boundaries are ordered by their grid indices.", "history": "added in version 24.2.0", "FullName": "boolean isColumnOrderPreserved ()"}, "getOrientation()": {"Returns": [["int", "either @B_android#support#v7#widget#GridLayout#HORIZONTAL_E@ or @B_android#support#v7#widget#GridLayout#VERTICAL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setOrientation_E@"], "Permissions": [], "Description": "Returns the current orientation.", "history": "added in version 24.2.0", "FullName": "int getOrientation ()"}, "setColumnOrderPreserved(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: use true to force GridLayout to respect the order of column boundaries."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#isColumnOrderPreserved_E@"], "Permissions": [], "Description": "When this property is true, GridLayout is forced to place the column boundaries so that their associated grid indices are in ascending order in the view. When this property is false GridLayout is at liberty to place the horizontal column boundaries in whatever order best fits the given constraints. The default value of this property is true.", "history": "added in version 24.2.0", "FullName": "void setColumnOrderPreserved (boolean columnOrderPreserved)"}, "isRowOrderPreserved()": {"Returns": [["boolean", "true if row boundaries must appear in the order of their indices, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setRowOrderPreserved_E@"], "Permissions": [], "Description": "Returns whether or not row boundaries are ordered by their grid indices.", "history": "added in version 24.2.0", "FullName": "boolean isRowOrderPreserved ()"}, "spec(int, float)": {"Returns": [["@B_android#support#v7#widget#GridLayout#Spec_E@", "no returns description in source"]], "Parameters": [["int", "int: the start"], ["float", "float: the weight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to: spec(start, 1, weight).", "history": "added in version 24.2.0", "FullName": "GridLayout.Spec spec (int start, float weight)"}, "getAlignmentMode()": {"Returns": [["int", "the alignment mode; either @B_android#support#v7#widget#GridLayout#ALIGN_BOUNDS_E@ or @B_android#support#v7#widget#GridLayout#ALIGN_MARGINS_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout_E@", "@B_android#support#v7#widget#GridLayout#setAlignmentMode_E@"], "Permissions": [], "Description": "Returns the alignment mode.", "history": "added in version 24.2.0", "FullName": "int getAlignmentMode ()"}, "isLayoutRtl(android.view.View)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected static boolean isLayoutRtl (View view)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#GridLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "", "FullName": "GridLayout.LayoutParams generateDefaultLayoutParams ()"}, "setUseDefaultMargins(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: use true to make GridLayout allocate default margins"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#getUseDefaultMargins_E@", "@B_android#support#v7#widget#GridLayout#setAlignmentMode_E@", "_E@"], "Permissions": [], "Description": "When true, GridLayout allocates default margins around children based on the child's visual characteristics. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. When false, the default value of all margins is zero. When setting to true, consider setting the value of the @B_android#support#v7#widget#GridLayout#setAlignmentMode_E@ property to @B_android#support#v7#widget#GridLayout#ALIGN_BOUNDS_E@. The default value of this property is false.", "history": "added in version 24.2.0", "FullName": "void setUseDefaultMargins (boolean useDefaultMargins)"}, "getRowCount()": {"Returns": [["int", "the current number of rows"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setRowCount_E@", "@B_android#support#v7#widget#GridLayout#LayoutParams#rowSpec_E@"], "Permissions": [], "Description": "Returns the current number of rows. This is either the last value that was set with @B_android#support#v7#widget#GridLayout#setRowCount_E@ or, if no such value was set, the maximum value of each the upper bounds defined in @B_android#support#v7#widget#GridLayout#LayoutParams#rowSpec_E@.", "history": "added in version 24.2.0", "FullName": "int getRowCount ()"}, "setOrientation(int)": {"Returns": [], "Parameters": [["int", "int: either @B_android#support#v7#widget#GridLayout#HORIZONTAL_E@ or @B_android#support#v7#widget#GridLayout#VERTICAL_E@"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#getOrientation_E@"], "Permissions": [], "Description": "GridLayout uses the orientation property for two purposes: To control the 'direction' in which default row/column indices are generated when they are not specified in a component's layout parameters. To control which axis should be processed first during the layout operation: when orientation is @B_android#support#v7#widget#GridLayout#HORIZONTAL_E@ the horizontal axis is laid out first. The order in which axes are laid out is important if, for example, the height of one of GridLayout's children is dependent on its width - and its width is, in turn, dependent on the widths of other components. If your layout contains a @B_android#widget#TextView_E@ (or derivative: Button, EditText, CheckBox, etc.) which is in multi-line mode (the default) it is normally best to leave GridLayout's orientation as HORIZONTAL - because TextView is capable of deriving its height for a given width, but not the other way around. Other than the effects above, orientation does not affect the actual layout operation of GridLayout, so it's fine to leave GridLayout in HORIZONTAL mode even if the height of the intended layout greatly exceeds its width. The default value of this property is @B_android#support#v7#widget#GridLayout#HORIZONTAL_E@.", "history": "added in version 24.2.0", "FullName": "void setOrientation (int orientation)"}, "getPrinter()": {"Returns": [["@B_android#util#Printer_E@", "the printer associated with this view"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayout#setPrinter_E@"], "Permissions": [], "Description": "Return the printer that will log diagnostics from this layout.", "history": "added in version 24.2.0", "FullName": "Printer getPrinter ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v7.widget.GridLayout", "ClassDesc": "A layout that places its children in a rectangular grid. The grid is composed of a set of infinitely thin lines that separate the viewing area into cells. Throughout the API, grid lines are referenced by grid indices. A grid with N columns has N + 1 grid indices that run from 0 through N inclusive. Regardless of how GridLayout is configured, grid index 0 is fixed to the leading edge of the container and grid index N is fixed to its trailing edge (after padding is taken into account). @B_android#support#v7#widget#GridLayout#LayoutParams#rowSpec_E@ and @B_android#support#v7#widget#GridLayout#LayoutParams#columnSpec_E@ layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. @B_android#support#v7#widget#GridLayout#setOrientation_E@, @B_android#support#v7#widget#GridLayout#setRowCount_E@ and @B_android#support#v7#widget#GridLayout#setColumnCount_E@ properties. https:##developer#android#com@B_android#widget#Space_E@ view or by setting the https:##developer#android#com@B_android#view#ViewGroup#MarginLayoutParams#leftMargin_E@, https:##developer#android#com@B_android#view#ViewGroup#MarginLayoutParams#topMargin_E@, https:##developer#android#com@B_android#view#ViewGroup#MarginLayoutParams#rightMargin_E@ and https:##developer#android#com@B_android#view#ViewGroup#MarginLayoutParams#bottomMargin_E@ layout parameters. When the @B_android#support#v7#widget#GridLayout#setUseDefaultMargins_E@ property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the @B_android#support#v7#widget#GridLayout#LayoutParams#setGravity_E@ property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as flexible in that direction. If no weight or alignment was set, the component is instead assumed to be inflexible. Multiple components in the same row or column group are considered to act in parallel. Such a group is flexible only if all of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in series. The composite group made of these two elements is flexible if one of its elements is flexible. To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its right and bottom edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. https:##developer#android#com@B_android#view#View#GONE_E@, as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. These statements apply equally to rows as well as columns, and to groups of rows or columns. See @B_android#support#v7#widget#GridLayout#LayoutParams_E@ for a full description of the layout parameters used by GridLayout."}