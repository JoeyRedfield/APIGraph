{"Functions": {"getSpecificationVersion()": {"Returns": [["@B_java#lang#String_E@", "the specification version, null is returned if it is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the version number of the specification that this package implements. This version string must be a sequence of nonnegative decimal integers separated by \".\"'s and may have leading zeros. When version strings are compared the most significant numbers are compared.", "history": "Added in API level 1", "FullName": "public String getSpecificationVersion ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation of the package."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of this Package. Its value is the string \"package \" and the package name. If the package title is defined it is appended. If the package version is defined it is appended.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getPackage(java.lang.String)": {"Returns": [["@B_java#lang#Package_E@", "the package of the requested name. It may be null if no package information is available from the archive or codebase."]], "Parameters": [["@B_java#lang#String_E@", "String: a package name, for example, java.lang."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find a package by name in the callers ClassLoader instance. The callers ClassLoader instance is used to find the package instance corresponding to the named class. If the callers ClassLoader instance is null then the set of packages loaded by the system ClassLoader instance is searched to find the named package. Packages have attributes for versions and specifications only if the class loader created the package instance with the appropriate attributes. Typically, those attributes are defined in the manifests that accompany the classes.", "history": "Added in API level 1", "FullName": "public static Package getPackage (String name)"}, "getImplementationTitle()": {"Returns": [["@B_java#lang#String_E@", "the title of the implementation, null is returned if it is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the title of this package.", "history": "Added in API level 1", "FullName": "public String getImplementationTitle ()"}, "getDeclaredAnnotation(java.lang.Class<A>)": {"Returns": [["A", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public A getDeclaredAnnotation (Class<A> annotationClass)"}, "isCompatibleWith(java.lang.String)": {"Returns": [["boolean", "true if this package's version number is greater than or equal to the desired version number"]], "Parameters": [["@B_java#lang#String_E@", "String: the version string of the desired version."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the desired or current version is not of the correct dotted form."]], "SeeAlso": [], "Permissions": [], "Description": "Compare this package's specification version with a desired version. It returns true if this packages specification version number is greater than or equal to the desired version number. Version numbers are compared by sequentially comparing corresponding components of the desired and specification strings. Each component is converted as a decimal integer and the values compared. If the specification value is greater than the desired value true is returned. If the value is less false is returned. If the values are equal the period is skipped and the next pair of components is compared.", "history": "Added in API level 1", "FullName": "public boolean isCompatibleWith (String desired)"}, "getDeclaredAnnotationsByType(java.lang.Class<A>)": {"Returns": [["A[]", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public A[] getDeclaredAnnotationsByType (Class<A> annotationClass)"}, "isSealed(java.net.URL)": {"Returns": [["boolean", "true if this package is sealed with respect to url"]], "Parameters": [["@B_java#net#URL_E@", "URL: the code source url"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this package is sealed with respect to the specified code source url.", "history": "Added in API level 1", "FullName": "public boolean isSealed (URL url)"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 1", "FullName": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)"}, "getPackages()": {"Returns": [["@B_java#lang#Package_E@", "a new array of packages known to the callers ClassLoader instance. An zero length array is returned if none are known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get all the packages currently known for the caller's ClassLoader instance. Those packages correspond to classes loaded via or accessible by name to that ClassLoader instance. If the caller's ClassLoader instance is the bootstrap ClassLoader instance, which may be represented by null in some implementations, only packages corresponding to classes loaded by the bootstrap ClassLoader instance will be returned.", "history": "Added in API level 1", "FullName": "public static Package[] getPackages ()"}, "getImplementationVersion()": {"Returns": [["@B_java#lang#String_E@", "the version of the implementation, null is returned if it is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the version of this implementation. It consists of any string assigned by the vendor of this implementation and does not have any particular syntax specified or expected by the Java runtime. It may be compared for equality with other package version strings used for this implementation by this vendor for this package.", "history": "Added in API level 1", "FullName": "public String getImplementationVersion ()"}, "getAnnotation(java.lang.Class<A>)": {"Returns": [["A", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public A getAnnotation (Class<A> annotationClass)"}, "isSealed()": {"Returns": [["boolean", "true if the package is sealed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this package is sealed.", "history": "Added in API level 1", "FullName": "public boolean isSealed ()"}, "getSpecificationVendor()": {"Returns": [["@B_java#lang#String_E@", "the specification vendor, null is returned if it is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.", "history": "Added in API level 1", "FullName": "public String getSpecificationVendor ()"}, "getAnnotationsByType(java.lang.Class<A>)": {"Returns": [["A[]", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public A[] getAnnotationsByType (Class<A> annotationClass)"}, "getImplementationVendor()": {"Returns": [["@B_java#lang#String_E@", "the vendor that implemented this package.."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the organization, vendor or company that provided this implementation.", "history": "Added in API level 1", "FullName": "public String getImplementationVendor ()"}, "getSpecificationTitle()": {"Returns": [["@B_java#lang#String_E@", "the specification title, null is returned if it is not known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the title of the specification that this package implements.", "history": "Added in API level 1", "FullName": "public String getSpecificationTitle ()"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getAnnotations ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The fully-qualified name of this package as defined in section 6.5.3 of The Java\u2122 Language Specification, for example, java.lang"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the name of this package.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "the hash code computed from the package name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the hash code computed from the package name.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.lang.Package", "ClassDesc": "Package objects contain version information about the implementation and specification of a Java package. This versioning information is retrieved and made available by the @B_java#lang#ClassLoader_E@ instance that loaded the class(es). Typically, it is stored in the manifest that is distributed with the classes. The set of classes that make up the package may implement a particular specification and if so the specification title, version number, and vendor strings identify that specification. An application can ask if the package is compatible with a particular version, see the @B_java#lang#Package#isCompatibleWith_E@ method for details. Specification version numbers use a syntax that consists of nonnegative decimal integers separated by periods \".\", for example \"2.0\" or \"1.2.3.4.5.6.7\". This allows an extensible number to be used to represent major, minor, micro, etc. versions. The version specification is described by the following formal grammar: The implementation title, version, and vendor strings identify an implementation and are made available conveniently to enable accurate reporting of the packages involved when a problem occurs. The contents all three implementation strings are vendor specific. The implementation version strings have no specified syntax and should only be compared for equality with desired version identifiers. Within each ClassLoader instance all classes from the same java package have the same Package object. The static methods allow a package to be found by name or the set of all packages known to the current class loader to be found."}