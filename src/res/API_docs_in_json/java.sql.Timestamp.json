{"Functions": {"getNanos()": {"Returns": [["int", "this Timestamp object's fractional seconds component"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#sql#Timestamp#setNanos_E@"], "Permissions": [], "Description": "Gets this Timestamp object's nanos value.", "history": "Added in API level 1", "FullName": "public int getNanos ()"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: the number of milliseconds."]], "Throws": [], "SeeAlso": ["@B_java#sql#Timestamp#getTime_E@", "@B_java#sql#Timestamp#Timestamp_E@", "@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Sets this Timestamp object to represent a point in time that is", "history": "Added in API level 1", "FullName": "public void setTime (long time)"}, "compareTo(java.sql.Timestamp)": {"Returns": [["int", "the value 0 if the two Timestamp objects are equal; a value less than 0 if this Timestamp object is before the given argument; and a value greater than 0 if this Timestamp object is after the given argument."]], "Parameters": [["@B_java#sql#Timestamp_E@", "Timestamp: the Timestamp object to be compared to this Timestamp object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Timestamp object to the given Timestamp object.", "history": "Added in API level 1", "FullName": "public int compareTo (Timestamp ts)"}, "Timestamp(int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900"], ["int", "int: 0 to 11"], ["int", "int: 1 to 31"], ["int", "int: 0 to 23"], ["int", "int: 0 to 59"], ["int", "int: 0 to 59"], ["int", "int: 0 to 999,999,999"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the nano argument is out of bounds"]], "SeeAlso": [], "Permissions": [], "Description": "instead use the constructor Timestamp(long millis) Constructs a Timestamp object initialized with the given values.", "history": "Added in API level 1", "FullName": "public Timestamp (int year, int month, int date, int hour, int minute, int second, int nano)"}, "Timestamp(int, int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the year minus 1900"], ["int", "int: 0 to 11"], ["int", "int: 1 to 31"], ["int", "int: 0 to 23"], ["int", "int: 0 to 59"], ["int", "int: 0 to 59"], ["int", "int: 0 to 999,999,999"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the nano argument is out of bounds"]], "SeeAlso": [], "Permissions": [], "Description": "instead use the constructor Timestamp(long millis) Constructs a Timestamp object initialized with the given values.", "history": "added in API level 1", "FullName": "public Timestamp (int year, int month, int date, int hour, int minute, int second, int nano)"}, "before(java.sql.Timestamp)": {"Returns": [["boolean", "true if this Timestamp object is earlier; false otherwise"]], "Parameters": [["@B_java#sql#Timestamp_E@", "Timestamp: the Timestamp value to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this Timestamp object is earlier than the given Timestamp object.", "history": "Added in API level 1", "FullName": "public boolean before (Timestamp ts)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String object in yyyy-mm-dd hh:mm:ss.fffffffff format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a timestamp in JDBC timestamp escape format. yyyy-mm-dd hh:mm:ss.fffffffff, where ffffffffff indicates nanoseconds.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getTime()": {"Returns": [["long", "the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this date."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#sql#Timestamp#setTime_E@"], "Permissions": [], "Description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.", "history": "Added in API level 1", "FullName": "public long getTime ()"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#sql#Timestamp_E@", "corresponding Timestamp value"]], "Parameters": [["@B_java#lang#String_E@", "String: timestamp in format yyyy-[m]m-[d]d hh:mm:ss[.f...]. The fractional seconds may be omitted. The leading zero for mm and dd may also be omitted."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given argument does not have the format yyyy-[m]m-[d]d hh:mm:ss[.f...]"]], "SeeAlso": [], "Permissions": [], "Description": "Converts a String object in JDBC timestamp escape format to a Timestamp value.", "history": "Added in API level 1", "FullName": "public static Timestamp valueOf (String s)"}, "setNanos(int)": {"Returns": [], "Parameters": [["int", "int: the new fractional seconds component"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given argument is greater than 999999999 or less than 0"]], "SeeAlso": ["@B_java#sql#Timestamp#getNanos_E@"], "Permissions": [], "Description": "Sets this Timestamp object's nanos field to the given value.", "history": "Added in API level 1", "FullName": "public void setNanos (int n)"}, "Timestamp(long)": {"Returns": [], "Parameters": [["long", "long: milliseconds since January 1, 1970, 00:00:00 GMT. A negative number is the number of milliseconds before January 1, 1970, 00:00:00 GMT."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar_E@"], "Permissions": [], "Description": "Constructs a Timestamp object using a milliseconds time value. The integral seconds are stored in the underlying date value; the fractional seconds are stored in the nanos field of the Timestamp object.", "history": "Added in API level 1", "FullName": "public Timestamp (long time)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the given Object is an instance of a Timestamp that is equal to this Timestamp object; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Object value to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests to see if this Timestamp object is equal to the given object. This version of the method equals has been added to fix the incorrect signature of Timestamp.equals(Timestamp) and to preserve backward compatibility with existing class files. Note: This method is not symmetric with respect to the equals(Object) method in the base class.", "history": "Added in API level 1", "FullName": "public boolean equals (Object ts)"}, "after(java.sql.Timestamp)": {"Returns": [["boolean", "true if this Timestamp object is later; false otherwise"]], "Parameters": [["@B_java#sql#Timestamp_E@", "Timestamp: the Timestamp value to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this Timestamp object is later than the given Timestamp object.", "history": "Added in API level 1", "FullName": "public boolean after (Timestamp ts)"}, "equals(java.sql.Timestamp)": {"Returns": [["boolean", "true if the given Timestamp object is equal to this Timestamp object; false otherwise"]], "Parameters": [["@B_java#sql#Timestamp_E@", "Timestamp: the Timestamp value to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests to see if this Timestamp object is equal to the given Timestamp object.", "history": "Added in API level 1", "FullName": "public boolean equals (Timestamp ts)"}, "compareTo(java.util.Date)": {"Returns": [["int", "the value 0 if this Timestamp object and the given object are equal; a value less than 0 if this Timestamp object is before the given argument; and a value greater than 0 if this Timestamp object is after the given argument."]], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to be compared to this Timestamp object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Timestamp object to the given Date object.", "history": "Added in API level 1", "FullName": "public int compareTo (Date o)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this object. The result is the exclusive OR of the two halves of the primitive @B_java#util#Date#getTime_E@ method. That is, the hash code is the value of the expression: hashCode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#util#Date_E@"], "ClassName": "java.sql.Timestamp", "ClassDesc": "A thin wrapper around java.util.Date that allows the JDBC API to identify this as an SQL TIMESTAMP value. It adds the ability to hold the SQL TIMESTAMP fractional seconds value, by allowing the specification of fractional seconds to a precision of nanoseconds. A Timestamp also provides formatting and parsing operations to support the JDBC escape syntax for timestamp values. The precision of a Timestamp object is calculated to be either: 19 , which is the number of characters in yyyy-mm-dd hh:mm:ss 20 + s , which is the number of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and s represents the scale of the given Timestamp, its fractional seconds precision. java.util.Date and a separate nanoseconds value. Only integral seconds are stored in the java.util.Date component. The fractional seconds - the nanos - are separate. The Timestamp.equals(Object) method never returns true when passed an object that isn't an instance of java.sql.Timestamp, because the nanos component of a date is unknown. As a result, the Timestamp.equals(Object) method is not symmetric with respect to the java.util.Date.equals(Object) method. Also, the hashCode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation. Due to the differences between the Timestamp class and the java.util.Date class mentioned above, it is recommended that code not view Timestamp values generically as an instance of java.util.Date. The inheritance relationship between Timestamp and java.util.Date really denotes implementation inheritance, and not type inheritance."}