{"Functions": {"plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDateTime<D> plus (long amountToAdd, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field can be queried, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if the specified field can be queried on this date-time. If false, then calling the @B_java#time#temporal#TemporalAccessor#range_E@, @B_java#time#temporal#TemporalAccessor#get_E@ and @B_java#time#chrono#ChronoLocalDateTime#with_E@ methods will throw an exception. The set of supported fields is defined by the chronology and normally includes all ChronoField date and time fields. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public abstract boolean isSupported (TemporalField field)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same date and time as this object. This returns a temporal object of the same observable type as the input with the date and time changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ twice, passing @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ and @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as the fields. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "isBefore(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if this is before the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is before the specified date-time ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.", "history": "Added in API level 26", "FullName": "public boolean isBefore (ChronoLocalDateTime<?> other)"}, "getChronology()": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this date-time. The Chronology represents the calendar system in use. The era and other fields in @B_java#time#temporal#ChronoField_E@ are defined by the chronology.", "history": "Added in API level 26", "FullName": "public Chronology getChronology ()"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local time part of this date-time. This returns a local time with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public abstract LocalTime toLocalTime ()"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public ChronoLocalDateTime<D> minus (long amountToSubtract, TemporalUnit unit)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to another date-time, including the chronology. Compares this date-time with another ensuring that the date-time and chronology are the same.", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object obj)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount subtracted. This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<D> minus (TemporalAmount amount)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDateTime<D> with (TemporalField field, long newValue)"}, "toInstant(java.time.ZoneOffset)": {"Returns": [["@B_java#time#Instant_E@", "an Instant representing the same instant, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset to use for the conversion, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to an Instant. This combines this local date-time and the specified offset to form an Instant. This default implementation calculates from the epoch-day of the date and the second-of-day of the time.", "history": "Added in API level 26", "FullName": "public Instant toInstant (ZoneOffset offset)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public abstract ChronoLocalDateTime<D> with (TemporalField field, long newValue)"}, "toLocalDate()": {"Returns": [["D", "the date part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the local date part of this date-time. This returns a local date with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public abstract D toLocalDate ()"}, "isEqual(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if the underlying date-time is equal to the specified date-time on the timeline"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to the specified date-time ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date and time and not the chronology. This allows date-times in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.", "history": "Added in API level 26", "FullName": "public boolean isEqual (ChronoLocalDateTime<?> other)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date-time as a String. The output will include the full local date-time.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "timeLineOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares in time-line order ignoring the chronology"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDateTime#isAfter_E@", "@B_java#time#chrono#ChronoLocalDateTime#isBefore_E@", "@B_java#time#chrono#ChronoLocalDateTime#isEqual_E@"], "Permissions": [], "Description": "Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology. This comparator differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the position of the date-time on the local time-line. The underlying comparison is equivalent to comparing the epoch-day and nano-of-day.", "history": "Added in API level 26", "FullName": "public static Comparator<ChronoLocalDateTime<?>> timeLineOrder ()"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<D> minus (long amountToSubtract, TemporalUnit unit)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date-time.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}, "toEpochSecond(java.time.ZoneOffset)": {"Returns": [["long", "the number of seconds from the epoch of 1970-01-01T00:00:00Z"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset to use for the conversion, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z. This combines this local date-time and the specified offset to calculate the epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z. Instants on the time-line after the epoch are positive, earlier are negative. This default implementation calculates from the epoch-day of the date and the second-of-day of the time.", "history": "Added in API level 26", "FullName": "public long toEpochSecond (ZoneOffset offset)"}, "atZone(java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "the zoned date-time formed from this date-time, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this time with a time-zone to create a ChronoZonedDateTime. This returns a ChronoZonedDateTime formed from this date-time at the specified time-zone. The result will match this date-time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, where clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\". To obtain the later offset during an overlap, call @B_java#time#chrono#ChronoZonedDateTime#withLaterOffsetAtOverlap_E@ on the result of this method.", "history": "Added in API level 26", "FullName": "public abstract ChronoZonedDateTime<D> atZone (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted object of the same type as this object with the adjustment made. This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. Some example code indicating how and why this method is used:", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<D> with (TemporalAdjuster adjuster)"}, "compareTo(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date-time to another date-time, including the chronology. The comparison is based first on the underlying time-line date-time, then on the chronology. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. For example, the following is the comparator order: If all the date-time objects being compared are in the same chronology, then the additional chronology stage is not required and only the local date-time is used. This default implementation performs the comparison defined above.", "history": "Added in API level 26", "FullName": "public int compareTo (ChronoLocalDateTime<?> other)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public abstract ChronoLocalDateTime<D> plus (long amountToAdd, TemporalUnit unit)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date-time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string. The default implementation must behave as follows:", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "the date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a ChronoLocalDateTime"]], "SeeAlso": ["@B_java#time#chrono#Chronology#localDateTime_E@"], "Permissions": [], "Description": "Obtains an instance of ChronoLocalDateTime from a temporal object. This obtains a local date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDateTime. The conversion extracts and combines the chronology and the date-time from the temporal object. The behavior is equivalent to using @B_java#time#chrono#Chronology#localDateTime_E@ with the extracted chronology. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ChronoLocalDateTime::from.", "history": "Added in API level 26", "FullName": "public static ChronoLocalDateTime<?> from (TemporalAccessor temporal)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount added. This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<D> plus (TemporalAmount amount)"}, "isAfter(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if this is after the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is after the specified date-time ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.", "history": "Added in API level 26", "FullName": "public boolean isAfter (ChronoLocalDateTime<?> other)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to or subtracted from this date-time. If false, then calling the @B_java#time#chrono#ChronoLocalDateTime#plus_E@ and @B_java#time#chrono#ChronoLocalDateTime#minus_E@ methods will throw an exception. The set of supported units is defined by the chronology and normally includes all ChronoUnit units except FOREVER. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}}, "Inheritance": [], "ClassName": "@B_java#time#chrono#ChronoLocalDate_E@", "ClassDesc": "A date-time without a time-zone in an arbitrary chronology, intended for advanced globalization use cases. A ChronoLocalDateTime is the abstract representation of a local date-time where the Chronology chronology, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by @B_java#time#temporal#TemporalField_E@, where most common implementations are defined in @B_java#time#temporal#ChronoField_E@. The chronology defines how the calendar system operates and the meaning of the standard fields. LocalDateTime rather than this interface, even in the case where the application needs to deal with multiple calendar systems. The rationale for this is explored in detail in @B_java#time#chrono#ChronoLocalDate_E@. Ensure that the discussion in ChronoLocalDate has been read and understood before using this interface."}