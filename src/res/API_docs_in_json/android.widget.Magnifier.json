{"Functions": {"setZoom(float)": {"Returns": [], "Parameters": [["float", "float: the zoom to be set Value is 0f or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the zoom to be applied to the chosen content before being copied to the magnifier popup. The change will become effective at the next #show or #update call.", "history": "Added in API level 29", "FullName": "public void setZoom (float zoom)"}, "getZoom()": {"Returns": [["float", "the zoom applied to the content"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setInitialZoom_E@"], "Permissions": [], "Description": "Returns the zoom to be applied to the magnified view region copied to the magnifier. If the zoom is x and the magnifier window size is (width, height), the original size of the content being magnified will be (width / x, height / x).", "history": "Added in API level 28", "FullName": "public float getZoom ()"}, "getPosition()": {"Returns": [["@B_android#graphics#Point_E@", "the top left coordinates of the magnifier"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the top left coordinates of the magnifier, relative to the main application window. They will be determined by the coordinates of the last @B_android#widget#Magnifier#show_E@ or @B_android#widget#Magnifier#show_E@ call, adjusted to take into account any potential clamping behavior. The method can be used immediately after a #show call to find out where the magnifier will be positioned. However, the position of the magnifier will not be updated visually in the same frame, due to the async nature of the content copying and of the magnifier rendering. The method will return null if #show has not yet been called, or if the last operation performed was a #dismiss.", "history": "Added in API level 29", "FullName": "public Point getPosition ()"}, "getHeight()": {"Returns": [["int", "the height of the magnifier window, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setSize_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 28", "FullName": "public int getHeight ()"}, "show(float,float)": {"Returns": [], "Parameters": [["float", "float: horizontal coordinate of the source center, relative to the view Value is 0 or greater"], ["float", "float: vertical coordinate of the source center, relative to the view Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setDefaultSourceToMagnifierOffset_E@", "@B_android#widget#Magnifier#getDefaultHorizontalSourceToMagnifierOffset_E@", "@B_android#widget#Magnifier#getDefaultVerticalSourceToMagnifierOffset_E@", "@B_android#widget#Magnifier#show_E@"], "Permissions": [], "Description": "Shows the magnifier on the screen. The method takes the coordinates of the center of the content source going to be magnified and copied to the magnifier. The coordinates are relative to the top left corner of the magnified view. The magnifier will be positioned such that its center will be at the default offset from the center of the source. The default offset can be specified using the method @B_android#widget#Magnifier#Builder#setDefaultSourceToMagnifierOffset_E@. If the offset should be different across calls to this method, you should consider to use method @B_android#widget#Magnifier#show_E@ instead.", "history": "Added in API level 28", "FullName": "public void show (float sourceCenterX, float sourceCenterY)"}, "Magnifier(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view for which this magnifier is attached This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#widget#Magnifier#Builder_E@ instead Initializes a magnifier.", "history": "Added in API level 28", "FullName": "public Magnifier (View view)"}, "getElevation()": {"Returns": [["float", "the elevation set for the magnifier window, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setElevation_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getElevation ()"}, "update()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asks the magnifier to update its content. It uses the previous coordinates passed to @B_android#widget#Magnifier#show_E@ or @B_android#widget#Magnifier#show_E@. The method only has effect if the magnifier is currently showing.", "history": "Added in API level 28", "FullName": "public void update ()"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismisses the magnifier from the screen. Calling this on a dismissed magnifier is a no-op.", "history": "Added in API level 28", "FullName": "public void dismiss ()"}, "getOverlay()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the overlay"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setOverlay_E@"], "Permissions": [], "Description": "Returns the overlay to be drawn on the top of the magnifier, or null if no overlay should be drawn.", "history": "Added in API level 29", "FullName": "public Drawable getOverlay ()"}, "getSourceHeight()": {"Returns": [["int", "the initial height of the content magnified and copied to the magnifier, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setSize_E@", "@B_android#widget#Magnifier#Builder#setInitialZoom_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getSourceHeight ()"}, "getCornerRadius()": {"Returns": [["float", "the corner radius of the magnifier window, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setCornerRadius_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public float getCornerRadius ()"}, "getDefaultVerticalSourceToMagnifierOffset()": {"Returns": [["int", "the default vertical offset between the source center and the magnifier This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setDefaultSourceToMagnifierOffset_E@", "@B_android#widget#Magnifier#show_E@"], "Permissions": [], "Description": "Returns the vertical offset, in pixels, to be applied to the source center position to obtain the magnifier center position when @B_android#widget#Magnifier#show_E@ is called. The value is ignored when @B_android#widget#Magnifier#show_E@ is used instead. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getDefaultVerticalSourceToMagnifierOffset ()"}, "getSourceWidth()": {"Returns": [["int", "the initial width of the content magnified and copied to the magnifier, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setSize_E@", "@B_android#widget#Magnifier#Builder#setInitialZoom_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getSourceWidth ()"}, "isClippingEnabled()": {"Returns": [["boolean", "whether the magnifier position will be adjusted"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setClippingEnabled_E@"], "Permissions": [], "Description": "Returns whether the magnifier position will be adjusted such that the magnifier will be fully within the bounds of the main application window, by also avoiding any overlap with system insets (such as the one corresponding to the status bar) i.e. whether the area where the magnifier can be positioned will be clipped to the main application window and the system insets.", "history": "Added in API level 29", "FullName": "public boolean isClippingEnabled ()"}, "getDefaultHorizontalSourceToMagnifierOffset()": {"Returns": [["int", "the default horizontal offset between the source center and the magnifier This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setDefaultSourceToMagnifierOffset_E@", "@B_android#widget#Magnifier#show_E@"], "Permissions": [], "Description": "Returns the horizontal offset, in pixels, to be applied to the source center position to obtain the magnifier center position when @B_android#widget#Magnifier#show_E@ is called. The value is ignored when @B_android#widget#Magnifier#show_E@ is used instead. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getDefaultHorizontalSourceToMagnifierOffset ()"}, "getSourcePosition()": {"Returns": [["@B_android#graphics#Point_E@", "the top left coordinates of the magnifier source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the top left coordinates of the magnifier source (i.e. the view region going to be magnified and copied to the magnifier), relative to the window or surface the content is copied from. The content will be copied: - if the magnified view is a @B_android#view#SurfaceView_E@, from the surface backing it - otherwise, from the surface backing the main application window, and the coordinates returned will be relative to the main application window The method will return null if #show has not yet been called, or if the last operation performed was a #dismiss.", "history": "Added in API level 29", "FullName": "public Point getSourcePosition ()"}, "show(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: horizontal coordinate of the source center relative to the view Value is 0 or greater"], ["float", "float: vertical coordinate of the source center, relative to the view Value is 0 or greater"], ["float", "float: horizontal coordinate of the magnifier center, relative to the view"], ["float", "float: vertical coordinate of the magnifier center, relative to the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the magnifier on the screen at a position that is independent from its content position. The first two arguments represent the coordinates of the center of the content source going to be magnified and copied to the magnifier. The last two arguments represent the coordinates of the center of the magnifier itself. All four coordinates are relative to the top left corner of the magnified view. If you consider using this method such that the offset between the source center and the magnifier center coordinates remains constant, you should consider using method @B_android#widget#Magnifier#show_E@ instead.", "history": "Added in API level 29", "FullName": "public void show (float sourceCenterX, float sourceCenterY, float magnifierCenterX, float magnifierCenterY)"}, "getWidth()": {"Returns": [["int", "the width of the magnifier window, in pixels This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Magnifier#Builder#setSize_E@"], "Permissions": [], "Description": "This units of this value are pixels.", "history": "Added in API level 28", "FullName": "public int getWidth ()"}, "show(float, float)": {"Returns": [], "Parameters": [["float", "float: horizontal coordinate of the center point of the magnifier source relative to the view. The lower end is clamped to 0 and the higher end is clamped to the view width.Value is 0.0 or greater."], ["float", "float: vertical coordinate of the center point of the magnifier source relative to the view. The lower end is clamped to 0 and the higher end is clamped to the view height. Value is 0.0 or greater."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the magnifier on the screen.", "history": "added in API level 28", "FullName": "public void show (float xPosInView, float yPosInView)"}}, "Inheritance": [], "ClassName": "android.widget.Magnifier", "ClassDesc": "Android magnifier widget. Can be used by any view which is attached to a window."}