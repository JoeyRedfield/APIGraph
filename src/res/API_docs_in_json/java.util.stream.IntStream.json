{"Functions": {"anyMatch(java.util.function.IntPredicate)": {"Returns": [["boolean", "true if any elements of the stream match the provided predicate, otherwise false"]], "Parameters": [["@B_java#util#function#IntPredicate_E@", "IntPredicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then false is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean anyMatch (IntPredicate predicate)"}, "range(int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a sequential IntStream for the range of int elements"]], "Parameters": [["int", "int: the (inclusive) initial value"], ["int", "int: the exclusive upper bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.", "history": "Added in API level 24", "FullName": "public static IntStream range (int startInclusive, int endExclusive)"}, "builder()": {"Returns": [["@B_java#util#stream#IntStream#Builder_E@", "a stream builder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a builder for an IntStream.", "history": "Added in API level 24", "FullName": "public static IntStream.Builder builder ()"}, "peek(java.util.function.IntConsumer)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntConsumer_E@", "IntConsumer: a non-interfering action to perform on the elements as they are consumed from the stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream. This is an For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation. If the action modifies shared state, it is responsible for providing the required synchronization.", "history": "Added in API level 24", "FullName": "public abstract IntStream peek (IntConsumer action)"}, "map(java.util.function.IntUnaryOperator)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream map (IntUnaryOperator mapper)"}, "findFirst()": {"Returns": [["@B_java#util#OptionalInt_E@", "an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_java#util#OptionalInt_E@ describing the first element of this stream, or an empty OptionalInt if the stream is empty. If the stream has no encounter order, then any element may be returned. This is a", "history": "Added in API level 24", "FullName": "public abstract OptionalInt findFirst ()"}, "allMatch(java.util.function.IntPredicate)": {"Returns": [["boolean", "true if either all elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#IntPredicate_E@", "IntPredicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether all elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean allMatch (IntPredicate predicate)"}, "limit(long)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["long", "long: the number of elements the stream should be limited to"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if maxSize is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length. This is a", "history": "Added in API level 24", "FullName": "public abstract IntStream limit (long maxSize)"}, "sequential()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a sequential stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream that is sequential. May return itself, either because the stream was already sequential, or because the underlying stream state was modified to be sequential. This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream sequential ()"}, "average()": {"Returns": [["@B_java#util#OptionalDouble_E@", "an OptionalDouble containing the average element of this stream, or an empty optional if the stream is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract OptionalDouble average ()"}, "skip(long)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["long", "long: the number of leading elements to skip"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if n is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream. If this stream contains fewer than n elements then an empty stream will be returned. This is a", "history": "Added in API level 24", "FullName": "public abstract IntStream skip (long n)"}, "empty()": {"Returns": [["@B_java#util#stream#IntStream_E@", "an empty sequential stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty sequential IntStream.", "history": "Added in API level 24", "FullName": "public static IntStream empty ()"}, "boxed()": {"Returns": [["@B_java#util#stream#Stream_E@", "a Stream consistent of the elements of this stream, each boxed to an Integer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Stream consisting of the elements of this stream, each boxed to an Integer. This is an", "history": "Added in API level 24", "FullName": "public abstract Stream<Integer> boxed ()"}, "reduce(int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of the reduction"]], "Parameters": [["int", "int: the identity value for the accumulating function"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#IntStream#sum_E@", "@B_java#util#stream#IntStream#min_E@", "@B_java#util#stream#IntStream#max_E@", "@B_java#util#stream#IntStream#average_E@"], "Permissions": [], "Description": "Performs a The identity value must be an identity for the accumulator function. This means that for all x, accumulator.apply(identity, x) is equal to x. The accumulator function must be an This is a", "history": "Added in API level 24", "FullName": "public abstract int reduce (int identity, IntBinaryOperator op)"}, "filter(java.util.function.IntPredicate)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntPredicate_E@", "IntPredicate: a non-interfering, stateless predicate to apply to each element to determine if it should be included"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream that match the given predicate. This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream filter (IntPredicate predicate)"}, "distinct()": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the distinct elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract IntStream distinct ()"}, "sorted()": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream consisting of the elements of this stream in sorted order. This is a", "history": "Added in API level 24", "FullName": "public abstract IntStream sorted ()"}, "toArray()": {"Returns": [["int[]", "an array containing the elements of this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract int[] toArray ()"}, "noneMatch(java.util.function.IntPredicate)": {"Returns": [["boolean", "true if either no elements of the stream match the provided predicate or the stream is empty, otherwise false"]], "Parameters": [["@B_java#util#function#IntPredicate_E@", "IntPredicate: a non-interfering, stateless predicate to apply to elements of this stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether no elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then true is returned and the predicate is not evaluated. This is a", "history": "Added in API level 24", "FullName": "public abstract boolean noneMatch (IntPredicate predicate)"}, "forEachOrdered(java.util.function.IntConsumer)": {"Returns": [], "Parameters": [["@B_java#util#function#IntConsumer_E@", "IntConsumer: a non-interfering action to perform on the elements"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#IntStream#forEach_E@"], "Permissions": [], "Description": "Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order. This is a", "history": "Added in API level 24", "FullName": "public abstract void forEachOrdered (IntConsumer action)"}, "mapToObj(java.util.function.IntFunction<?extendsU>)": {"Returns": [["@B_java#util#stream#Stream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntFunction_E@", "IntFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract Stream<U> mapToObj (IntFunction<? extends U> mapper)"}, "collect(java.util.function.Supplier<R>,java.util.function.ObjIntConsumer<R>,java.util.function.BiConsumer<R,R>)": {"Returns": [["R", "the result of the reduction"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a function that creates a new result container. For a parallel execution, this function may be called multiple times and must return a fresh value each time."], ["@B_java#util#function#ObjIntConsumer_E@", "ObjIntConsumer: an associative, non-interfering, stateless function for incorporating an additional element into a result"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: an associative, non-interfering, stateless function for combining two values, which must be compatible with the accumulator function"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#collect_E@"], "Permissions": [], "Description": "Performs a ArrayList, and elements are incorporated by updating the state of the result rather than by replacing the result. This produces a result equivalent to: Like @B_java#util#stream#IntStream#reduce_E@, collect operations can be parallelized without requiring additional synchronization. This is a", "history": "Added in API level 24", "FullName": "public abstract R collect (Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner)"}, "sum()": {"Returns": [["int", "the sum of elements in this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sum of elements in this stream. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract int sum ()"}, "asDoubleStream()": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a DoubleStream consisting of the elements of this stream, converted to double"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DoubleStream consisting of the elements of this stream, converted to double. This is an", "history": "Added in API level 24", "FullName": "public abstract DoubleStream asDoubleStream ()"}, "of(int...)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["int...", "int: the elements of the new stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered stream whose elements are the specified values.", "history": "Added in API level 24", "FullName": "public static IntStream of (int... values)"}, "asLongStream()": {"Returns": [["@B_java#util#stream#LongStream_E@", "a LongStream consisting of the elements of this stream, converted to long"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a LongStream consisting of the elements of this stream, converted to long. This is an", "history": "Added in API level 24", "FullName": "public abstract LongStream asLongStream ()"}, "range(int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a sequential IntStream for the range of int elements"]], "Parameters": [["int", "int: the (inclusive) initial value"], ["int", "int: the exclusive upper bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.", "history": "added in API level 24", "FullName": "public static IntStream range (int startInclusive, int endExclusive)"}, "concat(java.util.stream.IntStream,java.util.stream.IntStream)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the concatenation of the two input streams"]], "Parameters": [["@B_java#util#stream#IntStream_E@", "IntStream: the first stream"], ["@B_java#util#stream#IntStream_E@", "IntStream: the second stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream. The resulting stream is ordered if both of the input streams are ordered, and parallel if either of the input streams is parallel. When the resulting stream is closed, the close handlers for both input streams are invoked.", "history": "Added in API level 24", "FullName": "public static IntStream concat (IntStream a, IntStream b)"}, "max()": {"Returns": [["@B_java#util#OptionalInt_E@", "an OptionalInt containing the maximum element of this stream, or an empty OptionalInt if the stream is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract OptionalInt max ()"}, "summaryStatistics()": {"Returns": [["@B_java#util#IntSummaryStatistics_E@", "an IntSummaryStatistics describing various summary data about the elements of this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an IntSummaryStatistics describing various summary data about the elements of this stream. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract IntSummaryStatistics summaryStatistics ()"}, "iterate(int,java.util.function.IntUnaryOperator)": {"Returns": [["@B_java#util#stream#IntStream_E@", "A new sequential IntStream"]], "Parameters": [["int", "int: the initial element"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a function to be applied to to the previous element to produce a new element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc. The first element (position 0) in the IntStream will be the provided seed. For n > 0, the element at position n, will be the result of applying the function f to the element at position n - 1.", "history": "Added in API level 24", "FullName": "public static IntStream iterate (int seed, IntUnaryOperator f)"}, "parallel()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a parallel stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream that is parallel. May return itself, either because the stream was already parallel, or because the underlying stream state was modified to be parallel. This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream parallel ()"}, "mapToLong(java.util.function.IntToLongFunction)": {"Returns": [["@B_java#util#stream#LongStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntToLongFunction_E@", "IntToLongFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a LongStream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract LongStream mapToLong (IntToLongFunction mapper)"}, "findAny()": {"Returns": [["@B_java#util#OptionalInt_E@", "an OptionalInt describing some element of this stream, or an empty OptionalInt if the stream is empty"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#stream#IntStream#findFirst_E@"], "Permissions": [], "Description": "Returns an @B_java#util#OptionalInt_E@ describing some element of the stream, or an empty OptionalInt if the stream is empty. This is a The behavior of this operation is explicitly nondeterministic; it is free to select any element in the stream. This is to allow for maximal performance in parallel operations; the cost is that multiple invocations on the same source may not return the same result. (If a stable result is desired, use @B_java#util#stream#IntStream#findFirst_E@ instead.)", "history": "Added in API level 24", "FullName": "public abstract OptionalInt findAny ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "the element spliterator for this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a spliterator for the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract Spliterator.OfInt spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#PrimitiveIterator#OfInt_E@", "the element iterator for this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator for the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract PrimitiveIterator.OfInt iterator ()"}, "reduce(java.util.function.IntBinaryOperator)": {"Returns": [["@B_java#util#OptionalInt_E@", "the result of the reduction"]], "Parameters": [["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#IntStream#reduce_E@"], "Permissions": [], "Description": "Performs a OptionalInt describing the reduced value, if any. This is equivalent to: The accumulator function must be an This is a", "history": "Added in API level 24", "FullName": "public abstract OptionalInt reduce (IntBinaryOperator op)"}, "of(int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a singleton sequential stream"]], "Parameters": [["int", "int: the single element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential IntStream containing a single element.", "history": "Added in API level 24", "FullName": "public static IntStream of (int t)"}, "forEach(java.util.function.IntConsumer)": {"Returns": [], "Parameters": [["@B_java#util#function#IntConsumer_E@", "IntConsumer: a non-interfering action to perform on the elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs an action for each element of this stream. This is a For parallel stream pipelines, this operation does not guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of parallelism. For any given element, the action may be performed at whatever time and in whatever thread the library chooses. If the action accesses shared state, it is responsible for providing the required synchronization.", "history": "Added in API level 24", "FullName": "public abstract void forEach (IntConsumer action)"}, "flatMap(java.util.function.IntFunction<?extendsjava.util.stream.IntStream>)": {"Returns": [["@B_java#util#stream#IntStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntFunction_E@", "IntFunction: a non-interfering, stateless function to apply to each element which produces an IntStream of new values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#Stream#flatMap_E@"], "Permissions": [], "Description": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is @B_java#util#stream#BaseStream#close_E@ after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) This is an", "history": "Added in API level 24", "FullName": "public abstract IntStream flatMap (IntFunction<? extends IntStream> mapper)"}, "count()": {"Returns": [["long", "the count of elements in this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the count of elements in this stream. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract long count ()"}, "min()": {"Returns": [["@B_java#util#OptionalInt_E@", "an OptionalInt containing the minimum element of this stream, or an empty OptionalInt if the stream is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty. This is a special case of a This is a", "history": "Added in API level 24", "FullName": "public abstract OptionalInt min ()"}, "rangeClosed(int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a sequential IntStream for the range of int elements"]], "Parameters": [["int", "int: the (inclusive) initial value"], ["int", "int: the inclusive upper bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.", "history": "added in API level 24", "FullName": "public static IntStream rangeClosed (int startInclusive, int endInclusive)"}, "iterate(int, java.util.function.IntUnaryOperator)": {"Returns": [["@B_java#util#stream#IntStream_E@", "A new sequential IntStream"]], "Parameters": [["int", "int: the initial element"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a function to be applied to to the previous element to produce a new element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc. The first element (position 0) in the IntStream will be the provided seed. For n > 0, the element at position n, will be the result of applying the function f to the element at position n - 1.", "history": "added in API level 24", "FullName": "public static IntStream iterate (int seed, IntUnaryOperator f)"}, "mapToDouble(java.util.function.IntToDoubleFunction)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "the new stream"]], "Parameters": [["@B_java#util#function#IntToDoubleFunction_E@", "IntToDoubleFunction: a non-interfering, stateless function to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream. This is an", "history": "Added in API level 24", "FullName": "public abstract DoubleStream mapToDouble (IntToDoubleFunction mapper)"}, "reduce(int, java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of the reduction"]], "Parameters": [["int", "int: the identity value for the accumulating function"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: an associative, non-interfering, stateless function for combining two values"]], "Throws": [], "SeeAlso": ["@B_java#util#stream#IntStream#sum_E@", "@B_java#util#stream#IntStream#min_E@", "@B_java#util#stream#IntStream#max_E@", "@B_java#util#stream#IntStream#average_E@"], "Permissions": [], "Description": "Performs a The identity value must be an identity for the accumulator function. This means that for all x, accumulator.apply(identity, x) is equal to x. The accumulator function must be an This is a", "history": "added in API level 24", "FullName": "public abstract int reduce (int identity, IntBinaryOperator op)"}, "generate(java.util.function.IntSupplier)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a new infinite sequential unordered IntStream"]], "Parameters": [["@B_java#util#function#IntSupplier_E@", "IntSupplier: the IntSupplier for generated elements"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier. This is suitable for generating constant streams, streams of random elements, etc.", "history": "Added in API level 24", "FullName": "public static IntStream generate (IntSupplier s)"}, "rangeClosed(int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a sequential IntStream for the range of int elements"]], "Parameters": [["int", "int: the (inclusive) initial value"], ["int", "int: the inclusive upper bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.", "history": "Added in API level 24", "FullName": "public static IntStream rangeClosed (int startInclusive, int endInclusive)"}}, "Inheritance": [], "ClassName": "java.util.stream.IntStream", "ClassDesc": "A sequence of primitive int-valued elements supporting sequential and parallel aggregate operations. This is the int primitive specialization of @B_java#util#stream#Stream_E@. The following example illustrates an aggregate operation using @B_java#util#stream#Stream_E@ and @B_java#util#stream#IntStream_E@, computing the sum of the weights of the red widgets: @B_java#util#stream#Stream_E@ and the package documentation for"}