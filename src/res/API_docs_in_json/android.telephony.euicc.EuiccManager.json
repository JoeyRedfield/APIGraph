{"Functions": {"downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#telephony#euicc#DownloadableSubscription_E@", "DownloadableSubscription: the subscription to download."], ["boolean", "boolean: if true, the profile will be activated upon successful download."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to download the given @B_android#telephony#euicc#DownloadableSubscription_E@. Requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or the calling app must be authorized to manage both the currently-active subscription on the current eUICC and the subscription to be downloaded according to the subscription metadata. Without the former, an @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@ will be returned in the callback intent to prompt the user to accept the download. On a multi-active SIM device, requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or a calling app only if the targeted eUICC does not currently have an active subscription or the calling app is authorized to manage the active subscription on the target eUICC, and the calling app is authorized to manage any active subscription on any SIM. Without it, an @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@ will be returned in the callback intent to prompt the user to accept the download. The caller should also be authorized to manage the subscription to be downloaded. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS", "history": "Added in API level 28", "FullName": "public void downloadSubscription (DownloadableSubscription subscription, boolean switchAfterDownload, PendingIntent callbackIntent)"}, "updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: the ID of the subscription to update."], ["@B_java#lang#String_E@", "String: the new nickname to apply. This value may be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the nickname for the given subscription. Requires that the calling app has carrier privileges according to the metadata of the profile to be updated, or the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS", "history": "Added in API level 29", "FullName": "public void updateSubscriptionNickname (int subscriptionId, String nickname, PendingIntent callbackIntent)"}, "deleteSubscription(int, android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: the ID of the subscription to delete."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes the given subscription. If this subscription is currently active, the device will first switch away from it onto an \"empty\" subscription. Requires that the calling app has carrier privileges according to the metadata of the profile to be deleted, or the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission.Requires the permission.", "history": "added in API level 28", "FullName": "public void deleteSubscription (int subscriptionId, PendingIntent callbackIntent)"}, "getEid()": {"Returns": [["@B_java#lang#String_E@", "the EID. May be null if the eUICC is not ready."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the EID identifying the eUICC hardware. Requires that the calling app has carrier privileges on the active subscription on the current eUICC. A calling app with carrier privileges for one eUICC may not necessarily have access to the EID of another eUICC.", "history": "Added in API level 28", "FullName": "public String getEid ()"}, "switchToSubscription(int,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: the ID of the subscription to enable. May be @B_android#telephony#SubscriptionManager#INVALID_SUBSCRIPTION_ID_E@ to deactivate the current profile without activating another profile to replace it. If it's a disable operation, requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or the calling app must be authorized to manage the active subscription on the target eUICC."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Switch to (enable) the given subscription. Requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or the calling app must be authorized to manage both the currently-active subscription and the subscription to be enabled according to the subscription metadata. Without the former, an @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@ will be returned in the callback intent to prompt the user to accept the download. On a multi-active SIM device, requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or a calling app only if the targeted eUICC does not currently have an active subscription or the calling app is authorized to manage the active subscription on the target eUICC, and the calling app is authorized to manage any active subscription on any SIM. Without it, an @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@ will be returned in the callback intent to prompt the user to accept the download. The caller should also be authorized to manage the subscription to be enabled. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS", "history": "Added in API level 28", "FullName": "public void switchToSubscription (int subscriptionId, PendingIntent callbackIntent)"}, "createForCardId(int)": {"Returns": [["@B_android#telephony#euicc#EuiccManager_E@", "an EuiccManager that uses the given card ID for all calls. This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new EuiccManager object pinned to the given card ID.", "history": "Added in API level 29", "FullName": "public EuiccManager createForCardId (int cardId)"}, "startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the calling activity (which should be in the foreground)."], ["int", "int: an application-specific request code which will be provided to @B_android#app#Activity#onActivityResult_E@ upon completion. Note that the operation may still be in progress when the resolution activity completes; it is not fully finished until the callback intent is triggered."], ["@B_android#content#Intent_E@", "Intent: the Intent provided to the initial callback intent which failed with @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes. This is trigered upon completion of the original operation that required user resolution."]], "Throws": [["@B_android#content#IntentSender#SendIntentException_E@", "if called more than once."]], "SeeAlso": [], "Permissions": [], "Description": "Start an activity to resolve a user-resolvable error. If an operation returns @B_android#telephony#euicc#EuiccManager#EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR_E@, this method may be called to prompt the user to resolve the issue. This method may only be called once for a particular error.", "history": "Added in API level 28", "FullName": "public void startResolutionActivity (Activity activity, int requestCode, Intent resultIntent, PendingIntent callbackIntent)"}, "deleteSubscription(int,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: the ID of the subscription to delete."], ["@B_android#app#PendingIntent_E@", "PendingIntent: a PendingIntent to launch when the operation completes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes the given subscription. If this subscription is currently active, the device will first switch away from it onto an \"empty\" subscription. Requires that the calling app has carrier privileges according to the metadata of the profile to be deleted, or the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS", "history": "Added in API level 28", "FullName": "public void deleteSubscription (int subscriptionId, PendingIntent callbackIntent)"}, "isEnabled()": {"Returns": [["boolean", "true if embedded subscriptions are currently enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether embedded subscriptions are currently enabled. Even on devices with the @B_android#content#pm#PackageManager#FEATURE_TELEPHONY_EUICC_E@ feature, embedded subscriptions may be turned off, e.g. because of a carrier restriction from an inserted physical SIM. Therefore, this runtime check should be used before accessing embedded subscription APIs.", "history": "Added in API level 28", "FullName": "public boolean isEnabled ()"}, "getEuiccInfo()": {"Returns": [["@B_android#telephony#euicc#EuiccInfo_E@", "the @B_android#telephony#euicc#EuiccInfo_E@. May be null if the eUICC is not ready."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns information about the eUICC chip/device.", "history": "Added in API level 28", "FullName": "public EuiccInfo getEuiccInfo ()"}}, "Inheritance": [], "ClassName": "android.telephony.euicc.EuiccManager", "ClassDesc": "EuiccManager is the application interface to eUICCs, or eSIMs/embedded SIMs. You do not instantiate this class directly; instead, you retrieve an instance through @B_android#content#Context#getSystemService_E@ and @B_android#content#Context#EUICC_SERVICE_E@. This instance will be created using the default eUICC. On a device with multiple eUICCs, you may want to create multiple EuiccManagers. To do this you can call @B_android#telephony#euicc#EuiccManager#createForCardId_E@. See @B_android#telephony#euicc#EuiccManager#isEnabled_E@ before attempting to use these APIs."}