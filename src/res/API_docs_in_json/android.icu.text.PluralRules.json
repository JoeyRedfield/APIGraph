{"Functions": {"parseDescription(java.lang.String)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the rule description."]], "Throws": [["@B_java#text#ParseException_E@", "if the description cannot be parsed. The exception index is typically not set, it will be -1."]], "SeeAlso": [], "Permissions": [], "Description": "Parses a plural rules description and returns a PluralRules.", "history": "Added in API level 24", "FullName": "public static PluralRules parseDescription (String description)"}, "forLocale(java.util.Locale)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "The predefined PluralRules object for this locale. If there's no predefined rules for this locale, the rules for the closest parent in the locale hierarchy that has one will be returned. The final fallback always returns the default rules."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale for which a PluralRules object is returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides access to the predefined cardinal-number PluralRules for a given @B_java#util#Locale_E@. Same as forLocale(locale, PluralType.CARDINAL). ICU defines plural rules for many locales based on CLDR", "history": "Added in API level 24", "FullName": "public static PluralRules forLocale (Locale locale)"}, "createRules(java.lang.String)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "the PluralRules"]], "Parameters": [["@B_java#lang#String_E@", "String: the rule description."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PluralRules from a description if it is parsable, otherwise returns null.", "history": "Added in API level 24", "FullName": "public static PluralRules createRules (String description)"}, "getAllKeywordValues(java.lang.String)": {"Returns": [["@B_java#util#Collection_E@", "the values that trigger this keyword, or null. The returned collection is immutable. It will be empty if the keyword is not defined."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the values that trigger this keyword, or null if the number of such values is unlimited.", "history": "Added in API level 24", "FullName": "public Collection<Double> getAllKeywordValues (String keyword)"}, "select(double)": {"Returns": [["@B_java#lang#String_E@", "The keyword of the selected rule."]], "Parameters": [["double", "double: The number for which the rule has to be determined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a number, returns the keyword of the first rule that applies to the number.", "history": "Added in API level 24", "FullName": "public String select (double number)"}, "forLocale(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "The predefined PluralRules object for this locale. If there's no predefined rules for this locale, the rules for the closest parent in the locale hierarchy that has one will be returned. The final fallback always returns the default rules."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which a PluralRules object is returned."], ["@B_android#icu#text#PluralRules#PluralType_E@", "PluralRules.PluralType: The plural type (e.g., cardinal or ordinal)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides access to the predefined PluralRules for a given locale and the plural type. ICU defines plural rules for many locales based on CLDR", "history": "Added in API level 24", "FullName": "public static PluralRules forLocale (ULocale locale, PluralRules.PluralType type)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "forLocale(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "The predefined PluralRules object for this locale. If there's no predefined rules for this locale, the rules for the closest parent in the locale hierarchy that has one will be returned. The final fallback always returns the default rules."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: The locale for which a PluralRules object is returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides access to the predefined cardinal-number PluralRules for a given locale. Same as forLocale(locale, PluralType.CARDINAL). ICU defines plural rules for many locales based on CLDR", "history": "Added in API level 24", "FullName": "public static PluralRules forLocale (ULocale locale)"}, "getUniqueKeywordValue(java.lang.String)": {"Returns": [["double", "The unique value for the keyword, or NO_UNIQUE_VALUE."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to check for a unique value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique value that this keyword matches, or @B_android#icu#text#PluralRules#NO_UNIQUE_VALUE_E@ if the keyword matches multiple values or is not defined for this PluralRules.", "history": "Added in API level 24", "FullName": "public double getUniqueKeywordValue (String keyword)"}, "getKeywords()": {"Returns": [["@B_java#util#Set_E@", "The set of keywords."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of all rule keywords used in this PluralRules object. The rule \"other\" is always present by default.", "history": "Added in API level 24", "FullName": "public Set<String> getKeywords ()"}, "getSamples(java.lang.String)": {"Returns": [["@B_java#util#Collection_E@", "a list of values matching the keyword."]], "Parameters": [["@B_java#lang#String_E@", "String: the keyword to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of integer values for which select() would return that keyword, or null if the keyword is not defined. The returned collection is unmodifiable. The returned list is not complete, and there might be additional values that would return the keyword.", "history": "Added in API level 24", "FullName": "public Collection<Double> getSamples (String keyword)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object rhs)"}, "equals(android.icu.text.PluralRules)": {"Returns": [["boolean", "true if this and rhs are equal."]], "Parameters": [["@B_android#icu#text#PluralRules_E@", "PluralRules: the PluralRules to compare to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if rhs is equal to this.", "history": "Added in API level 24", "FullName": "public boolean equals (PluralRules rhs)"}, "forLocale(java.util.Locale,android.icu.text.PluralRules.PluralType)": {"Returns": [["@B_android#icu#text#PluralRules_E@", "The predefined PluralRules object for this locale. If there's no predefined rules for this locale, the rules for the closest parent in the locale hierarchy that has one will be returned. The final fallback always returns the default rules."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale for which a PluralRules object is returned."], ["@B_android#icu#text#PluralRules#PluralType_E@", "PluralRules.PluralType: The plural type (e.g., cardinal or ordinal)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides access to the predefined PluralRules for a given @B_java#util#Locale_E@ and the plural type. ICU defines plural rules for many locales based on CLDR", "history": "Added in API level 24", "FullName": "public static PluralRules forLocale (Locale locale, PluralRules.PluralType type)"}}, "Inheritance": [], "ClassName": "android.icu.text.PluralRules", "ClassDesc": "Defines rules for mapping non-negative numeric values onto a small set of keywords. Rules are constructed from a text description, consisting of a series of keywords and conditions. The @B_android#icu#text#PluralRules#select_E@ method examines each condition in order and returns the keyword for the first condition that matches the number. If none match, @B_android#icu#text#PluralRules#KEYWORD_OTHER_E@ is returned. A PluralRules object is immutable. It contains caches for sample values, but those are synchronized. PluralRules is Serializable so that it can be used in formatters, which are serializable. For more information, details, and tips for writing rules, see the Examples: This defines two rules, for 'one' and 'few'. The condition for 'one' is \"n is 1\" which means that the number must be equal to 1 for this condition to pass. The condition for 'few' is \"n in 2..4\" which means that the number must be between 2 and 4 inclusive - and be an integer - for this condition to pass. All other numbers are assigned the keyword \"other\" by the default rule. This illustrates that the same keyword can be defined multiple times. Each rule is examined in order, and the first keyword whose condition passes is the one returned. Also notes that a modulus is applied to n in the last rule. Thus its condition holds for 119, 219, 319... This illustrates conjunction and negation. The condition for 'few' has two parts, both of which must be met: \"n mod 10 in 2..4\" and \"n mod 100 not in 12..14\". The first part applies a modulus to n before the test as in the previous example. The second part applies a different modulus and also uses negation, thus it matches all numbers _not_ in 12, 13, 14, 112, 113, 114, 212, 213, 214... Syntax: Each The i, f, t, and v values are defined as follows: i to be the integer digits. f to be the visible decimal digits, as an integer. t to be the visible decimal digits\u2014without trailing zeros\u2014as an integer. v to be the number of visible fraction digits. j is defined to only match integers. That is j is 3 fails if v != 0 (eg for 3.1 or 3.0). Examples are in the following table: An \"identifier\" is a sequence of characters that do not have the Unicode Pattern_Syntax or Pattern_White_Space properties. The difference between 'in' and 'within' is that 'in' only includes integers in the specified range, while 'within' includes all values. Using 'within' with a range_list consisting entirely of values is the same as using 'in' (it's not an error)."}