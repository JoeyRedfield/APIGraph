{"Functions": {"permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)": {"Returns": [["boolean", "true if the algorithm is permitted and can be used for all of the specified cryptographic primitives"]], "Parameters": [["@B_java#util#Set_E@", "Set: a set of cryptographic primitives"], ["@B_java#lang#String_E@", "String: the algorithm name"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters, or null if no additional parameters"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if primitives or algorithm is null or empty"]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether an algorithm is granted permission for the specified cryptographic primitives.", "history": "Added in API level 24", "FullName": "public abstract boolean permits (Set<CryptoPrimitive> primitives, String algorithm, AlgorithmParameters parameters)"}, "permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.Key,java.security.AlgorithmParameters)": {"Returns": [["boolean", "true if the key and the algorithm can be used for all of the specified cryptographic primitives"]], "Parameters": [["@B_java#util#Set_E@", "Set: a set of cryptographic primitives"], ["@B_java#lang#String_E@", "String: the algorithm name"], ["@B_java#security#Key_E@", "Key: the key"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters, or null if no additional parameters"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if primitives or algorithm is null or empty, or the key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.", "history": "Added in API level 24", "FullName": "public abstract boolean permits (Set<CryptoPrimitive> primitives, String algorithm, Key key, AlgorithmParameters parameters)"}, "permits(java.util.Set<java.security.CryptoPrimitive>,java.security.Key)": {"Returns": [["boolean", "true if the key can be used for all of the specified cryptographic primitives"]], "Parameters": [["@B_java#util#Set_E@", "Set: a set of cryptographic primitives"], ["@B_java#security#Key_E@", "Key: the key"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if primitives is null or empty, or the key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether a key is granted permission for the specified cryptographic primitives. This method is usually used to check key size and key usage.", "history": "Added in API level 24", "FullName": "public abstract boolean permits (Set<CryptoPrimitive> primitives, Key key)"}}, "Inheritance": [], "ClassName": "java.security.AlgorithmConstraints", "ClassDesc": "This interface specifies constraints for cryptographic algorithms, keys (key sizes), and other algorithm parameters. AlgorithmConstraints objects are immutable. An implementation of this interface should not provide methods that can change the state of an instance once it has been created. Note that AlgorithmConstraints can be used to represent the restrictions described by the security properties jdk.certpath.disabledAlgorithms and jdk.tls.disabledAlgorithms, or could be used by a concrete PKIXCertPathChecker to check whether a specified certificate in the certification path contains the required algorithm constraints."}