{"Functions": {"setBreadCrumbTitle(java.lang.CharSequence)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#support#v4#app#FragmentTransaction#setBreadCrumbTitle_E@ but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setBreadCrumbTitle (CharSequence text)"}, "setTransition(int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Select a standard transition animation for this transaction. May be one of @B_android#support#v4#app#FragmentTransaction#TRANSIT_NONE_E@, @B_android#support#v4#app#FragmentTransaction#TRANSIT_FRAGMENT_OPEN_E@, @B_android#support#v4#app#FragmentTransaction#TRANSIT_FRAGMENT_CLOSE_E@, or @B_android#support#v4#app#FragmentTransaction#TRANSIT_FRAGMENT_FADE_E@.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setTransition (int transit)"}, "replace(int, android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#support#v4#app#Fragment_E@", "Fragment no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls @B_android#support#v4#app#FragmentTransaction#replace_E@ with a null tag.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction replace (int containerViewId, Fragment fragment)"}, "setTransitionStyle(int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a custom style resource that will be used for resolving transit animations.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setTransitionStyle (int styleRes)"}, "show(android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "Returns the same FragmentTransaction instance."]], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: The fragment to be shown."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows a previously hidden fragment. This is only relevant for fragments whose views have been added to a container, as this will cause the view to be shown.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction show (Fragment fragment)"}, "commitNow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Commits this transaction synchronously. Any added fragments will be initialized and brought completely to the lifecycle state of their host and any removed fragments will be torn down accordingly before this call returns. Committing a transaction in this way allows fragments to be added as dedicated, encapsulated components that monitor the lifecycle state of their host while providing firmer ordering guarantees around when those fragments are fully initialized and ready. Fragments that manage views will have those views created and attached. Calling commitNow is preferable to calling @B_android#support#v4#app#FragmentTransaction#commit_E@ followed by @B_android#support#v4#app#FragmentManager#executePendingTransactions_E@ as the latter will have the side effect of attempting to commit all currently pending transactions whether that is the desired behavior or not. Transactions committed in this way may not be added to the FragmentManager's back stack, as doing so would break other expected ordering guarantees for other asynchronously committed transactions. This method will throw @B_java#lang#IllegalStateException_E@ if the transaction previously requested to be added to the back stack with @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@. A transaction can only be committed with this method prior to its containing activity saving its state. If the commit is attempted after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored from its state. See @B_android#support#v4#app#FragmentTransaction#commitAllowingStateLoss_E@ for situations where it may be okay to lose the commit.", "history": "added in version 24.0.0", "FullName": "void commitNow ()"}, "remove(android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "Returns the same FragmentTransaction instance."]], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: The fragment to be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove an existing fragment. If it was added to a container, its view is also removed from that container.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction remove (Fragment fragment)"}, "add(int, android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#support#v4#app#Fragment_E@", "Fragment no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls @B_android#support#v4#app#FragmentTransaction#add_E@ with a null tag.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction add (int containerViewId, Fragment fragment)"}, "setBreadCrumbTitle(int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int: A string resource containing the title."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the full title to show as a bread crumb when this transaction is on the back stack.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setBreadCrumbTitle (int res)"}, "setCustomAnimations(int, int, int, int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int: An animation or animator resource ID used for the enter animation on the view of the fragment being added or attached."], ["int", "int: An animation or animator resource ID used for the exit animation on the view of the fragment being removed or detached."], ["int", "int: An animation or animator resource ID used for the enter animation on the view of the fragment being readded or reattached caused by @B_android#support#v4#app#FragmentManager#popBackStack_E@ or similar methods."], ["int", "int: An animation or animator resource ID used for the enter animation on the view of the fragment being removed or detached caused by @B_android#support#v4#app#FragmentManager#popBackStack_E@ or similar methods."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set specific animation resources to run for the fragments that are entering and exiting in this transaction. The popEnter and popExit animations will be played for enter/exit operations specifically when popping the back stack.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setCustomAnimations (int enter, int exit, int popEnter, int popExit)"}, "setBreadCrumbShortTitle(int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int: A string resource containing the title."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the short title to show as a bread crumb when this transaction is on the back stack.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setBreadCrumbShortTitle (int res)"}, "setAllowOptimization(boolean)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This has been renamed @B_android#support#v4#app#FragmentTransaction#setReorderingAllowed_E@.", "history": "added in version 25.1.0", "FullName": "FragmentTransaction setAllowOptimization (boolean allowOptimization)"}, "commitNowAllowingStateLoss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#support#v4#app#FragmentTransaction#commitNow_E@ but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state, so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user.", "history": "added in version 24.0.0", "FullName": "void commitNowAllowingStateLoss ()"}, "detach(android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "Returns the same FragmentTransaction instance."]], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: The fragment to be detached."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Detach the given fragment from the UI. This is the same state as when it is put on the back stack: the fragment is removed from the UI, however its state is still being actively managed by the fragment manager. When going into this state its view hierarchy is destroyed.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction detach (Fragment fragment)"}, "setBreadCrumbShortTitle(java.lang.CharSequence)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#support#v4#app#FragmentTransaction#setBreadCrumbShortTitle_E@ but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setBreadCrumbShortTitle (CharSequence text)"}, "setReorderingAllowed(boolean)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: true to enable optimizing out redundant operations or false to disable optimizing out redundant operations on this transaction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether or not to allow optimizing operations within and across transactions. This will remove redundant operations, eliminating operations that cancel. For example, if two transactions are executed together, one that adds a fragment A and the next replaces it with fragment B, the operations will cancel and only fragment B will be added. That means that fragment A may not go through the creation/destruction lifecycle. The side effect of removing redundant operations is that fragments may have state changes out of the expected order. For example, one transaction adds fragment A, a second adds fragment B, then a third removes fragment A. Without removing the redundant operations, fragment B could expect that while it is being created, fragment A will also exist because fragment A will be removed after fragment B was added. With removing redundant operations, fragment B cannot expect fragment A to exist when it has been created because fragment A's add/remove will be optimized out. It can also reorder the state changes of Fragments to allow for better Transitions. Added Fragments may have @B_android#support#v4#app#Fragment#onCreate_E@ called before replaced Fragments have @B_android#support#v4#app#Fragment#onDestroy_E@ called. @B_android#support#v4#app#Fragment#postponeEnterTransition_E@ requires setReorderingAllowed(true). The default is false.", "history": "added in version 26.0.0-beta2", "FullName": "FragmentTransaction setReorderingAllowed (boolean reorderingAllowed)"}, "setCustomAnimations(int, int)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["int", "int: An animation or animator resource ID used for the enter animation on the view of the fragment being added or attached."], ["int", "int: An animation or animator resource ID used for the exit animation on the view of the fragment being removed or detached."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set specific animation resources to run for the fragments that are entering and exiting in this transaction. These animations will not be played when popping the back stack.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction setCustomAnimations (int enter, int exit)"}, "isEmpty()": {"Returns": [["boolean", "true if this transaction contains no operations, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "boolean isEmpty ()"}, "disallowAddToBackStack()": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disallow calls to @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@. Any future calls to addToBackStack will throw @B_java#lang#IllegalStateException_E@. If addToBackStack has already been called, this method will throw IllegalStateException.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction disallowAddToBackStack ()"}, "commit()": {"Returns": [["int", "Returns the identifier of this transaction's back stack entry, if @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ had been called. Otherwise, returns a negative number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Schedules a commit of this transaction. The commit does not happen immediately; it will be scheduled as work on the main thread to be done the next time that thread is ready. A transaction can only be committed with this method prior to its containing activity saving its state. If the commit is attempted after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored from its state. See @B_android#support#v4#app#FragmentTransaction#commitAllowingStateLoss_E@ for situations where it may be okay to lose the commit.", "history": "added in version 22.0.0", "FullName": "int commit ()"}, "attach(android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "Returns the same FragmentTransaction instance."]], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: The fragment to be attached."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Re-attach a fragment after it had previously been detached from the UI with @B_android#support#v4#app#FragmentTransaction#detach_E@. This causes its view hierarchy to be re-created, attached to the UI, and displayed.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction attach (Fragment fragment)"}, "runOnCommit(java.lang.Runnable)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "this FragmentTransaction"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: Runnable to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ has been called"]], "SeeAlso": [], "Permissions": [], "Description": "Add a Runnable to this transaction that will be run after this transaction has been committed. If fragment transactions are @B_android#support#v4#app#FragmentTransaction#setReorderingAllowed_E@ this may be after other subsequent fragment operations have also taken place, or operations in this transaction may have been optimized out due to the presence of a subsequent fragment transaction in the batch. If a transaction is committed using @B_android#support#v4#app#FragmentTransaction#commitAllowingStateLoss_E@ this runnable may be executed when the FragmentManager is in a state where new transactions may not be committed without allowing state loss. runOnCommit may not be used with transactions @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ as Runnables cannot be persisted with back stack state. @B_java#lang#IllegalStateException_E@ will be thrown if @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ has been previously called for this transaction or if it is called after a call to runOnCommit.", "history": "added in version 26.0.0-beta2", "FullName": "FragmentTransaction runOnCommit (Runnable runnable)"}, "FragmentTransaction()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "FragmentTransaction ()"}, "hide(android.support.v4.app.Fragment)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "Returns the same FragmentTransaction instance."]], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment: The fragment to be hidden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hides an existing fragment. This is only relevant for fragments whose views have been added to a container, as this will cause the view to be hidden.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction hide (Fragment fragment)"}, "addToBackStack(java.lang.String)": {"Returns": [["@B_android#support#v4#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: An optional name for this back stack state, or null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add this transaction to the back stack. This means that the transaction will be remembered after it is committed, and will reverse its operation when later popped off the stack.", "history": "added in version 22.0.0", "FullName": "FragmentTransaction addToBackStack (String name)"}, "commitAllowingStateLoss()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#support#v4#app#FragmentTransaction#commit_E@ but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state, so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user.", "history": "added in version 22.0.0", "FullName": "int commitAllowingStateLoss ()"}, "isAddToBackStackAllowed()": {"Returns": [["boolean", "True if @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ is permitted on this transaction."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this FragmentTransaction is allowed to be added to the back stack. If this method would return false, @B_android#support#v4#app#FragmentTransaction#addToBackStack_E@ will throw @B_java#lang#IllegalStateException_E@.", "history": "added in version 22.0.0", "FullName": "boolean isAddToBackStackAllowed ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.app.FragmentTransaction", "ClassDesc": "Static library support version of the framework's https:##developer#android#com@B_android#app#FragmentTransaction_E@. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview."}