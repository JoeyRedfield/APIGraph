{"Functions": {"getStorageState(java.io.File)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#io#File_E@", "File no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#os#Environment#getExternalStorageState_E@", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public static String getStorageState (File path)"}, "isExternalStorageLegacy(java.io.File)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#io#File_E@", "File: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the path is not a valid storage device."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the shared/external storage media at the given path is a legacy view that includes files not owned by the app. This value may be different from the value requested by requestLegacyExternalStorage in the app's manifest, since an app may inherit its legacy state based on when it was first installed. Non-legacy apps can continue to discover and read media belonging to other apps via @B_android#provider#MediaStore_E@.", "history": "Added in API level 29", "FullName": "public static boolean isExternalStorageLegacy (File path)"}, "isExternalStorageEmulated()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setStorageEncryption_E@"], "Permissions": [], "Description": "Returns whether the primary shared/external storage media is emulated. The contents of emulated storage devices are backed by a private user data partition, which means there is little benefit to apps storing data here instead of the private directories returned by @B_android#content#Context#getFilesDir_E@, etc. This returns true when emulated storage is backed by either internal storage or an adopted storage device.", "history": "Added in API level 11", "FullName": "public static boolean isExternalStorageEmulated ()"}, "isExternalStorageRemovable(java.io.File)": {"Returns": [["boolean", "true if the storage device can be removed (such as an SD card), or false if the storage device is built in and cannot be physically removed."]], "Parameters": [["@B_java#io#File_E@", "File: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the path is not a valid storage device."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the shared/external storage media at the given path is physically removable.", "history": "Added in API level 21", "FullName": "public static boolean isExternalStorageRemovable (File path)"}, "getRootDirectory()": {"Returns": [["@B_java#io#File_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return root of the \"system\" partition holding the core Android OS. Always present and mounted read-only.", "history": "Added in API level 1", "FullName": "public static File getRootDirectory ()"}, "isExternalStorageEmulated(java.io.File)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#io#File_E@", "File: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the path is not a valid storage device."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the shared/external storage media at the given path is emulated. The contents of emulated storage devices are backed by a private user data partition, which means there is little benefit to apps storing data here instead of the private directories returned by @B_android#content#Context#getFilesDir_E@, etc. This returns true when emulated storage is backed by either internal storage or an adopted storage device.", "history": "Added in API level 21", "FullName": "public static boolean isExternalStorageEmulated (File path)"}, "getDownloadCacheDirectory()": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the download/cache content directory.", "history": "Added in API level 1", "FullName": "public static File getDownloadCacheDirectory ()"}, "isExternalStorageLegacy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the primary shared/external storage media is a legacy view that includes files not owned by the app. This value may be different from the value requested by requestLegacyExternalStorage in the app's manifest, since an app may inherit its legacy state based on when it was first installed. Non-legacy apps can continue to discover and read media belonging to other apps via @B_android#provider#MediaStore_E@.", "history": "Added in API level 29", "FullName": "public static boolean isExternalStorageLegacy ()"}, "getExternalStorageState(java.io.File)": {"Returns": [["@B_java#lang#String_E@", "one of @B_android#os#Environment#MEDIA_UNKNOWN_E@, @B_android#os#Environment#MEDIA_REMOVED_E@, @B_android#os#Environment#MEDIA_UNMOUNTED_E@, @B_android#os#Environment#MEDIA_CHECKING_E@, @B_android#os#Environment#MEDIA_NOFS_E@, @B_android#os#Environment#MEDIA_MOUNTED_E@, @B_android#os#Environment#MEDIA_MOUNTED_READ_ONLY_E@, @B_android#os#Environment#MEDIA_SHARED_E@, @B_android#os#Environment#MEDIA_BAD_REMOVAL_E@, or @B_android#os#Environment#MEDIA_UNMOUNTABLE_E@."]], "Parameters": [["@B_java#io#File_E@", "File no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current state of the shared/external storage media at the given path.", "history": "Added in API level 21", "FullName": "public static String getExternalStorageState (File path)"}, "isExternalStorageRemovable()": {"Returns": [["boolean", "true if the storage device can be removed (such as an SD card), or false if the storage device is built in and cannot be physically removed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the primary shared/external storage media is physically removable.", "history": "Added in API level 9", "FullName": "public static boolean isExternalStorageRemovable ()"}, "getDataDirectory()": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the user data directory.", "history": "Added in API level 1", "FullName": "public static File getDataDirectory ()"}, "Environment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Environment ()"}, "getExternalStorageState()": {"Returns": [["@B_java#lang#String_E@", "one of @B_android#os#Environment#MEDIA_UNKNOWN_E@, @B_android#os#Environment#MEDIA_REMOVED_E@, @B_android#os#Environment#MEDIA_UNMOUNTED_E@, @B_android#os#Environment#MEDIA_CHECKING_E@, @B_android#os#Environment#MEDIA_NOFS_E@, @B_android#os#Environment#MEDIA_MOUNTED_E@, @B_android#os#Environment#MEDIA_MOUNTED_READ_ONLY_E@, @B_android#os#Environment#MEDIA_SHARED_E@, @B_android#os#Environment#MEDIA_BAD_REMOVAL_E@, or @B_android#os#Environment#MEDIA_UNMOUNTABLE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Environment#getExternalStorageDirectory_E@"], "Permissions": [], "Description": "Returns the current state of the primary shared/external storage media.", "history": "Added in API level 1", "FullName": "public static String getExternalStorageState ()"}, "getExternalStorageDirectory()": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Environment#getExternalStorageState_E@", "@B_android#os#Environment#isExternalStorageRemovable_E@"], "Permissions": ["@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@", "@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "To improve user privacy, direct access to shared/external storage devices is deprecated. When an app targets @B_android#os#Build#VERSION_CODES#Q_E@, the path returned from this method is no longer directly accessible to apps. Apps can continue to access content stored on shared/external storage by migrating to alternatives such as @B_android#content#Context#getExternalFilesDir_E@, @B_android#provider#MediaStore_E@, or @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@. Return the primary shared/external storage directory. This directory may not currently be accessible if it has been mounted by the user on their computer, has been removed from the device, or some other problem has happened. You can determine its current state with @B_android#os#Environment#getExternalStorageState_E@. Note: don't be confused by the word \"external\" here. This directory can better be thought as media/shared storage. It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions). Traditionally this is an SD card, but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer. On devices with multiple users (as described by @B_android#os#UserManager_E@), each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. In devices with multiple shared/external storage directories, this directory represents the primary storage that the user will interact with. Access to secondary storage is available through @B_android#content#Context#getExternalFilesDirs_E@, @B_android#content#Context#getExternalCacheDirs_E@, and @B_android#content#Context#getExternalMediaDirs_E@. Applications should not directly use this top-level directory, in order to avoid polluting the user's root namespace. Any files that are private to the application should be placed in a directory returned by @B_android#content#Context#getExternalFilesDir_E@, which the system will take care of deleting if the application is uninstalled. Other shared files should be placed in one of the directories returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@. Writing to this path requires the @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ permission, and starting in @B_android#os#Build#VERSION_CODES#KITKAT_E@, read access requires the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ permission, which is automatically granted if you hold the write permission. Starting in @B_android#os#Build#VERSION_CODES#KITKAT_E@, if your application only needs to store internal data, consider using @B_android#content#Context#getExternalFilesDir_E@, @B_android#content#Context#getExternalCacheDir_E@, or @B_android#content#Context#getExternalMediaDirs_E@, which require no permissions to read or write. This path may change between platform versions, so applications should only persist relative paths. Here is an example of typical code to monitor the state of external storage:", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public static File getExternalStorageDirectory ()"}, "getExternalStoragePublicDirectory(java.lang.String)": {"Returns": [["@B_java#io#File_E@", "Returns the File path for the directory. Note that this directory may not yet exist, so you must make sure it exists before using it such as with @B_java#io#File#mkdirs_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The type of storage directory to return. Should be one of @B_android#os#Environment#DIRECTORY_MUSIC_E@, @B_android#os#Environment#DIRECTORY_PODCASTS_E@, @B_android#os#Environment#DIRECTORY_RINGTONES_E@, @B_android#os#Environment#DIRECTORY_ALARMS_E@, @B_android#os#Environment#DIRECTORY_NOTIFICATIONS_E@, @B_android#os#Environment#DIRECTORY_PICTURES_E@, @B_android#os#Environment#DIRECTORY_MOVIES_E@, @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@, @B_android#os#Environment#DIRECTORY_DCIM_E@, or @B_android#os#Environment#DIRECTORY_DOCUMENTS_E@. May not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To improve user privacy, direct access to shared/external storage devices is deprecated. When an app targets @B_android#os#Build#VERSION_CODES#Q_E@, the path returned from this method is no longer directly accessible to apps. Apps can continue to access content stored on shared/external storage by migrating to alternatives such as @B_android#content#Context#getExternalFilesDir_E@, @B_android#provider#MediaStore_E@, or @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@. Get a top-level shared/external storage directory for placing files of a particular type. This is where the user will typically place and manage their own files, so you should be careful about what you put here to ensure you don't erase their files or get in the way of their own organization. On devices with multiple users (as described by @B_android#os#UserManager_E@), each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. Here is an example of typical code to manipulate a picture on the public shared storage:", "history": "Added in API level 8 Deprecated in API level 29", "FullName": "public static File getExternalStoragePublicDirectory (String type)"}}, "Inheritance": [], "ClassName": "android.os.Environment", "ClassDesc": "Provides access to environment variables."}