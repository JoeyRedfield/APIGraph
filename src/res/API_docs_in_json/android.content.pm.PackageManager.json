{"Functions": {"addPackageToPreferred(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract void addPackageToPreferred (String packageName)"}, "getPackagesHoldingPermissions(java.lang.String[],int)": {"Returns": [["@B_java#util#List_E@", "A List of PackageInfo objects, one for each installed package that holds any of the permissions that were provided, containing information about the package. If no installed packages hold any of the permissions, an empty list is returned. If flag MATCH_UNINSTALLED_PACKAGES is set, the package information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set). This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a List of all installed packages that are currently holding any of the given permissions.", "history": "Added in API level 18", "FullName": "public abstract List<PackageInfo> getPackagesHoldingPermissions (String[] permissions, int flags)"}, "getDefaultActivityIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable Image of the icon. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the generic icon for an activity that is used when no specific icon is defined.", "history": "Added in API level 1", "FullName": "public abstract Drawable getDefaultActivityIcon ()"}, "getSystemSharedLibraryNames()": {"Returns": [["@B_java#lang#String_E@", "An array of shared library names that are available on the system, or null if none are installed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a list of shared libraries that are available on the system.", "history": "Added in API level 3", "FullName": "public abstract String[] getSystemSharedLibraryNames ()"}, "getResourcesForActivity(android.content.ComponentName)": {"Returns": [["@B_android#content#res#Resources_E@", "Returns the application's Resources. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Name of the activity whose resources are to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getResourcesForApplication_E@"], "Permissions": [], "Description": "Retrieve the resources associated with an activity. Given the full name of an activity, retrieves the information about it and calls getResources() to return its application's resources. If the activity cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Resources getResourcesForActivity (ComponentName activityName)"}, "resolveService(android.content.Intent,int)": {"Returns": [["@B_android#content#pm#ResolveInfo_E@", "Returns a ResolveInfo object containing the final service intent that was determined to be the best action. Returns null if no matching service was found."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent containing all of the desired specification (action, data, type, category, and/or component). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine the best service to handle for a given Intent.", "history": "Added in API level 1", "FullName": "public abstract ResolveInfo resolveService (Intent intent, int flags)"}, "queryIntentServices(android.content.Intent,int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching service, ordered from best to worst. In other words, the first item is what would be returned by @B_android#content#pm#PackageManager#resolveService_E@. If there are no matching services, an empty list or null is returned."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveService(). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all services that can match the given intent.", "history": "Added in API level 1", "FullName": "public abstract List<ResolveInfo> queryIntentServices (Intent intent, int flags)"}, "clearPackagePreferredActivities(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package whose preferred activity mappings are to be removed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@. Remove all preferred activity mappings, previously added with @B_android#content#pm#PackageManager#addPreferredActivity_E@, from the system whose activities are implemented in the given package name. An application can only clear its own package(s).", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public abstract void clearPackagePreferredActivities (String packageName)"}, "verifyPendingInstall(int,int)": {"Returns": [], "Parameters": [["int", "int: pending package identifier as passed via the @B_android#content#pm#PackageManager#EXTRA_VERIFICATION_ID_E@ Intent extra."], ["int", "int: either @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have the PACKAGE_VERIFICATION_AGENT permission."]], "SeeAlso": [], "Permissions": [], "Description": "Allows a package listening to the @B_android#content#Intent#ACTION_PACKAGE_NEEDS_VERIFICATION_E@ to respond to the package manager. The response must include the verificationCode which is one of @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@.", "history": "Added in API level 14", "FullName": "public abstract void verifyPendingInstall (int id, int verificationCode)"}, "queryContentProviders(java.lang.String,int,int)": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#content#pm#ProviderInfo_E@ objects containing one entry for each provider either matching processName or, if processName is null, all known content providers. If there are no matching providers, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: If non-null, limits the returned providers to only those that are hosted by the given process. If null, all content providers are returned. This value may be null."], ["int", "int: If processName is non-null, this is the required uid owning the requested content providers."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve content provider information. Note: unlike most other methods, an empty result set is indicated by a null return instead of an empty list.", "history": "Added in API level 1", "FullName": "public abstract List<ProviderInfo> queryContentProviders (String processName, int uid, int flags)"}, "getXml(java.lang.String,int,android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "Returns an XmlPullParser allowing you to parse out the XML data. Returns null if the xml resource could not be found for any reason."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package that this xml is coming from. Cannot be null. This value must never be null."], ["int", "int: The resource identifier of the desired xml. Cannot be 0."], ["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Overall information about packageName. This may be null, in which case the application information will be retrieved for you if needed; if you already have this information around, it can be much more efficient to supply it here. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve an XML file from a package. This is a low-level API used to retrieve XML meta data.", "history": "Added in API level 1", "FullName": "public abstract XmlResourceParser getXml (String packageName, int resid, ApplicationInfo appInfo)"}, "isPackageSuspended()": {"Returns": [["boolean", "true if the calling package has been suspended, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#getSuspendedPackageAppExtras_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Apps can query this to know if they have been suspended. A system app with the permission android.permission.SUSPEND_APPS can put any app on the device into a suspended state. While in this state, the application's notifications will be hidden, any of its started activities will be stopped and it will not be able to show toasts or dialogs or play audio. When the user tries to launch a suspended app, the system will, instead, show a dialog to the user informing them that they cannot use this app while it is suspended. When an app is put into this state, the broadcast action @B_android#content#Intent#ACTION_MY_PACKAGE_SUSPENDED_E@ will be delivered to any of its broadcast receivers that included this action in their intent-filters, including manifest receivers. Similarly, a broadcast action @B_android#content#Intent#ACTION_MY_PACKAGE_UNSUSPENDED_E@ is delivered when a previously suspended app is taken out of this state. Apps are expected to use these to gracefully deal with transitions to and from this state.", "history": "Added in API level 28", "FullName": "public boolean isPackageSuspended ()"}, "getPackageUid(java.lang.String,int)": {"Returns": [["int", "Returns an integer UID who owns the given package name."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package. This value must never be null."], ["int", "int: Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name can not be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Return the UID associated with the given package name. Note that the same package will have different UIDs under different @B_android#os#UserHandle_E@ on the same device.", "history": "Added in API level 24", "FullName": "public abstract int getPackageUid (String packageName, int flags)"}, "getApplicationInfo(java.lang.String, int)": {"Returns": [["@B_android#content#pm#ApplicationInfo_E@", "An @B_android#content#pm#ApplicationInfo_E@ containing information about the package. If flag MATCH_UNINSTALLED_PACKAGES is set and if the package is not found in the list of installed applications, the application information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set)."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of an application."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SHARED_LIBRARY_FILES, MATCH_UNINSTALLED_PACKAGES, MATCH_SYSTEM_ONLY, MATCH_DISABLED_COMPONENTS or MATCH_DISABLED_UNTIL_USED_COMPONENTS."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular package/application.", "history": "added in API level 1", "FullName": "public abstract ApplicationInfo getApplicationInfo (String packageName, int flags)"}, "PackageManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public PackageManager ()"}, "currentToCanonicalPackageNames(java.lang.String[])": {"Returns": [["@B_java#lang#String_E@", "Returns an array of the same size as the original, containing the canonical name for each package."]], "Parameters": [["@B_java#lang#String_E@", "String: Array of current names to be mapped. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Map from the current package names in use on the device to whatever the current canonical name of that package is.", "history": "Added in API level 8", "FullName": "public abstract String[] currentToCanonicalPackageNames (String[] packageNames)"}, "queryBroadcastReceivers(android.content.Intent,int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching receiver, ordered from best to worst. If there are no matching receivers, an empty list or null is returned."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveActivity(). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all receivers that can handle a broadcast of the given intent.", "history": "Added in API level 1", "FullName": "public abstract List<ResolveInfo> queryBroadcastReceivers (Intent intent, int flags)"}, "resolveContentProvider(java.lang.String, int)": {"Returns": [["@B_android#content#pm#ProviderInfo_E@", "A @B_android#content#pm#ProviderInfo_E@ object containing information about the provider. If a provider was not found, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the provider to find."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DEFAULT_ONLY, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find a single content provider by its base path name.", "history": "added in API level 1", "FullName": "public abstract ProviderInfo resolveContentProvider (String name, int flags)"}, "resolveActivity(android.content.Intent, int)": {"Returns": [["@B_android#content#pm#ResolveInfo_E@", "Returns a ResolveInfo object containing the final activity intent that was determined to be the best action. Returns null if no matching activity was found. If multiple matching activities are found and there is no default set, returns a ResolveInfo object containing something else, such as the activity resolver."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent containing all of the desired specification (action, data, type, category, and/or component)."], ["int", "int: Additional option flags to modify the data returned. The most important is @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, to limit the resolution to only those activities that support the @B_android#content#Intent#CATEGORY_DEFAULT_E@.Value is either 0 or combination of GET_META_DATA, GET_SIGNATURES, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DEFAULT_ONLY, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine the best action to perform for a given Intent. This is how @B_android#content#Intent#resolveActivity_E@ finds an activity if a class has not been explicitly specified. Note: if using an implicit Intent (without an explicit ComponentName specified), be sure to consider whether to set the @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@ only flag. You need to do so to resolve the activity in the same way that @B_android#content#Context#startActivity_E@ and @B_android#content#Intent#resolveActivity_E@ do.", "history": "added in API level 1", "FullName": "public abstract ResolveInfo resolveActivity (Intent intent, int flags)"}, "getSuspendedPackageAppExtras()": {"Returns": [["@B_android#os#Bundle_E@", "A @B_android#os#Bundle_E@ containing the extras for the app, or null if the package is not currently suspended."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isPackageSuspended_E@", "@B_android#content#Intent_E@"], "Permissions": [], "Description": "Returns a @B_android#os#Bundle_E@ of extras that was meant to be sent to the calling app when it was suspended. An app with the permission android.permission.SUSPEND_APPS can supply this to the system at the time of suspending an app. This is the same @B_android#os#Bundle_E@ that is sent along with the broadcast @B_android#content#Intent#ACTION_MY_PACKAGE_SUSPENDED_E@, whenever the app is suspended. The contents of this @B_android#os#Bundle_E@ are a contract between the suspended app and the suspending app. Note: These extras are optional, so if no extras were supplied to the system, this method will return null, even when the calling app has been suspended.", "history": "Added in API level 28", "FullName": "public Bundle getSuspendedPackageAppExtras ()"}, "queryInstrumentation(java.lang.String, int)": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#content#pm#InstrumentationInfo_E@ objects containing one entry for each matching instrumentation. If there are no instrumentation available, returns an empty list."]], "Parameters": [["@B_java#lang#String_E@", "String: If null, all instrumentation is returned; only the instrumentation targeting this package name is returned."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or GET_META_DATA."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve information about available instrumentation code. May be used to retrieve either all instrumentation code, or only the code targeting a particular package.", "history": "added in API level 1", "FullName": "public abstract List<InstrumentationInfo> queryInstrumentation (String targetPackage, int flags)"}, "getProviderInfo(android.content.ComponentName,int)": {"Returns": [["@B_android#content#pm#ProviderInfo_E@", "A @B_android#content#pm#ProviderInfo_E@ object containing information about the provider. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full component name (i.e. com.google.providers.media/com.google.providers.media. MediaProvider) of a ContentProvider class. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular content provider class.", "history": "Added in API level 9", "FullName": "public abstract ProviderInfo getProviderInfo (ComponentName component, int flags)"}, "hasSystemFeature(java.lang.String, int)": {"Returns": [["boolean", "Returns true if the devices supports the feature, else false."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the given feature name and version is one of the available features as returned by @B_android#content#pm#PackageManager#getSystemAvailableFeatures_E@. Since features are defined to always be backwards compatible, this returns true if the available feature version is greater than or equal to the requested version.", "history": "added in API level 24", "FullName": "public abstract boolean hasSystemFeature (String name, int version)"}, "getApplicationLogo(android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the logo, or null if no logo is specified by the application."]], "Parameters": [["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Information about application being queried. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationLogo_E@"], "Permissions": [], "Description": "Retrieve the logo associated with an application. If it has not specified a logo, this method returns null.", "history": "Added in API level 9", "FullName": "public abstract Drawable getApplicationLogo (ApplicationInfo info)"}, "addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)": {"Returns": [["boolean", "Whether the permission was added to the whitelist."]], "Parameters": [["@B_java#lang#String_E@", "String: The app for which to get whitelisted permissions. This value must never be null."], ["@B_java#lang#String_E@", "String: The whitelisted permission to add. This value must never be null."], ["int", "int: The whitelists to which to add. Passing multiple flags updates all specified whitelists. Value is either 0 or a combination of @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_SYSTEM_E@, @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_INSTALLER_E@, and @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_UPGRADE_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if you try to modify a whitelist that you have no access to."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a whitelisted restricted permission for an app. Permissions can be hard restricted which means that the app cannot hold them or soft restricted where the app can hold the permission but in a weaker form. Whether a permission is @B_android#content#pm#PermissionInfo#FLAG_HARD_RESTRICTED_E@ or @B_android#content#pm#PermissionInfo#FLAG_SOFT_RESTRICTED_E@ depends on the permission declaration. Whitelisting a hard restricted permission allows for the to hold that permission and whitelisting a soft restricted permission allows the app to hold the permission in its full, unrestricted form.", "history": "Added in API level 29", "FullName": "public boolean addWhitelistedRestrictedPermission (String packageName, String permission, int whitelistFlags)"}, "checkSignatures(int,int)": {"Returns": [["int", "Returns an integer indicating whether all signatures on the two packages match. The value is >= 0 (@B_android#content#pm#PackageManager#SIGNATURE_MATCH_E@) if all signatures match or < 0 if there is not a match (@B_android#content#pm#PackageManager#SIGNATURE_NO_MATCH_E@ or @B_android#content#pm#PackageManager#SIGNATURE_UNKNOWN_PACKAGE_E@). Value is @B_android#content#pm#PackageManager#SIGNATURE_MATCH_E@, @B_android#content#pm#PackageManager#SIGNATURE_NEITHER_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_FIRST_NOT_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_SECOND_NOT_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_NO_MATCH_E@, or @B_android#content#pm#PackageManager#SIGNATURE_UNKNOWN_PACKAGE_E@"]], "Parameters": [["int", "int: First UID whose signature will be compared."], ["int", "int: Second UID whose signature will be compared."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#checkSignatures_E@"], "Permissions": [], "Description": "Like @B_android#content#pm#PackageManager#checkSignatures_E@, but takes UIDs of the two packages to be checked. This can be useful, for example, when doing the check in an IPC, where the UID is the only identity available. It is functionally identical to determining the package associated with the UIDs and checking their signatures.", "history": "Added in API level 5", "FullName": "public abstract int checkSignatures (int uid1, int uid2)"}, "getSystemAvailableFeatures()": {"Returns": [["@B_android#content#pm#FeatureInfo_E@", "An array of FeatureInfo classes describing the features that are available on the system, or null if there are none(!!)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a list of features that are available on the system.", "history": "Added in API level 5", "FullName": "public abstract FeatureInfo[] getSystemAvailableFeatures ()"}, "extendVerificationTimeout(int, int, long)": {"Returns": [], "Parameters": [["int", "int: pending package identifier as passed via the @B_android#content#pm#PackageManager#EXTRA_VERIFICATION_ID_E@ Intent extra."], ["int", "int: either @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@. If verificationCodeAtTimeout is neither @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@, then verificationCodeAtTimeout will default to @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@."], ["long", "long: the amount of time requested for the timeout. Must be positive and less than @B_android#content#pm#PackageManager#MAXIMUM_VERIFICATION_TIMEOUT_E@. If millisecondsToDelay is out of bounds, millisecondsToDelay will be set to the closest in bounds value; namely, 0 or @B_android#content#pm#PackageManager#MAXIMUM_VERIFICATION_TIMEOUT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have the PACKAGE_VERIFICATION_AGENT permission."]], "SeeAlso": [], "Permissions": [], "Description": "Allows a package listening to the @B_android#content#Intent#ACTION_PACKAGE_NEEDS_VERIFICATION_E@ to extend the default timeout for a response and declare what action to perform after the timeout occurs. The response must include the verificationCodeAtTimeout which is one of @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@. This method may only be called once per package id. Additional calls will have no effect.", "history": "added in API level 17", "FullName": "public abstract void extendVerificationTimeout (int id, int verificationCodeAtTimeout, long millisecondsToDelay)"}, "hasSigningCertificate(java.lang.String,byte[],int)": {"Returns": [["boolean", "true if this package was or is signed by exactly the certificate certificate"]], "Parameters": [["@B_java#lang#String_E@", "String: package whose signing certificates to check This value must never be null."], ["byte[]", "byte: signing certificate for which to search This value must never be null."], ["int", "int: representation of the certificate Value is @B_android#content#pm#PackageManager#CERT_INPUT_RAW_X509_E@, or @B_android#content#pm#PackageManager#CERT_INPUT_SHA256_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the set of signing certificates by which the given package has proven to have been signed. This should be used instead of getPackageInfo with GET_SIGNATURES since it takes into account the possibility of signing certificate rotation, except in the case of packages that are signed by multiple certificates, for which signing certificate rotation is not supported. This method is analogous to using getPackageInfo with GET_SIGNING_CERTIFICATES and then searching through the resulting signingInfo field to see if the desired certificate is present.", "history": "Added in API level 28", "FullName": "public boolean hasSigningCertificate (String packageName, byte[] certificate, int type)"}, "removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)": {"Returns": [["boolean", "Whether the permission was removed from the whitelist."]], "Parameters": [["@B_java#lang#String_E@", "String: The app for which to get whitelisted permissions. This value must never be null."], ["@B_java#lang#String_E@", "String: The whitelisted permission to remove. This value must never be null."], ["int", "int: The whitelists from which to remove. Passing multiple flags updates all specified whitelists. Value is either 0 or a combination of @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_SYSTEM_E@, @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_INSTALLER_E@, and @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_UPGRADE_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if you try to modify a whitelist that you have no access to."]], "SeeAlso": [], "Permissions": [], "Description": "Removes a whitelisted restricted permission for an app. Permissions can be hard restricted which means that the app cannot hold them or soft restricted where the app can hold the permission but in a weaker form. Whether a permission is @B_android#content#pm#PermissionInfo#FLAG_HARD_RESTRICTED_E@ or @B_android#content#pm#PermissionInfo#FLAG_SOFT_RESTRICTED_E@ depends on the permission declaration. Whitelisting a hard restricted permission allows for the to hold that permission and whitelisting a soft restricted permission allows the app to hold the permission in its full, unrestricted form.", "history": "Added in API level 29", "FullName": "public boolean removeWhitelistedRestrictedPermission (String packageName, String permission, int whitelistFlags)"}, "hasSigningCertificate(int,byte[],int)": {"Returns": [["boolean", "true if this package was or is signed by exactly the certificate certificate"]], "Parameters": [["int", "int: uid whose signing certificates to check"], ["byte[]", "byte: signing certificate for which to search This value must never be null."], ["int", "int: representation of the certificate Value is @B_android#content#pm#PackageManager#CERT_INPUT_RAW_X509_E@, or @B_android#content#pm#PackageManager#CERT_INPUT_SHA256_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the set of signing certificates by which the package(s) for the given uid has proven to have been signed. For multiple packages sharing the same uid, this will return the signing certificates found in the signing history of the \"newest\" package, where \"newest\" indicates the package with the newest signing certificate in the shared uid group. This method should be used instead of getPackageInfo with GET_SIGNATURES since it takes into account the possibility of signing certificate rotation, except in the case of packages that are signed by multiple certificates, for which signing certificate rotation is not supported. This method is analogous to using getPackagesForUid followed by getPackageInfo with GET_SIGNING_CERTIFICATES, selecting the PackageInfo of the newest-signed bpackage , and finally searching through the resulting signingInfo field to see if the desired certificate is there.", "history": "Added in API level 28", "FullName": "public boolean hasSigningCertificate (int uid, byte[] certificate, int type)"}, "getPackageArchiveInfo(java.lang.String, int)": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "A PackageInfo object containing information about the package archive. If the package could not be parsed, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: The path to the archive file"], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_ACTIVITIES, GET_CONFIGURATIONS, GET_GIDS, GET_INSTRUMENTATION, GET_INTENT_FILTERS, GET_META_DATA, GET_PERMISSIONS, GET_PROVIDERS, GET_RECEIVERS, GET_SERVICES, GET_SHARED_LIBRARY_FILES, GET_SIGNATURES, GET_SIGNING_CERTIFICATES, GET_URI_PERMISSION_PATTERNS, MATCH_UNINSTALLED_PACKAGES, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS or MATCH_SYSTEM_ONLY."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve overall information about an application package defined in a package archive file", "history": "added in API level 1", "FullName": "public PackageInfo getPackageArchiveInfo (String archiveFilePath, int flags)"}, "getPackagesForUid(int)": {"Returns": [["@B_java#lang#String_E@", "Returns an array of one or more packages assigned to the user id, or null if there are no known packages with the given id."]], "Parameters": [["int", "int: The user id for which you would like to retrieve the associated packages."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the names of all packages that are associated with a particular user id. In most cases, this will be a single package name, the package that has been assigned that user id. Where there are multiple packages sharing the same user id through the \"sharedUserId\" mechanism, all packages with that id will be returned.", "history": "Added in API level 1", "FullName": "public abstract String[] getPackagesForUid (int uid)"}, "getLeanbackLaunchIntentForPackage(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Returns either a fully-qualified Intent that can be used to launch the main Leanback activity in the package, or null if the package does not contain such an activity."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package to inspect. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages. The current implementation will look for a main activity in the category @B_android#content#Intent#CATEGORY_LEANBACK_LAUNCHER_E@, or return null if no main leanback activities are found.", "history": "Added in API level 21", "FullName": "public abstract Intent getLeanbackLaunchIntentForPackage (String packageName)"}, "isInstantApp(java.lang.String)": {"Returns": [["boolean", "Whether the given package is an instant app."]], "Parameters": [["@B_java#lang#String_E@", "String: The package to check This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#updateInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@", "@B_android#content#pm#PackageManager#clearInstantAppCookie_E@"], "Permissions": [], "Description": "Gets whether the given package is an instant app.", "history": "Added in API level 26", "FullName": "public abstract boolean isInstantApp (String packageName)"}, "canonicalToCurrentPackageNames(java.lang.String[])": {"Returns": [["@B_java#lang#String_E@", "Returns an array of the same size as the original, containing the current name for each package."]], "Parameters": [["@B_java#lang#String_E@", "String: Array of new names to be mapped. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Map from a packages canonical name to the current name in use on the device.", "history": "Added in API level 8", "FullName": "public abstract String[] canonicalToCurrentPackageNames (String[] packageNames)"}, "getInstalledModules(int)": {"Returns": [["@B_java#util#List_E@", "A @B_java#util#List_E@ of @B_android#content#pm#ModuleInfo_E@ objects, one for each installed module, containing information about the module. In the unlikely case there are no installed modules, an empty list is returned. This value will never be null."]], "Parameters": [["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#MATCH_ALL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a List of all modules that are installed.", "history": "Added in API level 29", "FullName": "public List<ModuleInfo> getInstalledModules (int flags)"}, "updateInstantAppCookie(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: The cookie data. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the array exceeds max cookie size."]], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@", "@B_android#content#pm#PackageManager#getInstantAppCookie_E@", "@B_android#content#pm#PackageManager#clearInstantAppCookie_E@"], "Permissions": [], "Description": "Updates the instant application cookie for the calling app. Non instant apps and apps that were instant but were upgraded to normal apps can still access this API. For instant apps this cookie is cached for some time after uninstall while for normal apps the cookie is deleted after the app is uninstalled. The cookie is always present while the app is installed. The cookie size is limited by @B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@. Passing null or an empty array clears the cookie.", "history": "Added in API level 26", "FullName": "public abstract void updateInstantAppCookie (byte[] cookie)"}, "getInstantAppCookieMaxBytes()": {"Returns": [["int", "The max cookie size in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#updateInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookie_E@", "@B_android#content#pm#PackageManager#clearInstantAppCookie_E@"], "Permissions": [], "Description": "Gets the maximum size in bytes of the cookie data an instant app can store on the device.", "history": "Added in API level 26", "FullName": "public abstract int getInstantAppCookieMaxBytes ()"}, "getActivityLogo(android.content.Intent)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the logo, or null if the activity has no logo specified."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent for which you would like to retrieve a logo. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for application matching the given intent could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityLogo_E@"], "Permissions": [], "Description": "Retrieve the logo associated with an Intent. If intent.getClassName() is set, this simply returns the result of getActivityLogo(intent.getClassName()). Otherwise it resolves the intent's component and returns the logo associated with the resolved component. If intent.getClassName() cannot be found or the Intent cannot be resolved to a component, NameNotFoundException is thrown.", "history": "Added in API level 9", "FullName": "public abstract Drawable getActivityLogo (Intent intent)"}, "getWhitelistedRestrictedPermissions(java.lang.String,int)": {"Returns": [["@B_java#util#Set_E@", "The whitelisted permissions that are on any of the whitelists you query for. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The app for which to get whitelisted permissions. This value must never be null."], ["int", "int: The flag to determine which whitelist to query. Only one flag can be passed.s Value is either 0 or a combination of @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_SYSTEM_E@, @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_INSTALLER_E@, and @B_android#content#pm#PackageManager#FLAG_PERMISSION_WHITELIST_UPGRADE_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if you try to access a whitelist that you have no access to."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the restricted permissions that have been whitelisted and the app is allowed to have them granted in their full form. Permissions can be hard restricted which means that the app cannot hold them or soft restricted where the app can hold the permission but in a weaker form. Whether a permission is @B_android#content#pm#PermissionInfo#FLAG_HARD_RESTRICTED_E@ or @B_android#content#pm#PermissionInfo#FLAG_SOFT_RESTRICTED_E@ depends on the permission declaration. Whitelisting a hard restricted permission allows for the to hold that permission and whitelisting a soft restricted permission allows the app to hold the permission in its full, unrestricted form.", "history": "Added in API level 29", "FullName": "public Set<String> getWhitelistedRestrictedPermissions (String packageName, int whitelistFlag)"}, "getPackageGids(java.lang.String, int)": {"Returns": [["int[]", "Returns an int array of the assigned gids, or null if there are none."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package."], ["int", "int no parameter comment Value is either 0 or combination of GET_ACTIVITIES, GET_CONFIGURATIONS, GET_GIDS, GET_INSTRUMENTATION, GET_INTENT_FILTERS, GET_META_DATA, GET_PERMISSIONS, GET_PROVIDERS, GET_RECEIVERS, GET_SERVICES, GET_SHARED_LIBRARY_FILES, GET_SIGNATURES, GET_SIGNING_CERTIFICATES, GET_URI_PERMISSION_PATTERNS, MATCH_UNINSTALLED_PACKAGES, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS or MATCH_SYSTEM_ONLY."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package. Note that the same package may have different GIDs under different @B_android#os#UserHandle_E@ on the same device.", "history": "added in API level 24", "FullName": "public abstract int[] getPackageGids (String packageName, int flags)"}, "getInstallerPackageName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package to query This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given package name is not installed"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the package name of the application that installed a package. This identifies which market the package came from.", "history": "Added in API level 5", "FullName": "public abstract String getInstallerPackageName (String packageName)"}, "getPackageUid(java.lang.String, int)": {"Returns": [["int", "Returns an integer UID who owns the given package name."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package."], ["int", "int no parameter comment Value is either 0 or combination of GET_ACTIVITIES, GET_CONFIGURATIONS, GET_GIDS, GET_INSTRUMENTATION, GET_INTENT_FILTERS, GET_META_DATA, GET_PERMISSIONS, GET_PROVIDERS, GET_RECEIVERS, GET_SERVICES, GET_SHARED_LIBRARY_FILES, GET_SIGNATURES, GET_SIGNING_CERTIFICATES, GET_URI_PERMISSION_PATTERNS, MATCH_UNINSTALLED_PACKAGES, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS or MATCH_SYSTEM_ONLY."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name can not be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Return the UID associated with the given package name. Note that the same package will have different UIDs under different @B_android#os#UserHandle_E@ on the same device.", "history": "added in API level 24", "FullName": "public abstract int getPackageUid (String packageName, int flags)"}, "getPermissionInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#PermissionInfo_E@", "Returns a @B_android#content#pm#PermissionInfo_E@ containing information about the permission."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission.LOGIN) of the permission you are interested in. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular permission.", "history": "Added in API level 1", "FullName": "public abstract PermissionInfo getPermissionInfo (String permissionName, int flags)"}, "canRequestPackageInstalls()": {"Returns": [["boolean", "true if the calling package is trusted by the user to request install packages on the device, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@", "@B_android#provider#Settings_E@"], "Permissions": ["@B_android#Manifest#permission#REQUEST_INSTALL_PACKAGES_E@"], "Description": "Checks whether the calling package is allowed to request package installs through package installer. Apps are encouraged to call this API before launching the package installer via intent @B_android#content#Intent#ACTION_INSTALL_PACKAGE_E@. Starting from Android O, the user can explicitly choose what external sources they trust to install apps on the device. If this API returns false, the install request will be blocked by the package installer and a dialog will be shown to the user with an option to launch settings to change their preference. An application must target Android O or higher and declare permission @B_android#Manifest#permission#REQUEST_INSTALL_PACKAGES_E@ in order to use this API.", "history": "Added in API level 26", "FullName": "public abstract boolean canRequestPackageInstalls ()"}, "getApplicationLabel(android.content.pm.ApplicationInfo)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns the label associated with this application, or null if it could not be found for any reason."]], "Parameters": [["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: The application to get the label of. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the label to use for this application.", "history": "Added in API level 1", "FullName": "public abstract CharSequence getApplicationLabel (ApplicationInfo info)"}, "getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable holding the requested image. Returns null if an image could not be found for any reason."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package that this icon is coming from. Cannot be null. This value must never be null."], ["int", "int: The resource identifier of the desired image. Cannot be 0."], ["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Overall information about packageName. This may be null, in which case the application information will be retrieved for you if needed; if you already have this information around, it can be much more efficient to supply it here. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve an image from a package. This is a low-level API used by the various package manager info structures (such as @B_android#content#pm#ComponentInfo_E@ to implement retrieval of their associated icon.", "history": "Added in API level 1", "FullName": "public abstract Drawable getDrawable (String packageName, int resid, ApplicationInfo appInfo)"}, "hasSystemFeature(java.lang.String,int)": {"Returns": [["boolean", "Returns true if the devices supports the feature, else false."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the given feature name and version is one of the available features as returned by @B_android#content#pm#PackageManager#getSystemAvailableFeatures_E@. Since features are defined to always be backwards compatible, this returns true if the available feature version is greater than or equal to the requested version.", "history": "Added in API level 24", "FullName": "public abstract boolean hasSystemFeature (String featureName, int version)"}, "isInstantApp()": {"Returns": [["boolean", "Whether caller is an instant app."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#updateInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@"], "Permissions": [], "Description": "Gets whether this application is an instant app.", "history": "Added in API level 26", "FullName": "public abstract boolean isInstantApp ()"}, "getPreferredActivities(java.util.List<android.content.IntentFilter>,java.util.List<android.content.ComponentName>,java.lang.String)": {"Returns": [["int", "Returns the total number of registered preferred activities (the number of distinct IntentFilter records, not the number of unique activity components) that were found."]], "Parameters": [["@B_java#util#List_E@", "List: A required list in which to place the filters of all of the preferred activities. This value must never be null."], ["@B_java#util#List_E@", "List: A required list in which to place the component names of all of the preferred activities. This value must never be null."], ["@B_java#lang#String_E@", "String: An optional package in which you would like to limit the list. If null, all activities will be returned; if non-null, only those activities in the given package are returned. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@. Retrieve all preferred activities, previously added with @B_android#content#pm#PackageManager#addPreferredActivity_E@, that are currently registered with the system.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public abstract int getPreferredActivities (List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName)"}, "getApplicationBanner(android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the banner or null if the application has no banner specified."]], "Parameters": [["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Information about application being queried. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationBanner_E@"], "Permissions": [], "Description": "Retrieve the banner associated with an application.", "history": "Added in API level 20", "FullName": "public abstract Drawable getApplicationBanner (ApplicationInfo info)"}, "queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching activity. The list is ordered first by all of the intents resolved in specifics and then any additional activities that can handle intent but did not get included by one of the specifics intents. If there are no matching activities, an empty list is returned."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The class name of the activity that is making the request. This activity will never appear in the output list. Can be null. This value may be null."], ["@B_android#content#Intent_E@", "Intent: An array of Intents that should be resolved to the first specific results. Can be null. This value may be null."], ["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveActivity(). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. The most important is @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, to limit the resolution to only those activities that support the @B_android#content#Intent#CATEGORY_DEFAULT_E@. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a set of activities that should be presented to the user as similar options. This is like @B_android#content#pm#PackageManager#queryIntentActivities_E@, except it also allows you to supply a list of more explicit Intents that you would like to resolve to particular options, and takes care of returning the final ResolveInfo list in a reasonable order, with no duplicates, based on those inputs.", "history": "Added in API level 1", "FullName": "public abstract List<ResolveInfo> queryIntentActivityOptions (ComponentName caller, Intent[] specifics, Intent intent, int flags)"}, "getApplicationLogo(java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the logo, or null if no application logo has been specified."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the package whose application logo is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationLogo_E@"], "Permissions": [], "Description": "Retrieve the logo associated with an application. Given the name of the application's package, retrieves the information about it and calls getApplicationLogo() to return its logo. If the application cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 9", "FullName": "public abstract Drawable getApplicationLogo (String packageName)"}, "checkSignatures(int, int)": {"Returns": [["int", "Returns an integer indicating whether all signatures on the two packages match. The value is >= 0 (@B_android#content#pm#PackageManager#SIGNATURE_MATCH_E@) if all signatures match or < 0 if there is not a match (@B_android#content#pm#PackageManager#SIGNATURE_NO_MATCH_E@ or @B_android#content#pm#PackageManager#SIGNATURE_UNKNOWN_PACKAGE_E@).Value is SIGNATURE_MATCH, SIGNATURE_NEITHER_SIGNED, SIGNATURE_FIRST_NOT_SIGNED, SIGNATURE_SECOND_NOT_SIGNED, SIGNATURE_NO_MATCH or SIGNATURE_UNKNOWN_PACKAGE."]], "Parameters": [["int", "int: First UID whose signature will be compared."], ["int", "int: Second UID whose signature will be compared."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#checkSignatures_E@"], "Permissions": [], "Description": "Like @B_android#content#pm#PackageManager#checkSignatures_E@, but takes UIDs of the two packages to be checked. This can be useful, for example, when doing the check in an IPC, where the UID is the only identity available. It is functionally identical to determining the package associated with the UIDs and checking their signatures.", "history": "added in API level 5", "FullName": "public abstract int checkSignatures (int uid1, int uid2)"}, "extendVerificationTimeout(int,int,long)": {"Returns": [], "Parameters": [["int", "int: pending package identifier as passed via the @B_android#content#pm#PackageManager#EXTRA_VERIFICATION_ID_E@ Intent extra."], ["int", "int: either @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@. If verificationCodeAtTimeout is neither @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@, then verificationCodeAtTimeout will default to @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@."], ["long", "long: the amount of time requested for the timeout. Must be positive and less than @B_android#content#pm#PackageManager#MAXIMUM_VERIFICATION_TIMEOUT_E@. If millisecondsToDelay is out of bounds, millisecondsToDelay will be set to the closest in bounds value; namely, 0 or @B_android#content#pm#PackageManager#MAXIMUM_VERIFICATION_TIMEOUT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have the PACKAGE_VERIFICATION_AGENT permission."]], "SeeAlso": [], "Permissions": [], "Description": "Allows a package listening to the @B_android#content#Intent#ACTION_PACKAGE_NEEDS_VERIFICATION_E@ to extend the default timeout for a response and declare what action to perform after the timeout occurs. The response must include the verificationCodeAtTimeout which is one of @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@. This method may only be called once per package id. Additional calls will have no effect.", "history": "Added in API level 17", "FullName": "public abstract void extendVerificationTimeout (int id, int verificationCodeAtTimeout, long millisecondsToDelay)"}, "getPermissionInfo(java.lang.String, int)": {"Returns": [["@B_android#content#pm#PermissionInfo_E@", "Returns a @B_android#content#pm#PermissionInfo_E@ containing information about the permission."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission.LOGIN) of the permission you are interested in."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or GET_META_DATA."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular permission.", "history": "added in API level 1", "FullName": "public abstract PermissionInfo getPermissionInfo (String name, int flags)"}, "getReceiverInfo(android.content.ComponentName,int)": {"Returns": [["@B_android#content#pm#ActivityInfo_E@", "An @B_android#content#pm#ActivityInfo_E@ containing information about the receiver. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full component name (i.e. com.google.apps.calendar/com.google.apps.calendar. CalendarAlarm) of a Receiver class. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular receiver class.", "history": "Added in API level 1", "FullName": "public abstract ActivityInfo getReceiverInfo (ComponentName component, int flags)"}, "getActivityBanner(android.content.Intent)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the banner, or null if the activity has no banner specified."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent for which you would like to retrieve a banner. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for application matching the given intent could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityBanner_E@"], "Permissions": [], "Description": "Retrieve the banner associated with an Intent. If intent.getClassName() is set, this simply returns the result of getActivityBanner(intent.getClassName()). Otherwise it resolves the intent's component and returns the banner associated with the resolved component. If intent.getClassName() cannot be found or the Intent cannot be resolved to a component, NameNotFoundException is thrown.", "history": "Added in API level 20", "FullName": "public abstract Drawable getActivityBanner (Intent intent)"}, "getInstrumentationInfo(android.content.ComponentName,int)": {"Returns": [["@B_android#content#pm#InstrumentationInfo_E@", "An @B_android#content#pm#InstrumentationInfo_E@ object containing information about the instrumentation. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full name (i.e. com.google.apps.contacts.InstrumentList) of an Instrumentation class. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular instrumentation class.", "history": "Added in API level 1", "FullName": "public abstract InstrumentationInfo getInstrumentationInfo (ComponentName className, int flags)"}, "getApplicationBanner(java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the banner or null if the application has no banner specified."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the package whose application banner is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationBanner_E@"], "Permissions": [], "Description": "Retrieve the banner associated with an application. Given the name of the application's package, retrieves the information about it and calls getApplicationIcon() to return its banner. If the application cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 20", "FullName": "public abstract Drawable getApplicationBanner (String packageName)"}, "queryIntentActivities(android.content.Intent,int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching activity, ordered from best to worst. In other words, the first item is what would be returned by @B_android#content#pm#PackageManager#resolveActivity_E@. If there are no matching activities, an empty list is returned. This value will never be null."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveActivity(). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. The most important is @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, to limit the resolution to only those activities that support the @B_android#content#Intent#CATEGORY_DEFAULT_E@. Or, set @B_android#content#pm#PackageManager#MATCH_ALL_E@ to prevent any filtering of the results. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all activities that can be performed for the given intent.", "history": "Added in API level 1", "FullName": "public abstract List<ResolveInfo> queryIntentActivities (Intent intent, int flags)"}, "resolveActivity(android.content.Intent,int)": {"Returns": [["@B_android#content#pm#ResolveInfo_E@", "Returns a ResolveInfo object containing the final activity intent that was determined to be the best action. Returns null if no matching activity was found. If multiple matching activities are found and there is no default set, returns a ResolveInfo object containing something else, such as the activity resolver."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent containing all of the desired specification (action, data, type, category, and/or component). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. The most important is @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, to limit the resolution to only those activities that support the @B_android#content#Intent#CATEGORY_DEFAULT_E@. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine the best action to perform for a given Intent. This is how @B_android#content#Intent#resolveActivity_E@ finds an activity if a class has not been explicitly specified. Note: if using an implicit Intent (without an explicit ComponentName specified), be sure to consider whether to set the @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@ only flag. You need to do so to resolve the activity in the same way that @B_android#content#Context#startActivity_E@ and @B_android#content#Intent#resolveActivity_E@ do.", "history": "Added in API level 1", "FullName": "public abstract ResolveInfo resolveActivity (Intent intent, int flags)"}, "removePermission(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the permission to remove. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if you are not allowed to remove the given permission name."]], "SeeAlso": ["@B_android#content#pm#PackageManager#addPermission_E@"], "Permissions": [], "Description": "Removes a permission that was previously added with @B_android#content#pm#PackageManager#addPermission_E@. The same ownership rules apply -- you are only allowed to remove permissions that you are allowed to add.", "history": "Added in API level 1", "FullName": "public abstract void removePermission (String permissionName)"}, "getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A drawable that combines the original drawable and a badge as determined by the system."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to badge. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The target user. This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: Where in the bounds of the badged drawable to place the badge. If it's null, the badge is applied on top of the entire drawable being badged. This value may be null."], ["int", "int: The optional desired density for the badge as per @B_android#util#DisplayMetrics#densityDpi_E@. If it's not positive, the density of the display is used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable. The caller can specify the location in the bounds of the drawable to be badged where the badge should be applied as well as the density of the badge to be used. If the original drawable is a BitmapDrawable and the backing bitmap is mutable as per @B_android#graphics#Bitmap#isMutable_E@, the badging is performed in place and the original drawable is returned.", "history": "Added in API level 21", "FullName": "public abstract Drawable getUserBadgedDrawableForDensity (Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)"}, "getServiceInfo(android.content.ComponentName,int)": {"Returns": [["@B_android#content#pm#ServiceInfo_E@", "A @B_android#content#pm#ServiceInfo_E@ object containing information about the service. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full component name (i.e. com.google.apps.media/com.google.apps.media. BackgroundPlayback) of a Service class. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular service class.", "history": "Added in API level 1", "FullName": "public abstract ServiceInfo getServiceInfo (ComponentName component, int flags)"}, "getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A drawable that combines the original icon and a badge as determined by the system. This value will never be null."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to badge. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The target user. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the target user is a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon. For badging an arbitrary drawable use @B_android#content#pm#PackageManager#getUserBadgedDrawableForDensity_E@. If the original drawable is a BitmapDrawable and the backing bitmap is mutable as per @B_android#graphics#Bitmap#isMutable_E@, the badging is performed in place and the original drawable is returned.", "history": "Added in API level 21", "FullName": "public abstract Drawable getUserBadgedIcon (Drawable drawable, UserHandle user)"}, "getNameForUid(int)": {"Returns": [["@B_java#lang#String_E@", "Returns a unique name for the given uid, or null if the uid is not currently assigned."]], "Parameters": [["int", "int: The uid for which you would like to retrieve a name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the official name associated with a uid. This name is guaranteed to never change, though it is possible for the underlying uid to be changed. That is, if you are storing information about uids in persistent storage, you should use the string returned by this function instead of the raw uid.", "history": "Added in API level 1", "FullName": "public abstract String getNameForUid (int uid)"}, "getPackageGids(java.lang.String)": {"Returns": [["int[]", "Returns an int array of the assigned GIDs, or null if there are none."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package. Note that the same package may have different GIDs under different @B_android#os#UserHandle_E@ on the same device.", "history": "Added in API level 1", "FullName": "public abstract int[] getPackageGids (String packageName)"}, "getApplicationIcon(java.lang.String)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the icon, or the default application icon if it could not be found. Does not return null."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the package whose application icon is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationIcon_E@"], "Permissions": [], "Description": "Retrieve the icon associated with an application. Given the name of the application's package, retrieves the information about it and calls getApplicationIcon() to return its icon. If the application cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Drawable getApplicationIcon (String packageName)"}, "getApplicationIcon(android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the icon, or the default application icon if it could not be found."]], "Parameters": [["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Information about application being queried. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#getApplicationIcon_E@"], "Permissions": [], "Description": "Retrieve the icon associated with an application. If it has not defined an icon, the default app icon is returned. Does not return null.", "history": "Added in API level 1", "FullName": "public abstract Drawable getApplicationIcon (ApplicationInfo info)"}, "getActivityInfo(android.content.ComponentName,int)": {"Returns": [["@B_android#content#pm#ActivityInfo_E@", "An @B_android#content#pm#ActivityInfo_E@ containing information about the activity. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full component name (i.e. com.google.apps.contacts/com.google.apps.contacts. ContactsList) of an Activity class. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular activity class.", "history": "Added in API level 1", "FullName": "public abstract ActivityInfo getActivityInfo (ComponentName component, int flags)"}, "getAllPermissionGroups(int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of @B_android#content#pm#PermissionGroupInfo_E@ containing information about all of the known permission groups. This value will never be null."]], "Parameters": [["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the known permission groups in the system.", "history": "Added in API level 1", "FullName": "public abstract List<PermissionGroupInfo> getAllPermissionGroups (int flags)"}, "getActivityBanner(android.content.ComponentName)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the banner, or null if the activity has no banner specified."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Name of the activity whose banner is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given activity could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityBanner_E@"], "Permissions": [], "Description": "Retrieve the banner associated with an activity. Given the full name of an activity, retrieves the information about it and calls @B_android#content#pm#PackageItemInfo#loadIcon_E@ to return its banner. If the activity cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 20", "FullName": "public abstract Drawable getActivityBanner (ComponentName activityName)"}, "getPackageInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "A PackageInfo object containing information about the package. If flag MATCH_UNINSTALLED_PACKAGES is set and if the package is not found in the list of installed applications, the package information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set)."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve overall information about an application package that is installed on the system.", "history": "Added in API level 1", "FullName": "public abstract PackageInfo getPackageInfo (String packageName, int flags)"}, "getChangedPackages(int)": {"Returns": [["@B_android#content#pm#ChangedPackages_E@", "no returns description in source"]], "Parameters": [["int", "int: The first sequence number for which to retrieve package changes. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#provider#Settings#Global_E@"], "Permissions": [], "Description": "Returns the names of the packages that have been changed [eg. added, removed or updated] since the given sequence number. If no packages have been changed, returns null. The sequence number starts at 0 and is reset every boot.", "history": "Added in API level 26", "FullName": "public abstract ChangedPackages getChangedPackages (int sequenceNumber)"}, "getSyntheticAppDetailsActivityEnabled(java.lang.String)": {"Returns": [["boolean", "Returns the enabled state for the synthetic app details activity."]], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the app This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether a synthetic app details activity will be generated if the app has no enabled launcher activity.", "history": "Added in API level 29", "FullName": "public boolean getSyntheticAppDetailsActivityEnabled (String packageName)"}, "checkSignatures(java.lang.String,java.lang.String)": {"Returns": [["int", "Returns an integer indicating whether all signatures on the two packages match. The value is >= 0 (@B_android#content#pm#PackageManager#SIGNATURE_MATCH_E@) if all signatures match or < 0 if there is not a match (@B_android#content#pm#PackageManager#SIGNATURE_NO_MATCH_E@ or @B_android#content#pm#PackageManager#SIGNATURE_UNKNOWN_PACKAGE_E@). Value is @B_android#content#pm#PackageManager#SIGNATURE_MATCH_E@, @B_android#content#pm#PackageManager#SIGNATURE_NEITHER_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_FIRST_NOT_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_SECOND_NOT_SIGNED_E@, @B_android#content#pm#PackageManager#SIGNATURE_NO_MATCH_E@, or @B_android#content#pm#PackageManager#SIGNATURE_UNKNOWN_PACKAGE_E@"]], "Parameters": [["@B_java#lang#String_E@", "String: First package name whose signature will be compared. This value must never be null."], ["@B_java#lang#String_E@", "String: Second package name whose signature will be compared. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#checkSignatures_E@"], "Permissions": [], "Description": "Compare the signatures of two packages to determine if the same signature appears in both of them. If they do contain the same signature, then they are allowed special privileges when working with each other: they can share the same user-id, run instrumentation against each other, etc.", "history": "Added in API level 1", "FullName": "public abstract int checkSignatures (String packageName1, String packageName2)"}, "getActivityIcon(android.content.Intent)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the icon, or the default activity icon if it could not be found. Does not return null."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent for which you would like to retrieve an icon. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for application matching the given intent could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityIcon_E@"], "Permissions": [], "Description": "Retrieve the icon associated with an Intent. If intent.getClassName() is set, this simply returns the result of getActivityIcon(intent.getClassName()). Otherwise it resolves the intent's component and returns the icon associated with the resolved component. If intent.getClassName() cannot be found or the Intent cannot be resolved to a component, NameNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Drawable getActivityIcon (Intent intent)"}, "getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)": {"Returns": [["@B_java#lang#CharSequence_E@", "A label that combines the original label and a badge as determined by the system. This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The label to change. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The target user. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback. E.g. passing in \"Email\" and it might return \"Work Email\" for Email in the work profile.", "history": "Added in API level 21", "FullName": "public abstract CharSequence getUserBadgedLabel (CharSequence label, UserHandle user)"}, "addPermission(android.content.pm.PermissionInfo)": {"Returns": [["boolean", "Returns true if a new permission was created, false if an existing one was updated."]], "Parameters": [["@B_android#content#pm#PermissionInfo_E@", "PermissionInfo: Description of the permission to be added. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if you are not allowed to add the given permission name."]], "SeeAlso": ["@B_android#content#pm#PackageManager#removePermission_E@"], "Permissions": [], "Description": "Add a new dynamic permission to the system. For this to work, your package must have defined a permission tree through the @B_android#R#styleable#AndroidManifestPermissionTree_E@ tag in its manifest. A package can only add permissions to trees that were defined by either its own package or another with the same user id; a permission is in a tree if it matches the name of the permission tree + \".\": for example, \"com.foo.bar\" is a member of the permission tree \"com.foo\". It is good to make your permission tree name descriptive, because you are taking possession of that entire set of permission names. Thus, it must be under a domain you control, with a suffix that will not match any normal permissions that may be declared in any applications that are part of that domain. New permissions must be added before any .apks are installed that use those permissions. Permissions you add through this method are remembered across reboots of the device. If the given permission already exists, the info you supply here will be used to update it.", "history": "Added in API level 1", "FullName": "public abstract boolean addPermission (PermissionInfo info)"}, "getResourcesForApplication(android.content.pm.ApplicationInfo)": {"Returns": [["@B_android#content#res#Resources_E@", "Returns the application's Resources. This value will never be null."]], "Parameters": [["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Information about the desired application. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded (most likely because it was uninstalled)."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the resources for an application. Throws NameNotFoundException if the package is no longer installed.", "history": "Added in API level 1", "FullName": "public abstract Resources getResourcesForApplication (ApplicationInfo app)"}, "getPackageInfo(android.content.pm.VersionedPackage,int)": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "A PackageInfo object containing information about the package. If flag MATCH_UNINSTALLED_PACKAGES is set and if the package is not found in the list of installed applications, the package information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set)."]], "Parameters": [["@B_android#content#pm#VersionedPackage_E@", "VersionedPackage: The versioned package for which to query. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve overall information about an application package that is installed on the system. This method can be used for retrieving information about packages for which multiple versions can be installed at the time. Currently only packages hosting static shared libraries can have multiple installed versions. The method can also be used to get info for a package that has a single version installed by passing @B_android#content#pm#PackageManager#VERSION_CODE_HIGHEST_E@ in the @B_android#content#pm#VersionedPackage_E@ constructor.", "history": "Added in API level 26", "FullName": "public abstract PackageInfo getPackageInfo (VersionedPackage versionedPackage, int flags)"}, "getPackageInfo(java.lang.String, int)": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "A PackageInfo object containing information about the package. If flag MATCH_UNINSTALLED_PACKAGES is set and if the package is not found in the list of installed applications, the package information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set)."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_ACTIVITIES, GET_CONFIGURATIONS, GET_GIDS, GET_INSTRUMENTATION, GET_INTENT_FILTERS, GET_META_DATA, GET_PERMISSIONS, GET_PROVIDERS, GET_RECEIVERS, GET_SERVICES, GET_SHARED_LIBRARY_FILES, GET_SIGNATURES, GET_SIGNING_CERTIFICATES, GET_URI_PERMISSION_PATTERNS, MATCH_UNINSTALLED_PACKAGES, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS or MATCH_SYSTEM_ONLY."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve overall information about an application package that is installed on the system.", "history": "added in API level 1", "FullName": "public abstract PackageInfo getPackageInfo (String packageName, int flags)"}, "getPackageGids(java.lang.String,int)": {"Returns": [["int[]", "Returns an int array of the assigned gids, or null if there are none."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of the desired package. This value must never be null."], ["int", "int: Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of all of the POSIX secondary group IDs that have been assigned to the given package. Note that the same package may have different GIDs under different @B_android#os#UserHandle_E@ on the same device.", "history": "Added in API level 24", "FullName": "public abstract int[] getPackageGids (String packageName, int flags)"}, "setApplicationCategoryHint(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the package to change the category hint for. This value must never be null."], ["int", "int: the category hint to set. Value is @B_android#content#pm#ApplicationInfo#CATEGORY_UNDEFINED_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_GAME_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_AUDIO_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_VIDEO_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_IMAGE_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_SOCIAL_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_NEWS_E@, @B_android#content#pm#ApplicationInfo#CATEGORY_MAPS_E@, or @B_android#content#pm#ApplicationInfo#CATEGORY_PRODUCTIVITY_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide a hint of what the @B_android#content#pm#ApplicationInfo#category_E@ value should be for the given package. This hint can only be set by the app which installed this package, as determined by @B_android#content#pm#PackageManager#getInstallerPackageName_E@.", "history": "Added in API level 26", "FullName": "public abstract void setApplicationCategoryHint (String packageName, int categoryHint)"}, "queryPermissionsByGroup(java.lang.String,int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of @B_android#content#pm#PermissionInfo_E@ containing information about all of the permissions in the given group."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission.LOGIN) of the permission group you are interested in. Use null to find all of the permissions not associated with a group. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Query for all of the permissions associated with a particular group.", "history": "Added in API level 1", "FullName": "public abstract List<PermissionInfo> queryPermissionsByGroup (String permissionGroup, int flags)"}, "getApplicationInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#ApplicationInfo_E@", "An @B_android#content#pm#ApplicationInfo_E@ containing information about the package. If flag MATCH_UNINSTALLED_PACKAGES is set and if the package is not found in the list of installed applications, the application information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set). This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (i.e. com.google.apps.contacts) of an application. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular package/application.", "history": "Added in API level 1", "FullName": "public abstract ApplicationInfo getApplicationInfo (String packageName, int flags)"}, "setApplicationEnabledSetting(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the application to enable This value must never be null."], ["int", "int: The new enabled state for the application. Value is @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_ENABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_USER_E@, or @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_E@"], ["int", "int: Optional behavior flags. Value is either 0 or @B_android#content#pm#PackageManager#DONT_KILL_APP_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by @B_android#content#pm#PackageManager#setComponentEnabledSetting_E@ for any of the application's components.", "history": "Added in API level 1", "FullName": "public abstract void setApplicationEnabledSetting (String packageName, int newState, int flags)"}, "queryInstrumentation(java.lang.String,int)": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#content#pm#InstrumentationInfo_E@ objects containing one entry for each matching instrumentation. If there are no instrumentation available, returns an empty list."]], "Parameters": [["@B_java#lang#String_E@", "String: If null, all instrumentation is returned; only the instrumentation targeting this package name is returned. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve information about available instrumentation code. May be used to retrieve either all instrumentation code, or only the code targeting a particular package.", "history": "Added in API level 1", "FullName": "public abstract List<InstrumentationInfo> queryInstrumentation (String targetPackage, int flags)"}, "hasSigningCertificate(int, byte[], int)": {"Returns": [["boolean", "true if this package was or is signed by exactly the certificate certificate"]], "Parameters": [["int", "int: uid whose signing certificates to check"], ["byte[]", "byte: signing certificate for which to search"], ["int", "int: representation of the certificateValue is CERT_INPUT_RAW_X509 or CERT_INPUT_SHA256."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the set of signing certificates by which the package(s) for the given uid has proven to have been signed. For multiple packages sharing the same uid, this will return the signing certificates found in the signing history of the \"newest\" package, where \"newest\" indicates the package with the newest signing certificate in the shared uid group. This method should be used instead of getPackageInfo with GET_SIGNATURES since it takes into account the possibility of signing certificate rotation, except in the case of packages that are signed by multiple certificates, for which signing certificate rotation is not supported. This method is analogous to using getPackagesForUid followed by getPackageInfo with GET_SIGNING_CERTIFICATES, selecting the PackageInfo of the newest-signed bpackage , and finally searching through the resulting signingInfo field to see if the desired certificate is there.", "history": "added in API level 28", "FullName": "public boolean hasSigningCertificate (int uid, byte[] certificate, int type)"}, "hasSystemFeature(java.lang.String)": {"Returns": [["boolean", "Returns true if the devices supports the feature, else false."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the given feature name is one of the available features as returned by @B_android#content#pm#PackageManager#getSystemAvailableFeatures_E@. This tests for the presence of any version of the given feature name; use @B_android#content#pm#PackageManager#hasSystemFeature_E@ to check for a minimum version.", "history": "Added in API level 5", "FullName": "public abstract boolean hasSystemFeature (String featureName)"}, "queryIntentServices(android.content.Intent, int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching service, ordered from best to worst. In other words, the first item is what would be returned by @B_android#content#pm#PackageManager#resolveService_E@. If there are no matching services, an empty list or null is returned."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveService()."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SIGNATURES, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DEFAULT_ONLY, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all services that can match the given intent.", "history": "added in API level 1", "FullName": "public abstract List<ResolveInfo> queryIntentServices (Intent intent, int flags)"}, "getComponentEnabledSetting(android.content.ComponentName)": {"Returns": [["int", "Returns the current enabled state for the component. Value is @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_ENABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_USER_E@, or @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component to retrieve. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the enabled setting for a package component (activity, receiver, service, provider). This returns the last value set by @B_android#content#pm#PackageManager#setComponentEnabledSetting_E@; in most cases this value will be @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@ since the value originally specified in the manifest has not been modified.", "history": "Added in API level 1", "FullName": "public abstract int getComponentEnabledSetting (ComponentName componentName)"}, "isDeviceUpgrading()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the device is upgrading, such as first boot after OTA.", "history": "Added in API level 29", "FullName": "public boolean isDeviceUpgrading ()"}, "verifyPendingInstall(int, int)": {"Returns": [], "Parameters": [["int", "int: pending package identifier as passed via the @B_android#content#pm#PackageManager#EXTRA_VERIFICATION_ID_E@ Intent extra."], ["int", "int: either @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have the PACKAGE_VERIFICATION_AGENT permission."]], "SeeAlso": [], "Permissions": [], "Description": "Allows a package listening to the @B_android#content#Intent#ACTION_PACKAGE_NEEDS_VERIFICATION_E@ to respond to the package manager. The response must include the verificationCode which is one of @B_android#content#pm#PackageManager#VERIFICATION_ALLOW_E@ or @B_android#content#pm#PackageManager#VERIFICATION_REJECT_E@.", "history": "added in API level 14", "FullName": "public abstract void verifyPendingInstall (int id, int verificationCode)"}, "getInstantAppCookie()": {"Returns": [["byte[]", "The cookie. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#updateInstantAppCookie_E@", "@B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@", "@B_android#content#pm#PackageManager#clearInstantAppCookie_E@"], "Permissions": [], "Description": "Gets the instant application cookie for this app. Non instant apps and apps that were instant but were upgraded to normal apps can still access this API. For instant apps this cookie is cached for some time after uninstall while for normal apps the cookie is deleted after the app is uninstalled. The cookie is always present while the app is installed.", "history": "Added in API level 26", "FullName": "public abstract byte[] getInstantAppCookie ()"}, "resolveService(android.content.Intent, int)": {"Returns": [["@B_android#content#pm#ResolveInfo_E@", "Returns a ResolveInfo object containing the final service intent that was determined to be the best action. Returns null if no matching service was found."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent containing all of the desired specification (action, data, type, category, and/or component)."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SIGNATURES, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DEFAULT_ONLY, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine the best service to handle for a given Intent.", "history": "added in API level 1", "FullName": "public abstract ResolveInfo resolveService (Intent intent, int flags)"}, "queryIntentActivities(android.content.Intent, int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching activity, ordered from best to worst. In other words, the first item is what would be returned by @B_android#content#pm#PackageManager#resolveActivity_E@. If there are no matching activities, an empty list is returned."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The desired intent as per resolveActivity()."], ["int", "int: Additional option flags to modify the data returned. The most important is @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, to limit the resolution to only those activities that support the @B_android#content#Intent#CATEGORY_DEFAULT_E@. Or, set @B_android#content#pm#PackageManager#MATCH_ALL_E@ to prevent any filtering of the results.Value is either 0 or combination of GET_META_DATA, GET_SIGNATURES, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DEFAULT_ONLY, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all activities that can be performed for the given intent.", "history": "added in API level 1", "FullName": "public abstract List<ResolveInfo> queryIntentActivities (Intent intent, int flags)"}, "getResourcesForApplication(java.lang.String)": {"Returns": [["@B_android#content#res#Resources_E@", "Returns the application's Resources. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Package name of the application whose resources are to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given application could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getResourcesForApplication_E@"], "Permissions": [], "Description": "Retrieve the resources associated with an application. Given the full package name of an application, retrieves the information about it and calls getResources() to return its application's resources. If the appPackageName cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Resources getResourcesForApplication (String packageName)"}, "getApplicationEnabledSetting(java.lang.String)": {"Returns": [["int", "Returns the current enabled state for the application. Value is @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_ENABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_USER_E@, or @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_E@"]], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the application to retrieve. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the named package does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the enabled setting for an application. This returns the last value set by @B_android#content#pm#PackageManager#setApplicationEnabledSetting_E@; in most cases this value will be @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@ since the value originally specified in the manifest has not been modified.", "history": "Added in API level 1", "FullName": "public abstract int getApplicationEnabledSetting (String packageName)"}, "getActivityLogo(android.content.ComponentName)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the logo or null if the activity has no logo specified."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Name of the activity whose logo is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given activity could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityLogo_E@"], "Permissions": [], "Description": "Retrieve the logo associated with an activity. Given the full name of an activity, retrieves the information about it and calls @B_android#content#pm#PackageItemInfo#loadLogo_E@ to return its logo. If the activity cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 9", "FullName": "public abstract Drawable getActivityLogo (ComponentName activityName)"}, "getActivityIcon(android.content.ComponentName)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns the image of the icon, or the default activity icon if it could not be found. Does not return null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Name of the activity whose icon is to be retrieved. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "Thrown if the resources for the given activity could not be loaded."]], "SeeAlso": ["@B_android#content#pm#PackageManager#getActivityIcon_E@"], "Permissions": [], "Description": "Retrieve the icon associated with an activity. Given the full name of an activity, retrieves the information about it and calls @B_android#content#pm#PackageItemInfo#loadIcon_E@ to return its icon. If the activity cannot be found, NameNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Drawable getActivityIcon (ComponentName activityName)"}, "getLaunchIntentForPackage(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "A fully-qualified @B_android#content#Intent_E@ that can be used to launch the main activity in the package. Returns null if the package does not contain such an activity, or if packageName is not recognized."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package to inspect. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a \"good\" intent to launch a front-door activity in a package. This is used, for example, to implement an \"open\" button when browsing through packages. The current implementation looks first for a main activity in the category @B_android#content#Intent#CATEGORY_INFO_E@, and next for a main activity in the category @B_android#content#Intent#CATEGORY_LAUNCHER_E@. Returns null if neither are found.", "history": "Added in API level 3", "FullName": "public abstract Intent getLaunchIntentForPackage (String packageName)"}, "getPackageInstaller()": {"Returns": [["@B_android#content#pm#PackageInstaller_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return interface that offers the ability to install, upgrade, and remove applications on the device.", "history": "Added in API level 21", "FullName": "public abstract PackageInstaller getPackageInstaller ()"}, "getInstalledPackages(int)": {"Returns": [["@B_java#util#List_E@", "A List of PackageInfo objects, one for each installed package, containing information about the package. In the unlikely case there are no installed packages, an empty list is returned. If flag MATCH_UNINSTALLED_PACKAGES is set, the package information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set). This value will never be null."]], "Parameters": [["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a List of all packages that are installed for the current user.", "history": "Added in API level 1", "FullName": "public abstract List<PackageInfo> getInstalledPackages (int flags)"}, "getModuleInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#ModuleInfo_E@", "A @B_android#content#pm#ModuleInfo_E@ object containing information about the module. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the module. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#MATCH_ALL_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a module with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve information for a particular module.", "history": "Added in API level 29", "FullName": "public ModuleInfo getModuleInfo (String packageName, int flags)"}, "queryContentProviders(java.lang.String, int, int)": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#content#pm#ProviderInfo_E@ objects containing one entry for each provider either matching processName or, if processName is null, all known content providers. If there are no matching providers, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: If non-null, limits the returned providers to only those that are hosted by the given process. If null, all content providers are returned."], ["int", "int: If processName is non-null, this is the required uid owning the requested content providers."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DEFAULT_ONLY, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve content provider information. Note: unlike most other methods, an empty result set is indicated by a null return instead of an empty list.", "history": "added in API level 1", "FullName": "public abstract List<ProviderInfo> queryContentProviders (String processName, int uid, int flags)"}, "queryIntentContentProviders(android.content.Intent,int)": {"Returns": [["@B_java#util#List_E@", "Returns a List of ResolveInfo objects containing one entry for each matching provider, ordered from best to worst. If there are no matching services, an empty list or null is returned."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An intent containing all of the desired specification (action, data, type, category, and/or component). This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_RESOLVED_FILTER_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all providers that can match the given intent.", "history": "Added in API level 19", "FullName": "public abstract List<ResolveInfo> queryIntentContentProviders (Intent intent, int flags)"}, "addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#IntentFilter_E@", "IntentFilter: The set of intents under which this activity will be made preferred. This value must never be null."], ["int", "int: The IntentFilter match category that this preference applies to."], ["@B_android#content#ComponentName_E@", "ComponentName: The set of activities that the user was picking from when this preference was made. This value may be null."], ["@B_android#content#ComponentName_E@", "ComponentName: The component name of the activity that is to be preferred. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when @B_android#content#Context#startActivity_E@ finds multiple matching activities and also matches the given filter.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract void addPreferredActivity (IntentFilter filter, int match, ComponentName[] set, ComponentName activity)"}, "setComponentEnabledSetting(android.content.ComponentName,int,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component to enable This value must never be null."], ["int", "int: The new enabled state for the component. Value is @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DEFAULT_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_ENABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_E@, @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_USER_E@, or @B_android#content#pm#PackageManager#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED_E@"], ["int", "int: Optional behavior flags. Value is either 0 or @B_android#content#pm#PackageManager#DONT_KILL_APP_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled setting for a package component (activity, receiver, service, provider). This setting will override any enabled state which may have been set by the component in its manifest.", "history": "Added in API level 1", "FullName": "public abstract void setComponentEnabledSetting (ComponentName componentName, int newState, int flags)"}, "isPermissionRevokedByPolicy(java.lang.String,java.lang.String)": {"Returns": [["boolean", "Whether the permission is restricted by policy."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the permission you are checking for. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package you are checking against. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a particular permissions has been revoked for a package by policy. Typically the device owner or the profile owner may apply such a policy. The user cannot grant policy revoked permissions, hence the only way for an app to get such a permission is by a policy change.", "history": "Added in API level 23", "FullName": "public abstract boolean isPermissionRevokedByPolicy (String permissionName, String packageName)"}, "getInstalledApplications(int)": {"Returns": [["@B_java#util#List_E@", "A List of ApplicationInfo objects, one for each installed application. In the unlikely case there are no installed packages, an empty list is returned. If flag MATCH_UNINSTALLED_PACKAGES is set, the application information is retrieved from the list of uninstalled applications (which includes installed applications as well as applications with data directory i.e. applications which had been deleted with DONT_DELETE_DATA flag set). This value will never be null."]], "Parameters": [["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a List of all application packages that are installed for the current user. If flag GET_UNINSTALLED_PACKAGES has been set, a list of all applications including those deleted with DONT_DELETE_DATA (partially installed apps with data directory) will be returned.", "history": "Added in API level 1", "FullName": "public abstract List<ApplicationInfo> getInstalledApplications (int flags)"}, "clearInstantAppCookie()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager#isInstantApp_E@", "@B_android#content#pm#PackageManager#getInstantAppCookieMaxBytes_E@", "@B_android#content#pm#PackageManager#getInstantAppCookie_E@", "@B_android#content#pm#PackageManager#clearInstantAppCookie_E@"], "Permissions": [], "Description": "Clears the instant application cookie for the calling app.", "history": "Added in API level 26", "FullName": "public abstract void clearInstantAppCookie ()"}, "setApplicationCategoryHint(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the package to change the category hint for.This value must never be null."], ["int", "int: the category hint to set. Value is CATEGORY_UNDEFINED, CATEGORY_GAME, CATEGORY_AUDIO, CATEGORY_VIDEO, CATEGORY_IMAGE, CATEGORY_SOCIAL, CATEGORY_NEWS, CATEGORY_MAPS or CATEGORY_PRODUCTIVITY."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide a hint of what the @B_android#content#pm#ApplicationInfo#category_E@ value should be for the given package. This hint can only be set by the app which installed this package, as determined by @B_android#content#pm#PackageManager#getInstallerPackageName_E@.", "history": "added in API level 26", "FullName": "public abstract void setApplicationCategoryHint (String packageName, int categoryHint)"}, "getPermissionGroupInfo(java.lang.String, int)": {"Returns": [["@B_android#content#pm#PermissionGroupInfo_E@", "Returns a @B_android#content#pm#PermissionGroupInfo_E@ containing information about the permission."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission_group.APPS) of the permission you are interested in."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or GET_META_DATA."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular group of permissions.", "history": "added in API level 1", "FullName": "public abstract PermissionGroupInfo getPermissionGroupInfo (String name, int flags)"}, "isSafeMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the device has been booted into safe mode.", "history": "Added in API level 3", "FullName": "public abstract boolean isSafeMode ()"}, "queryPermissionsByGroup(java.lang.String, int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of @B_android#content#pm#PermissionInfo_E@ containing information about all of the permissions in the given group."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission.LOGIN) of the permission group you are interested in. Use null to find all of the permissions not associated with a group."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or GET_META_DATA."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Query for all of the permissions associated with a particular group.", "history": "added in API level 1", "FullName": "public abstract List<PermissionInfo> queryPermissionsByGroup (String group, int flags)"}, "getPreferredPackages(int)": {"Returns": [["@B_java#util#List_E@", "A List of PackageInfo objects, one for each preferred application, in order of preference. This value will never be null."]], "Parameters": [["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@. Retrieve the list of all currently configured preferred packages. The first package on the list is the most preferred, the last is the least preferred.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public abstract List<PackageInfo> getPreferredPackages (int flags)"}, "checkPermission(java.lang.String,java.lang.String)": {"Returns": [["int", "If the package has the permission, PERMISSION_GRANTED is returned. If it does not have the permission, PERMISSION_DENIED is returned. Value is @B_android#content#pm#PackageManager#PERMISSION_GRANTED_E@, or @B_android#content#pm#PackageManager#PERMISSION_DENIED_E@"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the permission you are checking for. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package you are checking against. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager_E@"], "Permissions": [], "Description": "Check whether a particular package has been granted a particular permission.", "history": "Added in API level 1", "FullName": "public abstract int checkPermission (String permissionName, String packageName)"}, "getServiceInfo(android.content.ComponentName, int)": {"Returns": [["@B_android#content#pm#ServiceInfo_E@", "A @B_android#content#pm#ServiceInfo_E@ object containing information about the service."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The full component name (i.e. com.google.apps.media/com.google.apps.media. BackgroundPlayback) of a Service class."], ["int", "int: Additional option flags to modify the data returned.Value is either 0 or combination of GET_META_DATA, GET_SHARED_LIBRARY_FILES, MATCH_ALL, MATCH_DEFAULT_ONLY, MATCH_DISABLED_COMPONENTS, MATCH_DISABLED_UNTIL_USED_COMPONENTS, MATCH_DIRECT_BOOT_AWARE, MATCH_DIRECT_BOOT_UNAWARE, MATCH_SYSTEM_ONLY or MATCH_UNINSTALLED_PACKAGES."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular service class.", "history": "added in API level 1", "FullName": "public abstract ServiceInfo getServiceInfo (ComponentName component, int flags)"}, "addPermissionAsync(android.content.pm.PermissionInfo)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#pm#PermissionInfo_E@", "PermissionInfo: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#content#pm#PackageManager#addPermission_E@ but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.", "history": "Added in API level 8", "FullName": "public abstract boolean addPermissionAsync (PermissionInfo info)"}, "resolveContentProvider(java.lang.String,int)": {"Returns": [["@B_android#content#pm#ProviderInfo_E@", "A @B_android#content#pm#ProviderInfo_E@ object containing information about the provider. If a provider was not found, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: The authority of the provider to find. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_ALL_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DEFAULT_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AUTO_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_AWARE_E@, @B_android#content#pm#PackageManager#MATCH_DIRECT_BOOT_UNAWARE_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, and @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find a single content provider by its authority. Example:", "history": "Added in API level 1", "FullName": "public abstract ProviderInfo resolveContentProvider (String authority, int flags)"}, "isPackageSuspended(java.lang.String)": {"Returns": [["boolean", "true if the given package is suspended, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if the package could not be found."]], "SeeAlso": ["@B_android#content#pm#PackageManager#isPackageSuspended_E@"], "Permissions": [], "Description": "Query if an app is currently suspended.", "history": "Added in API level 29", "FullName": "public boolean isPackageSuspended (String packageName)"}, "getPackageArchiveInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#PackageInfo_E@", "A PackageInfo object containing information about the package archive. If the package could not be parsed, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: The path to the archive file This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_ACTIVITIES_E@, @B_android#content#pm#PackageManager#GET_CONFIGURATIONS_E@, @B_android#content#pm#PackageManager#GET_GIDS_E@, @B_android#content#pm#PackageManager#GET_INSTRUMENTATION_E@, @B_android#content#pm#PackageManager#GET_INTENT_FILTERS_E@, @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_PERMISSIONS_E@, @B_android#content#pm#PackageManager#GET_PROVIDERS_E@, @B_android#content#pm#PackageManager#GET_RECEIVERS_E@, @B_android#content#pm#PackageManager#GET_SERVICES_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#GET_SIGNATURES_E@, @B_android#content#pm#PackageManager#GET_SIGNING_CERTIFICATES_E@, @B_android#content#pm#PackageManager#GET_URI_PERMISSION_PATTERNS_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_FACTORY_ONLY, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, android.content.pm.PackageManager.MATCH_INSTANT, @B_android#content#pm#PackageManager#MATCH_APEX_E@, @B_android#content#pm#PackageManager#GET_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve overall information about an application package defined in a package archive file", "history": "Added in API level 1", "FullName": "public PackageInfo getPackageArchiveInfo (String archiveFilePath, int flags)"}, "getPermissionGroupInfo(java.lang.String,int)": {"Returns": [["@B_android#content#pm#PermissionGroupInfo_E@", "Returns a @B_android#content#pm#PermissionGroupInfo_E@ containing information about the permission. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified name (i.e. com.google.permission_group.APPS) of the permission you are interested in. This value must never be null."], ["int", "int: Additional option flags to modify the data returned. Value is either 0 or @B_android#content#pm#PackageManager#GET_META_DATA_E@"]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if a package with the given name cannot be found on the system."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve all of the information we know about a particular group of permissions.", "history": "Added in API level 1", "FullName": "public abstract PermissionGroupInfo getPermissionGroupInfo (String permissionName, int flags)"}, "removePackageFromPreferred(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform, use @B_android#content#pm#PackageManager#resolveActivity_E@ or @B_android#content#pm#PackageManager#queryIntentActivities_E@. To configure an app to be responsible for a particular role and to check current role holders, see @B_android#app#role#RoleManager_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract void removePackageFromPreferred (String packageName)"}, "getSharedLibraries(int)": {"Returns": [["@B_java#util#List_E@", "The shared library list. This value will never be null."]], "Parameters": [["int", "int: To filter the libraries to return. Value is either 0 or a combination of android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING, android.content.pm.PackageManager.INSTALL_ALLOW_TEST, android.content.pm.PackageManager.INSTALL_INTERNAL, android.content.pm.PackageManager.INSTALL_FROM_ADB, android.content.pm.PackageManager.INSTALL_ALL_USERS, android.content.pm.PackageManager.INSTALL_REQUEST_DOWNGRADE, android.content.pm.PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS, android.content.pm.PackageManager.INSTALL_ALL_WHITELIST_RESTRICTED_PERMISSIONS, android.content.pm.PackageManager.INSTALL_FORCE_VOLUME_UUID, android.content.pm.PackageManager.INSTALL_FORCE_PERMISSION_PROMPT, android.content.pm.PackageManager.INSTALL_INSTANT_APP, android.content.pm.PackageManager.INSTALL_DONT_KILL_APP, android.content.pm.PackageManager.INSTALL_FULL_APP, android.content.pm.PackageManager.INSTALL_ALLOCATE_AGGRESSIVE, android.content.pm.PackageManager.INSTALL_VIRTUAL_PRELOAD, android.content.pm.PackageManager.INSTALL_APEX, android.content.pm.PackageManager.INSTALL_ENABLE_ROLLBACK, android.content.pm.PackageManager.INSTALL_ALLOW_DOWNGRADE, android.content.pm.PackageManager.INSTALL_STAGED, and android.content.pm.PackageManager.INSTALL_DRY_RUN"]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageManager_E@"], "Permissions": [], "Description": "Get a list of shared libraries on the device.", "history": "Added in API level 26", "FullName": "public abstract List<SharedLibraryInfo> getSharedLibraries (int flags)"}, "setInstallerPackageName(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The installed package whose installer will be changed. This value must never be null."], ["@B_java#lang#String_E@", "String: The package name of the new installer. May be null to clear the association. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the installer associated with a given package. There are limitations on how the installer package can be changed; in particular: A SecurityException will be thrown if A SecurityException will be thrown if", "history": "Added in API level 11", "FullName": "public abstract void setInstallerPackageName (String targetPackage, String installerPackageName)"}, "getText(java.lang.String,int,android.content.pm.ApplicationInfo)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns a CharSequence holding the requested text. Returns null if the text could not be found for any reason."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package that this text is coming from. Cannot be null. This value must never be null."], ["int", "int: The resource identifier of the desired text. Cannot be 0."], ["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: Overall information about packageName. This may be null, in which case the application information will be retrieved for you if needed; if you already have this information around, it can be much more efficient to supply it here. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve text from a package. This is a low-level API used by the various package manager info structures (such as @B_android#content#pm#ComponentInfo_E@ to implement retrieval of their associated labels and other text.", "history": "Added in API level 1", "FullName": "public abstract CharSequence getText (String packageName, int resid, ApplicationInfo appInfo)"}}, "Inheritance": [], "ClassName": "android.content.pm.PackageManager", "ClassDesc": "Class for retrieving various kinds of information related to the application packages that are currently installed on the device. You can find this class through @B_android#content#Context#getPackageManager_E@."}