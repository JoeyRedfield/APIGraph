{"Functions": {"unread(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to push back."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to push back."]], "Throws": [["@B_java#io#IOException_E@", "If there is not enough room in the pushback buffer for the specified number of bytes, or this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value b[off], the byte after that will have the value b[off+1], and so forth.", "history": "added in API level 1", "FullName": "public void unread (byte[] b, int off, int len)"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long:"]], "Throws": [["@B_java#io#IOException_E@", "if the stream does not support seek, or the stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#skip_E@"], "Permissions": [], "Description": "Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly zero. If n is negative, no bytes are skipped. The skip method of PushbackInputStream first skips over the bytes in the pushback buffer, if any. It then calls the skip method of the underlying input stream if more bytes need to be skipped. The actual number of bytes skipped is returned.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "unread(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to push back."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to push back."]], "Throws": [["@B_java#io#IOException_E@", "If there is not enough room in the pushback buffer for the specified number of bytes, or this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value b[off], the byte after that will have the value b[off+1], and so forth.", "history": "Added in API level 1", "FullName": "public void unread (byte[] b, int off, int len)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this method is invoked."]], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#IOException_E@"], "Permissions": [], "Description": "Repositions this stream to the position at the time the mark method was last called on this input stream. The method reset for class PushbackInputStream does nothing except throw an IOException.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "PushbackInputStream(java.io.InputStream, int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which bytes will be read."], ["int", "int: the size of the pushback buffer."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PushbackInputStream with a pushback buffer of the specified size, and saves its argument, the input stream in, for later use. Initially, there is no pushed-back byte (the field pushBack is initialized to -1).", "history": "added in API level 1", "FullName": "public PushbackInputStream (InputStream in, int size)"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream has been reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. This method returns the most recently pushed-back byte, if there is one, and otherwise calls the read method of its underlying input stream and returns whatever value that method returns.", "history": "Added in API level 1", "FullName": "public int read ()"}, "PushbackInputStream(java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which bytes will be read."], ["int", "int: the size of the pushback buffer."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a PushbackInputStream with a pushback buffer of the specified size, and saves its argument, the input stream in, for later use. Initially, there is no pushed-back byte (the field pushBack is initialized to -1).", "history": "Added in API level 1", "FullName": "public PushbackInputStream (InputStream in, int size)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and releases any system resources associated with the stream. Once the stream has been closed, further read(), unread(), available(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: the maximum limit of bytes that can be read before the mark position becomes invalid."]], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Marks the current position in this input stream. The mark method of PushbackInputStream does nothing.", "history": "Added in API level 1", "FullName": "public void mark (int readlimit)"}, "available()": {"Returns": [["int", "the number of bytes that can be read (or skipped over) from the input stream without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#available_E@"], "Permissions": [], "Description": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. The method returns the sum of the number of bytes that have been pushed back and the value returned by @B_java#io#FilterInputStream#available_E@.", "history": "Added in API level 1", "FullName": "public int available ()"}, "unread(int)": {"Returns": [], "Parameters": [["int", "int: the int value whose low-order byte is to be pushed back."]], "Throws": [["@B_java#io#IOException_E@", "If there is not enough room in the pushback buffer for the byte, or this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a byte by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value (byte)b.", "history": "Added in API level 1", "FullName": "public void unread (int b)"}, "PushbackInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which bytes will be read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a PushbackInputStream and saves its argument, the input stream in, for later use. Initially, there is no pushed-back byte (the field pushBack is initialized to -1).", "history": "Added in API level 1", "FullName": "public PushbackInputStream (InputStream in)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. This method first reads any pushed-back bytes; after that, if fewer than len bytes have been read then it reads from the underlying input stream. If len is not zero, the method blocks until at least 1 byte of input is available; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method, or an I/O error occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. This method first reads any pushed-back bytes; after that, if fewer than len bytes have been read then it reads from the underlying input stream. If len is not zero, the method blocks until at least 1 byte of input is available; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "markSupported()": {"Returns": [["boolean", "false, since this class does not support the mark and reset methods."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#InputStream#mark_E@", "@B_java#io#InputStream#reset_E@"], "Permissions": [], "Description": "Tests if this input stream supports the mark and reset methods, which it does not.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "unread(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to push back"]], "Throws": [["@B_java#io#IOException_E@", "If there is not enough room in the pushback buffer for the specified number of bytes, or this input stream has been closed by invoking its @B_java#io#PushbackInputStream#close_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back an array of bytes by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value b[0], the byte after that will have the value b[1], and so forth.", "history": "Added in API level 1", "FullName": "public void unread (byte[] b)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.io.PushbackInputStream", "ClassDesc": "A PushbackInputStream adds functionality to another input stream, namely the ability to \"push back\" or \"unread\" one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can \"unread\" it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read."}