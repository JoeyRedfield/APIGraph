{"Functions": {"write(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. An attempt is made to write up to Suppose that a byte sequence of length Unless otherwise specified, a write operation will return only after writing all of the This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "open(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "A new, and connected, socket channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The remote address to which the new channel is to be connected"]], "Throws": [["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the connect operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#nio#channels#UnresolvedAddressException_E@", "If the given remote address is not fully resolved"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given remote address is not supported"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the given remote endpoint"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a socket channel and connects it to a remote address. This convenience method works as if by invoking the @B_java#nio#channels#SocketChannel#open_E@ method, invoking the @B_java#nio#channels#SocketChannel#connect_E@ method upon the resulting socket channel, passing it", "history": "Added in API level 1", "FullName": "public static SocketChannel open (SocketAddress remote)"}, "open()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "A new socket channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a socket channel. The new channel is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openSocketChannel_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object.", "history": "Added in API level 1", "FullName": "public static SocketChannel open ()"}, "write(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. An attempt is made to write up to Suppose that a byte sequence of length Unless otherwise specified, a write operation will return only after writing all of the This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "Added in API level 1", "FullName": "public abstract int write (ByteBuffer src)"}, "connect(java.net.SocketAddress)": {"Returns": [["boolean", "true if a connection was established, false if this channel is in non-blocking mode and the connection operation is in progress"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The remote address to which this channel is to be connected"]], "Throws": [["@B_java#nio#channels#AlreadyConnectedException_E@", "If this channel is already connected"], ["@B_java#nio#channels#ConnectionPendingException_E@", "If a non-blocking connection operation is already in progress on this channel"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the connect operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#nio#channels#UnresolvedAddressException_E@", "If the given remote address is not fully resolved"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given remote address is not supported"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the given remote endpoint"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this channel's socket. If this channel is in non-blocking mode then an invocation of this method initiates a non-blocking connection operation. If the connection is established immediately, as can happen with a local connection, then this method returns @B_java#nio#channels#SocketChannel#finishConnect_E@ method. If this channel is in blocking mode then an invocation of this method will block until the connection is established or an I/O error occurs. This method performs exactly the same security checks as the @B_java#net#Socket_E@ class. That is, if a security manager has been installed then this method verifies that its @B_java#lang#SecurityManager#checkConnect_E@ method permits connecting to the address and port number of the given remote endpoint. This method may be invoked at any time. If a read or write operation upon this channel is invoked while an invocation of this method is in progress then that operation will first block until this invocation is complete. If a connection attempt is initiated but fails, that is, if an invocation of this method throws a checked exception, then the channel will be closed.", "history": "Added in API level 1", "FullName": "public abstract boolean connect (SocketAddress remote)"}, "setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 24", "FullName": "public abstract SocketChannel setOption (SocketOption<T> name, T value)"}, "write(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. An attempt is made to write up to Suppose that a byte sequence of length Unless otherwise specified, a write operation will return only after writing all of the This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "Added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "read(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into a subsequence of the given buffers. An invocation of this method attempts to read up to Suppose that a byte sequence of length This method may be invoked at any time. If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "Added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}, "getRemoteAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The remote address; null if the channel's socket is not connected"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the remote address to which this channel's socket is connected. Where the channel is bound and connected to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getRemoteAddress ()"}, "write(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffers. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final long write (ByteBuffer[] srcs)"}, "validOps()": {"Returns": [["int", "The valid-operation set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an operation set identifying this channel's supported operations. Socket channels support connecting, reading, and writing, so this method returns @B_java#nio#channels#SelectionKey#OP_CONNECT_E@ @B_java#nio#channels#SelectionKey#OP_READ_E@ @B_java#nio#channels#SelectionKey#OP_WRITE_E@", "history": "Added in API level 1", "FullName": "public final int validOps ()"}, "socket()": {"Returns": [["@B_java#net#Socket_E@", "A socket associated with this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a socket associated with this channel. The returned object will not declare any public methods that are not declared in the @B_java#net#Socket_E@ class.", "history": "Added in API level 1", "FullName": "public abstract Socket socket ()"}, "shutdownInput()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "The channel"]], "Parameters": [], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Shutdown the connection for reading without closing the channel. Once shutdown for reading then further reads on the channel will return -1, the end-of-stream indication. If the input side of the connection is already shutdown then invoking this method has no effect.", "history": "Added in API level 24", "FullName": "public abstract SocketChannel shutdownInput ()"}, "setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 24", "FullName": "public abstract SocketChannel setOption (SocketOption<T> name, T value)"}, "read(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffers. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final long read (ByteBuffer[] dsts)"}, "isConnected()": {"Returns": [["boolean", "true if, and only if, this channel's network socket is @B_java#nio#channels#spi#AbstractInterruptibleChannel#isOpen_E@ and connected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel's network socket is connected.", "history": "Added in API level 1", "FullName": "public abstract boolean isConnected ()"}, "finishConnect()": {"Returns": [["boolean", "true if, and only if, this channel's socket is now connected"]], "Parameters": [], "Throws": [["@B_java#nio#channels#NoConnectionPendingException_E@", "If this channel is not connected and a connection operation has not been initiated"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the connect operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the process of connecting a socket channel. A non-blocking connection operation is initiated by placing a socket channel in non-blocking mode and then invoking its @B_java#nio#channels#SocketChannel#connect_E@ method. Once the connection is established, or the attempt has failed, the socket channel will become connectable and this method may be invoked to complete the connection sequence. If the connection operation failed then invoking this method will cause an appropriate @B_java#io#IOException_E@ to be thrown. If this channel is already connected then this method will not block and will immediately return This method may be invoked at any time. If a read or write operation upon this channel is invoked while an invocation of this method is in progress then that operation will first block until this invocation is complete. If a connection attempt fails, that is, if an invocation of this method throws a checked exception, then the channel will be closed.", "history": "Added in API level 1", "FullName": "public abstract boolean finishConnect ()"}, "read(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. An attempt is made to read up to Suppose that a byte sequence of length A read operation might not fill the buffer, and in fact it might not read any bytes at all. Whether or not it does so depends upon the nature and state of the channel. A socket channel in non-blocking mode, for example, cannot read any more bytes than are immediately available from the socket's input buffer; similarly, a file channel cannot read any more bytes than remain in the file. It is guaranteed, however, that if a channel is in blocking mode and there is at least one byte remaining in the buffer then this method will block until at least one byte is read. This method may be invoked at any time. If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "Added in API level 1", "FullName": "public abstract int read (ByteBuffer dst)"}, "getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port of the channel's socket is returned.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "shutdownOutput()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "The channel"]], "Parameters": [], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Shutdown the connection for writing without closing the channel. Once shutdown for writing then further attempts to write to the channel will throw @B_java#nio#channels#ClosedChannelException_E@. If the output side of the connection is already shutdown then invoking this method has no effect.", "history": "Added in API level 24", "FullName": "public abstract SocketChannel shutdownOutput ()"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind the socket to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#ConnectionPendingException_E@", "If a non-blocking connect operation is already in progress on this channel"], ["@B_java#nio#channels#AlreadyBoundException_E@", ""], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. If the local parameter has the value null then the socket will be bound to an address that is assigned automatically.", "history": "Added in API level 24", "FullName": "public abstract SocketChannel bind (SocketAddress local)"}, "SocketChannel(java.nio.channels.spi.SelectorProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#SelectorProvider_E@", "SelectorProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected SocketChannel (SelectorProvider provider)"}, "isConnectionPending()": {"Returns": [["boolean", "true if, and only if, a connection operation has been initiated on this channel but not yet completed by invoking the @B_java#nio#channels#SocketChannel#finishConnect_E@ method"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not a connection operation is in progress on this channel.", "history": "Added in API level 1", "FullName": "public abstract boolean isConnectionPending ()"}, "read(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel is not yet connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into a subsequence of the given buffers. An invocation of this method attempts to read up to Suppose that a byte sequence of length This method may be invoked at any time. If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete.", "history": "added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@", "@B_java#nio#channels#SelectableChannel_E@", "@B_java#nio#channels#spi#AbstractSelectableChannel_E@"], "ClassName": "java.nio.channels.SocketChannel", "ClassDesc": "A selectable channel for stream-oriented connecting sockets. A socket channel is created by invoking one of the @B_java#nio#channels#SocketChannel#open_E@ methods of this class. It is not possible to create a channel for an arbitrary, pre-existing socket. A newly-created socket channel is open but not yet connected. An attempt to invoke an I/O operation upon an unconnected channel will cause a @B_java#nio#channels#NotYetConnectedException_E@ to be thrown. A socket channel can be connected by invoking its @B_java#nio#channels#SocketChannel#connect_E@ method; once connected, a socket channel remains connected until it is closed. Whether or not a socket channel is connected may be determined by invoking its @B_java#nio#channels#SocketChannel#isConnected_E@ method. Socket channels support @B_java#nio#channels#SocketChannel#connect_E@ method for later completion by the @B_java#nio#channels#SocketChannel#finishConnect_E@ method. Whether or not a connection operation is in progress may be determined by invoking the @B_java#nio#channels#SocketChannel#isConnectionPending_E@ method. Socket channels support @B_java#nio#channels#Channel_E@ class. If the input side of a socket is shut down by one thread while another thread is blocked in a read operation on the socket's channel, then the read operation in the blocked thread will complete without reading any bytes and will return @B_java#nio#channels#AsynchronousCloseException_E@. Socket options are configured using the @B_java#nio#channels#SocketChannel#setOption_E@ method. Socket channels support the following options: Socket channels are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one thread may be reading and at most one thread may be writing at any given time. The @B_java#nio#channels#SocketChannel#connect_E@ and @B_java#nio#channels#SocketChannel#finishConnect_E@ methods are mutually synchronized against each other, and an attempt to initiate a read or write operation while an invocation of one of these methods is in progress will block until that invocation is complete."}