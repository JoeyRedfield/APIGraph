{"Functions": {"startPage(android.graphics.pdf.PdfDocument.PageInfo)": {"Returns": [["@B_android#graphics#pdf#PdfDocument#Page_E@", "A blank page."]], "Parameters": [["@B_android#graphics#pdf#PdfDocument#PageInfo_E@", "PdfDocument.PageInfo: The page info. Cannot be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfDocument#finishPage_E@"], "Permissions": [], "Description": "Starts a page using the provided @B_android#graphics#pdf#PdfDocument#PageInfo_E@. After the page is created you can draw arbitrary content on the page's canvas which you can get by calling @B_android#graphics#pdf#PdfDocument#Page#getCanvas_E@. After you are done drawing the content you should finish the page by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@. After the page is finished you should no longer access the page or its canvas. @B_android#graphics#pdf#PdfDocument#close_E@. Also do not call this method if the last page returned by this method is not finished by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@.", "history": "Added in API level 19", "FullName": "public PdfDocument.Page startPage (PdfDocument.PageInfo pageInfo)"}, "finishPage(android.graphics.pdf.PdfDocument.Page)": {"Returns": [], "Parameters": [["@B_android#graphics#pdf#PdfDocument#Page_E@", "PdfDocument.Page: The page. Cannot be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfDocument#startPage_E@"], "Permissions": [], "Description": "Finishes a started page. You should always finish the last started page. @B_android#graphics#pdf#PdfDocument#close_E@. You should not finish the same page more than once.", "history": "Added in API level 19", "FullName": "public void finishPage (PdfDocument.Page page)"}, "getPages()": {"Returns": [["@B_java#util#List_E@", "The pages or an empty list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the pages of the document.", "history": "Added in API level 19", "FullName": "public List<PdfDocument.PageInfo> getPages ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 19", "FullName": "protected void finalize ()"}, "PdfDocument()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance.", "history": "Added in API level 19", "FullName": "public PdfDocument ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this document. This method should be called after you are done working with the document. After this call the document is considered closed and none of its methods should be called. @B_android#graphics#pdf#PdfDocument#startPage_E@ is not finished by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@.", "history": "Added in API level 19", "FullName": "public void close ()"}, "writeTo(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream. Cannot be null."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs while writing."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the document to an output stream. You can call this method multiple times. @B_android#graphics#pdf#PdfDocument#close_E@. Also do not call this method if a page returned by @B_android#graphics#pdf#PdfDocument#startPage_E@ is not finished by calling @B_android#graphics#pdf#PdfDocument#finishPage_E@.", "history": "Added in API level 19", "FullName": "public void writeTo (OutputStream out)"}}, "Inheritance": [], "ClassName": "android.graphics.pdf.PdfDocument", "ClassDesc": "This class enables generating a PDF document from native Android content. You create a new document and then for every page you want to add you start a page, write content to the page, and finish the page. After you are done with all pages, you write the document to an output stream and close the document. After a document is closed you should not use it anymore. Note that pages are created one by one, i.e. you can have only a single page to which you are writing at any given time. This class is not thread safe. A typical use of the APIs looks like this:"}