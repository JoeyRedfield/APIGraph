{"Functions": {"minusSeconds(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the seconds subtracted, not null"]], "Parameters": [["long", "long: the seconds to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of seconds subtracted. This subtracts the specified number of seconds from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minusSeconds (long secondsToSubtract)"}, "atOffset(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetTime_E@", "the offset time formed from this time and the specified offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this time with an offset to create an OffsetTime. This returns an OffsetTime formed from this time at the specified offset. All possible combinations of time and offset are valid.", "history": "Added in API level 26", "FullName": "public OffsetTime atOffset (ZoneOffset offset)"}, "plusNanos(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the nanoseconds added, not null"]], "Parameters": [["long", "long: the nanos to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of nanoseconds added. This adds the specified number of nanoseconds to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plusNanos (long nanosToAdd)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns a LocalTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: NANOS - Returns a LocalTime with the specified number of nanoseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@. MICROS - Returns a LocalTime with the specified number of microseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@ with the amount multiplied by 1,000. MILLIS - Returns a LocalTime with the specified number of milliseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@ with the amount multiplied by 1,000,000. SECONDS - Returns a LocalTime with the specified number of seconds added. This is equivalent to @B_java#time#LocalTime#plusSeconds_E@. MINUTES - Returns a LocalTime with the specified number of minutes added. This is equivalent to @B_java#time#LocalTime#plusMinutes_E@. HOURS - Returns a LocalTime with the specified number of hours added. This is equivalent to @B_java#time#LocalTime#plusHours_E@. HALF_DAYS - Returns a LocalTime with the specified number of half-days added. This is equivalent to @B_java#time#LocalTime#plusHours_E@ with the amount multiplied by 12. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plus (long amountToAdd, TemporalUnit unit)"}, "ofNanoOfDay(long)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["long", "long: the nano of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nanos of day value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from a nanos-of-day value. This returns a LocalTime with the specified nanosecond-of-day.", "history": "Added in API level 26", "FullName": "public static LocalTime ofNanoOfDay (long nanoOfDay)"}, "toSecondOfDay()": {"Returns": [["int", "the second-of-day equivalent to this time"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.", "history": "Added in API level 26", "FullName": "public int toSecondOfDay ()"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns a LocalTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public LocalTime minus (long amountToSubtract, TemporalUnit unit)"}, "plusSeconds(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the seconds added, not null"]], "Parameters": [["long", "long: the seconds to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of seconds added. This adds the specified number of seconds to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plusSeconds (long secondstoAdd)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this time as a long. This queries this time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalTime#isSupported_E@ will return valid values based on this time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "of(int, int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour and minute. This returns a LocalTime with the specified hour and minute. The second and nanosecond fields will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalTime of (int hour, int minute)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this time is equal to another time. The comparison is based on the time-line position of the time within a day. Only objects of type LocalTime are compared, other types return false. To compare the date of two TemporalAccessor instances, use @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "minusNanos(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the nanoseconds subtracted, not null"]], "Parameters": [["long", "long: the nanos to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of nanoseconds subtracted. This subtracts the specified number of nanoseconds from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minusNanos (long nanosToSubtract)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified field set to a new value. This returns a LocalTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the hour, minute or second. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: NANO_OF_SECOND - Returns a LocalTime with the specified nano-of-second. The hour, minute and second will be unchanged. NANO_OF_DAY - Returns a LocalTime with the specified nano-of-day. This completely replaces the time and is equivalent to @B_java#time#LocalTime#ofNanoOfDay_E@. MICRO_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified micro-of-second multiplied by 1,000. The hour, minute and second will be unchanged. MICRO_OF_DAY - Returns a LocalTime with the specified micro-of-day. This completely replaces the time and is equivalent to using @B_java#time#LocalTime#ofNanoOfDay_E@ with the micro-of-day multiplied by 1,000. MILLI_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified milli-of-second multiplied by 1,000,000. The hour, minute and second will be unchanged. MILLI_OF_DAY - Returns a LocalTime with the specified milli-of-day. This completely replaces the time and is equivalent to using @B_java#time#LocalTime#ofNanoOfDay_E@ with the milli-of-day multiplied by 1,000,000. SECOND_OF_MINUTE - Returns a LocalTime with the specified second-of-minute. The hour, minute and nano-of-second will be unchanged. SECOND_OF_DAY - Returns a LocalTime with the specified second-of-day. The nano-of-second will be unchanged. MINUTE_OF_HOUR - Returns a LocalTime with the specified minute-of-hour. The hour, second-of-minute and nano-of-second will be unchanged. MINUTE_OF_DAY - Returns a LocalTime with the specified minute-of-day. The second-of-minute and nano-of-second will be unchanged. HOUR_OF_AMPM - Returns a LocalTime with the specified hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. CLOCK_HOUR_OF_AMPM - Returns a LocalTime with the specified clock-hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. HOUR_OF_DAY - Returns a LocalTime with the specified hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. CLOCK_HOUR_OF_DAY - Returns a LocalTime with the specified clock-hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. AMPM_OF_DAY - Returns a LocalTime with the specified AM/PM. The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime with (TemporalField field, long newValue)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns a LocalTime, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#LocalTime#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minus (TemporalAmount amountToSubtract)"}, "now()": {"Returns": [["@B_java#time#LocalTime_E@", "the current time using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current time. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalTime now ()"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified field set to a new value. This returns a LocalTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the hour, minute or second. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The supported fields behave as follows: NANO_OF_SECOND - Returns a LocalTime with the specified nano-of-second. The hour, minute and second will be unchanged. NANO_OF_DAY - Returns a LocalTime with the specified nano-of-day. This completely replaces the time and is equivalent to @B_java#time#LocalTime#ofNanoOfDay_E@. MICRO_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified micro-of-second multiplied by 1,000. The hour, minute and second will be unchanged. MICRO_OF_DAY - Returns a LocalTime with the specified micro-of-day. This completely replaces the time and is equivalent to using @B_java#time#LocalTime#ofNanoOfDay_E@ with the micro-of-day multiplied by 1,000. MILLI_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified milli-of-second multiplied by 1,000,000. The hour, minute and second will be unchanged. MILLI_OF_DAY - Returns a LocalTime with the specified milli-of-day. This completely replaces the time and is equivalent to using @B_java#time#LocalTime#ofNanoOfDay_E@ with the milli-of-day multiplied by 1,000,000. SECOND_OF_MINUTE - Returns a LocalTime with the specified second-of-minute. The hour, minute and nano-of-second will be unchanged. SECOND_OF_DAY - Returns a LocalTime with the specified second-of-day. The nano-of-second will be unchanged. MINUTE_OF_HOUR - Returns a LocalTime with the specified minute-of-hour. The hour, second-of-minute and nano-of-second will be unchanged. MINUTE_OF_DAY - Returns a LocalTime with the specified minute-of-day. The second-of-minute and nano-of-second will be unchanged. HOUR_OF_AMPM - Returns a LocalTime with the specified hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. CLOCK_HOUR_OF_AMPM - Returns a LocalTime with the specified clock-hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. HOUR_OF_DAY - Returns a LocalTime with the specified hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. CLOCK_HOUR_OF_DAY - Returns a LocalTime with the specified clock-hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. AMPM_OF_DAY - Returns a LocalTime with the specified AM/PM. The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public LocalTime with (TemporalField field, long newValue)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this time.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "withHour(int)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the requested hour, not null"]], "Parameters": [["int", "int: the hour-of-day to set in the result, from 0 to 23"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the hour value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the hour-of-day altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime withHour (int hour)"}, "of(int,int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour and minute. This returns a LocalTime with the specified hour and minute. The second and nanosecond fields will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalTime of (int hour, int minute)"}, "withSecond(int)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the requested second, not null"]], "Parameters": [["int", "int: the second-of-minute to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the second-of-minute altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime withSecond (int second)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this time using the specified query. This queries this time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "compareTo(java.time.LocalTime)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the other time to compare to, not null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Compares this time to another time. The comparison is based on the time-line position of the local times within a day. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (LocalTime other)"}, "toNanoOfDay()": {"Returns": [["long", "the nano of day equivalent to this time"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.", "history": "Added in API level 26", "FullName": "public long toNanoOfDay ()"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this time, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this time can be queried for the specified field. If false, then calling the @B_java#time#LocalTime#range_E@, @B_java#time#LocalTime#get_E@ and @B_java#time#LocalTime#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "minusHours(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the hours subtracted, not null"]], "Parameters": [["long", "long: the hours to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of hours subtracted. This subtracts the specified number of hours from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minusHours (long hoursToSubtract)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this time as a String, such as 10:15. The output will be one of the following ISO-8601 formats: HH:mm HH:mm:ss HH:mm:ss.SSS HH:mm:ss.SSSSSS HH:mm:ss.SSSSSSSSS The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns a LocalTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. The supported fields behave as follows: NANOS - Returns a LocalTime with the specified number of nanoseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@. MICROS - Returns a LocalTime with the specified number of microseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@ with the amount multiplied by 1,000. MILLIS - Returns a LocalTime with the specified number of milliseconds added. This is equivalent to @B_java#time#LocalTime#plusNanos_E@ with the amount multiplied by 1,000,000. SECONDS - Returns a LocalTime with the specified number of seconds added. This is equivalent to @B_java#time#LocalTime#plusSeconds_E@. MINUTES - Returns a LocalTime with the specified number of minutes added. This is equivalent to @B_java#time#LocalTime#plusMinutes_E@. HOURS - Returns a LocalTime with the specified number of hours added. This is equivalent to @B_java#time#LocalTime#plusHours_E@. HALF_DAYS - Returns a LocalTime with the specified number of half-days added. This is equivalent to @B_java#time#LocalTime#plusHours_E@ with the amount multiplied by 12. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public LocalTime plus (long amountToAdd, TemporalUnit unit)"}, "atDate(java.time.LocalDate)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time formed from this time and the specified date, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the date to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this time with a date to create a LocalDateTime. This returns a LocalDateTime formed from this time at the specified date. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public LocalDateTime atDate (LocalDate date)"}, "getHour()": {"Returns": [["int", "the hour-of-day, from 0 to 23"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hour-of-day field.", "history": "Added in API level 26", "FullName": "public int getHour ()"}, "withMinute(int)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the requested minute, not null"]], "Parameters": [["int", "int: the minute-of-hour to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the minute value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the minute-of-hour altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime withMinute (int minute)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalTime#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "plusHours(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the hours added, not null"]], "Parameters": [["long", "long: the hours to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of hours added. This adds the specified number of hours to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plusHours (long hoursToAdd)"}, "getSecond()": {"Returns": [["int", "the second-of-minute, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the second-of-minute field.", "history": "Added in API level 26", "FullName": "public int getSecond ()"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this time using the specified formatter. This time will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#LocalTime_E@", "the parsed local time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from a text string using a specific formatter. The text is parsed using the formatter, returning a time.", "history": "Added in API level 26", "FullName": "public static LocalTime parse (CharSequence text, DateTimeFormatter formatter)"}, "plusMinutes(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the minutes added, not null"]], "Parameters": [["long", "long: the minutes to add, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of minutes added. This adds the specified number of minutes to this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plusMinutes (long minutesToAdd)"}, "minusMinutes(long)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the minutes subtracted, not null"]], "Parameters": [["long", "long: the minutes to subtract, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the specified number of minutes subtracted. This subtracts the specified number of minutes from this time, returning a new time. The calculation wraps around midnight. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minusMinutes (long minutesToSubtract)"}, "of(int, int, int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour, minute and second. This returns a LocalTime with the specified hour, minute and second. The nanosecond field will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalTime of (int hour, int minute, int second)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same time as this object. This returns a temporal object of the same observable type as the input with the time changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as the field. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this time and the end time"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end time, exclusive, which is converted to a LocalTime, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a LocalTime"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another time in terms of the specified unit. This calculates the amount of time between two LocalTime objects in terms of a single TemporalUnit. The start and end points are this and the specified time. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a LocalTime using @B_java#time#LocalTime#from_E@. For example, the amount in hours between two times can be calculated using startTime.until(endTime, HOURS). The calculation returns a whole number, representing the number of complete units between the two times. For example, the amount in hours between 11:30 and 13:29 will only be one hour as it is one minute short of two hours. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "of(int,int,int,int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour, minute, second and nanosecond. This returns a LocalTime with the specified hour, minute, second and nanosecond.", "history": "Added in API level 26", "FullName": "public static LocalTime of (int hour, int minute, int second, int nanoOfSecond)"}, "truncatedTo(java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the time truncated, not null"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to truncate to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to truncate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the time truncated. Truncation returns a copy of the original time with fields smaller than the specified unit set to zero. For example, truncating with the @B_java#time#temporal#ChronoUnit#MINUTES_E@ unit will set the second-of-minute and nano-of-second field to zero. The unit must have a @B_java#time#temporal#ChronoUnit_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Other units throw an exception. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime truncatedTo (TemporalUnit unit)"}, "ofSecondOfDay(long)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["long", "long: the second-of-day, from 0 to 24 * 60 * 60 - 1"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second-of-day value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from a second-of-day value. This returns a LocalTime with the specified second-of-day. The nanosecond field will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalTime ofSecondOfDay (long secondOfDay)"}, "isBefore(java.time.LocalTime)": {"Returns": [["boolean", "true if this point is before the specified time"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the other time to compare to, not null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if this time is before the specified time. The comparison is based on the time-line position of the time within a day.", "history": "Added in API level 26", "FullName": "public boolean isBefore (LocalTime other)"}, "withNano(int)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the requested nanosecond, not null"]], "Parameters": [["int", "int: the nano-of-second to set in the result, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nanos value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalTime with the nano-of-second altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime withNano (int nanoOfSecond)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount added. This returns a LocalTime, based on this one, with the specified amount added. The amount is typically @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#LocalTime#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime plus (TemporalAmount amountToAdd)"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#LocalTime_E@", "the current time, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the specified clock. This will query the specified clock to obtain the current time. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static LocalTime now (Clock clock)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this time with the specified amount subtracted. This returns a LocalTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime minus (long amountToSubtract, TemporalUnit unit)"}, "isAfter(java.time.LocalTime)": {"Returns": [["boolean", "true if this is after the specified time"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the other time to compare to, not null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if this time is after the specified time. The comparison is based on the time-line position of the time within a day.", "history": "Added in API level 26", "FullName": "public boolean isAfter (LocalTime other)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this time. If false, then calling the @B_java#time#LocalTime#plus_E@ and @B_java#time#LocalTime#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a LocalTime"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from a temporal object. This obtains a local time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of LocalTime. The conversion uses the @B_java#time#temporal#TemporalQueries#localTime_E@ query, which relies on extracting the @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ field. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, LocalTime::from.", "history": "Added in API level 26", "FullName": "public static LocalTime from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this time as an int. This queries this time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalTime#isSupported_E@ will return valid values based on this time, except NANO_OF_DAY and MICRO_OF_DAY which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "of(int, int, int, int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour, minute, second and nanosecond. This returns a LocalTime with the specified hour, minute, second and nanosecond.", "history": "added in API level 26", "FullName": "public static LocalTime of (int hour, int minute, int second, int nanoOfSecond)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#LocalTime_E@", "the parsed local time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"10:15:30\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from a text string such as 10:15. The string must represent a valid time and is parsed using @B_java#time#format#DateTimeFormatter#ISO_LOCAL_TIME_E@.", "history": "Added in API level 26", "FullName": "public static LocalTime parse (CharSequence text)"}, "of(int,int,int)": {"Returns": [["@B_java#time#LocalTime_E@", "the local time, not null"]], "Parameters": [["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalTime from an hour, minute and second. This returns a LocalTime with the specified hour, minute and second. The nanosecond field will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalTime of (int hour, int minute, int second)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#LocalTime_E@", "the current time using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current time from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current time. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalTime now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#LocalTime_E@", "a LocalTime based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this time. This returns a LocalTime, based on this one, with the time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the hour field. A more complex adjuster might set the time to the last hour of the day. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalTime with (TemporalAdjuster adjuster)"}, "getNano()": {"Returns": [["int", "the nano-of-second, from 0 to 999,999,999"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nano-of-second field.", "history": "Added in API level 26", "FullName": "public int getNano ()"}, "getMinute()": {"Returns": [["int", "the minute-of-hour, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minute-of-hour field.", "history": "Added in API level 26", "FullName": "public int getMinute ()"}}, "Inheritance": [], "ClassName": "java.time.LocalTime", "ClassDesc": "A time without a time-zone in the ISO-8601 calendar system, such as 10:15:30. LocalTime is an immutable date-time object that represents a time, often viewed as hour-minute-second. Time is represented to nanosecond precision. For example, the value \"13:45.30.123456789\" can be stored in a LocalTime. This class does not store or represent a date or time-zone. Instead, it is a description of the local time as seen on a wall clock. It cannot represent an instant on the time-line without additional information such as an offset or time-zone. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. This API assumes that all calendar systems use the same representation, this class, for time-of-day."}