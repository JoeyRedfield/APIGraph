{"Functions": {"SocketHandler()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the host or port are invalid or are not specified as LogManager properties."], ["@B_java#io#IOException_E@", "if we are unable to connect to the target host and port."]], "SeeAlso": [], "Permissions": [], "Description": "Create a", "history": "Added in API level 1", "FullName": "public SocketHandler ()"}, "publish(java.util.logging.LogRecord)": {"Returns": [], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: description of the log event. A null record is silently ignored and is not published"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format and publish a", "history": "Added in API level 1", "FullName": "public void publish (LogRecord record)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Close this output stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "SocketHandler(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: target host."], ["int", "int: target port."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the host or port are invalid."], ["@B_java#io#IOException_E@", "if we are unable to connect to the target host and port."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a", "history": "Added in API level 1", "FullName": "public SocketHandler (String host, int port)"}, "SocketHandler(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: target host."], ["int", "int: target port."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the host or port are invalid."], ["@B_java#io#IOException_E@", "if we are unable to connect to the target host and port."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a", "history": "added in API level 1", "FullName": "public SocketHandler (String host, int port)"}}, "Inheritance": ["@B_java#util#logging#Handler_E@", "@B_java#util#logging#StreamHandler_E@"], "ClassName": "java.util.logging.SocketHandler", "ClassDesc": "Simple network logging <handler-name>.level specifies the default level for the <handler-name>.filter specifies the name of a <handler-name>.formatter specifies the name of a <handler-name>.encoding the name of the character set encoding to use (defaults to the default platform encoding). <handler-name>.host specifies the target host name to connect to (no default). <handler-name>.port specifies the target TCP port to use (no default). For example, the properties for SocketHandler would be: java.util.logging.SocketHandler.level=INFO java.util.logging.SocketHandler.formatter=java.util.logging.SimpleFormatter For a custom handler, e.g. com.foo.MyHandler, the properties would be: com.foo.MyHandler.level=INFO com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter The output IO stream is buffered, but is flushed after each"}