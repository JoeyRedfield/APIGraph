{"Functions": {"get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#MifareUltralight_E@", "MIFARE Ultralight object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an MIFARE Ultralight compatible tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#MifareUltralight_E@ for the given tag. Returns null if @B_android#nfc#tech#MifareUltralight_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@ - this indicates the tag is not MIFARE Ultralight compatible, or that this Android device does not implement MIFARE Ultralight. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public static MifareUltralight get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 10", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void connect ()"}, "writePage(int,byte[])": {"Returns": [], "Parameters": [["int", "int: index of page to write, starting from 0"], ["byte[]", "byte: 4 bytes to write"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Write 1 page (4 bytes). The MIFARE Ultralight protocol always writes 1 page at a time, to minimize EEPROM write cycles. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareUltralight#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void writePage (int pageOffset, byte[] data)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void close ()"}, "writePage(int, byte[])": {"Returns": [], "Parameters": [["int", "int: index of page to write, starting from 0"], ["byte[]", "byte: 4 bytes to write"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Write 1 page (4 bytes). The MIFARE Ultralight protocol always writes 1 page at a time, to minimize EEPROM write cycles. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareUltralight#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void writePage (int pageOffset, byte[] data)"}, "setTimeout(int)": {"Returns": [], "Parameters": [["int", "int: timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Set the @B_android#nfc#tech#MifareUltralight#transceive_E@ timeout in milliseconds. The timeout only applies to @B_android#nfc#tech#MifareUltralight#transceive_E@ on this object, and is reset to a default value when @B_android#nfc#tech#MifareUltralight#close_E@ is called. Setting a longer timeout may be useful when performing transactions that require a long processing time on the tag such as key generation. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14", "FullName": "public void setTimeout (int timeout)"}, "getMaxTransceiveLength()": {"Returns": [["int", "the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareUltralight#transceive_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareUltralight#transceive_E@.", "history": "Added in API level 14", "FullName": "public int getMaxTransceiveLength ()"}, "getType()": {"Returns": [["int", "the type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the MIFARE Ultralight type of the tag. One of @B_android#nfc#tech#MifareUltralight#TYPE_ULTRALIGHT_E@ or @B_android#nfc#tech#MifareUltralight#TYPE_ULTRALIGHT_C_E@ or @B_android#nfc#tech#MifareUltralight#TYPE_UNKNOWN_E@. Depending on how the tag has been formatted, it can be impossible to accurately classify between original MIFARE Ultralight and Ultralight C. So treat this method as a hint. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getType ()"}, "getTimeout()": {"Returns": [["int", "timeout value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Get the current @B_android#nfc#tech#MifareUltralight#transceive_E@ timeout in milliseconds. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14", "FullName": "public int getTimeout ()"}, "transceive(byte[])": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#nfc#tech#NfcA#transceive_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Send raw NfcA data to a tag and receive the response. This is equivalent to connecting to this tag via @B_android#nfc#tech#NfcA_E@ and calling @B_android#nfc#tech#NfcA#transceive_E@. Note that all MIFARE Classic tags are based on @B_android#nfc#tech#NfcA_E@ technology. Use @B_android#nfc#tech#MifareUltralight#getMaxTransceiveLength_E@ to retrieve the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareUltralight#transceive_E@. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareUltralight#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public byte[] transceive (byte[] data)"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 10", "FullName": "public Tag getTag ()"}, "readPages(int)": {"Returns": [["byte[]", "4 pages (16 bytes)"]], "Parameters": [["int", "int: index of first page to read, starting from 0"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Read 4 pages (16 bytes). The MIFARE Ultralight protocol always reads 4 pages at a time, to reduce the number of commands required to read an entire tag. If a read spans past the last readable block, then the tag will return pages that have been wrapped back to the first blocks. MIFARE Ultralight tags have readable blocks 0x00 through 0x0F. So a read to block offset 0x0E would return blocks 0x0E, 0x0F, 0x00, 0x01. MIFARE Ultralight C tags have readable blocks 0x00 through 0x2B. So a read to block 0x2A would return blocks 0x2A, 0x2B, 0x00, 0x01. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareUltralight#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public byte[] readPages (int pageOffset)"}}, "Inheritance": [], "ClassName": "android.nfc.tech.MifareUltralight", "ClassDesc": "Provides access to MIFARE Ultralight properties and I/O operations on a @B_android#nfc#Tag_E@. Acquire a @B_android#nfc#tech#MifareUltralight_E@ object using @B_android#nfc#tech#MifareUltralight#get_E@. MIFARE Ultralight compatible tags have 4 byte pages @B_android#nfc#tech#MifareUltralight#PAGE_SIZE_E@. The primary operations on an Ultralight tag are @B_android#nfc#tech#MifareUltralight#readPages_E@ and @B_android#nfc#tech#MifareUltralight#writePage_E@. The original MIFARE Ultralight consists of a 64 byte EEPROM. The first 4 pages are for the OTP area, manufacturer data, and locking bits. They are readable and some bits are writable. The final 12 pages are the user read/write area. For more information see the NXP data sheet MF0ICU1. The MIFARE Ultralight C consists of a 192 byte EEPROM. The first 4 pages are for OTP, manufacturer data, and locking bits. The next 36 pages are the user read/write area. The next 4 pages are additional locking bits, counters and authentication configuration and are readable. The final 4 pages are for the authentication key and are not readable. For more information see the NXP data sheet MF0ICU2. Implementation of this class on a Android NFC device is optional. If it is not implemented, then @B_android#nfc#tech#MifareUltralight_E@ will never be enumerated in @B_android#nfc#Tag#getTechList_E@. If it is enumerated, then all @B_android#nfc#tech#MifareUltralight_E@ I/O operations will be supported. In either case, @B_android#nfc#tech#NfcA_E@ will also be enumerated on the tag, because all MIFARE Ultralight tags are also @B_android#nfc#tech#NfcA_E@ tags. @B_android#Manifest#permission#NFC_E@ permission."}