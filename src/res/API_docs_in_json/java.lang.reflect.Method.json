{"Functions": {"invoke(java.lang.Object, java.lang.Object...)": {"Returns": [["@B_java#lang#Object_E@", "the result of dispatching the method represented by this object on obj with parameters args"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object the underlying method is invoked from"], ["@B_java#lang#Object_E@", "Object: the arguments used for the method call"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Method object is enforcing Java language access control and the underlying method is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the method is an instance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion."], ["@B_java#lang#reflect#InvocationTargetException_E@", "if the underlying method throws an exception."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the method is an instance method."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the underlying method is static, then the specified obj argument is ignored. It may be null. If the number of formal parameters required by the underlying method is 0, the supplied args array may be of length 0 or null. If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur. If the underlying method is static, the class that declared the method is initialized if it has not already been initialized. If the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are", "history": "added in API level 1", "FullName": "public Object invoke (Object obj, Object... args)"}, "getParameterTypes()": {"Returns": [["@B_java#lang#Class_E@", "the parameter types for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters.", "history": "Added in API level 1", "FullName": "public Class[]<?> getParameterTypes ()"}, "getExceptionTypes()": {"Returns": [["@B_java#lang#Class_E@", "the exception types declared as being thrown by the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object. Returns an array of length 0 if the executable declares no exceptions in its throws clause.", "history": "Added in API level 1", "FullName": "public Class[]<?> getExceptionTypes ()"}, "getReturnType()": {"Returns": [["@B_java#lang#Class_E@", "the return type for the method this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Class object that represents the formal return type of the method represented by this Method object.", "history": "Added in API level 1", "FullName": "public Class<?> getReturnType ()"}, "equalMethodParameters(java.lang.Class<?>[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean equalMethodParameters (Class[]<?> params)"}, "getTypeParameters()": {"Returns": [["@B_java#lang#reflect#TypeVariable_E@", "an array of TypeVariable objects that represent the type variables declared by this generic declaration"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.", "history": "Added in API level 1", "FullName": "public TypeVariable[]<Method> getTypeParameters ()"}, "isVarArgs()": {"Returns": [["boolean", "true if an only if this executable was declared to take a variable number of arguments."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isVarArgs ()"}, "getParameterAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If the Executable has one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See @B_java#lang#reflect#Parameter_E@ for more information.", "history": "Added in API level 1", "FullName": "public Annotation[][] getParameterAnnotations ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Method against the specified object. Returns true if the objects are the same. Two Methods are the same if they were declared by the same class and have the same name and formal parameter types and return type.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "an object representing the declaring class of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object representing the class or interface that declares the executable represented by this object.", "history": "Added in API level 1", "FullName": "public Class<?> getDeclaringClass ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the simple name of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the method represented by this Method object, as a String.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this Method. The hashcode is computed as the exclusive-or of the hashcodes for the underlying method's declaring class name and the method's name.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "invoke(java.lang.Object,java.lang.Object...)": {"Returns": [["@B_java#lang#Object_E@", "the result of dispatching the method represented by this object on obj with parameters args"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object the underlying method is invoked from"], ["@B_java#lang#Object_E@", "Object: the arguments used for the method call"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Method object is enforcing Java language access control and the underlying method is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the method is an instance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion."], ["@B_java#lang#reflect#InvocationTargetException_E@", "if the underlying method throws an exception."], ["@B_java#lang#NullPointerException_E@", "if the specified object is null and the method is an instance method."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the underlying method is static, then the specified obj argument is ignored. It may be null. If the number of formal parameters required by the underlying method is 0, the supplied args array may be of length 0 or null. If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur. If the underlying method is static, the class that declared the method is initialized if it has not already been initialized. If the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are", "history": "Added in API level 1", "FullName": "public Object invoke (Object obj, Object... args)"}, "getParameterCount()": {"Returns": [["int", "The number of formal parameters for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.", "history": "Added in API level 26", "FullName": "public int getParameterCount ()"}, "isDefault()": {"Returns": [["boolean", "true if and only if this method is a default method as defined by the Java Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this method is a default method; returns false otherwise. A default method is a public non-abstract instance method, that is, a non-static method with a body, declared in an interface type.", "history": "Added in API level 24", "FullName": "public boolean isDefault ()"}, "getGenericParameterTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the formal parameter types of the underlying executable, in declaration order"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""], ["@B_java#lang#TypeNotPresentException_E@", ""], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. If a formal parameter type is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type[] getGenericParameterTypes ()"}, "toGenericString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Method, include type parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Method, including type parameters. The string is formatted as the method access modifiers, if any, followed by an angle-bracketed comma-separated list of the method's type parameters, if any, followed by the method's generic return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's generic formal parameter types. If this method was declared to take a variable number of arguments, instead of denoting the last parameter as \"The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: abstract, default, static, final, synchronized, native, strictfp.", "history": "Added in API level 1", "FullName": "public String toGenericString ()"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "all annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all annotations present on this element. (Returns an array of length zero if this element has no annotations.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "Annotation[] getAnnotations ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Method"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Method. The string is formatted as the method access modifiers, if any, followed by the method return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's formal parameter types. If the method throws checked exceptions, the parameter list is followed by a space, followed by the word throws followed by a comma-separated list of the thrown exception types. For example: The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: abstract, default, static, final, synchronized, native, strictfp.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getDefaultValue()": {"Returns": [["@B_java#lang#Object_E@", "the default value for the annotation member represented by this Method instance."]], "Parameters": [], "Throws": [["@B_java#lang#TypeNotPresentException_E@", "if the annotation is of type @B_java#lang#Class_E@ and no definition can be found for the default class value."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the default value for the annotation member represented by this Method instance. If the member is of a primitive type, an instance of the corresponding wrapper type is returned. Returns null if no default is associated with the member, or if the method instance does not represent a declared member of an annotation type.", "history": "Added in API level 1", "FullName": "public Object getDefaultValue ()"}, "getGenericExceptionTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the exception types thrown by the underlying executable"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""], ["@B_java#lang#TypeNotPresentException_E@", ""], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object. Returns an array of length 0 if the underlying executable declares no exceptions in its throws clause. If an exception type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type[] getGenericExceptionTypes ()"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this executable is a synthetic construct as defined by The Java\u2122 Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable is a synthetic construct; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isSynthetic ()"}, "isBridge()": {"Returns": [["boolean", "true if and only if this method is a bridge method as defined by the Java Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this method is a bridge method; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isBridge ()"}, "getGenericReturnType()": {"Returns": [["@B_java#lang#reflect#Type_E@", "a Type object that represents the formal return type of the underlying method"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic method signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if the underlying method's return type refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if the underlying method's return typed refers to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Type object that represents the formal return type of the method represented by this Method object. If the return type is a parameterized type, the Type object returned must accurately reflect the actual type parameters used in the source code. If the return type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type getGenericReturnType ()"}, "compareParameters(java.lang.Class<?>[])": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "int compareParameters (Class[]<?> params)"}, "getModifiers()": {"Returns": [["int", "the Java language modifiers for the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Java language", "history": "Added in API level 1", "FullName": "public int getModifiers ()"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 1", "FullName": "public T getAnnotation (Class<T> annotationClass)"}, "getAnnotation(java.lang.Class<A>)": {"Returns": [["A", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 14", "FullName": "A getAnnotation (Class<A> annotationType)"}}, "Inheritance": ["@B_java#lang#reflect#AccessibleObject_E@", "@B_java#lang#reflect#Executable_E@"], "ClassName": "java.lang.reflect.Method", "ClassDesc": "A Method provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method). A Method permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an IllegalArgumentException if a narrowing conversion would occur."}