{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system identifier, a URI reference [ If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [baseURI as the base, if that fails, the behavior is implementation dependent.", "history": "Added in API level 8", "FullName": "public abstract String getSystemId ()"}, "setBaseURI(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The base URI to be used (see section 5.1.4 in [systemId to an absolute URI. If, when used, the base URI is itself a relative URI, an empty string, or null, the behavior is implementation dependent.", "history": "Added in API level 8", "FullName": "public abstract void setBaseURI (String baseURI)"}, "getBaseURI()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The base URI to be used (see section 5.1.4 in [systemId to an absolute URI. If, when used, the base URI is itself a relative URI, an empty string, or null, the behavior is implementation dependent.", "history": "Added in API level 8", "FullName": "public abstract String getBaseURI ()"}, "setEncoding(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The character encoding, if known. The encoding must be a string acceptable for an XML encoding declaration ([ This attribute has no effect when the application provides a character stream or string data. For other sources of input, an encoding specified by means of this attribute will override any encoding specified in the XML declaration or the Text declaration, or an encoding obtained from a higher level protocol, such as HTTP [", "history": "Added in API level 8", "FullName": "public abstract void setEncoding (String encoding)"}, "getByteStream()": {"Returns": [["@B_java#io#InputStream_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a stream of bytes. If the application knows the character encoding of the byte stream, it should set the encoding attribute. Setting the encoding in this way will override any encoding specified in an XML declaration in the data.", "history": "Added in API level 8", "FullName": "public abstract InputStream getByteStream ()"}, "setPublicId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The public identifier for this input source. This may be mapped to an input source using an implementation dependent mechanism (such as catalogues or other mappings). The public identifier, if specified, may also be reported as part of the location information when errors are reported.", "history": "Added in API level 8", "FullName": "public abstract void setPublicId (String publicId)"}, "getStringData()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "String data to parse. If provided, this will always be treated as a sequence of 16-bit units (UTF-16 encoded characters). It is not a requirement to have an XML declaration when using stringData. If an XML declaration is present, the value of the encoding attribute will be ignored.", "history": "Added in API level 8", "FullName": "public abstract String getStringData ()"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system identifier, a URI reference [ If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [baseURI as the base, if that fails, the behavior is implementation dependent.", "history": "Added in API level 8", "FullName": "public abstract void setSystemId (String systemId)"}, "getEncoding()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The character encoding, if known. The encoding must be a string acceptable for an XML encoding declaration ([ This attribute has no effect when the application provides a character stream or string data. For other sources of input, an encoding specified by means of this attribute will override any encoding specified in the XML declaration or the Text declaration, or an encoding obtained from a higher level protocol, such as HTTP [", "history": "Added in API level 8", "FullName": "public abstract String getEncoding ()"}, "setStringData(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "String data to parse. If provided, this will always be treated as a sequence of 16-bit units (UTF-16 encoded characters). It is not a requirement to have an XML declaration when using stringData. If an XML declaration is present, the value of the encoding attribute will be ignored.", "history": "Added in API level 8", "FullName": "public abstract void setStringData (String stringData)"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The public identifier for this input source. This may be mapped to an input source using an implementation dependent mechanism (such as catalogues or other mappings). The public identifier, if specified, may also be reported as part of the location information when errors are reported.", "history": "Added in API level 8", "FullName": "public abstract String getPublicId ()"}, "setCharacterStream(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a stream of 16-bit units. The application must encode the stream using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when using character streams. If an XML declaration is present, the value of the encoding attribute will be ignored.", "history": "Added in API level 8", "FullName": "public abstract void setCharacterStream (Reader characterStream)"}, "setByteStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a stream of bytes. If the application knows the character encoding of the byte stream, it should set the encoding attribute. Setting the encoding in this way will override any encoding specified in an XML declaration in the data.", "history": "Added in API level 8", "FullName": "public abstract void setByteStream (InputStream byteStream)"}, "getCharacterStream()": {"Returns": [["@B_java#io#Reader_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute of a language and binding dependent type that represents a stream of 16-bit units. The application must encode the stream using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when using character streams. If an XML declaration is present, the value of the encoding attribute will be ignored.", "history": "Added in API level 8", "FullName": "public abstract Reader getCharacterStream ()"}, "getCertifiedText()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If set to true, assume that the input is certified (see section 2.13 in [", "history": "Added in API level 8", "FullName": "public abstract boolean getCertifiedText ()"}, "setCertifiedText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If set to true, assume that the input is certified (see section 2.13 in [", "history": "Added in API level 8", "FullName": "public abstract void setCertifiedText (boolean certifiedText)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.ls.LSInput", "ClassDesc": "This interface represents an input source for data. This interface allows an application to encapsulate information about an input source in a single object, which may include a public identifier, a system identifier, a byte stream (possibly with a specified encoding), a base URI, and/or a character stream. The exact definitions of a byte stream and a character stream are binding dependent. The application is expected to provide objects that implement this interface whenever such objects are needed. The application can either provide its own objects that implement this interface, or it can use the generic factory method DOMImplementationLS.createLSInput() to create objects that implement this interface. The LSParser will use the LSInput object to determine how to read data. The LSParser will look at the different inputs specified in the LSInput in the following order to know which one to read from, the first one that is not null and not an empty string will be used: If all inputs are null, the LSParser will report a DOMError with its DOMError.type set to \"no-input-specified\" and its DOMError.severity set to DOMError.SEVERITY_FATAL_ERROR. LSInput objects belong to the application. The DOM implementation will never modify them (though it may make copies and modify the copies, if necessary). See also the"}