{"Functions": {"flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes the stream.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "write(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: String to be written"], ["int", "int: Offset from which to start reading characters"], ["int", "int: Number of characters to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a String. If the value of the @B_java#lang#IndexOutOfBoundsException_E@ be thrown.", "history": "Added in API level 1", "FullName": "public void write (String s, int off, int len)"}, "write(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: A character array"], ["int", "int: Offset from which to start reading characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters. Ordinarily this method stores characters from the given array into this stream's buffer, flushing the buffer to the underlying stream as needed. If the requested length is at least as large as the buffer, however, then this method will flush the buffer and write the characters directly to the underlying stream. Thus redundant BufferedWriters will not copy data unnecessarily.", "history": "added in API level 1", "FullName": "public void write (char[] cbuf, int off, int len)"}, "newLine()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a line separator. The line separator string is defined by the system property", "history": "Added in API level 1", "FullName": "public void newLine ()"}, "write(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: A character array"], ["int", "int: Offset from which to start reading characters"], ["int", "int: Number of characters to write"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of an array of characters. Ordinarily this method stores characters from the given array into this stream's buffer, flushing the buffer to the underlying stream as needed. If the requested length is at least as large as the buffer, however, then this method will flush the buffer and write the characters directly to the underlying stream. Thus redundant BufferedWriters will not copy data unnecessarily.", "history": "Added in API level 1", "FullName": "public void write (char[] cbuf, int off, int len)"}, "BufferedWriter(java.io.Writer, int)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A Writer"], ["int", "int: Output-buffer size, a positive integer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If sz <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new buffered character-output stream that uses an output buffer of the given size.", "history": "added in API level 1", "FullName": "public BufferedWriter (Writer out, int sz)"}, "write(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: String to be written"], ["int", "int: Offset from which to start reading characters"], ["int", "int: Number of characters to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a String. If the value of the @B_java#lang#IndexOutOfBoundsException_E@ be thrown.", "history": "added in API level 1", "FullName": "public void write (String s, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream, flushing it first. Once the stream has been closed, further write() or flush() invocations will cause an IOException to be thrown. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: int specifying a character to be written"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a single character.", "history": "Added in API level 1", "FullName": "public void write (int c)"}, "BufferedWriter(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A Writer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a buffered character-output stream that uses a default-sized output buffer.", "history": "Added in API level 1", "FullName": "public BufferedWriter (Writer out)"}, "BufferedWriter(java.io.Writer,int)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A Writer"], ["int", "int: Output-buffer size, a positive integer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If sz <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new buffered character-output stream that uses an output buffer of the given size.", "history": "Added in API level 1", "FullName": "public BufferedWriter (Writer out, int sz)"}}, "Inheritance": ["@B_java#io#Writer_E@"], "ClassName": "java.io.BufferedWriter", "ClassDesc": "Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings. The buffer size may be specified, or the default size may be accepted. The default is large enough for most purposes. A newLine() method is provided, which uses the platform's own notion of line separator as defined by the system property In general, a Writer sends its output immediately to the underlying character or byte stream. Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters. For example,"}