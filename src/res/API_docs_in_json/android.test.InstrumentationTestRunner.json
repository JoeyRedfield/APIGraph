{"Functions": {"onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Method where the instrumentation thread enters execution. This allows you to run your instrumentation code in a separate thread than the application, so that it can perform blocking operation such as @B_android#app#Instrumentation#sendKeySync_E@ or @B_android#app#Instrumentation#startActivitySync_E@. You will typically want to call finish() when this function is done, to end your instrumentation.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void onStart ()"}, "getTestSuite()": {"Returns": [["@B_junit#framework#TestSuite_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public TestSuite getTestSuite ()"}, "getAndroidTestRunner()": {"Returns": [["@B_android#test#AndroidTestRunner_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected AndroidTestRunner getAndroidTestRunner ()"}, "getArguments()": {"Returns": [["@B_android#os#Bundle_E@", "the Bundle object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the arguments passed to this instrumentation.", "history": "Added in API level 18 Deprecated in API level 24", "FullName": "public Bundle getArguments ()"}, "getLoader()": {"Returns": [["@B_java#lang#ClassLoader_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to provide access to the class loader of your package.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public ClassLoader getLoader ()"}, "getAllTests()": {"Returns": [["@B_junit#framework#TestSuite_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to define all of the tests to run in your package.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public TestSuite getAllTests ()"}, "InstrumentationTestRunner()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public InstrumentationTestRunner ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Any additional arguments that were supplied when the instrumentation was started."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the instrumentation is starting, before any application code has been loaded. Usually this will be implemented to simply call @B_android#app#Instrumentation#start_E@ to begin the instrumentation thread, which will then continue execution in @B_android#app#Instrumentation#onStart_E@. If you do not need your own thread -- that is you are writing your instrumentation to be completely asynchronous (returning to the event loop so that the application can run), you can simply begin your instrumentation here, for example call @B_android#content#Context#startActivity_E@ to begin the appropriate first activity of the application.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void onCreate (Bundle arguments)"}}, "Inheritance": ["@B_android#app#Instrumentation_E@"], "ClassName": "android.test.InstrumentationTestRunner", "ClassDesc": "Use An @B_android#app#Instrumentation_E@ that runs various types of @B_junit#framework#TestCase_E@s against an Android package (application). If used with other options, the resulting test run will contain the union of the two options. e.g. \"-e size large -e annotation com.android.foo.MyAnnotation\" will run only tests with both the @B_android#test#suitebuilder#annotation#LargeTest_E@ and \"com.android.foo.MyAnnotation\" annotations."}