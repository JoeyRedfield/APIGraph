{"Functions": {"getCertPathEncodings()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the names of the supported CertPath encodings (as Strings)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first. See the CertPath Encodings section in the Attempts to modify the returned Iterator via its remove method result in an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public final Iterator<String> getCertPathEncodings ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#cert#CertificateFactory_E@", "a certificate factory object for the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the certificate type. See the CertificateFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard certificate types."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if a CertificateFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final CertificateFactory getInstance (String type, String provider)"}, "generateCertPath(java.io.InputStream)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the data from the InputStream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream containing the data"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs while decoding"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the default encoding. The name of the default encoding is the first element of the Iterator returned by the @B_java#security#cert#CertificateFactory#getCertPathEncodings_E@ method.", "history": "Added in API level 1", "FullName": "public final CertPath generateCertPath (InputStream inStream)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#cert#CertificateFactory_E@", "a certificate factory object for the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the certificate type. See the CertificateFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard certificate types."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if a CertificateFactorySpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final CertificateFactory getInstance (String type, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this certificate factory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this certificate factory.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "CertificateFactory(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertificateFactorySpi_E@", "CertificateFactorySpi: the provider implementation."], ["@B_java#security#Provider_E@", "Provider: the provider."], ["@B_java#lang#String_E@", "String: the certificate type."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CertificateFactory object of the given type, and encapsulates the given provider implementation (SPI object) in it.", "history": "Added in API level 1", "FullName": "protected CertificateFactory (CertificateFactorySpi certFacSpi, Provider provider, String type)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#cert#CertificateFactory_E@", "a certificate factory object for the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the certificate type. See the CertificateFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard certificate types."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if a CertificateFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final CertificateFactory getInstance (String type, String provider)"}, "generateCertPath(java.util.List<?extendsjava.security.cert.Certificate>)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the supplied list of certificates"]], "Parameters": [["@B_java#util#List_E@", "List: a List of Certificates"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with a List of Certificates. The certificates supplied must be of a type supported by the CertificateFactory. They will be copied out of the supplied List object.", "history": "Added in API level 1", "FullName": "public final CertPath generateCertPath (List<? extends Certificate> certificates)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#cert#CertificateFactory_E@", "a certificate factory object for the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested certificate type. See the CertificateFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard certificate types."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if no Provider supports a CertificateFactorySpi implementation for the specified type."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a certificate factory object that implements the specified certificate type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final CertificateFactory getInstance (String type)"}, "generateCRLs(java.io.InputStream)": {"Returns": [["@B_java#util#Collection_E@", "a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream with the CRLs."]], "Throws": [["@B_java#security#cert#CRLException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the X509CRL class. In the case of a certificate factory for X.509 CRLs, inStream may contain a sequence of DER-encoded CRLs. In addition, inStream may contain a PKCS#7 CRL set. This is a PKCS#7 Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream.", "history": "Added in API level 1", "FullName": "public final Collection<? extends CRL> generateCRLs (InputStream inStream)"}, "generateCertificates(java.io.InputStream)": {"Returns": [["@B_java#util#Collection_E@", "a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream with the certificates."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, inStream may contain a sequence of DER-encoded certificates in the formats described for @B_java#security#cert#CertificateFactory#generateCertificate_E@. In addition, inStream may contain a PKCS#7 certificate chain. This is a PKCS#7 Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream.", "history": "Added in API level 1", "FullName": "public final Collection<? extends Certificate> generateCertificates (InputStream inStream)"}, "generateCertPath(java.io.InputStream,java.lang.String)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the data from the InputStream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream containing the data"], ["@B_java#lang#String_E@", "String: the encoding used for the data"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs while decoding or the encoding requested is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the specified encoding. See the CertPath Encodings section in the", "history": "Added in API level 1", "FullName": "public final CertPath generateCertPath (InputStream inStream, String encoding)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the name of the certificate type associated with this certificate factory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the certificate type associated with this certificate factory.", "history": "Added in API level 1", "FullName": "public final String getType ()"}, "generateCRL(java.io.InputStream)": {"Returns": [["@B_java#security#cert#CRL_E@", "a CRL object initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream with the CRL data."]], "Throws": [["@B_java#security#cert#CRLException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the X509CRL class. Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream. Otherwise, each call to this method consumes one CRL and the read position of the input stream is positioned to the next available byte after the inherent end-of-CRL marker. If the data in the input stream does not contain an inherent end-of-CRL marker (other than EOF) and there is trailing data after the CRL is parsed, a CRLException is thrown.", "history": "Added in API level 1", "FullName": "public final CRL generateCRL (InputStream inStream)"}, "generateCertificate(java.io.InputStream)": {"Returns": [["@B_java#security#cert#Certificate_E@", "a certificate object initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream with the certificate data."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a certificate object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown.", "history": "Added in API level 1", "FullName": "public final Certificate generateCertificate (InputStream inStream)"}}, "Inheritance": [], "ClassName": "java.security.cert.CertificateFactory", "ClassDesc": "This class defines the functionality of a certificate factory, which is used to generate certificate, certification path (CertPath) and certificate revocation list (CRL) objects from their encodings. For encodings consisting of multiple certificates, use generateCertificates when you want to parse a collection of possibly unrelated certificates. Otherwise, use generateCertPath when you want to generate a CertPath (a certificate chain) and subsequently validate it with a CertPathValidator. A certificate factory for X.509 must return certificates that are an instance of java.security.cert.X509Certificate, and CRLs that are an instance of java.security.cert.X509CRL. The following example reads a file with Base64 encoded certificates, which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and bounded at the end by -----END CERTIFICATE-----. We convert the FileInputStream (which does not support mark and reset) to a BufferedInputStream (which supports those methods), so that each call to generateCertificate consumes only one certificate, and the read position of the input stream is positioned to the next certificate in the file: The following example parses a PKCS#7-formatted certificate reply stored in a file and extracts all the certificates from it: Android provides the following CertificateFactory types: CertPath encodings:"}