{"Functions": {"comparingByKey(java.util.Comparator<?superK>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ by the key."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the key @B_java#util#Comparator_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ by key using the given @B_java#util#Comparator_E@. The returned comparator is serializable if the specified comparator is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByKey (Comparator<? super K> cmp)"}, "comparingByValue(java.util.Comparator<?superV>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ by the value."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the value @B_java#util#Comparator_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ by value using the given @B_java#util#Comparator_E@. The returned comparator is serializable if the specified comparator is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByValue (Comparator<? super V> cmp)"}, "getKey()": {"Returns": [["K", "the key corresponding to this entry"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "implementations may, but are not required to, throw this exception if the entry has been removed from the backing map."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the key corresponding to this entry.", "history": "Added in API level 1", "FullName": "public abstract K getKey ()"}, "setValue(V)": {"Returns": [["V", "old value corresponding to the entry"]], "Parameters": [["V", "V: new value to be stored in this entry"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by the backing map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified value prevents it from being stored in the backing map"], ["@B_java#lang#NullPointerException_E@", "if the backing map does not permit null values, and the specified value is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this value prevents it from being stored in the backing map"], ["@B_java#lang#IllegalStateException_E@", "implementations may, but are not required to, throw this exception if the entry has been removed from the backing map."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the value corresponding to this entry with the specified value (optional operation). (Writes through to the map.) The behavior of this call is undefined if the mapping has already been removed from the map (by the iterator's remove operation).", "history": "Added in API level 1", "FullName": "public abstract V setValue (V value)"}, "comparingByKey(java.util.Comparator<? super K>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ by the key."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the key @B_java#util#Comparator_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ by key using the given @B_java#util#Comparator_E@. The returned comparator is serializable if the specified comparator is also serializable.", "history": "added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByKey (Comparator<? super K> cmp)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map entry"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this map entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this entry for equality. Returns true if the given object is also a map entry and the two entries represent the same mapping. More formally, two entries e1 and e2 represent the same mapping ifequals method works properly across different implementations of the Map.Entry interface.", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object o)"}, "comparingByValue(java.util.Comparator<? super V>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ by the value."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the value @B_java#util#Comparator_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ by value using the given @B_java#util#Comparator_E@. The returned comparator is serializable if the specified comparator is also serializable.", "history": "added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByValue (Comparator<? super V> cmp)"}, "hashCode()": {"Returns": [["int", "the hash code value for this map entry"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@", "@B_java#lang#Object#equals_E@", "@B_java#util#Map#Entry#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this map entry. The hash code of a map entry e is defined to be: e1.equals(e2) implies that e1.hashCode()==e2.hashCode() for any two Entries e1 and e2, as required by the general contract of Object.hashCode.", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}, "comparingByValue()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ in natural order on value."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ in natural order on value. The returned comparator is serializable and throws @B_java#lang#NullPointerException_E@ when comparing an entry with null values.", "history": "Added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByValue ()"}, "comparingByKey()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares @B_java#util#Map#Entry_E@ in natural order on key."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns a comparator that compares @B_java#util#Map#Entry_E@ in natural order on key. The returned comparator is serializable and throws @B_java#lang#NullPointerException_E@ when comparing an entry with a null key.", "history": "Added in API level 24", "FullName": "public static Comparator<Entry<K, V>> comparingByKey ()"}, "getValue()": {"Returns": [["V", "the value corresponding to this entry"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "implementations may, but are not required to, throw this exception if the entry has been removed from the backing map."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value corresponding to this entry. If the mapping has been removed from the backing map (by the iterator's remove operation), the results of this call are undefined.", "history": "Added in API level 1", "FullName": "public abstract V getValue ()"}}, "Inheritance": [], "ClassName": "java.util.Map.Entry<K, V>", "ClassDesc": "A map entry (key-value pair). The Map.entrySet method returns a collection-view of the map, whose elements are of this class. The Map.Entry objects are valid setValue operation on the map entry."}