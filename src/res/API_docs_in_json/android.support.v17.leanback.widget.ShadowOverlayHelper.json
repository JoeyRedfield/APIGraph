{"Functions": {"onViewCreated(android.view.View)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Must be called when view is created for cases @B_android#support#v17#leanback#widget#ShadowOverlayHelper#needsWrapper_E@ is false.", "history": "added in version 23.1.0", "FullName": "void onViewCreated (View view)"}, "needsRoundedCorner()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.1.0", "FullName": "boolean needsRoundedCorner ()"}, "needsWrapper()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if a \"wrapper\" ShadowOverlayContainer is needed. When needsWrapper() is true, call @B_android#support#v17#leanback#widget#ShadowOverlayHelper#createShadowOverlayContainer_E@ to create the wrapper.", "history": "added in version 23.1.0", "FullName": "boolean needsWrapper ()"}, "setNoneWrapperOverlayColor(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set overlay color for view other than ShadowOverlayContainer. See also @B_android#support#v17#leanback#widget#ShadowOverlayContainer#setOverlayColor_E@.", "history": "added in version 23.1.0", "FullName": "void setNoneWrapperOverlayColor (View view, int color)"}, "prepareParentForShadow(android.view.ViewGroup)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#support#v17#leanback#widget#ShadowOverlayHelper#prepareParentForShadow_E@ must be called on parent of container before using shadow. Depending on Shadow type, optical bounds might be applied.", "history": "added in version 23.1.0", "FullName": "void prepareParentForShadow (ViewGroup parent)"}, "getShadowType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.1.0", "FullName": "int getShadowType ()"}, "setOverlayColor(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set overlay color for view, it can be a ShadowOverlayContainer if needsWrapper() is true, or other view type.", "history": "added in version 23.1.0", "FullName": "void setOverlayColor (View view, int color)"}, "setShadowFocusLevel(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set shadow focus level (0 to 1). 0 for unfocused, 1 for fully focused.", "history": "added in version 23.1.0", "FullName": "void setShadowFocusLevel (View view, float level)"}, "supportsDynamicShadow()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the platform sdk supports dynamic shadows.", "history": "added in version 23.1.0", "FullName": "boolean supportsDynamicShadow ()"}, "supportsShadow()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the platform sdk supports shadow.", "history": "added in version 23.1.0", "FullName": "boolean supportsShadow ()"}, "supportsRoundedCorner()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the platform sdk supports rounded corner through outline.", "history": "added in version 23.1.0", "FullName": "boolean supportsRoundedCorner ()"}, "supportsForeground()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if view.setForeground() is supported.", "history": "added in version 23.1.0", "FullName": "boolean supportsForeground ()"}, "needsOverlay()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.1.0", "FullName": "boolean needsOverlay ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v17.leanback.widget.ShadowOverlayHelper", "ClassDesc": "ShadowOverlayHelper is a helper class for shadow, overlay color and rounded corner. There are many choices to implement Shadow, overlay color. Initialize it with ShadowOverlayHelper.Builder and it decides the best strategy based on options user choose and current platform version. For shadow: it may use 9-patch with opticalBounds or Z-value based shadow for API >= 21. When 9-patch is used, it requires a ShadowOverlayContainer to include 9-patch views. For overlay: it may use ShadowOverlayContainer which overrides draw() or it may use setForeground(new ColorDrawable()) for API>=23. The foreground support might be disabled if rounded corner is applied due to performance reason. For rounded-corner: it uses a ViewOutlineProvider for API>=21. There are two different strategies: use Wrapper with a ShadowOverlayContainer; or apply rounded corner, overlay and rounded-corner to the view itself. Below is an example of how helper is used. ShadowOverlayHelper mHelper = new ShadowOverlayHelper.Builder(). .needsOverlay(true).needsRoundedCorner(true).needsShadow(true) .build(); mHelper.prepareParentForShadow(parentView); // apply optical-bounds for 9-patch shadow. mHelper.setOverlayColor(view, Color.argb(0x80, 0x80, 0x80, 0x80)); mHelper.setShadowFocusLevel(view, 1.0f); ... View initializeView(View view) { if (mHelper.needsWrapper()) { ShadowOverlayContainer wrapper = mHelper.createShadowOverlayContainer(context); wrapper.wrap(view); return wrapper; } else { mHelper.onViewCreated(view); return view; } } ..."}