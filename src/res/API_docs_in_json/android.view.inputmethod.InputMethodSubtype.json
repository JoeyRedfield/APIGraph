{"Functions": {"isAsciiCapable()": {"Returns": [["boolean", "true if this subtype is Ascii capable, false otherwise. If the subtype is ASCII capable, it should guarantee that the user can input ASCII characters with this subtype. This is important because many password fields only allow ASCII-characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public boolean isAsciiCapable ()"}, "getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)": {"Returns": [["@B_java#lang#CharSequence_E@", "a display name for this subtype. This value will never be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: @B_android#content#Context_E@ will be used for getting @B_java#util#Locale_E@ and @B_android#content#pm#PackageManager_E@."], ["@B_java#lang#String_E@", "String: The package name of the input method."], ["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: The @B_android#content#pm#ApplicationInfo_E@ of the input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a display name for this subtype. If subtypeNameResId is specified (!= 0) text generated from that resource will be returned. The localized string resource of the label should be capitalized for inclusion in UI lists. The string resource may contain at most one %s. If present, the %s will be replaced with the display name of the subtype locale in the user's locale. If subtypeNameResId is not specified (== 0) the framework returns the display name of the subtype locale, as capitalized for use in UI lists, in the user's locale.", "history": "Added in API level 14", "FullName": "public CharSequence getDisplayName (Context context, String packageName, ApplicationInfo appInfo)"}, "getIconResId()": {"Returns": [["int", "Resource ID of the subtype icon drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getIconResId ()"}, "getMode()": {"Returns": [["@B_java#lang#String_E@", "The mode of the subtype."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public String getMode ()"}, "InputMethodSubtype(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of the subtype name string. The string resource may have exactly one %s in it. If there is, the %s part will be replaced with the locale's display name by the formatter. Please refer to @B_android#view#inputmethod#InputMethodSubtype#getDisplayName_E@ for details."], ["int", "int: Resource ID of the subtype icon drawable."], ["@B_java#lang#String_E@", "String: The locale supported by the subtype"], ["@B_java#lang#String_E@", "String: The mode supported by the subtype"], ["@B_java#lang#String_E@", "String: The extra value of the subtype. This string is free-form, but the API supplies tools to deal with a key-value comma-separated list; see @B_android#view#inputmethod#InputMethodSubtype#containsExtraValueKey_E@ and @B_android#view#inputmethod#InputMethodSubtype#getExtraValueOf_E@."], ["boolean", "boolean: true when this subtype is auxiliary, false otherwise. An auxiliary subtype will not be shown in the list of enabled IMEs for choosing the current IME in the Settings even when this subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch to this subtype while an IME is shown. The framework will never switch the current IME to this subtype by @B_android#view#inputmethod#InputMethodManager#switchToLastInputMethod_E@. The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input)."], ["boolean", "boolean: true when this subtype should be enabled by default if no other subtypes in the IME are enabled explicitly. Note that a subtype with this parameter being true will not be shown in the list of subtypes in each IME's subtype enabler. Having an \"automatic\" subtype is an example use of this flag."], ["int", "int: The unique ID for the subtype. The input method framework keeps track of enabled subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if other attributes are different. If the ID is unspecified or 0, Arrays.hashCode(new Object[] {locale, mode, extraValue, isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#inputmethod#InputMethodSubtype#InputMethodSubtypeBuilder_E@ instead. \"isAsciiCapable\" is \"false\" in this constructor. Constructor.", "history": "Added in API level 17", "FullName": "public InputMethodSubtype (int nameId, int iconId, String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, int id)"}, "InputMethodSubtype(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#inputmethod#InputMethodSubtype#InputMethodSubtypeBuilder_E@ instead. Arguments for this constructor have the same meanings as @B_android#view#inputmethod#InputMethodSubtype#InputMethodSubtype_E@ except \"id\". Constructor with no subtype ID specified.", "history": "Added in API level 14", "FullName": "public InputMethodSubtype (int nameId, int iconId, String locale, String mode, String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 11", "FullName": "public int describeContents ()"}, "isAuxiliary()": {"Returns": [["boolean", "true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be shown in the list of enabled IMEs for choosing the current IME in the Settings even when this subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch to this subtype while an IME is shown. The framework will never switch the current IME to this subtype by @B_android#view#inputmethod#InputMethodManager#switchToLastInputMethod_E@. The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public boolean isAuxiliary ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 11", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "getNameResId()": {"Returns": [["int", "Resource ID of the subtype name string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getNameResId ()"}, "getExtraValue()": {"Returns": [["@B_java#lang#String_E@", "The extra value of the subtype."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public String getExtraValue ()"}, "overridesImplicitlyEnabledSubtype()": {"Returns": [["boolean", "true when this subtype will be enabled by default if no other subtypes in the IME are enabled explicitly, false otherwise. Note that a subtype with this method returning true will not be shown in the list of subtypes in each IME's subtype enabler. Having an \"automatic\" subtype is an example use of this flag."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public boolean overridesImplicitlyEnabledSubtype ()"}, "getLanguageTag()": {"Returns": [["@B_java#lang#String_E@", "the BCP-47 Language Tag of the subtype. Returns an empty string when no Language Tag is specified. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#forLanguageTag_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getLanguageTag ()"}, "getExtraValueOf(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The value of the specified key"]], "Parameters": [["@B_java#lang#String_E@", "String: The key of extra value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4", "history": "Added in API level 12", "FullName": "public String getExtraValueOf (String key)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 11", "FullName": "public boolean equals (Object o)"}, "containsExtraValueKey(java.lang.String)": {"Returns": [["boolean", "The subtype contains specified the extra value"]], "Parameters": [["@B_java#lang#String_E@", "String: The key of extra value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4", "history": "Added in API level 12", "FullName": "public boolean containsExtraValueKey (String key)"}, "getLocale()": {"Returns": [["@B_java#lang#String_E@", "The locale of the subtype. This method returns the \"locale\" string parameter passed to the constructor. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#inputmethod#InputMethodSubtype#getLanguageTag_E@ instead.", "history": "Added in API level 11 Deprecated in API level 24", "FullName": "public String getLocale ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 11", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 11", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.InputMethodSubtype", "ClassDesc": "This class is used to specify meta information of a subtype contained in an input method editor (IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...), and is used for IME switch and settings. The input method subtype allows the system to bring up the specified subtype of the designated IME directly. It should be defined in an XML resource file of the input method with the <subtype> element, which resides within an <input-method> element. For more information, see the guide to"}