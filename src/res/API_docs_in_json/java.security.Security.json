{"Functions": {"getProvider(java.lang.String)": {"Returns": [["@B_java#security#Provider_E@", "the provider of the specified name."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider to get."]], "Throws": [], "SeeAlso": ["@B_java#security#Security#removeProvider_E@", "@B_java#security#Security#addProvider_E@"], "Permissions": [], "Description": "Returns the provider installed with the specified name, if any. Returns null if no provider with the specified name is installed or if name is null.", "history": "Added in API level 1", "FullName": "public static Provider getProvider (String name)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the security property corresponding to key."]], "Parameters": [["@B_java#lang#String_E@", "String: the key of the property being retrieved."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method denies access to retrieve the specified security property value"], ["@B_java#lang#NullPointerException_E@", "is key is null"]], "SeeAlso": ["@B_java#security#Security#setProperty_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Gets a security property value. First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission(\"getProperty.\"+key) permission to see if it's ok to retrieve the specified security property value..", "history": "Added in API level 1", "FullName": "public static String getProperty (String key)"}, "getAlgorithms(java.lang.String)": {"Returns": [["@B_java#util#Set_E@", "a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service or an empty set if no provider supports the specified service."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Note: this parameter is case-insensitive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns an empty Set if there is no provider that supports the specified service or if serviceName is null. For a complete list of Java cryptographic services, please see the", "history": "added in API level 1", "FullName": "public static Set<String> getAlgorithms (String serviceName)"}, "getProviders()": {"Returns": [["@B_java#security#Provider_E@", "an array of all the installed providers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all the installed providers. The order of the providers in the array is their preference order.", "history": "Added in API level 1", "FullName": "public static Provider[] getProviders ()"}, "addProvider(java.security.Provider)": {"Returns": [["int", "the preference position in which the provider was added, or -1 if the provider was not added because it is already installed."]], "Parameters": [["@B_java#security#Provider_E@", "Provider: the provider to be added."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if provider is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkSecurityAccess_E@ method denies access to add a new provider"]], "SeeAlso": ["@B_java#security#Security#getProvider_E@", "@B_java#security#Security#removeProvider_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Adds a provider to the next position available. If there is a security manager, the @B_java#lang#SecurityManager#checkSecurityAccess_E@ method is called with the \"insertProvider\" permission target name to see if it's ok to add a new provider. If this permission check is denied, checkSecurityAccess is called again with the \"insertProvider.\"+provider.getName() permission target name. If both checks are denied, a SecurityException is thrown.", "history": "Added in API level 1", "FullName": "public static int addProvider (Provider provider)"}, "getAlgorithmProperty(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the specified property."]], "Parameters": [["@B_java#lang#String_E@", "String: the algorithm name."], ["@B_java#lang#String_E@", "String: the name of the property to get."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method used to return the value of a proprietary property in the master file of the \"SUN\" Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters. Use the new provider-based and algorithm-independent AlgorithmParameters and KeyFactory engine classes (introduced in the J2SE version 1.2 platform) instead. Gets a specified property for an algorithm. The algorithm name should be a standard name. See the", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static String getAlgorithmProperty (String algName, String propName)"}, "getProviders(java.lang.String)": {"Returns": [["@B_java#security#Provider_E@", "all the installed providers that satisfy the selection criterion, or null if no such providers have been installed."]], "Parameters": [["@B_java#lang#String_E@", "String: the criterion for selecting providers. The filter is case-insensitive."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the filter is not in the required format"], ["@B_java#lang#NullPointerException_E@", "if filter is null"]], "SeeAlso": ["@B_java#security#Security#getProviders_E@"], "Permissions": [], "Description": "Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed. The returned providers are ordered according to their A cryptographic service is always associated with a particular algorithm or type. For example, a digital signature service is always associated with a particular algorithm (e.g., DSA), and a CertificateFactory service is always associated with a particular certificate type (e.g., X.509). The selection criterion must be specified in one of the following two formats: The cryptographic service name must not contain any dots. A provider satisfies the specified selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. For example, \"CertificateFactory.X.509\" would be satisfied by any provider that supplied a CertificateFactory implementation for X.509 certificates. The cryptographic service name must not contain any dots. There must be one or more space characters between the A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. For example, \"Signature.SHA1withDSA KeySize:1024\" would be satisfied by any provider that implemented the SHA1withDSA signature algorithm with a keysize of 1024 (or larger). See the", "history": "Added in API level 1", "FullName": "public static Provider[] getProviders (String filter)"}, "setProperty(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the property to be set."], ["@B_java#lang#String_E@", "String: the value of the property to be set."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method denies access to set the specified security property value"], ["@B_java#lang#NullPointerException_E@", "if key or datum is null"]], "SeeAlso": ["@B_java#security#Security#getProperty_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Sets a security property value. First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission(\"setProperty.\"+key) permission to see if it's ok to set the specified security property value.", "history": "Added in API level 1", "FullName": "public static void setProperty (String key, String datum)"}, "removeProvider(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider to remove."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkSecurityAccess_E@ method denies access to remove the provider"]], "SeeAlso": ["@B_java#security#Security#getProvider_E@", "@B_java#security#Security#addProvider_E@"], "Permissions": [], "Description": "Removes the provider with the specified name. When the specified provider is removed, all providers located at a position greater than where the specified provider was are shifted down one position (towards the head of the list of installed providers). This method returns silently if the provider is not installed or if name is null. First, if there is a security manager, its checkSecurityAccess method is called with the string \"removeProvider.\"+name to see if it's ok to remove the provider. If the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method with a SecurityPermission(\"removeProvider.\"+name) permission.", "history": "Added in API level 1", "FullName": "public static void removeProvider (String name)"}, "insertProviderAt(java.security.Provider, int)": {"Returns": [["int", "the actual preference position in which the provider was added, or -1 if the provider was not added because it is already installed."]], "Parameters": [["@B_java#security#Provider_E@", "Provider: the provider to be added."], ["int", "int: the preference position that the caller would like for this provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if provider is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkSecurityAccess_E@ method denies access to add a new provider"]], "SeeAlso": ["@B_java#security#Security#getProvider_E@", "@B_java#security#Security#removeProvider_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Adds a new provider, at a specified position. The position is the preference order in which providers are searched for requested algorithms. The position is 1-based, that is, 1 is most preferred, followed by 2, and so on. If the given provider is installed at the requested position, the provider that used to be at that position, and all providers with a position greater than position, are shifted up one position (towards the end of the list of installed providers). A provider cannot be added if it is already installed. If there is a security manager, the @B_java#lang#SecurityManager#checkSecurityAccess_E@ method is called with the \"insertProvider\" permission target name to see if it's ok to add a new provider. If this permission check is denied, checkSecurityAccess is called again with the \"insertProvider.\"+provider.getName() permission target name. If both checks are denied, a SecurityException is thrown.", "history": "added in API level 1", "FullName": "public static int insertProviderAt (Provider provider, int position)"}, "getProviders(java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [["@B_java#security#Provider_E@", "all the installed providers that satisfy the selection criteria, or null if no such providers have been installed."]], "Parameters": [["@B_java#util#Map_E@", "Map: the criteria for selecting providers. The filter is case-insensitive."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the filter is not in the required format"], ["@B_java#lang#NullPointerException_E@", "if filter is null"]], "SeeAlso": ["@B_java#security#Security#getProviders_E@"], "Permissions": [], "Description": "Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: The cryptographic service name must not contain any dots. The value associated with the key must be an empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. The cryptographic service name must not contain any dots. There must be one or more space characters between the The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. See the", "history": "Added in API level 1", "FullName": "public static Provider[] getProviders (Map<String, String> filter)"}, "setProperty(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the property to be set."], ["@B_java#lang#String_E@", "String: the value of the property to be set."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method denies access to set the specified security property value"], ["@B_java#lang#NullPointerException_E@", "if key or datum is null"]], "SeeAlso": ["@B_java#security#Security#getProperty_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Sets a security property value. First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission(\"setProperty.\"+key) permission to see if it's ok to set the specified security property value.", "history": "added in API level 1", "FullName": "public static void setProperty (String key, String datum)"}, "insertProviderAt(java.security.Provider,int)": {"Returns": [["int", "the actual preference position in which the provider was added, or -1 if the provider was not added because it is already installed."]], "Parameters": [["@B_java#security#Provider_E@", "Provider: the provider to be added."], ["int", "int: the preference position that the caller would like for this provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if provider is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkSecurityAccess_E@ method denies access to add a new provider"]], "SeeAlso": ["@B_java#security#Security#getProvider_E@", "@B_java#security#Security#removeProvider_E@", "@B_java#security#SecurityPermission_E@"], "Permissions": [], "Description": "Adds a new provider, at a specified position. The position is the preference order in which providers are searched for requested algorithms. The position is 1-based, that is, 1 is most preferred, followed by 2, and so on. If the given provider is installed at the requested position, the provider that used to be at that position, and all providers with a position greater than position, are shifted up one position (towards the end of the list of installed providers). A provider cannot be added if it is already installed. If there is a security manager, the @B_java#lang#SecurityManager#checkSecurityAccess_E@ method is called with the \"insertProvider\" permission target name to see if it's ok to add a new provider. If this permission check is denied, checkSecurityAccess is called again with the \"insertProvider.\"+provider.getName() permission target name. If both checks are denied, a SecurityException is thrown.", "history": "Added in API level 1", "FullName": "public static int insertProviderAt (Provider provider, int position)"}}, "Inheritance": [], "ClassName": "java.security.Security", "ClassDesc": "This class centralizes all security properties and common security methods. One of its primary uses is to manage providers. The default values of security properties are read from an implementation-specific location, which is typically the properties file lib/security/java.security in the Java installation directory."}