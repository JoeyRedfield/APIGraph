{"Functions": {"getCollapseIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The collapse icon drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the collapse icon.", "history": "Added in API level 29", "FullName": "public Drawable getCollapseIcon ()"}, "Toolbar(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Toolbar (Context context, AttributeSet attrs)"}, "setTitleMargin(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the starting title margin in pixels"], ["int", "int: the top title margin in pixels"], ["int", "int: the ending title margin in pixels"], ["int", "int: the bottom title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginStart_E@", "@B_android#widget#Toolbar#getTitleMarginTop_E@", "@B_android#widget#Toolbar#getTitleMarginEnd_E@", "@B_android#widget#Toolbar#getTitleMarginBottom_E@"], "Permissions": [], "Description": "Sets the title margin.", "history": "Added in API level 24", "FullName": "public void setTitleMargin (int start, int top, int end, int bottom)"}, "setContentInsetsRelative(int,int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar starting edge"], ["int", "int: Content inset for the toolbar ending edge"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar relative to layout direction. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public void setContentInsetsRelative (int contentInsetStart, int contentInsetEnd)"}, "setNavigationIcon(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the toolbar's navigation button. The navigation button appears at the start of the toolbar if present. Setting an icon will make the navigation button visible. If you use a navigation icon you should also set a description for its action using @B_android#widget#Toolbar#setNavigationContentDescription_E@. This is used for accessibility and tooltips.", "history": "Added in API level 21", "FullName": "public void setNavigationIcon (int resId)"}, "getContentInsetStartWithNavigation()": {"Returns": [["int", "the start content inset used when a navigation icon has been set in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Gets the start content inset to use when a navigation button is present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#widget#Toolbar#getContentInsetStart_E@ and this value will be used during layout.", "history": "Added in API level 24", "FullName": "public int getContentInsetStartWithNavigation ()"}, "setContentInsetStartWithNavigation(int)": {"Returns": [], "Parameters": [["int", "int: the inset to use when a navigation icon has been set in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Sets the start content inset to use when a navigation button is present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#widget#Toolbar#getContentInsetStart_E@ and this value will be used during layout.", "history": "Added in API level 24", "FullName": "public void setContentInsetStartWithNavigation (int insetStartWithNavigation)"}, "setCollapseContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Content description to set, or null to clear the content description This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the collapse button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the navigation button.", "history": "Added in API level 29", "FullName": "public void setCollapseContentDescription (CharSequence description)"}, "setTitleMarginBottom(int)": {"Returns": [], "Parameters": [["int", "int: the bottom title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginBottom_E@"], "Permissions": [], "Description": "Sets the bottom title margin in pixels.", "history": "Added in API level 24", "FullName": "public void setTitleMarginBottom (int margin)"}, "setOnMenuItemClickListener(android.widget.Toolbar.OnMenuItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#Toolbar#OnMenuItemClickListener_E@", "Toolbar.OnMenuItemClickListener: Listener to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener to respond to menu item click events. This listener will be invoked whenever a user selects a menu item from the action buttons presented at the end of the toolbar or the associated overflow.", "history": "Added in API level 21", "FullName": "public void setOnMenuItemClickListener (Toolbar.OnMenuItemClickListener listener)"}, "getContentInsetStart()": {"Returns": [["int", "The starting content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the starting content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public int getContentInsetStart ()"}, "setSubtitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Subtitle to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the subtitle of this toolbar. Subtitles should express extended information about the current content.", "history": "Added in API level 21", "FullName": "public void setSubtitle (CharSequence subtitle)"}, "setTitleMargin(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the starting title margin in pixels"], ["int", "int: the top title margin in pixels"], ["int", "int: the ending title margin in pixels"], ["int", "int: the bottom title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginStart_E@", "@B_android#widget#Toolbar#getTitleMarginTop_E@", "@B_android#widget#Toolbar#getTitleMarginEnd_E@", "@B_android#widget#Toolbar#getTitleMarginBottom_E@"], "Permissions": [], "Description": "Sets the title margin.", "history": "added in API level 24", "FullName": "public void setTitleMargin (int start, int top, int end, int bottom)"}, "getCollapseContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The collapse button's content description This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the currently configured content description for the collapse button view. This will be used to describe the collapse action to users through mechanisms such as screen readers or tooltips.", "history": "Added in API level 29", "FullName": "public CharSequence getCollapseContentDescription ()"}, "setCollapseIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to set, may be null to use the default icon This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the toolbar's collapse button. The collapse button appears at the start of the toolbar when an action view is present .", "history": "Added in API level 29", "FullName": "public void setCollapseIcon (Drawable icon)"}, "setTitleMarginEnd(int)": {"Returns": [], "Parameters": [["int", "int: the ending title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginEnd_E@"], "Permissions": [], "Description": "Sets the ending title margin in pixels.", "history": "Added in API level 24", "FullName": "public void setTitleMarginEnd (int margin)"}, "Toolbar(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Toolbar (Context context)"}, "setTitle(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a string to set as the title"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of this toolbar. A title should be used as the anchor for a section of content. It should describe or name the content being viewed.", "history": "Added in API level 21", "FullName": "public void setTitle (int resId)"}, "setPopupTheme(int)": {"Returns": [], "Parameters": [["int", "int: theme used to inflate popup menus"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getPopupTheme_E@"], "Permissions": [], "Description": "Specifies the theme to use when inflating popup menus. By default, uses the same theme as the toolbar itself.", "history": "Added in API level 21", "FullName": "public void setPopupTheme (int resId)"}, "setContentInsetEndWithActions(int)": {"Returns": [], "Parameters": [["int", "int: the inset to use when a menu has been set in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Sets the start content inset to use when action buttons are present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#widget#Toolbar#getContentInsetEnd_E@ and this value will be used during layout.", "history": "Added in API level 24", "FullName": "public void setContentInsetEndWithActions (int insetEndWithActions)"}, "setNavigationOnClickListener(android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: Listener to set"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setNavigationIcon_E@"], "Permissions": [], "Description": "Set a listener to respond to navigation events. This listener will be called whenever the user clicks the navigation button at the start of the toolbar. An icon must be set for the navigation button to appear.", "history": "Added in API level 21", "FullName": "public void setNavigationOnClickListener (View.OnClickListener listener)"}, "getTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The current title."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the title of this toolbar.", "history": "Added in API level 21", "FullName": "public CharSequence getTitle ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 21", "FullName": "public boolean onTouchEvent (MotionEvent ev)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#widget#Toolbar#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 21", "FullName": "protected Toolbar.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)"}, "getContentInsetRight()": {"Returns": [["int", "The right content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@"], "Permissions": [], "Description": "Gets the right content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public int getContentInsetRight ()"}, "inflateMenu(int)": {"Returns": [], "Parameters": [["int", "int: ID of a menu resource to inflate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a menu resource into this toolbar. Inflate an XML menu resource into this toolbar. Existing items in the menu will not be modified or removed.", "history": "Added in API level 21", "FullName": "public void inflateMenu (int resId)"}, "setSubtitleTextAppearance(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.", "history": "Added in API level 21", "FullName": "public void setSubtitleTextAppearance (Context context, int resId)"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Title to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of this toolbar. A title should be used as the anchor for a section of content. It should describe or name the content being viewed.", "history": "Added in API level 21", "FullName": "public void setTitle (CharSequence title)"}, "getTitleMarginStart()": {"Returns": [["int", "the starting title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setTitleMarginStart_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getTitleMarginStart ()"}, "getLogo()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current logo drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setLogo_E@"], "Permissions": [], "Description": "Return the current logo drawable.", "history": "Added in API level 21", "FullName": "public Drawable getLogo ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 21", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "getTitleMarginBottom()": {"Returns": [["int", "the bottom title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setTitleMarginBottom_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getTitleMarginBottom ()"}, "setTitleMarginTop(int)": {"Returns": [], "Parameters": [["int", "int: the top title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginTop_E@"], "Permissions": [], "Description": "Sets the top title margin in pixels.", "history": "Added in API level 24", "FullName": "public void setTitleMarginTop (int margin)"}, "Toolbar(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Toolbar (Context context, AttributeSet attrs, int defStyleAttr)"}, "setContentInsetsRelative(int, int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar starting edge"], ["int", "int: Content inset for the toolbar ending edge"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar relative to layout direction. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in API level 21", "FullName": "public void setContentInsetsRelative (int contentInsetStart, int contentInsetEnd)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getTitleMarginEnd()": {"Returns": [["int", "the ending title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setTitleMarginEnd_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getTitleMarginEnd ()"}, "getPopupTheme()": {"Returns": [["int", "resource identifier of the theme used to inflate popup menus, or 0 if menus are inflated against the toolbar theme"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setPopupTheme_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public int getPopupTheme ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected void onDetachedFromWindow ()"}, "getMenu()": {"Returns": [["@B_android#view#Menu_E@", "The toolbar's Menu"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Menu shown in the toolbar. Applications that wish to populate the toolbar's menu can do so from here. To use an XML menu resource, use @B_android#widget#Toolbar#inflateMenu_E@.", "history": "Added in API level 21", "FullName": "public Menu getMenu ()"}, "getCurrentContentInsetEnd()": {"Returns": [["int", "the current content inset end in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the ending side of the bar in the current toolbar configuration.", "history": "Added in API level 24", "FullName": "public int getCurrentContentInsetEnd ()"}, "setSubtitle(int)": {"Returns": [], "Parameters": [["int", "int: String resource ID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the subtitle of this toolbar. Subtitles should express extended information about the current content.", "history": "Added in API level 21", "FullName": "public void setSubtitle (int resId)"}, "setCollapseIcon(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the toolbar's collapse button. The collapse button appears at the start of the toolbar when an action view is present .", "history": "Added in API level 29", "FullName": "public void setCollapseIcon (int resId)"}, "setNavigationContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Content description to set, or null to clear the content description This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the navigation button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the navigation button.", "history": "Added in API level 21", "FullName": "public void setNavigationContentDescription (CharSequence description)"}, "collapseActionView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#hasExpandedActionView_E@"], "Permissions": [], "Description": "Collapse a currently expanded action view. If this Toolbar does not have an expanded action view this method has no effect. An action view may be expanded either directly from the @B_android#view#MenuItem_E@ it belongs to or by user action.", "history": "Added in API level 21", "FullName": "public void collapseActionView ()"}, "setNavigationIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to set, may be null to clear the icon This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the toolbar's navigation button. The navigation button appears at the start of the toolbar if present. Setting an icon will make the navigation button visible. If you use a navigation icon you should also set a description for its action using @B_android#widget#Toolbar#setNavigationContentDescription_E@. This is used for accessibility and tooltips.", "history": "Added in API level 21", "FullName": "public void setNavigationIcon (Drawable icon)"}, "setLogoDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Description to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a description of the toolbar's logo. This description will be used for accessibility or other similar descriptions of the UI.", "history": "Added in API level 21", "FullName": "public void setLogoDescription (CharSequence description)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected Parcelable onSaveInstanceState ()"}, "setLogoDescription(int)": {"Returns": [], "Parameters": [["int", "int: String resource id"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a description of the toolbar's logo. This description will be used for accessibility or other similar descriptions of the UI.", "history": "Added in API level 21", "FullName": "public void setLogoDescription (int resId)"}, "getContentInsetLeft()": {"Returns": [["int", "The left content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the left content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public int getContentInsetLeft ()"}, "setTitleTextAppearance(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.", "history": "Added in API level 21", "FullName": "public void setTitleTextAppearance (Context context, int resId)"}, "showOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the overflow items from the associated menu.", "history": "Added in API level 21", "FullName": "public boolean showOverflowMenu ()"}, "setLogo(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to use as a logo"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a logo drawable. This drawable should generally take the place of title text. The logo cannot be clicked. Apps using a logo should also supply a description using @B_android#widget#Toolbar#setLogoDescription_E@.", "history": "Added in API level 21", "FullName": "public void setLogo (Drawable drawable)"}, "getTitleMarginTop()": {"Returns": [["int", "the top title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setTitleMarginTop_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getTitleMarginTop ()"}, "dismissPopupMenus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss all currently showing popup menus, including overflow or submenus.", "history": "Added in API level 21", "FullName": "public void dismissPopupMenus ()"}, "hasExpandedActionView()": {"Returns": [["boolean", "true if the Toolbar has an expanded action view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether this Toolbar is currently hosting an expanded action view. An action view may be expanded either directly from the @B_android#view#MenuItem_E@ it belongs to or by user action. If the Toolbar has an expanded action view it can be collapsed using the @B_android#widget#Toolbar#collapseActionView_E@ method.", "history": "Added in API level 21", "FullName": "public boolean hasExpandedActionView ()"}, "getNavigationContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The navigation button's content description This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the currently configured content description for the navigation button view. This will be used to describe the navigation action to users through mechanisms such as screen readers or tooltips.", "history": "Added in API level 21", "FullName": "public CharSequence getNavigationContentDescription ()"}, "getNavigationIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The navigation icon drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the navigation icon.", "history": "Added in API level 21", "FullName": "public Drawable getNavigationIcon ()"}, "getContentInsetEnd()": {"Returns": [["int", "The ending content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the ending content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public int getContentInsetEnd ()"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "getCurrentContentInsetStart()": {"Returns": [["int", "the current content inset start in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the starting side of the bar in the current toolbar configuration.", "history": "Added in API level 24", "FullName": "public int getCurrentContentInsetStart ()"}, "setSubtitleTextColor(int)": {"Returns": [], "Parameters": [["int", "int: The new text color in 0xAARRGGBB format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color of the subtitle, if present.", "history": "Added in API level 21", "FullName": "public void setSubtitleTextColor (int color)"}, "getContentInsetEndWithActions()": {"Returns": [["int", "the end content inset used when a menu has been set in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the end content inset to use when action buttons are present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#widget#Toolbar#getContentInsetEnd_E@ and this value will be used during layout.", "history": "Added in API level 24", "FullName": "public int getContentInsetEndWithActions ()"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#Toolbar#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 21", "FullName": "public Toolbar.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "hideOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be hidden, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the overflow items from the associated menu.", "history": "Added in API level 21", "FullName": "public boolean hideOverflowMenu ()"}, "Toolbar(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Toolbar (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setNavigationContentDescription(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a content description string to set, or 0 to clear the description"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the navigation button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the navigation button.", "history": "Added in API level 21", "FullName": "public void setNavigationContentDescription (int resId)"}, "setTitleMarginStart(int)": {"Returns": [], "Parameters": [["int", "int: the starting title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getTitleMarginStart_E@"], "Permissions": [], "Description": "Sets the starting title margin in pixels.", "history": "Added in API level 24", "FullName": "public void setTitleMarginStart (int margin)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 21", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "isOverflowMenuShowing()": {"Returns": [["boolean", "true if the overflow menu is currently showing"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the overflow menu is currently showing. This may not reflect a pending show operation in progress.", "history": "Added in API level 21", "FullName": "public boolean isOverflowMenuShowing ()"}, "setTitleTextColor(int)": {"Returns": [], "Parameters": [["int", "int: The new text color in 0xAARRGGBB format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color of the title, if present.", "history": "Added in API level 21", "FullName": "public void setTitleTextColor (int color)"}, "setOverflowIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to set, may be null to clear the icon This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the overflow button.", "history": "Added in API level 23", "FullName": "public void setOverflowIcon (Drawable icon)"}, "setCollapseContentDescription(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a content description string to set, or 0 to clear the description"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the collapse button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the collapse button.", "history": "Added in API level 29", "FullName": "public void setCollapseContentDescription (int resId)"}, "getOverflowIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The overflow icon drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the overflow icon.", "history": "Added in API level 23", "FullName": "public Drawable getOverflowIcon ()"}, "getCurrentContentInsetRight()": {"Returns": [["int", "the current content inset right in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getContentInsetStartWithNavigation_E@", "@B_android#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the right side of the bar in the current toolbar configuration.", "history": "Added in API level 24", "FullName": "public int getCurrentContentInsetRight ()"}, "getCurrentContentInsetLeft()": {"Returns": [["int", "the current content inset left in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#getContentInsetStartWithNavigation_E@", "@B_android#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the left side of the bar in the current toolbar configuration.", "history": "Added in API level 24", "FullName": "public int getCurrentContentInsetLeft ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 21", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#Toolbar#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected void onRestoreInstanceState (Parcelable state)"}, "getLogoDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "A description of the logo"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the description of the toolbar's logo.", "history": "Added in API level 21", "FullName": "public CharSequence getLogoDescription ()"}, "getSubtitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The current subtitle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the subtitle of this toolbar.", "history": "Added in API level 21", "FullName": "public CharSequence getSubtitle ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected void onAttachedToWindow ()"}, "setContentInsetsAbsolute(int,int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar's left edge"], ["int", "int: Content inset for the toolbar's right edge"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "Added in API level 21", "FullName": "public void setContentInsetsAbsolute (int contentInsetLeft, int contentInsetRight)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#Toolbar#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "Added in API level 21", "FullName": "protected Toolbar.LayoutParams generateDefaultLayoutParams ()"}, "setContentInsetsAbsolute(int, int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar's left edge"], ["int", "int: Content inset for the toolbar's right edge"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#widget#Toolbar#getContentInsetStart_E@", "@B_android#widget#Toolbar#getContentInsetEnd_E@", "@B_android#widget#Toolbar#getContentInsetLeft_E@", "@B_android#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in API level 21", "FullName": "public void setContentInsetsAbsolute (int contentInsetLeft, int contentInsetRight)"}, "setLogo(int)": {"Returns": [], "Parameters": [["int", "int: ID of a drawable resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a logo drawable from a resource id. This drawable should generally take the place of title text. The logo cannot be clicked. Apps using a logo should also supply a description using @B_android#widget#Toolbar#setLogoDescription_E@.", "history": "Added in API level 21", "FullName": "public void setLogo (int resId)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.widget.Toolbar", "ClassDesc": "A standard toolbar for use within application content. A Toolbar is a generalization of @B_android#app#ActionBar_E@ for use within application layouts. While an action bar is traditionally part of an @B_android#app#Activity_E@ opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the @B_android#app#Activity#setActionBar_E@ method. Toolbar supports a more focused feature set than ActionBar. From start to end, a toolbar may contain a combination of the following optional elements: A navigation button. This may be an Up arrow, navigation menu toggle, close, collapse, done or another glyph of the app's choosing. This button should always be used to access other navigational destinations within the container of the Toolbar and its signified content or otherwise leave the current context signified by the Toolbar. The navigation button is vertically aligned within the Toolbar's @B_android#R#styleable#View_minHeight_E@, if set. A branded logo image. This may extend to the height of the bar and can be arbitrarily wide. A title and subtitle. The title should be a signpost for the Toolbar's current position in the navigation hierarchy and the content contained there. The subtitle, if present should indicate any extended information about the current content. If an app uses a logo image it should strongly consider omitting a title and subtitle. One or more custom views. The application may add arbitrary child views to the Toolbar. They will appear at this position within the layout. If a child view's @B_android#widget#Toolbar#LayoutParams_E@ indicates a @B_android#view#Gravity_E@ value of @B_android#view#Gravity#CENTER_HORIZONTAL_E@ the view will attempt to center within the available space remaining in the Toolbar after all other elements have been measured. An @B_android#widget#ActionMenuView_E@. The menu of actions will pin to the end of the Toolbar offering a few @B_android#R#styleable#View_minHeight_E@, if set. In modern Android UIs developers should lean more on a visually distinct color scheme for toolbars than on their application icon. The use of application icon plus title as a standard layout is discouraged on API 21 devices and newer."}