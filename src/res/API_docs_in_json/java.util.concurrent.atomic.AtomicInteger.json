{"Functions": {"getAndSet(int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final int getAndSet (int newValue)"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicInteger as an int. Equivalent to @B_java#util#concurrent#atomic#AtomicInteger#get_E@.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "getAndAccumulate(int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the update value"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final int getAndAccumulate (int x, IntBinaryOperator accumulatorFunction)"}, "getAndUpdate(java.util.function.IntUnaryOperator)": {"Returns": [["int", "the previous value"]], "Parameters": [["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final int getAndUpdate (IntUnaryOperator updateFunction)"}, "AtomicInteger(int)": {"Returns": [], "Parameters": [["int", "int: the initial value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicInteger with the given initial value.", "history": "Added in API level 1", "FullName": "public AtomicInteger (int initialValue)"}, "lazySet(int)": {"Returns": [], "Parameters": [["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (int newValue)"}, "accumulateAndGet(int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the update value"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final int accumulateAndGet (int x, IntBinaryOperator accumulatorFunction)"}, "set(int)": {"Returns": [], "Parameters": [["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets to the given value.", "history": "Added in API level 1", "FullName": "public final void set (int newValue)"}, "getAndDecrement()": {"Returns": [["int", "the previous value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value.", "history": "Added in API level 1", "FullName": "public final int getAndDecrement ()"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicInteger as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicInteger as a long after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "incrementAndGet()": {"Returns": [["int", "the updated value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value.", "history": "Added in API level 1", "FullName": "public final int incrementAndGet ()"}, "getAndAdd(int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value.", "history": "Added in API level 1", "FullName": "public final int getAndAdd (int delta)"}, "decrementAndGet()": {"Returns": [["int", "the updated value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value.", "history": "Added in API level 1", "FullName": "public final int decrementAndGet ()"}, "weakCompareAndSet(int, int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (int expect, int update)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current value.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "weakCompareAndSet(int,int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (int expect, int update)"}, "updateAndGet(java.util.function.IntUnaryOperator)": {"Returns": [["int", "the updated value"]], "Parameters": [["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final int updateAndGet (IntUnaryOperator updateFunction)"}, "get()": {"Returns": [["int", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value.", "history": "Added in API level 1", "FullName": "public final int get ()"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicInteger as a float after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "addAndGet(int)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value.", "history": "Added in API level 1", "FullName": "public final int addAndGet (int delta)"}, "getAndIncrement()": {"Returns": [["int", "the previous value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value.", "history": "Added in API level 1", "FullName": "public final int getAndIncrement ()"}, "compareAndSet(int,int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (int expect, int update)"}, "AtomicInteger()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicInteger with initial value 0.", "history": "Added in API level 1", "FullName": "public AtomicInteger ()"}, "compareAndSet(int, int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (int expect, int update)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.util.concurrent.atomic.AtomicInteger", "ClassDesc": "An int value that may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables. An AtomicInteger is used in applications such as atomically incremented counters, and cannot be used as a replacement for an @B_java#lang#Integer_E@. However, this class does extend Number to allow uniform access by tools and utilities that deal with numerically-based classes."}