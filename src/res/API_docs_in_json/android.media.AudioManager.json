{"Functions": {"isBluetoothScoOn()": {"Returns": [["boolean", "true if SCO is used for communications; false if otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether communications use Bluetooth SCO.", "history": "Added in API level 1", "FullName": "public boolean isBluetoothScoOn ()"}, "unloadSoundEffects()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unload Sound effects. This method can be called to free some memory when sound effects are disabled.", "history": "Added in API level 1", "FullName": "public void unloadSoundEffects ()"}, "setRingerMode(int)": {"Returns": [], "Parameters": [["int", "int: The ringer mode, one of @B_android#media#AudioManager#RINGER_MODE_NORMAL_E@, @B_android#media#AudioManager#RINGER_MODE_SILENT_E@, or @B_android#media#AudioManager#RINGER_MODE_VIBRATE_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getRingerMode_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Sets the ringer mode. Silent mode will mute the volume and will not vibrate. Vibrate mode will mute the volume and vibrate. Normal mode will be audible and may vibrate according to user settings. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. * From N onward, ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 1", "FullName": "public void setRingerMode (int ringerMode)"}, "setStreamMute(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The stream to be muted/unmuted."], ["boolean", "boolean: The required mute state: true for mute ON, false for mute OFF"]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Use @B_android#media#AudioManager#adjustStreamVolume_E@ with @B_android#media#AudioManager#ADJUST_MUTE_E@ or @B_android#media#AudioManager#ADJUST_UNMUTE_E@ instead. Mute or unmute an audio stream. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. This method was deprecated in API level 22. Prior to API level 22 this method had significantly different behavior and should be used carefully. The following applies only to pre-22 platforms: The mute command is protected against client process death: if a process with an active mute request on a stream dies, this stream will be unmuted automatically. The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received. For a better user experience, applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setStreamMute (int streamType, boolean state)"}, "getRouting(int)": {"Returns": [["int", "an audio route bit vector that can be compared with ROUTE_xxx bits"]], "Parameters": [["int", "int: audio mode to get route (e.g., MODE_RINGTONE)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead. Returns the current audio routing bit vector for a specified mode.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getRouting (int mode)"}, "setStreamVolume(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The stream whose volume index should be set."], ["int", "int: The volume index to set. See @B_android#media#AudioManager#getStreamMaxVolume_E@ for the largest valid value."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getStreamMaxVolume_E@", "@B_android#media#AudioManager#getStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Sets the volume index for a particular stream. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. From N onward, volume adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "added in API level 1", "FullName": "public void setStreamVolume (int streamType, int index, int flags)"}, "adjustSuggestedStreamVolume(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, @B_android#media#AudioManager#ADJUST_SAME_E@, @B_android#media#AudioManager#ADJUST_MUTE_E@, @B_android#media#AudioManager#ADJUST_UNMUTE_E@, or @B_android#media#AudioManager#ADJUST_TOGGLE_MUTE_E@."], ["int", "int: The stream type that will be used if there isn't a relevant stream. @B_android#media#AudioManager#USE_DEFAULT_STREAM_TYPE_E@ is valid here."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustVolume_E@", "@B_android#media#AudioManager#adjustStreamVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Adjusts the volume of the most relevant stream, or the given fallback stream. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@.", "history": "added in API level 1", "FullName": "public void adjustSuggestedStreamVolume (int direction, int suggestedStreamType, int flags)"}, "setMicrophoneMute(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set true to mute the microphone; false to turn mute off"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the microphone mute on or off. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "Added in API level 1", "FullName": "public void setMicrophoneMute (boolean on)"}, "startBluetoothSco()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#stopBluetoothSco_E@", "@B_android#media#AudioManager_E@"], "Permissions": ["@B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@"], "Description": "Start bluetooth SCO audio connection. Requires Permission: @B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@. This method can be used by applications wanting to send and received audio to/from a bluetooth SCO headset while the phone is not in call. As the SCO connection establishment can take several seconds, applications should not rely on the connection to be available when the method returns but instead register to receive the intent @B_android#media#AudioManager#ACTION_SCO_AUDIO_STATE_UPDATED_E@ and wait for the state to be @B_android#media#AudioManager#SCO_AUDIO_STATE_CONNECTED_E@. As the ACTION_SCO_AUDIO_STATE_UPDATED intent is sticky, the application can check the SCO audio state before calling startBluetoothSco() by reading the intent returned by the receiver registration. If the state is already CONNECTED, no state change will be received via the intent after calling startBluetoothSco(). It is however useful to call startBluetoothSco() so that the connection stays active in case the current initiator stops the connection. Unless the connection is already active as described above, the state will always transition from DISCONNECTED to CONNECTING and then either to CONNECTED if the connection succeeds or back to DISCONNECTED if the connection fails (e.g no headset is connected). When finished with the SCO connection or if the establishment fails, the application must call @B_android#media#AudioManager#stopBluetoothSco_E@ to clear the request and turn down the bluetooth connection. Even if a SCO connection is established, the following restrictions apply on audio output streams so that they can be routed to SCO headset: the stream type must be @B_android#media#AudioManager#STREAM_VOICE_CALL_E@ the format must be mono the sampling must be 16kHz or 8kHz The following restrictions apply on input streams: the format must be mono the sampling must be 8kHz Note that the phone application always has the priority on the usage of the SCO connection for telephony. If this method is called while the phone is in call it will be ignored. Similarly, if a call is received or sent while an application is using the SCO connection, the connection will be lost for the application and NOT returned automatically when the call ends. NOTE: up to and including API version @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR1_E@, this method initiates a virtual voice call to the bluetooth headset. After API version @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR2_E@ only a raw SCO audio connection is established.", "history": "Added in API level 8", "FullName": "public void startBluetoothSco ()"}, "isBluetoothScoAvailableOffCall()": {"Returns": [["boolean", "true if bluetooth SCO can be used for audio when not in call false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#startBluetoothSco_E@"], "Permissions": [], "Description": "Indicates if current platform supports use of SCO for off call use cases. Application wanted to use bluetooth SCO audio when the phone is not in call must first call this method to make sure that the platform supports this feature.", "history": "Added in API level 8", "FullName": "public boolean isBluetoothScoAvailableOffCall ()"}, "isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)": {"Returns": [["boolean", "true if the given audio format can be offloaded."]], "Parameters": [["@B_android#media#AudioFormat_E@", "AudioFormat: the audio format (codec, sample rate, channels) being checked. This value must never be null."], ["@B_android#media#AudioAttributes_E@", "AudioAttributes: the @B_android#media#AudioAttributes_E@ to be used for playback This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether offloaded playback of an audio format is supported on the device. Offloaded playback is the feature where the decoding and playback of an audio stream is not competing with other software resources. In general, it is supported by dedicated hardware, such as audio DSPs. Note that this query only provides information about the support of an audio format, it does not indicate whether the resources necessary for the offloaded playback are available at that instant.", "history": "Added in API level 29", "FullName": "public static boolean isOffloadedPlaybackSupported (AudioFormat format, AudioAttributes attributes)"}, "getStreamMinVolume(int)": {"Returns": [["int", "The minimum valid volume index for the stream."]], "Parameters": [["int", "int: The stream type whose minimum volume index is returned. Must be one of @B_android#media#AudioManager#STREAM_VOICE_CALL_E@, @B_android#media#AudioManager#STREAM_SYSTEM_E@, @B_android#media#AudioManager#STREAM_RING_E@, @B_android#media#AudioManager#STREAM_MUSIC_E@, @B_android#media#AudioManager#STREAM_ALARM_E@, @B_android#media#AudioManager#STREAM_NOTIFICATION_E@, @B_android#media#AudioManager#STREAM_DTMF_E@ or @B_android#media#AudioManager#STREAM_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getStreamVolume_E@"], "Permissions": [], "Description": "Returns the minimum volume index for a particular stream.", "history": "Added in API level 28", "FullName": "public int getStreamMinVolume (int streamType)"}, "getDevices(int)": {"Returns": [["@B_android#media#AudioDeviceInfo_E@", "A (possibly zero-length) array of AudioDeviceInfo objects."]], "Parameters": [["int", "int: A set of bitflags specifying the criteria to test."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager_E@"], "Permissions": [], "Description": "Returns an array of @B_android#media#AudioDeviceInfo_E@ objects corresponding to the audio devices currently connected to the system and meeting the criteria specified in the flags parameter.", "history": "Added in API level 23", "FullName": "public AudioDeviceInfo[] getDevices (int flags)"}, "isMusicActive()": {"Returns": [["boolean", "true if any music tracks are active."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether any music is active.", "history": "Added in API level 1", "FullName": "public boolean isMusicActive ()"}, "setStreamMute(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The stream to be muted/unmuted."], ["boolean", "boolean: The required mute state: true for mute ON, false for mute OFF"]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Use @B_android#media#AudioManager#adjustStreamVolume_E@ with @B_android#media#AudioManager#ADJUST_MUTE_E@ or @B_android#media#AudioManager#ADJUST_UNMUTE_E@ instead. Mute or unmute an audio stream. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. This method was deprecated in API level 22. Prior to API level 22 this method had significantly different behavior and should be used carefully. The following applies only to pre-22 platforms: The mute command is protected against client process death: if a process with an active mute request on a stream dies, this stream will be unmuted automatically. The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received. For a better user experience, applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate.", "history": "added in API level 1", "FullName": "public void setStreamMute (int streamType, boolean state)"}, "playSoundEffect(int,float)": {"Returns": [], "Parameters": [["int", "int: The type of sound effect. One of @B_android#media#AudioManager#FX_KEY_CLICK_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_UP_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_DOWN_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_LEFT_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_RIGHT_E@, @B_android#media#AudioManager#FX_KEYPRESS_STANDARD_E@, @B_android#media#AudioManager#FX_KEYPRESS_SPACEBAR_E@, @B_android#media#AudioManager#FX_KEYPRESS_DELETE_E@, @B_android#media#AudioManager#FX_KEYPRESS_RETURN_E@, @B_android#media#AudioManager#FX_KEYPRESS_INVALID_E@,"], ["float", "float: Sound effect volume. The volume value is a raw scalar so UI controls should be scaled logarithmically. If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used. NOTE: This version is for applications that have their own settings panel for enabling and controlling volume."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays a sound effect (Key clicks, lid open/close...)", "history": "Added in API level 3", "FullName": "public void playSoundEffect (int effectType, float volume)"}, "isVolumeFixed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates if the device implements a fixed volume policy. Some devices may not have volume control and may operate at a fixed volume, and may not enable muting or changing the volume of audio streams. This method will return true on such devices. The following APIs have no effect when volume is fixed: @B_android#media#AudioManager#adjustVolume_E@ @B_android#media#AudioManager#adjustSuggestedStreamVolume_E@ @B_android#media#AudioManager#adjustStreamVolume_E@ @B_android#media#AudioManager#setStreamVolume_E@ @B_android#media#AudioManager#setRingerMode_E@ @B_android#media#AudioManager#setStreamSolo_E@ @B_android#media#AudioManager#setStreamMute_E@", "history": "Added in API level 21", "FullName": "public boolean isVolumeFixed ()"}, "shouldVibrate(int)": {"Returns": [["boolean", "Whether the type should vibrate at the instant this method is called."]], "Parameters": [["int", "int: The type of vibrate. One of @B_android#media#AudioManager#VIBRATE_TYPE_NOTIFICATION_E@ or @B_android#media#AudioManager#VIBRATE_TYPE_RINGER_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#setVibrateSetting_E@", "@B_android#media#AudioManager#getVibrateSetting_E@"], "Permissions": [], "Description": "Applications should maintain their own vibrate policy based on current ringer mode that can be queried via @B_android#media#AudioManager#getRingerMode_E@. Returns whether a particular type should vibrate according to user settings and the current ringer mode. This shouldn't be needed by most clients that use notifications to vibrate. The notification manager will not vibrate if the policy doesn't allow it, so the client should always set a vibrate pattern and let the notification manager control whether or not to actually vibrate.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean shouldVibrate (int vibrateType)"}, "isStreamMute(int)": {"Returns": [["boolean", "The mute state for the given stream."]], "Parameters": [["int", "int: The stream to get mute state for."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustStreamVolume_E@"], "Permissions": [], "Description": "Returns the current mute state for a particular stream.", "history": "Added in API level 23", "FullName": "public boolean isStreamMute (int streamType)"}, "setVibrateSetting(int,int)": {"Returns": [], "Parameters": [["int", "int: The type of vibrate. One of @B_android#media#AudioManager#VIBRATE_TYPE_NOTIFICATION_E@ or @B_android#media#AudioManager#VIBRATE_TYPE_RINGER_E@."], ["int", "int: The vibrate setting, one of @B_android#media#AudioManager#VIBRATE_SETTING_ON_E@, @B_android#media#AudioManager#VIBRATE_SETTING_OFF_E@, or @B_android#media#AudioManager#VIBRATE_SETTING_ONLY_SILENT_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getVibrateSetting_E@", "@B_android#media#AudioManager#shouldVibrate_E@"], "Permissions": [], "Description": "Applications should maintain their own vibrate policy based on current ringer mode that can be queried via @B_android#media#AudioManager#getRingerMode_E@. Sets the setting for when the vibrate type should vibrate. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setVibrateSetting (int vibrateType, int vibrateSetting)"}, "setStreamSolo(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The stream to be soloed/unsoloed."], ["boolean", "boolean: The required solo state: true for solo ON, false for solo OFF"]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Do not use. If you need exclusive audio playback use @B_android#media#AudioManager#requestAudioFocus_E@. Solo or unsolo a particular stream. Do not use. This method has been deprecated and is now a no-op. @B_android#media#AudioManager#requestAudioFocus_E@ should be used for exclusive audio playback.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setStreamSolo (int streamType, boolean state)"}, "setRouting(int,int,int)": {"Returns": [], "Parameters": [["int", "int: audio mode to change route. E.g., MODE_RINGTONE."], ["int", "int: bit vector of routes requested, created from one or more of ROUTE_xxx types. Set bits indicate that route should be on"], ["int", "int: bit vector of routes to change, created from one or more of ROUTE_xxx types. Unset bits indicate the route should be left unchanged"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. Sets the audio routing for a specified mode", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setRouting (int mode, int routes, int mask)"}, "getStreamVolumeDb(int,int,int)": {"Returns": [["float", "a volume expressed in dB. A negative value indicates the audio signal is attenuated. A typical maximum value at the maximum volume index is 0 dB (no attenuation nor amplification). Muting is reflected by a value of @B_java#lang#Float#NEGATIVE_INFINITY_E@."]], "Parameters": [["int", "int: stream type for which the volume is queried. Value is @B_android#media#AudioManager#STREAM_VOICE_CALL_E@, @B_android#media#AudioManager#STREAM_SYSTEM_E@, @B_android#media#AudioManager#STREAM_RING_E@, @B_android#media#AudioManager#STREAM_MUSIC_E@, @B_android#media#AudioManager#STREAM_ALARM_E@, @B_android#media#AudioManager#STREAM_NOTIFICATION_E@, @B_android#media#AudioManager#STREAM_DTMF_E@, or @B_android#media#AudioManager#STREAM_ACCESSIBILITY_E@"], ["int", "int: the volume index for which the volume is queried. The index value must be between the minimum and maximum index values for the given stream type (see @B_android#media#AudioManager#getStreamMinVolume_E@ and @B_android#media#AudioManager#getStreamMaxVolume_E@)."], ["int", "int: the type of audio output device for which volume is queried. Value is @B_android#media#AudioDeviceInfo#TYPE_BUILTIN_EARPIECE_E@, @B_android#media#AudioDeviceInfo#TYPE_BUILTIN_SPEAKER_E@, @B_android#media#AudioDeviceInfo#TYPE_WIRED_HEADSET_E@, @B_android#media#AudioDeviceInfo#TYPE_WIRED_HEADPHONES_E@, @B_android#media#AudioDeviceInfo#TYPE_BLUETOOTH_SCO_E@, @B_android#media#AudioDeviceInfo#TYPE_BLUETOOTH_A2DP_E@, @B_android#media#AudioDeviceInfo#TYPE_HDMI_E@, @B_android#media#AudioDeviceInfo#TYPE_DOCK_E@, @B_android#media#AudioDeviceInfo#TYPE_USB_ACCESSORY_E@, @B_android#media#AudioDeviceInfo#TYPE_USB_DEVICE_E@, @B_android#media#AudioDeviceInfo#TYPE_USB_HEADSET_E@, @B_android#media#AudioDeviceInfo#TYPE_TELEPHONY_E@, @B_android#media#AudioDeviceInfo#TYPE_LINE_ANALOG_E@, @B_android#media#AudioDeviceInfo#TYPE_HDMI_ARC_E@, @B_android#media#AudioDeviceInfo#TYPE_LINE_DIGITAL_E@, @B_android#media#AudioDeviceInfo#TYPE_FM_E@, @B_android#media#AudioDeviceInfo#TYPE_AUX_LINE_E@, @B_android#media#AudioDeviceInfo#TYPE_IP_E@, @B_android#media#AudioDeviceInfo#TYPE_BUS_E@, or @B_android#media#AudioDeviceInfo#TYPE_HEARING_AID_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the volume in dB (decibel) for the given stream type at the given volume index, on the given type of audio output device.", "history": "Added in API level 28", "FullName": "public float getStreamVolumeDb (int streamType, int index, int deviceType)"}, "getMode()": {"Returns": [["int", "the current audio mode (@B_android#media#AudioManager#MODE_NORMAL_E@, @B_android#media#AudioManager#MODE_RINGTONE_E@, @B_android#media#AudioManager#MODE_IN_CALL_E@ or @B_android#media#AudioManager#MODE_IN_COMMUNICATION_E@). Returns the current current audio state from the HAL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current audio mode.", "history": "Added in API level 1", "FullName": "public int getMode ()"}, "generateAudioSessionId()": {"Returns": [["int", "a new unclaimed and unused audio session identifier, or @B_android#media#AudioManager#ERROR_E@ when the system failed to generate a new session, a condition in which audio playback or recording will subsequently fail as well."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a new audio session identifier not associated with any player or effect. An audio session identifier is a system wide unique identifier for a set of audio streams (one or more mixed together). The primary use of the audio session ID is to associate audio effects to audio players, such as @B_android#media#MediaPlayer_E@ or @B_android#media#AudioTrack_E@: all audio effects sharing the same audio session ID will be applied to the mixed audio content of the players that share the same audio session. This method can for instance be used when creating one of the @B_android#media#audiofx#AudioEffect_E@ objects to define the audio session of the effect, or to specify a session for a speech synthesis utterance in @B_android#speech#tts#TextToSpeech#Engine_E@.", "history": "Added in API level 21", "FullName": "public int generateAudioSessionId ()"}, "isWiredHeadsetOn()": {"Returns": [["boolean", "true if a wired headset is connected. false if otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#AudioManager#getDevices_E@ instead to list available audio devices. Checks whether a wired headset is connected or not. This is not a valid indication that audio playback is actually over the wired headset as audio routing depends on other conditions.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isWiredHeadsetOn ()"}, "setSpeakerphoneOn(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set true to turn on speakerphone; false to turn it off"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the speakerphone on or off. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "Added in API level 1", "FullName": "public void setSpeakerphoneOn (boolean on)"}, "setBluetoothScoOn(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set true to use bluetooth SCO for communications; false to not use bluetooth SCO for communications"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request use of Bluetooth SCO headset for communications. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "Added in API level 1", "FullName": "public void setBluetoothScoOn (boolean on)"}, "getAllowedCapturePolicy()": {"Returns": [["int", "the capture policy set by @B_android#media#AudioManager#setAllowedCapturePolicy_E@ or the default if it was not called. Value is @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_ALL_E@, @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM_E@, or @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_NONE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the capture policy.", "history": "Added in API level 29", "FullName": "public int getAllowedCapturePolicy ()"}, "registerMediaButtonEventReceiver(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: target that will receive media button intents. The PendingIntent will be sent an @B_android#content#Intent#ACTION_MEDIA_BUTTON_E@ event when a media button action occurs, with @B_android#content#Intent#EXTRA_KEY_EVENT_E@ added and holding the key code of the media button that was pressed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession#setMediaButtonReceiver_E@ instead. Register a component to be the sole receiver of MEDIA_BUTTON intents. This is like @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@, but allows the buttons to go to any PendingIntent. Note that you should only use this form if you know you will continue running for the full time until unregistering the PendingIntent.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void registerMediaButtonEventReceiver (PendingIntent eventReceiver)"}, "unregisterRemoteControlClient(android.media.RemoteControlClient)": {"Returns": [], "Parameters": [["@B_android#media#RemoteControlClient_E@", "RemoteControlClient: The remote control client to unregister."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#registerRemoteControlClient_E@"], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession_E@ instead. Unregisters the remote control client that was providing information to display on the remote controls.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void unregisterRemoteControlClient (RemoteControlClient rcClient)"}, "playSoundEffect(int)": {"Returns": [], "Parameters": [["int", "int: The type of sound effect. One of @B_android#media#AudioManager#FX_KEY_CLICK_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_UP_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_DOWN_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_LEFT_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_RIGHT_E@, @B_android#media#AudioManager#FX_KEYPRESS_STANDARD_E@, @B_android#media#AudioManager#FX_KEYPRESS_SPACEBAR_E@, @B_android#media#AudioManager#FX_KEYPRESS_DELETE_E@, @B_android#media#AudioManager#FX_KEYPRESS_RETURN_E@, @B_android#media#AudioManager#FX_KEYPRESS_INVALID_E@, NOTE: This version uses the UI settings to determine whether sounds are heard or not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays a sound effect (Key clicks, lid open/close...)", "history": "Added in API level 1", "FullName": "public void playSoundEffect (int effectType)"}, "unregisterMediaButtonEventReceiver(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: same PendingIntent that was registed with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession_E@ instead. Unregister the receiver of MEDIA_BUTTON intents.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public void unregisterMediaButtonEventReceiver (PendingIntent eventReceiver)"}, "registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#AudioManager#AudioPlaybackCallback_E@", "AudioManager.AudioPlaybackCallback: non-null callback to register This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ object for the thread on which to execute the callback. If null, the @B_android#os#Handler_E@ associated with the main @B_android#os#Looper_E@ will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified of audio playback changes through @B_android#media#AudioManager#AudioPlaybackCallback_E@", "history": "Added in API level 26", "FullName": "public void registerAudioPlaybackCallback (AudioManager.AudioPlaybackCallback cb, Handler handler)"}, "setAllowedCapturePolicy(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_ALL_E@, @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM_E@, @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_NONE_E@. Value is @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_ALL_E@, @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM_E@, or @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_NONE_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is not a valid value."]], "SeeAlso": [], "Permissions": [], "Description": "Specifies whether the audio played by this app may or may not be captured by other apps or the system. The default is @B_android#media#AudioAttributes#ALLOW_CAPTURE_BY_ALL_E@. There are multiple ways to set this policy: for each track independently, see @B_android#media#AudioAttributes#Builder#setAllowedCapturePolicy_E@ application-wide at runtime, with this method application-wide at build time, see allowAudioPlaybackCapture in the application manifest. The most restrictive policy is always applied. See @B_android#media#AudioPlaybackCaptureConfiguration_E@ for more details on which audio signals can be captured.", "history": "Added in API level 29", "FullName": "public void setAllowedCapturePolicy (int capturePolicy)"}, "registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#AudioManager#AudioRecordingCallback_E@", "AudioManager.AudioRecordingCallback: non-null callback to register This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ object for the thread on which to execute the callback. If null, the @B_android#os#Handler_E@ associated with the main @B_android#os#Looper_E@ will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be notified of audio recording changes through @B_android#media#AudioManager#AudioRecordingCallback_E@", "history": "Added in API level 24", "FullName": "public void registerAudioRecordingCallback (AudioManager.AudioRecordingCallback cb, Handler handler)"}, "playSoundEffect(int, float)": {"Returns": [], "Parameters": [["int", "int: The type of sound effect. One of @B_android#media#AudioManager#FX_KEY_CLICK_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_UP_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_DOWN_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_LEFT_E@, @B_android#media#AudioManager#FX_FOCUS_NAVIGATION_RIGHT_E@, @B_android#media#AudioManager#FX_KEYPRESS_STANDARD_E@, @B_android#media#AudioManager#FX_KEYPRESS_SPACEBAR_E@, @B_android#media#AudioManager#FX_KEYPRESS_DELETE_E@, @B_android#media#AudioManager#FX_KEYPRESS_RETURN_E@, @B_android#media#AudioManager#FX_KEYPRESS_INVALID_E@,"], ["float", "float: Sound effect volume. The volume value is a raw scalar so UI controls should be scaled logarithmically. If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used. NOTE: This version is for applications that have their own settings panel for enabling and controlling volume."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays a sound effect (Key clicks, lid open/close...)", "history": "added in API level 3", "FullName": "public void playSoundEffect (int effectType, float volume)"}, "abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)": {"Returns": [["int", "@B_android#media#AudioManager#AUDIOFOCUS_REQUEST_FAILED_E@ or @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_GRANTED_E@"]], "Parameters": [["@B_android#media#AudioManager#OnAudioFocusChangeListener_E@", "AudioManager.OnAudioFocusChangeListener: the listener with which focus was requested."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#media#AudioManager#abandonAudioFocusRequest_E@ Abandon audio focus. Causes the previous focus owner, if any, to receive focus.", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public int abandonAudioFocus (AudioManager.OnAudioFocusChangeListener l)"}, "unregisterRemoteController(android.media.RemoteController)": {"Returns": [], "Parameters": [["@B_android#media#RemoteController_E@", "RemoteController: the object to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSessionManager#removeOnActiveSessionsChangedListener_E@ instead. Unregisters a @B_android#media#RemoteController_E@, causing it to no longer receive media metadata and playback state information, and no longer be capable of controlling playback.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public void unregisterRemoteController (RemoteController rctlr)"}, "unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)": {"Returns": [], "Parameters": [["@B_android#media#AudioDeviceCallback_E@", "AudioDeviceCallback: The @B_android#media#AudioDeviceCallback_E@ object that was previously registered with @B_android#media#AudioManager#registerAudioDeviceCallback_E@ to be unregistered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters an @B_android#media#AudioDeviceCallback_E@ object which has been previously registered to receive notifications of changes to the set of connected audio devices.", "history": "Added in API level 23", "FullName": "public void unregisterAudioDeviceCallback (AudioDeviceCallback callback)"}, "setVibrateSetting(int, int)": {"Returns": [], "Parameters": [["int", "int: The type of vibrate. One of @B_android#media#AudioManager#VIBRATE_TYPE_NOTIFICATION_E@ or @B_android#media#AudioManager#VIBRATE_TYPE_RINGER_E@."], ["int", "int: The vibrate setting, one of @B_android#media#AudioManager#VIBRATE_SETTING_ON_E@, @B_android#media#AudioManager#VIBRATE_SETTING_OFF_E@, or @B_android#media#AudioManager#VIBRATE_SETTING_ONLY_SILENT_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getVibrateSetting_E@", "@B_android#media#AudioManager#shouldVibrate_E@"], "Permissions": [], "Description": "Applications should maintain their own vibrate policy based on current ringer mode that can be queried via @B_android#media#AudioManager#getRingerMode_E@. Sets the setting for when the vibrate type should vibrate. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "added in API level 1", "FullName": "public void setVibrateSetting (int vibrateType, int vibrateSetting)"}, "adjustStreamVolume(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The stream type to adjust. One of @B_android#media#AudioManager#STREAM_VOICE_CALL_E@, @B_android#media#AudioManager#STREAM_SYSTEM_E@, @B_android#media#AudioManager#STREAM_RING_E@, @B_android#media#AudioManager#STREAM_MUSIC_E@, @B_android#media#AudioManager#STREAM_ALARM_E@ or @B_android#media#AudioManager#STREAM_ACCESSIBILITY_E@."], ["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, or @B_android#media#AudioManager#ADJUST_SAME_E@."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@"], "Permissions": [], "Description": "Adjusts the volume of a particular stream by one step in a direction. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.", "history": "added in API level 1", "FullName": "public void adjustStreamVolume (int streamType, int direction, int flags)"}, "adjustVolume(int,int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, @B_android#media#AudioManager#ADJUST_SAME_E@, @B_android#media#AudioManager#ADJUST_MUTE_E@, @B_android#media#AudioManager#ADJUST_UNMUTE_E@, or @B_android#media#AudioManager#ADJUST_TOGGLE_MUTE_E@."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustSuggestedStreamVolume_E@", "@B_android#media#AudioManager#adjustStreamVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Adjusts the volume of the most relevant stream. For example, if a call is active, it will have the highest priority regardless of if the in-call screen is showing. Another example, if music is playing in the background and a call is not active, the music stream will be adjusted. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@.", "history": "Added in API level 1", "FullName": "public void adjustVolume (int direction, int flags)"}, "requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)": {"Returns": [["int", "@B_android#media#AudioManager#AUDIOFOCUS_REQUEST_FAILED_E@ or @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_GRANTED_E@"]], "Parameters": [["@B_android#media#AudioManager#OnAudioFocusChangeListener_E@", "AudioManager.OnAudioFocusChangeListener: the listener to be notified of audio focus changes"], ["int", "int: the main audio stream type affected by the focus request"], ["int", "int: use @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_E@ to indicate this focus request is temporary, and focus will be abandonned shortly. Examples of transient requests are for the playback of driving directions, or notifications sounds. Use @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@ to indicate also that it's ok for the previous focus owner to keep playing if it ducks its audio output. Alternatively use @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_E@ for a temporary request that benefits from the system not playing disruptive sounds like notifications, for usecases such as voice memo recording, or speech recognition. Use @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@ for a focus request of unknown duration such as the playback of a song or a video."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#media#AudioManager#requestAudioFocus_E@ Request audio focus. Send a request to obtain the audio focus", "history": "Added in API level 8 Deprecated in API level 26", "FullName": "public int requestAudioFocus (AudioManager.OnAudioFocusChangeListener l, int streamType, int durationHint)"}, "stopBluetoothSco()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#startBluetoothSco_E@"], "Permissions": ["@B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@"], "Description": "Stop bluetooth SCO audio connection. Requires Permission: @B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@. This method must be called by applications having requested the use of bluetooth SCO audio with @B_android#media#AudioManager#startBluetoothSco_E@ when finished with the SCO connection or if connection fails.", "history": "Added in API level 8", "FullName": "public void stopBluetoothSco ()"}, "getRingerMode()": {"Returns": [["int", "The current ringtone mode, one of @B_android#media#AudioManager#RINGER_MODE_NORMAL_E@, @B_android#media#AudioManager#RINGER_MODE_SILENT_E@, or @B_android#media#AudioManager#RINGER_MODE_VIBRATE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#setRingerMode_E@"], "Permissions": [], "Description": "Returns the current ringtone mode.", "history": "Added in API level 1", "FullName": "public int getRingerMode ()"}, "getStreamVolumeDb(int, int, int)": {"Returns": [["float", "a volume expressed in dB. A negative value indicates the audio signal is attenuated. A typical maximum value at the maximum volume index is 0 dB (no attenuation nor amplification). Muting is reflected by a value of @B_java#lang#Float#NEGATIVE_INFINITY_E@."]], "Parameters": [["int", "int: stream type for which the volume is queried.Value is STREAM_VOICE_CALL, STREAM_SYSTEM, STREAM_RING, STREAM_MUSIC, STREAM_ALARM, STREAM_NOTIFICATION, STREAM_DTMF or STREAM_ACCESSIBILITY."], ["int", "int: the volume index for which the volume is queried. The index value must be between the minimum and maximum index values for the given stream type (see @B_android#media#AudioManager#getStreamMinVolume_E@ and @B_android#media#AudioManager#getStreamMaxVolume_E@)."], ["int", "int: the type of audio output device for which volume is queried.Value is TYPE_BUILTIN_EARPIECE, TYPE_BUILTIN_SPEAKER, TYPE_WIRED_HEADSET, TYPE_WIRED_HEADPHONES, TYPE_BLUETOOTH_SCO, TYPE_BLUETOOTH_A2DP, TYPE_HDMI, TYPE_DOCK, TYPE_USB_ACCESSORY, TYPE_USB_DEVICE, TYPE_USB_HEADSET, TYPE_TELEPHONY, TYPE_LINE_ANALOG, TYPE_HDMI_ARC, TYPE_LINE_DIGITAL, TYPE_FM, TYPE_AUX_LINE, TYPE_IP, TYPE_BUS or TYPE_HEARING_AID."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the volume in dB (decibel) for the given stream type at the given volume index, on the given type of audio output device.", "history": "added in API level 28", "FullName": "public float getStreamVolumeDb (int streamType, int index, int deviceType)"}, "getActivePlaybackConfigurations()": {"Returns": [["@B_java#util#List_E@", "a non-null list of playback configurations. An empty list indicates there is no playback active when queried."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioPlaybackConfiguration_E@"], "Permissions": [], "Description": "Returns the current active audio playback configurations of the device", "history": "Added in API level 26", "FullName": "public List<AudioPlaybackConfiguration> getActivePlaybackConfigurations ()"}, "setRouting(int, int, int)": {"Returns": [], "Parameters": [["int", "int: audio mode to change route. E.g., MODE_RINGTONE."], ["int", "int: bit vector of routes requested, created from one or more of ROUTE_xxx types. Set bits indicate that route should be on"], ["int", "int: bit vector of routes to change, created from one or more of ROUTE_xxx types. Unset bits indicate the route should be left unchanged"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. Sets the audio routing for a specified mode", "history": "added in API level 1", "FullName": "public void setRouting (int mode, int routes, int mask)"}, "getVibrateSetting(int)": {"Returns": [["int", "The vibrate setting, one of @B_android#media#AudioManager#VIBRATE_SETTING_ON_E@, @B_android#media#AudioManager#VIBRATE_SETTING_OFF_E@, or @B_android#media#AudioManager#VIBRATE_SETTING_ONLY_SILENT_E@."]], "Parameters": [["int", "int: The type of vibrate. One of @B_android#media#AudioManager#VIBRATE_TYPE_NOTIFICATION_E@ or @B_android#media#AudioManager#VIBRATE_TYPE_RINGER_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#setVibrateSetting_E@", "@B_android#media#AudioManager#shouldVibrate_E@"], "Permissions": [], "Description": "Applications should maintain their own vibrate policy based on current ringer mode that can be queried via @B_android#media#AudioManager#getRingerMode_E@. Returns whether the user's vibrate setting for a vibrate type. This shouldn't be needed by most clients that want to vibrate, instead see @B_android#media#AudioManager#shouldVibrate_E@.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public int getVibrateSetting (int vibrateType)"}, "adjustSuggestedStreamVolume(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, @B_android#media#AudioManager#ADJUST_SAME_E@, @B_android#media#AudioManager#ADJUST_MUTE_E@, @B_android#media#AudioManager#ADJUST_UNMUTE_E@, or @B_android#media#AudioManager#ADJUST_TOGGLE_MUTE_E@."], ["int", "int: The stream type that will be used if there isn't a relevant stream. @B_android#media#AudioManager#USE_DEFAULT_STREAM_TYPE_E@ is valid here."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustVolume_E@", "@B_android#media#AudioManager#adjustStreamVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Adjusts the volume of the most relevant stream, or the given fallback stream. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@.", "history": "Added in API level 1", "FullName": "public void adjustSuggestedStreamVolume (int direction, int suggestedStreamType, int flags)"}, "registerRemoteControlClient(android.media.RemoteControlClient)": {"Returns": [], "Parameters": [["@B_android#media#RemoteControlClient_E@", "RemoteControlClient: The remote control client from which remote controls will receive information to display."]], "Throws": [], "SeeAlso": ["@B_android#media#RemoteControlClient_E@"], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession_E@ instead. Registers the remote control client for providing information to display on the remote controls.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void registerRemoteControlClient (RemoteControlClient rcClient)"}, "isMicrophoneMute()": {"Returns": [["boolean", "true if microphone is muted, false if it's not"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the microphone mute is on or off.", "history": "Added in API level 1", "FullName": "public boolean isMicrophoneMute ()"}, "adjustStreamVolume(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The stream type to adjust. One of @B_android#media#AudioManager#STREAM_VOICE_CALL_E@, @B_android#media#AudioManager#STREAM_SYSTEM_E@, @B_android#media#AudioManager#STREAM_RING_E@, @B_android#media#AudioManager#STREAM_MUSIC_E@, @B_android#media#AudioManager#STREAM_ALARM_E@ or @B_android#media#AudioManager#STREAM_ACCESSIBILITY_E@."], ["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, or @B_android#media#AudioManager#ADJUST_SAME_E@."], ["int", "int: One or more flags."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the adjustment triggers a Do Not Disturb change and the caller is not granted notification policy access."]], "SeeAlso": ["@B_android#media#AudioManager#adjustVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@"], "Permissions": [], "Description": "Adjusts the volume of a particular stream by one step in a direction. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. From N onward, ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 1", "FullName": "public void adjustStreamVolume (int streamType, int direction, int flags)"}, "getActiveRecordingConfigurations()": {"Returns": [["@B_java#util#List_E@", "a non-null list of recording configurations. An empty list indicates there is no recording active when queried."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#AudioRecordingConfiguration_E@"], "Permissions": [], "Description": "Returns the current active audio recording configurations of the device.", "history": "Added in API level 24", "FullName": "public List<AudioRecordingConfiguration> getActiveRecordingConfigurations ()"}, "isSpeakerphoneOn()": {"Returns": [["boolean", "true if speakerphone is on, false if it's off"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the speakerphone is on or off.", "history": "Added in API level 1", "FullName": "public boolean isSpeakerphoneOn ()"}, "setStreamSolo(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The stream to be soloed/unsoloed."], ["boolean", "boolean: The required solo state: true for solo ON, false for solo OFF"]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Do not use. If you need exclusive audio playback use @B_android#media#AudioManager#requestAudioFocus_E@. Solo or unsolo a particular stream. Do not use. This method has been deprecated and is now a no-op. @B_android#media#AudioManager#requestAudioFocus_E@ should be used for exclusive audio playback.", "history": "added in API level 1", "FullName": "public void setStreamSolo (int streamType, boolean state)"}, "getStreamVolume(int)": {"Returns": [["int", "The current volume index for the stream."]], "Parameters": [["int", "int: The stream type whose volume index is returned."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getStreamMaxVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@"], "Permissions": [], "Description": "Returns the current volume index for a particular stream.", "history": "Added in API level 1", "FullName": "public int getStreamVolume (int streamType)"}, "dispatchMediaKeyEvent(android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: a @B_android#view#KeyEvent_E@ instance whose key code is one of @B_android#view#KeyEvent#KEYCODE_MUTE_E@, @B_android#view#KeyEvent#KEYCODE_HEADSETHOOK_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PLAY_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PAUSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_STOP_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_NEXT_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_PREVIOUS_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_REWIND_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_RECORD_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_FAST_FORWARD_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_CLOSE_E@, @B_android#view#KeyEvent#KEYCODE_MEDIA_EJECT_E@, or @B_android#view#KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a simulated key event for a media button. To simulate a key press, you must first send a KeyEvent built with a @B_android#view#KeyEvent#ACTION_DOWN_E@ action, then another event with the @B_android#view#KeyEvent#ACTION_UP_E@ action. The key event will be sent to the current media key event consumer which registered with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@.", "history": "Added in API level 19", "FullName": "public void dispatchMediaKeyEvent (KeyEvent keyEvent)"}, "setBluetoothA2dpOn(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set true to route A2DP audio to/from Bluetooth headset; false disable A2DP audio"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not use.", "history": "Added in API level 3 Deprecated in API level 15", "FullName": "public void setBluetoothA2dpOn (boolean on)"}, "adjustVolume(int, int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume. One of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, @B_android#media#AudioManager#ADJUST_SAME_E@, @B_android#media#AudioManager#ADJUST_MUTE_E@, @B_android#media#AudioManager#ADJUST_UNMUTE_E@, or @B_android#media#AudioManager#ADJUST_TOGGLE_MUTE_E@."], ["int", "int: One or more flags."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#adjustSuggestedStreamVolume_E@", "@B_android#media#AudioManager#adjustStreamVolume_E@", "@B_android#media#AudioManager#setStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Adjusts the volume of the most relevant stream. For example, if a call is active, it will have the highest priority regardless of if the in-call screen is showing. Another example, if music is playing in the background and a call is not active, the music stream will be adjusted. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@.", "history": "added in API level 1", "FullName": "public void adjustVolume (int direction, int flags)"}, "setWiredHeadsetOn(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set true to route audio to/from wired headset; false disable wired headset audio"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do not use. Sets audio routing to the wired headset on or off.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public void setWiredHeadsetOn (boolean on)"}, "unregisterMediaButtonEventReceiver(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: identifier of a @B_android#content#BroadcastReceiver_E@ that was registered with @B_android#media#AudioManager#registerMediaButtonEventReceiver_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession_E@ instead. Unregister the receiver of MEDIA_BUTTON intents.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public void unregisterMediaButtonEventReceiver (ComponentName eventReceiver)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "A string representing the associated value for that property key, or null if there is no value for that key."]], "Parameters": [["@B_java#lang#String_E@", "String: One of the strings corresponding to a property key: either @B_android#media#AudioManager#PROPERTY_OUTPUT_SAMPLE_RATE_E@, @B_android#media#AudioManager#PROPERTY_OUTPUT_FRAMES_PER_BUFFER_E@, @B_android#media#AudioManager#PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND_E@, @B_android#media#AudioManager#PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND_E@, or @B_android#media#AudioManager#PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the property with the specified key.", "history": "Added in API level 17", "FullName": "public String getProperty (String key)"}, "setStreamVolume(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The stream whose volume index should be set."], ["int", "int: The volume index to set. See @B_android#media#AudioManager#getStreamMaxVolume_E@ for the largest valid value."], ["int", "int: One or more flags."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the volume change triggers a Do Not Disturb change and the caller is not granted notification policy access."]], "SeeAlso": ["@B_android#media#AudioManager#getStreamMaxVolume_E@", "@B_android#media#AudioManager#getStreamVolume_E@", "@B_android#media#AudioManager#isVolumeFixed_E@"], "Permissions": [], "Description": "Sets the volume index for a particular stream. This method has no effect if the device implements a fixed volume policy as indicated by @B_android#media#AudioManager#isVolumeFixed_E@. From N onward, volume adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 1", "FullName": "public void setStreamVolume (int streamType, int index, int flags)"}, "abandonAudioFocusRequest(android.media.AudioFocusRequest)": {"Returns": [["int", "@B_android#media#AudioManager#AUDIOFOCUS_REQUEST_FAILED_E@ or @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_GRANTED_E@"]], "Parameters": [["@B_android#media#AudioFocusRequest_E@", "AudioFocusRequest: the @B_android#media#AudioFocusRequest_E@ that was used when requesting focus with @B_android#media#AudioManager#requestAudioFocus_E@. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if passed a null argument"]], "SeeAlso": [], "Permissions": [], "Description": "Abandon audio focus. Causes the previous focus owner, if any, to receive focus.", "history": "Added in API level 26", "FullName": "public int abandonAudioFocusRequest (AudioFocusRequest focusRequest)"}, "requestAudioFocus(android.media.AudioFocusRequest)": {"Returns": [["int", "@B_android#media#AudioManager#AUDIOFOCUS_REQUEST_FAILED_E@, @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_GRANTED_E@ or @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_DELAYED_E@. Note that the return value is never @B_android#media#AudioManager#AUDIOFOCUS_REQUEST_DELAYED_E@ when focus is requested without building the @B_android#media#AudioFocusRequest_E@ with @B_android#media#AudioFocusRequest#Builder#setAcceptsDelayedFocusGain_E@ set to true."]], "Parameters": [["@B_android#media#AudioFocusRequest_E@", "AudioFocusRequest: a @B_android#media#AudioFocusRequest_E@ instance used to configure how focus is requested. This value must never be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if passed a null argument"]], "SeeAlso": [], "Permissions": [], "Description": "Request audio focus. See the @B_android#media#AudioFocusRequest_E@ for information about the options available to configure your request, and notification of focus gain and loss.", "history": "Added in API level 26", "FullName": "public int requestAudioFocus (AudioFocusRequest focusRequest)"}, "registerRemoteController(android.media.RemoteController)": {"Returns": [["boolean", "true if the @B_android#media#RemoteController_E@ was successfully registered, false if an error occurred, due to an internal system error, or insufficient permissions."]], "Parameters": [["@B_android#media#RemoteController_E@", "RemoteController: the object to register."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSessionManager#addOnActiveSessionsChangedListener_E@ and @B_android#media#session#MediaController_E@ instead. Registers a @B_android#media#RemoteController_E@ instance for it to receive media metadata updates and playback state information from applications using @B_android#media#RemoteControlClient_E@, and control their playback. Registration requires the @B_android#media#RemoteController#OnClientUpdateListener_E@ listener to be one of the enabled notification listeners (see @B_android#service#notification#NotificationListenerService_E@).", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "public boolean registerRemoteController (RemoteController rctlr)"}, "getParameters(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "list of parameters key value pairs in the form: key1=value1;key2=value2;..."]], "Parameters": [["@B_java#lang#String_E@", "String: list of parameters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a variable number of parameter values from audio hardware.", "history": "Added in API level 5", "FullName": "public String getParameters (String keys)"}, "loadSoundEffects()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load Sound effects. This method must be called when sound effects are enabled.", "history": "Added in API level 1", "FullName": "public void loadSoundEffects ()"}, "unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback)": {"Returns": [], "Parameters": [["@B_android#media#AudioManager#AudioPlaybackCallback_E@", "AudioManager.AudioPlaybackCallback: non-null callback to unregister This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an audio playback callback previously registered with @B_android#media#AudioManager#registerAudioPlaybackCallback_E@.", "history": "Added in API level 26", "FullName": "public void unregisterAudioPlaybackCallback (AudioManager.AudioPlaybackCallback cb)"}, "unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)": {"Returns": [], "Parameters": [["@B_android#media#AudioManager#AudioRecordingCallback_E@", "AudioManager.AudioRecordingCallback: non-null callback to unregister This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an audio recording callback previously registered with @B_android#media#AudioManager#registerAudioRecordingCallback_E@.", "history": "Added in API level 24", "FullName": "public void unregisterAudioRecordingCallback (AudioManager.AudioRecordingCallback cb)"}, "getStreamMaxVolume(int)": {"Returns": [["int", "The maximum valid volume index for the stream."]], "Parameters": [["int", "int: The stream type whose maximum volume index is returned."]], "Throws": [], "SeeAlso": ["@B_android#media#AudioManager#getStreamVolume_E@"], "Permissions": [], "Description": "Returns the maximum volume index for a particular stream.", "history": "Added in API level 1", "FullName": "public int getStreamMaxVolume (int streamType)"}, "registerMediaButtonEventReceiver(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: identifier of a @B_android#content#BroadcastReceiver_E@ that will receive the media button intent. This broadcast receiver must be declared in the application manifest. The package of the component must match that of the context you're registering from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#session#MediaSession#setMediaButtonReceiver_E@ instead. Register a component to be the sole receiver of MEDIA_BUTTON intents.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public void registerMediaButtonEventReceiver (ComponentName eventReceiver)"}, "registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#AudioDeviceCallback_E@", "AudioDeviceCallback: The @B_android#media#AudioDeviceCallback_E@ object to receive connect/disconnect notifications."], ["@B_android#os#Handler_E@", "Handler: Specifies the @B_android#os#Handler_E@ object for the thread on which to execute the callback. If null, the @B_android#os#Handler_E@ associated with the main @B_android#os#Looper_E@ will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an @B_android#media#AudioDeviceCallback_E@ object to receive notifications of changes to the set of connected audio devices.", "history": "Added in API level 23", "FullName": "public void registerAudioDeviceCallback (AudioDeviceCallback callback, Handler handler)"}, "isBluetoothA2dpOn()": {"Returns": [["boolean", "true if a Bluetooth A2DP peripheral is connected false if otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#AudioManager#getDevices_E@ instead to list available audio devices. Checks whether a Bluetooth A2DP audio peripheral is connected or not.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public boolean isBluetoothA2dpOn ()"}, "setParameters(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: list of parameters key value pairs in the form: key1=value1;key2=value2;..."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a variable number of parameter values to audio hardware.", "history": "Added in API level 5", "FullName": "public void setParameters (String keyValuePairs)"}, "isHapticPlaybackSupported()": {"Returns": [["boolean", "whether audio haptic playback supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return if audio haptic coupled playback is supported or not.", "history": "Added in API level 29", "FullName": "public static boolean isHapticPlaybackSupported ()"}, "getMicrophones()": {"Returns": [["@B_java#util#List_E@", "a list that contains all microphones' characteristics"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of @B_android#media#MicrophoneInfo_E@ that corresponds to the characteristics of all available microphones. The list is empty when no microphones are available on the device. An error during the query will result in an IOException being thrown.", "history": "Added in API level 28", "FullName": "public List<MicrophoneInfo> getMicrophones ()"}, "setMode(int)": {"Returns": [], "Parameters": [["int", "int: the requested audio mode (@B_android#media#AudioManager#MODE_NORMAL_E@, @B_android#media#AudioManager#MODE_RINGTONE_E@, @B_android#media#AudioManager#MODE_IN_CALL_E@ or @B_android#media#AudioManager#MODE_IN_COMMUNICATION_E@). Informs the HAL about the current audio state so that it can route the audio appropriately."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the audio mode. The audio mode encompasses audio routing AND the behavior of the telephony layer. Therefore this method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. In particular, the @B_android#media#AudioManager#MODE_IN_CALL_E@ mode should only be used by the telephony application when it places a phone call, as it will cause signals from the radio layer to feed the platform mixer.", "history": "Added in API level 1", "FullName": "public void setMode (int mode)"}}, "Inheritance": [], "ClassName": "android.media.AudioManager", "ClassDesc": "AudioManager provides access to volume and ringer mode control."}