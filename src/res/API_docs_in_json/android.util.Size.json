{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of the size"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the size represented as a string with the format \"WxH\"", "history": "Added in API level 21", "FullName": "public String toString ()"}, "Size(int,int)": {"Returns": [], "Parameters": [["int", "int: The width of the size, in pixels"], ["int", "int: The height of the size, in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable Size instance.", "history": "Added in API level 21", "FullName": "public Size (int width, int height)"}, "getHeight()": {"Returns": [["int", "height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the height of the size (in pixels).", "history": "Added in API level 21", "FullName": "public int getHeight ()"}, "parseSize(java.lang.String)": {"Returns": [["@B_android#util#Size_E@", "the size value represented by string."]], "Parameters": [["@B_java#lang#String_E@", "String: the string representation of a size value."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if string cannot be parsed as a size value."], ["@B_java#lang#NullPointerException_E@", "if string was null"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified string as a size value. The ASCII characters \\u002a ('*') and \\u0078 ('x') are recognized as separators between the width and height. For any Size s: Size.parseSize(s.toString()).equals(s). However, the method also handles sizes expressed in the following forms: \"x*=> new Size(width, height), where", "history": "Added in API level 21", "FullName": "public static Size parseSize (String string)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this size is equal to another size. Two sizes are equal if and only if both their widths and heights are equal. A size object is never equal to any other type of object.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getWidth()": {"Returns": [["int", "width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the width of the size (in pixels).", "history": "Added in API level 21", "FullName": "public int getWidth ()"}, "Size(int, int)": {"Returns": [], "Parameters": [["int", "int: The width of the size, in pixels"], ["int", "int: The height of the size, in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new immutable Size instance.", "history": "added in API level 21", "FullName": "public Size (int width, int height)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.util.Size", "ClassDesc": "Immutable class for describing width and height dimensions in pixels."}