{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this X500Principal"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a user-friendly string representation of this X500Principal.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a string representation of this X500Principal using the specified format"]], "Parameters": [["@B_java#lang#String_E@", "String: the format to use"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified format is invalid or null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the X.500 distinguished name using the specified format. Valid values for the format are \"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive). If \"RFC1779\" is specified as the format, this method emits the attribute type keywords defined in RFC 1779 (CN, L, ST, O, OU, C, STREET). Any other attribute type is emitted as an OID. If \"RFC2253\" is specified as the format, this method emits the attribute type keywords defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID). Any other attribute type is emitted as an OID. Under a strict reading, RFC 2253 only specifies a UTF-8 string representation. The String returned by this method is the Unicode string achieved by decoding this UTF-8 representation. If \"CANONICAL\" is specified as the format, this method returns an RFC 2253 conformant string representation with the following additional canonicalizations: Additional standard formats may be introduced in the future.", "history": "Added in API level 1", "FullName": "public String getName (String format)"}, "X500Principal(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the distinguished name in ASN.1 DER encoded form"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if an encoding error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an X500Principal from a distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is as follows.", "history": "Added in API level 1", "FullName": "public X500Principal (byte[] name)"}, "getName(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [["@B_java#lang#String_E@", "a string representation of this X500Principal using the specified format"]], "Parameters": [["@B_java#lang#String_E@", "String: the format to use"], ["@B_java#util#Map_E@", "Map: an OID map, where each key is an object identifier in String form (a sequence of nonnegative integers separated by periods) that maps to a corresponding attribute type keyword String. The map may be empty but never null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified format is invalid, null, or an OID in the name maps to an improperly specified keyword"], ["@B_java#lang#NullPointerException_E@", "if oidMap is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the X.500 distinguished name using the specified format. Valid values for the format are \"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not permitted and an IllegalArgumentException will be thrown. This method returns Strings in the format as specified in @B_javax#security#auth#x500#X500Principal#getName_E@ and also emits additional attribute type keywords for OIDs that have entries in the oidMap parameter. OID entries in the oidMap take precedence over the default OIDs recognized by getName(String). Improperly specified OIDs are ignored; however if an OID in the name maps to an improperly specified keyword, an IllegalArgumentException is thrown. Additional standard formats may be introduced in the future. Warning: additional attribute type keywords may not be recognized by other implementations; therefore do not use this method if you are unsure if these keywords will be recognized by other implementations.", "history": "Added in API level 9", "FullName": "public String getName (String format, Map<String, String> oidMap)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified Object is equal to this X500Principal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: Object to be compared for equality with this X500Principal"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified Object with this X500Principal for equality. Specifically, this method returns true if the Object X500Principal and if the respective canonical string representations (obtained via the getName(X500Principal.CANONICAL) method) of this object and This implementation is compliant with the requirements of RFC 3280.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "X500Principal(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an X.500 distinguished name in RFC 1779 or RFC 2253 format"], ["@B_java#util#Map_E@", "Map: an attribute type keyword map, where each key is a keyword String that maps to a corresponding object identifier in String form (a sequence of nonnegative integers separated by periods). The map may be empty but never null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name or keywordMap is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the name is improperly specified or a keyword in the name maps to an OID that is not in the correct form"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an X500Principal from a string representation of an X.500 distinguished name (ex: \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\"). The distinguished name must be specified using the grammar defined in RFC 1779 or RFC 2253 (either format is acceptable). This constructor recognizes the attribute type keywords specified in @B_javax#security#auth#x500#X500Principal#X500Principal_E@ and also recognizes additional keywords that have entries in the keywordMap parameter. Keyword entries in the keywordMap take precedence over the default keywords recognized by X500Principal(String). Keywords MUST be specified in all upper-case, otherwise they will be ignored. Improperly specified keywords are ignored; however if a keyword in the name maps to an improperly specified Object Identifier (OID), an IllegalArgumentException is thrown. It is permissible to have 2 different keywords that map to the same OID. This implementation enforces a more restrictive OID syntax than defined in RFC 1779 and 2253. It uses the more correct syntax defined in numericoid = number 1*( DOT number )", "history": "Added in API level 9", "FullName": "public X500Principal (String name, Map<String, String> keywordMap)"}, "X500Principal(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an X.500 distinguished name in RFC 1779 or RFC 2253 format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the name is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the name is improperly specified"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an X500Principal from a string representation of an X.500 distinguished name (ex: \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\"). The distinguished name must be specified using the grammar defined in RFC 1779 or RFC 2253 (either format is acceptable). This constructor recognizes the attribute type keywords defined in RFC 1779 and RFC 2253 (and listed in @B_javax#security#auth#x500#X500Principal#getName_E@), as well as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS, GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose Object Identifiers (OIDs) are defined in RFC 3280 and its successor. Any other attribute type must be specified as an OID. This implementation enforces a more restrictive OID syntax than defined in RFC 1779 and 2253. It uses the more correct syntax defined in numericoid = number 1*( DOT number )", "history": "Added in API level 1", "FullName": "public X500Principal (String name)"}, "hashCode()": {"Returns": [["int", "a hash code for this X500Principal"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a hash code for this X500Principal. The hash code is calculated via: getName(X500Principal.CANONICAL).hashCode()", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getEncoded()": {"Returns": [["byte[]", "a byte array containing the distinguished name in ASN.1 DER encoded form"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is supplied in the documentation for @B_javax#security#auth#x500#X500Principal#X500Principal_E@. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public byte[] getEncoded ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the distinguished name of this X500Principal"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the X.500 distinguished name using the format defined in RFC 2253. This method is equivalent to calling getName(X500Principal.RFC2253).", "history": "Added in API level 1", "FullName": "public String getName ()"}, "X500Principal(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream containing the distinguished name in ASN.1 DER encoded form"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the InputStream is null"], ["@B_java#lang#IllegalArgumentException_E@", "if an encoding error occurs (incorrect form for DN)"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an X500Principal from an InputStream containing the distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is supplied in the documentation for @B_javax#security#auth#x500#X500Principal#X500Principal_E@. The read position of the input stream is positioned to the next available byte after the encoded distinguished name.", "history": "Added in API level 1", "FullName": "public X500Principal (InputStream is)"}}, "Inheritance": [], "ClassName": "javax.security.auth.x500.X500Principal", "ClassDesc": "This class represents an X.500 Principal. X500Principals are represented by distinguished names such as \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\". This class can be instantiated by using a string representation of the distinguished name, or by using the ASN.1 DER encoded byte representation of the distinguished name. The current specification for the string representation of a distinguished name is defined in The string representation for this X500Principal can be obtained by calling the getName methods. Note that the getSubjectX500Principal and getIssuerX500Principal methods of X509Certificate return X500Principals representing the issuer and subject fields of the certificate."}