{"Functions": {"addAll(T...)": {"Returns": [], "Parameters": [["T...", "T: Array of items to be added into the list."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#addAll_E@"], "Permissions": [], "Description": "Adds the given items to the list. Does not modify the input.", "history": "added in version 22.2.1", "FullName": "void addAll (T... items)"}, "remove(T)": {"Returns": [["boolean", "True if item is removed, false if item cannot be found in the list."]], "Parameters": [["T", "T: The item to be removed from the list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the provided item from the list and calls @B_android#support#v7#util#ListUpdateCallback#onRemoved_E@.", "history": "added in version 22.1.0", "FullName": "boolean remove (T item)"}, "size()": {"Returns": [["int", "The number of items in the list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of items in the list.", "history": "added in version 22.1.0", "FullName": "int size ()"}, "removeItemAt(int)": {"Returns": [["T", "The removed item."]], "Parameters": [["int", "int: The index of the item to be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the item at the given index and calls @B_android#support#v7#util#ListUpdateCallback#onRemoved_E@.", "history": "added in version 22.1.0", "FullName": "T removeItemAt (int index)"}, "indexOf(T)": {"Returns": [["int", "The position of the provided item or @B_android#support#v7#util#SortedList#INVALID_POSITION_E@ if item is not in the list."]], "Parameters": [["T", "T: The item to query for position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position of the provided item.", "history": "added in version 22.1.0", "FullName": "int indexOf (T item)"}, "updateItemAt(int, T)": {"Returns": [], "Parameters": [["int", "int: The index of the item to replace"], ["T", "T: The item to replace the item at the given Index."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#add_E@"], "Permissions": [], "Description": "Updates the item at the given index and calls @B_android#support#v7#util#SortedList#Callback#onChanged_E@ and/or @B_android#support#v7#util#ListUpdateCallback#onMoved_E@ if necessary. You can use this method if you need to change an existing Item such that its position in the list may change. If the new object is a different object (get(index) != item) and @B_android#support#v7#util#SortedList#Callback#areContentsTheSame_E@ returns true, SortedList avoids calling @B_android#support#v7#util#SortedList#Callback#onChanged_E@ otherwise it calls @B_android#support#v7#util#SortedList#Callback#onChanged_E@. If the new position of the item is different than the provided index, SortedList calls @B_android#support#v7#util#ListUpdateCallback#onMoved_E@.", "history": "added in version 22.1.0", "FullName": "void updateItemAt (int index, T item)"}, "addAll(java.util.Collection<T>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: Collection of items to be added into the list."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#addAll_E@"], "Permissions": [], "Description": "Adds the given items to the list. Does not modify the input.", "history": "added in version 22.2.1", "FullName": "void addAll (Collection<T> items)"}, "add(T)": {"Returns": [["int", "The index of the newly added item."]], "Parameters": [["T", "T: The item to be added into the list."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#Callback#compare_E@", "@B_android#support#v7#util#SortedList#Callback#areItemsTheSame_E@", "@B_android#support#v7#util#SortedList#Callback#areContentsTheSame_E@"], "Permissions": [], "Description": "Adds the given item to the list. If this is a new item, SortedList calls @B_android#support#v7#util#ListUpdateCallback#onInserted_E@. If the item already exists in the list and its sorting criteria is not changed, it is replaced with the existing Item. SortedList uses @B_android#support#v7#util#SortedList#Callback#areItemsTheSame_E@ to check if two items are the same item and uses @B_android#support#v7#util#SortedList#Callback#areContentsTheSame_E@ to decide whether it should call @B_android#support#v7#util#SortedList#Callback#onChanged_E@ or not. In both cases, it always removes the reference to the old item and puts the new item into the backing array even if @B_android#support#v7#util#SortedList#Callback#areContentsTheSame_E@ returns false. If the sorting criteria of the item is changed, SortedList won't be able to find its duplicate in the list which will result in having a duplicate of the Item in the list. If you need to update sorting criteria of an item that already exists in the list, use @B_android#support#v7#util#SortedList#updateItemAt_E@. You can find the index of the item using @B_android#support#v7#util#SortedList#indexOf_E@ before you update the object.", "history": "added in version 22.1.0", "FullName": "int add (T item)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all items from the SortedList.", "history": "added in version 22.2.0", "FullName": "void clear ()"}, "beginBatchedUpdates()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Batches adapter updates that happen between calling this method until calling @B_android#support#v7#util#SortedList#endBatchedUpdates_E@. For example, if you add multiple items in a loop and they are placed into consecutive indices, SortedList calls @B_android#support#v7#util#ListUpdateCallback#onInserted_E@ only once with the proper item count. If an event cannot be merged with the previous event, the previous event is dispatched to the callback instantly. After running your data updates, you @B_android#support#v7#util#SortedList#endBatchedUpdates_E@ which will dispatch any deferred data change event to the current callback. A sample implementation may look like this: Instead of using this method to batch calls, you can use a Callback that extends @B_android#support#v7#util#SortedList#BatchedCallback_E@. In that case, you must make sure that you are manually calling @B_android#support#v7#util#SortedList#BatchedCallback#dispatchLastEvent_E@ right after you complete your data changes. Failing to do so may create data inconsistencies with the Callback. If the current Callback is an instance of @B_android#support#v7#util#SortedList#BatchedCallback_E@, calling this method has no effect.", "history": "added in version 22.1.0", "FullName": "void beginBatchedUpdates ()"}, "get(int)": {"Returns": [["T", "The item at the given index."]], "Parameters": [["int", "int: The index of the item to retrieve."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if provided index is negative or larger than the size of the list."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the item at the given index.", "history": "added in version 22.1.0", "FullName": "T get (int index)"}, "endBatchedUpdates()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ends the update transaction and dispatches any remaining event to the callback.", "history": "added in version 22.1.0", "FullName": "void endBatchedUpdates ()"}, "recalculatePositionOfItemAt(int)": {"Returns": [], "Parameters": [["int", "int: The current index of the Item whose position should be re-calculated."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#updateItemAt_E@", "@B_android#support#v7#util#SortedList#add_E@"], "Permissions": [], "Description": "This method can be used to recalculate the position of the item at the given index, without triggering an @B_android#support#v7#util#SortedList#Callback#onChanged_E@ callback. If you are editing objects in the list such that their position in the list may change but you don't want to trigger an onChange animation, you can use this method to re-position it. If the item changes position, SortedList will call @B_android#support#v7#util#ListUpdateCallback#onMoved_E@ without calling @B_android#support#v7#util#SortedList#Callback#onChanged_E@. A sample usage may look like:", "history": "added in version 22.1.0", "FullName": "void recalculatePositionOfItemAt (int index)"}, "addAll(T[], boolean)": {"Returns": [], "Parameters": [["T[]", "T: Array of items to be added into the list."], ["boolean", "boolean: If true, SortedList is allowed to modify the input."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#util#SortedList#addAll_E@"], "Permissions": [], "Description": "Adds the given items to the list. Equivalent to calling @B_android#support#v7#util#SortedList#add_E@ in a loop, except the callback events may be in a different order/granularity since addAll can batch them for better performance. If allowed, may modify the input array and even take the ownership over it in order to avoid extra memory allocation during sorting and deduplication.", "history": "added in version 22.2.1", "FullName": "void addAll (T[] items, boolean mayModifyInput)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.util.SortedList<T>", "ClassDesc": "A Sorted list implementation that can keep items in order and also notify for changes in the list such that it can be bound to a @B_android#support#v7#widget#RecyclerView#Adapter_E@. It keeps items ordered using the @B_android#support#v7#util#SortedList#Callback#compare_E@ method and uses binary search to retrieve items. If the sorting criteria of your items may change, make sure you call appropriate methods while editing them to avoid data inconsistencies. You can control the order of items and change notifications via the @B_android#support#v7#util#SortedList#Callback_E@ parameter."}