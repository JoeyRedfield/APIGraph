{"Functions": {"showOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the overflow items from the associated menu.", "history": "Added in API level 21", "FullName": "public boolean showOverflowMenu ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "dismissPopupMenus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss any popups associated with this menu view.", "history": "Added in API level 21", "FullName": "public void dismissPopupMenus ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 21", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#ActionMenuView#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 21", "FullName": "public ActionMenuView.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void onDetachedFromWindow ()"}, "setOnMenuItemClickListener(android.widget.ActionMenuView.OnMenuItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#ActionMenuView#OnMenuItemClickListener_E@", "ActionMenuView.OnMenuItemClickListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public void setOnMenuItemClickListener (ActionMenuView.OnMenuItemClickListener listener)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new resource configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the current configuration of the resources being used by the application have changed. You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics. You only need to use this if you are not relying on the normal @B_android#app#Activity_E@ mechanism of recreating the activity instance upon a configuration change.", "history": "Added in API level 21", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 21", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setOverflowIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to set, may be null to clear the icon This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the overflow button.", "history": "Added in API level 23", "FullName": "public void setOverflowIcon (Drawable icon)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "getPopupTheme()": {"Returns": [["int", "resource identifier of the theme used to inflate popup menus, or 0 if menus are inflated against the action menu view theme"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ActionMenuView#setPopupTheme_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public int getPopupTheme ()"}, "getMenu()": {"Returns": [["@B_android#view#Menu_E@", "the Menu presented by this view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Menu object that this ActionMenuView is currently presenting. Applications should use this method to obtain the ActionMenuView's Menu object and inflate or add content to it as necessary.", "history": "Added in API level 21", "FullName": "public Menu getMenu ()"}, "isOverflowMenuShowing()": {"Returns": [["boolean", "true if the overflow menu is currently showing"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the overflow menu is currently showing. This may not reflect a pending show operation in progress.", "history": "Added in API level 21", "FullName": "public boolean isOverflowMenuShowing ()"}, "getWindowAnimations()": {"Returns": [["", "A resource ID for the default animations to be used for this menu."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default animations to be used for this menu when entering/exiting.", "history": "", "FullName": "public abstract int getWindowAnimations ()"}, "setPopupTheme(int)": {"Returns": [], "Parameters": [["int", "int: theme used to inflate popup menus"]], "Throws": [], "SeeAlso": ["@B_android#widget#ActionMenuView#getPopupTheme_E@"], "Permissions": [], "Description": "Specifies the theme to use when inflating popup menus. By default, uses the same theme as the action menu view itself.", "history": "Added in API level 21", "FullName": "public void setPopupTheme (int resId)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#widget#ActionMenuView#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 21", "FullName": "protected ActionMenuView.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)"}, "ActionMenuView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ActionMenuView (Context context, AttributeSet attrs)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#ActionMenuView#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ when the layout's orientation is @B_android#widget#LinearLayout#VERTICAL_E@. When the orientation is @B_android#widget#LinearLayout#HORIZONTAL_E@, the width is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and the height to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "Added in API level 21", "FullName": "protected ActionMenuView.LayoutParams generateDefaultLayoutParams ()"}, "getOverflowIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The overflow icon drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the overflow icon.", "history": "Added in API level 23", "FullName": "public Drawable getOverflowIcon ()"}, "hideOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be hidden, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the overflow items from the associated menu.", "history": "Added in API level 21", "FullName": "public boolean hideOverflowMenu ()"}, "ActionMenuView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ActionMenuView (Context context)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.ActionMenuView", "ClassDesc": "ActionMenuView is a presentation of a series of menu options as a View. It provides several top level options as action buttons while spilling remaining options over as items in an overflow menu. This allows applications to present packs of actions inline with specific or repeating content."}