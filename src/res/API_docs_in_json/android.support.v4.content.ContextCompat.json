{"Functions": {"getColorStateList(android.content.Context, int)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A color state list, or null if the resource could not be resolved."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a color state list associated with a particular resource ID. Starting in @B_android#os#Build#VERSION_CODES#M_E@, the returned color state list will be styled for the specified Context's theme.", "history": "added in version 23.0.0", "FullName": "ColorStateList getColorStateList (Context context, int id)"}, "isDeviceProtectedStorage(android.content.Context)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#content#ContextCompat#createDeviceProtectedStorageContext_E@"], "Permissions": [], "Description": "Indicates if the storage APIs of this Context are backed by device-encrypted storage.", "history": "added in version 24.0.0", "FullName": "boolean isDeviceProtectedStorage (Context context)"}, "getNoBackupFilesDir(android.content.Context)": {"Returns": [["@B_java#io#File_E@", "The path of the directory holding application files that will not be automatically backed up to remote storage."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#Context#getFilesDir_E@"], "Permissions": [], "Description": "Returns the absolute path to the directory on the filesystem similar to @B_android#content#Context#getFilesDir_E@. The difference is that files placed under this directory will be excluded from automatic backup to remote storage on devices running @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ or later. No permissions are required to read or write to the returned path, since this path is internal storage.", "history": "added in version 22.0.0", "FullName": "File getNoBackupFilesDir (Context context)"}, "getDataDir(android.content.Context)": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#pm#ApplicationInfo#dataDir_E@"], "Permissions": [], "Description": "Returns the absolute path to the directory on the filesystem where all private files belonging to this app are stored. Apps should not use this path directly; they should instead use @B_android#content#Context#getFilesDir_E@, @B_android#content#Context#getCacheDir_E@, @B_android#content#Context#getDir_E@, or other storage APIs on @B_android#content#Context_E@. The returned path may change over time if the calling app is moved to an adopted storage device, so only relative paths should be persisted. No additional permissions are required for the calling app to read or write files under the returned path.", "history": "added in version 24.0.0", "FullName": "File getDataDir (Context context)"}, "getCodeCacheDir(android.content.Context)": {"Returns": [["@B_java#io#File_E@", "The path of the directory holding application code cache files."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. On devices running @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ or later, the system will delete any files stored in this location both when your specific application is upgraded, and when the entire platform is upgraded. This location is optimal for storing compiled or optimized code generated by your application at runtime. Apps require no extra permissions to read or write to the returned path, since this path lives in their private storage.", "history": "added in version 22.0.0", "FullName": "File getCodeCacheDir (Context context)"}, "getDrawable(android.content.Context, int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a drawable object associated with a particular resource ID. Starting in @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, the returned drawable will be styled for the specified Context's theme.", "history": "added in version 22.0.0", "FullName": "Drawable getDrawable (Context context, int id)"}, "getExternalCacheDirs(android.content.Context)": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#Context#getExternalCacheDir_E@", "@B_android#support#v4#os#EnvironmentCompat#getStorageState_E@"], "Permissions": ["@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@"], "Description": "Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. These files are internal to the application, and not typically visible to the user as media. This is like @B_android#content#Context#getCacheDir_E@ in that these files will be deleted when the application is uninstalled, however there are some important differences: External files are not always available: they will disappear if the user mounts the external storage on a computer or removes it. There is no security enforced with these files. External storage devices returned here are considered a permanent part of the device, including both emulated external storage and physical media slots, such as SD cards in a battery compartment. The returned paths do not include transient devices, such as USB flash drives. An application may store data on any or all of the returned devices. For example, an app may choose to store large files on the device with the most available space, as measured by @B_android#os#StatFs_E@. Starting in @B_android#os#Build#VERSION_CODES#KITKAT_E@, no permissions are required to write to the returned paths; they're always accessible to the calling app. Before then, @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ is required to write. Write access outside of these paths on secondary external storage devices is not available. To request external storage access in a backwards compatible way, consider using android:maxSdkVersion like this: The first path returned is the same as @B_android#content#Context#getExternalCacheDir_E@. Returned paths may be null if a storage device is unavailable.", "history": "added in version 22.0.0", "FullName": "File[] getExternalCacheDirs (Context context)"}, "getColor(android.content.Context, int)": {"Returns": [["int", "A single color value in the form 0xAARRGGBB."]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a color associated with a particular resource ID Starting in @B_android#os#Build#VERSION_CODES#M_E@, the returned color will be styled for the specified Context's theme.", "history": "added in version 23.0.0", "FullName": "int getColor (Context context, int id)"}, "ContextCompat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This class should not be instantiated, but the constructor must be visible for the class to be extended (ex. in ActivityCompat).", "history": "added in version 22.0.0", "FullName": "ContextCompat ()"}, "getObbDirs(android.content.Context)": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#content#Context#getObbDir_E@", "@B_android#support#v4#os#EnvironmentCompat#getStorageState_E@"], "Permissions": ["@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@"], "Description": "Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. Note if the application does not have any OBB files, these directories may not exist. This is like @B_android#content#Context#getFilesDir_E@ in that these files will be deleted when the application is uninstalled, however there are some important differences: External files are not always available: they will disappear if the user mounts the external storage on a computer or removes it. There is no security enforced with these files. External storage devices returned here are considered a permanent part of the device, including both emulated external storage and physical media slots, such as SD cards in a battery compartment. The returned paths do not include transient devices, such as USB flash drives. An application may store data on any or all of the returned devices. For example, an app may choose to store large files on the device with the most available space, as measured by @B_android#os#StatFs_E@. Starting in @B_android#os#Build#VERSION_CODES#KITKAT_E@, no permissions are required to write to the returned paths; they're always accessible to the calling app. Before then, @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ is required to write. Write access outside of these paths on secondary external storage devices is not available. To request external storage access in a backwards compatible way, consider using android:maxSdkVersion like this: The first path returned is the same as @B_android#content#Context#getObbDir_E@. Returned paths may be null if a storage device is unavailable.", "history": "added in version 22.0.0", "FullName": "File[] getObbDirs (Context context)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.content.ContextCompat", "ClassDesc": "Helper for accessing features in https:##developer#android#com@B_android#content#Context_E@."}