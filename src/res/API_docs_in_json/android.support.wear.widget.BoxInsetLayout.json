{"Functions": {"onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 26.0.0-beta1", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "onApplyWindowInsets(android.view.WindowInsets)": {"Returns": [["@B_android#view#WindowInsets_E@", "The supplied insets with any applied insets consumed"]], "Parameters": [["@B_android#view#WindowInsets_E@", "WindowInsets: Insets to apply"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view should apply @B_android#view#WindowInsets_E@ according to its internal policy. This method should be overridden by views that wish to apply a policy different from or in addition to the default behavior. Clients that wish to force a view subtree to apply insets should call @B_android#view#View#dispatchApplyWindowInsets_E@. Clients may supply an @B_android#view#View#OnApplyWindowInsetsListener_E@ to a view. If one is set it will be called during dispatch instead of this method. The listener may optionally call this method from its own implementation if it wishes to apply the view's default insets policy in addition to its own. Implementations of this method should either return the insets parameter unchanged or a new @B_android#view#WindowInsets_E@ cloned from the supplied insets with any insets consumed that this view applied itself. This allows new inset types added in future platform versions to pass through existing implementations unchanged without being erroneously consumed. By default if a view's @B_android#view#View#setFitsSystemWindows_E@ property is set then the view will consume the system window insets and apply them as padding for the view.", "history": "", "FullName": "WindowInsets onApplyWindowInsets (WindowInsets insets)"}, "BoxInsetLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The @B_android#content#Context_E@ the view is running in, through which it can access the current theme, resources, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simple constructor to use when creating a view from code.", "history": "added in version 26.0.0-beta1", "FullName": "BoxInsetLayout (Context context)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#wear#widget#BoxInsetLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "BoxInsetLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "setForeground(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the Drawable to be drawn on top of the children"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Supply a Drawable that is to be rendered on top of all of the content in the view.", "history": "", "FullName": "void setForeground (Drawable drawable)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.wear.widget.BoxInsetLayout", "ClassDesc": "BoxInsetLayout is a screen shape-aware ViewGroup that can box its children in the center square of a round screen by using the boxedEdges attribute. The values for this attribute specify the child's edges to be boxed in: left|top|right|bottom or all. The boxedEdges attribute is ignored on a device with a rectangular screen."}