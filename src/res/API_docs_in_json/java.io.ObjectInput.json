{"Functions": {"available()": {"Returns": [["int", "the number of available bytes."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes that can be read without blocking.", "history": "Added in API level 1", "FullName": "public abstract int available ()"}, "read(byte[])": {"Returns": [["int", "the actual number of bytes read, -1 is returned when the end of the stream is reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Reads into an array of bytes. This method will block until some input is available.", "history": "Added in API level 1", "FullName": "public abstract int read (byte[] b)"}, "readObject()": {"Returns": [["@B_java#lang#Object_E@", "the object read from the stream"]], "Parameters": [], "Throws": [["@B_java#lang#ClassNotFoundException_E@", "If the class of a serialized object cannot be found."], ["@B_java#io#IOException_E@", "If any of the usual Input/Output related exceptions occur."]], "SeeAlso": [], "Permissions": [], "Description": "Read and return an object. The class that implements this interface defines where the object is \"read\" from.", "history": "Added in API level 1", "FullName": "public abstract Object readObject ()"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, -1 is returned when the end of the stream is reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Reads into an array of bytes. This method will block until some input is available.", "history": "Added in API level 1", "FullName": "public abstract int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, -1 is returned when the end of the stream is reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of bytes read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Reads into an array of bytes. This method will block until some input is available.", "history": "added in API level 1", "FullName": "public abstract int read (byte[] b, int off, int len)"}, "read()": {"Returns": [["int", "the byte read, or -1 if the end of the stream is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte of data. This method will block if no input is available.", "history": "Added in API level 1", "FullName": "public abstract int read ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Closes the input stream. Must be called to release any resources associated with the stream.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error has occurred."]], "SeeAlso": [], "Permissions": [], "Description": "Skips n bytes of input.", "history": "Added in API level 1", "FullName": "public abstract long skip (long n)"}}, "Inheritance": [], "ClassName": "java.io.ObjectInput", "ClassDesc": "ObjectInput extends the DataInput interface to include the reading of objects. DataInput includes methods for the input of primitive types, ObjectInput extends that interface to include objects, arrays, and Strings."}