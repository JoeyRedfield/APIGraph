{"Functions": {"startScan(android.bluetooth.le.ScanCallback)": {"Returns": [], "Parameters": [["@B_android#bluetooth#le#ScanCallback_E@", "ScanCallback: Callback used to deliver scan results."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If callback is null."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#BLUETOOTH_ADMIN_E@"], "Description": "Start Bluetooth LE scan with default parameters and no filters. The scan results will be delivered through callback. For unfiltered scans, scanning is stopped on screen off to save power. Scanning is resumed when screen is turned on again. To avoid this, use @B_android#bluetooth#le#BluetoothLeScanner#startScan_E@ with desired @B_android#bluetooth#le#ScanFilter_E@. An app must hold @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission in order to get results. Requires @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@", "history": "Added in API level 21", "FullName": "public void startScan (ScanCallback callback)"}, "stopScan(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: The PendingIntent that was used to start the scan."]], "Throws": [], "SeeAlso": ["@B_android#bluetooth#le#BluetoothLeScanner#startScan_E@"], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_ADMIN_E@"], "Description": "Stops an ongoing Bluetooth LE scan started using a PendingIntent. When creating the PendingIntent parameter, please do not use the FLAG_CANCEL_CURRENT flag. Otherwise, the stop scan may have no effect. Requires @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@", "history": "Added in API level 26", "FullName": "public void stopScan (PendingIntent callbackIntent)"}, "startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)": {"Returns": [["int", "Returns 0 for success or an error code from @B_android#bluetooth#le#ScanCallback_E@ if the scan request could not be sent."]], "Parameters": [["@B_java#util#List_E@", "List: Optional list of ScanFilters for finding exact BLE devices. This value may be null."], ["@B_android#bluetooth#le#ScanSettings_E@", "ScanSettings: Optional settings for the scan. This value may be null."], ["@B_android#app#PendingIntent_E@", "PendingIntent: The PendingIntent to deliver the result to. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#bluetooth#le#BluetoothLeScanner#stopScan_E@"], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#BLUETOOTH_ADMIN_E@"], "Description": "Start Bluetooth LE scan using a @B_android#app#PendingIntent_E@. The scan results will be delivered via the PendingIntent. Use this method of scanning if your process is not always running and it should be started when scan results are available. An app must hold @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission in order to get results. When the PendingIntent is delivered, the Intent passed to the receiver or activity will contain one or more of the extras @B_android#bluetooth#le#BluetoothLeScanner#EXTRA_CALLBACK_TYPE_E@, @B_android#bluetooth#le#BluetoothLeScanner#EXTRA_ERROR_CODE_E@ and @B_android#bluetooth#le#BluetoothLeScanner#EXTRA_LIST_SCAN_RESULT_E@ to indicate the result of the scan. Requires @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@", "history": "Added in API level 26", "FullName": "public int startScan (List<ScanFilter> filters, ScanSettings settings, PendingIntent callbackIntent)"}, "startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: @B_android#bluetooth#le#ScanFilter_E@s for finding exact BLE devices."], ["@B_android#bluetooth#le#ScanSettings_E@", "ScanSettings: Settings for the scan."], ["@B_android#bluetooth#le#ScanCallback_E@", "ScanCallback: Callback used to deliver scan results."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If settings or callback is null."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#BLUETOOTH_ADMIN_E@"], "Description": "Start Bluetooth LE scan. The scan results will be delivered through callback. For unfiltered scans, scanning is stopped on screen off to save power. Scanning is resumed when screen is turned on again. To avoid this, do filetered scanning by using proper @B_android#bluetooth#le#ScanFilter_E@. An app must hold @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ or @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission in order to get results. Requires @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@", "history": "Added in API level 21", "FullName": "public void startScan (List<ScanFilter> filters, ScanSettings settings, ScanCallback callback)"}, "flushPendingScanResults(android.bluetooth.le.ScanCallback)": {"Returns": [], "Parameters": [["@B_android#bluetooth#le#ScanCallback_E@", "ScanCallback: Callback of the Bluetooth LE Scan, it has to be the same instance as the one used to start scan."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flush pending batch scan results stored in Bluetooth controller. This will return Bluetooth LE scan results batched on bluetooth controller. Returns immediately, batch scan results data will be delivered through the callback.", "history": "Added in API level 21", "FullName": "public void flushPendingScanResults (ScanCallback callback)"}, "stopScan(android.bluetooth.le.ScanCallback)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#BLUETOOTH_ADMIN_E@"], "Description": "Stops an ongoing Bluetooth LE scan. Requires @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@", "history": "Added in API level 21", "FullName": "public void stopScan (ScanCallback callback)"}}, "Inheritance": [], "ClassName": "android.bluetooth.le.BluetoothLeScanner", "ClassDesc": "This class provides methods to perform scan related operations for Bluetooth LE devices. An application can scan for a particular type of Bluetooth LE devices using @B_android#bluetooth#le#ScanFilter_E@. It can also request different types of callbacks for delivering the result. Use @B_android#bluetooth#BluetoothAdapter#getBluetoothLeScanner_E@ to get an instance of @B_android#bluetooth#le#BluetoothLeScanner_E@. @B_android#Manifest#permission#BLUETOOTH_ADMIN_E@ permission."}