{"Functions": {"showAsDropDown(android.view.View,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view on which to pin the popup window"], ["int", "int: A horizontal offset from the anchor in pixels"], ["int", "int: A vertical offset from the anchor in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#dismiss_E@"], "Permissions": [], "Description": "Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "Added in API level 1", "FullName": "public void showAsDropDown (View anchor, int xoff, int yoff)"}, "isSplitTouchEnabled()": {"Returns": [["boolean", "true if the touch splitting is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setSplitTouchEnabled_E@"], "Permissions": [], "Description": "Indicates whether the popup window supports splitting touches.", "history": "Added in API level 11", "FullName": "public boolean isSplitTouchEnabled ()"}, "setIsClippedToScreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to clip to the screen."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isClippedToScreen_E@"], "Permissions": [], "Description": "Clip this popup window to the screen, but not to the containing window. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 29", "FullName": "public void setIsClippedToScreen (boolean enabled)"}, "PopupWindow(android.view.View, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's content"], ["int", "int: the popup's width"], ["int", "int: the popup's height"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new non focusable popup window which can display the The popup does not provide any background. This should be handled by the content view.", "history": "added in API level 1", "FullName": "public PopupWindow (View contentView, int width, int height)"}, "getContentView()": {"Returns": [["@B_android#view#View_E@", "a @B_android#view#View_E@ representing the popup's content"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setContentView_E@"], "Permissions": [], "Description": "Return the view used as the content of the popup window.", "history": "Added in API level 1", "FullName": "public View getContentView ()"}, "PopupWindow(int, int)": {"Returns": [], "Parameters": [["int", "int: the popup's width"], ["int", "int: the popup's height"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window. The dimension of the window must be passed to this constructor. The popup does not provide any background. This should be handled by the content view.", "history": "added in API level 1", "FullName": "public PopupWindow (int width, int height)"}, "isAboveAnchor()": {"Returns": [["boolean", "True if this popup is showing above the anchor view, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after @B_android#widget#PopupWindow#showAsDropDown_E@ or @B_android#widget#PopupWindow#showAsDropDown_E@ was invoked.", "history": "Added in API level 3", "FullName": "public boolean isAboveAnchor ()"}, "setEpicenterBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the epicenter bounds relative to the anchor view, or null to use the default epicenter This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getEpicenterBounds_E@"], "Permissions": [], "Description": "Sets the bounds used as the epicenter of the enter and exit transitions. Transitions use Rect, referred to as the epicenter, to orient the direction of travel. For popup windows, the anchor view bounds are used as the default epicenter. See @B_android#transition#Transition#setEpicenterCallback_E@ for more information about how transition epicenters work.", "history": "Added in API level 29", "FullName": "public void setEpicenterBounds (Rect bounds)"}, "showAsDropDown(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view on which to pin the popup window"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#dismiss_E@"], "Permissions": [], "Description": "Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view.", "history": "Added in API level 1", "FullName": "public void showAsDropDown (View anchor)"}, "PopupWindow(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window of dimension (0,0). The popup does provide a background.", "history": "Added in API level 1", "FullName": "public PopupWindow (Context context)"}, "showAsDropDown(android.view.View,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view on which to pin the popup window"], ["int", "int: A horizontal offset from the anchor in pixels"], ["int", "int: A vertical offset from the anchor in pixels"], ["int", "int: Alignment of the popup relative to the anchor"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#dismiss_E@"], "Permissions": [], "Description": "Displays the content view in a popup window anchored to the corner of another view. The window is positioned according to the specified gravity and offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent view can be scrolled, the specified vertical gravity will be ignored and the popup will anchor itself such that it is visible. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "Added in API level 19", "FullName": "public void showAsDropDown (View anchor, int xoff, int yoff, int gravity)"}, "PopupWindow(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's content"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new non focusable popup window which can display the The popup does not provide any background. This should be handled by the content view.", "history": "Added in API level 1", "FullName": "public PopupWindow (View contentView)"}, "isTouchable()": {"Returns": [["boolean", "true if the popup is touchable, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setTouchable_E@"], "Permissions": [], "Description": "Indicates whether the popup window receives touch events.", "history": "Added in API level 3", "FullName": "public boolean isTouchable ()"}, "getInputMethodMode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setInputMethodMode_E@"], "Permissions": [], "Description": "Return the current value in @B_android#widget#PopupWindow#setInputMethodMode_E@.", "history": "Added in API level 3", "FullName": "public int getInputMethodMode ()"}, "update(int,int)": {"Returns": [], "Parameters": [["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the dimension of the popup window. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "Added in API level 4", "FullName": "public void update (int width, int height)"}, "PopupWindow(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window of dimension (0,0). The popup does provide a background.", "history": "Added in API level 1", "FullName": "public PopupWindow (Context context, AttributeSet attrs, int defStyleAttr)"}, "setSplitTouchEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the split touches should be enabled, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isSplitTouchEnabled_E@"], "Permissions": [], "Description": "Allows the popup window to split touches across other windows that also support split touch. When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up. When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows.", "history": "Added in API level 11", "FullName": "public void setSplitTouchEnabled (boolean enabled)"}, "PopupWindow(android.view.View, int, int, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's content"], ["int", "int: the popup's width"], ["int", "int: the popup's height"], ["boolean", "boolean: true if the popup can be focused, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new popup window which can display the The popup does not provide any background. This should be handled by the content view.", "history": "added in API level 1", "FullName": "public PopupWindow (View contentView, int width, int height, boolean focusable)"}, "update(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the new x location"], ["int", "int: the new y location"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "added in API level 1", "FullName": "public void update (int x, int y, int width, int height)"}, "getHeight()": {"Returns": [["int", "the popup height in pixels or a layout constant"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setHeight_E@"], "Permissions": [], "Description": "Returns the popup's requested height. May be a layout constant such as @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. The actual size of the popup may depend on other factors such as clipping and window layout.", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "PopupWindow(int,int)": {"Returns": [], "Parameters": [["int", "int: the popup's width"], ["int", "int: the popup's height"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window. The dimension of the window must be passed to this constructor. The popup does not provide any background. This should be handled by the content view.", "history": "Added in API level 1", "FullName": "public PopupWindow (int width, int height)"}, "setTouchInterceptor(android.view.View.OnTouchListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnTouchListener_E@", "View.OnTouchListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a callback for all touch events being dispatched to the popup window.", "history": "Added in API level 3", "FullName": "public void setTouchInterceptor (View.OnTouchListener l)"}, "showAtLocation(android.view.View, int, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: a parent view to get the @B_android#view#View#getWindowToken_E@ token from"], ["int", "int: the gravity which controls the placement of the popup window"], ["int", "int: the popup's x location offset"], ["int", "int: the popup's y location offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Display the content view in a popup window at the specified location. If the popup window cannot fit on screen, it will be clipped. See @B_android#view#WindowManager#LayoutParams_E@ for more information on how gravity and the x and y parameters are related. Specifying a gravity of @B_android#view#Gravity#NO_GRAVITY_E@ is similar to specifying Gravity.LEFT | Gravity.TOP.", "history": "added in API level 1", "FullName": "public void showAtLocation (View parent, int gravity, int x, int y)"}, "PopupWindow(android.view.View,int,int,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's content"], ["int", "int: the popup's width"], ["int", "int: the popup's height"], ["boolean", "boolean: true if the popup can be focused, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new popup window which can display the The popup does not provide any background. This should be handled by the content view.", "history": "Added in API level 1", "FullName": "public PopupWindow (View contentView, int width, int height, boolean focusable)"}, "isClippedToScreen()": {"Returns": [["boolean", "true if popup will be clipped to the screen instead of the window, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setIsClippedToScreen_E@"], "Permissions": [], "Description": "Indicates whether this popup will be clipped to the screen and not to the containing window", "history": "Added in API level 29", "FullName": "public boolean isClippedToScreen ()"}, "update()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the state of the popup window, if it is currently being displayed, from the currently set state. This includes: @B_android#widget#PopupWindow#setClippingEnabled_E@ @B_android#widget#PopupWindow#setFocusable_E@ @B_android#widget#PopupWindow#setIgnoreCheekPress_E@ @B_android#widget#PopupWindow#setInputMethodMode_E@ @B_android#widget#PopupWindow#setTouchable_E@ @B_android#widget#PopupWindow#setAnimationStyle_E@ @B_android#widget#PopupWindow#setTouchModal_E@ (boolean)} @B_android#widget#PopupWindow#setIsClippedToScreen_E@", "history": "Added in API level 3", "FullName": "public void update ()"}, "showAsDropDown(android.view.View, int, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view on which to pin the popup window"], ["int", "int: A horizontal offset from the anchor in pixels"], ["int", "int: A vertical offset from the anchor in pixels"], ["int", "int: Alignment of the popup relative to the anchor"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#dismiss_E@"], "Permissions": [], "Description": "Displays the content view in a popup window anchored to the corner of another view. The window is positioned according to the specified gravity and offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent view can be scrolled, the specified vertical gravity will be ignored and the popup will anchor itself such that it is visible. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "added in API level 19", "FullName": "public void showAsDropDown (View anchor, int xoff, int yoff, int gravity)"}, "setInputMethodMode(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getInputMethodMode_E@", "@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Control how the popup operates with an input method: one of @B_android#widget#PopupWindow#INPUT_METHOD_FROM_FOCUSABLE_E@, @B_android#widget#PopupWindow#INPUT_METHOD_NEEDED_E@, or @B_android#widget#PopupWindow#INPUT_METHOD_NOT_NEEDED_E@. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 3", "FullName": "public void setInputMethodMode (int mode)"}, "isLaidOutInScreen()": {"Returns": [["boolean", "true if the window will always be positioned in screen coordinates."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setIsLaidOutInScreen_E@"], "Permissions": [], "Description": "Indicates whether the popup window will be forced into using absolute screen coordinates for positioning.", "history": "Added in API level 29", "FullName": "public boolean isLaidOutInScreen ()"}, "getEnterTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the enter transition, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setEnterTransition_E@"], "Permissions": [], "Description": "Returns the enter transition to be used when the popup window is shown.", "history": "Added in API level 24", "FullName": "public Transition getEnterTransition ()"}, "getOverlapAnchor()": {"Returns": [["boolean", "Whether the popup should overlap its anchor."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setOverlapAnchor_E@"], "Permissions": [], "Description": "Returns whether the popup window should overlap its anchor view when displayed as a drop-down.", "history": "Added in API level 23", "FullName": "public boolean getOverlapAnchor ()"}, "showAtLocation(android.view.View,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: a parent view to get the @B_android#view#View#getWindowToken_E@ token from"], ["int", "int: the gravity which controls the placement of the popup window"], ["int", "int: the popup's x location offset"], ["int", "int: the popup's y location offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Display the content view in a popup window at the specified location. If the popup window cannot fit on screen, it will be clipped. See @B_android#view#WindowManager#LayoutParams_E@ for more information on how gravity and the x and y parameters are related. Specifying a gravity of @B_android#view#Gravity#NO_GRAVITY_E@ is similar to specifying Gravity.LEFT | Gravity.TOP.", "history": "Added in API level 1", "FullName": "public void showAtLocation (View parent, int gravity, int x, int y)"}, "setOutsideTouchable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup should receive outside touch events, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isOutsideTouchable_E@", "@B_android#widget#PopupWindow#isShowing_E@", "@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Controls whether the pop-up will be informed of touch events outside of its window. This only makes sense for pop-ups that are touchable but not focusable, which means touches outside of the window will be delivered to the window behind. The default is false. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 3", "FullName": "public void setOutsideTouchable (boolean touchable)"}, "setFocusable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup should grab focus, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isFocusable_E@", "@B_android#widget#PopupWindow#isShowing_E@", "@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Changes the focusability of the popup window. When focusable, the window will grab the focus from the current focused widget if the popup contains a focusable @B_android#view#View_E@. By default a popup window is not focusable. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 1", "FullName": "public void setFocusable (boolean focusable)"}, "setTouchModal(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to sent all outside touches to this window, false to other windows behind it"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isTouchModal_E@"], "Permissions": [], "Description": "Set whether this window is touch modal or if outside touches will be sent to other windows behind it. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 29", "FullName": "public void setTouchModal (boolean touchModal)"}, "getEpicenterBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "bounds relative to anchor view, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setEpicenterBounds_E@"], "Permissions": [], "Description": "Returns bounds which are used as a center of the enter and exit transitions. Transitions use Rect, referred to as the epicenter, to orient the direction of travel. For popup windows, the anchor view bounds are used as the default epicenter. See @B_android#transition#Transition#setEpicenterCallback_E@ for more information about how transition epicenters work.", "history": "Added in API level 29", "FullName": "public Rect getEpicenterBounds ()"}, "getMaxAvailableHeight(android.view.View, int)": {"Returns": [["int", "The maximum available height for the popup to be completely shown."]], "Parameters": [["@B_android#view#View_E@", "View: The view on which the popup window must be anchored.This value must never be null."], ["int", "int: y offset from the view's bottom edge"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum height that is available for the popup to be completely shown. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.", "history": "added in API level 3", "FullName": "public int getMaxAvailableHeight (View anchor, int yOffset)"}, "PopupWindow(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new, empty, non focusable popup window of dimension (0,0). The popup does not provide a background.", "history": "Added in API level 11", "FullName": "public PopupWindow (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getElevation()": {"Returns": [["float", "the elevation for this popup window in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setElevation_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public float getElevation ()"}, "setWindowLayoutMode(int,int)": {"Returns": [], "Parameters": [["int", "int: an explicit width measure spec mode, either @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, or 0 to use the absolute width."], ["int", "int: an explicit height measure spec mode, either @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, or 0 to use the absolute height."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#PopupWindow#setWidth_E@ and @B_android#widget#PopupWindow#setHeight_E@. Change the width and height measure specs that are given to the window manager by the popup. By default these are 0, meaning that the current width or height is requested as an explicit size from the window manager. You can supply @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to have that measure spec supplied instead, replacing the absolute width and height that has been set in the popup. If the popup is showing, calling this method will take effect only the next time the popup is shown.", "history": "Added in API level 3 Deprecated in API level 23", "FullName": "public void setWindowLayoutMode (int widthSpec, int heightSpec)"}, "setIsLaidOutInScreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup should always be positioned in screen coordinates"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isLaidOutInScreen_E@"], "Permissions": [], "Description": "Allows the popup window to force the flag @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_IN_SCREEN_E@, overriding default behavior. This will cause the popup to be positioned in absolute screen coordinates.", "history": "Added in API level 29", "FullName": "public void setIsLaidOutInScreen (boolean enabled)"}, "setAttachedInDecor(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup should be attached to the decor frame of its parent window."]], "Throws": [], "SeeAlso": ["@B_android#view#WindowManager#LayoutParams_E@"], "Permissions": [], "Description": "This will attach the popup window to the decor frame of the parent window to avoid overlaping with screen decorations like the navigation bar. Overrides the default behavior of the flag @B_android#view#WindowManager#LayoutParams#FLAG_LAYOUT_ATTACHED_IN_DECOR_E@. By default the flag is set on SDK version @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@ or greater and cleared on lesser SDK versions.", "history": "Added in API level 22", "FullName": "public void setAttachedInDecor (boolean enabled)"}, "getMaxAvailableHeight(android.view.View,int)": {"Returns": [["int", "The maximum available height for the popup to be completely shown."]], "Parameters": [["@B_android#view#View_E@", "View: The view on which the popup window must be anchored. This value must never be null."], ["int", "int: y offset from the view's bottom edge"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum height that is available for the popup to be completely shown. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.", "history": "Added in API level 3", "FullName": "public int getMaxAvailableHeight (View anchor, int yOffset)"}, "isFocusable()": {"Returns": [["boolean", "true if the popup is focusable, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setFocusable_E@"], "Permissions": [], "Description": "Indicate whether the popup window can grab the focus.", "history": "Added in API level 1", "FullName": "public boolean isFocusable ()"}, "isTouchModal()": {"Returns": [["boolean", "true if touches will be sent to this window, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setTouchModal_E@"], "Permissions": [], "Description": "Indicates whether outside touches will be sent to this window or other windows behind it", "history": "Added in API level 29", "FullName": "public boolean isTouchModal ()"}, "getAnimationStyle()": {"Returns": [["int", "the animation style to use the popup appears and disappears"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the animation style to use the popup appears and disappears", "history": "Added in API level 1", "FullName": "public int getAnimationStyle ()"}, "update(int,int,int,int,boolean)": {"Returns": [], "Parameters": [["int", "int: the new x location"], ["int", "int: the new y location"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"], ["boolean", "boolean: true to reposition the window even if the specified position already seems to correspond to the LayoutParams, false to only reposition if needed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "Added in API level 3", "FullName": "public void update (int x, int y, int width, int height, boolean force)"}, "setElevation(float)": {"Returns": [], "Parameters": [["float", "float: the popup's elevation in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getElevation_E@"], "Permissions": [], "Description": "Specifies the elevation for this popup window.", "history": "Added in API level 21", "FullName": "public void setElevation (float elevation)"}, "getBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the background drawable or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setBackgroundDrawable_E@"], "Permissions": [], "Description": "Return the drawable used as the popup window's background.", "history": "Added in API level 1", "FullName": "public Drawable getBackground ()"}, "setAnimationStyle(int)": {"Returns": [], "Parameters": [["int", "int: animation style to use when the popup appears and disappears. Set to -1 for the default animation, 0 for no animation, or a resource identifier for an explicit animation."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Change the animation style resource for this popup. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 1", "FullName": "public void setAnimationStyle (int animationStyle)"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the popup's background"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getBackground_E@"], "Permissions": [], "Description": "Specifies the background drawable for this popup window. The background can be set to null.", "history": "Added in API level 1", "FullName": "public void setBackgroundDrawable (Drawable background)"}, "getSoftInputMode()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_UNSPECIFIED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_UNCHANGED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_HIDDEN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_ALWAYS_HIDDEN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_VISIBLE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_ALWAYS_VISIBLE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_UNSPECIFIED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_RESIZE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_PAN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_NOTHING_E@, and @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_IS_FORWARD_NAVIGATION_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setSoftInputMode_E@", "@B_android#view#WindowManager#LayoutParams#softInputMode_E@"], "Permissions": [], "Description": "Returns the current value in @B_android#widget#PopupWindow#setSoftInputMode_E@.", "history": "Added in API level 4", "FullName": "public int getSoftInputMode ()"}, "setWidth(int)": {"Returns": [], "Parameters": [["int", "int: the popup width in pixels or a layout constant"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getWidth_E@", "@B_android#widget#PopupWindow#isShowing_E@"], "Permissions": [], "Description": "Sets the popup's requested width. May be a layout constant such as @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. The actual size of the popup may depend on other factors such as clipping and window layout. If the popup is showing, calling this method will take effect the next time the popup is shown.", "history": "Added in API level 1", "FullName": "public void setWidth (int width)"}, "update(android.view.View,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's anchor view"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "Added in API level 1", "FullName": "public void update (View anchor, int width, int height)"}, "showAsDropDown(android.view.View, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the view on which to pin the popup window"], ["int", "int: A horizontal offset from the anchor in pixels"], ["int", "int: A vertical offset from the anchor in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#dismiss_E@"], "Permissions": [], "Description": "Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "added in API level 1", "FullName": "public void showAsDropDown (View anchor, int xoff, int yoff)"}, "getWidth()": {"Returns": [["int", "the popup width in pixels or a layout constant"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setWidth_E@"], "Permissions": [], "Description": "Returns the popup's requested width. May be a layout constant such as @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. The actual size of the popup may depend on other factors such as clipping and window layout.", "history": "Added in API level 1", "FullName": "public int getWidth ()"}, "getMaxAvailableHeight(android.view.View)": {"Returns": [["int", "The maximum available height for the popup to be completely shown."]], "Parameters": [["@B_android#view#View_E@", "View: The view on which the popup window must be anchored. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum height that is available for the popup to be completely shown. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.", "history": "Added in API level 1", "FullName": "public int getMaxAvailableHeight (View anchor)"}, "isOutsideTouchable()": {"Returns": [["boolean", "true if the popup is outside touchable, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setOutsideTouchable_E@"], "Permissions": [], "Description": "Indicates whether the popup window will be informed of touch events outside of its window.", "history": "Added in API level 3", "FullName": "public boolean isOutsideTouchable ()"}, "PopupWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window of dimension (0,0). The popup does not provide any background. This should be handled by the content view.", "history": "Added in API level 1", "FullName": "public PopupWindow ()"}, "setIgnoreCheekPress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Set the flag on popup to ignore cheek press events; by default this flag is set to false which means the popup will not ignore cheek press dispatch events. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 1", "FullName": "public void setIgnoreCheekPress ()"}, "update(android.view.View, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's anchor view"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "added in API level 1", "FullName": "public void update (View anchor, int width, int height)"}, "setWindowLayoutType(int)": {"Returns": [], "Parameters": [["int", "int: Layout type for this window."]], "Throws": [], "SeeAlso": ["@B_android#view#WindowManager#LayoutParams#type_E@"], "Permissions": [], "Description": "Set the layout type for this window. See @B_android#view#WindowManager#LayoutParams#type_E@ for possible values.", "history": "Added in API level 23", "FullName": "public void setWindowLayoutType (int layoutType)"}, "setHeight(int)": {"Returns": [], "Parameters": [["int", "int: the popup height in pixels or a layout constant"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getHeight_E@", "@B_android#widget#PopupWindow#isShowing_E@"], "Permissions": [], "Description": "Sets the popup's requested height. May be a layout constant such as @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. The actual size of the popup may depend on other factors such as clipping and window layout. If the popup is showing, calling this method will take effect the next time the popup is shown.", "history": "Added in API level 1", "FullName": "public void setHeight (int height)"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#showAsDropDown_E@"], "Permissions": [], "Description": "Disposes of the popup window. This method can be invoked only after @B_android#widget#PopupWindow#showAsDropDown_E@ has been executed. Failing that, calling this method will have no effect.", "history": "Added in API level 1", "FullName": "public void dismiss ()"}, "isAttachedInDecor()": {"Returns": [["boolean", "true if the window will be attached to the decor frame of its parent window."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setAttachedInDecor_E@", "@B_android#view#WindowManager#LayoutParams_E@"], "Permissions": [], "Description": "Indicates whether the popup window will be attached in the decor frame of its parent window.", "history": "Added in API level 22", "FullName": "public boolean isAttachedInDecor ()"}, "getWindowLayoutType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setWindowLayoutType_E@"], "Permissions": [], "Description": "Returns the layout type for this window.", "history": "Added in API level 23", "FullName": "public int getWindowLayoutType ()"}, "isShowing()": {"Returns": [["boolean", "true if the popup is showing, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicate whether this popup window is showing on screen.", "history": "Added in API level 1", "FullName": "public boolean isShowing ()"}, "setOverlapAnchor(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the popup should overlap its anchor."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getOverlapAnchor_E@", "@B_android#widget#PopupWindow#isShowing_E@"], "Permissions": [], "Description": "Sets whether the popup window should overlap its anchor view when displayed as a drop-down. If the popup is showing, calling this method will take effect only the next time the popup is shown.", "history": "Added in API level 23", "FullName": "public void setOverlapAnchor (boolean overlapAnchor)"}, "PopupWindow(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty, non focusable popup window of dimension (0,0). The popup does provide a background.", "history": "Added in API level 1", "FullName": "public PopupWindow (Context context, AttributeSet attrs)"}, "setTouchable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the popup should receive touch events, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isTouchable_E@", "@B_android#widget#PopupWindow#isShowing_E@", "@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Changes the touchability of the popup window. When touchable, the window will receive touch events, otherwise touch events will go to the window below it. By default the window is touchable. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 3", "FullName": "public void setTouchable (boolean touchable)"}, "setExitTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: the exit transition, or null to clear This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getExitTransition_E@"], "Permissions": [], "Description": "Sets the exit transition to be used when the popup window is dismissed.", "history": "Added in API level 23", "FullName": "public void setExitTransition (Transition exitTransition)"}, "update(android.view.View,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's anchor view"], ["int", "int: x offset from the view's left edge"], ["int", "int: y offset from the view's bottom edge"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "Added in API level 1", "FullName": "public void update (View anchor, int xoff, int yoff, int width, int height)"}, "update(int, int)": {"Returns": [], "Parameters": [["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the dimension of the popup window. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "added in API level 4", "FullName": "public void update (int width, int height)"}, "PopupWindow(android.view.View,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's content"], ["int", "int: the popup's width"], ["int", "int: the popup's height"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new non focusable popup window which can display the The popup does not provide any background. This should be handled by the content view.", "history": "Added in API level 1", "FullName": "public PopupWindow (View contentView, int width, int height)"}, "isClippingEnabled()": {"Returns": [["boolean", "true if the clipping is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setClippingEnabled_E@"], "Permissions": [], "Description": "Indicates whether clipping of the popup window is enabled.", "history": "Added in API level 3", "FullName": "public boolean isClippingEnabled ()"}, "setWindowLayoutMode(int, int)": {"Returns": [], "Parameters": [["int", "int: an explicit width measure spec mode, either @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, or 0 to use the absolute width."], ["int", "int: an explicit height measure spec mode, either @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, or 0 to use the absolute height."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#PopupWindow#setWidth_E@ and @B_android#widget#PopupWindow#setHeight_E@. Change the width and height measure specs that are given to the window manager by the popup. By default these are 0, meaning that the current width or height is requested as an explicit size from the window manager. You can supply @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to have that measure spec supplied instead, replacing the absolute width and height that has been set in the popup. If the popup is showing, calling this method will take effect only the next time the popup is shown.", "history": "added in API level 3", "FullName": "public void setWindowLayoutMode (int widthSpec, int heightSpec)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the new content for the popup"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getContentView_E@", "@B_android#widget#PopupWindow#isShowing_E@"], "Permissions": [], "Description": "Change the popup's content. The content is represented by an instance of @B_android#view#View_E@. This method has no effect if called when the popup is showing.", "history": "Added in API level 1", "FullName": "public void setContentView (View contentView)"}, "update(android.view.View, int, int, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the popup's anchor view"], ["int", "int: x offset from the view's left edge"], ["int", "int: y offset from the view's bottom edge"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly.", "history": "added in API level 1", "FullName": "public void update (View anchor, int xoff, int yoff, int width, int height)"}, "update(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the new x location"], ["int", "int: the new y location"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "Added in API level 1", "FullName": "public void update (int x, int y, int width, int height)"}, "setOnDismissListener(android.widget.PopupWindow.OnDismissListener)": {"Returns": [], "Parameters": [["@B_android#widget#PopupWindow#OnDismissListener_E@", "PopupWindow.OnDismissListener: The listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called when the window is dismissed.", "history": "Added in API level 1", "FullName": "public void setOnDismissListener (PopupWindow.OnDismissListener onDismissListener)"}, "getExitTransition()": {"Returns": [["@B_android#transition#Transition_E@", "the exit transition, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#setExitTransition_E@"], "Permissions": [], "Description": "Returns the exit transition to be used when the popup window is dismissed.", "history": "Added in API level 24", "FullName": "public Transition getExitTransition ()"}, "setClippingEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: false if the window should be allowed to extend outside of the screen"]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#isShowing_E@", "@B_android#widget#PopupWindow#isClippingEnabled_E@", "@B_android#widget#PopupWindow#update_E@"], "Permissions": [], "Description": "Allows the popup window to extend beyond the bounds of the screen. By default the window is clipped to the screen boundaries. Setting this to false will allow windows to be accurately positioned. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the @B_android#widget#PopupWindow#update_E@ methods.", "history": "Added in API level 3", "FullName": "public void setClippingEnabled (boolean enabled)"}, "setSoftInputMode(int)": {"Returns": [], "Parameters": [["int", "int: The desired mode, see @B_android#view#WindowManager#LayoutParams#softInputMode_E@ for the full list Value is either 0 or a combination of @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_UNSPECIFIED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_UNCHANGED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_HIDDEN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_ALWAYS_HIDDEN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_VISIBLE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_STATE_ALWAYS_VISIBLE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_UNSPECIFIED_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_RESIZE_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_PAN_E@, @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_ADJUST_NOTHING_E@, and @B_android#view#WindowManager#LayoutParams#SOFT_INPUT_IS_FORWARD_NAVIGATION_E@"]], "Throws": [], "SeeAlso": ["@B_android#view#WindowManager#LayoutParams#softInputMode_E@", "@B_android#widget#PopupWindow#getSoftInputMode_E@"], "Permissions": [], "Description": "Sets the operating mode for the soft input area.", "history": "Added in API level 4", "FullName": "public void setSoftInputMode (int mode)"}, "getMaxAvailableHeight(android.view.View,int,boolean)": {"Returns": [["int", "The maximum available height for the popup to be completely shown."]], "Parameters": [["@B_android#view#View_E@", "View: The view on which the popup window must be anchored. This value must never be null."], ["int", "int: y offset from the view's bottom edge"], ["boolean", "boolean: if true, the height returned will be all the way to the bottom of the display, ignoring any bottom decorations"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum height that is available for the popup to be completely shown, optionally ignoring any bottom decorations such as the input method. It is recommended that this height be the maximum for the popup's height, otherwise it is possible that the popup will be clipped.", "history": "Added in API level 24", "FullName": "public int getMaxAvailableHeight (View anchor, int yOffset, boolean ignoreBottomDecorations)"}, "setEnterTransition(android.transition.Transition)": {"Returns": [], "Parameters": [["@B_android#transition#Transition_E@", "Transition: the enter transition, or null to clear This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#PopupWindow#getEnterTransition_E@"], "Permissions": [], "Description": "Sets the enter transition to be used when the popup window is shown.", "history": "Added in API level 23", "FullName": "public void setEnterTransition (Transition enterTransition)"}, "update(int, int, int, int, boolean)": {"Returns": [], "Parameters": [["int", "int: the new x location"], ["int", "int: the new y location"], ["int", "int: the new width in pixels, must be >= 0 or -1 to ignore"], ["int", "int: the new height in pixels, must be >= 0 or -1 to ignore"], ["boolean", "boolean: true to reposition the window even if the specified position already seems to correspond to the LayoutParams, false to only reposition if needed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for @B_android#widget#PopupWindow#update_E@.", "history": "added in API level 3", "FullName": "public void update (int x, int y, int width, int height, boolean force)"}}, "Inheritance": [], "ClassName": "android.widget.PopupWindow", "ClassDesc": "This class represents a popup window that can be used to display an arbitrary view. The popup window is a floating container that appears on top of the current activity. On all versions of Android, popup window enter and exit animations may be specified by calling @B_android#widget#PopupWindow#setAnimationStyle_E@ and passing the resource ID for an animation style that defines windowEnterAnimation and windowExitAnimation. For example, passing @B_android#R#style#Animation_Dialog_E@ will give a scale and alpha animation. A window animation style may also be specified in the popup window's style XML via the @B_android#R#styleable#PopupWindow_popupAnimationStyle_E@ attribute. Starting with API 23, more complex popup window enter and exit transitions may be specified by calling either @B_android#widget#PopupWindow#setEnterTransition_E@ or @B_android#widget#PopupWindow#setExitTransition_E@ and passing a @B_android#transition#Transition_E@. Popup enter and exit transitions may also be specified in the popup window's style XML via the @B_android#R#styleable#PopupWindow_popupEnterTransition_E@ and @B_android#R#styleable#PopupWindow_popupExitTransition_E@ attributes, respectively."}