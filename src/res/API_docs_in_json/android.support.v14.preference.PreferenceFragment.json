{"Functions": {"scrollToPreference(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "void scrollToPreference (String key)"}, "getListView()": {"Returns": [["@B_android#support#v7#widget#RecyclerView_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "RecyclerView getListView ()"}, "onCreateLayoutManager()": {"Returns": [["@B_android#support#v7#widget#RecyclerView#LayoutManager_E@", "A new @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from @B_android#support#v14#preference#PreferenceFragment#onCreateRecyclerView_E@ to create the @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ for the created @B_android#support#v7#widget#RecyclerView_E@.", "history": "added in version 23.0.0", "FullName": "RecyclerView.LayoutManager onCreateLayoutManager ()"}, "findPreference(java.lang.CharSequence)": {"Returns": [["@B_android#support#v7#preference#Preference_E@", "The @B_android#support#v7#preference#Preference_E@ with the key, or null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The key of the preference to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#preference#PreferenceGroup#findPreference_E@"], "Permissions": [], "Description": "Finds a @B_android#support#v7#preference#Preference_E@ based on its key.", "history": "added in version 23.0.0", "FullName": "Preference findPreference (CharSequence key)"}, "addPreferencesFromResource(int)": {"Returns": [], "Parameters": [["int", "int: The XML resource ID to inflate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates the given XML resource and adds the preference hierarchy to the current preference hierarchy.", "history": "added in version 23.0.0", "FullName": "void addPreferencesFromResource (int preferencesResId)"}, "PreferenceFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "PreferenceFragment ()"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#app#Fragment#onStop_E@ and before @B_android#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent.", "history": "", "FullName": "void onDestroyView ()"}, "onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#app#Fragment#onCreateView_E@ and before @B_android#app#Fragment#onViewStateRestored_E@.", "history": "", "FullName": "void onActivityCreated (Bundle savedInstanceState)"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#app#Fragment#onCreate_E@, @B_android#app#Fragment#onCreateView_E@, and @B_android#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "", "FullName": "void onSaveInstanceState (Bundle outState)"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle.", "history": "", "FullName": "void onStart ()"}, "setDivider(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable that will be drawn between each item in the list. @B_android#support#v14#preference#PreferenceFragment#setDividerHeight_E@.", "history": "added in version 23.2.0", "FullName": "void setDivider (Drawable divider)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#app#Fragment#onAttach_E@ and before @B_android#app#Fragment#onCreateView_E@, but is not called if the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@). Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#app#Fragment#onActivityCreated_E@. If your app's targetSdkVersion is @B_android#os#Build#VERSION_CODES#M_E@ or lower, child fragments being restored from the savedInstanceState are restored after onCreate returns. When targeting @B_android#os#Build#VERSION_CODES#N_E@ or above and running on an N or newer platform version they are restored by Fragment.onCreate.", "history": "", "FullName": "void onCreate (Bundle savedInstanceState)"}, "setPreferencesFromResource(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The XML resource ID to inflate."], ["@B_java#lang#String_E@", "String: The preference key of the @B_android#support#v7#preference#PreferenceScreen_E@ to use as the root of the preference hierarchy, or null to use the root @B_android#support#v7#preference#PreferenceScreen_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates the given XML resource and replaces the current preference hierarchy (if any) with the preference hierarchy rooted at key.", "history": "added in version 23.0.0", "FullName": "void setPreferencesFromResource (int preferencesResId, String key)"}, "getPreferenceScreen()": {"Returns": [["@B_android#support#v7#preference#PreferenceScreen_E@", "The @B_android#support#v7#preference#PreferenceScreen_E@ that is the root of the preference hierarchy."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the root of the preference hierarchy that this fragment is showing.", "history": "added in version 23.0.0", "FullName": "PreferenceScreen getPreferenceScreen ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle.", "history": "", "FullName": "void onStop ()"}, "getPreferenceManager()": {"Returns": [["@B_android#support#v7#preference#PreferenceManager_E@", "The @B_android#support#v7#preference#PreferenceManager_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#support#v7#preference#PreferenceManager_E@ used by this fragment.", "history": "added in version 23.0.0", "FullName": "PreferenceManager getPreferenceManager ()"}, "setDividerHeight(int)": {"Returns": [], "Parameters": [["int", "int: The new height of the divider in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the height of the divider that will be drawn between each item in the list. Calling this will override the intrinsic height as set by @B_android#support#v14#preference#PreferenceFragment#setDivider_E@", "history": "added in version 23.2.0", "FullName": "void setDividerHeight (int height)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#app#Fragment_E@"], "ClassName": "android.support.v14.preference.PreferenceFragment", "ClassDesc": "Shows a hierarchy of @B_android#support#v7#preference#Preference_E@ objects as lists. These preferences will automatically save to https:##developer#android#com@B_android#content#SharedPreferences_E@ as the user interacts with them. To retrieve an instance of https:##developer#android#com@B_android#content#SharedPreferences_E@ that the preference hierarchy in this fragment will use, call @B_android#support#v7#preference#PreferenceManager#getDefaultSharedPreferences_E@ with a context in the same package as this fragment. Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. A @B_android#support#v7#preference#PreferenceScreen_E@ object should be at the top of the preference hierarchy. Furthermore, subsequent @B_android#support#v7#preference#PreferenceScreen_E@ in the hierarchy denote a screen break--that is the preferences contained within subsequent @B_android#support#v7#preference#PreferenceScreen_E@ should be shown on another screen. The preference framework handles this by calling @B_android#support#v14#preference#PreferenceFragment#onNavigateToScreen_E@. The preference hierarchy can be formed in multiple ways: From an XML file specifying the hierarchy From different https:##developer#android#com@B_android#app#Activity_E@ that each specify its own preferences in an XML file via https:##developer#android#com@B_android#app#Activity_E@ meta-data From an object hierarchy rooted with @B_android#support#v7#preference#PreferenceScreen_E@ To inflate from XML, use the @B_android#support#v14#preference#PreferenceFragment#addPreferencesFromResource_E@. The root element should be a @B_android#support#v7#preference#PreferenceScreen_E@. Subsequent elements can point to actual @B_android#support#v7#preference#Preference_E@ subclasses. As mentioned above, subsequent @B_android#support#v7#preference#PreferenceScreen_E@ in the hierarchy will result in the screen break. To specify an object hierarchy rooted with @B_android#support#v7#preference#PreferenceScreen_E@, use @B_android#support#v14#preference#PreferenceFragment#setPreferenceScreen_E@. As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see @B_android#support#v14#preference#PreferenceFragment#onPreferenceTreeClick_E@. The following sample code shows a simple preference fragment that is populated from a resource. The resource it loads is: The fragment implementation itself simply populates the preferences when created. Note that the preferences framework takes care of loading the current values out of the app preferences and writing them when changed:"}