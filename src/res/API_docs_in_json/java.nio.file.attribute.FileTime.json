{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation of this file time"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of this FileTime. The string is returned in the [.s+]\" represents a dot followed by one of more digits for the decimal fraction of a second. It is only present when the decimal fraction of a second is not zero. For example, FileTime.fromMillis(1234567890000L).toString() yields \"2009-02-13T23:31:30Z\", and FileTime.fromMillis(1234567890123L).toString() yields \"2009-02-13T23:31:30.123Z\". A FileTime is primarily intended to represent the value of a file's time stamp. Where used to represent 0001\" or greater than \"9999\" then this method deviates from ISO 8601 in the same manner as the 0001\" is \"-0001\".", "history": "Added in API level 26", "FullName": "public String toString ()"}, "compareTo(java.nio.file.attribute.FileTime)": {"Returns": [["int", "0 if this FileTime is equal to other, a value less than 0 if this FileTime represents a time that is before other, and a value greater than 0 if this FileTime represents a time that is after other"]], "Parameters": [["@B_java#nio#file#attribute#FileTime_E@", "FileTime: the other FileTime to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the value of two FileTime objects for order.", "history": "Added in API level 26", "FullName": "public int compareTo (FileTime other)"}, "to(java.util.concurrent.TimeUnit)": {"Returns": [["long", "value in the given unit of granularity, since the epoch since the epoch (1970-01-01T00:00:00Z); can be negative"]], "Parameters": [["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the unit of granularity for the return value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value at the given unit of granularity. Conversion from a coarser granularity that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive.", "history": "Added in API level 26", "FullName": "public long to (TimeUnit unit)"}, "toMillis()": {"Returns": [["long", "the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value in milliseconds. Conversion from a coarser granularity that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive.", "history": "Added in API level 26", "FullName": "public long toMillis ()"}, "fromMillis(long)": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the given value"]], "Parameters": [["long", "long: the value, in milliseconds, since the epoch (1970-01-01T00:00:00Z); can be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a FileTime representing the given value in milliseconds.", "history": "Added in API level 26", "FullName": "public static FileTime fromMillis (long value)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, the given object is a FileTime that represents the same time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests this FileTime for equality with the given object. The result is true if and only if the argument is not null and is a FileTime that represents the same time. This method satisfies the general contract of the Object.equals method.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "toInstant()": {"Returns": [["@B_java#time#Instant_E@", "an instant representing the same point on the time-line as this FileTime object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this FileTime object to an Instant. The conversion creates an Instant that represents the same point on the time-line as this FileTime. FileTime can store points on the time-line further in the future and further in the past than Instant. Conversion from such further time points saturates to @B_java#time#Instant#MIN_E@ if earlier than Instant.MIN or @B_java#time#Instant#MAX_E@ if later than Instant.MAX.", "history": "Added in API level 26", "FullName": "public Instant toInstant ()"}, "from(long, java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the given value"]], "Parameters": [["long", "long: the value since the epoch (1970-01-01T00:00:00Z); can be negative"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the unit of granularity to interpret the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a FileTime representing a value at the given unit of granularity.", "history": "added in API level 26", "FullName": "public static FileTime from (long value, TimeUnit unit)"}, "from(long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the given value"]], "Parameters": [["long", "long: the value since the epoch (1970-01-01T00:00:00Z); can be negative"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the unit of granularity to interpret the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a FileTime representing a value at the given unit of granularity.", "history": "Added in API level 26", "FullName": "public static FileTime from (long value, TimeUnit unit)"}, "from(java.time.Instant)": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the same point on the time-line as the provided instant"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to convert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a FileTime representing the same point of time value on the time-line as the provided Instant object.", "history": "Added in API level 26", "FullName": "public static FileTime from (Instant instant)"}, "hashCode()": {"Returns": [["int", "the hash-code value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes a hash code for this file time. The hash code is based upon the value represented, and satisfies the general contract of the @B_java#lang#Object#hashCode_E@ method.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.FileTime", "ClassDesc": "Represents the value of a file's time stamp attribute. For example, it may represent the time that the file was last @B_java#nio#file#attribute#BasicFileAttributes#lastModifiedTime_E@, @B_java#nio#file#attribute#BasicFileAttributes#lastAccessTime_E@, or @B_java#nio#file#attribute#BasicFileAttributes#creationTime_E@. Instances of this class are immutable."}