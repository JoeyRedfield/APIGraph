{"Functions": {"setIndicatorBoundsRelative(int, int)": {"Returns": [], "Parameters": [["int", "int: The start position (relative to the start bounds of this View) to start drawing the indicator."], ["int", "int: The end position (relative to the end bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setChildIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the relative drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit).", "history": "added in API level 18", "FullName": "public void setIndicatorBoundsRelative (int start, int end)"}, "performItemClick(android.view.View,int,long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "Added in API level 1", "FullName": "public boolean performItemClick (View v, int position, long id)"}, "setSelectedChild(int,int,boolean)": {"Returns": [["boolean", "Whether the selection was successfully set on the child."]], "Parameters": [["int", "int: The position of the group that contains the child."], ["int", "int: The position of the child within the group."], ["boolean", "boolean: Whether the child's group should be expanded if it is collapsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified child. If the child is in a collapsed group, the group will only be expanded and child subsequently selected if shouldExpandGroup is set to true, otherwise the method will return false.", "history": "Added in API level 1", "FullName": "public boolean setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup)"}, "getPackedPositionType(long)": {"Returns": [["int", "The type of the position contained within the packed position, either @B_android#widget#ExpandableListView#PACKED_POSITION_TYPE_CHILD_E@, @B_android#widget#ExpandableListView#PACKED_POSITION_TYPE_GROUP_E@, or @B_android#widget#ExpandableListView#PACKED_POSITION_TYPE_NULL_E@."]], "Parameters": [["long", "long: The packed position for which to return the type."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the type of a packed position. See @B_android#widget#ExpandableListView#getPackedPositionForChild_E@.", "history": "Added in API level 1", "FullName": "public static int getPackedPositionType (long packedPosition)"}, "setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListView#OnChildClickListener_E@", "ExpandableListView.OnChildClickListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setOnChildClickListener (ExpandableListView.OnChildClickListener onChildClickListener)"}, "getAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "The adapter currently used to display data in this ListView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method should not be used, use @B_android#widget#ExpandableListView#getExpandableListAdapter_E@.", "history": "Added in API level 1", "FullName": "public ListAdapter getAdapter ()"}, "setChildIndicatorBoundsRelative(int,int)": {"Returns": [], "Parameters": [["int", "int: The start position (relative to the start bounds of this View) to start drawing the indicator."], ["int", "int: The end position (relative to the end bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the relative drawing bounds for the child indicator. For either, you can specify @B_android#widget#ExpandableListView#CHILD_INDICATOR_INHERIT_E@ to use inherit from the general indicator's bounds.", "history": "Added in API level 18", "FullName": "public void setChildIndicatorBoundsRelative (int start, int end)"}, "setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListView#OnGroupClickListener_E@", "ExpandableListView.OnGroupClickListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setOnGroupClickListener (ExpandableListView.OnGroupClickListener onGroupClickListener)"}, "setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "AdapterView.OnItemClickListener: The callback that will be invoked. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when an item has been clicked and the caller prefers to receive a ListView-style position instead of a group and/or child position. In most cases, the caller should use @B_android#widget#ExpandableListView#setOnGroupClickListener_E@ and/or @B_android#widget#ExpandableListView#setOnChildClickListener_E@. Register a callback to be invoked when an item in this AdapterView has been clicked.", "history": "Added in API level 1", "FullName": "public void setOnItemClickListener (AdapterView.OnItemClickListener l)"}, "getPackedPositionForChild(int, int)": {"Returns": [["long", "The packed position representation of the child (and parent group)."]], "Parameters": [["int", "int: The child's parent group's position."], ["int", "int: The child position within the group."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the packed position representation of a child's position. In general, a packed position should be used in situations where the position given to/returned from an @B_android#widget#ExpandableListAdapter_E@ or @B_android#widget#ExpandableListView_E@ method can either be a child or group. The two positions are packed into a single long which can be unpacked using @B_android#widget#ExpandableListView#getPackedPositionChild_E@, @B_android#widget#ExpandableListView#getPackedPositionGroup_E@, and @B_android#widget#ExpandableListView#getPackedPositionType_E@.", "history": "added in API level 1", "FullName": "public static long getPackedPositionForChild (int groupPosition, int childPosition)"}, "setIndicatorBounds(int, int)": {"Returns": [], "Parameters": [["int", "int: The left position (relative to the left bounds of this View) to start drawing the indicator."], ["int", "int: The right position (relative to the left bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setChildIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit).", "history": "added in API level 1", "FullName": "public void setIndicatorBounds (int left, int right)"}, "ExpandableListView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ExpandableListView (Context context)"}, "setIndicatorBoundsRelative(int,int)": {"Returns": [], "Parameters": [["int", "int: The start position (relative to the start bounds of this View) to start drawing the indicator."], ["int", "int: The end position (relative to the end bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setChildIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the relative drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit).", "history": "Added in API level 18", "FullName": "public void setIndicatorBoundsRelative (int start, int end)"}, "collapseGroup(int)": {"Returns": [["boolean", "True if the group was collapsed, false otherwise (if the group was already collapsed, this will return false)"]], "Parameters": [["int", "int: position of the group to collapse"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Collapse a group in the grouped list view", "history": "Added in API level 1", "FullName": "public boolean collapseGroup (int groupPos)"}, "setGroupIndicator(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to be used as an indicator. If the group is empty, the state @B_android#R#attr#state_empty_E@ will be set. If the group is expanded, the state @B_android#R#attr#state_expanded_E@ will be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the indicator to be drawn next to a group.", "history": "Added in API level 1", "FullName": "public void setGroupIndicator (Drawable groupIndicator)"}, "getSelectedPosition()": {"Returns": [["long", "A packed position containing the currently selected group or child's position and type. #PACKED_POSITION_VALUE_NULL if no selection or if selection is on a header or a footer item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the position of the currently selected group or child (along with its type). Can return @B_android#widget#ExpandableListView#PACKED_POSITION_VALUE_NULL_E@ if no selection.", "history": "Added in API level 1", "FullName": "public long getSelectedPosition ()"}, "expandGroup(int, boolean)": {"Returns": [["boolean", "True if the group was expanded, false otherwise (if the group was already expanded, this will return false)"]], "Parameters": [["int", "int: the group to be expanded"], ["boolean", "boolean: true if the expanding group should be animated in"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Expand a group in the grouped list view", "history": "added in API level 14", "FullName": "public boolean expandGroup (int groupPos, boolean animate)"}, "performItemClick(android.view.View, int, long)": {"Returns": [["boolean", "True if there was an assigned OnItemClickListener that was called, false otherwise is returned."]], "Parameters": [["@B_android#view#View_E@", "View: The view within the AdapterView that was clicked."], ["int", "int: The position of the view in the adapter."], ["long", "long: The row id of the item that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call the OnItemClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "added in API level 1", "FullName": "public boolean performItemClick (View v, int position, long id)"}, "setSelectedGroup(int)": {"Returns": [], "Parameters": [["int", "int: The position of the group that should be selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified group.", "history": "Added in API level 1", "FullName": "public void setSelectedGroup (int groupPosition)"}, "setSelectedChild(int, int, boolean)": {"Returns": [["boolean", "Whether the selection was successfully set on the child."]], "Parameters": [["int", "int: The position of the group that contains the child."], ["int", "int: The position of the child within the group."], ["boolean", "boolean: Whether the child's group should be expanded if it is collapsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selection to the specified child. If the child is in a collapsed group, the group will only be expanded and child subsequently selected if shouldExpandGroup is set to true, otherwise the method will return false.", "history": "added in API level 1", "FullName": "public boolean setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup)"}, "setAdapter(android.widget.ExpandableListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListAdapter_E@", "ExpandableListAdapter: The adapter that provides data to this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the adapter that provides data to this view.", "history": "Added in API level 1", "FullName": "public void setAdapter (ExpandableListAdapter adapter)"}, "expandGroup(int)": {"Returns": [["boolean", "True if the group was expanded, false otherwise (if the group was already expanded, this will return false)"]], "Parameters": [["int", "int: the group to be expanded"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Expand a group in the grouped list view", "history": "Added in API level 1", "FullName": "public boolean expandGroup (int groupPos)"}, "setAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter: The ListAdapter which is responsible for maintaining the data backing this list and for producing a view to represent an item in that data set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This overloaded method should not be used, instead use @B_android#widget#ExpandableListView#setAdapter_E@. Sets the data behind this ListView. The adapter passed to this method may be wrapped by a @B_android#widget#WrapperListAdapter_E@, depending on the ListView features currently in use. For instance, adding headers and/or footers will cause the adapter to be wrapped.", "history": "Added in API level 1", "FullName": "public void setAdapter (ListAdapter adapter)"}, "getExpandableListAdapter()": {"Returns": [["@B_android#widget#ExpandableListAdapter_E@", "The adapter that provides data to this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the adapter that provides data to this view.", "history": "Added in API level 1", "FullName": "public ExpandableListAdapter getExpandableListAdapter ()"}, "getSelectedId()": {"Returns": [["long", "The ID of the currently selected group or child. -1 if no selection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ID of the currently selected group or child. Can return -1 if no selection.", "history": "Added in API level 1", "FullName": "public long getSelectedId ()"}, "setChildIndicatorBounds(int, int)": {"Returns": [], "Parameters": [["int", "int: The left position (relative to the left bounds of this View) to start drawing the indicator."], ["int", "int: The right position (relative to the left bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the drawing bounds for the child indicator. For either, you can specify @B_android#widget#ExpandableListView#CHILD_INDICATOR_INHERIT_E@ to use inherit from the general indicator's bounds.", "history": "added in API level 1", "FullName": "public void setChildIndicatorBounds (int left, int right)"}, "getFlatListPosition(long)": {"Returns": [["int", "The flat list position for the given child or group."]], "Parameters": [["long", "long: The group and/or child positions to be converted in packed position representation. Use @B_android#widget#ExpandableListView#getPackedPositionForChild_E@ or @B_android#widget#ExpandableListView#getPackedPositionForGroup_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a group and/or child position to a flat list position. This is useful in situations where the caller needs to use the underlying @B_android#widget#ListView_E@'s methods.", "history": "Added in API level 1", "FullName": "public int getFlatListPosition (long packedPosition)"}, "setChildIndicator(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to be used as an indicator. If the child is the last child for a group, the state @B_android#R#attr#state_last_E@ will be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the indicator to be drawn next to a child.", "history": "Added in API level 1", "FullName": "public void setChildIndicator (Drawable childIndicator)"}, "ExpandableListView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ExpandableListView (Context context, AttributeSet attrs)"}, "getPackedPositionForChild(int,int)": {"Returns": [["long", "The packed position representation of the child (and parent group)."]], "Parameters": [["int", "int: The child's parent group's position."], ["int", "int: The child position within the group."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the packed position representation of a child's position. In general, a packed position should be used in situations where the position given to/returned from an @B_android#widget#ExpandableListAdapter_E@ or @B_android#widget#ExpandableListView_E@ method can either be a child or group. The two positions are packed into a single long which can be unpacked using @B_android#widget#ExpandableListView#getPackedPositionChild_E@, @B_android#widget#ExpandableListView#getPackedPositionGroup_E@, and @B_android#widget#ExpandableListView#getPackedPositionType_E@.", "history": "Added in API level 1", "FullName": "public static long getPackedPositionForChild (int groupPosition, int childPosition)"}, "setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListView#OnGroupCollapseListener_E@", "ExpandableListView.OnGroupCollapseListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setOnGroupCollapseListener (ExpandableListView.OnGroupCollapseListener onGroupCollapseListener)"}, "ExpandableListView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ExpandableListView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "ExpandableListView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ExpandableListView (Context context, AttributeSet attrs, int defStyleAttr)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "getPackedPositionForGroup(int)": {"Returns": [["long", "The packed position representation of the group."]], "Parameters": [["int", "int: The child's parent group's position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the packed position representation of a group's position. See @B_android#widget#ExpandableListView#getPackedPositionForChild_E@.", "history": "Added in API level 1", "FullName": "public static long getPackedPositionForGroup (int groupPosition)"}, "getExpandableListPosition(int)": {"Returns": [["long", "The group and/or child position for the given flat list position in packed position representation. #PACKED_POSITION_VALUE_NULL if the position corresponds to a header or a footer item."]], "Parameters": [["int", "int: The flat list position to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a flat list position (the raw position of an item (child or group) in the list) to a group and/or child position (represented in a packed position). This is useful in situations where the caller needs to use the underlying @B_android#widget#ListView_E@'s methods. Use @B_android#widget#ExpandableListView#getPackedPositionType_E@ , @B_android#widget#ExpandableListView#getPackedPositionChild_E@, @B_android#widget#ExpandableListView#getPackedPositionGroup_E@ to unpack.", "history": "Added in API level 1", "FullName": "public long getExpandableListPosition (int flatListPosition)"}, "getPackedPositionChild(long)": {"Returns": [["int", "The child position portion of the packed position. If this does not contain a child, returns -1."]], "Parameters": [["long", "long: The packed position from which the child position will be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the child position from a packed position that is of @B_android#widget#ExpandableListView#PACKED_POSITION_TYPE_CHILD_E@ type (use @B_android#widget#ExpandableListView#getPackedPositionType_E@). To get the group that this child belongs to, use @B_android#widget#ExpandableListView#getPackedPositionGroup_E@. See @B_android#widget#ExpandableListView#getPackedPositionForChild_E@.", "history": "Added in API level 1", "FullName": "public static int getPackedPositionChild (long packedPosition)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#ExpandableListView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "setChildDivider(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable that will be drawn adjacent to every child in the list. This will be drawn using the same height as the normal divider (@B_android#widget#ListView#setDivider_E@) or if it does not have an intrinsic height, the height set by @B_android#widget#ListView#setDividerHeight_E@.", "history": "Added in API level 1", "FullName": "public void setChildDivider (Drawable childDivider)"}, "expandGroup(int,boolean)": {"Returns": [["boolean", "True if the group was expanded, false otherwise (if the group was already expanded, this will return false)"]], "Parameters": [["int", "int: the group to be expanded"], ["boolean", "boolean: true if the expanding group should be animated in"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Expand a group in the grouped list view", "history": "Added in API level 14", "FullName": "public boolean expandGroup (int groupPos, boolean animate)"}, "setChildIndicatorBounds(int,int)": {"Returns": [], "Parameters": [["int", "int: The left position (relative to the left bounds of this View) to start drawing the indicator."], ["int", "int: The right position (relative to the left bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the drawing bounds for the child indicator. For either, you can specify @B_android#widget#ExpandableListView#CHILD_INDICATOR_INHERIT_E@ to use inherit from the general indicator's bounds.", "history": "Added in API level 1", "FullName": "public void setChildIndicatorBounds (int left, int right)"}, "setIndicatorBounds(int,int)": {"Returns": [], "Parameters": [["int", "int: The left position (relative to the left bounds of this View) to start drawing the indicator."], ["int", "int: The right position (relative to the left bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setChildIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit).", "history": "Added in API level 1", "FullName": "public void setIndicatorBounds (int left, int right)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "isGroupExpanded(int)": {"Returns": [["boolean", "Whether the group is currently expanded."]], "Parameters": [["int", "int: The group to check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the given group is currently expanded.", "history": "Added in API level 1", "FullName": "public boolean isGroupExpanded (int groupPosition)"}, "getPackedPositionGroup(long)": {"Returns": [["int", "The group position portion of the packed position. If this does not contain a group, returns -1."]], "Parameters": [["long", "long: The packed position from which the group position will be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the group position from a packed position. See @B_android#widget#ExpandableListView#getPackedPositionForChild_E@.", "history": "Added in API level 1", "FullName": "public static int getPackedPositionGroup (long packedPosition)"}, "setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)": {"Returns": [], "Parameters": [["@B_android#widget#ExpandableListView#OnGroupExpandListener_E@", "ExpandableListView.OnGroupExpandListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setOnGroupExpandListener (ExpandableListView.OnGroupExpandListener onGroupExpandListener)"}, "setChildIndicatorBoundsRelative(int, int)": {"Returns": [], "Parameters": [["int", "int: The start position (relative to the start bounds of this View) to start drawing the indicator."], ["int", "int: The end position (relative to the end bounds of this View) to end the drawing of the indicator."]], "Throws": [], "SeeAlso": ["@B_android#widget#ExpandableListView#setIndicatorBounds_E@"], "Permissions": [], "Description": "Sets the relative drawing bounds for the child indicator. For either, you can specify @B_android#widget#ExpandableListView#CHILD_INDICATOR_INHERIT_E@ to use inherit from the general indicator's bounds.", "history": "added in API level 18", "FullName": "public void setChildIndicatorBoundsRelative (int start, int end)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@", "@B_android#widget#AbsListView_E@", "@B_android#widget#ListView_E@"], "ClassName": "android.widget.ExpandableListView", "ClassDesc": "A view that shows items in a vertically scrolling two-level list. This differs from the @B_android#widget#ListView_E@ by allowing two levels: groups which can individually be expanded to show its children. The items come from the @B_android#widget#ExpandableListAdapter_E@ associated with this view. Expandable lists are able to show an indicator beside each item to display the item's current state (the states are usually one of expanded group, collapsed group, child, or last child). Use @B_android#widget#ExpandableListView#setChildIndicator_E@ or @B_android#widget#ExpandableListView#setGroupIndicator_E@ (or the corresponding XML attributes) to set these indicators (see the docs for each method to see additional state that each Drawable can have). The default style for an @B_android#widget#ExpandableListView_E@ provides indicators which will be shown next to Views given to the @B_android#widget#ExpandableListView_E@. The layouts android.R.layout.simple_expandable_list_item_1 and android.R.layout.simple_expandable_list_item_2 (which should be used with @B_android#widget#SimpleCursorTreeAdapter_E@) contain the preferred position information for indicators. The context menu information set by an @B_android#widget#ExpandableListView_E@ will be a @B_android#widget#ExpandableListView#ExpandableListContextMenuInfo_E@ object with @B_android#widget#ExpandableListView#ExpandableListContextMenuInfo#packedPosition_E@ being a packed position that can be used with @B_android#widget#ExpandableListView#getPackedPositionType_E@ and the other similar methods. You cannot use the value wrap_content for the android:layout_height attribute of a ExpandableListView in XML if the parent's size is also not strictly specified (for example, if the parent were ScrollView you could not specify wrap_content since it also can be any length. However, you can use wrap_content if the ExpandableListView parent has a specific size, such as 100 pixels."}