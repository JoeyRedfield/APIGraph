{"Functions": {"shape(char[], int, int, int)": {"Returns": [], "Parameters": [["char[]", "char: an array of characters"], ["int", "int: the index into text to start converting"], ["int", "int: the number of characters in text to convert"], ["int", "int: the context to which to convert the characters, such as NumericShaper.EUROPEAN"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or start + count is out of bounds"], ["@B_java#lang#NullPointerException_E@", "if text is null"], ["@B_java#lang#IllegalArgumentException_E@", "if this is a contextual shaper and the specified context is not a single valid range."]], "SeeAlso": [], "Permissions": [], "Description": "Converts the digits in the text that occur between start and start + count, using the provided context. Context is ignored if the shaper is not a contextual shaper.", "history": "added in API level 1", "FullName": "public void shape (char[] text, int start, int count, int context)"}, "getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a contextual shaper for the specified ranges"]], "Parameters": [["@B_java#util#Set_E@", "Set: the specified Unicode ranges"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if ranges is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a contextual shaper for the provided Unicode range(s). The Latin-1 (EUROPEAN) digits are converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. The shaper assumes EUROPEAN as the starting context, that is, if EUROPEAN digits are encountered before any strong directional text in the string, the context is presumed to be EUROPEAN, and so the digits will not shape.", "history": "Added in API level 24", "FullName": "public static NumericShaper getContextualShaper (Set<NumericShaper.Range> ranges)"}, "getShaper(int)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a non-contextual numeric shaper"]], "Parameters": [["int", "int: the specified Unicode range"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the range is not a single range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a shaper for the provided unicode range. All Latin-1 (EUROPEAN) digits are converted to the corresponding decimal unicode digits.", "history": "Added in API level 1", "FullName": "public static NumericShaper getShaper (int singleRange)"}, "shape(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: an array of characters to convert"], ["int", "int: the index into text to start converting"], ["int", "int: the number of characters in text to convert"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or start + count is out of bounds"], ["@B_java#lang#NullPointerException_E@", "if text is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the digits in the text that occur between start and start + count.", "history": "added in API level 1", "FullName": "public void shape (char[] text, int start, int count)"}, "getContextualShaper(int,int)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a shaper for the specified Unicode ranges."]], "Parameters": [["int", "int: the specified Unicode ranges"], ["int", "int: the starting context, such as NumericShaper.EUROPEAN"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified defaultContext is not a single valid range."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a contextual shaper for the provided unicode range(s). Latin-1 (EUROPEAN) digits will be converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. Multiple ranges are represented by or-ing the values together, for example, NumericShaper.ARABIC | NumericShaper.THAI. The shaper uses defaultContext as the starting context.", "history": "Added in API level 1", "FullName": "public static NumericShaper getContextualShaper (int ranges, int defaultContext)"}, "getContextualShaper(int, int)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a shaper for the specified Unicode ranges."]], "Parameters": [["int", "int: the specified Unicode ranges"], ["int", "int: the starting context, such as NumericShaper.EUROPEAN"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified defaultContext is not a single valid range."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a contextual shaper for the provided unicode range(s). Latin-1 (EUROPEAN) digits will be converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. Multiple ranges are represented by or-ing the values together, for example, NumericShaper.ARABIC | NumericShaper.THAI. The shaper uses defaultContext as the starting context.", "history": "added in API level 1", "FullName": "public static NumericShaper getContextualShaper (int ranges, int defaultContext)"}, "shape(char[],int,int,int)": {"Returns": [], "Parameters": [["char[]", "char: an array of characters"], ["int", "int: the index into text to start converting"], ["int", "int: the number of characters in text to convert"], ["int", "int: the context to which to convert the characters, such as NumericShaper.EUROPEAN"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or start + count is out of bounds"], ["@B_java#lang#NullPointerException_E@", "if text is null"], ["@B_java#lang#IllegalArgumentException_E@", "if this is a contextual shaper and the specified context is not a single valid range."]], "SeeAlso": [], "Permissions": [], "Description": "Converts the digits in the text that occur between start and start + count, using the provided context. Context is ignored if the shaper is not a contextual shaper.", "history": "Added in API level 1", "FullName": "public void shape (char[] text, int start, int count, int context)"}, "isContextual()": {"Returns": [["boolean", "true if this shaper is contextual; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a boolean indicating whether or not this shaper shapes contextually.", "history": "Added in API level 1", "FullName": "public boolean isContextual ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String describing this shaper."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String that describes this shaper. This method is used for debugging purposes only.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getRanges()": {"Returns": [["int", "the values for all the ranges to be shaped."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an int that ORs together the values for all the ranges that will be shaped. For example, to check if a shaper shapes to Arabic, you would use the following: Note that this method supports only the bit mask-based ranges. Call @B_java#awt#font#NumericShaper#getRangeSet_E@ for the enum-based ranges.", "history": "Added in API level 1", "FullName": "public int getRanges ()"}, "shape(char[],int,int,java.awt.font.NumericShaper.Range)": {"Returns": [], "Parameters": [["char[]", "char: a char array"], ["int", "int: the index into text to start converting"], ["int", "int: the number of chars in text to convert"], ["@B_java#awt#font#NumericShaper#Range_E@", "NumericShaper.Range: the context to which to convert the characters, such as NumericShaper.Range.EUROPEAN"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or start + count is out of bounds"], ["@B_java#lang#NullPointerException_E@", "if text or context is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the digits in the text that occur between start and start + count, using the provided context. Context is ignored if the shaper is not a contextual shaper.", "history": "Added in API level 24", "FullName": "public void shape (char[] text, int start, int count, NumericShaper.Range context)"}, "getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>,java.awt.font.NumericShaper.Range)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a contextual shaper for the specified Unicode ranges."]], "Parameters": [["@B_java#util#Set_E@", "Set: the specified Unicode ranges"], ["@B_java#awt#font#NumericShaper#Range_E@", "NumericShaper.Range: the starting context, such as NumericShaper.Range.EUROPEAN"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if ranges or defaultContext is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a contextual shaper for the provided Unicode range(s). The Latin-1 (EUROPEAN) digits will be converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. The shaper uses defaultContext as the starting context.", "history": "Added in API level 24", "FullName": "public static NumericShaper getContextualShaper (Set<NumericShaper.Range> ranges, NumericShaper.Range defaultContext)"}, "shape(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: an array of characters to convert"], ["int", "int: the index into text to start converting"], ["int", "int: the number of characters in text to convert"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start or start + count is out of bounds"], ["@B_java#lang#NullPointerException_E@", "if text is null"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the digits in the text that occur between start and start + count.", "history": "Added in API level 1", "FullName": "public void shape (char[] text, int start, int count)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if o is an instance of NumericShaper and shapes in the same way; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the specified object to compare to this NumericShaper"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns true if the specified object is an instance of NumericShaper and shapes identically to this one, regardless of the range representations, the bit mask or the enum. For example, the following code produces \"true\".", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "getRangeSet()": {"Returns": [["@B_java#util#Set_E@", "all the Unicode ranges to be shaped."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set representing all the Unicode ranges in this NumericShaper that will be shaped.", "history": "Added in API level 24", "FullName": "public Set<NumericShaper.Range> getRangeSet ()"}, "getContextualShaper(int)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a shaper for the specified ranges"]], "Parameters": [["int", "int: the specified Unicode ranges"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a contextual shaper for the provided unicode range(s). Latin-1 (EUROPEAN) digits are converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. Multiple ranges are represented by or-ing the values together, such as, NumericShaper.ARABIC | NumericShaper.THAI. The shaper assumes EUROPEAN as the starting context, that is, if EUROPEAN digits are encountered before any strong directional text in the string, the context is presumed to be EUROPEAN, and so the digits will not shape.", "history": "Added in API level 1", "FullName": "public static NumericShaper getContextualShaper (int ranges)"}, "getShaper(java.awt.font.NumericShaper.Range)": {"Returns": [["@B_java#awt#font#NumericShaper_E@", "a non-contextual NumericShaper."]], "Parameters": [["@B_java#awt#font#NumericShaper#Range_E@", "NumericShaper.Range: the Unicode range given by a @B_java#awt#font#NumericShaper#Range_E@ constant."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if singleRange is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a shaper for the provided Unicode range. All Latin-1 (EUROPEAN) digits are converted to the corresponding decimal digits of the specified Unicode range.", "history": "Added in API level 24", "FullName": "public static NumericShaper getShaper (NumericShaper.Range singleRange)"}, "hashCode()": {"Returns": [["int", "this shaper's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@"], "Permissions": [], "Description": "Returns a hash code for this shaper.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.awt.font.NumericShaper", "ClassDesc": "The NumericShaper class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E). Instances of NumericShaper are typically applied as attributes to text with the @B_java#awt#font#TextAttribute#NUMERIC_SHAPING_E@ attribute of the TextAttribute class. For example, this code snippet causes a TextLayout to shape European digits to Arabic in an Arabic context: It is also possible to perform numeric shaping explicitly using instances of NumericShaper, as this code snippet demonstrates: This class supports two different programming interfaces to represent Unicode ranges for script-specific digits: bit mask-based ones, such as @B_java#awt#font#NumericShaper#ARABIC_E@, and enum-based ones, such as @B_java#awt#font#NumericShaper#Range#ARABIC_E@. Multiple ranges can be specified by ORing bit mask-based constants, such as: Set with the @B_java#awt#font#NumericShaper#Range_E@ constants, such as: If the two interfaces are mixed (including serialization), Unicode range values are mapped to their counterparts where such mapping is possible, such as NumericShaper.Range.ARABIC from/to NumericShaper.ARABIC. If any unmappable range values are specified, such as NumericShaper.Range.BALINESE, those ranges are ignored. A Unicode range may have more than one set of decimal digits. If multiple decimal digits sets are specified for the same Unicode range, one of the sets will take precedence as follows."}