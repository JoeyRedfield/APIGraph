{"Functions": {"RangingRequest.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 28", "FullName": "public RangingRequest.Builder ()"}, "addAccessPoint(android.net.wifi.ScanResult)": {"Returns": [["@B_android#net#wifi#rtt#RangingRequest#Builder_E@", "The builder to facilitate chaining builder.setXXX(..).setXXX(..)."]], "Parameters": [["@B_android#net#wifi#ScanResult_E@", "ScanResult: Information of an Access Point (AP) obtained in a Scan Result. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the device specified by the @B_android#net#wifi#ScanResult_E@ to the list of devices with which to measure range. The total number of peers added to a request cannot exceed the limit specified by @B_android#net#wifi#rtt#RangingRequest#getMaxPeers_E@. Ranging may not be supported if the Access Point does not support IEEE 802.11mc. Use @B_android#net#wifi#ScanResult#is80211mcResponder_E@ to verify the Access Point's capabilities. If not supported the result status will be @B_android#net#wifi#rtt#RangingResult#STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC_E@.", "history": "Added in API level 28", "FullName": "public RangingRequest.Builder addAccessPoint (ScanResult apInfo)"}, "addAccessPoints(java.util.List<android.net.wifi.ScanResult>)": {"Returns": [["@B_android#net#wifi#rtt#RangingRequest#Builder_E@", "The builder to facilitate chaining builder.setXXX(..).setXXX(..)."]], "Parameters": [["@B_java#util#List_E@", "List: Information of an Access Points (APs) obtained in a Scan Result. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the devices specified by the @B_android#net#wifi#ScanResult_E@s to the list of devices with which to measure range. The total number of peers added to a request cannot exceed the limit specified by @B_android#net#wifi#rtt#RangingRequest#getMaxPeers_E@. Ranging may not be supported if the Access Point does not support IEEE 802.11mc. Use @B_android#net#wifi#ScanResult#is80211mcResponder_E@ to verify the Access Point's capabilities. If not supported the result status will be @B_android#net#wifi#rtt#RangingResult#STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC_E@.", "history": "Added in API level 28", "FullName": "public RangingRequest.Builder addAccessPoints (List<ScanResult> apInfos)"}, "addWifiAwarePeer(android.net.wifi.aware.PeerHandle)": {"Returns": [["@B_android#net#wifi#rtt#RangingRequest#Builder_E@", "The builder, to facilitate chaining builder.setXXX(..).setXXX(..)."]], "Parameters": [["@B_android#net#wifi#aware#PeerHandle_E@", "PeerHandle: The peer handler of the peer Wi-Fi Aware device. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a device specified by a @B_android#net#wifi#aware#PeerHandle_E@ to the list of devices with which to measure range. The @B_android#net#wifi#aware#PeerHandle_E@ may be obtained as part of the Wi-Fi Aware discovery process. E.g. using @B_android#net#wifi#aware#DiscoverySessionCallback#onServiceDiscovered_E@. Note: in order to use this API the device must support Wi-Fi Aware @B_android#net#wifi#aware#package-summary_E@. The peer device which is being ranged to must be configured to publish a service (with any name) with: Type @B_android#net#wifi#aware#PublishConfig#PUBLISH_TYPE_UNSOLICITED_E@. Ranging enabled @B_android#net#wifi#aware#PublishConfig#Builder#setRangingEnabled_E@.", "history": "Added in API level 28", "FullName": "public RangingRequest.Builder addWifiAwarePeer (PeerHandle peerHandle)"}, "addWifiAwarePeer(android.net.MacAddress)": {"Returns": [["@B_android#net#wifi#rtt#RangingRequest#Builder_E@", "The builder, to facilitate chaining builder.setXXX(..).setXXX(..)."]], "Parameters": [["@B_android#net#MacAddress_E@", "MacAddress: The MAC address of the Wi-Fi Aware peer. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the device specified by the peerMacAddress to the list of devices with which to measure range. The MAC address may be obtained out-of-band from a peer Wi-Fi Aware device. A Wi-Fi Aware device may obtain its MAC address using the @B_android#net#wifi#aware#IdentityChangedListener_E@ provided to @B_android#net#wifi#aware#WifiAwareManager#attach_E@. Note: in order to use this API the device must support Wi-Fi Aware @B_android#net#wifi#aware#package-summary_E@. The peer device which is being ranged to must be configured to publish a service (with any name) with: Type @B_android#net#wifi#aware#PublishConfig#PUBLISH_TYPE_UNSOLICITED_E@. Ranging enabled @B_android#net#wifi#aware#PublishConfig#Builder#setRangingEnabled_E@.", "history": "Added in API level 28", "FullName": "public RangingRequest.Builder addWifiAwarePeer (MacAddress peerMacAddress)"}, "build()": {"Returns": [["@B_android#net#wifi#rtt#RangingRequest_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Build @B_android#net#wifi#rtt#RangingRequest_E@ given the current configurations made on the builder.", "history": "Added in API level 28", "FullName": "public RangingRequest build ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.rtt.RangingRequest.Builder", "ClassDesc": "Builder class used to construct @B_android#net#wifi#rtt#RangingRequest_E@ objects."}