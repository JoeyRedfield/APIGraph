{"Functions": {"onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "CardView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "CardView (Context context)"}, "getPreventCornerOverlap()": {"Returns": [["boolean", "True if CardView prevents overlaps with rounded corners on platforms before Lollipop. Default value is true."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether CardView should add extra padding to content to avoid overlaps with rounded corners on pre-Lollipop platforms.", "history": "added in version 24.2.0", "FullName": "boolean getPreventCornerOverlap ()"}, "setMinimumHeight(int)": {"Returns": [], "Parameters": [["int", "int: The minimum height the view will try to be, in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum height of the view. It is not guaranteed the view will be able to achieve this minimum height (for example, if its parent layout constrains it with less available height).", "history": "", "FullName": "void setMinimumHeight (int minHeight)"}, "getCardBackgroundColor()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "The background color state list of the CardView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the background color state list of the CardView.", "history": "added in version 24.2.0", "FullName": "ColorStateList getCardBackgroundColor ()"}, "getMaxCardElevation()": {"Returns": [["float", "Maximum elevation of the CardView"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#setMaxCardElevation_E@", "@B_android#support#v7#widget#CardView#getCardElevation_E@"], "Permissions": [], "Description": "Returns the backward compatible maximum elevation of the CardView.", "history": "added in version 24.2.0", "FullName": "float getMaxCardElevation ()"}, "setPreventCornerOverlap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether CardView should add extra padding to content to avoid overlaps with the CardView corners."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#setUseCompatPadding_E@"], "Permissions": [], "Description": "On pre-Lollipop platforms, CardView does not clip the bounds of the Card for the rounded corners. Instead, it adds padding to content so that it won't overlap with the rounded corners. You can disable this behavior by setting this field to false. Setting this value on Lollipop and above does not have any effect unless you have enabled compatibility padding.", "history": "added in version 24.2.0", "FullName": "void setPreventCornerOverlap (boolean preventCornerOverlap)"}, "setCardBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: The new color to set for the card background"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the background color of the CardView", "history": "added in version 24.2.0", "FullName": "void setCardBackgroundColor (int color)"}, "getUseCompatPadding()": {"Returns": [["boolean", "true if CardView adds inner padding on platforms Lollipop and after to have same dimensions with platforms before Lollipop."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether CardView will add inner padding on platforms Lollipop and after.", "history": "added in version 24.2.0", "FullName": "boolean getUseCompatPadding ()"}, "getContentPaddingTop()": {"Returns": [["int", "the inner padding after the Card's top edge"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inner padding after the Card's top edge", "history": "added in version 24.2.0", "FullName": "int getContentPaddingTop ()"}, "getRadius()": {"Returns": [["float", "Corner radius of the CardView"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#getRadius_E@"], "Permissions": [], "Description": "Returns the corner radius of the CardView.", "history": "added in version 24.2.0", "FullName": "float getRadius ()"}, "setRadius(float)": {"Returns": [], "Parameters": [["float", "float: The radius in pixels of the corners of the rectangle shape"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#setRadius_E@"], "Permissions": [], "Description": "Updates the corner radius of the CardView.", "history": "added in version 24.2.0", "FullName": "void setRadius (float radius)"}, "setPaddingRelative(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the start padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the end padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the relative padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingStart_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingEnd_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "", "FullName": "void setPaddingRelative (int start, int top, int end, int bottom)"}, "getContentPaddingLeft()": {"Returns": [["int", "the inner padding after the Card's left edge"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inner padding after the Card's left edge", "history": "added in version 24.2.0", "FullName": "int getContentPaddingLeft ()"}, "getContentPaddingBottom()": {"Returns": [["int", "the inner padding before the Card's bottom edge"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inner padding before the Card's bottom edge", "history": "added in version 24.2.0", "FullName": "int getContentPaddingBottom ()"}, "setUseCompatPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true> if CardView should add padding for the shadows on platforms Lollipop and above."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "CardView adds additional padding to draw shadows on platforms before Lollipop. This may cause Cards to have different sizes between Lollipop and before Lollipop. If you need to align CardView with other Views, you may need api version specific dimension resources to account for the changes. As an alternative, you can set this flag to true and CardView will add the same padding values on platforms Lollipop and after. Since setting this flag to true adds unnecessary gaps in the UI, default value is false.", "history": "added in version 24.2.0", "FullName": "void setUseCompatPadding (boolean useCompatPadding)"}, "setCardElevation(float)": {"Returns": [], "Parameters": [["float", "float: The backward compatible elevation in pixels."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#getCardElevation_E@", "@B_android#support#v7#widget#CardView#setMaxCardElevation_E@"], "Permissions": [], "Description": "Updates the backward compatible elevation of the CardView.", "history": "added in version 24.2.0", "FullName": "void setCardElevation (float elevation)"}, "setContentPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The left padding in pixels"], ["int", "int: The top padding in pixels"], ["int", "int: The right padding in pixels"], ["int", "int: The bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the padding between the Card's edges and the children of CardView. Depending on platform version or @B_android#support#v7#widget#CardView#getUseCompatPadding_E@ settings, CardView may update these values before calling @B_android#view#View#setPadding_E@.", "history": "added in version 24.2.0", "FullName": "void setContentPadding (int left, int top, int right, int bottom)"}, "setMinimumWidth(int)": {"Returns": [], "Parameters": [["int", "int: The minimum width the view will try to be, in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum width of the view. It is not guaranteed the view will be able to achieve this minimum width (for example, if its parent layout constrains it with less available width).", "history": "", "FullName": "void setMinimumWidth (int minWidth)"}, "setPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the left padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the right padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingLeft_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingRight_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "", "FullName": "void setPadding (int left, int top, int right, int bottom)"}, "setShadowPadding(int, int, int, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void setShadowPadding (int left, int top, int right, int bottom)"}, "setMaxCardElevation(float)": {"Returns": [], "Parameters": [["float", "float: The backward compatible maximum elevation in pixels."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#setCardElevation_E@", "@B_android#support#v7#widget#CardView#getMaxCardElevation_E@"], "Permissions": [], "Description": "Updates the backward compatible maximum elevation of the CardView. Calling this method has no effect if device OS version is Lollipop or newer and @B_android#support#v7#widget#CardView#getUseCompatPadding_E@ is false.", "history": "added in version 24.2.0", "FullName": "void setMaxCardElevation (float maxElevation)"}, "getBackground()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract Drawable getBackground ()"}, "getContentPaddingRight()": {"Returns": [["int", "the inner padding before the Card's right edge"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the inner padding before the Card's right edge", "history": "added in version 24.2.0", "FullName": "int getContentPaddingRight ()"}, "getCardElevation()": {"Returns": [["float", "Elevation of the CardView"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#CardView#setCardElevation_E@", "@B_android#support#v7#widget#CardView#getMaxCardElevation_E@"], "Permissions": [], "Description": "Returns the backward compatible elevation of the CardView.", "history": "added in version 24.2.0", "FullName": "float getCardElevation ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.v7.widget.CardView", "ClassDesc": "A FrameLayout with a rounded corner background and shadow. CardView uses elevation property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms. Due to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See @B_android#support#v7#widget#CardView#setPreventCornerOverlap_E@ to change this behavior). Before Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to maxCardElevation + (1 - cos45) * cornerRadius on the sides and maxCardElevation * 1.5 + (1 - cos45) * cornerRadius on top and bottom. Since padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or @B_android#support#v7#widget#CardView#setContentPadding_E@ in code to set the padding between the edges of the CardView and children of CardView. Note that, if you specify exact dimensions for the CardView, because of the shadows, its content area will be different between platforms before Lollipop and after Lollipop. By using api version specific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can call @B_android#support#v7#widget#CardView#setUseCompatPadding_E@ and pass true. To change CardView's elevation in a backward compatible way, use @B_android#support#v7#widget#CardView#setCardElevation_E@. CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by @B_android#support#v7#widget#CardView#getMaxCardElevation_E@. If you want to change elevation dynamically, you should call @B_android#support#v7#widget#CardView#setMaxCardElevation_E@ when CardView is initialized."}