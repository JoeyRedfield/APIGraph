{"Functions": {"getSessionContext()": {"Returns": [["@B_javax#net#ssl#SSLSessionContext_E@", "the session context used for this session, or null if the context is unavailable."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling thread does not have permission to get SSL session context."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the context in which this session is bound. This context may be unavailable in some environments, in which case this method returns null. If the context is available and there is a security manager installed, the caller may require permission to access it or a security exception may be thrown. In a Java environment, the security manager's checkPermission method is called with a SSLPermission(\"getSSLSessionContext\") permission.", "history": "Added in API level 1", "FullName": "public abstract SSLSessionContext getSessionContext ()"}, "getPeerPort()": {"Returns": [["int", "the port number of the peer host, or -1 if no information is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the port number of the peer in this session. For the server, this is the client's port number; and for the client, it is the server's port number. This value is not authenticated and should not be relied upon. It is mainly used as a hint for SSLSession caching strategies.", "history": "Added in API level 1", "FullName": "public abstract int getPeerPort ()"}, "getCipherSuite()": {"Returns": [["@B_java#lang#String_E@", "the name of the session's cipher suite"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the SSL cipher suite which is used for all connections in the session. This defines the level of protection provided to the data sent on the connection, including the kind of encryption used and most aspects of how authentication is done.", "history": "Added in API level 1", "FullName": "public abstract String getCipherSuite ()"}, "getLocalCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of certificates, with the local certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSession#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the certificate(s) that were sent to the peer during handshaking. Note: This method is useful only when using certificate-based cipher suites. When multiple certificates are available for use in a handshake, the implementation chooses what it considers the \"best\" certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually used.", "history": "Added in API level 1", "FullName": "public abstract Certificate[] getLocalCertificates ()"}, "putValue(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name to which the data object will be bound. This may not be null."], ["@B_java#lang#Object_E@", "Object: the data object to be bound. This may not be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Binds the specified value object into the session's application layer data with the given name. Any existing binding using the same name is replaced. If the new (or existing) value implements the SSLSessionBindingListener interface, the object represented by value is notified appropriately. For security reasons, the same named values may not be visible across different access control contexts.", "history": "added in API level 1", "FullName": "public abstract void putValue (String name, Object value)"}, "getId()": {"Returns": [["byte[]", "the Session identifier"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier assigned to this Session.", "history": "Added in API level 1", "FullName": "public abstract byte[] getId ()"}, "putValue(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name to which the data object will be bound. This may not be null."], ["@B_java#lang#Object_E@", "Object: the data object to be bound. This may not be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if either argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Binds the specified value object into the session's application layer data with the given name. Any existing binding using the same name is replaced. If the new (or existing) value implements the SSLSessionBindingListener interface, the object represented by value is notified appropriately. For security reasons, the same named values may not be visible across different access control contexts.", "history": "Added in API level 1", "FullName": "public abstract void putValue (String name, Object value)"}, "getLastAccessedTime()": {"Returns": [["long", "the last time this Session was accessed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the last time this Session representation was accessed by the session level infrastructure, in milliseconds since midnight, January 1, 1970 UTC. Access indicates a new connection being established using session data. Application level operations, such as getting or setting a value associated with the session, are not reflected in this access time. This information is particularly useful in session management policies. For example, a session manager thread could leave all sessions in a given context which haven't been used in a long time; or, the sessions might be sorted according to age to optimize some task.", "history": "Added in API level 1", "FullName": "public abstract long getLastAccessedTime ()"}, "removeValue(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the object to remove visible across different access control contexts"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Removes the object bound to the given name in the session's application layer data. Does nothing if there is no object bound to the given name. If the bound existing object implements the SessionBindingListener interface, it is notified appropriately. For security reasons, the same named values may not be visible across different access control contexts.", "history": "Added in API level 1", "FullName": "public abstract void removeValue (String name)"}, "getPeerHost()": {"Returns": [["@B_java#lang#String_E@", "the host name of the peer host, or null if no information is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the host name of the peer in this session. For the server, this is the client's host; and for the client, it is the server's host. The name may not be a fully qualified host name or even a host name at all as it may represent a string encoding of the peer's network address. If such a name is desired, it might be resolved through a name service based on the value returned by this method. This value is not authenticated and should not be relied upon. It is mainly used as a hint for SSLSession caching strategies.", "history": "Added in API level 1", "FullName": "public abstract String getPeerHost ()"}, "getApplicationBufferSize()": {"Returns": [["int", "the current maximum expected application packet size"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLEngine#wrap_E@", "@B_javax#net#ssl#SSLEngine#unwrap_E@"], "Permissions": [], "Description": "Gets the current size of the largest application data that is expected when using this session. SSLEngine application data buffers must be large enough to hold the application data from any inbound network application data packet received. Typically, outbound application data buffers can be of any size.", "history": "Added in API level 1", "FullName": "public abstract int getApplicationBufferSize ()"}, "getProtocol()": {"Returns": [["@B_java#lang#String_E@", "the standard name of the protocol used for all connections in the session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the standard name of the protocol used for all connections in the session. This defines the protocol used in the connection.", "history": "Added in API level 1", "FullName": "public abstract String getProtocol ()"}, "getPeerCertificateChain()": {"Returns": [["@B_javax#security#cert#X509Certificate_E@", "an ordered array of peer X.509 certificates, with the peer's own certificate first followed by any certificate authorities. (The certificates are in the original JSSE certificate @B_javax#security#cert#X509Certificate_E@ format.)"]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer's identity has not been verified"]], "SeeAlso": ["@B_javax#net#ssl#SSLSession#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was identified as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException. Note: this method exists for compatibility with previous releases. New applications should use @B_javax#net#ssl#SSLSession#getPeerCertificates_E@ instead.", "history": "Added in API level 1", "FullName": "public abstract X509Certificate[] getPeerCertificateChain ()"}, "getValueNames()": {"Returns": [["@B_java#lang#String_E@", "a non-null (possibly empty) array of names of the objects bound to this Session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of the names of all the application layer data objects bound into the Session. For security reasons, the same named values may not be visible across different access control contexts.", "history": "Added in API level 1", "FullName": "public abstract String[] getValueNames ()"}, "invalidate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSession#isValid_E@"], "Permissions": [], "Description": "Invalidates the session. Future connections will not be able to resume or join this session. However, any existing connection using this session can continue to use the session until the connection is closed.", "history": "Added in API level 1", "FullName": "public abstract void invalidate ()"}, "getPeerCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of peer certificates, with the peer's own certificate first followed by any certificate authorities."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer's identity has not been verified"]], "SeeAlso": ["@B_javax#net#ssl#SSLSession#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was established as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException.", "history": "Added in API level 1", "FullName": "public abstract Certificate[] getPeerCertificates ()"}, "getValue(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the value bound to that name, or null if the binding does not exist."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the binding to find."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the object bound to the given name in the session's application layer data. Returns null if there is no such binding. For security reasons, the same named values may not be visible across different access control contexts.", "history": "Added in API level 1", "FullName": "public abstract Object getValue (String name)"}, "getPeerPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the peer's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer's identity has not been verified"]], "SeeAlso": ["@B_javax#net#ssl#SSLSession#getPeerCertificates_E@", "@B_javax#net#ssl#SSLSession#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the identity of the peer which was established as part of defining the session.", "history": "Added in API level 1", "FullName": "public abstract Principal getPeerPrincipal ()"}, "isValid()": {"Returns": [["boolean", "true if this session may be rejoined."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSession#invalidate_E@"], "Permissions": [], "Description": "Returns whether this session is valid and available for resuming or joining.", "history": "Added in API level 1", "FullName": "public abstract boolean isValid ()"}, "getPacketBufferSize()": {"Returns": [["int", "the current maximum expected network packet size"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLEngine#wrap_E@", "@B_javax#net#ssl#SSLEngine#unwrap_E@"], "Permissions": [], "Description": "Gets the current size of the largest SSL/TLS packet that is expected when using this session. A SSLEngine using this session may generate SSL/TLS packets of any size up to and including the value returned by this method. All SSLEngine network buffers should be sized at least this large to avoid insufficient space problems when performing wrap and unwrap calls.", "history": "Added in API level 1", "FullName": "public abstract int getPacketBufferSize ()"}, "getLocalPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the principal sent to the peer. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSession#getLocalCertificates_E@", "@B_javax#net#ssl#SSLSession#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the principal that was sent to the peer during handshaking.", "history": "Added in API level 1", "FullName": "public abstract Principal getLocalPrincipal ()"}, "getCreationTime()": {"Returns": [["long", "the time this Session was created"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time at which this Session representation was created, in milliseconds since midnight, January 1, 1970 UTC.", "history": "Added in API level 1", "FullName": "public abstract long getCreationTime ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SSLSession", "ClassDesc": "In SSL, sessions are used to describe an ongoing relationship between two entities. Each SSL connection involves one session at a time, but that session may be used on many connections between those entities, simultaneously or sequentially. The session used on a connection may also be replaced by a different session. Sessions are created, or rejoined, as part of the SSL handshaking protocol. Sessions may be invalidated due to policies affecting security or resource usage, or by an application explicitly calling invalidate. Session management policies are typically used to tune performance. In addition to the standard session attributes, SSL sessions expose these read-only attributes: Peer Identity. Sessions are between a particular client and a particular server. The identity of the peer may have been established as part of session setup. Peers are generally identified by X.509 certificate chains. Cipher Suite Name. Cipher suites describe the kind of cryptographic protection that's used by connections in a particular session. Peer Host. All connections in a session are between the same two hosts. The address of the host on the other side of the connection is available. Sessions may be explicitly invalidated. Invalidation may also be done implicitly, when faced with certain kinds of errors."}