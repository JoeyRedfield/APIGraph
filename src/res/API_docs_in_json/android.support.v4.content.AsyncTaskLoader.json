{"Functions": {"cancelLoad()": {"Returns": [["", "Returns false if the task could not be cancelled, typically because it has already completed normally, or because @B_android#support#v4#content#Loader#startLoading_E@ hasn't been called; returns true otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to cancel the current load task. See @B_android#os#AsyncTask#cancel_E@ for more info. Must be called on the main thread of the process. Cancelling is not an immediate operation, since the load is performed in a background thread. If there is currently a load in progress, this method requests that the load be cancelled, and notes this is the case; once the background thread has completed its work its remaining state will be cleared. If another load request comes in during this time, it will be held until the cancelled load is complete.", "history": "", "FullName": "public boolean cancelLoad ()"}, "AsyncTaskLoader(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "AsyncTaskLoader (Context context)"}, "cancelLoadInBackground()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Called on the main thread to abort a load in progress. Override this method to abort the current invocation of @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ that is running in the background on a worker thread. This method should do nothing if @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ has not started running or if it has already finished.", "history": "added in version 23.0.0", "FullName": "void cancelLoadInBackground ()"}, "onCanceled(D)": {"Returns": [], "Parameters": [["D", "D: The value that was returned by @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@, or null if the task threw @B_android#support#v4#os#OperationCanceledException_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called if the task was canceled before it was completed. Gives the class a chance to clean up post-cancellation and to properly dispose of the result.", "history": "added in version 22.0.0", "FullName": "void onCanceled (D data)"}, "loadInBackground()": {"Returns": [["D", "The result of the load operation."]], "Parameters": [], "Throws": [["@B_android#support#v4#os#OperationCanceledException_E@", "if the load is canceled during execution."]], "SeeAlso": ["@B_android#support#v4#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@", "@B_android#support#v4#content#AsyncTaskLoader#cancelLoadInBackground_E@", "@B_android#support#v4#content#AsyncTaskLoader#onCanceled_E@"], "Permissions": [], "Description": "Called on a worker thread to perform the actual load and to return the result of the load operation. Implementations should not deliver the result directly, but should return them from this method, which will eventually end up calling @B_android#support#v4#content#Loader#deliverResult_E@ on the UI thread. If implementations need to process the results on the UI thread they may override @B_android#support#v4#content#Loader#deliverResult_E@ and do so there. To support cancellation, this method should periodically check the value of @B_android#support#v4#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@ and terminate when it returns true. Subclasses may also override @B_android#support#v4#content#AsyncTaskLoader#cancelLoadInBackground_E@ to interrupt the load directly instead of polling @B_android#support#v4#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@. When the load is canceled, this method may either return normally or throw @B_android#support#v4#os#OperationCanceledException_E@. In either case, the @B_android#support#v4#content#Loader_E@ will call @B_android#support#v4#content#AsyncTaskLoader#onCanceled_E@ to perform post-cancellation cleanup and to dispose of the result object, if any.", "history": "added in version 22.0.0", "FullName": "D loadInBackground ()"}, "onForceLoad()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#support#v4#content#Loader#forceLoad_E@. This will always be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void onForceLoad ()"}, "isLoadInBackgroundCanceled()": {"Returns": [["boolean", "True if the current invocation of @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ is being canceled."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Returns true if the current invocation of @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ is being canceled.", "history": "added in version 23.0.0", "FullName": "boolean isLoadInBackgroundCanceled ()"}, "setUpdateThrottle(long)": {"Returns": [], "Parameters": [["long", "long: Amount of delay, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set amount to throttle updates by. This is the minimum time from when the last @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ call has completed until a new load is scheduled.", "history": "added in version 22.0.0", "FullName": "void setUpdateThrottle (long delayMS)"}, "onCancelLoad()": {"Returns": [["boolean", "Returns false if the task could not be canceled, typically because it has already completed normally, or because @B_android#support#v4#content#Loader#startLoading_E@ hasn't been called; returns true otherwise. When true is returned, the task is still running and the @B_android#support#v4#content#Loader#OnLoadCanceledListener_E@ will be called when the task completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#support#v4#content#Loader#cancelLoad_E@. This will always be called from the process's main thread.", "history": "added in version 23.0.0", "FullName": "boolean onCancelLoad ()"}, "onLoadInBackground()": {"Returns": [["D", "The result of the load operation."]], "Parameters": [], "Throws": [["@B_android#support#v4#os#OperationCanceledException_E@", "if the load is canceled during execution."]], "SeeAlso": ["@B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Calls @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@. This method is reserved for use by the loader framework. Subclasses should override @B_android#support#v4#content#AsyncTaskLoader#loadInBackground_E@ instead of this method.", "history": "added in version 22.0.0", "FullName": "D onLoadInBackground ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#content#Loader_E@"], "ClassName": "android.support.v4.content.AsyncTaskLoader<D>", "ClassDesc": "Static library support version of the framework's https:##developer#android#com@B_android#content#AsyncTaskLoader_E@. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview."}