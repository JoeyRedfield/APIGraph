{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "ConcurrentLinkedQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ConcurrentLinkedQueue that is initially empty.", "history": "Added in API level 1", "FullName": "public ConcurrentLinkedQueue ()"}, "size()": {"Returns": [["int", "the number of elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this queue. If this queue contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal. Additionally, if elements are added or removed during execution of this method, the returned result may be inaccurate. Thus, this method is typically not very useful in concurrent applications.", "history": "Added in API level 1", "FullName": "public int size ()"}, "ConcurrentLinkedQueue(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ConcurrentLinkedQueue initially containing the elements of the given collection, added in traversal order of the collection's iterator.", "history": "Added in API level 1", "FullName": "public ConcurrentLinkedQueue (Collection<? extends E> c)"}, "poll()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "isEmpty()": {"Returns": [["boolean", "true if this queue contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains no elements.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this queue"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if the collection is this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator. Attempts to addAll of a queue to itself result in IllegalArgumentException.", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never return false.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the @B_java#util#concurrent#ConcurrentLinkedQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this queue. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this queue"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if the collection is this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator. Attempts to addAll of a queue to itself result in IllegalArgumentException.", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never throw @B_java#lang#IllegalStateException_E@ or return false.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.ConcurrentLinkedQueue<E>", "ClassDesc": "An unbounded thread-safe head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. A ConcurrentLinkedQueue is an appropriate choice when many threads will share access to a common collection. Like most other concurrent collection implementations, this class does not permit the use of null elements. This implementation employs an efficient non-blocking algorithm based on one described in Iterators are not throw @B_java#util#ConcurrentModificationException_E@, and may proceed concurrently with other operations. Elements contained in the queue since the creation of the iterator will be returned exactly once. Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the added elements. This class and its iterator implement all of the optional methods of the @B_java#util#Queue_E@ and @B_java#util#Iterator_E@ interfaces. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a ConcurrentLinkedQueue ConcurrentLinkedQueue in another thread."}