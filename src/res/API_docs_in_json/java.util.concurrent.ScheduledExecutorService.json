{"Functions": {"schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time from now to delay execution"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the delay parameter"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if command is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a one-shot action that becomes enabled after the given delay.", "history": "Added in API level 1", "FullName": "public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit)"}, "scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the series of repeated tasks. The future's @B_java#util#concurrent#Future#get_E@ method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time to delay first execution"], ["long", "long: the delay between the termination of one execution and the commencement of the next"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the initialDelay and delay parameters"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if command is null"], ["@B_java#lang#IllegalArgumentException_E@", "if delay less than or equal to zero"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling @B_java#util#concurrent#Future#get_E@ on the returned future will throw @B_java#util#concurrent#ExecutionException_E@. Subsequent executions are suppressed. Subsequent calls to @B_java#util#concurrent#Future#isDone_E@ on the returned future will return true.", "history": "Added in API level 1", "FullName": "public abstract ScheduledFuture<?> scheduleWithFixedDelay (Runnable command, long initialDelay, long delay, TimeUnit unit)"}, "schedule(java.util.concurrent.Callable<V>,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture that can be used to extract result or cancel"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the function to execute"], ["long", "long: the time from now to delay execution"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the delay parameter"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if callable is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a ScheduledFuture that becomes enabled after the given delay.", "history": "Added in API level 1", "FullName": "public abstract ScheduledFuture<V> schedule (Callable<V> callable, long delay, TimeUnit unit)"}, "scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#ScheduledFuture_E@", "a ScheduledFuture representing pending completion of the series of repeated tasks. The future's @B_java#util#concurrent#Future#get_E@ method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to execute"], ["long", "long: the time to delay first execution"], ["long", "long: the period between successive executions"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the initialDelay and period parameters"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if command is null"], ["@B_java#lang#IllegalArgumentException_E@", "if period less than or equal to zero"]], "SeeAlso": [], "Permissions": [], "Description": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling @B_java#util#concurrent#Future#get_E@ on the returned future will throw @B_java#util#concurrent#ExecutionException_E@. Subsequent executions are suppressed. Subsequent calls to @B_java#util#concurrent#Future#isDone_E@ on the returned future will return true. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.", "history": "Added in API level 1", "FullName": "public abstract ScheduledFuture<?> scheduleAtFixedRate (Runnable command, long initialDelay, long period, TimeUnit unit)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ScheduledExecutorService", "ClassDesc": "An @B_java#util#concurrent#ExecutorService_E@ that can schedule commands to run after a given delay, or to execute periodically. The schedule methods create tasks with various delays and return a task object that can be used to cancel or check execution. The scheduleAtFixedRate and scheduleWithFixedDelay methods create and execute tasks that run periodically until cancelled. Commands submitted using the @B_java#util#concurrent#Executor#execute_E@ and @B_java#util#concurrent#ExecutorService_E@ submit methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in schedule methods, and are treated as requests for immediate execution. All schedule methods accept relative delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a @B_java#util#Date_E@ to the required form. For example, to schedule at a certain future date, you can use: schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS). Beware however that expiration of a relative delay need not coincide with the current Date at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. The @B_java#util#concurrent#Executors_E@ class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package."}