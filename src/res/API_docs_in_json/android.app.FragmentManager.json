{"Functions": {"findFragmentById(int)": {"Returns": [["@B_android#app#Fragment_E@", "The fragment if found or null otherwise."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds a fragment that was identified by the given id either when inflated from XML or as the container ID when added in a transaction. This first searches through fragments that are currently added to the manager's activity; if no such fragment is found, then all fragments currently on the back stack associated with this ID are searched.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Fragment findFragmentById (int id)"}, "getBackStackEntryAt(int)": {"Returns": [["@B_android#app#FragmentManager#BackStackEntry_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the BackStackEntry at index", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract FragmentManager.BackStackEntry getBackStackEntryAt (int index)"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: A PrintWriter to which the dump is to be set."], ["@B_java#lang#String_E@", "String: Additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the FragmentManager's state into the given stream.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "getPrimaryNavigationFragment()": {"Returns": [["@B_android#app#Fragment_E@", "the fragment designated as the primary navigation fragment"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the currently active primary navigation fragment for this FragmentManager. The primary navigation fragment's @B_android#app#Fragment#getChildFragmentManager_E@ will be called first to process delegated navigation actions such as @B_android#app#FragmentManager#popBackStack_E@ if no ID or transaction name is provided to pop to.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public abstract Fragment getPrimaryNavigationFragment ()"}, "popBackStack()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pop the top state off the back stack. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void popBackStack ()"}, "popBackStack(int,int)": {"Returns": [], "Parameters": [["int", "int: Identifier of the stated to be popped. If no identifier exists, false is returned. The identifier is the number returned by @B_android#app#FragmentTransaction#commit_E@. The @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@ flag can be used to control whether the named state itself is popped."], ["int", "int: Either 0 or @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pop all back stack states up to the one with the given identifier. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void popBackStack (int id, int flags)"}, "popBackStackImmediate(java.lang.String,int)": {"Returns": [["boolean", "Returns true if there was something popped, else false."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#FragmentManager#popBackStack_E@, but performs the operation immediately inside of the call. This is like calling @B_android#app#FragmentManager#executePendingTransactions_E@ afterwards without forcing the start of postponed Transactions.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract boolean popBackStackImmediate (String name, int flags)"}, "beginTransaction()": {"Returns": [["@B_android#app#FragmentTransaction_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start a series of edit operations on the Fragments associated with this FragmentManager. Note: A fragment transaction can only be created/committed prior to an activity saving its state. If you try to commit a transaction after @B_android#app#Activity#onSaveInstanceState_E@ (and prior to a following @B_android#app#Activity#onStart_E@ or @B_android#app#Activity#onResume_E@, you will get an error. This is because the framework takes care of saving your current fragments in the state, and if changes are made after the state is saved then they will be lost.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract FragmentTransaction beginTransaction ()"}, "popBackStack(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: If non-null, this is the name of a previous back state to look for; if found, all states up to that state will be popped. The @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@ flag can be used to control whether the named state itself is popped. If null, only the top state is popped."], ["int", "int: Either 0 or @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pop the last fragment transition from the manager's fragment back stack. If there is nothing to pop, false is returned. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.", "history": "added in API level 11", "FullName": "public abstract void popBackStack (String name, int flags)"}, "popBackStackImmediate(java.lang.String, int)": {"Returns": [["boolean", "Returns true if there was something popped, else false."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#FragmentManager#popBackStack_E@, but performs the operation immediately inside of the call. This is like calling @B_android#app#FragmentManager#executePendingTransactions_E@ afterwards without forcing the start of postponed Transactions.", "history": "added in API level 11", "FullName": "public abstract boolean popBackStackImmediate (String name, int flags)"}, "popBackStack(int, int)": {"Returns": [], "Parameters": [["int", "int: Identifier of the stated to be popped. If no identifier exists, false is returned. The identifier is the number returned by @B_android#app#FragmentTransaction#commit_E@. The @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@ flag can be used to control whether the named state itself is popped."], ["int", "int: Either 0 or @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pop all back stack states up to the one with the given identifier. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.", "history": "added in API level 11", "FullName": "public abstract void popBackStack (int id, int flags)"}, "getFragment(android.os.Bundle, java.lang.String)": {"Returns": [["@B_android#app#Fragment_E@", "Returns the current Fragment instance that is associated with the given reference."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The bundle from which to retrieve the fragment reference."], ["@B_java#lang#String_E@", "String: The name of the entry in the bundle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current Fragment instance for a reference previously placed with @B_android#app#FragmentManager#putFragment_E@.", "history": "added in API level 11", "FullName": "public abstract Fragment getFragment (Bundle bundle, String key)"}, "popBackStack(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: If non-null, this is the name of a previous back state to look for; if found, all states up to that state will be popped. The @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@ flag can be used to control whether the named state itself is popped. If null, only the top state is popped."], ["int", "int: Either 0 or @B_android#app#FragmentManager#POP_BACK_STACK_INCLUSIVE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pop the last fragment transition from the manager's fragment back stack. If there is nothing to pop, false is returned. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void popBackStack (String name, int flags)"}, "FragmentManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 11", "FullName": "public FragmentManager ()"}, "popBackStackImmediate()": {"Returns": [["boolean", "Returns true if there was something popped, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#FragmentManager#popBackStack_E@, but performs the operation immediately inside of the call. This is like calling @B_android#app#FragmentManager#executePendingTransactions_E@ afterwards without forcing the start of postponed Transactions.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract boolean popBackStackImmediate ()"}, "getFragments()": {"Returns": [["@B_java#util#List_E@", "A list of all fragments that are added to the FragmentManager."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a list of all fragments that are currently added to the FragmentManager. This may include those that are hidden as well as those that are shown. This will not include any fragments only in the back stack, or fragments that are detached or removed. The order of the fragments in the list is the order in which they were added or attached.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public abstract List<Fragment> getFragments ()"}, "addOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener)": {"Returns": [], "Parameters": [["@B_android#app#FragmentManager#OnBackStackChangedListener_E@", "FragmentManager.OnBackStackChangedListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new listener for changes to the fragment back stack.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void addOnBackStackChangedListener (FragmentManager.OnBackStackChangedListener listener)"}, "saveFragmentInstanceState(android.app.Fragment)": {"Returns": [["@B_android#app#Fragment#SavedState_E@", "The generated state. This will be null if there was no interesting state created by the fragment."]], "Parameters": [["@B_android#app#Fragment_E@", "Fragment: The Fragment whose state is to be saved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Save the current instance state of the given Fragment. This can be used later when creating a new instance of the Fragment and adding it to the fragment manager, to have it create itself to match the current state returned here. Note that there are limits on how this can be used: The Fragment must currently be attached to the FragmentManager. A new Fragment created using this saved state must be the same class type as the Fragment it was created from. The saved state can not contain dependencies on other fragments -- that is it can't use @B_android#app#FragmentManager#putFragment_E@ to store a fragment reference because that reference may not be valid when this saved state is later used. Likewise the Fragment's target and result code are not included in this state.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public abstract Fragment.SavedState saveFragmentInstanceState (Fragment f)"}, "popBackStackImmediate(int, int)": {"Returns": [["boolean", "Returns true if there was something popped, else false."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#FragmentManager#popBackStack_E@, but performs the operation immediately inside of the call. This is like calling @B_android#app#FragmentManager#executePendingTransactions_E@ afterwards without forcing the start of postponed Transactions.", "history": "added in API level 11", "FullName": "public abstract boolean popBackStackImmediate (int id, int flags)"}, "isStateSaved()": {"Returns": [["boolean", "true if this FragmentManager's state has already been saved by its host"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the FragmentManager's state has already been saved by its host. Any operations that would change saved state should not be performed if this method returns true. For example, any popBackStack() method, such as @B_android#app#FragmentManager#popBackStackImmediate_E@ or any FragmentTransaction using @B_android#app#FragmentTransaction#commit_E@ instead of @B_android#app#FragmentTransaction#commitAllowingStateLoss_E@ will change the state and will result in an error.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public abstract boolean isStateSaved ()"}, "getBackStackEntryCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of entries currently in the back stack.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract int getBackStackEntryCount ()"}, "registerFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks,boolean)": {"Returns": [], "Parameters": [["@B_android#app#FragmentManager#FragmentLifecycleCallbacks_E@", "FragmentManager.FragmentLifecycleCallbacks: Callbacks to register"], ["boolean", "boolean: true to automatically register this callback for all child FragmentManagers"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a @B_android#app#FragmentManager#FragmentLifecycleCallbacks_E@ to listen to fragment lifecycle events happening in this FragmentManager. All registered callbacks will be automatically unregistered when this FragmentManager is destroyed.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public abstract void registerFragmentLifecycleCallbacks (FragmentManager.FragmentLifecycleCallbacks cb, boolean recursive)"}, "executePendingTransactions()": {"Returns": [["boolean", "Returns true if there were any pending transactions to be executed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "After a @B_android#app#FragmentTransaction_E@ is committed with @B_android#app#FragmentTransaction#commit_E@, it is scheduled to be executed asynchronously on the process's main thread. If you want to immediately executing any such pending operations, you can call this function (only from the main thread) to do so. Note that all callbacks and other related behavior will be done from within this call, so be careful about where this is called from. This also forces the start of any postponed Transactions where @B_android#app#Fragment#postponeEnterTransition_E@ has been called.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract boolean executePendingTransactions ()"}, "putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The bundle in which to put the fragment reference."], ["@B_java#lang#String_E@", "String: The name of the entry in the bundle."], ["@B_android#app#Fragment_E@", "Fragment: The Fragment whose reference is to be stored."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Put a reference to a fragment in a Bundle. This Bundle can be persisted as saved state, and when later restoring @B_android#app#FragmentManager#getFragment_E@ will return the current instance of the same fragment.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void putFragment (Bundle bundle, String key, Fragment fragment)"}, "removeOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener)": {"Returns": [], "Parameters": [["@B_android#app#FragmentManager#OnBackStackChangedListener_E@", "FragmentManager.OnBackStackChangedListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a listener that was previously added with @B_android#app#FragmentManager#addOnBackStackChangedListener_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void removeOnBackStackChangedListener (FragmentManager.OnBackStackChangedListener listener)"}, "getFragment(android.os.Bundle,java.lang.String)": {"Returns": [["@B_android#app#Fragment_E@", "Returns the current Fragment instance that is associated with the given reference."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The bundle from which to retrieve the fragment reference."], ["@B_java#lang#String_E@", "String: The name of the entry in the bundle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current Fragment instance for a reference previously placed with @B_android#app#FragmentManager#putFragment_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Fragment getFragment (Bundle bundle, String key)"}, "enableDebugLogging(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the framework's internal fragment manager debugging logs are turned on. If enabled, you will see output in logcat as the framework performs fragment operations.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public static void enableDebugLogging (boolean enabled)"}, "popBackStackImmediate(int,int)": {"Returns": [["boolean", "Returns true if there was something popped, else false."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#FragmentManager#popBackStack_E@, but performs the operation immediately inside of the call. This is like calling @B_android#app#FragmentManager#executePendingTransactions_E@ afterwards without forcing the start of postponed Transactions.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract boolean popBackStackImmediate (int id, int flags)"}, "findFragmentByTag(java.lang.String)": {"Returns": [["@B_android#app#Fragment_E@", "The fragment if found or null otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds a fragment that was identified by the given tag either when inflated from XML or as supplied when added in a transaction. This first searches through fragments that are currently added to the manager's activity; if no such fragment is found, then all fragments currently on the back stack are searched.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Fragment findFragmentByTag (String tag)"}, "unregisterFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks)": {"Returns": [], "Parameters": [["@B_android#app#FragmentManager#FragmentLifecycleCallbacks_E@", "FragmentManager.FragmentLifecycleCallbacks: Callbacks to unregister"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a previously registered @B_android#app#FragmentManager#FragmentLifecycleCallbacks_E@. If the callback was not previously registered this call has no effect. All registered callbacks will be automatically unregistered when this FragmentManager is destroyed.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public abstract void unregisterFragmentLifecycleCallbacks (FragmentManager.FragmentLifecycleCallbacks cb)"}, "isDestroyed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the final @B_android#app#Activity#onDestroy_E@ call has been made on the FragmentManager's Activity, so this instance is now dead.", "history": "Added in API level 17 Deprecated in API level 28", "FullName": "public abstract boolean isDestroyed ()"}, "invalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidate the attached activity's options menu as necessary. This may end up being deferred until we move to the resumed state.", "history": "Added in API level 14 Deprecated in API level 28", "FullName": "public void invalidateOptionsMenu ()"}}, "Inheritance": [], "ClassName": "android.app.FragmentManager", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#FragmentManager_E@ for consistent behavior across all devices and access to Interface for interacting with @B_android#app#Fragment_E@ objects inside of an @B_android#app#Activity_E@ @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@, a version of the API at is also available for use on older platforms through https:##developer#android#com@B_android#support#v4#app#FragmentActivity_E@. See the blog post"}