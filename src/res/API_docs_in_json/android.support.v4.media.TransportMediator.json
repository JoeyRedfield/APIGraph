{"Functions": {"seekTo(long)": {"Returns": [], "Parameters": [["long", "long: Position to move to, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move to a new location in the media stream.", "history": "", "FullName": "void seekTo (long pos)"}, "refreshState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void refreshState ()"}, "pausePlaying()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the controller into the paused state. This updates the remote control client to indicate it is paused, but keeps audio focus.", "history": "", "FullName": "void pausePlaying ()"}, "isPlaying()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the player is currently playing its stream.", "history": "", "FullName": "boolean isPlaying ()"}, "getDuration()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the total duration of the media stream, in milliseconds.", "history": "", "FullName": "long getDuration ()"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Must call from @B_android#app#Activity#dispatchKeyEvent_E@ to give the transport an opportunity to intercept media keys. Any such keys will show up in @B_android#support#v4#media#TransportPerformer_E@.", "history": "", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Optionally call when no longer using the TransportController. Its resources will also be automatically cleaned up when your activity/view is detached from its window, so you don't normally need to call this explicitly.", "history": "", "FullName": "void destroy ()"}, "TransportMediator(android.view.View, android.support.v4.media.TransportPerformer)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#support#v4#media#TransportPerformer_E@", "TransportPerformer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "TransportMediator (View view, TransportPerformer callbacks)"}, "TransportMediator(android.app.Activity, android.support.v4.media.TransportPerformer)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity no parameter comment"], ["@B_android#support#v4#media#TransportPerformer_E@", "TransportPerformer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "TransportMediator (Activity activity, TransportPerformer callbacks)"}, "getBufferPercentage()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve amount, in percentage (0-100), that the media stream has been buffered on to the local device. Return 100 if the stream is always local.", "history": "", "FullName": "int getBufferPercentage ()"}, "getTransportControlFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the flags for the media transport control buttons that this transport supports. Result is a combination of the following flags: @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PREVIOUS_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_REWIND_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PLAY_PAUSE_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_PAUSE_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_STOP_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_FAST_FORWARD_E@, @B_android#support#v4#media#TransportMediator#FLAG_KEY_MEDIA_NEXT_E@", "history": "", "FullName": "int getTransportControlFlags ()"}, "stopPlaying()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the controller into the stopped state. This updates the remote control client to indicate it is stopped, and removes audio focus from the app.", "history": "", "FullName": "void stopPlaying ()"}, "getCurrentPosition()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current playback location in the media stream, in milliseconds.", "history": "", "FullName": "long getCurrentPosition ()"}, "registerStateListener(android.support.v4.media.TransportStateListener)": {"Returns": [], "Parameters": [["@B_android#support#v4#media#TransportStateListener_E@", "TransportStateListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start listening to changes in playback state.", "history": "", "FullName": "void registerStateListener (TransportStateListener listener)"}, "startPlaying()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the controller into the playing state. This updates the remote control client to indicate it is playing, and takes audio focus for the app.", "history": "", "FullName": "void startPlaying ()"}, "getRemoteControlClient()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#media#RemoteControlClient_E@ associated with this transport. This returns a generic Object since the RemoteControlClient is not availble before @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_E@. Further, this class will not use RemoteControlClient in its implementation until @B_android#os#Build#VERSION_CODES#JELLY_BEAN_MR2_E@. You should always check for null here and not do anything with the RemoteControlClient if none is given; this way you don't need to worry about the current platform API version. Note that this class takes possession of the @B_android#media#RemoteControlClient#OnGetPlaybackPositionListener_E@ and @B_android#media#RemoteControlClient#OnPlaybackPositionUpdateListener_E@ callbacks; you will interact with these through @B_android#support#v4#media#TransportPerformer#onGetCurrentPosition_E@ and @B_android#support#v4#media#TransportPerformer#onSeekTo_E@, respectively.", "history": "", "FullName": "Object getRemoteControlClient ()"}, "unregisterStateListener(android.support.v4.media.TransportStateListener)": {"Returns": [], "Parameters": [["@B_android#support#v4#media#TransportStateListener_E@", "TransportStateListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop listening to changes in playback state.", "history": "", "FullName": "void unregisterStateListener (TransportStateListener listener)"}}, "Inheritance": ["@B_android#support#v4#media#TransportController_E@"], "ClassName": "android.support.v4.media.TransportMediator", "ClassDesc": "Helper for implementing a media transport control (with play, pause, skip, and other media actions). Takes care of both key events and advanced features like @B_android#media#RemoteControlClient_E@. This class is intended to serve as an intermediary between transport controls (whether they be on-screen controls, hardware buttons, remote controls) and the actual player. The player is represented by a single @B_android#support#v4#media#TransportPerformer_E@ that must be supplied to this class. On-screen controls that want to control and show the state of the player should do this through calls to the @B_android#support#v4#media#TransportController_E@ interface. Here is a simple but fairly complete sample of a video player that is built around this class. Note that the MediaController class used here is not the one included in the standard Android framework, but a custom implementation. Real applications often implement their own transport controls, or you can copy the implementation here out of Support4Demos."}