{"Functions": {"setBaseAttributes(android.content.res.TypedArray,int,int)": {"Returns": [], "Parameters": [["@B_android#content#res#TypedArray_E@", "TypedArray: the style attributes to extract the parameters from"], ["int", "int: the identifier of the width attribute"], ["int", "int: the identifier of the height attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the layout parameters from the supplied attributes.", "history": "Added in API level 14", "FullName": "protected void setBaseAttributes (TypedArray attributes, int widthAttr, int heightAttr)"}, "GridLayout.LayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams (ViewGroup.LayoutParams params)"}, "GridLayout.LayoutParams(android.widget.GridLayout.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#widget#GridLayout#LayoutParams_E@", "GridLayout.LayoutParams: The layout params to copy from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy constructor. Clones the width, height, margin values, row spec, and column spec of the source.", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams (GridLayout.LayoutParams source)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: the new gravity value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes how the child views are positioned. Default is LEFT | BASELINE. See @B_android#view#Gravity_E@.", "history": "Added in API level 14", "FullName": "public void setGravity (int gravity)"}, "GridLayout.LayoutParams()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new LayoutParams with default values as defined in @B_android#widget#GridLayout#LayoutParams_E@.", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 14", "FullName": "public boolean equals (Object o)"}, "GridLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#MarginLayoutParams_E@", "ViewGroup.MarginLayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams (ViewGroup.MarginLayoutParams params)"}, "GridLayout.LayoutParams(android.widget.GridLayout.Spec,android.widget.GridLayout.Spec)": {"Returns": [], "Parameters": [["@B_android#widget#GridLayout#Spec_E@", "GridLayout.Spec: the rowSpec"], ["@B_android#widget#GridLayout#Spec_E@", "GridLayout.Spec: the columnSpec"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new LayoutParams instance for this rowSpec and columnSpec. All other fields are initialized with default values as defined in @B_android#widget#GridLayout#LayoutParams_E@.", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams (GridLayout.Spec rowSpec, GridLayout.Spec columnSpec)"}, "GridLayout.LayoutParams(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Values not defined in the attribute set take the default values defined in @B_android#widget#GridLayout#LayoutParams_E@.", "history": "Added in API level 14", "FullName": "public GridLayout.LayoutParams (Context context, AttributeSet attrs)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 14", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_android#view#ViewGroup#LayoutParams_E@", "@B_android#view#ViewGroup#MarginLayoutParams_E@"], "ClassName": "android.widget.GridLayout.LayoutParams", "ClassDesc": "Layout information associated with each of the children of a GridLayout. GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the @B_android#widget#GridLayout#LayoutParams#rowSpec_E@ and @B_android#widget#GridLayout#LayoutParams#columnSpec_E@ layout parameters. @B_android#widget#GridLayout#Spec_E@ are immutable structures and may be shared between the layout parameters of different children. The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. The alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the @B_android#widget#GridLayout#LayoutParams#setGravity_E@ method. The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. @B_android#view#ViewGroup#LayoutParams#width_E@ and @B_android#view#ViewGroup#LayoutParams#height_E@ properties are both @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ from @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@. A component's ability to expand to the size of the parent is instead controlled by the principle of flexibility, as discussed in @B_android#widget#GridLayout_E@. WRAP_CONTENT or MATCH_PARENT when configuring the children of a GridLayout. @B_android#view#ViewGroup#LayoutParams#width_E@ = @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ @B_android#view#ViewGroup#LayoutParams#height_E@ = @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ @B_android#view#ViewGroup#MarginLayoutParams#topMargin_E@ = 0 when @B_android#widget#GridLayout#setUseDefaultMargins_E@ is false; otherwise @B_android#widget#GridLayout#UNDEFINED_E@, to indicate that a default value should be computed on demand. @B_android#view#ViewGroup#MarginLayoutParams#leftMargin_E@ = 0 when @B_android#widget#GridLayout#setUseDefaultMargins_E@ is false; otherwise @B_android#widget#GridLayout#UNDEFINED_E@, to indicate that a default value should be computed on demand. @B_android#view#ViewGroup#MarginLayoutParams#bottomMargin_E@ = 0 when @B_android#widget#GridLayout#setUseDefaultMargins_E@ is false; otherwise @B_android#widget#GridLayout#UNDEFINED_E@, to indicate that a default value should be computed on demand. @B_android#view#ViewGroup#MarginLayoutParams#rightMargin_E@ = 0 when @B_android#widget#GridLayout#setUseDefaultMargins_E@ is false; otherwise @B_android#widget#GridLayout#UNDEFINED_E@, to indicate that a default value should be computed on demand. @B_android#widget#GridLayout#LayoutParams#rowSpec_E@.row = @B_android#widget#GridLayout#UNDEFINED_E@ @B_android#widget#GridLayout#LayoutParams#rowSpec_E@.rowSpan = 1 @B_android#widget#GridLayout#LayoutParams#rowSpec_E@.alignment = @B_android#widget#GridLayout#BASELINE_E@ @B_android#widget#GridLayout#LayoutParams#rowSpec_E@.weight = 0 @B_android#widget#GridLayout#LayoutParams#columnSpec_E@.column = @B_android#widget#GridLayout#UNDEFINED_E@ @B_android#widget#GridLayout#LayoutParams#columnSpec_E@.columnSpan = 1 @B_android#widget#GridLayout#LayoutParams#columnSpec_E@.alignment = @B_android#widget#GridLayout#START_E@ @B_android#widget#GridLayout#LayoutParams#columnSpec_E@.weight = 0 See @B_android#widget#GridLayout_E@ for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class."}