{"Functions": {"getLocalMatrix(android.graphics.Matrix)": {"Returns": [["boolean", "true if the shader has a non-identity local matrix"]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: Set to the local matrix of the shader, if the shader's matrix is non-null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the shader has a non-identity local matrix.", "history": "Added in API level 1", "FullName": "public boolean getLocalMatrix (Matrix localM)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Javafinalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "void finalize ()"}, "setLocalMatrix(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The shader's new local matrix, or null to specify identity This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the shader's local matrix. Passing null will reset the shader's matrix to identity. If the matrix has scale value as 0, the drawing result is undefined.", "history": "Added in API level 1", "FullName": "public void setLocalMatrix (Matrix localM)"}, "Shader()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use subclass constructors directly instead.", "history": "Added in API level 1", "FullName": "public Shader ()"}}, "Inheritance": [], "ClassName": "android.graphics.Shader", "ClassDesc": "Shader is the based class for objects that return horizontal spans of colors during drawing. A subclass of Shader is installed in a Paint calling paint.setShader(shader). After that any object (other than a bitmap) that is drawn with that paint will get its color(s) from the shader."}