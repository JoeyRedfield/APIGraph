{"Functions": {"setHorizontalMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v17#leanback#widget#BaseGridView#setHorizontalSpacing_E@ Sets the spacing in pixels between two child items horizontally.", "history": "added in version 22.0.0", "FullName": "void setHorizontalMargin (int margin)"}, "setWindowAlignmentOffsetPercent(float)": {"Returns": [], "Parameters": [["float", "float: Percentage to offset. E.g., 40 means 40% of the width from low edge. Use @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_OFFSET_PERCENT_DISABLED_E@ to disable. Default value is 50."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset percent for window alignment key line in addition to @B_android#support#v17#leanback#widget#BaseGridView#getWindowAlignmentOffset_E@.", "history": "added in version 22.0.0", "FullName": "void setWindowAlignmentOffsetPercent (float offsetPercent)"}, "setSaveChildrenLimitNumber(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the limit number when @B_android#support#v17#leanback#widget#BaseGridView#getSaveChildrenPolicy_E@ is @B_android#support#v17#leanback#widget#BaseGridView#SAVE_LIMITED_CHILD_E@.", "history": "added in version 22.0.0", "FullName": "void setSaveChildrenLimitNumber (int limitNumber)"}, "getSaveChildrenLimitNumber()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the limit used when when @B_android#support#v17#leanback#widget#BaseGridView#getSaveChildrenPolicy_E@ is @B_android#support#v17#leanback#widget#BaseGridView#SAVE_LIMITED_CHILD_E@", "history": "added in version 22.0.0", "FullName": "int getSaveChildrenLimitNumber ()"}, "getWindowAlignmentOffsetPercent()": {"Returns": [["float", "Percentage to offset. E.g., 40 means 40% of the width from the low edge, or @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_OFFSET_PERCENT_DISABLED_E@ if disabled. Default value is 50."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset percent for window alignment key line in addition to @B_android#support#v17#leanback#widget#BaseGridView#getWindowAlignmentOffset_E@.", "history": "added in version 22.0.0", "FullName": "float getWindowAlignmentOffsetPercent ()"}, "isWindowAlignmentPreferKeyLineOverLowEdge()": {"Returns": [["boolean", "True to prefer key line over low edge, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether prefer key line over low edge when @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_LOW_EDGE_E@ is used. When true, if there are very few items between low edge and key line, align items to key line instead of align items to low edge. Default value is false (aka prefer align to low edge).", "history": "added in version 26.0.0-beta2", "FullName": "boolean isWindowAlignmentPreferKeyLineOverLowEdge ()"}, "setItemAlignmentViewId(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the id of the view to align with. Use @B_android#view#View#NO_ID_E@ (default) for the root @B_android#support#v7#widget#RecyclerView#ViewHolder#itemView_E@. Item alignment settings on BaseGridView are if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "added in version 22.0.0", "FullName": "void setItemAlignmentViewId (int viewId)"}, "getWindowAlignmentOffset()": {"Returns": [["int", "The number of pixels to offset. If the offset is positive, it is distance from low edge (see @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_LOW_EDGE_E@); if the offset is negative, the absolute value is distance from high edge (see @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_HIGH_EDGE_E@). Default value is 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset in pixels for window alignment key line.", "history": "added in version 22.0.0", "FullName": "int getWindowAlignmentOffset ()"}, "scrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to scroll to a certain position. RecyclerView does not implement scrolling logic, rather forwards the call to @B_android#support#v7#widget#RecyclerView#LayoutManager#scrollToPosition_E@", "history": "added in version 22.0.0", "FullName": "void scrollToPosition (int position)"}, "isFocusSearchDisabled()": {"Returns": [["boolean", "True if focus search is disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if focus search is disabled.", "history": "added in version 22.0.0", "FullName": "boolean isFocusSearchDisabled ()"}, "getSelectedPosition()": {"Returns": [["int", "The adapter position of selected item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter position of selected item.", "history": "added in version 22.0.0", "FullName": "int getSelectedPosition ()"}, "setWindowAlignment(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_BOTH_EDGE_E@, @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_LOW_EDGE_E@, @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_HIGH_EDGE_E@ or @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_NO_EDGE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the method for focused item alignment in the view.", "history": "added in version 22.0.0", "FullName": "void setWindowAlignment (int windowAlignment)"}, "setItemMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#support#v17#leanback#widget#BaseGridView#setItemSpacing_E@ Sets the spacing in pixels between two child items.", "history": "added in version 22.0.0", "FullName": "void setItemMargin (int margin)"}, "setVerticalSpacing(int)": {"Returns": [], "Parameters": [["int", "int: Vertical spacing between two child items."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the vertical spacing in pixels between two child items.", "history": "added in version 26.0.0-beta1", "FullName": "void setVerticalSpacing (int spacing)"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass the touch screen motion event down to the target view, or this view if it is the target.", "history": "", "FullName": "boolean dispatchTouchEvent (MotionEvent event)"}, "setPruneChild(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to prune children out side visible area, false to enable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables pruning of children. Disable is useful during transition.", "history": "added in version 22.0.0", "FullName": "void setPruneChild (boolean pruneChild)"}, "getSaveChildrenPolicy()": {"Returns": [["int", "policy, one of @B_android#support#v17#leanback#widget#BaseGridView#SAVE_NO_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_ON_SCREEN_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_LIMITED_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_ALL_CHILD_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the policy for saving children.", "history": "added in version 22.0.0", "FullName": "int getSaveChildrenPolicy ()"}, "setItemSpacing(int)": {"Returns": [], "Parameters": [["int", "int: Vertical and horizontal spacing in pixels between two child items."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the vertical and horizontal spacing in pixels between two child items.", "history": "added in version 26.0.0-beta1", "FullName": "void setItemSpacing (int spacing)"}, "getWindowAlignment()": {"Returns": [["int", "@B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_BOTH_EDGE_E@, @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_LOW_EDGE_E@, @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_HIGH_EDGE_E@ or @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_NO_EDGE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the method for focused item alignment in the view.", "history": "added in version 22.0.0", "FullName": "int getWindowAlignment ()"}, "setLayoutEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable layout, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables layout. All children will be removed when layout is disabled.", "history": "added in version 22.0.0", "FullName": "void setLayoutEnabled (boolean layoutEnabled)"}, "setSelectedPositionSmooth(int)": {"Returns": [], "Parameters": [["int", "int: Adapter position of the item to select."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item and run an animation to scroll to the target position.", "history": "added in version 22.0.0", "FullName": "void setSelectedPositionSmooth (int position)"}, "smoothScrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: The adapter position to scroll to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts a smooth scroll to an adapter position. To support smooth scrolling, you must override @B_android#support#v7#widget#RecyclerView#LayoutManager#smoothScrollToPosition_E@ and create a @B_android#support#v7#widget#RecyclerView#SmoothScroller_E@. @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ is responsible for creating the actual scroll action. If you want to provide a custom smooth scroll logic, override @B_android#support#v7#widget#RecyclerView#LayoutManager#smoothScrollToPosition_E@ in your LayoutManager.", "history": "added in version 22.0.0", "FullName": "void smoothScrollToPosition (int position)"}, "setItemAlignmentOffsetPercent(float)": {"Returns": [], "Parameters": [["float", "float: Percentage to offset. E.g., 40 means 40% of the width from the low edge. Use @B_android#support#v17#leanback#widget#BaseGridView#ITEM_ALIGN_OFFSET_PERCENT_DISABLED_E@ to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset percent for item alignment in addition to @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffset_E@. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "added in version 22.0.0", "FullName": "void setItemAlignmentOffsetPercent (float offsetPercent)"}, "getItemAlignmentOffsetPercent()": {"Returns": [["float", "Percentage to offset. E.g., 40 means 40% of the width from the low edge, or @B_android#support#v17#leanback#widget#BaseGridView#ITEM_ALIGN_OFFSET_PERCENT_DISABLED_E@ if disabled. Default value is 50."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset percent for item alignment in addition to @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffset_E@.", "history": "added in version 22.0.0", "FullName": "float getItemAlignmentOffsetPercent ()"}, "getVerticalMargin()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v17#leanback#widget#BaseGridView#getVerticalSpacing_E@ Returns the spacing in pixels between two child items vertically.", "history": "added in version 22.0.0", "FullName": "int getVerticalMargin ()"}, "hasPreviousViewInSameRow(int)": {"Returns": [["boolean", "True if the view at the given position has a same row sibling in front of it."]], "Parameters": [["int", "int: Position in adapter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the view at the given position has a same row sibling in front of it. This will return true if first item view is not created.", "history": "added in version 22.0.0", "FullName": "boolean hasPreviousViewInSameRow (int position)"}, "getChildDrawingOrder(int, int)": {"Returns": [["int", "The index of the child to draw this iteration."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: The current iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the child to draw for this iteration. Override this if you want to change the drawing order of children. By default, it returns i. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "added in version 22.0.0", "FullName": "int getChildDrawingOrder (int childCount, int i)"}, "setScrollEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable scroll, false to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables scrolling. Disable is useful during transition.", "history": "added in version 22.0.0", "FullName": "void setScrollEnabled (boolean scrollEnabled)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the gravity used for child view positioning. Defaults to GRAVITY_TOP|GRAVITY_START.", "history": "added in version 22.0.0", "FullName": "void setGravity (int gravity)"}, "isWindowAlignmentPreferKeyLineOverHighEdge()": {"Returns": [["boolean", "True to prefer key line over high edge, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether prefer key line over high edge when @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_HIGH_EDGE_E@ is used. When true, if there are very few items between high edge and key line, align items to key line instead of align items to high edge. Default value is true (aka prefer align to key line).", "history": "added in version 26.0.0-beta2", "FullName": "boolean isWindowAlignmentPreferKeyLineOverHighEdge ()"}, "getOnUnhandledKeyListener()": {"Returns": [["@B_android#support#v17#leanback#widget#BaseGridView#OnUnhandledKeyListener_E@", "The unhandled key listener."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unhandled key listener.", "history": "added in version 22.1.0", "FullName": "BaseGridView.OnUnhandledKeyListener getOnUnhandledKeyListener ()"}, "setItemAlignmentOffset(int)": {"Returns": [], "Parameters": [["int", "int: In left to right or vertical case, it's the offset added to left/top edge. In right to left case, it's the offset subtracted from right edge."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets number of pixels to the end of low edge. Supports right to left layout direction. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "added in version 22.0.0", "FullName": "void setItemAlignmentOffset (int offset)"}, "setFocusSearchDisabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to disable focus search, false to enable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables or enables focus search.", "history": "added in version 22.0.0", "FullName": "void setFocusSearchDisabled (boolean disabled)"}, "getInitialPrefetchItemCount()": {"Returns": [["int", "number of items to prefetch."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#isItemPrefetchEnabled_E@", "@B_android#support#v17#leanback#widget#BaseGridView#setInitialPrefetchItemCount_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#collectInitialPrefetchPositions_E@"], "Permissions": [], "Description": "Gets the number of items to prefetch in @B_android#support#v7#widget#RecyclerView#LayoutManager#collectInitialPrefetchPositions_E@, which defines how many inner items should be prefetched when this GridView is nested inside another RecyclerView.", "history": "added in version 26.0.0-beta1", "FullName": "int getInitialPrefetchItemCount ()"}, "setSelectedPosition(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item immediately without animation.", "history": "added in version 22.0.0", "FullName": "void setSelectedPosition (int position)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "getVerticalSpacing()": {"Returns": [["int", "The vertical spacing in pixels between two child items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the vertical spacing in pixels between two child items.", "history": "added in version 26.0.0-beta1", "FullName": "int getVerticalSpacing ()"}, "animateIn()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Undo animateOut() and slide in child views.", "history": "added in version 26.0.0-beta1", "FullName": "void animateIn ()"}, "setItemAlignmentOffsetWithPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether applies padding to item alignment when @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 0 or 100. When true: Applies start/top padding if @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 0. Applies end/bottom padding if @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 100. Does not apply padding if @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is neither 0 nor 100. When false: does not apply padding", "history": "added in version 22.0.0", "FullName": "void setItemAlignmentOffsetWithPadding (boolean withPadding)"}, "getHorizontalMargin()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v17#leanback#widget#BaseGridView#getHorizontalSpacing_E@ Returns the spacing in pixels between two child items horizontally.", "history": "added in version 22.0.0", "FullName": "int getHorizontalMargin ()"}, "setAnimateChildLayout(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable ItemAnimator, false to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether ItemAnimator should run when a child changes size or when adding or removing a child.", "history": "added in version 22.0.0", "FullName": "void setAnimateChildLayout (boolean animateChildLayout)"}, "isItemAlignmentOffsetWithPadding()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if applies padding to item alignment when @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 0 or 100; returns false otherwise. When true: Applies start/top padding when @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 0. Applies end/bottom padding when @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is 100. Does not apply padding if @B_android#support#v17#leanback#widget#BaseGridView#getItemAlignmentOffsetPercent_E@ is neither 0 nor 100. When false: does not apply padding", "history": "added in version 22.0.0", "FullName": "boolean isItemAlignmentOffsetWithPadding ()"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in @B_android#graphics#Canvas_E@ necessitates that a View return true if it uses the methods internally without passing the @B_android#graphics#Canvas#CLIP_TO_LAYER_SAVE_FLAG_E@. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "", "FullName": "boolean hasOverlappingRendering ()"}, "setInitialPrefetchItemCount(int)": {"Returns": [], "Parameters": [["int", "int: Number of items to prefetch"]], "Throws": [], "SeeAlso": ["@B_android#support#v17#leanback#widget#BaseGridView#getInitialPrefetchItemCount_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#isItemPrefetchEnabled_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#collectInitialPrefetchPositions_E@"], "Permissions": [], "Description": "Sets the number of items to prefetch in @B_android#support#v7#widget#RecyclerView#LayoutManager#collectInitialPrefetchPositions_E@, which defines how many inner items should be prefetched when this GridView is nested inside another RecyclerView. Set this value to the number of items this inner GridView will display when it is first scrolled into the viewport. RecyclerView will attempt to prefetch that number of items so they are ready, avoiding jank as the inner GridView is scrolled into the viewport. For example, take a VerticalGridView of scrolling HorizontalGridViews. The rows always have 6 items visible in them (or 7 if not aligned). Passing 6 to this method for each inner GridView will enable RecyclerView's prefetching feature to do create/bind work for 6 views within a row early, before it is scrolled on screen, instead of just the default 4. Calling this method does nothing unless the LayoutManager is in a RecyclerView nested in another RecyclerView.", "history": "added in version 26.0.0-beta1", "FullName": "void setInitialPrefetchItemCount (int itemCount)"}, "setSelectedPosition(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item immediately without animation, scrollExtra is applied in primary scroll direction. The scrollExtra will be kept until another @B_android#support#v17#leanback#widget#BaseGridView#setSelectedPosition_E@ or @B_android#support#v17#leanback#widget#BaseGridView#setSelectedPositionSmooth_E@ call.", "history": "added in version 22.1.0", "FullName": "void setSelectedPosition (int position, int scrollExtra)"}, "isFocusDrawingOrderEnabled()": {"Returns": [["boolean", "True if draws selected child at last, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if draws selected child at last, false otherwise. Default is enabled.", "history": "added in version 22.0.0", "FullName": "boolean isFocusDrawingOrderEnabled ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify layout manager that layout directionality has been updated", "history": "", "FullName": "void onRtlPropertiesChanged (int layoutDirection)"}, "getItemAlignmentViewId()": {"Returns": [["int", "The id of the view to align with, or @B_android#view#View#NO_ID_E@ for the root @B_android#support#v7#widget#RecyclerView#ViewHolder#itemView_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the id of the view to align with, or @B_android#view#View#NO_ID_E@ for the root @B_android#support#v7#widget#RecyclerView#ViewHolder#itemView_E@.", "history": "added in version 22.0.0", "FullName": "int getItemAlignmentViewId ()"}, "setWindowAlignmentOffset(int)": {"Returns": [], "Parameters": [["int", "int: The number of pixels to offset. If the offset is positive, it is distance from low edge (see @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_LOW_EDGE_E@); if the offset is negative, the absolute value is distance from high edge (see @B_android#support#v17#leanback#widget#BaseGridView#WINDOW_ALIGN_HIGH_EDGE_E@). Default value is 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset in pixels for window alignment key line.", "history": "added in version 22.0.0", "FullName": "void setWindowAlignmentOffset (int offset)"}, "setSaveChildrenPolicy(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#support#v17#leanback#widget#BaseGridView#SAVE_NO_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_ON_SCREEN_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_LIMITED_CHILD_E@ @B_android#support#v17#leanback#widget#BaseGridView#SAVE_ALL_CHILD_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the policy for saving children.", "history": "added in version 22.0.0", "FullName": "void setSaveChildrenPolicy (int savePolicy)"}, "isScrollEnabled()": {"Returns": [["boolean", "True if scrolling is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if scrolling is enabled, false otherwise.", "history": "added in version 22.0.0", "FullName": "boolean isScrollEnabled ()"}, "focusSearch(int)": {"Returns": [["@B_android#view#View_E@", "The nearest focusable in the specified direction, or null if none can be found."]], "Parameters": [["int", "int: One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the nearest view in the specified direction that can take focus. This does not actually give focus to that view.", "history": "", "FullName": "View focusSearch (int direction)"}, "setHorizontalSpacing(int)": {"Returns": [], "Parameters": [["int", "int: Horizontal spacing in pixels between two child items."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the horizontal spacing in pixels between two child items.", "history": "added in version 26.0.0-beta1", "FullName": "void setHorizontalSpacing (int spacing)"}, "setHasOverlappingRendering(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "void setHasOverlappingRendering (boolean hasOverlapping)"}, "setFocusDrawingOrderEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to draw the selected child at last, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the default \"focus draw at last\" order rule. Default is enabled.", "history": "added in version 22.0.0", "FullName": "void setFocusDrawingOrderEnabled (boolean enabled)"}, "getHorizontalSpacing()": {"Returns": [["int", "The Horizontal spacing in pixels between two child items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the horizontal spacing in pixels between two child items.", "history": "added in version 26.0.0-beta1", "FullName": "int getHorizontalSpacing ()"}, "getItemAlignmentOffset()": {"Returns": [["int", "The number of pixels to the end of low edge."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns number of pixels to the end of low edge. Supports right to left layout direction. In left to right or vertical case, it's the offset added to left/top edge. In right to left case, it's the offset subtracted from right edge. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "added in version 22.0.0", "FullName": "int getItemAlignmentOffset ()"}, "getViewSelectedOffsets(android.view.View, int[])": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to get offsets."], ["int[]", "int: offsets[0] holds offset of X, offsets[1] holds offset of Y."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the x/y offsets to final position from current position if the view is selected.", "history": "added in version 22.0.0", "FullName": "void getViewSelectedOffsets (View view, int[] offsets)"}, "setVerticalMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v17#leanback#widget#BaseGridView#setVerticalSpacing_E@ Sets the spacing in pixels between two child items vertically.", "history": "added in version 22.0.0", "FullName": "void setVerticalMargin (int margin)"}, "isChildLayoutAnimated()": {"Returns": [["boolean", "True if ItemAnimator is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an animation will run when a child changes size or when adding or removing a child.", "history": "added in version 22.0.0", "FullName": "boolean isChildLayoutAnimated ()"}, "setChildrenVisibility(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#View#getVisibility_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes and overrides children's visibility.", "history": "added in version 22.0.0", "FullName": "void setChildrenVisibility (int visibility)"}, "animateOut()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Temporarily slide out child views to bottom (for VerticalGridView) or end (for HorizontalGridView). Layout and scrolling will be suppressed until @B_android#support#v17#leanback#widget#BaseGridView#animateIn_E@ is called.", "history": "added in version 26.0.0-beta1", "FullName": "void animateOut ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "@B_android#support#v7#widget#RecyclerView_E@"], "ClassName": "android.support.v17.leanback.widget.BaseGridView", "ClassDesc": "An abstract base class for vertically and horizontally scrolling lists. The items come from the @B_android#support#v7#widget#RecyclerView#Adapter_E@ associated with this view. Do not directly use this class, use @B_android#support#v17#leanback#widget#VerticalGridView_E@ and @B_android#support#v17#leanback#widget#HorizontalGridView_E@. The class is not intended to be subclassed other than @B_android#support#v17#leanback#widget#VerticalGridView_E@ and @B_android#support#v17#leanback#widget#HorizontalGridView_E@."}