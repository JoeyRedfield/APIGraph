{"Functions": {"depthFirstViewTraversal(android.view.View)": {"Returns": [["Iterable<View>", "no returns description in source"]], "Parameters": [["View", "View: the non-null, root view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterable which iterates thru the provided view and its children in a depth-first, in-order traversal. That is to say that for a view such as: Root / | \\ A R U /| |\\ B D G N Will be iterated: Root, A, B, D, R, G, N, U.", "history": "", "FullName": "Iterable<View> depthFirstViewTraversal (View root)"}, "breadthFirstViewTraversal(android.view.View)": {"Returns": [["Iterable<View>", "no returns description in source"]], "Parameters": [["View", "View: the non-null, root view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterable which iterates thru the provided view and its children in a breadth-first, row-level-order traversal. That is to say that for a view such as: Root / | \\ A R U /| |\\ B D G N Will be iterated: Root, A, R, U, B, D, G, N", "history": "", "FullName": "Iterable<View> breadthFirstViewTraversal (View root)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.util.TreeIterables", "ClassDesc": "Utility methods for iterating over tree structured items. Since the view hierarchy is a tree - having a method of iterating over its contents is useful. This is generalized for any object which can display tree like qualities - but this generalization was done for testability concerns (since creating View hierarchies is a pain). Only public methods of this utility class are considered public API of the test framework."}