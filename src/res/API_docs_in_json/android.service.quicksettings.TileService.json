{"Functions": {"unlockAndRun(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prompts the user to unlock the device before executing the Runnable. The user will be prompted for their current security method if applicable and if successful, runnable will be executed. The Runnable will not be executed if the user fails to unlock the device or cancels the operation.", "history": "Added in API level 24", "FullName": "public final void unlockAndRun (Runnable runnable)"}, "showDialog(android.app.Dialog)": {"Returns": [], "Parameters": [["@B_android#app#Dialog_E@", "Dialog: Dialog to show."]], "Throws": [], "SeeAlso": ["@B_android#service#quicksettings#TileService#isLocked_E@"], "Permissions": [], "Description": "Used to show a dialog. This will collapse the Quick Settings panel and show the dialog.", "history": "Added in API level 24", "FullName": "public final void showDialog (Dialog dialog)"}, "requestListeningState(android.content.Context,android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#content#ComponentName_E@", "ComponentName no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests that a tile be put in the listening state so it can send an update. This method is only applicable to tiles that have @B_android#service#quicksettings#TileService#META_DATA_ACTIVE_TILE_E@ defined as true on their TileService Manifest declaration, and will do nothing otherwise.", "history": "Added in API level 24", "FullName": "public static final void requestListeningState (Context context, ComponentName component)"}, "onTileAdded()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user adds this tile to Quick Settings. Note that this is not guaranteed to be called between @B_android#app#Service#onCreate_E@ and @B_android#service#quicksettings#TileService#onStartListening_E@, it will only be called when the tile is added and not on subsequent binds.", "history": "Added in API level 24", "FullName": "public void onTileAdded ()"}, "startActivityAndCollapse(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start an activity while collapsing the panel.", "history": "Added in API level 24", "FullName": "public final void startActivityAndCollapse (Intent intent)"}, "onStopListening()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this tile moves out of the listening state.", "history": "Added in API level 24", "FullName": "public void onStopListening ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 24", "FullName": "public IBinder onBind (Intent intent)"}, "onClick()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user clicks on this tile.", "history": "Added in API level 24", "FullName": "public void onClick ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads, registered receivers, etc) at this point. Upon return, there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.", "history": "Added in API level 24", "FullName": "public void onDestroy ()"}, "TileService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public TileService ()"}, "isSecure()": {"Returns": [["boolean", "true if the device is secure."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the device is in a secure state. TileServices should detect when the device is secure and change their behavior accordingly.", "history": "Added in API level 24", "FullName": "public final boolean isSecure ()"}, "onStartListening()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#service#quicksettings#TileService#getQsTile_E@", "@B_android#service#quicksettings#Tile#updateTile_E@"], "Permissions": [], "Description": "Called when this tile moves into a listening state. When this tile is in a listening state it is expected to keep the UI up to date. Any listeners or callbacks needed to keep this tile up to date should be registered here and unregistered in @B_android#service#quicksettings#TileService#onStopListening_E@.", "history": "Added in API level 24", "FullName": "public void onStartListening ()"}, "onTileRemoved()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user removes this tile from Quick Settings.", "history": "Added in API level 24", "FullName": "public void onTileRemoved ()"}, "getQsTile()": {"Returns": [["@B_android#service#quicksettings#Tile_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#service#quicksettings#Tile_E@ for this service. This tile may be used to get or set the current state for this tile. This tile is only valid for updates between @B_android#service#quicksettings#TileService#onStartListening_E@ and @B_android#service#quicksettings#TileService#onStopListening_E@.", "history": "Added in API level 24", "FullName": "public final Tile getQsTile ()"}, "isLocked()": {"Returns": [["boolean", "true if the device is locked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the lock screen is showing. When a device is locked, then @B_android#service#quicksettings#TileService#showDialog_E@ will not present a dialog, as it will be under the lock screen. If the behavior of the Tile is safe to do while locked, then the user should use @B_android#content#ContextWrapper#startActivity_E@ to launch an activity on top of the lock screen, otherwise the tile should use @B_android#service#quicksettings#TileService#unlockAndRun_E@ to give the user their security challenge.", "history": "Added in API level 24", "FullName": "public final boolean isLocked ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.quicksettings.TileService", "ClassDesc": "A TileService provides the user a tile that can be added to Quick Settings. Quick Settings is a space provided that allows the user to change settings and take quick actions without leaving the context of their current app. The lifecycle of a TileService is different from some other services in that it may be unbound during parts of its lifecycle. Any of the following lifecycle events can happen indepently in a separate binding/creation of the service. When a tile is added by the user its TileService will be bound to and @B_android#service#quicksettings#TileService#onTileAdded_E@ will be called. When a tile should be up to date and listing will be indicated by @B_android#service#quicksettings#TileService#onStartListening_E@ and @B_android#service#quicksettings#TileService#onStopListening_E@. When the user removes a tile from Quick Settings @B_android#service#quicksettings#TileService#onTileRemoved_E@ will be called. TileService will be detected by tiles that match the @B_android#service#quicksettings#TileService#ACTION_QS_TILE_E@ and require the permission \"android.permission.BIND_QUICK_SETTINGS_TILE\". The label and icon for the service will be used as the default label and icon for the tile. Here is an example TileService declaration."}