{"Functions": {"sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityEvent_E@", "@B_android#view#accessibility#AccessibilityManager_E@"], "Permissions": [], "Description": "Handles the request for sending an @B_android#view#accessibility#AccessibilityEvent_E@. The method does not guarantee to check if accessibility is on before sending the event for dispatch. It is responsibility of the caller to do the check via calling @B_android#view#accessibility#AccessibilityManager#isEnabled_E@.", "history": "Added in API level 4", "FullName": "public abstract void sendAccessibilityEventUnchecked (AccessibilityEvent event)"}, "sendAccessibilityEvent(int)": {"Returns": [], "Parameters": [["int", "int: The event type."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityEvent_E@", "@B_android#view#accessibility#AccessibilityManager_E@"], "Permissions": [], "Description": "Handles the request for sending an @B_android#view#accessibility#AccessibilityEvent_E@ given the event type. The method must first check if accessibility is on via calling @B_android#view#accessibility#AccessibilityManager#isEnabled_E@, obtain an @B_android#view#accessibility#AccessibilityEvent_E@ from the event pool through calling @B_android#view#accessibility#AccessibilityEvent#obtain_E@, populate the event, and send it for dispatch via calling @B_android#view#accessibility#AccessibilityManager#sendAccessibilityEvent_E@.", "history": "Added in API level 4", "FullName": "public abstract void sendAccessibilityEvent (int eventType)"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityEventSource", "ClassDesc": "This interface is implemented by classes source of @B_android#view#accessibility#AccessibilityEvent_E@s."}