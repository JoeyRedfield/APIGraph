{"Functions": {"setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousServerSocketChannel setOption (SocketOption<T> name, T value)"}, "open(java.nio.channels.AsynchronousChannelGroup)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "A new asynchronous server socket channel"]], "Parameters": [["@B_java#nio#channels#AsynchronousChannelGroup_E@", "AsynchronousChannelGroup: The group to which the newly constructed channel should be bound, or null for the default group"]], "Throws": [["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group is shutdown"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens an asynchronous server-socket channel. The new channel is created by invoking the @B_java#nio#channels#spi#AsynchronousChannelProvider#openAsynchronousServerSocketChannel_E@ method on the @B_java#nio#channels#spi#AsynchronousChannelProvider_E@ object that created the given group. If the group parameter is default group.", "history": "Added in API level 26", "FullName": "public static AsynchronousServerSocketChannel open (AsynchronousChannelGroup group)"}, "accept(A,java.nio.channels.CompletionHandler<java.nio.channels.AsynchronousSocketChannel,?superA>)": {"Returns": [], "Parameters": [["A", "A: The object to attach to the I/O operation; can be null"], ["@B_java#nio#channels#CompletionHandler_E@", "CompletionHandler: The handler for consuming the result"]], "Throws": [["@B_java#nio#channels#AcceptPendingException_E@", "If an accept operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetBoundException_E@", "If this channel's socket has not yet been bound"], ["@B_java#nio#channels#ShutdownChannelGroupException_E@", "If the channel group has terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a connection. This method initiates an asynchronous operation to accept a connection made to this channel's socket. The handler parameter is a completion handler that is invoked when a connection is accepted (or the operation fails). The result passed to the completion handler is the @B_java#nio#channels#AsynchronousSocketChannel_E@ to the new connection. When a new connection is accepted then the resulting AsynchronousSocketChannel will be bound to the same @B_java#nio#channels#AsynchronousChannelGroup_E@ as this channel. If the group is @B_java#nio#channels#AsynchronousChannelGroup#isShutdown_E@ and a connection is accepted, then the connection is closed, and the operation completes with an IOException and cause @B_java#nio#channels#ShutdownChannelGroupException_E@. To allow for concurrent handling of new connections, the completion handler is not invoked directly by the initiating thread when a new connection is accepted immediately (see If a security manager has been installed then it verifies that the address and port number of the connection's remote endpoint are permitted by the security manager's @B_java#lang#SecurityManager#checkAccept_E@ method. The permission check is performed with privileges that are restricted by the calling context of this method. If the permission check fails then the connection is closed and the operation completes with a @B_java#lang#SecurityException_E@.", "history": "Added in API level 26", "FullName": "public abstract void accept (A attachment, CompletionHandler<AsynchronousSocketChannel, ? super A> handler)"}, "bind(java.net.SocketAddress, int)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The local address to bind the socket, or null to bind to an automatically assigned socket address"], ["int", "int: The maximum number of pending connections"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", "If the socket is already bound"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given address is not supported"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"], ["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the associated channel is closed. The backlog parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the backlog parameter has the value 0, or a negative value, then an implementation specific default is used.", "history": "added in API level 26", "FullName": "public abstract AsynchronousServerSocketChannel bind (SocketAddress local, int backlog)"}, "bind(java.net.SocketAddress,int)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The local address to bind the socket, or null to bind to an automatically assigned socket address"], ["int", "int: The maximum number of pending connections"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", "If the socket is already bound"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given address is not supported"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"], ["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the associated channel is closed. The backlog parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the backlog parameter has the value 0, or a negative value, then an implementation specific default is used.", "history": "Added in API level 26", "FullName": "public abstract AsynchronousServerSocketChannel bind (SocketAddress local, int backlog)"}, "getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port of the channel's socket is returned.", "history": "Added in API level 26", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "open()": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "A new asynchronous server socket channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens an asynchronous server-socket channel. This method returns an asynchronous server socket channel that is bound to the default group. This method is equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static AsynchronousServerSocketChannel open ()"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#AsynchronousChannelProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 26", "FullName": "public final AsynchronousChannelProvider provider ()"}, "setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 26", "FullName": "public abstract AsynchronousServerSocketChannel setOption (SocketOption<T> name, T value)"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#AsynchronousServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The local address to bind the socket, or null to bind to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", ""], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", ""], ["@B_java#lang#SecurityException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. An invocation of this method is equivalent to the following:", "history": "Added in API level 26", "FullName": "public final AsynchronousServerSocketChannel bind (SocketAddress local)"}, "accept()": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future object representing the pending result"]], "Parameters": [], "Throws": [["@B_java#nio#channels#AcceptPendingException_E@", "If an accept operation is already in progress on this channel"], ["@B_java#nio#channels#NotYetBoundException_E@", "If this channel's socket has not yet been bound"]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a connection. This method initiates an asynchronous operation to accept a connection made to this channel's socket. The method behaves in exactly the same manner as the @B_java#nio#channels#AsynchronousServerSocketChannel#accept_E@ method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's @B_java#util#concurrent#Future#get_E@ method returns the @B_java#nio#channels#AsynchronousSocketChannel_E@ to the new connection on successful completion.", "history": "Added in API level 26", "FullName": "public abstract Future<AsynchronousSocketChannel> accept ()"}, "AsynchronousServerSocketChannel(java.nio.channels.spi.AsynchronousChannelProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#AsynchronousChannelProvider_E@", "AsynchronousChannelProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected AsynchronousServerSocketChannel (AsynchronousChannelProvider provider)"}}, "Inheritance": [], "ClassName": "java.nio.channels.AsynchronousServerSocketChannel", "ClassDesc": "An asynchronous channel for stream-oriented listening sockets. An asynchronous server-socket channel is created by invoking the @B_java#nio#channels#AsynchronousServerSocketChannel#open_E@ method of this class. A newly-created asynchronous server-socket channel is open but not yet bound. It can be bound to a local address and configured to listen for connections by invoking the @B_java#nio#channels#AsynchronousServerSocketChannel#bind_E@ method. Once bound, the @B_java#nio#channels#AsynchronousServerSocketChannel#accept_E@ method is used to initiate the accepting of connections to the channel's socket. An attempt to invoke the @B_java#nio#channels#NotYetBoundException_E@ to be thrown. Channels of this type are safe for use by multiple concurrent threads though at most one accept operation can be outstanding at any time. If a thread initiates an accept operation before a previous accept operation has completed then an @B_java#nio#channels#AcceptPendingException_E@ will be thrown. Socket options are configured using the @B_java#nio#channels#AsynchronousServerSocketChannel#setOption_E@ method. Channels of this type support the following options:"}