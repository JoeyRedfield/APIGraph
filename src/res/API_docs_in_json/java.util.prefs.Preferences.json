{"Functions": {"addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#PreferenceChangeListener_E@", "PreferenceChangeListener: The preference change listener to add."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pcl is null."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#removePreferenceChangeListener_E@", "@B_java#util#prefs#Preferences#addNodeChangeListener_E@"], "Permissions": [], "Description": "Registers the specified listener to receive @B_java#util#prefs#Preferences#removeNode_E@ method, which generates a Events are only guaranteed for changes made within the same JVM as the registered listener, though some implementations may generate events for changes made outside this JVM. Events may be generated before the changes have been made persistent. Events are not generated when preferences are modified in descendants of this node; a caller desiring such events must register with each descendant.", "history": "Added in API level 1", "FullName": "public abstract void addPreferenceChangeListener (PreferenceChangeListener pcl)"}, "getDouble(java.lang.String,double)": {"Returns": [["double", "the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a double."], ["double", "double: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putDouble_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the double value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Double#parseDouble_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putDouble_E@. If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract double getDouble (String key, double def)"}, "isUserNode()": {"Returns": [["boolean", "true if this preference node is in the user preference tree, false if it's in the system preference tree."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean isUserNode ()"}, "userRoot()": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the root preference node for the calling user."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and it denies RuntimePermission(\"preferences\")."]], "SeeAlso": ["@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static Preferences userRoot ()"}, "exportNode(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#util#prefs#BackingStoreException_E@", "if preference data cannot be read from backing store."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#importPreferences_E@"], "Permissions": [], "Description": "Emits on the specified output stream an XML document representing all of the preferences contained in this node (but not its descendants). This XML document is, in effect, an offline backup of the node. The XML document will have the following DOCTYPE declaration: This method is an exception to the general rule that the results of concurrently executing multiple methods in this class yields results equivalent to some serial execution. If the preferences at this node are modified concurrently with an invocation of this method, the exported preferences comprise a \"fuzzy snapshot\" of the preferences contained in the node; some of the concurrent modifications may be reflected in the exported data while others may not.", "history": "Added in API level 1", "FullName": "public abstract void exportNode (OutputStream os)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": ["@B_java#util#prefs#Preferences#sync_E@"], "Permissions": [], "Description": "Forces any changes in the contents of this preference node and its descendants to the persistent store. Once this method returns successfully, it is safe to assume that all changes made in the subtree rooted at this node prior to the method invocation have become permanent. Implementations are free to flush changes into the persistent store at any time. They do not need to wait for this method to be called. When a flush occurs on a newly created node, it is made persistent, as are any ancestors (and descendants) that have yet to be made persistent. Note however that any preference value changes in ancestors are If this method is invoked on a node that has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method, flushSpi() is invoked on this node, but not on others.", "history": "Added in API level 1", "FullName": "public abstract void flush ()"}, "systemRoot()": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the root preference node for the system."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and it denies RuntimePermission(\"preferences\")."]], "SeeAlso": ["@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static Preferences systemRoot ()"}, "put(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the specified value is to be associated."], ["@B_java#lang#String_E@", "String: value to be associated with the specified key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this preference node.", "history": "added in API level 1", "FullName": "public abstract void put (String key, String value)"}, "childrenNames()": {"Returns": [["@B_java#lang#String_E@", "the names of the children of this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the names of the children of this preference node, relative to this node. (The returned array will be of size zero if this node has no children.)", "history": "Added in API level 1", "FullName": "public abstract String[] childrenNames ()"}, "nodeExists(java.lang.String)": {"Returns": [["boolean", "true if the specified node exists."]], "Parameters": [["@B_java#lang#String_E@", "String: the path name of the node whose existence is to be checked."]], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalArgumentException_E@", "if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long)."], ["@B_java#lang#NullPointerException_E@", "if path name is null."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method and pathName is not the empty string (\"\")."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the named preference node exists in the same tree as this node. Relative path names (which do not begin with the slash character If this node (or an ancestor) has already been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method, it", "history": "Added in API level 1", "FullName": "public abstract boolean nodeExists (String pathName)"}, "node(java.lang.String)": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the specified preference node."]], "Parameters": [["@B_java#lang#String_E@", "String: the path name of the preference node to return."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long)."], ["@B_java#lang#NullPointerException_E@", "if path name is null."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#flush_E@"], "Permissions": [], "Description": "Returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist. Accepts a relative or absolute path name. Relative path names (which do not begin with the slash character If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the", "history": "Added in API level 1", "FullName": "public abstract Preferences node (String pathName)"}, "putByteArray(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["byte[]", "byte: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH*3/4."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getByteArray_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Associates a string representing the specified byte array with the specified key in this preference node. The associated string is the @B_java#util#prefs#Preferences#getByteArray_E@.", "history": "added in API level 1", "FullName": "public abstract void putByteArray (String key, byte[] value)"}, "putLong(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["long", "long: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getLong_E@"], "Permissions": [], "Description": "Associates a string representing the specified long value with the specified key in this preference node. The associated string is the one that would be returned if the long value were passed to @B_java#lang#Long#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getLong_E@.", "history": "Added in API level 1", "FullName": "public abstract void putLong (String key, long value)"}, "removeNode()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has already been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#UnsupportedOperationException_E@", "if this method is invoked on the root node."]], "SeeAlso": ["@B_java#util#prefs#Preferences#flush_E@"], "Permissions": [], "Description": "Removes this preference node and all of its descendants, invalidating any preferences contained in the removed nodes. Once a node has been removed, attempting any method other than @B_java#util#prefs#Preferences#name_E@, @B_java#util#prefs#Preferences#absolutePath_E@, @B_java#util#prefs#Preferences#isUserNode_E@, @B_java#util#prefs#Preferences#flush_E@ or @B_java#util#prefs#Preferences#node_E@ on the corresponding @B_java#lang#Object_E@ can still be invoked on a node after it has been removed; they will not throw The removal is not guaranteed to be persistent until the If this implementation supports", "history": "Added in API level 1", "FullName": "public abstract void removeNode ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this preferences node, as if computed by the expression:", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}, "putBoolean(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["boolean", "boolean: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getBoolean_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Associates a string representing the specified boolean value with the specified key in this preference node. The associated string is @B_java#util#prefs#Preferences#getBoolean_E@.", "history": "Added in API level 1", "FullName": "public abstract void putBoolean (String key, boolean value)"}, "putByteArray(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["byte[]", "byte: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH*3/4."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getByteArray_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Associates a string representing the specified byte array with the specified key in this preference node. The associated string is the @B_java#util#prefs#Preferences#getByteArray_E@.", "history": "Added in API level 1", "FullName": "public abstract void putByteArray (String key, byte[] value)"}, "putInt(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["int", "int: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getInt_E@"], "Permissions": [], "Description": "Associates a string representing the specified int value with the specified key in this preference node. The associated string is the one that would be returned if the int value were passed to @B_java#lang#Integer#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getInt_E@.", "history": "Added in API level 1", "FullName": "public abstract void putInt (String key, int value)"}, "Preferences()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "protected Preferences ()"}, "exportSubtree(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#util#prefs#BackingStoreException_E@", "if preference data cannot be read from backing store."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#importPreferences_E@", "@B_java#util#prefs#Preferences#exportNode_E@"], "Permissions": [], "Description": "Emits an XML document representing all of the preferences contained in this node and all of its descendants. This XML document is, in effect, an offline backup of the subtree rooted at the node. The XML document will have the following DOCTYPE declaration: This method is an exception to the general rule that the results of concurrently executing multiple methods in this class yields results equivalent to some serial execution. If the preferences or nodes in the subtree rooted at this node are modified concurrently with an invocation of this method, the exported preferences comprise a \"fuzzy snapshot\" of the subtree; some of the concurrent modifications may be reflected in the exported data while others may not.", "history": "Added in API level 1", "FullName": "public abstract void exportSubtree (OutputStream os)"}, "systemNodeForPackage(java.lang.Class<?>)": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the system preference node associated with the package of which c is a member."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class for whose package a system preference node is desired."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if c is null."], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it denies RuntimePermission(\"preferences\")."]], "SeeAlso": ["@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "This convention does not apply to the unnamed package, whose associated preference node is A class Invoking this method will result in the creation of the returned node and its ancestors if they do not already exist. If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the", "history": "Added in API level 1", "FullName": "public static Preferences systemNodeForPackage (Class<?> c)"}, "getInt(java.lang.String, int)": {"Returns": [["int", "the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as an int."], ["int", "int: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putInt_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the int value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Integer#parseInt_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putInt_E@. If the implementation supports", "history": "added in API level 1", "FullName": "public abstract int getInt (String key, int def)"}, "get(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value associated with key, or def if no value is associated with key, or the backing store is inaccessible."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned."], ["@B_java#lang#String_E@", "String: the value to be returned in the event that this preference node has no value associated with key."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value associated with the specified key in this preference node. Returns the specified default if there is no value associated with the key, or the backing store is inaccessible. Some implementations may store default values in their backing stores. If there is no value associated with the specified key but there is such a", "history": "added in API level 1", "FullName": "public abstract String get (String key, String def)"}, "sync()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#flush_E@"], "Permissions": [], "Description": "Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any VM) prior to the", "history": "Added in API level 1", "FullName": "public abstract void sync ()"}, "getFloat(java.lang.String,float)": {"Returns": [["float", "the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a float."], ["float", "float: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putFloat_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the float value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Float#parseFloat_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putFloat_E@. If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract float getFloat (String key, float def)"}, "getDouble(java.lang.String, double)": {"Returns": [["double", "the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a double."], ["double", "double: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putDouble_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the double value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Double#parseDouble_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putDouble_E@. If the implementation supports", "history": "added in API level 1", "FullName": "public abstract double getDouble (String key, double def)"}, "removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#PreferenceChangeListener_E@", "PreferenceChangeListener: The preference change listener to remove."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if pcl was not a registered preference change listener on this node."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#addPreferenceChangeListener_E@"], "Permissions": [], "Description": "Removes the specified preference change listener, so it no longer receives preference change events.", "history": "Added in API level 1", "FullName": "public abstract void removePreferenceChangeListener (PreferenceChangeListener pcl)"}, "parent()": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the parent of this preference node."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent of this preference node, or", "history": "Added in API level 1", "FullName": "public abstract Preferences parent ()"}, "absolutePath()": {"Returns": [["@B_java#lang#String_E@", "this preference node's absolute path name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this preference node's absolute path name.", "history": "Added in API level 1", "FullName": "public abstract String absolutePath ()"}, "addNodeChangeListener(java.util.prefs.NodeChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#NodeChangeListener_E@", "NodeChangeListener: The NodeChangeListener to add."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if ncl is null."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#removeNodeChangeListener_E@", "@B_java#util#prefs#Preferences#addPreferenceChangeListener_E@"], "Permissions": [], "Description": "Registers the specified listener to receive @B_java#util#prefs#Preferences#removeNode_E@ invocation results in multiple Events are only guaranteed for changes made within the same JVM as the registered listener, though some implementations may generate events for changes made outside this JVM. Events may be generated before the changes have become permanent. Events are not generated when indirect descendants of this node are added or removed; a caller desiring such events must register with each descendant. Few guarantees can be made regarding node creation. Because nodes are created implicitly upon access, it may not be feasible for an implementation to determine whether a child node existed in the backing store prior to access (for example, because the backing store is unreachable or cached information is out of date). Under these circumstances, implementations are neither required to generate node change events nor prohibited from doing so.", "history": "Added in API level 1", "FullName": "public abstract void addNodeChangeListener (NodeChangeListener ncl)"}, "getBoolean(java.lang.String,boolean)": {"Returns": [["boolean", "the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a boolean."], ["boolean", "boolean: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#get_E@", "@B_java#util#prefs#Preferences#putBoolean_E@"], "Permissions": [], "Description": "Returns the boolean value represented by the string associated with the specified key in this preference node. Valid strings are @B_java#util#prefs#Preferences#putBoolean_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is something other than If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract boolean getBoolean (String key, boolean def)"}, "putInt(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["int", "int: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getInt_E@"], "Permissions": [], "Description": "Associates a string representing the specified int value with the specified key in this preference node. The associated string is the one that would be returned if the int value were passed to @B_java#lang#Integer#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getInt_E@.", "history": "added in API level 1", "FullName": "public abstract void putInt (String key, int value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#removeNode_E@"], "Permissions": [], "Description": "Removes all of the preferences (key-value associations) in this preference node. This call has no effect on any descendants of this node. If this implementation supports", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "getLong(java.lang.String,long)": {"Returns": [["long", "the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a long."], ["long", "long: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putLong_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the long value represented by the string associated with the specified key in this preference node. The string is converted to a long as by @B_java#lang#Long#parseLong_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putLong_E@. If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract long getLong (String key, long def)"}, "keys()": {"Returns": [["@B_java#lang#String_E@", "an array of the keys that have an associated value in this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Returns all of the keys that have an associated value in this preference node. (The returned array will be of size zero if this node has no preferences.) If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract String[] keys ()"}, "putLong(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["long", "long: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getLong_E@"], "Permissions": [], "Description": "Associates a string representing the specified long value with the specified key in this preference node. The associated string is the one that would be returned if the long value were passed to @B_java#lang#Long#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getLong_E@.", "history": "added in API level 1", "FullName": "public abstract void putLong (String key, long value)"}, "putFloat(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["float", "float: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getFloat_E@"], "Permissions": [], "Description": "Associates a string representing the specified float value with the specified key in this preference node. The associated string is the one that would be returned if the float value were passed to @B_java#lang#Float#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getFloat_E@.", "history": "Added in API level 1", "FullName": "public abstract void putFloat (String key, float value)"}, "getInt(java.lang.String,int)": {"Returns": [["int", "the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as an int."], ["int", "int: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putInt_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the int value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Integer#parseInt_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putInt_E@. If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract int getInt (String key, int def)"}, "putDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["double", "double: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getDouble_E@"], "Permissions": [], "Description": "Associates a string representing the specified double value with the specified key in this preference node. The associated string is the one that would be returned if the double value were passed to @B_java#lang#Double#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getDouble_E@.", "history": "added in API level 1", "FullName": "public abstract void putDouble (String key, double value)"}, "putBoolean(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["boolean", "boolean: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getBoolean_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Associates a string representing the specified boolean value with the specified key in this preference node. The associated string is @B_java#util#prefs#Preferences#getBoolean_E@.", "history": "added in API level 1", "FullName": "public abstract void putBoolean (String key, boolean value)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "this preference node's name, relative to its parent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this preference node's name, relative to its parent.", "history": "Added in API level 1", "FullName": "public abstract String name ()"}, "userNodeForPackage(java.lang.Class<?>)": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the user preference node associated with the package of which c is a member."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class for whose package a user preference node is desired."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if c is null."], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it denies RuntimePermission(\"preferences\")."]], "SeeAlso": ["@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "This convention does not apply to the unnamed package, whose associated preference node is A class Invoking this method will result in the creation of the returned node and its ancestors if they do not already exist. If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the", "history": "Added in API level 1", "FullName": "public static Preferences userNodeForPackage (Class<?> c)"}, "put(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the specified value is to be associated."], ["@B_java#lang#String_E@", "String: value to be associated with the specified key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this preference node.", "history": "Added in API level 1", "FullName": "public abstract void put (String key, String value)"}, "putDouble(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["double", "double: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getDouble_E@"], "Permissions": [], "Description": "Associates a string representing the specified double value with the specified key in this preference node. The associated string is the one that would be returned if the double value were passed to @B_java#lang#Double#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getDouble_E@.", "history": "Added in API level 1", "FullName": "public abstract void putDouble (String key, double value)"}, "remove(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key whose mapping is to be removed from the preference node."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Removes the value associated with the specified key in this preference node, if any. If this implementation supports", "history": "Added in API level 1", "FullName": "public abstract void remove (String key)"}, "removeNodeChangeListener(java.util.prefs.NodeChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#NodeChangeListener_E@", "NodeChangeListener: The NodeChangeListener to remove."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if ncl was not a registered NodeChangeListener on this node."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#addNodeChangeListener_E@"], "Permissions": [], "Description": "Removes the specified", "history": "Added in API level 1", "FullName": "public abstract void removeNodeChangeListener (NodeChangeListener ncl)"}, "getFloat(java.lang.String, float)": {"Returns": [["float", "the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a float."], ["float", "float: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putFloat_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the float value represented by the string associated with the specified key in this preference node. The string is converted to an integer as by @B_java#lang#Float#parseFloat_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putFloat_E@. If the implementation supports", "history": "added in API level 1", "FullName": "public abstract float getFloat (String key, float def)"}, "importPreferences(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which to read the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if reading from the specified input stream results in an IOException."], ["@B_java#util#prefs#InvalidPreferencesFormatException_E@", "Data on input stream does not constitute a valid XML document with the mandated document type."], ["@B_java#lang#SecurityException_E@", "If a security manager is present and it denies RuntimePermission(\"preferences\")."]], "SeeAlso": ["@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Imports all of the preferences represented by the XML document on the specified input stream. The document may represent user preferences or system preferences. If it represents user preferences, the preferences will be imported into the calling user's preference tree (even if they originally came from a different user's preference tree). If any of the preferences described by the document inhabit preference nodes that do not exist, the nodes will be created. The XML document must have the following DOCTYPE declaration: @B_java#util#prefs#Preferences#exportNode_E@ and @B_java#util#prefs#Preferences#exportSubtree_E@. This method is an exception to the general rule that the results of concurrently executing multiple methods in this class yields results equivalent to some serial execution. The method behaves as if implemented on top of the other public methods in this class, notably @B_java#util#prefs#Preferences#node_E@ and @B_java#util#prefs#Preferences#put_E@.", "history": "Added in API level 1", "FullName": "public static void importPreferences (InputStream is)"}, "getByteArray(java.lang.String,byte[])": {"Returns": [["byte[]", "the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a byte array."], ["byte[]", "byte: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": ["@B_java#util#prefs#Preferences#get_E@", "@B_java#util#prefs#Preferences#putByteArray_E@"], "Permissions": [], "Description": "Returns the byte array value represented by the string associated with the specified key in this preference node. Valid strings are @B_java#util#prefs#Preferences#putByteArray_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is not a valid Base64 encoded byte array (as defined above). If the implementation supports", "history": "Added in API level 1", "FullName": "public abstract byte[] getByteArray (String key, byte[] def)"}, "getBoolean(java.lang.String, boolean)": {"Returns": [["boolean", "the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a boolean."], ["boolean", "boolean: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#get_E@", "@B_java#util#prefs#Preferences#putBoolean_E@"], "Permissions": [], "Description": "Returns the boolean value represented by the string associated with the specified key in this preference node. Valid strings are @B_java#util#prefs#Preferences#putBoolean_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is something other than If the implementation supports", "history": "added in API level 1", "FullName": "public abstract boolean getBoolean (String key, boolean def)"}, "getLong(java.lang.String, long)": {"Returns": [["long", "the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a long."], ["long", "long: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": ["@B_java#util#prefs#Preferences#putLong_E@", "@B_java#util#prefs#Preferences#get_E@"], "Permissions": [], "Description": "Returns the long value represented by the string associated with the specified key in this preference node. The string is converted to a long as by @B_java#lang#Long#parseLong_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if @B_java#lang#NumberFormatException_E@ if the associated value were passed. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#putLong_E@. If the implementation supports", "history": "added in API level 1", "FullName": "public abstract long getLong (String key, long def)"}, "getByteArray(java.lang.String, byte[])": {"Returns": [["byte[]", "the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a byte array."], ["byte[]", "byte: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array, or the backing store is inaccessible."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": ["@B_java#util#prefs#Preferences#get_E@", "@B_java#util#prefs#Preferences#putByteArray_E@"], "Permissions": [], "Description": "Returns the byte array value represented by the string associated with the specified key in this preference node. Valid strings are @B_java#util#prefs#Preferences#putByteArray_E@. Returns the specified default if there is no value associated with the key, the backing store is inaccessible, or if the associated value is not a valid Base64 encoded byte array (as defined above). If the implementation supports", "history": "added in API level 1", "FullName": "public abstract byte[] getByteArray (String key, byte[] def)"}, "get(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value associated with key, or def if no value is associated with key, or the backing store is inaccessible."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned."], ["@B_java#lang#String_E@", "String: the value to be returned in the event that this preference node has no value associated with key."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value associated with the specified key in this preference node. Returns the specified default if there is no value associated with the key, or the backing store is inaccessible. Some implementations may store default values in their backing stores. If there is no value associated with the specified key but there is such a", "history": "Added in API level 1", "FullName": "public abstract String get (String key, String def)"}, "putFloat(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["float", "float: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#Preferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#Preferences#getFloat_E@"], "Permissions": [], "Description": "Associates a string representing the specified float value with the specified key in this preference node. The associated string is the one that would be returned if the float value were passed to @B_java#lang#Float#toString_E@. This method is intended for use in conjunction with @B_java#util#prefs#Preferences#getFloat_E@.", "history": "added in API level 1", "FullName": "public abstract void putFloat (String key, float value)"}}, "Inheritance": [], "ClassName": "java.util.prefs.Preferences", "ClassDesc": "A node in a hierarchical collection of preference data. This class allows applications to store and retrieve user and system preference and configuration data. This data is stored persistently in an implementation-dependent backing store. Typical implementations include flat files, OS-specific registries, directory servers and SQL databases. The user of this class needn't be concerned with details of the backing store. There are two separate trees of preference nodes, one for user preferences and one for system preferences. Each user has a separate user preference tree, and all users in a given system share the same system preference tree. The precise description of \"user\" and \"system\" will vary from implementation to implementation. Typical information stored in the user preference tree might include font choice, color choice, or preferred window location and size for a particular application. Typical information stored in the system preference tree might include installation configuration data for an application. Nodes in a preference tree are named in a similar fashion to directories in a hierarchical file system. Every node in a preference tree has a The root node has a node name of the empty string (\"\"). Every other node has an arbitrary node name, specified at the time it is created. The only restrictions on this name are that it cannot be the empty string, and it cannot contain the slash character ('/'). The root node has an absolute path name of A node No relative path names begin with the slash character. Every node's path name relative to itself is the empty string. Every node's path name relative to its parent is its node name (except for the root node, which does not have a parent). Every node's path name relative to the root is its absolute path name with the initial slash character removed. Note finally that: No path name contains multiple consecutive slash characters. No path name with the exception of the root's absolute path name ends in the slash character. Any string that conforms to these two rules is a valid path name. All of the methods that modify preferences data are permitted to operate asynchronously; they may return immediately, and changes will eventually propagate to the persistent backing store with an implementation-dependent delay. The All of the methods that read preferences from a @B_java#util#prefs#BackingStoreException_E@. The methods in this class may be invoked concurrently by multiple threads in a single JVM without the need for external synchronization, and the results will be equivalent to some serial execution. If this class is used concurrently This class contains an export/import facility, allowing preferences to be \"exported\" to an XML document, and XML documents representing preferences to be \"imported\" back into the system. This facility may be used to back up all or part of a preference tree, and subsequently restore from the backup. The XML document has the following DOCTYPE declaration: @B_java#util#prefs#PreferencesFactory_E@ implementation. Every Java(TM) SE implementation must provide some means of specifying which Implementation note: In Sun's JRE, the"}