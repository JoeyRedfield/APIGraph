{"Functions": {"getDisplay()": {"Returns": [["@B_android#view#Display_E@", "The display."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#view#Display_E@ that this presentation appears on.", "history": "Added in API level 17", "FullName": "public Display getDisplay ()"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "The presentation resources object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#content#res#Resources_E@ that should be used to inflate the layout of this presentation. This resources object has been configured according to the metrics of the display that the presentation appears on.", "history": "Added in API level 17", "FullName": "public Resources getResources ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the dialog is starting.", "history": "Added in API level 17", "FullName": "protected void onStart ()"}, "onDisplayRemoved()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Presentation#getDisplay_E@"], "Permissions": [], "Description": "Called by the system when the @B_android#view#Display_E@ to which the presentation is attached has been removed. The system automatically calls @B_android#app#Dialog#cancel_E@ to dismiss the presentation after sending this event.", "history": "Added in API level 17", "FullName": "public void onDisplayRemoved ()"}, "Presentation(android.content.Context,android.view.Display,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of the application that is showing the presentation. The presentation will create its own context (see @B_android#app#Dialog#getContext_E@) based on this context and information about the associated display."], ["@B_android#view#Display_E@", "Display: The display to which the presentation should be attached."], ["int", "int: A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new presentation that is attached to the specified display using the optionally specified theme.", "history": "Added in API level 17", "FullName": "public Presentation (Context outerContext, Display display, int theme)"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inherited from @B_android#app#Dialog#show_E@. Will throw @B_android#view#WindowManager#InvalidDisplayException_E@ if the specified secondary @B_android#view#Display_E@ can't be found.", "history": "Added in API level 17", "FullName": "public void show ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to tell you that you're stopping.", "history": "Added in API level 17", "FullName": "protected void onStop ()"}, "Presentation(android.content.Context,android.view.Display)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of the application that is showing the presentation. The presentation will create its own context (see @B_android#app#Dialog#getContext_E@) based on this context and information about the associated display."], ["@B_android#view#Display_E@", "Display: The display to which the presentation should be attached."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new presentation that is attached to the specified display using the default theme.", "history": "Added in API level 17", "FullName": "public Presentation (Context outerContext, Display display)"}, "onDisplayChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Presentation#getDisplay_E@"], "Permissions": [], "Description": "Called by the system when the properties of the @B_android#view#Display_E@ to which the presentation is attached have changed. If the display metrics have changed (for example, if the display has been resized or rotated), then the system automatically calls @B_android#app#Dialog#cancel_E@ to dismiss the presentation.", "history": "Added in API level 17", "FullName": "public void onDisplayChanged ()"}}, "Inheritance": ["@B_android#app#Dialog_E@"], "ClassName": "android.app.Presentation", "ClassDesc": "Base class for presentations. A presentation is a special kind of dialog whose purpose is to present content on a secondary display. A @B_android#app#Presentation_E@ is associated with the target @B_android#view#Display_E@ at creation time and configures its context and resource configuration according to the display's metrics. Notably, the @B_android#content#Context_E@ of a presentation is different from the context of its containing @B_android#app#Activity_E@. It is important to inflate the layout of a presentation and load other resources using the presentation's own context to ensure that assets of the correct size and density for the target display are loaded. A presentation is automatically canceled (see @B_android#app#Dialog#cancel_E@) when the display to which it is attached is removed. An activity should take care of pausing and resuming whatever content is playing within the presentation whenever the activity itself is paused or resumed. Before showing a @B_android#app#Presentation_E@ it's important to choose the @B_android#view#Display_E@ on which it will appear. Choosing a presentation display is sometimes difficult because there may be multiple displays attached. Rather than trying to guess which display is best, an application should let the system choose a suitable presentation display. There are two main ways to choose a @B_android#view#Display_E@. The easiest way to choose a presentation display is to use the @B_android#media#MediaRouter_E@ API. The media router service keeps track of which audio and video routes are available on the system. The media router sends notifications whenever routes are selected or unselected or when the preferred presentation display of a route changes. So an application can simply watch for these notifications and show or dismiss a presentation on the preferred presentation display automatically. The preferred presentation display is the display that the media router recommends that the application should use if it wants to show content on the secondary display. Sometimes there may not be a preferred presentation display in which case the application should show its content locally without using a presentation. Here's how to use the media router to create and show a presentation on the preferred presentation display using @B_android#media#MediaRouter#RouteInfo#getPresentationDisplay_E@. The following sample code from ApiDemos demonstrates how to use the media router to automatically switch between showing content in the main activity and showing the content in a presentation when a presentation display is available. Another way to choose a presentation display is to use the @B_android#hardware#display#DisplayManager_E@ API directly. The display manager service provides functions to enumerate and describe all displays that are attached to the system including displays that may be used for presentations. The display manager keeps track of all displays in the system. However, not all displays are appropriate for showing presentations. For example, if an activity attempted to show a presentation on the main display it might obscure its own content (it's like opening a dialog on top of your activity). Here's how to identify suitable displays for showing presentations using @B_android#hardware#display#DisplayManager#getDisplays_E@ and the @B_android#hardware#display#DisplayManager#DISPLAY_CATEGORY_PRESENTATION_E@ category. The following sample code from ApiDemos demonstrates how to use the display manager to enumerate displays and show content on multiple presentation displays simultaneously."}