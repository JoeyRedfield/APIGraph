{"Functions": {"wrap(javax.microedition.khronos.opengles.GL)": {"Returns": [["@B_javax#microedition#khronos#opengles#GL_E@", "either the input argument or another GL object that wraps the input argument."]], "Parameters": [["@B_javax#microedition#khronos#opengles#GL_E@", "GL: a GL interface that is to be wrapped."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps a gl interface in another gl interface.", "history": "Added in API level 3", "FullName": "public abstract GL wrap (GL gl)"}}, "Inheritance": [], "ClassName": "android.opengl.GLSurfaceView.GLWrapper", "ClassDesc": "An interface used to wrap a GL interface. Typically used for implementing debugging and tracing on top of the default GL interface. You would typically use this by creating your own class that implemented all the GL methods by delegating to another GL instance. Then you could add your own behavior before or after calling the delegate. All the GLWrapper would do was instantiate and return the wrapper GL instance:"}