{"Functions": {"adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same observable type with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to adjust, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object. This adjusts the specified temporal object using the logic encapsulated in the implementing class. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#with_E@: with(TemporalAdjuster), as it is a lot clearer to read in code.", "history": "Added in API level 26", "FullName": "public abstract Temporal adjustInto (Temporal temporal)"}}, "Inheritance": [], "ClassName": "java.time.temporal.TemporalAdjuster", "ClassDesc": "Strategy for adjusting a temporal object. Adjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month. There are two equivalent ways of using a TemporalAdjuster. The first is to invoke the method on this interface directly. The second is to use @B_java#time#temporal#Temporal#with_E@: with(TemporalAdjuster), as it is a lot clearer to read in code. The @B_java#time#temporal#TemporalAdjusters_E@ class contains a standard set of adjusters, available as static methods. These include: finding the first or last day of the month finding the first day of next month finding the first or last day of the year finding the first day of next year finding the first or last day-of-week within a month, such as \"first Wednesday in June\" finding the next or previous day-of-week, such as \"next Thursday\""}