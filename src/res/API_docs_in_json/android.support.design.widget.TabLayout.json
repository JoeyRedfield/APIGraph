{"Functions": {"TabLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "TabLayout (Context context)"}, "newTab()": {"Returns": [["@B_android#support#design#widget#TabLayout#Tab_E@", "A new Tab"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TabLayout#addTab_E@"], "Permissions": [], "Description": "Create and return a new @B_android#support#design#widget#TabLayout#Tab_E@. You need to manually add this using @B_android#support#design#widget#TabLayout#addTab_E@ or a related method.", "history": "added in version 22.2.0", "FullName": "TabLayout.Tab newTab ()"}, "setSelectedTabIndicatorColor(int)": {"Returns": [], "Parameters": [["int", "int: color to use for the indicator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the tab indicator's color for the currently selected tab.", "history": "added in version 23.0.0", "FullName": "void setSelectedTabIndicatorColor (int color)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#FrameLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "FrameLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "setTabTextColors(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text colors for the different states (normal, selected) used for the tabs.", "history": "added in version 22.2.0", "FullName": "void setTabTextColors (int normalColor, int selectedColor)"}, "getSelectedTabPosition()": {"Returns": [["int", "selected tab position, or -1 if there isn't a selected tab."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the position of the current selected tab.", "history": "added in version 22.2.1", "FullName": "int getSelectedTabPosition ()"}, "getTabMode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#TabLayout#setTabMode_E@"], "Permissions": [], "Description": "Returns the current mode used by this @B_android#support#design#widget#TabLayout_E@.", "history": "added in version 22.2.0", "FullName": "int getTabMode ()"}, "setSelectedTabIndicatorHeight(int)": {"Returns": [], "Parameters": [["int", "int: height to use for the indicator in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the tab indicator's height for the currently selected tab.", "history": "added in version 23.0.0", "FullName": "void setSelectedTabIndicatorHeight (int height)"}, "removeTabAt(int)": {"Returns": [], "Parameters": [["int", "int: Position of the tab to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a tab from the layout. If the removed tab was selected it will be deselected and another tab will be selected if present.", "history": "added in version 22.2.0", "FullName": "void removeTabAt (int position)"}, "setTabMode(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#support#design#widget#TabLayout#MODE_FIXED_E@ or @B_android#support#design#widget#TabLayout#MODE_SCROLLABLE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the behavior mode for the Tabs in this layout. The valid input options are: @B_android#support#design#widget#TabLayout#MODE_FIXED_E@: Fixed tabs display all tabs concurrently and are best used with content that benefits from quick pivots between tabs. @B_android#support#design#widget#TabLayout#MODE_SCROLLABLE_E@: Scrollable tabs display a subset of tabs at any given moment, and can contain longer tab labels and a larger number of tabs. They are best used for browsing contexts in touch interfaces when users don\u2019t need to directly compare the tab labels. This mode is commonly used with a @B_android#support#v4#view#ViewPager_E@.", "history": "added in version 22.2.0", "FullName": "void setTabMode (int mode)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "getTabGravity()": {"Returns": [["int", "one of @B_android#support#design#widget#TabLayout#GRAVITY_CENTER_E@ or @B_android#support#design#widget#TabLayout#GRAVITY_FILL_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The current gravity used for laying out tabs.", "history": "added in version 22.2.0", "FullName": "int getTabGravity ()"}, "setScrollPosition(int, float, boolean)": {"Returns": [], "Parameters": [["int", "int: current scroll position"], ["float", "float: Value from [0, 1) indicating the offset from position."], ["boolean", "boolean: Whether to update the text's selected state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the scroll position of the tabs. This is useful for when the tabs are being displayed as part of a scrolling container such as @B_android#support#v4#view#ViewPager_E@. Calling this method does not update the selected tab, it is only used for drawing purposes.", "history": "added in version 22.2.0", "FullName": "void setScrollPosition (int position, float positionOffset, boolean updateSelectedText)"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "", "FullName": "boolean shouldDelayChildPressedState ()"}, "getTabTextColors()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text colors for the different states (normal, selected) used for the tabs.", "history": "added in version 22.2.0", "FullName": "ColorStateList getTabTextColors ()"}, "addView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["int", "int: the position at which to add the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "", "FullName": "void addView (View child, int index)"}, "clearOnTabSelectedListeners()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all previously added @B_android#support#design#widget#TabLayout#OnTabSelectedListener_E@s.", "history": "added in version 24.2.0", "FullName": "void clearOnTabSelectedListeners ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "addView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "", "FullName": "void addView (View child)"}, "getTabAt(int)": {"Returns": [["@B_android#support#design#widget#TabLayout#Tab_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tab at the specified index.", "history": "added in version 22.2.0", "FullName": "TabLayout.Tab getTabAt (int index)"}, "removeAllTabs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all tabs from the action bar and deselect the current tab.", "history": "added in version 22.2.0", "FullName": "void removeAllTabs ()"}, "getTabCount()": {"Returns": [["int", "Tab count"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of tabs currently registered with the action bar.", "history": "added in version 22.2.0", "FullName": "int getTabCount ()"}, "setTabGravity(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#support#design#widget#TabLayout#GRAVITY_CENTER_E@ or @B_android#support#design#widget#TabLayout#GRAVITY_FILL_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the gravity to use when laying out the tabs.", "history": "added in version 22.2.0", "FullName": "void setTabGravity (int gravity)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@", "https:##developer#android#com@B_android#widget#HorizontalScrollView_E@"], "ClassName": "android.support.design.widget.TabLayout", "ClassDesc": "TabLayout provides a horizontal layout to display tabs. Population of the tabs to display is done through @B_android#support#design#widget#TabLayout#Tab_E@ instances. You create tabs via @B_android#support#design#widget#TabLayout#newTab_E@. From there you can change the tab's label or icon via @B_android#support#design#widget#TabLayout#Tab#setText_E@ and @B_android#support#design#widget#TabLayout#Tab#setIcon_E@ respectively. To display the tab, you need to add it to the layout via one of the @B_android#support#design#widget#TabLayout#addTab_E@ methods. For example: @B_android#support#design#widget#TabLayout#setOnTabSelectedListener_E@ to be notified when any tab's selection state has been changed. You can also add items to TabLayout in your layout through the use of @B_android#support#design#widget#TabItem_E@. An example usage is like so: If you're using a @B_android#support#v4#view#ViewPager_E@ together with this layout, you can call @B_android#support#design#widget#TabLayout#setupWithViewPager_E@ to link the two together. This layout will be automatically populated from the @B_android#support#v4#view#PagerAdapter_E@'s page titles. This view also supports being used as part of a ViewPager's decor, and can be added directly to the ViewPager in a layout resource file like so:"}