{"Functions": {"getCallingUid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Linux uid assigned to the process that sent you the current transaction that is being processed. This uid can be used with higher-level system services to determine its identity and check permissions. If the current thread is not currently executing an incoming transaction, then its own uid is returned.", "history": "Added in API level 1", "FullName": "public static final int getCallingUid ()"}, "flushPendingCommands()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flush any Binder commands pending in the current thread to the kernel driver. This can be useful to call before performing an operation that may block for a long time, to ensure that any pending object references have been released in order to prevent the process from holding on to objects longer than it needs to.", "history": "Added in API level 1", "FullName": "public static final void flushPendingCommands ()"}, "dumpAsync(java.io.FileDescriptor,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#os#Binder#dump_E@, but ensures the target executes asynchronously.", "history": "Added in API level 13", "FullName": "public void dumpAsync (FileDescriptor fd, String[] args)"}, "isBinderAlive()": {"Returns": [["boolean", "false if the process is not alive. Note that if it returns true, the process may have died while the call is returning."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check to see if the process that the binder is in is still alive. Note that if you're calling on a local binder, this always returns true because your process is alive if you're calling it.", "history": "Added in API level 1", "FullName": "public boolean isBinderAlive ()"}, "attachInterface(android.os.IInterface,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#IInterface_E@", "IInterface: This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method for associating a specific interface with the Binder. After calling, queryLocalInterface() will be implemented for you to return the given owner IInterface when the corresponding descriptor is requested.", "history": "Added in API level 1", "FullName": "public void attachInterface (IInterface owner, String descriptor)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 1", "FullName": "void finalize ()"}, "Binder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor just initializes the object. If you're creating a Binder token (a Binder object without an attached interface), you should use @B_android#os#Binder#Binder_E@ instead.", "history": "Added in API level 1", "FullName": "public Binder ()"}, "pingBinder()": {"Returns": [["boolean", "Returns false if the hosting process is gone, otherwise the result (always by default true) returned by the pingBinder() implementation on the other side."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation always returns true -- if you got here, the object is alive.", "history": "Added in API level 1", "FullName": "public boolean pingBinder ()"}, "getCallingPid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ID of the process that sent you the current transaction that is being processed. This pid can be used with higher-level system services to determine its identity and check permissions. If the current thread is not currently executing an incoming transaction, then its own pid is returned.", "history": "Added in API level 1", "FullName": "public static final int getCallingPid ()"}, "onTransact(int,android.os.Parcel,android.os.Parcel,int)": {"Returns": [["boolean", "Return true on a successful call; returning false is generally used to indicate that you did not understand the transaction code."]], "Parameters": [["int", "int: The action to perform. This should be a number between @B_android#os#IBinder#FIRST_CALL_TRANSACTION_E@ and @B_android#os#IBinder#LAST_CALL_TRANSACTION_E@."], ["@B_android#os#Parcel_E@", "Parcel: Marshalled data being received from the caller. This value must never be null."], ["@B_android#os#Parcel_E@", "Parcel: If the caller is expecting a result back, it should be marshalled in to here. This value may be null."], ["int", "int: Additional operation flags. Either 0 for a normal RPC, or @B_android#os#IBinder#FLAG_ONEWAY_E@ for a one-way RPC."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Default implementation is a stub that returns false. You will want to override this to do the appropriate unmarshalling of transactions. If you want to call this, call transact(). Implementations that are returning a result should generally use @B_android#os#Parcel#writeNoException_E@ and @B_android#os#Parcel#writeException_E@ to propagate exceptions back to the caller.", "history": "Added in API level 1", "FullName": "protected boolean onTransact (int code, Parcel data, Parcel reply, int flags)"}, "clearCallingIdentity()": {"Returns": [["long", "Returns an opaque token that can be used to restore the original calling identity by passing it to @B_android#os#Binder#restoreCallingIdentity_E@."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Binder#getCallingPid_E@", "@B_android#os#Binder#getCallingUid_E@", "@B_android#os#Binder#restoreCallingIdentity_E@"], "Permissions": [], "Description": "Reset the identity of the incoming IPC on the current thread. This can be useful if, while handling an incoming call, you will be calling on interfaces of other objects that may be local to your process and need to do permission checks on the calls coming into them (so they will check the permission of your own local process, and not whatever process originally called you).", "history": "Added in API level 1", "FullName": "public static final long clearCallingIdentity ()"}, "unlinkToDeath(android.os.IBinder.DeathRecipient,int)": {"Returns": [["boolean", "true if the recipient is successfully unlinked, assuring you that its @B_android#os#IBinder#DeathRecipient#binderDied_E@ method will not be called; false if the target IBinder has already died, meaning the method has been (or soon will be) called."]], "Parameters": [["@B_android#os#IBinder#DeathRecipient_E@", "IBinder.DeathRecipient: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Local implementation is a no-op.", "history": "Added in API level 1", "FullName": "public boolean unlinkToDeath (IBinder.DeathRecipient recipient, int flags)"}, "restoreCallingIdentity(long)": {"Returns": [], "Parameters": [["long", "long: The opaque token that was previously returned by @B_android#os#Binder#clearCallingIdentity_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Binder#clearCallingIdentity_E@"], "Permissions": [], "Description": "Restore the identity of the incoming IPC on the current thread back to a previously identity that was returned by @B_android#os#Binder#clearCallingIdentity_E@.", "history": "Added in API level 1", "FullName": "public static final void restoreCallingIdentity (long token)"}, "getCallingUidOrThrow()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the current thread is not currently executing an incoming transaction."]], "SeeAlso": [], "Permissions": [], "Description": "Return the Linux uid assigned to the process that sent the transaction currently being processed.", "history": "Added in API level 29", "FullName": "public static final int getCallingUidOrThrow ()"}, "transact(int,android.os.Parcel,android.os.Parcel,int)": {"Returns": [["boolean", "Returns the result from @B_android#os#Binder#onTransact_E@. A successful call generally returns true; false generally means the transaction code was not understood."]], "Parameters": [["int", "int: The action to perform. This should be a number between @B_android#os#IBinder#FIRST_CALL_TRANSACTION_E@ and @B_android#os#IBinder#LAST_CALL_TRANSACTION_E@."], ["@B_android#os#Parcel_E@", "Parcel: This value must never be null."], ["@B_android#os#Parcel_E@", "Parcel: This value may be null."], ["int", "int: Additional operation flags. Either 0 for a normal RPC, or @B_android#os#IBinder#FLAG_ONEWAY_E@ for a one-way RPC."]], "Throws": [["@B_android#os#RemoteException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Default implementation rewinds the parcels and calls onTransact. On the remote side, transact calls into the binder to do the IPC.", "history": "Added in API level 1", "FullName": "public final boolean transact (int code, Parcel data, Parcel reply, int flags)"}, "queryLocalInterface(java.lang.String)": {"Returns": [["@B_android#os#IInterface_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use information supplied to attachInterface() to return the associated IInterface if it matches the requested descriptor.", "history": "Added in API level 1", "FullName": "public IInterface queryLocalInterface (String descriptor)"}, "dump(java.io.FileDescriptor,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implemented to call the more convenient version @B_android#os#Binder#dump_E@.", "history": "Added in API level 3", "FullName": "public void dump (FileDescriptor fd, String[] args)"}, "dump(java.io.FileDescriptor, java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to.This value must never be null."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implemented to call the more convenient version @B_android#os#Binder#dump_E@.", "history": "added in API level 3", "FullName": "public void dump (FileDescriptor fd, String[] args)"}, "getInterfaceDescriptor()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation returns an empty interface name.", "history": "Added in API level 1", "FullName": "public String getInterfaceDescriptor ()"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to. This value must never be null."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The file to which you should dump your state. This will be closed for you after you return. This value must never be null."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the object's state into the given stream.", "history": "Added in API level 1", "FullName": "protected void dump (FileDescriptor fd, PrintWriter fout, String[] args)"}, "joinThreadPool()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the calling thread to the IPC thread pool. This function does not return until the current process is exiting.", "history": "Added in API level 1", "FullName": "public static final void joinThreadPool ()"}, "getCallingWorkSourceUid()": {"Returns": [["int", "The original UID responsible for the binder transaction."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the work source set by the caller. Unlike @B_android#os#Binder#getCallingUid_E@, this result of this method cannot be trusted. The caller can set the value to whatever they want. Only use this value if you trust the calling uid.", "history": "Added in API level 29", "FullName": "public static final int getCallingWorkSourceUid ()"}, "getCallingUserHandle()": {"Returns": [["@B_android#os#UserHandle_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the UserHandle assigned to the process that sent you the current transaction that is being processed. This is the user of the caller. It is distinct from @B_android#os#Binder#getCallingUid_E@ in that a particular user will have multiple distinct apps running under it each with their own uid. If the current thread is not currently executing an incoming transaction, then its own UserHandle is returned.", "history": "Added in API level 17", "FullName": "public static final UserHandle getCallingUserHandle ()"}, "linkToDeath(android.os.IBinder.DeathRecipient,int)": {"Returns": [], "Parameters": [["@B_android#os#IBinder#DeathRecipient_E@", "IBinder.DeathRecipient: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Local implementation is a no-op.", "history": "Added in API level 1", "FullName": "public void linkToDeath (IBinder.DeathRecipient recipient, int flags)"}, "Binder(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Used to identify the creator of this token, for example the class name. Instead of creating multiple tokens with the same descriptor, consider adding a suffix to help identify them. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for creating a raw Binder object (token) along with a descriptor. The descriptor of binder objects usually specifies the interface they are implementing. In case of binder tokens, no interface is implemented, and the descriptor can be used as a sort of tag to help identify the binder token. This will help identify remote references to these objects more easily when debugging.", "history": "Added in API level 29", "FullName": "public Binder (String descriptor)"}}, "Inheritance": [], "ClassName": "android.os.Binder", "ClassDesc": "Base class for a remotable object, the core part of a lightweight remote procedure call mechanism defined by @B_android#os#IBinder_E@. This class is an implementation of IBinder that provides standard local implementation of such an object. Most developers will not implement this class directly, instead using the This class is just a basic IPC primitive; it has no impact on an application's lifecycle, and is valid only as long as the process that created it continues to run. To use this correctly, you must be doing so within the context of a top-level application component (a @B_android#app#Service_E@, @B_android#app#Activity_E@, or @B_android#content#ContentProvider_E@) that lets the system know your process should remain running. You must keep in mind the situations in which your process could go away, and thus require that you later re-create a new Binder and re-attach it when the process starts again. For example, if you are using this within an @B_android#app#Activity_E@, your activity's process may be killed any time the activity is not started; if the activity is later re-created you will need to create a new Binder and hand it back to the correct place again; you need to be aware that your process may be started for another reason (for example to receive a broadcast) that will not involve re-creating the activity and thus run its code to create a new Binder."}