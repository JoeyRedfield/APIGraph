{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "", "FullName": "void writeToParcel (Parcel dest, int flags)"}, "ObservableParcelable(T)": {"Returns": [], "Parameters": [["T", "T: The value to be wrapped as an observable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps the given object and creates an observable object", "history": "", "FullName": "ObservableParcelable (T value)"}, "ObservableParcelable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty observable object", "history": "", "FullName": "ObservableParcelable ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "", "FullName": "int describeContents ()"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "@B_android#databinding#BaseObservable_E@", "@B_android#databinding#ObservableField_E@"], "ClassName": "http:##developer#android#com@B_android#os#Parcelable_E@", "ClassDesc": "An observable class that holds a parcelable object. Observable field classes may be used instead of creating an Observable object: This class is parcelable but you should keep in mind that listeners are ignored when the object is parcelled. Unless you add custom observers, this should not be an issue because data binding framework always re-registers observers when the view is bound."}