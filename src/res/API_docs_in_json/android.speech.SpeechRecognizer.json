{"Functions": {"cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels the speech recognition. Please note that @B_android#speech#SpeechRecognizer#setRecognitionListener_E@ should be called beforehand, otherwise no notifications will be received.", "history": "Added in API level 8", "FullName": "public void cancel ()"}, "createSpeechRecognizer(android.content.Context,android.content.ComponentName)": {"Returns": [["@B_android#speech#SpeechRecognizer_E@", "a new SpeechRecognizer"]], "Parameters": [["@B_android#content#Context_E@", "Context: in which to create SpeechRecognizer"], ["@B_android#content#ComponentName_E@", "ComponentName: the @B_android#content#ComponentName_E@ of a specific service to direct this SpeechRecognizer to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Factory method to create a new SpeechRecognizer. Please note that @B_android#speech#SpeechRecognizer#setRecognitionListener_E@ should be called before dispatching any command to the created SpeechRecognizer, otherwise no notifications will be received. Use this version of the method to specify a specific service to direct this @B_android#speech#SpeechRecognizer_E@ to. Normally you would not use this; use @B_android#speech#SpeechRecognizer#createSpeechRecognizer_E@ instead to use the system default recognition service.", "history": "Added in API level 8", "FullName": "public static SpeechRecognizer createSpeechRecognizer (Context context, ComponentName serviceComponent)"}, "createSpeechRecognizer(android.content.Context)": {"Returns": [["@B_android#speech#SpeechRecognizer_E@", "a new SpeechRecognizer"]], "Parameters": [["@B_android#content#Context_E@", "Context: in which to create SpeechRecognizer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Factory method to create a new SpeechRecognizer. Please note that @B_android#speech#SpeechRecognizer#setRecognitionListener_E@ should be called before dispatching any command to the created SpeechRecognizer, otherwise no notifications will be received.", "history": "Added in API level 8", "FullName": "public static SpeechRecognizer createSpeechRecognizer (Context context)"}, "isRecognitionAvailable(android.content.Context)": {"Returns": [["boolean", "true if recognition is available, false otherwise"]], "Parameters": [["@B_android#content#Context_E@", "Context: with which SpeechRecognizer will be created"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a speech recognition service is available on the system. If this method returns false, @B_android#speech#SpeechRecognizer#createSpeechRecognizer_E@ will fail.", "history": "Added in API level 8", "FullName": "public static boolean isRecognitionAvailable (Context context)"}, "stopListening()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops listening for speech. Speech captured so far will be recognized as if the user had stopped speaking at this point. Note that in the default case, this does not need to be called, as the speech endpointer will automatically stop the recognizer listening when it determines speech has completed. However, you can manipulate endpointer parameters directly using the intent extras defined in @B_android#speech#RecognizerIntent_E@, in which case you may sometimes want to manually call this method to stop listening sooner. Please note that @B_android#speech#SpeechRecognizer#setRecognitionListener_E@ should be called beforehand, otherwise no notifications will be received.", "history": "Added in API level 8", "FullName": "public void stopListening ()"}, "setRecognitionListener(android.speech.RecognitionListener)": {"Returns": [], "Parameters": [["@B_android#speech#RecognitionListener_E@", "RecognitionListener: listener that will receive all the callbacks from the created @B_android#speech#SpeechRecognizer_E@, this must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that will receive all the callbacks. The previous unfinished commands will be executed with the old listener, while any following command will be executed with the new listener.", "history": "Added in API level 8", "FullName": "public void setRecognitionListener (RecognitionListener listener)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroys the SpeechRecognizer object.", "history": "Added in API level 8", "FullName": "public void destroy ()"}, "startListening(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: contains parameters for the recognition to be performed. The intent may also contain optional extras, see @B_android#speech#RecognizerIntent_E@. If these values are not set explicitly, default values will be used by the recognizer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts listening for speech. Please note that @B_android#speech#SpeechRecognizer#setRecognitionListener_E@ should be called beforehand, otherwise no notifications will be received.", "history": "Added in API level 8", "FullName": "public void startListening (Intent recognizerIntent)"}}, "Inheritance": [], "ClassName": "android.speech.SpeechRecognizer", "ClassDesc": "This class provides access to the speech recognition service. This service allows access to the speech recognizer. Do not instantiate this class directly, instead, call @B_android#speech#SpeechRecognizer#createSpeechRecognizer_E@. This class's methods must be invoked only from the main application thread. The implementation of this API is likely to stream audio to remote servers to perform speech recognition. As such this API is not intended to be used for continuous recognition, which would consume a significant amount of battery and bandwidth. Please note that the application must have @B_android#Manifest#permission#RECORD_AUDIO_E@ permission to use this class."}