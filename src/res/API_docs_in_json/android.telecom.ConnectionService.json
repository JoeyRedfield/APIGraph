{"Functions": {"ConnectionService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 23", "FullName": "public ConnectionService ()"}, "addConference(android.telecom.Conference)": {"Returns": [], "Parameters": [["@B_android#telecom#Conference_E@", "Conference: The new conference object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a new conference call. When a conference call is created either as a result of an explicit request via @B_android#telecom#ConnectionService#onConference_E@ or otherwise, the connection service should supply an instance of @B_android#telecom#Conference_E@ by invoking this method. A conference call provided by this method will persist until @B_android#telecom#Conference#destroy_E@ is invoked on the conference instance.", "history": "Added in API level 23", "FullName": "public final void addConference (Conference conference)"}, "onHandoverFailed(android.telecom.ConnectionRequest,int)": {"Returns": [], "Parameters": [["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the call which failed to handover."], ["int", "int: Reason for handover failure. Will be one of the Value is @B_android#telecom#Call#Callback#HANDOVER_FAILURE_DEST_APP_REJECTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_NOT_SUPPORTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_USER_REJECTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL_E@, or @B_android#telecom#Call#Callback#HANDOVER_FAILURE_UNKNOWN_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Telecom in response to a TelecomManager#acceptHandover() invocation which failed. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@", "history": "Added in API level 28", "FullName": "public void onHandoverFailed (ConnectionRequest request, int error)"}, "createRemoteIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#RemoteConnection_E@", "The Connection object to satisfy this call, or null to not handle the call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: See description at @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the incoming call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask some other ConnectionService to create a RemoteConnection given an incoming request. This is used by ConnectionServices that are registered with @B_android#telecom#PhoneAccount#CAPABILITY_CONNECTION_MANAGER_E@ and want to be able to manage SIM-based incoming calls.", "history": "Added in API level 23", "FullName": "public final RemoteConnection createRemoteIncomingConnection (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}, "onUnbind(android.content.Intent)": {"Returns": [["boolean", "Return true if you would like to have the service's @B_android#app#Service#onRebind_E@ method later called when new clients bind to it."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when all clients have disconnected from a particular interface published by the service. The default implementation does nothing and returns false.", "history": "Added in API level 23", "FullName": "public boolean onUnbind (Intent intent)"}, "onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#Connection_E@", "The Connection object to satisfy this call, or the result of an invocation of @B_android#telecom#Connection#createFailedConnection_E@ to not handle the call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The connection manager account to use for managing this call. If this parameter is not null, it means that this ConnectionService has registered one or more PhoneAccounts having PhoneAccount#CAPABILITY_CONNECTION_MANAGER. This parameter will contain one of these PhoneAccounts, while the request will contain another (usually but not always distinct) PhoneAccount to be used for actually making the connection. If this parameter is null, it means that this ConnectionService is being asked to make a direct connection. The ConnectionRequest#getAccountHandle() of parameter request will be a PhoneAccount registered by this ConnectionService to use for making the connection."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the outgoing call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Connection given an outgoing request. This is used to initiate new outgoing calls.", "history": "Added in API level 23", "FullName": "public Connection onCreateOutgoingConnection (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}, "onConnectionServiceFocusGained()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the @B_android#telecom#ConnectionService_E@ has gained the call focus. The @B_android#telecom#ConnectionService_E@ can acquire the call resources at this time.", "history": "Added in API level 28", "FullName": "public void onConnectionServiceFocusGained ()"}, "onCreateIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#Connection_E@", "The Connection object to satisfy this call, or null to not handle the call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: See description at @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the incoming call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Connection given an incoming request. This is used to attach to existing incoming calls.", "history": "Added in API level 23", "FullName": "public Connection onCreateIncomingConnection (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}, "onConference(android.telecom.Connection,android.telecom.Connection)": {"Returns": [], "Parameters": [["@B_android#telecom#Connection_E@", "Connection: A connection to merge into a conference call."], ["@B_android#telecom#Connection_E@", "Connection: A connection to merge into a conference call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Conference two specified connections. Invoked when the user has made a request to merge the specified connections into a conference call. In response, the connection service should create an instance of @B_android#telecom#Conference_E@ and pass it into @B_android#telecom#ConnectionService#addConference_E@.", "history": "Added in API level 23", "FullName": "public void onConference (Connection connection1, Connection connection2)"}, "createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#RemoteConnection_E@", "The Connection object to satisfy this call, or null to not handle the call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: See description at @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the outgoing call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask some other ConnectionService to create a RemoteConnection given an outgoing request. This is used by ConnectionServices that are registered with @B_android#telecom#PhoneAccount#CAPABILITY_CONNECTION_MANAGER_E@ and want to be able to use the SIM-based ConnectionService to place its outgoing calls.", "history": "Added in API level 23", "FullName": "public final RemoteConnection createRemoteOutgoingConnection (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}, "onRemoteExistingConnectionAdded(android.telecom.RemoteConnection)": {"Returns": [], "Parameters": [["@B_android#telecom#RemoteConnection_E@", "RemoteConnection: The existing connection which was added."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an existing connection is added remotely.", "history": "Added in API level 23", "FullName": "public void onRemoteExistingConnectionAdded (RemoteConnection connection)"}, "conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)": {"Returns": [], "Parameters": [["@B_android#telecom#RemoteConnection_E@", "RemoteConnection: The first of the remote connections to conference."], ["@B_android#telecom#RemoteConnection_E@", "RemoteConnection: The second of the remote connections to conference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates to the relevant RemoteConnectionService that the specified @B_android#telecom#RemoteConnection_E@s should be merged into a conference call. If the conference request is successful, the method @B_android#telecom#ConnectionService#onRemoteConferenceAdded_E@ will be invoked.", "history": "Added in API level 23", "FullName": "public final void conferenceRemoteConnections (RemoteConnection remoteConnection1, RemoteConnection remoteConnection2)"}, "connectionServiceFocusReleased()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telecom#ConnectionService#onConnectionServiceFocusLost_E@"], "Permissions": [], "Description": "Call to inform Telecom that your @B_android#telecom#ConnectionService_E@ has released call resources (e.g microphone, camera). The @B_android#telecom#ConnectionService_E@ will be disconnected when it failed to call this method within 5 seconds after @B_android#telecom#ConnectionService#onConnectionServiceFocusLost_E@ is called.", "history": "Added in API level 28", "FullName": "public final void connectionServiceFocusReleased ()"}, "onCreateOutgoingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#Connection_E@", "@B_android#telecom#Connection_E@ instance corresponding to the handover call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: @B_android#telecom#PhoneAccountHandle_E@ associated with the ConnectionService which needs to handover the call."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the call to handover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Telecom to request that a @B_android#telecom#ConnectionService_E@ creates an instance of an outgoing handover @B_android#telecom#Connection_E@. A call handover is the process where an ongoing call is transferred from one app (i.e. @B_android#telecom#ConnectionService_E@ to another app. The user could, for example, choose to continue a mobile network call in a video calling app. The mobile network call via the Telephony stack is referred to as the source of the handover, and the video calling app is referred to as the destination. When considering a handover scenario the initiating device is where a user initiated the handover process (e.g. by calling @B_android#telecom#Call#handoverTo_E@, and the other device is considered the receiving device. This method is called on the destination @B_android#telecom#ConnectionService_E@ on initiating device when the user initiates a handover request from one app to another. The user request originates in the @B_android#telecom#InCallService_E@ via @B_android#telecom#Call#handoverTo_E@. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@. Implementations of this method should return an instance of @B_android#telecom#Connection_E@ which represents the handover. If your app does not wish to accept a handover to it at this time, you can return null. The code below shows an example of how this is done.", "history": "Added in API level 28", "FullName": "public Connection onCreateOutgoingHandoverConnection (PhoneAccountHandle fromPhoneAccountHandle, ConnectionRequest request)"}, "onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: See description at @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: The outgoing connection request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Telecom to inform the @B_android#telecom#ConnectionService_E@ that its request to create a new outgoing @B_android#telecom#Connection_E@ was denied. Used when a self-managed @B_android#telecom#ConnectionService_E@ attempts to create a new outgoing @B_android#telecom#Connection_E@, but Telecom has determined that the call cannot be placed at this time. The @B_android#telecom#ConnectionService_E@ is responisible for informing the user that the @B_android#telecom#Connection_E@ cannot be made at this time. See @B_android#telecom#TelecomManager#isOutgoingCallPermitted_E@ for more information.", "history": "Added in API level 26", "FullName": "public void onCreateOutgoingConnectionFailed (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}, "getAllConferences()": {"Returns": [["@B_java#util#Collection_E@", "A collection of Conferences created by this ConnectionService."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the active Conferences for which this ConnectionService has taken responsibility.", "history": "Added in API level 24", "FullName": "public final Collection<Conference> getAllConferences ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 23", "FullName": "public final IBinder onBind (Intent intent)"}, "onRemoteConferenceAdded(android.telecom.RemoteConference)": {"Returns": [], "Parameters": [["@B_android#telecom#RemoteConference_E@", "RemoteConference: The remote conference call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that a remote conference has been created for existing @B_android#telecom#RemoteConnection_E@s. When this method is invoked, this @B_android#telecom#ConnectionService_E@ should create its own representation of the conference call and send it to telecom using @B_android#telecom#ConnectionService#addConference_E@. This is only relevant to @B_android#telecom#ConnectionService_E@s which are registered with @B_android#telecom#PhoneAccount#CAPABILITY_CONNECTION_MANAGER_E@.", "history": "Added in API level 23", "FullName": "public void onRemoteConferenceAdded (RemoteConference conference)"}, "onConnectionServiceFocusLost()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the @B_android#telecom#ConnectionService_E@ has lost the call focus. The @B_android#telecom#ConnectionService_E@ should release the call resources and invokes @B_android#telecom#ConnectionService#connectionServiceFocusReleased_E@ to inform telecom that it has released the call resources.", "history": "Added in API level 28", "FullName": "public void onConnectionServiceFocusLost ()"}, "getAllConnections()": {"Returns": [["@B_java#util#Collection_E@", "A collection of Connections created by this ConnectionService."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all the active Connections for which this ConnectionService has taken responsibility.", "history": "Added in API level 23", "FullName": "public final Collection<Connection> getAllConnections ()"}, "onCreateIncomingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [["@B_android#telecom#Connection_E@", "@B_android#telecom#Connection_E@ instance corresponding to the handover call."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: @B_android#telecom#PhoneAccountHandle_E@ associated with the ConnectionService which needs to handover the call."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: Details about the call which needs to be handover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Telecom to request that a @B_android#telecom#ConnectionService_E@ creates an instance of an incoming handover @B_android#telecom#Connection_E@. A call handover is the process where an ongoing call is transferred from one app (i.e. @B_android#telecom#ConnectionService_E@ to another app. The user could, for example, choose to continue a mobile network call in a video calling app. The mobile network call via the Telephony stack is referred to as the source of the handover, and the video calling app is referred to as the destination. When considering a handover scenario the initiating device is where a user initiated the handover process (e.g. by calling @B_android#telecom#Call#handoverTo_E@, and the other device is considered the receiving device. This method is called on the destination app on the receiving device when the destination app calls @B_android#telecom#TelecomManager#acceptHandover_E@ to accept an incoming handover from the initiating device. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@. Implementations of this method should return an instance of @B_android#telecom#Connection_E@ which represents the handover. The code below shows an example of how this is done.", "history": "Added in API level 28", "FullName": "public Connection onCreateIncomingHandoverConnection (PhoneAccountHandle fromPhoneAccountHandle, ConnectionRequest request)"}, "addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The phone account handle for the connection."], ["@B_android#telecom#Connection_E@", "Connection: The connection to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a connection created by the @B_android#telecom#ConnectionService_E@ and informs telecom of the new connection.", "history": "Added in API level 23", "FullName": "public final void addExistingConnection (PhoneAccountHandle phoneAccountHandle, Connection connection)"}, "onCreateIncomingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: See description at @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@."], ["@B_android#telecom#ConnectionRequest_E@", "ConnectionRequest: The incoming connection request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Telecom to inform the @B_android#telecom#ConnectionService_E@ that its request to create a new incoming @B_android#telecom#Connection_E@ was denied. Used when a self-managed @B_android#telecom#ConnectionService_E@ attempts to create a new incoming @B_android#telecom#Connection_E@, but Telecom has determined that the call cannot be allowed at this time. The @B_android#telecom#ConnectionService_E@ is responsible for silently rejecting the new incoming @B_android#telecom#Connection_E@. See @B_android#telecom#TelecomManager#isIncomingCallPermitted_E@ for more information.", "history": "Added in API level 26", "FullName": "public void onCreateIncomingConnectionFailed (PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.telecom.ConnectionService", "ClassDesc": "An abstract service that should be implemented by any apps which either: @B_android#telecom#ConnectionService_E@ needs to take the following steps so that Telecom will bind to it: 1. 2. See @B_android#telecom#PhoneAccount_E@ and @B_android#telecom#TelecomManager#registerPhoneAccount_E@ for more information. System managed @B_android#telecom#ConnectionService_E@s must be enabled by the user in the phone app settings before Telecom will bind to them. Self-managed @B_android#telecom#ConnectionService_E@s must be granted the appropriate permission before Telecom will bind to them. Once registered and enabled by the user in the phone app settings or granted permission, telecom will bind to a @B_android#telecom#ConnectionService_E@ implementation when it wants that @B_android#telecom#ConnectionService_E@ to place a call or the service has indicated that is has an incoming call through @B_android#telecom#TelecomManager#addNewIncomingCall_E@. The @B_android#telecom#ConnectionService_E@ can then expect a call to @B_android#telecom#ConnectionService#onCreateIncomingConnection_E@ or @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@ wherein it should provide a new instance of a @B_android#telecom#Connection_E@ object. It is through this @B_android#telecom#Connection_E@ object that telecom receives state updates and the @B_android#telecom#ConnectionService_E@ receives call-commands such as answer, reject, hold and disconnect. When there are no more live calls, telecom will unbind from the @B_android#telecom#ConnectionService_E@."}