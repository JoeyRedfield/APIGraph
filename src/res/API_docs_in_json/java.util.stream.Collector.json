{"Functions": {"combiner()": {"Returns": [["@B_java#util#function#BinaryOperator_E@", "a function which combines two partial results into a combined result"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A function that accepts two partial results and merges them. The combiner function may fold state from one argument into the other and return that, or may return a new result container.", "history": "Added in API level 24", "FullName": "public abstract BinaryOperator<A> combiner ()"}, "finisher()": {"Returns": [["@B_java#util#function#Function_E@", "a function which transforms the intermediate result to the final result"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform the final transformation from the intermediate accumulation type A to the final result type R. If the characteristic IDENTITY_TRANSFORM is set, this function may be presumed to be an identity transform with an unchecked cast from A to R.", "history": "Added in API level 24", "FullName": "public abstract Function<A, R> finisher ()"}, "of(java.util.function.Supplier<A>,java.util.function.BiConsumer<A,T>,java.util.function.BinaryOperator<A>,java.util.function.Function<A,R>,java.util.stream.Collector.Characteristics...)": {"Returns": [["@B_java#util#stream#Collector_E@", "the new Collector"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: The supplier function for the new collector"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: The accumulator function for the new collector"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: The combiner function for the new collector"], ["@B_java#util#function#Function_E@", "Function: The finisher function for the new collector"], ["@B_java#util#stream#Collector#Characteristics_E@", "Characteristics: The collector characteristics for the new collector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.", "history": "Added in API level 24", "FullName": "public static Collector<T, A, R> of (Supplier<A> supplier, BiConsumer<A, T> accumulator, BinaryOperator<A> combiner, Function<A, R> finisher, Characteristics... characteristics)"}, "supplier()": {"Returns": [["@B_java#util#function#Supplier_E@", "a function which returns a new, mutable result container"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A function that creates and returns a new mutable result container.", "history": "Added in API level 24", "FullName": "public abstract Supplier<A> supplier ()"}, "of(java.util.function.Supplier<R>,java.util.function.BiConsumer<R,T>,java.util.function.BinaryOperator<R>,java.util.stream.Collector.Characteristics...)": {"Returns": [["@B_java#util#stream#Collector_E@", "the new Collector"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: The supplier function for the new collector"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: The accumulator function for the new collector"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: The combiner function for the new collector"], ["@B_java#util#stream#Collector#Characteristics_E@", "Characteristics: The collector characteristics for the new collector"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new Collector described by the given supplier, accumulator, and combiner functions. The resulting Collector has the Collector.Characteristics.IDENTITY_FINISH characteristic.", "history": "Added in API level 24", "FullName": "public static Collector<T, R, R> of (Supplier<R> supplier, BiConsumer<R, T> accumulator, BinaryOperator<R> combiner, Characteristics... characteristics)"}, "accumulator()": {"Returns": [["@B_java#util#function#BiConsumer_E@", "a function which folds a value into a mutable result container"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A function that folds a value into a mutable result container.", "history": "Added in API level 24", "FullName": "public abstract BiConsumer<A, T> accumulator ()"}, "characteristics()": {"Returns": [["@B_java#util#Set_E@", "an immutable set of collector characteristics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set of Collector.Characteristics indicating the characteristics of this Collector. This set should be immutable.", "history": "Added in API level 24", "FullName": "public abstract Set<Collector.Characteristics> characteristics ()"}}, "Inheritance": [], "ClassName": "java.util.stream.Collector<T, A, R>", "ClassDesc": "A Examples of mutable reduction operations include: accumulating elements into a Collection; concatenating strings using a StringBuilder; computing summary information about elements such as sum, min, max, or average; computing \"pivot table\" summaries such as \"maximum valued transaction by seller\", etc. The class @B_java#util#stream#Collectors_E@ provides implementations of many common mutable reductions. A Collector is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are: creation of a new result container (@B_java#util#stream#Collector#supplier_E@) incorporating a new data element into a result container (@B_java#util#stream#Collector#accumulator_E@) combining two result containers into one (@B_java#util#stream#Collector#combiner_E@) performing an optional final transform on the container (@B_java#util#stream#Collector#finisher_E@) Collectors also have a set of characteristics, such as @B_java#util#stream#Collector#Characteristics#CONCURRENT_E@, that provide hints that can be used by a reduction implementation to provide better performance. A sequential implementation of a reduction using a collector would create a single result container using the supplier function, and invoke the accumulator function once for each input element. A parallel implementation would partition the input, create a result container for each partition, accumulate the contents of each partition into a subresult for that partition, and then use the combiner function to merge the subresults into a combined result. To ensure that sequential and parallel executions produce equivalent results, the collector functions must satisfy an identity and an The identity constraint says that for any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result a that is the result of any series of accumulator and combiner invocations, a must be equivalent to combiner.apply(a, supplier.get()). The associativity constraint says that splitting the computation must produce an equivalent result. That is, for any input elements t1 and t2, the results r1 and r2 in the computation below must be equivalent: For collectors that do not have the UNORDERED characteristic, two accumulated results a1 and a2 are equivalent if finisher.apply(a1).equals(finisher.apply(a2)). For unordered collectors, equivalence is relaxed to allow for non-equality related to differences in order. (For example, an unordered collector that accumulated elements to a List would consider two lists equivalent if they contained the same elements, ignoring order.) Libraries that implement reduction based on Collector, such as @B_java#util#stream#Stream#collect_E@, must adhere to the following constraints: The first argument passed to the accumulator function, both arguments passed to the combiner function, and the argument passed to the finisher function must be the result of a previous invocation of the result supplier, accumulator, or combiner functions. The implementation should not do anything with the result of any of the result supplier, accumulator, or combiner functions other than to pass them again to the accumulator, combiner, or finisher functions, or return them to the caller of the reduction operation. If a result is passed to the combiner or finisher function, and the same object is not returned from that function, it is never used again. Once a result is passed to the combiner or finisher function, it is never passed to the accumulator function again. For non-concurrent collectors, any result returned from the result supplier, accumulator, or combiner functions must be serially thread-confined. This enables collection to occur in parallel without the Collector needing to implement any additional synchronization. The reduction implementation must manage that the input is properly partitioned, that partitions are processed in isolation, and combining happens only after accumulation is complete. For concurrent collectors, an implementation is free to (but not required to) implement reduction concurrently. A concurrent reduction is one where the accumulator function is called concurrently from multiple threads, using the same concurrently-modifiable result container, rather than keeping the result isolated during accumulation. A concurrent reduction should only be applied if the collector has the @B_java#util#stream#Collector#Characteristics#UNORDERED_E@ characteristics or if the originating data is unordered. In addition to the predefined implementations in @B_java#util#stream#Collectors_E@, the static factory methods @B_java#util#stream#Collector#of_E@ can be used to construct collectors. For example, you could create a collector that accumulates widgets into a TreeSet with: @B_java#util#stream#Collectors#toCollection_E@)."}