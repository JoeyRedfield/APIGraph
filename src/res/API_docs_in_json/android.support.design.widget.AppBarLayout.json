{"Functions": {"getTargetElevation()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "target elevation is now deprecated. AppBarLayout's elevation is now controlled via a @B_android#animation#StateListAnimator_E@. This method now always returns 0.", "history": "added in version 22.2.0", "FullName": "float getTargetElevation ()"}, "AppBarLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "AppBarLayout (Context context)"}, "setExpanded(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the layout should be fully expanded, false if it should be fully collapsed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this @B_android#support#design#widget#AppBarLayout_E@ is expanded or not, animating if it has already been laid out. As with @B_android#support#design#widget#AppBarLayout_E@'s scrolling, this method relies on this layout being a direct child of a @B_android#support#design#widget#CoordinatorLayout_E@.", "history": "added in version 23.0.0", "FullName": "void setExpanded (boolean expanded)"}, "setTargetElevation(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "target elevation is now deprecated. AppBarLayout's elevation is now controlled via a @B_android#animation#StateListAnimator_E@. If a target elevation is set, either by this method or the app:elevation attribute, a new state list animator is created which uses the given elevation value.", "history": "added in version 22.2.0", "FullName": "void setTargetElevation (float elevation)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#design#widget#AppBarLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "AppBarLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getTotalScrollRange()": {"Returns": [["int", "the scroll range in px"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the scroll range of all children.", "history": "added in version 22.2.0", "FullName": "int getTotalScrollRange ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "setExpanded(boolean, boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the layout should be fully expanded, false if it should be fully collapsed"], ["boolean", "boolean: Whether to animate to the new state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this @B_android#support#design#widget#AppBarLayout_E@ is expanded or not. As with @B_android#support#design#widget#AppBarLayout_E@'s scrolling, this method relies on this layout being a direct child of a @B_android#support#design#widget#CoordinatorLayout_E@.", "history": "added in version 23.0.0", "FullName": "void setExpanded (boolean expanded, boolean animate)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#design#widget#AppBarLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ when the layout's orientation is @B_android#widget#LinearLayout#VERTICAL_E@. When the orientation is @B_android#widget#LinearLayout#HORIZONTAL_E@, the width is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and the height to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "", "FullName": "AppBarLayout.LayoutParams generateDefaultLayoutParams ()"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "", "FullName": "int[] onCreateDrawableState (int extraSpace)"}, "setOrientation(int)": {"Returns": [], "Parameters": [["int", "int: Pass @B_android#widget#LinearLayout#HORIZONTAL_E@ or @B_android#widget#LinearLayout#VERTICAL_E@. Default value is @B_android#widget#LinearLayout#HORIZONTAL_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should the layout be a column or a row.", "history": "", "FullName": "void setOrientation (int orientation)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#LinearLayout_E@"], "ClassName": "android.support.design.widget.AppBarLayout", "ClassDesc": "AppBarLayout is a vertical https:##developer#android#com@B_android#widget#LinearLayout_E@ which implements many of the features of material designs app bar concept, namely scrolling gestures. Children should provide their desired scrolling behavior through @B_android#support#design#widget#AppBarLayout#LayoutParams#setScrollFlags_E@ and the associated layout xml attribute: app:layout_scrollFlags. This view depends heavily on being used as a direct child within a @B_android#support#design#widget#CoordinatorLayout_E@. If you use AppBarLayout within a different https:##developer#android#com@B_android#view#ViewGroup_E@, most of it's functionality will not work. AppBarLayout also requires a separate scrolling sibling in order to know when to scroll. The binding is done through the @B_android#support#design#widget#AppBarLayout#ScrollingViewBehavior_E@ behavior class, meaning that you should set your scrolling view's behavior to be an instance of @B_android#support#design#widget#AppBarLayout#ScrollingViewBehavior_E@. A string resource containing the full class name is available."}