{"Functions": {"getInstance(android.icu.util.ULocale,android.icu.text.CompactDecimalFormat.CompactStyle)": {"Returns": [["@B_android#icu#text#CompactDecimalFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the desired locale"], ["@B_android#icu#text#CompactDecimalFormat#CompactStyle_E@", "CompactDecimalFormat.CompactStyle: the compact style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CompactDecimalFormat appropriate for a locale. The result may be affected by the number system in the locale, such as ar-u-nu-latn.", "history": "Added in API level 24", "FullName": "public static CompactDecimalFormat getInstance (ULocale locale, CompactDecimalFormat.CompactStyle style)"}, "parseCurrency(java.lang.CharSequence,java.text.ParsePosition)": {"Returns": [["@B_android#icu#util#CurrencyAmount_E@", "a CurrencyAmount, or null upon failure"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: input-output position; on input, the position within text to match; must have 0 <= pos.getIndex() < text.length(); on output, the position after the last matched character. If the parse fails, the position in unchanged upon output."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parsing is currently unsupported, and throws an UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public CurrencyAmount parseCurrency (CharSequence text, ParsePosition parsePosition)"}, "formatToCharacterIterator(java.lang.Object)": {"Returns": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator describing the formatted value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats the object to an attributed string, and return the corresponding iterator.", "history": "added in API level 24", "FullName": "AttributedCharacterIterator formatToCharacterIterator (Object obj)"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parsing is currently unsupported, and throws an UnsupportedOperationException.", "history": "added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}, "getInstance(java.util.Locale,android.icu.text.CompactDecimalFormat.CompactStyle)": {"Returns": [["@B_android#icu#text#CompactDecimalFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"], ["@B_android#icu#text#CompactDecimalFormat#CompactStyle_E@", "CompactDecimalFormat.CompactStyle: the compact style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CompactDecimalFormat appropriate for a locale. The result may be affected by the number system in the locale, such as ar-u-nu-latn.", "history": "Added in API level 24", "FullName": "public static CompactDecimalFormat getInstance (Locale locale, CompactDecimalFormat.CompactStyle style)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the object is equal to this."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals.", "history": "added in API level 24", "FullName": "boolean equals (Object obj)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parsing is currently unsupported, and throws an UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@", "@B_android#icu#text#NumberFormat_E@", "@B_android#icu#text#DecimalFormat_E@"], "ClassName": "android.icu.text.CompactDecimalFormat", "ClassDesc": "Formats numbers in compact (abbreviated) notation, like \"1.2K\" instead of \"1200\". The CompactDecimalFormat produces abbreviated numbers, suitable for display in environments will limited real estate. For example, 'Hits: 1.2B' instead of 'Hits: 1,200,000,000'. The format will be appropriate for the given language, such as \"1,2 Mrd.\" for German. For numbers under 1000 trillion (under 10^15, such as 123,456,789,012,345), the result will be short for supported languages. However, the result may sometimes exceed 7 characters, such as when there are combining marks or thin characters. In such cases, the visual width in fonts should still be short. By default, there are 2 significant digits. After creation, if more than three significant digits are set (with setMaximumSignificantDigits), or if a fixed number of digits are set (with setMaximumIntegerDigits or setMaximumFractionDigits), then result may be wider. The \"short\" style is also capable of formatting currency amounts, such as \"$1.2M\" instead of \"$1,200,000.00\" (English) or \"5,3 Mio. \u20ac\" instead of \"5.300.000,00 \u20ac\" (German). Localized data concerning longer formats is not available yet in the Unicode CLDR. Because of this, attempting to format a currency amount using the \"long\" style will produce an UnsupportedOperationException. At this time, negative numbers and parsing are not supported, and will produce an UnsupportedOperationException. Resetting the pattern prefixes or suffixes is not supported; the method calls are ignored. Note that important methods, like setting the number of decimals, will be moved up from DecimalFormat to NumberFormat."}