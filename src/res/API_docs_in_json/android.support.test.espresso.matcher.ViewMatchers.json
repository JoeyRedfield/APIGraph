{"Functions": {"withHint(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String: @B_java#lang#String_E@ with the hint text to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#TextView_E@ based on it's hint property value. Note: View's Sugar for withHint(is(\"string\")).", "history": "", "FullName": "Matcher<View> withHint (String hintText)"}, "withSpinnerText(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#Spinner_E@ based on it's selected item's toString value. Note: Sugar for withSpinnerText(is(\"string\")).", "history": "", "FullName": "Matcher<View> withSpinnerText (String text)"}, "withSpinnerText(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the string resource the text view is expected to hold."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches a descendant of @B_android#widget#Spinner_E@ that is displaying the string of the selected item associated with the given resource id.", "history": "", "FullName": "Matcher<View> withSpinnerText (int resourceId)"}, "isRoot()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches root @B_android#view#View_E@.", "history": "", "FullName": "Matcher<View> isRoot ()"}, "withId(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the resource id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Same as withId(is(int)), but attempts to look up resource name of the given id and use an R.id.myView style description with describeTo. If resource lookup is unavailable, at the time describeTo is invoked, this will print out a simple \"with id: %d\". If resource lookup is available, but looking up the name for the given id, fails, \"with id: %d (resource name not found)\" will be returned as the description.", "history": "", "FullName": "Matcher<View> withId (int id)"}, "withId(org.hamcrest.Matcher<java.lang.Integer>)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["Matcher", "Matcher: a Matcher for resource ids"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s based on resource ids. Note: Android resource ids are not guaranteed to be unique. You may have to pair this matcher with another one to guarantee a unique view selection.", "history": "", "FullName": "Matcher<View> withId (Matcher<Integer> integerMatcher)"}, "withContentDescription(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String: the text to match on."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_android#view#View_E@s based on content description property value. Sugar for withContentDescription(is(\"string\")).", "history": "", "FullName": "Matcher<View> withContentDescription (String text)"}, "hasFocus()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s currently have focus.", "history": "", "FullName": "Matcher<View> hasFocus ()"}, "isNotChecked()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is not in checked state.", "history": "", "FullName": "Matcher<View> isNotChecked ()"}, "isFocusable()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s that are focusable.", "history": "", "FullName": "Matcher<View> isFocusable ()"}, "hasLinks()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#TextView_E@s that have links.", "history": "", "FullName": "Matcher<View> hasLinks ()"}, "withTagKey(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@ based on tag keys.", "history": "", "FullName": "Matcher<View> withTagKey (int key)"}, "withText(org.hamcrest.Matcher<java.lang.String>)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["Matcher", "Matcher: Matcher of @B_java#lang#String_E@ with text to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#TextView_E@s based on text property value. Note: View's text property is never null. If you setText(null) it will still be \"\". Do not use null matcher.", "history": "", "FullName": "Matcher<View> withText (Matcher<String> stringMatcher)"}, "assertThat(T, org.hamcrest.Matcher<T>)": {"Returns": [], "Parameters": [["T", "T: the actual value."], ["Matcher", "Matcher: a matcher that accepts or rejects actual."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A replacement for MatcherAssert.assertThat that renders View objects nicely.", "history": "", "FullName": "void assertThat (T actual, Matcher<T> matcher)"}, "withChild(org.hamcrest.Matcher<android.view.View>)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["Matcher", "Matcher: the matcher to apply on the child views."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A matcher that returns true if and only if the view's child is accepted by the provided matcher.", "history": "", "FullName": "Matcher<View> withChild (Matcher<View> childMatcher)"}, "isSelected()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s that are selected.", "history": "", "FullName": "Matcher<View> isSelected ()"}, "supportsInputMethods()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches views that support input methods.", "history": "", "FullName": "Matcher<View> supportsInputMethods ()"}, "hasErrorText(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#EditText_E@ based on edit text error string value. Note: Sugar for hasErrorText(is(\"string\")).", "history": "", "FullName": "Matcher<View> hasErrorText (String expectedError)"}, "hasImeAction(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the IME action to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches views that support input methods (e.g. EditText) and have the specified IME action set in its @B_android#view#inputmethod#EditorInfo_E@.", "history": "", "FullName": "Matcher<View> hasImeAction (int imeAction)"}, "hasContentDescription()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an @B_android#view#View_E@s with any content description.", "history": "", "FullName": "Matcher<View> hasContentDescription ()"}, "withText(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String: @B_java#lang#String_E@ with the text to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#TextView_E@ based on its text property value. Note: View's Sugar for withText(is(\"string\")).", "history": "", "FullName": "Matcher<View> withText (String text)"}, "isClickable()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s that are clickable.", "history": "", "FullName": "Matcher<View> isClickable ()"}, "withHint(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the string resource the text view is expected to have as a hint."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches a descendant of @B_android#widget#TextView_E@ that is displaying the hint associated with the given resource id.", "history": "", "FullName": "Matcher<View> withHint (int resourceId)"}, "isEnabled()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s that are enabled.", "history": "", "FullName": "Matcher<View> isEnabled ()"}, "withContentDescription(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the resource id of the content description to match on."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#view#View_E@s based on content description property value.", "history": "", "FullName": "Matcher<View> withContentDescription (int resourceId)"}, "isCompletelyDisplayed()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher which only accepts a view whose height and width fit perfectly within the currently displayed region of this view. There exist views (such as ScrollViews) whose height and width are larger then the physical device screen by design. Such views will _never_ be completely displayed.", "history": "", "FullName": "Matcher<View> isCompletelyDisplayed ()"}, "isChecked()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is in checked state.", "history": "", "FullName": "Matcher<View> isChecked ()"}, "isDisplayingAtLeast(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: an integer ranging from (0, 100] indicating how much percent of the surface area of the view must be shown to the user to be accepted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher which accepts a view so long as a given percentage of that view's area is not obscured by any other view and is thus visible to the user.", "history": "", "FullName": "Matcher<View> isDisplayingAtLeast (int areaPercentage)"}, "isJavascriptEnabled()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#webkit#WebView_E@ if they are evaluating Javascript.", "history": "", "FullName": "Matcher<View> isJavascriptEnabled ()"}, "withInputType(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#text#InputType_E@.", "history": "", "FullName": "Matcher<View> withInputType (int inputType)"}, "withText(int)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["int", "int: the string resource the text view is expected to hold."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches a descendant of @B_android#widget#TextView_E@ that is displaying the string associated with the given resource id.", "history": "", "FullName": "Matcher<View> withText (int resourceId)"}, "withHint(org.hamcrest.Matcher<java.lang.String>)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["Matcher", "Matcher: Matcher of @B_java#lang#String_E@ with text to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#widget#TextView_E@s based on hint property value. Note: View's hint property can be null.", "history": "", "FullName": "Matcher<View> withHint (Matcher<String> stringMatcher)"}, "withResourceName(java.lang.String)": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [["String", "String: the resource id name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s based on resource id names, (for instance, channel_avatar).", "history": "", "FullName": "Matcher<View> withResourceName (String name)"}, "isDisplayed()": {"Returns": [["Matcher<View>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a matcher that matches @B_android#view#View_E@s that are currently displayed on the screen to the user. Note: isDisplayed will select views that are partially displayed (eg: the full height/width of the view is greater then the height/width of the visible rectangle). If you wish to ensure the entire rectangle this view draws is displayed to the user use isCompletelyDisplayed.", "history": "", "FullName": "Matcher<View> isDisplayed ()"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.matcher.ViewMatchers", "ClassDesc": "A collection of hamcrest matchers that match https:##developer#android#com@B_android#view#View_E@s."}