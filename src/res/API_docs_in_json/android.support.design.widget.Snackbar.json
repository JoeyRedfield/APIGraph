{"Functions": {"isShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this @B_android#support#design#widget#Snackbar_E@ is currently being shown.", "history": "", "FullName": "boolean isShown ()"}, "getView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#support#design#widget#Snackbar_E@'s view.", "history": "", "FullName": "View getView ()"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the @B_android#support#design#widget#Snackbar_E@.", "history": "", "FullName": "void show ()"}, "getDuration()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#Snackbar#setDuration_E@"], "Permissions": [], "Description": "Return the duration.", "history": "", "FullName": "int getDuration ()"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss the @B_android#support#design#widget#Snackbar_E@.", "history": "", "FullName": "void dismiss ()"}, "setDuration(int)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["int", "int: either be one of the predefined lengths: @B_android#support#design#widget#Snackbar#LENGTH_SHORT_E@, @B_android#support#design#widget#Snackbar#LENGTH_LONG_E@, or a custom duration in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set how long to show the view for.", "history": "", "FullName": "Snackbar setDuration (int duration)"}, "isShownOrQueued()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this @B_android#support#design#widget#Snackbar_E@ is currently being shown, or is queued to be shown next.", "history": "", "FullName": "boolean isShownOrQueued ()"}, "setActionTextColor(int)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color of the action specified in @B_android#support#design#widget#Snackbar#setAction_E@.", "history": "added in version 22.2.1", "FullName": "Snackbar setActionTextColor (int color)"}, "setText(int)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["int", "int: The new text for this @B_android#support#design#widget#BaseTransientBottomBar_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the text in this @B_android#support#design#widget#Snackbar_E@.", "history": "added in version 22.2.0", "FullName": "Snackbar setText (int resId)"}, "setText(java.lang.CharSequence)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text for this @B_android#support#design#widget#BaseTransientBottomBar_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the text in this @B_android#support#design#widget#Snackbar_E@.", "history": "added in version 22.2.0", "FullName": "Snackbar setText (CharSequence message)"}, "setAction(int, android.view.View.OnClickListener)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["int", "int: String resource to display for the action"], ["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: callback to be invoked when the action is clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the action to be displayed in this @B_android#support#design#widget#BaseTransientBottomBar_E@.", "history": "added in version 22.2.0", "FullName": "Snackbar setAction (int resId, View.OnClickListener listener)"}, "make(android.view.View, int, int)": {"Returns": [["@B_android#support#design#widget#Snackbar_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View: The view to find a parent from."], ["int", "int: The resource id of the string resource to use. Can be formatted text."], ["int", "int: How long to display the message. Either @B_android#support#design#widget#Snackbar#LENGTH_SHORT_E@ or @B_android#support#design#widget#Snackbar#LENGTH_LONG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make a Snackbar to display a message. Snackbar will try and find a parent view to hold Snackbar's view from the value given to view. Snackbar will walk up the view tree trying to find a suitable parent, which is defined as a @B_android#support#design#widget#CoordinatorLayout_E@ or the window decor's content view, whichever comes first. Having a @B_android#support#design#widget#CoordinatorLayout_E@ in your view hierarchy allows Snackbar to enable certain features, such as swipe-to-dismiss and automatically moving of widgets like @B_android#support#design#widget#FloatingActionButton_E@.", "history": "added in version 22.2.0", "FullName": "Snackbar make (View view, int resId, int duration)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#design#widget#BaseTransientBottomBar_E@"], "ClassName": "android.support.design.widget.Snackbar", "ClassDesc": "Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on larger devices. Snackbars appear above all other elements on screen and only one can be displayed at a time. They automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. Snackbars can contain an action which is set via @B_android#support#design#widget#Snackbar#setAction_E@. To be notified when a snackbar has been shown or dismissed, you can provide a @B_android#support#design#widget#Snackbar#Callback_E@ via @B_android#support#design#widget#BaseTransientBottomBar#addCallback_E@."}