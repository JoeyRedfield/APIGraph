{"Functions": {"setAlphabeticShortcut(char)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the alphabetic shortcut associated with this item. The shortcut will be triggered when the key that generates the given character is pressed along with the corresponding modifier key. The default modifier is @B_android#view#KeyEvent#META_CTRL_ON_E@ in case nothing is specified. Case is not significant and shortcut characters will be displayed in lower case. Note that menu items with the characters '\\b' or '\\n' as shortcuts will get triggered by the Delete key or Carriage Return key, respectively. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setAlphabeticShortcut (char alphaChar)"}, "hasSubMenu()": {"Returns": [["boolean", "If true this item has a menu; else it is a normal item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether this item has an associated sub-menu. I.e. it is a sub-menu of another menu.", "history": "Added in API level 1", "FullName": "public abstract boolean hasSubMenu ()"}, "getIconTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to this item's icon This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIconTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public ColorStateList getIconTintList ()"}, "getOrder()": {"Returns": [["int", "The order of this item."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the category and order within the category of this item. This item will be shown before all items (within its category) that have order greater than this value. An order integer contains the item's category (the upper bits of the integer; set by or/add the category with the order within the category) and the ordering of the item within that category (the lower bits). Example categories are @B_android#view#Menu#CATEGORY_SYSTEM_E@, @B_android#view#Menu#CATEGORY_SECONDARY_E@, @B_android#view#Menu#CATEGORY_ALTERNATIVE_E@, @B_android#view#Menu#CATEGORY_CONTAINER_E@. See @B_android#view#Menu_E@ for a full list.", "history": "Added in API level 1", "FullName": "public abstract int getOrder ()"}, "setNumericShortcut(char)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a 12-key (numeric) keyboard."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the numeric shortcut associated with this item. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setNumericShortcut (char numericChar)"}, "setAlphabeticShortcut(char, int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."], ["int", "int: The modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the alphabetic shortcut associated with this item. The shortcut will be triggered when the key that generates the given character is pressed along with the modifier keys. Case is not significant and shortcut characters will be displayed in lower case. Note that menu items with the characters '\\b' or '\\n' as shortcuts will get triggered by the Delete key or Carriage Return key, respectively. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "added in API level 26", "FullName": "public MenuItem setAlphabeticShortcut (char alphaChar, int alphaModifiers)"}, "setNumericShortcut(char,int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a 12-key (numeric) keyboard."], ["int", "int: The modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the numeric shortcut and modifiers associated with this item. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 26", "FullName": "public MenuItem setNumericShortcut (char numericChar, int numericModifiers)"}, "setIconTintList(android.content.res.ColorStateList)": {"Returns": [["@B_android#view#MenuItem_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#getIconTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to this item's icon. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#view#MenuItem#setIcon_E@ or @B_android#view#MenuItem#setIcon_E@ will automatically mutate the icon and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 26", "FullName": "public MenuItem setIconTintList (ColorStateList tint)"}, "setTooltipText(java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new tooltip text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the tooltip text associated with this menu item.", "history": "Added in API level 26", "FullName": "public MenuItem setTooltipText (CharSequence tooltipText)"}, "setContentDescription(java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new content description."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the content description associated with this menu item.", "history": "Added in API level 26", "FullName": "public MenuItem setContentDescription (CharSequence contentDescription)"}, "getTooltipText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The tooltip text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the tooltip text associated with this menu item.", "history": "Added in API level 26", "FullName": "public CharSequence getTooltipText ()"}, "setShowAsActionFlags(int)": {"Returns": [["@B_android#view#MenuItem_E@", "This MenuItem instance for call chaining."]], "Parameters": [["int", "int: How the item should display. One of @B_android#view#MenuItem#SHOW_AS_ACTION_ALWAYS_E@, @B_android#view#MenuItem#SHOW_AS_ACTION_IF_ROOM_E@, or @B_android#view#MenuItem#SHOW_AS_ACTION_NEVER_E@. SHOW_AS_ACTION_NEVER is the default."]], "Throws": [], "SeeAlso": ["@B_android#app#ActionBar_E@", "@B_android#view#MenuItem#setActionView_E@"], "Permissions": [], "Description": "Sets how this item should display in the presence of an Action Bar. The parameter actionEnum is a flag set. One of @B_android#view#MenuItem#SHOW_AS_ACTION_ALWAYS_E@, @B_android#view#MenuItem#SHOW_AS_ACTION_IF_ROOM_E@, or @B_android#view#MenuItem#SHOW_AS_ACTION_NEVER_E@ should be used, and you may optionally OR the value with @B_android#view#MenuItem#SHOW_AS_ACTION_WITH_TEXT_E@. SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action, it should be shown with a text label. Note: This method differs from @B_android#view#MenuItem#setShowAsAction_E@ only in that it returns the current MenuItem instance for call chaining.", "history": "Added in API level 14", "FullName": "public abstract MenuItem setShowAsActionFlags (int actionEnum)"}, "setChecked(boolean)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["boolean", "boolean: Set to true to display a check mark, false to hide it. The default value is false."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setCheckable_E@", "@B_android#view#MenuItem#isChecked_E@", "@B_android#view#Menu#setGroupCheckable_E@"], "Permissions": [], "Description": "Control whether this item is shown with a check mark. Note that you must first have enabled checking with @B_android#view#MenuItem#setCheckable_E@ or else the check mark will not appear. If this item is a member of a group that contains mutually-exclusive items (set via @B_android#view#Menu#setGroupCheckable_E@, the other items in the group will be unchecked. See @B_android#view#Menu_E@ for the menu types that support check marks.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setChecked (boolean checked)"}, "setEnabled(boolean)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["boolean", "boolean: If true then the item will be invokable; if false it is won't be invokable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the menu item is enabled. Disabling a menu item will not allow it to be invoked via its shortcut. The menu item will still be visible.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setEnabled (boolean enabled)"}, "getIconTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to this item's icon This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIconTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to this item's icon, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getIconTintBlendMode ()"}, "getActionProvider()": {"Returns": [["@B_android#view#ActionProvider_E@", "The action provider."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ActionProvider_E@", "@B_android#view#MenuItem#setActionProvider_E@"], "Permissions": [], "Description": "Gets the @B_android#view#ActionProvider_E@.", "history": "Added in API level 14", "FullName": "public abstract ActionProvider getActionProvider ()"}, "getSubMenu()": {"Returns": [["@B_android#view#SubMenu_E@", "The associated menu if there is one, else null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the sub-menu to be invoked when this item is selected, if it has one. See @B_android#view#MenuItem#hasSubMenu_E@.", "history": "Added in API level 1", "FullName": "public abstract SubMenu getSubMenu ()"}, "setIntent(android.content.Intent)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent to associated with the item. This Intent object is not copied, so be careful not to modify it later."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#getIntent_E@"], "Permissions": [], "Description": "Change the Intent associated with this item. By default there is no Intent associated with a menu item. If you set one, and nothing else handles the item, then the default behavior will be to call @B_android#content#Context#startActivity_E@ with the given Intent. Note that setIntent() can not be used with the versions of @B_android#view#Menu#add_E@ that take a Runnable, because @B_java#lang#Runnable#run_E@ does not return a value so there is no way to tell if it handled the item. In this case it is assumed that the Runnable always handles the item, and the intent will never be started.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setIntent (Intent intent)"}, "setNumericShortcut(char, int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a 12-key (numeric) keyboard."], ["int", "int: The modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the numeric shortcut and modifiers associated with this item. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "added in API level 26", "FullName": "public MenuItem setNumericShortcut (char numericChar, int numericModifiers)"}, "setIconTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [["@B_android#view#MenuItem_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIconTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#view#MenuItem#setIconTintList_E@ to this item's icon. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 26", "FullName": "public MenuItem setIconTintMode (PorterDuff.Mode tintMode)"}, "setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_android#view#MenuItem#OnMenuItemClickListener_E@", "MenuItem.OnMenuItemClickListener: The object to receive invokations."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onOptionsItemSelected_E@", "@B_android#app#Activity#onContextItemSelected_E@"], "Permissions": [], "Description": "Set a custom listener for invocation of this menu item. In most situations, it is more efficient and easier to use @B_android#app#Activity#onOptionsItemSelected_E@ or @B_android#app#Activity#onContextItemSelected_E@.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setOnMenuItemClickListener (MenuItem.OnMenuItemClickListener menuItemClickListener)"}, "setShortcut(char, char, int, int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a numeric (e.g., 12-key) keyboard."], ["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."], ["int", "int: The numeric modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."], ["int", "int: The alphabetic modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change both the numeric and alphabetic shortcut associated with this item. Note that the shortcut will be triggered when the key that generates the given character is pressed along with the corresponding modifier key. Also note that case is not significant and that alphabetic shortcut characters will be handled in lower case. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "added in API level 26", "FullName": "public MenuItem setShortcut (char numericChar, char alphaChar, int numericModifiers, int alphaModifiers)"}, "setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener)": {"Returns": [["@B_android#view#MenuItem_E@", "This menu item instance for call chaining"]], "Parameters": [["@B_android#view#MenuItem#OnActionExpandListener_E@", "MenuItem.OnActionExpandListener: Listener that will respond to expand/collapse events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an @B_android#view#MenuItem#OnActionExpandListener_E@ on this menu item to be notified when the associated action view is expanded or collapsed. The menu item must be configured to expand or collapse its action view using the flag @B_android#view#MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW_E@.", "history": "Added in API level 14", "FullName": "public abstract MenuItem setOnActionExpandListener (MenuItem.OnActionExpandListener listener)"}, "isChecked()": {"Returns": [["boolean", "If a check mark is displayed, returns true."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setChecked_E@"], "Permissions": [], "Description": "Return whether the item is currently displaying a check mark.", "history": "Added in API level 1", "FullName": "public abstract boolean isChecked ()"}, "getTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The title."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current title of the item.", "history": "Added in API level 1", "FullName": "public abstract CharSequence getTitle ()"}, "getNumericModifiers()": {"Returns": [["int", "Modifier associated with the numeric shortcut."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the modifiers for this menu item's numeric (12-key) shortcut. The modifier is a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@. For example, @B_android#view#KeyEvent#META_FUNCTION_ON_E@|@B_android#view#KeyEvent#META_CTRL_ON_E@", "history": "Added in API level 26", "FullName": "public int getNumericModifiers ()"}, "setTitle(int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["int", "int: The resource id of the new text to be displayed."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setTitleCondensed_E@"], "Permissions": [], "Description": "Change the title associated with this item. Some menu types do not sufficient space to show the full title, and instead a condensed title is preferred. See @B_android#view#Menu_E@ for more information.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setTitle (int title)"}, "setShortcut(char,char)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a numeric (e.g., 12-key) keyboard."], ["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change both the numeric and alphabetic shortcut associated with this item. Note that the shortcut will be triggered when the key that generates the given character is pressed along with the corresponding modifier key. The default modifier is @B_android#view#KeyEvent#META_CTRL_ON_E@ in case nothing is specified. Also note that case is not significant and that alphabetic shortcut characters will be handled in lower case. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setShortcut (char numericChar, char alphaChar)"}, "setTitle(java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text to be displayed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the title associated with this item.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setTitle (CharSequence title)"}, "getGroupId()": {"Returns": [["int", "The menu item's group identifier."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the group identifier that this menu item is part of. The group identifier can not be changed after the menu is created.", "history": "Added in API level 1", "FullName": "public abstract int getGroupId ()"}, "getMenuInfo()": {"Returns": [["@B_android#view#ContextMenu#ContextMenuInfo_E@", "The extra information linked to the View that added this menu item to the menu. This can be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#OnCreateContextMenuListener_E@"], "Permissions": [], "Description": "Gets the extra information linked to this menu item. This extra information is set by the View that added this menu item to the menu.", "history": "Added in API level 1", "FullName": "public abstract ContextMenu.ContextMenuInfo getMenuInfo ()"}, "getItemId()": {"Returns": [["int", "The menu item's identifier."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the identifier for this menu item. The identifier can not be changed after the menu is created.", "history": "Added in API level 1", "FullName": "public abstract int getItemId ()"}, "setActionView(int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["int", "int: Layout resource to use for presenting this item to the user."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setShowAsAction_E@"], "Permissions": [], "Description": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent. @B_android#view#MenuItem#setActionProvider_E@.", "history": "Added in API level 11", "FullName": "public abstract MenuItem setActionView (int resId)"}, "getAlphabeticModifiers()": {"Returns": [["int", "Modifier associated with the keyboard shortcut."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the modifier for this menu item's alphabetic shortcut. The modifier is a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@. For example, @B_android#view#KeyEvent#META_FUNCTION_ON_E@|@B_android#view#KeyEvent#META_CTRL_ON_E@", "history": "Added in API level 26", "FullName": "public int getAlphabeticModifiers ()"}, "setCheckable(boolean)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["boolean", "boolean: Set to true to allow a check mark, false to disallow. The default is false."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setChecked_E@", "@B_android#view#MenuItem#isCheckable_E@", "@B_android#view#Menu#setGroupCheckable_E@"], "Permissions": [], "Description": "Control whether this item can display a check mark. Setting this does not actually display a check mark (see @B_android#view#MenuItem#setChecked_E@ for that); rather, it ensures there is room in the item in which to display a check mark. See @B_android#view#Menu_E@ for the menu types that support check marks.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setCheckable (boolean checkable)"}, "isVisible()": {"Returns": [["boolean", "If true the item is visible; else it is hidden."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the visibility of the menu item.", "history": "Added in API level 1", "FullName": "public abstract boolean isVisible ()"}, "expandActionView()": {"Returns": [["boolean", "true if the action view was expanded, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Expand the action view associated with this menu item. The menu item must have an action view set, as well as the showAsAction flag @B_android#view#MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW_E@. If a listener has been set using @B_android#view#MenuItem#setOnActionExpandListener_E@ it will have its @B_android#view#MenuItem#OnActionExpandListener#onMenuItemActionExpand_E@ method invoked. The listener may return false from this method to prevent expanding the action view.", "history": "Added in API level 14", "FullName": "public abstract boolean expandActionView ()"}, "setIcon(android.graphics.drawable.Drawable)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The new icon (as a Drawable) to be displayed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the icon associated with this item. This icon will not always be shown, so the title should be sufficient in describing this item. See @B_android#view#Menu_E@ for the menu types that support icons.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setIcon (Drawable icon)"}, "setAlphabeticShortcut(char,int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."], ["int", "int: The modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the alphabetic shortcut associated with this item. The shortcut will be triggered when the key that generates the given character is pressed along with the modifier keys. Case is not significant and shortcut characters will be displayed in lower case. Note that menu items with the characters '\\b' or '\\n' as shortcuts will get triggered by the Delete key or Carriage Return key, respectively. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 26", "FullName": "public MenuItem setAlphabeticShortcut (char alphaChar, int alphaModifiers)"}, "setActionView(android.view.View)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_android#view#View_E@", "View: View to use for presenting this item to the user."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setShowAsAction_E@"], "Permissions": [], "Description": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent. @B_android#view#MenuItem#setActionProvider_E@.", "history": "Added in API level 11", "FullName": "public abstract MenuItem setActionView (View view)"}, "getNumericShortcut()": {"Returns": [["char", "Numeric character to use as a shortcut."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the char for this menu item's numeric (12-key) shortcut.", "history": "Added in API level 1", "FullName": "public abstract char getNumericShortcut ()"}, "getIconTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to this item's icon This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIconTintMode_E@", "@B_android#view#MenuItem#setIconTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to this item's icon, if specified.", "history": "Added in API level 26", "FullName": "public PorterDuff.Mode getIconTintMode ()"}, "setShowAsAction(int)": {"Returns": [], "Parameters": [["int", "int: How the item should display. One of @B_android#view#MenuItem#SHOW_AS_ACTION_ALWAYS_E@, @B_android#view#MenuItem#SHOW_AS_ACTION_IF_ROOM_E@, or @B_android#view#MenuItem#SHOW_AS_ACTION_NEVER_E@. SHOW_AS_ACTION_NEVER is the default."]], "Throws": [], "SeeAlso": ["@B_android#app#ActionBar_E@", "@B_android#view#MenuItem#setActionView_E@"], "Permissions": [], "Description": "Sets how this item should display in the presence of an Action Bar. The parameter actionEnum is a flag set. One of @B_android#view#MenuItem#SHOW_AS_ACTION_ALWAYS_E@, @B_android#view#MenuItem#SHOW_AS_ACTION_IF_ROOM_E@, or @B_android#view#MenuItem#SHOW_AS_ACTION_NEVER_E@ should be used, and you may optionally OR the value with @B_android#view#MenuItem#SHOW_AS_ACTION_WITH_TEXT_E@. SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action, it should be shown with a text label.", "history": "Added in API level 11", "FullName": "public abstract void setShowAsAction (int actionEnum)"}, "getAlphabeticShortcut()": {"Returns": [["char", "Alphabetic character to use as a shortcut."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the char for this menu item's alphabetic shortcut.", "history": "Added in API level 1", "FullName": "public abstract char getAlphabeticShortcut ()"}, "getIntent()": {"Returns": [["@B_android#content#Intent_E@", "Returns the last value supplied to @B_android#view#MenuItem#setIntent_E@, or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIntent_E@"], "Permissions": [], "Description": "Return the Intent associated with this item. This returns a reference to the Intent which you can change as desired to modify what the Item is holding.", "history": "Added in API level 1", "FullName": "public abstract Intent getIntent ()"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The content description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the content description associated with this menu item.", "history": "Added in API level 26", "FullName": "public CharSequence getContentDescription ()"}, "isCheckable()": {"Returns": [["boolean", "If a check mark can be displayed, returns true."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setCheckable_E@"], "Permissions": [], "Description": "Return whether the item can currently display a check mark.", "history": "Added in API level 1", "FullName": "public abstract boolean isCheckable ()"}, "setShortcut(char,char,int,int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a numeric (e.g., 12-key) keyboard."], ["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."], ["int", "int: The numeric modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."], ["int", "int: The alphabetic modifier associated with the shortcut. It should be a combination of @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change both the numeric and alphabetic shortcut associated with this item. Note that the shortcut will be triggered when the key that generates the given character is pressed along with the corresponding modifier key. Also note that case is not significant and that alphabetic shortcut characters will be handled in lower case. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "Added in API level 26", "FullName": "public MenuItem setShortcut (char numericChar, char alphaChar, int numericModifiers, int alphaModifiers)"}, "getIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The icon as a Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before). Note that if you call @B_android#view#MenuItem#setIconTintList_E@ or @B_android#view#MenuItem#setIconTintMode_E@ on this item, and you use a custom menu presenter in your application, you have to apply the tinting explicitly on the @B_android#graphics#drawable#Drawable_E@ returned by this method.", "history": "Added in API level 1", "FullName": "public abstract Drawable getIcon ()"}, "setIconTintBlendMode(android.graphics.BlendMode)": {"Returns": [["@B_android#view#MenuItem_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setIconTintList_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#view#MenuItem#setIconTintList_E@ to this item's icon. The default mode is @B_android#graphics#BlendMode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public MenuItem setIconTintBlendMode (BlendMode blendMode)"}, "getActionView()": {"Returns": [["@B_android#view#View_E@", "This item's action view"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setActionView_E@", "@B_android#view#MenuItem#setShowAsAction_E@"], "Permissions": [], "Description": "Returns the currently set action view for this menu item.", "history": "Added in API level 11", "FullName": "public abstract View getActionView ()"}, "setTitleCondensed(java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text to be displayed as the condensed title."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the condensed title associated with this item. The condensed title is used in situations where the normal title may be too long to be displayed.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setTitleCondensed (CharSequence title)"}, "isEnabled()": {"Returns": [["boolean", "If true the item is enabled and hence invokable; else it is not."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the enabled state of the menu item.", "history": "Added in API level 1", "FullName": "public abstract boolean isEnabled ()"}, "setShortcut(char, char)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["char", "char: The numeric shortcut key. This is the shortcut when using a numeric (e.g., 12-key) keyboard."], ["char", "char: The alphabetic shortcut key. This is the shortcut when using a keyboard with alphabetic keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change both the numeric and alphabetic shortcut associated with this item. Note that the shortcut will be triggered when the key that generates the given character is pressed along with the corresponding modifier key. The default modifier is @B_android#view#KeyEvent#META_CTRL_ON_E@ in case nothing is specified. Also note that case is not significant and that alphabetic shortcut characters will be handled in lower case. See @B_android#view#Menu_E@ for the menu types that support shortcuts.", "history": "added in API level 1", "FullName": "public abstract MenuItem setShortcut (char numericChar, char alphaChar)"}, "collapseActionView()": {"Returns": [["boolean", "true if the action view was collapsed, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Collapse the action view associated with this menu item. The menu item must have an action view set, as well as the showAsAction flag @B_android#view#MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW_E@. If a listener has been set using @B_android#view#MenuItem#setOnActionExpandListener_E@ it will have its @B_android#view#MenuItem#OnActionExpandListener#onMenuItemActionCollapse_E@ method invoked. The listener may return false from this method to prevent collapsing the action view.", "history": "Added in API level 14", "FullName": "public abstract boolean collapseActionView ()"}, "isActionViewExpanded()": {"Returns": [["boolean", "true if the item's action view is expanded, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#expandActionView_E@", "@B_android#view#MenuItem#collapseActionView_E@", "@B_android#view#MenuItem_E@", "@B_android#view#MenuItem#OnActionExpandListener_E@"], "Permissions": [], "Description": "Returns true if this menu item's action view has been expanded.", "history": "Added in API level 14", "FullName": "public abstract boolean isActionViewExpanded ()"}, "getTitleCondensed()": {"Returns": [["@B_java#lang#CharSequence_E@", "The condensed title, if it exists. Otherwise the normal title."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current condensed title of the item. If a condensed title was never set, it will return the normal title.", "history": "Added in API level 1", "FullName": "public abstract CharSequence getTitleCondensed ()"}, "setIcon(int)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["int", "int: The new icon (as a resource ID) to be displayed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the icon associated with this item. This icon will not always be shown, so the title should be sufficient in describing this item. See @B_android#view#Menu_E@ for the menu types that support icons. This method will set the resource ID of the icon which will be used to lazily get the Drawable when this item is being shown.", "history": "Added in API level 1", "FullName": "public abstract MenuItem setIcon (int iconRes)"}, "setVisible(boolean)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["boolean", "boolean: If true then the item will be visible; if false it is hidden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visibility of the menu item. Even if a menu item is not visible, it may still be invoked via its shortcut (to completely disable an item, set it to invisible and @B_android#view#MenuItem#setEnabled_E@).", "history": "Added in API level 1", "FullName": "public abstract MenuItem setVisible (boolean visible)"}, "setActionProvider(android.view.ActionProvider)": {"Returns": [["@B_android#view#MenuItem_E@", "This Item so additional setters can be called."]], "Parameters": [["@B_android#view#ActionProvider_E@", "ActionProvider: The action provider."]], "Throws": [], "SeeAlso": ["@B_android#view#ActionProvider_E@"], "Permissions": [], "Description": "Sets the @B_android#view#ActionProvider_E@ responsible for creating an action view if the item is placed on the action bar. The provider also provides a default action invoked if the item is placed in the overflow menu. @B_android#view#MenuItem#setActionView_E@ or @B_android#view#MenuItem#setActionView_E@.", "history": "Added in API level 14", "FullName": "public abstract MenuItem setActionProvider (ActionProvider actionProvider)"}}, "Inheritance": [], "ClassName": "android.view.MenuItem", "ClassDesc": "Interface for direct access to a previously created menu item. An Item is returned by calling one of the @B_android#view#Menu#add_E@ methods. For a feature set of specific menu types, see @B_android#view#Menu_E@."}