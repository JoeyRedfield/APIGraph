{"Functions": {"tryConvertToWriteLock(long)": {"Returns": [["long", "a valid write stamp, or zero on failure"]], "Parameters": [["long", "long: a stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp, atomically performs one of the following actions. If the stamp represents holding a write lock, returns it. Or, if a read lock, if the write lock is available, releases the read lock and returns a write stamp. Or, if an optimistic read, returns a write stamp only if immediately available. This method returns zero in all other cases.", "history": "Added in API level 24", "FullName": "public long tryConvertToWriteLock (long stamp)"}, "unlockWrite(long)": {"Returns": [], "Parameters": [["long", "long: a stamp returned by a write-lock operation"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the stamp does not match the current state of this lock"]], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp, releases the exclusive lock.", "history": "Added in API level 24", "FullName": "public void unlockWrite (long stamp)"}, "tryConvertToOptimisticRead(long)": {"Returns": [["long", "a valid optimistic read stamp, or zero on failure"]], "Parameters": [["long", "long: a stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp then, atomically, if the stamp represents holding a lock, releases it and returns an observation stamp. Or, if an optimistic read, returns it if validated. This method returns zero in all other cases, and so may be useful as a form of \"tryUnlock\".", "history": "Added in API level 24", "FullName": "public long tryConvertToOptimisticRead (long stamp)"}, "tryWriteLock(long,java.util.concurrent.TimeUnit)": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [["long", "long: the maximum time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "Added in API level 24", "FullName": "public long tryWriteLock (long time, TimeUnit unit)"}, "asReadLock()": {"Returns": [["@B_java#util#concurrent#locks#Lock_E@", "the lock"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain @B_java#util#concurrent#locks#Lock_E@ view of this StampedLock in which the @B_java#util#concurrent#locks#Lock#lock_E@ method is mapped to @B_java#util#concurrent#locks#StampedLock#readLock_E@, and similarly for other methods. The returned Lock does not support a @B_java#util#concurrent#locks#Condition_E@; method @B_java#util#concurrent#locks#Lock#newCondition_E@ throws UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public Lock asReadLock ()"}, "writeLockInterruptibly()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted. Behavior under interruption matches that specified for method @B_java#util#concurrent#locks#Lock#lockInterruptibly_E@.", "history": "Added in API level 24", "FullName": "public long writeLockInterruptibly ()"}, "tryUnlockRead()": {"Returns": [["boolean", "true if the read lock was held, else false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases one hold of the read lock if it is held, without requiring a stamp value. This method may be useful for recovery after errors.", "history": "Added in API level 24", "FullName": "public boolean tryUnlockRead ()"}, "StampedLock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new lock, initially in unlocked state.", "history": "Added in API level 24", "FullName": "public StampedLock ()"}, "tryReadLock(long,java.util.concurrent.TimeUnit)": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [["long", "long: the maximum time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "Added in API level 24", "FullName": "public long tryReadLock (long time, TimeUnit unit)"}, "unlockRead(long)": {"Returns": [], "Parameters": [["long", "long: a stamp returned by a read-lock operation"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the stamp does not match the current state of this lock"]], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp, releases the non-exclusive lock.", "history": "Added in API level 24", "FullName": "public void unlockRead (long stamp)"}, "getReadLockCount()": {"Returns": [["int", "the number of read locks held"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the number of read locks held for this lock. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 24", "FullName": "public int getReadLockCount ()"}, "readLockInterruptibly()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted. Behavior under interruption matches that specified for method @B_java#util#concurrent#locks#Lock#lockInterruptibly_E@.", "history": "Added in API level 24", "FullName": "public long readLockInterruptibly ()"}, "readLock()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Non-exclusively acquires the lock, blocking if necessary until available.", "history": "Added in API level 24", "FullName": "public long readLock ()"}, "tryOptimisticRead()": {"Returns": [["long", "a stamp, or zero if exclusively locked"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stamp that can later be validated, or zero if exclusively locked.", "history": "Added in API level 24", "FullName": "public long tryOptimisticRead ()"}, "isWriteLocked()": {"Returns": [["boolean", "true if the lock is currently held exclusively"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the lock is currently held exclusively.", "history": "Added in API level 24", "FullName": "public boolean isWriteLocked ()"}, "writeLock()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Exclusively acquires the lock, blocking if necessary until available.", "history": "Added in API level 24", "FullName": "public long writeLock ()"}, "tryConvertToReadLock(long)": {"Returns": [["long", "a valid read stamp, or zero on failure"]], "Parameters": [["long", "long: a stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp, atomically performs one of the following actions. If the stamp represents holding a write lock, releases it and obtains a read lock. Or, if a read lock, returns it. Or, if an optimistic read, acquires a read lock and returns a read stamp only if immediately available. This method returns zero in all other cases.", "history": "Added in API level 24", "FullName": "public long tryConvertToReadLock (long stamp)"}, "unlock(long)": {"Returns": [], "Parameters": [["long", "long: a stamp returned by a lock operation"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the stamp does not match the current state of this lock"]], "SeeAlso": [], "Permissions": [], "Description": "If the lock state matches the given stamp, releases the corresponding mode of the lock.", "history": "Added in API level 24", "FullName": "public void unlock (long stamp)"}, "tryWriteLock(long, java.util.concurrent.TimeUnit)": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [["long", "long: the maximum time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "added in API level 24", "FullName": "public long tryWriteLock (long time, TimeUnit unit)"}, "asReadWriteLock()": {"Returns": [["@B_java#util#concurrent#locks#ReadWriteLock_E@", "the lock"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#locks#ReadWriteLock_E@ view of this StampedLock in which the @B_java#util#concurrent#locks#ReadWriteLock#readLock_E@ method is mapped to @B_java#util#concurrent#locks#StampedLock#asReadLock_E@, and @B_java#util#concurrent#locks#ReadWriteLock#writeLock_E@ to @B_java#util#concurrent#locks#StampedLock#asWriteLock_E@.", "history": "Added in API level 24", "FullName": "public ReadWriteLock asReadWriteLock ()"}, "tryReadLock(long, java.util.concurrent.TimeUnit)": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [["long", "long: the maximum time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the time argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted before acquiring the lock"]], "SeeAlso": [], "Permissions": [], "Description": "Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method @B_java#util#concurrent#locks#Lock#tryLock_E@.", "history": "added in API level 24", "FullName": "public long tryReadLock (long time, TimeUnit unit)"}, "asWriteLock()": {"Returns": [["@B_java#util#concurrent#locks#Lock_E@", "the lock"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain @B_java#util#concurrent#locks#Lock_E@ view of this StampedLock in which the @B_java#util#concurrent#locks#Lock#lock_E@ method is mapped to @B_java#util#concurrent#locks#StampedLock#writeLock_E@, and similarly for other methods. The returned Lock does not support a @B_java#util#concurrent#locks#Condition_E@; method @B_java#util#concurrent#locks#Lock#newCondition_E@ throws UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public Lock asWriteLock ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this lock, as well as its lock state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String \"Unlocked\" or the String \"Write-locked\" or the String \"Read-locks:\" followed by the current number of read-locks held.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "isReadLocked()": {"Returns": [["boolean", "true if the lock is currently held non-exclusively"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the lock is currently held non-exclusively.", "history": "Added in API level 24", "FullName": "public boolean isReadLocked ()"}, "tryWriteLock()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Exclusively acquires the lock if it is immediately available.", "history": "Added in API level 24", "FullName": "public long tryWriteLock ()"}, "validate(long)": {"Returns": [["boolean", "true if the lock has not been exclusively acquired since issuance of the given stamp; else false"]], "Parameters": [["long", "long: a stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the lock has not been exclusively acquired since issuance of the given stamp. Always returns false if the stamp is zero. Always returns true if the stamp represents a currently held lock. Invoking this method with a value not obtained from @B_java#util#concurrent#locks#StampedLock#tryOptimisticRead_E@ or a locking method for this lock has no defined effect or result.", "history": "Added in API level 24", "FullName": "public boolean validate (long stamp)"}, "tryUnlockWrite()": {"Returns": [["boolean", "true if the lock was held, else false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the write lock if it is held, without requiring a stamp value. This method may be useful for recovery after errors.", "history": "Added in API level 24", "FullName": "public boolean tryUnlockWrite ()"}, "tryReadLock()": {"Returns": [["long", "a stamp that can be used to unlock or convert mode, or zero if the lock is not available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Non-exclusively acquires the lock if it is immediately available.", "history": "Added in API level 24", "FullName": "public long tryReadLock ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.StampedLock", "ClassDesc": "A capability-based lock with three modes for controlling read/write access. The state of a StampedLock consists of a version and mode. Lock acquisition methods return a stamp that represents and controls access with respect to a lock state; \"try\" versions of these methods may instead return the special value zero to represent failure to acquire access. Lock release and conversion methods require stamps as arguments, and fail if they do not match the state of the lock. The three modes are: @B_java#util#concurrent#locks#StampedLock#writeLock_E@ possibly blocks waiting for exclusive access, returning a stamp that can be used in method @B_java#util#concurrent#locks#StampedLock#unlockWrite_E@ to release the lock. Untimed and timed versions of tryWriteLock are also provided. When the lock is held in write mode, no read locks may be obtained, and all optimistic read validations will fail. @B_java#util#concurrent#locks#StampedLock#readLock_E@ possibly blocks waiting for non-exclusive access, returning a stamp that can be used in method @B_java#util#concurrent#locks#StampedLock#unlockRead_E@ to release the lock. Untimed and timed versions of tryReadLock are also provided. @B_java#util#concurrent#locks#StampedLock#tryOptimisticRead_E@ returns a non-zero stamp only if the lock is not currently held in write mode. Method @B_java#util#concurrent#locks#StampedLock#validate_E@ returns true if the lock has not been acquired in write mode since obtaining a given stamp. This mode can be thought of as an extremely weak version of a read-lock, that can be broken by a writer at any time. The use of optimistic mode for short read-only code segments often reduces contention and improves throughput. However, its use is inherently fragile. Optimistic read sections should only read fields and hold them in local variables for later use after validation. Fields read while in optimistic mode may be wildly inconsistent, so usage applies only when you are familiar enough with data representations to check consistency and/or repeatedly invoke method validate(). For example, such steps are typically required when first reading an object or array reference, and then accessing one of its fields, elements or methods. This class also supports methods that conditionally provide conversions across the three modes. For example, method @B_java#util#concurrent#locks#StampedLock#tryConvertToWriteLock_E@ attempts to \"upgrade\" a mode, returning a valid write stamp if (1) already in writing mode (2) in reading mode and there are no other readers or (3) in optimistic mode and the lock is available. The forms of these methods are designed to help reduce some of the code bloat that otherwise occurs in retry-based designs. StampedLocks are designed for use as internal utilities in the development of thread-safe components. Their use relies on knowledge of the internal properties of the data, objects, and methods they are protecting. They are not reentrant, so locked bodies should not call other unknown methods that may try to re-acquire locks (although you may pass a stamp to other methods that can use or convert it). The use of read lock modes relies on the associated code sections being side-effect-free. Unvalidated optimistic read sections cannot call methods that are not known to tolerate potential inconsistencies. Stamps use finite representations, and are not cryptographically secure (i.e., a valid stamp may be guessable). Stamp values may recycle after (no sooner than) one year of continuous operation. A stamp held without use or validation for longer than this period may fail to validate correctly. StampedLocks are serializable, but always deserialize into initial unlocked state, so they are not useful for remote locking. The scheduling policy of StampedLock does not consistently prefer readers over writers or vice versa. All \"try\" methods are best-effort and do not necessarily conform to any scheduling or fairness policy. A zero return from any \"try\" method for acquiring or converting locks does not carry any information about the state of the lock; a subsequent invocation may succeed. Because it supports coordinated usage across multiple lock modes, this class does not directly implement the @B_java#util#concurrent#locks#Lock_E@ or @B_java#util#concurrent#locks#ReadWriteLock_E@ interfaces. However, a StampedLock may be viewed @B_java#util#concurrent#locks#StampedLock#asReadLock_E@, @B_java#util#concurrent#locks#StampedLock#asWriteLock_E@, or @B_java#util#concurrent#locks#StampedLock#asReadWriteLock_E@ in applications requiring only the associated set of functionality."}