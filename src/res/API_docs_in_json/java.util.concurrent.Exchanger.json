{"Functions": {"exchange(V,long,java.util.concurrent.TimeUnit)": {"Returns": [["V", "the object provided by the other thread"]], "Parameters": [["V", "V: the object to exchange"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the specified waiting time elapses before another thread enters the exchange"]], "SeeAlso": [], "Permissions": [], "Description": "Waits for another thread to arrive at this exchange point (unless the current thread is If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread enters the exchange; or Some other thread The specified waiting time elapses. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then @B_java#util#concurrent#TimeoutException_E@ is thrown. If the time is less than or equal to zero, the method will not wait at all.", "history": "Added in API level 1", "FullName": "public V exchange (V x, long timeout, TimeUnit unit)"}, "exchange(V)": {"Returns": [["V", "the object provided by the other thread"]], "Parameters": [["V", "V: the object to exchange"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Waits for another thread to arrive at this exchange point (unless the current thread is If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread enters the exchange; or Some other thread If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared.", "history": "Added in API level 1", "FullName": "public V exchange (V x)"}, "exchange(V, long, java.util.concurrent.TimeUnit)": {"Returns": [["V", "the object provided by the other thread"]], "Parameters": [["V", "V: the object to exchange"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the specified waiting time elapses before another thread enters the exchange"]], "SeeAlso": [], "Permissions": [], "Description": "Waits for another thread to arrive at this exchange point (unless the current thread is If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread enters the exchange; or Some other thread The specified waiting time elapses. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then @B_java#util#concurrent#TimeoutException_E@ is thrown. If the time is less than or equal to zero, the method will not wait at all.", "history": "added in API level 1", "FullName": "public V exchange (V x, long timeout, TimeUnit unit)"}, "Exchanger()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Exchanger.", "history": "Added in API level 1", "FullName": "public Exchanger ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.Exchanger<V>", "ClassDesc": "A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the @B_java#util#concurrent#Exchanger#exchange_E@ method, matches with a partner thread, and receives its partner's object on return. An Exchanger may be viewed as a bidirectional form of a @B_java#util#concurrent#SynchronousQueue_E@. Exchangers may be useful in applications such as genetic algorithms and pipeline designs. Exchanger to swap buffers between threads so that the thread filling the buffer gets a freshly emptied one when it needs it, handing off the filled one to the thread emptying the buffer. Memory consistency effects: For each pair of threads that successfully exchange objects via an Exchanger, actions prior to the exchange() in each thread exchange() in the other thread."}