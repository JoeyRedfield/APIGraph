{"Functions": {"toURI()": {"Returns": [["@B_java#net#URI_E@", "An absolute, hierarchical URI with a scheme equal to \"file\", a path representing this abstract pathname, and undefined authority, query, and fragment components"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a required system property value cannot be accessed."]], "SeeAlso": ["@B_java#io#File#File_E@", "@B_java#net_E@", "@B_java#net#URI#toURL_E@"], "Permissions": [], "Description": "Constructs a The exact form of the URI is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URI will end with a slash. For a given abstract pathname Note that when this abstract pathname represents a UNC pathname then all components of the UNC (including the server name component) are encoded in the URI path. The authority component is undefined, meaning that it is represented as null. The @B_java#nio#file#Path_E@ class defines the @B_java#nio#file#Path#toUri_E@ method to encode the server name in the authority component of the resulting URI. The @B_java#io#File#toPath_E@ method may be used to obtain a Path representing this abstract pathname.", "history": "Added in API level 1", "FullName": "public URI toURI ()"}, "getTotalSpace()": {"Returns": [["long", "The size, in bytes, of the partition or 0L if this abstract pathname does not name a partition"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"getFileSystemAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file named by this abstract pathname"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the partition", "history": "Added in API level 9", "FullName": "public long getTotalSpace ()"}, "setWritable(boolean,boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow write operations; if false to disallow write operations"], ["boolean", "boolean: If true, the write permission applies only to the owner's write permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's write permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the named file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's write permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "Added in API level 9", "FullName": "public boolean setWritable (boolean writable, boolean ownerOnly)"}, "File(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The parent pathname string"], ["@B_java#lang#String_E@", "String: The child pathname string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If child is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new File instance from a parent pathname string and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent pathname string is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty string then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.", "history": "Added in API level 1", "FullName": "public File (String parent, String child)"}, "lastModified()": {"Returns": [["long", "A long value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or 0L if the file does not exist or if an I/O error occurs"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the time that the file denoted by this abstract pathname was last modified. Where it is required to distinguish an I/O exception from the case where 0L is returned, or where several attributes of the same file are required at the same time, or where the time of last access or the creation time are required, then the @B_java#nio#file#Files#readAttributes_E@ method may be used.", "history": "Added in API level 1", "FullName": "public long lastModified ()"}, "getParentFile()": {"Returns": [["@B_java#io#File_E@", "The abstract pathname of the parent directory named by this abstract pathname, or null if this pathname does not name a parent"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory. The parent of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.", "history": "Added in API level 1", "FullName": "public File getParentFile ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if and only if the objects are the same; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to be compared with this abstract pathname"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests this abstract pathname for equality with the given object. Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname. Whether or not two abstract pathnames are equal depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getUsableSpace()": {"Returns": [["long", "The number of available bytes on the partition or 0L if the abstract pathname does not name a partition. On systems where this information is not available, this method will be equivalent to a call to @B_java#io#File#getFreeSpace_E@."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"getFileSystemAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file named by this abstract pathname"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes available to this virtual machine on the partition @B_java#io#File#getFreeSpace_E@. The returned number of available bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after this call. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine. This method makes no guarantee that write operations to this file system will succeed. On Android (and other Unix-based systems), this method returns the number of free bytes available to non-root users, regardless of whether you're actually running as root, and regardless of any quota or other restrictions that might apply to the user. (The getFreeSpace method returns the number of bytes potentially available to root.)", "history": "Added in API level 9", "FullName": "public long getUsableSpace ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The name of the file or directory denoted by this abstract pathname, or the empty string if this pathname's name sequence is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the file or directory denoted by this abstract pathname. This is just the last name in the pathname's name sequence. If the pathname's name sequence is empty, then the empty string is returned.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "A hash code for this abstract pathname"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes a hash code for this abstract pathname. Because equality of abstract pathnames is inherently system-dependent, so is the computation of their hash codes. On UNIX systems, the hash code of an abstract pathname is equal to the exclusive or of the hash code of its pathname string and the decimal value 1234321. On Microsoft Windows systems, the hash code is equal to the exclusive or of the hash code of its pathname string converted to lower case and the decimal value 1234321. Locale is not taken into account on lowercasing the pathname string.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "isHidden()": {"Returns": [["boolean", "true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the file named by this abstract pathname is a hidden file. The exact definition of hidden is system-dependent. On UNIX systems, a file is considered to be hidden if its name begins with a period character ('.'). On Microsoft Windows systems, a file is considered to be hidden if it has been marked as such in the filesystem.", "history": "Added in API level 1", "FullName": "public boolean isHidden ()"}, "File(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The parent abstract pathname"], ["@B_java#lang#String_E@", "String: The child pathname string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If child is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new File instance from a parent abstract pathname and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent abstract pathname is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty abstract pathname then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.", "history": "added in API level 1", "FullName": "public File (File parent, String child)"}, "File(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The parent abstract pathname"], ["@B_java#lang#String_E@", "String: The child pathname string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If child is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new File instance from a parent abstract pathname and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent abstract pathname is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty abstract pathname then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.", "history": "Added in API level 1", "FullName": "public File (File parent, String child)"}, "getCanonicalPath()": {"Returns": [["@B_java#lang#String_E@", "The canonical pathname string denoting the same file or directory as this abstract pathname"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs, which is possible because the construction of the canonical pathname may require filesystem queries"], ["@B_java#lang#SecurityException_E@", "If a required system property value cannot be accessed, or if a security manager exists and its SecurityManager.checkRead(FileDescriptor) method denies read access to the file"]], "SeeAlso": ["@B_java#nio#file#Path#toRealPath_E@"], "Permissions": [], "Description": "Returns the canonical pathname string of this abstract pathname. A canonical pathname is both absolute and unique. The precise definition of canonical form is system-dependent. This method first converts this pathname to absolute form if necessary, as if by invoking the @B_java#io#File#getAbsolutePath_E@ method, and then maps it to its unique form in a system-dependent way. This typically involves removing redundant names such as Every pathname that denotes an existing file or directory has a unique canonical form. Every pathname that denotes a nonexistent file or directory also has a unique canonical form. The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created. Similarly, the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is deleted.", "history": "Added in API level 1", "FullName": "public String getCanonicalPath ()"}, "File(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A pathname string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the pathname argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new File instance by converting the given pathname string into an abstract pathname. If the given string is the empty string, then the result is the empty abstract pathname.", "history": "Added in API level 1", "FullName": "public File (String pathname)"}, "getFreeSpace()": {"Returns": [["long", "The number of unallocated bytes on the partition or 0L if the abstract pathname does not name a partition. This value will be less than or equal to the total file system size returned by @B_java#io#File#getTotalSpace_E@."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"getFileSystemAttributes\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file named by this abstract pathname"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of unallocated bytes in the partition The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after this call. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine. This method makes no guarantee that write operations to this file system will succeed.", "history": "Added in API level 9", "FullName": "public long getFreeSpace ()"}, "getAbsoluteFile()": {"Returns": [["@B_java#io#File_E@", "The absolute abstract pathname denoting the same file or directory as this abstract pathname"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a required system property value cannot be accessed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute form of this abstract pathname. Equivalent to new File(this.getAbsolutePath()).", "history": "Added in API level 1", "FullName": "public File getAbsoluteFile ()"}, "canWrite()": {"Returns": [["boolean", "true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file; false otherwise."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the application can modify the file denoted by this abstract pathname.", "history": "Added in API level 1", "FullName": "public boolean canWrite ()"}, "listRoots()": {"Returns": [["@B_java#io#File_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the file system roots. On Android and other Unix systems, there is a single root, /.", "history": "Added in API level 1", "FullName": "public static File[] listRoots ()"}, "setLastModified(long)": {"Returns": [["boolean", "true if and only if the operation succeeded; false otherwise"]], "Parameters": [["long", "long: The new last-modified time, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the argument is negative"], ["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the named file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the last-modified time of the file or directory named by this abstract pathname. All platforms support file-modification times to the nearest second, but some provide more precision. The argument will be truncated to fit the supported precision. If the operation succeeds and no intervening operations on the file take place, then the next invocation of the lastModified() method will return the (possibly truncated) time argument that was passed to this method.", "history": "Added in API level 1", "FullName": "public boolean setLastModified (long time)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The string form of this abstract pathname"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pathname string of this abstract pathname. This is just the string returned by the getPath() method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "listFiles(java.io.FilenameFilter)": {"Returns": [["@B_java#io#File_E@", "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."]], "Parameters": [["@B_java#io#FilenameFilter_E@", "FilenameFilter: A filename filter"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the directory"]], "SeeAlso": ["@B_java#nio#file#Files#newDirectoryStream_E@"], "Permissions": [], "Description": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the @B_java#io#File#listFiles_E@ method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the @B_java#io#FilenameFilter#accept_E@ method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.", "history": "Added in API level 1", "FullName": "public File[] listFiles (FilenameFilter filter)"}, "File(java.net.URI)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: An absolute, hierarchical URI with a scheme equal to \"file\", a non-empty path component, and undefined authority, query, and fragment components"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If uri is null"], ["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameter do not hold"]], "SeeAlso": ["@B_java#io#File#toURI_E@", "@B_java#net_E@"], "Permissions": [], "Description": "Creates a new The exact form of a For a given abstract pathname", "history": "Added in API level 1", "FullName": "public File (URI uri)"}, "setReadable(boolean,boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow read operations; if false to disallow read operations"], ["boolean", "boolean: If true, the read permission applies only to the owner's read permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's read permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's read permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "Added in API level 9", "FullName": "public boolean setReadable (boolean readable, boolean ownerOnly)"}, "mkdirs()": {"Returns": [["boolean", "true if and only if the directory was created, along with all necessary parent directories; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method does not permit verification of the existence of the named directory and all necessary parent directories; or if the SecurityManager.checkWrite(java.lang.String) method does not permit the named directory and all necessary parent directories to be created"]], "SeeAlso": [], "Permissions": [], "Description": "Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. Note that if this operation fails it may have succeeded in creating some of the necessary parent directories.", "history": "Added in API level 1", "FullName": "public boolean mkdirs ()"}, "length()": {"Returns": [["long", "The length, in bytes, of the file denoted by this abstract pathname, or 0L if the file does not exist. Some operating systems may return 0L for pathnames denoting system-dependent entities such as devices or pipes."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the file denoted by this abstract pathname. The return value is unspecified if this pathname denotes a directory. Where it is required to distinguish an I/O exception from the case that 0L is returned, or where several attributes of the same file are required at the same time, then the @B_java#nio#file#Files#readAttributes_E@ method may be used.", "history": "Added in API level 1", "FullName": "public long length ()"}, "setExecutable(boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If executable is false and the underlying file system does not implement an execute permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow execute operations; if false to disallow execute operations"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to set the owner's execute permission for this abstract pathname. An invocation of this method of the form", "history": "Added in API level 9", "FullName": "public boolean setExecutable (boolean executable)"}, "getCanonicalFile()": {"Returns": [["@B_java#io#File_E@", "The canonical pathname string denoting the same file or directory as this abstract pathname"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs, which is possible because the construction of the canonical pathname may require filesystem queries"], ["@B_java#lang#SecurityException_E@", "If a required system property value cannot be accessed, or if a security manager exists and its SecurityManager.checkRead(FileDescriptor) method denies read access to the file"]], "SeeAlso": ["@B_java#nio#file#Path#toRealPath_E@"], "Permissions": [], "Description": "Returns the canonical form of this abstract pathname. Equivalent to new File(this.getCanonicalPath()).", "history": "Added in API level 1", "FullName": "public File getCanonicalFile ()"}, "setExecutable(boolean,boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If executable is false and the underlying file system does not implement an execute permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow execute operations; if false to disallow execute operations"], ["boolean", "boolean: If true, the execute permission applies only to the owner's execute permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's execute permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's execute permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "Added in API level 9", "FullName": "public boolean setExecutable (boolean executable, boolean ownerOnly)"}, "createTempFile(java.lang.String,java.lang.String)": {"Returns": [["@B_java#io#File_E@", "An abstract pathname denoting a newly-created empty file"]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix string to be used in generating the file's name; must be at least three characters long"], ["@B_java#lang#String_E@", "String: The suffix string to be used in generating the file's name; may be null, in which case the suffix \".tmp\" will be used"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the prefix argument contains fewer than three characters"], ["@B_java#io#IOException_E@", "If a file could not be created"], ["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method does not allow a file to be created"]], "SeeAlso": ["@B_java#nio#file#Files#createTempDirectory_E@"], "Permissions": [], "Description": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. Invoking this method is equivalent to invoking createTempFile(prefix, suffix, null). The @B_java#nio#file#Files#createTempFile_E@ method provides an alternative method to create an empty file in the temporary-file directory. Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.", "history": "Added in API level 1", "FullName": "public static File createTempFile (String prefix, String suffix)"}, "getPath()": {"Returns": [["@B_java#lang#String_E@", "The string form of this abstract pathname"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this abstract pathname into a pathname string. The resulting string uses the @B_java#io#File#separator_E@ to separate the names in the name sequence.", "history": "Added in API level 1", "FullName": "public String getPath ()"}, "File(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The parent pathname string"], ["@B_java#lang#String_E@", "String: The child pathname string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If child is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new File instance from a parent pathname string and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent pathname string is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty string then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.", "history": "added in API level 1", "FullName": "public File (String parent, String child)"}, "createTempFile(java.lang.String,java.lang.String,java.io.File)": {"Returns": [["@B_java#io#File_E@", "An abstract pathname denoting a newly-created empty file"]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix string to be used in generating the file's name; must be at least three characters long"], ["@B_java#lang#String_E@", "String: The suffix string to be used in generating the file's name; may be null, in which case the suffix \".tmp\" will be used"], ["@B_java#io#File_E@", "File: The directory in which the file is to be created, or null if the default temporary-file directory is to be used"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the prefix argument contains fewer than three characters"], ["@B_java#io#IOException_E@", "If a file could not be created"], ["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method does not allow a file to be created"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. If this method returns successfully then it is guaranteed that: deleteOnExit() method. The prefix argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as \"hjb\" or \"mail\". The suffix argument may be null, in which case the suffix \".tmp\" will be used. To create the new file, the prefix and the suffix may first be adjusted to fit the limitations of the underlying platform. If the prefix is too long then it will be truncated, but its first three characters will always be preserved. If the suffix is too long then it too will be truncated, but if it begins with a period character ('.') then the period and the first three characters following it will always be preserved. Once these adjustments have been made the name of the new file will be generated by concatenating the prefix, five or more internally-generated characters, and the suffix. If the directory argument is null then the system-dependent default temporary-file directory will be used. The default temporary-file directory is specified by the system property java.io.tmpdir. On UNIX systems the default value of this property is typically \"/tmp\" or \"/var/tmp\"; on Microsoft Windows systems it is typically \"C:\\\\WINNT\\\\TEMP\". A different value may be given to this system property when the Java virtual machine is invoked, but programmatic changes to this property are not guaranteed to have any effect upon the temporary directory used by this method.", "history": "Added in API level 1", "FullName": "public static File createTempFile (String prefix, String suffix, File directory)"}, "compareTo(java.io.File)": {"Returns": [["int", "Zero if the argument is equal to this abstract pathname, a value less than zero if this abstract pathname is lexicographically less than the argument, or a value greater than zero if this abstract pathname is lexicographically greater than the argument"]], "Parameters": [["@B_java#io#File_E@", "File: The abstract pathname to be compared to this abstract pathname"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two abstract pathnames lexicographically. The ordering defined by this method depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not.", "history": "Added in API level 1", "FullName": "public int compareTo (File pathname)"}, "getParent()": {"Returns": [["@B_java#lang#String_E@", "The pathname string of the parent directory named by this abstract pathname, or null if this pathname does not name a parent"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory. The parent of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.", "history": "Added in API level 1", "FullName": "public String getParent ()"}, "isDirectory()": {"Returns": [["boolean", "true if and only if the file denoted by this abstract pathname exists and is a directory; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the file denoted by this abstract pathname is a directory. Where it is required to distinguish an I/O exception from the case that the file is not a directory, or where several attributes of the same file are required at the same time, then the @B_java#nio#file#Files#readAttributes_E@ method may be used.", "history": "Added in API level 1", "FullName": "public boolean isDirectory ()"}, "toURL()": {"Returns": [["@B_java#net#URL_E@", "A URL object representing the equivalent file URL"]], "Parameters": [], "Throws": [["@B_java#net#MalformedURLException_E@", "If the path cannot be parsed as a URL"]], "SeeAlso": ["@B_java#io#File#toURI_E@", "@B_java#net_E@", "@B_java#net#URI#toURL_E@"], "Permissions": [], "Description": "This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the @B_java#io#File#toURI_E@ method, and then converting the URI into a URL via the @B_java#net#URI#toURL_E@ method. Converts this abstract pathname into a file: URL. The exact form of the URL is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URL will end with a slash.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public URL toURL ()"}, "setReadable(boolean, boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow read operations; if false to disallow read operations"], ["boolean", "boolean: If true, the read permission applies only to the owner's read permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's read permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's read permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "added in API level 9", "FullName": "public boolean setReadable (boolean readable, boolean ownerOnly)"}, "setWritable(boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow write operations; if false to disallow write operations"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to set the owner's write permission for this abstract pathname. An invocation of this method of the form", "history": "Added in API level 9", "FullName": "public boolean setWritable (boolean writable)"}, "canRead()": {"Returns": [["boolean", "true if and only if the file specified by this abstract pathname exists and can be read by the application; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the application can read the file denoted by this abstract pathname.", "history": "Added in API level 1", "FullName": "public boolean canRead ()"}, "setWritable(boolean, boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow write operations; if false to disallow write operations"], ["boolean", "boolean: If true, the write permission applies only to the owner's write permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's write permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the named file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's write permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "added in API level 9", "FullName": "public boolean setWritable (boolean writable, boolean ownerOnly)"}, "renameTo(java.io.File)": {"Returns": [["boolean", "true if and only if the renaming succeeded; false otherwise"]], "Parameters": [["@B_java#io#File_E@", "File: The new abstract pathname for the named file"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to either the old or new pathnames"], ["@B_java#lang#NullPointerException_E@", "If parameter dest is null"]], "SeeAlso": [], "Permissions": [], "Description": "Renames the file denoted by this abstract pathname. Many failures are possible. Some of the more likely failures include: Write permission is required on the directories containing both the source and destination paths. Search permission is required for all parents of both paths. Both paths be on the same mount point. On Android, applications are most likely to hit this restriction when attempting to copy between internal storage and an SD card. The return value should always be checked to make sure that the rename operation was successful. Note that the @B_java#nio#file#Files_E@ class defines the @B_java#nio#file#Files#move_E@ method to move or rename a file in a platform independent manner.", "history": "Added in API level 1", "FullName": "public boolean renameTo (File dest)"}, "getAbsolutePath()": {"Returns": [["@B_java#lang#String_E@", "The absolute pathname string denoting the same file or directory as this abstract pathname"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#File#isAbsolute_E@"], "Permissions": [], "Description": "Returns the absolute path of this file. An absolute path is a path that starts at a root of the file system. On Android, there is only one root: /. A common use for absolute paths is when passing paths to a Process as command-line arguments, to remove the requirement implied by relative paths, that the child must have the same working directory as its parent.", "history": "Added in API level 1", "FullName": "public String getAbsolutePath ()"}, "deleteOnExit()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkDelete(String) method denies delete access to the file"]], "SeeAlso": ["@B_java#io#File#delete_E@"], "Permissions": [], "Description": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates. Files (or directories) are deleted in the reverse order that they are registered. Invoking this method to delete a file or directory that is already registered for deletion has no effect. Deletion will be attempted only for normal termination of the virtual machine, as defined by the Java Language Specification. Once deletion has been requested, it is not possible to cancel the request. This method should therefore be used with care. Note: this method should @B_java#nio#channels#FileLock_E@ facility should be used instead. Use a finally clause to manually invoke @B_java#io#File#delete_E@. Maintain your own set of files to delete, and process it at an appropriate point in your application's lifecycle. Use the Unix trick of deleting the file as soon as all readers and writers have opened it. No new readers/writers will be able to access the file, but all existing ones will still have access until the last one closes the file.", "history": "Added in API level 1", "FullName": "public void deleteOnExit ()"}, "list()": {"Returns": [["@B_java#lang#String_E@", "An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the directory"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of strings is returned, one for each file or directory in the directory. Names denoting the directory itself and the directory's parent directory are not included in the result. Each string is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. Note that the @B_java#nio#file#Files_E@ class defines the @B_java#nio#file#Files#newDirectoryStream_E@ method to open a directory and iterate over the names of the files in the directory. This may use less resources when working with very large directories, and may be more responsive when working with remote directories.", "history": "Added in API level 1", "FullName": "public String[] list ()"}, "exists()": {"Returns": [["boolean", "true if and only if the file or directory denoted by this abstract pathname exists; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file or directory"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the file or directory denoted by this abstract pathname exists.", "history": "Added in API level 1", "FullName": "public boolean exists ()"}, "canExecute()": {"Returns": [["boolean", "true if and only if the abstract pathname exists and the application is allowed to execute the file"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkExec(java.lang.String) method denies execute access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the application can execute the file denoted by this abstract pathname.", "history": "Added in API level 9", "FullName": "public boolean canExecute ()"}, "mkdir()": {"Returns": [["boolean", "true if and only if the directory was created; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method does not permit the named directory to be created"]], "SeeAlso": [], "Permissions": [], "Description": "Creates the directory named by this abstract pathname.", "history": "Added in API level 1", "FullName": "public boolean mkdir ()"}, "createNewFile()": {"Returns": [["boolean", "true if the named file does not exist and was successfully created; false if the named file already exists"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurred"], ["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist. The check for the existence of the file and the creation of the file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the file. Note: this method should @B_java#nio#channels#FileLock_E@ facility should be used instead.", "history": "Added in API level 1", "FullName": "public boolean createNewFile ()"}, "toPath()": {"Returns": [["@B_java#nio#file#Path_E@", "a Path constructed from this abstract path"]], "Parameters": [], "Throws": [["@B_java#nio#file#InvalidPathException_E@", "if a Path object cannot be constructed from the abstract path (see @B_java#nio#file#FileSystem#getPath_E@)"]], "SeeAlso": ["@B_java#nio#file#Path#toFile_E@"], "Permissions": [], "Description": "Returns a @B_java#nio#file#Path_E@ object constructed from the this abstract path. The resulting Path is associated with the @B_java#nio#file#FileSystems#getDefault_E@. The first invocation of this method works as if invoking it were equivalent to evaluating the expression: Path. If this abstract pathname is the empty abstract pathname then this method returns a Path that may be used to access the current user directory.", "history": "Added in API level 26", "FullName": "public Path toPath ()"}, "isFile()": {"Returns": [["boolean", "true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. Any non-directory file created by a Java application is guaranteed to be a normal file. Where it is required to distinguish an I/O exception from the case that the file is not a normal file, or where several attributes of the same file are required at the same time, then the @B_java#nio#file#Files#readAttributes_E@ method may be used.", "history": "Added in API level 1", "FullName": "public boolean isFile ()"}, "list(java.io.FilenameFilter)": {"Returns": [["@B_java#lang#String_E@", "An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given filter. The array will be empty if the directory is empty or if no names were accepted by the filter. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."]], "Parameters": [["@B_java#io#FilenameFilter_E@", "FilenameFilter: A filename filter"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the directory"]], "SeeAlso": ["@B_java#nio#file#Files#newDirectoryStream_E@"], "Permissions": [], "Description": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the @B_java#io#File#list_E@ method, except that the strings in the returned array must satisfy the filter. If the given filter is null then all names are accepted. Otherwise, a name satisfies the filter if and only if the value true results when the @B_java#io#FilenameFilter#accept_E@ method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.", "history": "Added in API level 1", "FullName": "public String[] list (FilenameFilter filter)"}, "setReadable(boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow read operations; if false to disallow read operations"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to set the owner's read permission for this abstract pathname. An invocation of this method of the form", "history": "Added in API level 9", "FullName": "public boolean setReadable (boolean readable)"}, "listFiles(java.io.FileFilter)": {"Returns": [["@B_java#io#File_E@", "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."]], "Parameters": [["@B_java#io#FileFilter_E@", "FileFilter: A file filter"]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the directory"]], "SeeAlso": ["@B_java#nio#file#Files#newDirectoryStream_E@"], "Permissions": [], "Description": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the @B_java#io#File#listFiles_E@ method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the @B_java#io#FileFilter#accept_E@ method of the filter is invoked on the pathname.", "history": "Added in API level 1", "FullName": "public File[] listFiles (FileFilter filter)"}, "listFiles()": {"Returns": [["@B_java#io#File_E@", "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the directory"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the @B_java#io#File#File_E@ constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. Note that the @B_java#nio#file#Files_E@ class defines the @B_java#nio#file#Files#newDirectoryStream_E@ method to open a directory and iterate over the names of the files in the directory. This may use less resources when working with very large directories.", "history": "Added in API level 1", "FullName": "public File[] listFiles ()"}, "setReadOnly()": {"Returns": [["boolean", "true if and only if the operation succeeded; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the named file"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the file or directory named by this abstract pathname so that only read operations are allowed. After invoking this method the file or directory will not change until it is either deleted or marked to allow write access. Whether or not a read-only file or directory may be deleted depends upon the underlying system.", "history": "Added in API level 1", "FullName": "public boolean setReadOnly ()"}, "delete()": {"Returns": [["boolean", "true if and only if the file or directory is successfully deleted; false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkDelete(String) method denies delete access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. Note that the @B_java#nio#file#Files_E@ class defines the @B_java#nio#file#Files#delete_E@ method to throw an @B_java#io#IOException_E@ when a file cannot be deleted. This is useful for error reporting and to diagnose why a file cannot be deleted.", "history": "Added in API level 1", "FullName": "public boolean delete ()"}, "setExecutable(boolean, boolean)": {"Returns": [["boolean", "true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If executable is false and the underlying file system does not implement an execute permission, then the operation will fail."]], "Parameters": [["boolean", "boolean: If true, sets the access permission to allow execute operations; if false to disallow execute operations"], ["boolean", "boolean: If true, the execute permission applies only to the owner's execute permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner's execute permission from that of others, then the permission will apply to everybody, regardless of this value."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the owner's or everybody's execute permission for this abstract pathname. The @B_java#nio#file#Files_E@ class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.", "history": "added in API level 9", "FullName": "public boolean setExecutable (boolean executable, boolean ownerOnly)"}, "createTempFile(java.lang.String, java.lang.String)": {"Returns": [["@B_java#io#File_E@", "An abstract pathname denoting a newly-created empty file"]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix string to be used in generating the file's name; must be at least three characters long"], ["@B_java#lang#String_E@", "String: The suffix string to be used in generating the file's name; may be null, in which case the suffix \".tmp\" will be used"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the prefix argument contains fewer than three characters"], ["@B_java#io#IOException_E@", "If a file could not be created"], ["@B_java#lang#SecurityException_E@", "If a security manager exists and its SecurityManager.checkWrite(java.lang.String) method does not allow a file to be created"]], "SeeAlso": ["@B_java#nio#file#Files#createTempDirectory_E@"], "Permissions": [], "Description": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. Invoking this method is equivalent to invoking createTempFile(prefix, suffix, null). The @B_java#nio#file#Files#createTempFile_E@ method provides an alternative method to create an empty file in the temporary-file directory. Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.", "history": "added in API level 1", "FullName": "public static File createTempFile (String prefix, String suffix)"}, "isAbsolute()": {"Returns": [["boolean", "true if this abstract pathname is absolute, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this abstract pathname is absolute. The definition of absolute pathname is system dependent. On Android, absolute paths start with the character '/'.", "history": "Added in API level 1", "FullName": "public boolean isAbsolute ()"}}, "Inheritance": [], "ClassName": "java.io.File", "ClassDesc": "An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components: empty abstract pathname has no prefix and an empty name sequence. The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields separator and separatorChar of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking the @B_java#io#File#getParent_E@ method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: For UNIX platforms, the prefix of an absolute pathname is always \"/\". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix \"/\" and an empty name sequence. For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by \":\" and possibly followed by \"\\\\\" if the pathname is absolute. The prefix of a UNC pathname is \"\\\\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. The java.io.File class. The @B_java#io#File#toPath_E@ method may be used to obtain a @B_java#nio#file#Path_E@ that uses the abstract path represented by a File object to locate a file. The resulting Path may be used with the @B_java#nio#file#Files_E@ class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails. On Android strings are converted to UTF-8 byte sequences when sending filenames to the operating system, and byte sequences returned by the operating system (from the various list methods) are converted to strings by decoding them as UTF-8 byte sequences."}