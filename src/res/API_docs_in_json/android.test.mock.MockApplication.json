{"Functions": {"onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application is starting, before any activity, service, or receiver objects (excluding content providers) have been created. Implementations should be as quick as possible (for example using lazy initialization of state) since the time spent in this function directly impacts the performance of starting the first activity, service, or receiver in a process. If you override this method, be sure to call super.onCreate(). Be aware that direct boot may also affect callback order on Android @B_android#os#Build#VERSION_CODES#N_E@ and later devices. Until the user unlocks the device, only direct boot aware components are allowed to run. You should consider that all direct boot unaware components, including such @B_android#content#ContentProvider_E@, are disabled until user unlock happens, especially when component callback order matters. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void onCreate ()"}, "MockApplication()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MockApplication ()"}, "onTerminate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is for use in emulated process environments. It will never be called on a production Android device, where processes are removed by simply killing them; no user code (including this callback) is executed when doing so. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void onTerminate ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Application_E@"], "ClassName": "android.test.mock.MockApplication", "ClassDesc": "Use a mocking framework like A mock @B_android#app#Application_E@ class. All methods are non-functional and throw @B_java#lang#UnsupportedOperationException_E@. Override it as necessary to provide the operations that you need."}