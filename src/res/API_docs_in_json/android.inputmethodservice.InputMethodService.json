{"Functions": {"hideStatusIcon()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void hideStatusIcon ()"}, "onExtractedCursorMovement(int,int)": {"Returns": [], "Parameters": [["int", "int: The amount of cursor movement in the x dimension."], ["int", "int: The amount of cursor movement in the y dimension."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has performed a cursor movement in the extracted text view, when it is running in fullscreen mode. The default implementation hides the candidates view when a vertical movement happens, but only if the extracted text editor has a vertical scroll bar because its text doesn't fit. Re-implement this to provide whatever behavior you want.", "history": "Added in API level 3", "FullName": "public void onExtractedCursorMovement (int dx, int dy)"}, "setExtractView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void setExtractView (View view)"}, "onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Description of the type of text being edited."], ["boolean", "boolean: Set to true if we are restarting input on the same text field as before."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when only the candidates view has been shown for showing processing as the user enters text through a hard keyboard. This will always be called after @B_android#inputmethodservice#InputMethodService#onStartInput_E@, allowing you to do your general setup there and just view-specific setup here. You are guaranteed that @B_android#inputmethodservice#InputMethodService#onCreateCandidatesView_E@ will have been called some time before this function is called. Note that this will not be called when the input method is running in full editing mode, and thus receiving @B_android#inputmethodservice#InputMethodService#onStartInputView_E@ to initiate that operation. This is only for the case when candidates are being shown while the input method editor is hidden but wants to show its candidates UI as text is entered through some other mechanism.", "history": "Added in API level 3", "FullName": "public void onStartCandidatesView (EditorInfo info, boolean restarting)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new device configuration. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take care of handling configuration changes. Subclasses of InputMethodService generally don't need to deal directly with this on their own; the standard implementation here takes care of regenerating the input method UI as a result of the configuration change, so you can rely on your @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@ and other methods being called as appropriate due to a configuration change. When a configuration change does happen, @B_android#inputmethodservice#InputMethodService#onInitializeInterface_E@ is guaranteed to be called the next time prior to any of the other input or UI creation callbacks. The following will be called immediately depending if appropriate for current state: @B_android#inputmethodservice#InputMethodService#onStartInput_E@ if input is active, and @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@ and @B_android#inputmethodservice#InputMethodService#onStartInputView_E@ and related appropriate functions if the UI is displayed.", "history": "Added in API level 3", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onFinishCandidatesView(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, @B_android#inputmethodservice#InputMethodService#onFinishInput_E@ will be called immediately after."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the candidates view is being hidden from the user. This will be called either prior to hiding the window, or prior to switching to another target for editing. The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like.", "history": "Added in API level 3", "FullName": "public void onFinishCandidatesView (boolean finishingInput)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all. The default implementation always returns false, except when in fullscreen mode, where it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.", "history": "added in API level 3", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "onAppPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void onAppPrivateCommand (String action, Bundle data)"}, "setCandidatesView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the current candidates view with a new one. You only need to call this when dynamically changing the view; normally, you should implement @B_android#inputmethodservice#InputMethodService#onCreateCandidatesView_E@ and create your view when first needed by the input method.", "history": "Added in API level 3", "FullName": "public void setCandidatesView (View view)"}, "onStartInputView(android.view.inputmethod.EditorInfo,boolean)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Description of the type of text being edited."], ["boolean", "boolean: Set to true if we are restarting input on the same text field as before."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the input view is being shown and input has started on a new editor. This will always be called after @B_android#inputmethodservice#InputMethodService#onStartInput_E@, allowing you to do your general setup there and just view-specific setup here. You are guaranteed that @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@ will have been called some time before this function is called.", "history": "Added in API level 3", "FullName": "public void onStartInputView (EditorInfo info, boolean restarting)"}, "onEvaluateInputViewShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to control when the soft input area should be shown to the user. The default implementation returns false when there is no hard keyboard or the keyboard is hidden unless the user shows an intention to use software keyboard. If you change what this returns, you will need to call @B_android#inputmethodservice#InputMethodService#updateInputViewShown_E@ yourself whenever the returned value may have changed to have it re-evaluated and applied. When you override this method, it is recommended to call super.onEvaluateInputViewShown() and return true when true is returned. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 3", "FullName": "public boolean onEvaluateInputViewShown ()"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all. The default implementation always returns false, except when in fullscreen mode, where it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.", "history": "Added in API level 3", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "onWindowHidden()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the input method window has been hidden from the user, after previously being visible.", "history": "Added in API level 3", "FullName": "public void onWindowHidden ()"}, "onExtractedCursorMovement(int, int)": {"Returns": [], "Parameters": [["int", "int: The amount of cursor movement in the x dimension."], ["int", "int: The amount of cursor movement in the y dimension."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has performed a cursor movement in the extracted text view, when it is running in fullscreen mode. The default implementation hides the candidates view when a vertical movement happens, but only if the extracted text editor has a vertical scroll bar because its text doesn't fit. Re-implement this to provide whatever behavior you want.", "history": "added in API level 3", "FullName": "public void onExtractedCursorMovement (int dx, int dy)"}, "onUpdateCursor(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#onUpdateCursorAnchorInfo_E@ instead. Called when the application has reported a new location of its text cursor. This is only called if explicitly requested by the input method. The default implementation does nothing.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public void onUpdateCursor (Rect newCursor)"}, "isFullscreenMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the input method is currently running in fullscreen mode. This is the mode that was last determined and applied by @B_android#inputmethodservice#InputMethodService#updateFullscreenMode_E@.", "history": "Added in API level 3", "FullName": "public boolean isFullscreenMode ()"}, "onStartInput(android.view.inputmethod.EditorInfo,boolean)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: The attributes of the editor that input is starting in."], ["boolean", "boolean: Set to true if input is restarting in the same editor such as because the application has changed the text in the editor. Otherwise will be false, indicating this is a new session with the editor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to inform the input method that text input has started in an editor. You should use this callback to initialize the state of your input to match the state of the editor given to it.", "history": "Added in API level 3", "FullName": "public void onStartInput (EditorInfo attribute, boolean restarting)"}, "onUpdateExtractingViews(android.view.inputmethod.EditorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI. If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor. In particular, a @B_android#text#InputType#TYPE_NULL_E@ or @B_android#text#InputType#TYPE_TEXT_VARIATION_FILTER_E@ input type will turn off the extract area since there is no text to be shown.", "history": "Added in API level 3", "FullName": "public void onUpdateExtractingViews (EditorInfo ei)"}, "onExtractTextContextMenuItem(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has selected a context menu item from the extracted text view, when running in fullscreen mode. The default implementation sends this action to the current InputConnection's @B_android#view#inputmethod#InputConnection#performContextMenuAction_E@, for it to be processed in underlying \"real\" editor. Re-implement this to provide whatever behavior you want.", "history": "Added in API level 3", "FullName": "public boolean onExtractTextContextMenuItem (int id)"}, "onComputeInsets(android.inputmethodservice.InputMethodService.Insets)": {"Returns": [], "Parameters": [["@B_android#inputmethodservice#InputMethodService#Insets_E@", "InputMethodService.Insets: Fill in with the current UI insets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the interesting insets into your UI. The default implementation uses the top of the candidates frame for the visible insets, and the top of the input frame for the content insets. The default touchable insets are @B_android#inputmethodservice#InputMethodService#Insets#TOUCHABLE_INSETS_VISIBLE_E@. Note that this method is not called when @B_android#inputmethodservice#InputMethodService#isExtractViewShown_E@ returns true, since in that case the application is left as-is behind the input method and not impacted by anything in its UI.", "history": "Added in API level 3", "FullName": "public void onComputeInsets (InputMethodService.Insets outInsets)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled in this function, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept generic motion events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all.", "history": "Added in API level 17", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "setTheme(int)": {"Returns": [], "Parameters": [["int", "int: The style resource describing the theme."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "You can call this to customize the theme used by your IME's window. This theme should typically be one that derives from @B_android#R#style#Theme_InputMethod_E@, which is the default theme you will get. This must be set before @B_android#inputmethodservice#InputMethodService#onCreate_E@, so you will typically call it in your constructor with the resource ID of your custom theme.", "history": "Added in API level 3", "FullName": "public void setTheme (int theme)"}, "onKeyLongPress(int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event).", "history": "added in API level 5", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "getInputMethodWindowRecommendedHeight()": {"Returns": [["int", "on Android @B_android#os#Build#VERSION_CODES#Q_E@ and later devices this method always returns 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "the actual behavior of this method has never been well defined. You cannot use this method in a reliable and predictable way Aimed to return the previous input method's @B_android#inputmethodservice#InputMethodService#Insets#contentTopInsets_E@, but its actual semantics has never been well defined. Note that the previous document clearly mentioned that this method could return 0 at any time for whatever reason. Now this method is just always returning 0.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public int getInputMethodWindowRecommendedHeight ()"}, "isShowInputRequested()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if we have been asked to show our input view.", "history": "Added in API level 3", "FullName": "public boolean isShowInputRequested ()"}, "setCandidatesViewShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls the visibility of the candidates display area. By default it is hidden.", "history": "Added in API level 3", "FullName": "public void setCandidatesViewShown (boolean shown)"}, "onViewClicked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the user changed the focused view by this click."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#InputMethodManager#viewClicked_E@"], "Permissions": [], "Description": "The method may not be called for composite @B_android#view#View_E@ that works as a giant \"Canvas\", which can host its own UI hierarchy and sub focus state. @B_android#webkit#WebView_E@ is a good example. Application / IME developers should not rely on this method. If your goal is just being notified when an on-going input is interrupted, simply monitor @B_android#inputmethodservice#InputMethodService#onFinishInput_E@. Called when the user tapped or clicked a text view. IMEs can't rely on this method being called because this was not part of the original IME protocol, so applications with custom text editing written before this method appeared will not call to inform the IME of this interaction.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void onViewClicked (boolean focusChanged)"}, "onShowInputRequested(int,boolean)": {"Returns": [["boolean", "Returns true to indicate that the window should be shown."]], "Parameters": [["int", "int: Provides additional information about the show request, as per @B_android#view#inputmethod#InputMethod#showSoftInput_E@."], ["boolean", "boolean: This is true if we are re-showing due to a configuration change."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system has decided that it may be time to show your input method. This is called due to a corresponding call to your @B_android#view#inputmethod#InputMethod#showSoftInput_E@ method. The default implementation uses @B_android#inputmethodservice#InputMethodService#onEvaluateInputViewShown_E@, @B_android#inputmethodservice#InputMethodService#onEvaluateFullscreenMode_E@, and the current configuration to decide whether the input view should be shown at this point.", "history": "Added in API level 3", "FullName": "public boolean onShowInputRequested (int flags, boolean configChange)"}, "onExtractingInputChanged(android.view.inputmethod.EditorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when, while currently displayed in extract mode, the current input target changes. The default implementation will auto-hide the IME if the new target is not a full editor, since this can be a confusing experience for the user.", "history": "Added in API level 3", "FullName": "public void onExtractingInputChanged (EditorInfo ei)"}, "requestHideSelf(int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#InputMethodManager_E@"], "Permissions": [], "Description": "Close this input method's soft input area, removing it from the display. The input method will continue running, but the user can no longer use it to generate input by touching the screen.", "history": "Added in API level 3", "FullName": "public void requestHideSelf (int flags)"}, "onExtractedSelectionChanged(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has moved the cursor in the extracted text view, when running in fullsreen mode. The default implementation performs the corresponding selection change on the underlying text editor.", "history": "added in API level 3", "FullName": "public void onExtractedSelectionChanged (int start, int end)"}, "onFinishInputView(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, @B_android#inputmethodservice#InputMethodService#onFinishInput_E@ will be called immediately after."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the input view is being hidden from the user. This will be called either prior to hiding the window, or prior to switching to another target for editing. The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like.", "history": "Added in API level 3", "FullName": "public void onFinishInputView (boolean finishingInput)"}, "setInputView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the current input view with a new one. You only need to call this when dynamically changing the view; normally, you should implement @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@ and create your view when first needed by the input method.", "history": "Added in API level 3", "FullName": "public void setInputView (View view)"}, "onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown. The standard implementation hides or shows the extract area depending on whether it makes sense for the current editor. In particular, a @B_android#text#InputType#TYPE_NULL_E@ input type or @B_android#view#inputmethod#EditorInfo#IME_FLAG_NO_EXTRACT_UI_E@ flag will turn off the extract area since there is no text to be shown.", "history": "Added in API level 3", "FullName": "public void onUpdateExtractingVisibility (EditorInfo ei)"}, "onFinishInput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to inform the input method that text input has finished in the last editor. At this point there may be a call to @B_android#inputmethodservice#InputMethodService#onStartInput_E@ to perform input in a new editor, or the input method may be left idle. This method is not called when input restarts in the same editor. The default implementation uses the InputConnection to clear any active composing text; you can override this (not calling the base class implementation) to perform whatever behavior you would like.", "history": "Added in API level 3", "FullName": "public void onFinishInput ()"}, "getCurrentInputEditorInfo()": {"Returns": [["@B_android#view#inputmethod#EditorInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public EditorInfo getCurrentInputEditorInfo ()"}, "getMaxWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum width, in pixels, available the input method. Input methods are positioned at the bottom of the screen and, unless running in fullscreen, will generally want to be as short as possible so should compute their height based on their contents. However, they can stretch as much as needed horizontally. The function returns to you the maximum amount of space available horizontally, which you can use if needed for UI placement. In many cases this is not needed, you can just rely on the normal view layout mechanisms to position your views within the full horizontal space given to the input method. Note that this value can change dynamically, in particular when the screen orientation changes.", "history": "Added in API level 3", "FullName": "public int getMaxWidth ()"}, "showWindow(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void showWindow (boolean showInput)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads, registered receivers, etc) at this point. Upon return, there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.", "history": "Added in API level 3", "FullName": "public void onDestroy ()"}, "onCreateInputView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create and return the view hierarchy used for the input area (such as a soft keyboard). This will be called once, when the input area is first displayed. You can return null to have no input area; the default implementation returns null. To control when the input view is displayed, implement @B_android#inputmethodservice#InputMethodService#onEvaluateInputViewShown_E@. To change the input view after the first one is created by this function, use @B_android#inputmethodservice#InputMethodService#setInputView_E@.", "history": "Added in API level 3", "FullName": "public View onCreateInputView ()"}, "onEvaluateFullscreenMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to control when the input method should run in fullscreen mode. The default implementation runs in fullsceen only when the screen is in landscape mode. If you change what this returns, you will need to call @B_android#inputmethodservice#InputMethodService#updateFullscreenMode_E@ yourself whenever the returned value may have changed to have it re-evaluated and applied.", "history": "Added in API level 3", "FullName": "public boolean onEvaluateFullscreenMode ()"}, "onCreateCandidatesView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create and return the view hierarchy used to show candidates. This will be called once, when the candidates are first displayed. You can return null to have no candidates view; the default implementation returns null. To control when the candidates view is displayed, use @B_android#inputmethodservice#InputMethodService#setCandidatesViewShown_E@. To change the candidates view after the first one is created by this function, use @B_android#inputmethodservice#InputMethodService#setCandidatesView_E@.", "history": "Added in API level 3", "FullName": "public View onCreateCandidatesView ()"}, "onUpdateSelection(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application has reported a new selection region of the text. This is called whether or not the input method has requested extracted text updates, although if so it will not receive this call if the extracted text has changed as well. Be careful about changing the text in reaction to this call with methods such as setComposingText, commitText or deleteSurroundingText. If the cursor moves as a result, this method will be called again, which may result in an infinite loop. The default implementation takes care of updating the cursor in the extract text, if it is being shown.", "history": "added in API level 3", "FullName": "public void onUpdateSelection (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "true if the event is consumed by the IME and the application no longer needs to consume it. Return false when the event should be handled as if the IME had not seen the event at all."]], "Parameters": [["int", "int: The value in event.getKeyCode()"], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when a @B_android#view#KeyEvent_E@ is forwarded from the target application. The default implementation intercepts @B_android#view#KeyEvent#KEYCODE_BACK_E@ if the IME is currently shown , to possibly hide it when the key goes up (if not canceled or long pressed). In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application. The default implementation does not take flags specified to @B_android#inputmethodservice#InputMethodService#setBackDisposition_E@ into account, even on API version @B_android#os#Build#VERSION_CODES#P_E@ and later devices. IME developers are responsible for making sure that their special handling for @B_android#view#KeyEvent#KEYCODE_BACK_E@ are consistent with the flag they specified to @B_android#inputmethodservice#InputMethodService#setBackDisposition_E@.", "history": "added in API level 3", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a dump of the InputMethodService's internal state. Override to add your own information to the dump.", "history": "Added in API level 3", "FullName": "protected void dump (FileDescriptor fd, PrintWriter fout, String[] args)"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public LayoutInflater getLayoutInflater ()"}, "requestShowSelf(int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#InputMethodManager_E@"], "Permissions": [], "Description": "Show the input method's soft input area, so the user sees the input method window and can interact with it.", "history": "Added in API level 28", "FullName": "public final void requestShowSelf (int flags)"}, "sendKeyChar(char)": {"Returns": [], "Parameters": [["char", "char: The UTF-16 character code to send."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send the given UTF-16 character to the current input connection. Most characters will be delivered simply by calling @B_android#view#inputmethod#InputConnection#commitText_E@ with the character; some, however, may be handled different. In particular, the enter character ('\\n') will either be delivered as an action code or a raw key event, as appropriate. Consider this as a convenience method for IMEs that do not have a full implementation of actions; a fully complying IME will decide of the right action for each event and will likely never call this method except maybe to handle events coming from an actual hardware keyboard.", "history": "Added in API level 3", "FullName": "public void sendKeyChar (char charCode)"}, "getTextForImeAction(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns a label to use, or null if there is no action."]], "Parameters": [["int", "int: The value from @B_android#view#inputmethod#EditorInfo#imeOptions_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return text that can be used as a button label for the given @B_android#view#inputmethod#EditorInfo#imeOptions_E@. Returns null if there is no action requested. Note that there is no guarantee that the returned text will be relatively short, so you probably do not want to use it as text on a soft keyboard key label.", "history": "Added in API level 3", "FullName": "public CharSequence getTextForImeAction (int imeOptions)"}, "isInputViewShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the soft input view is currently shown to the user. This is the state that was last determined and applied by @B_android#inputmethodservice#InputMethodService#updateInputViewShown_E@.", "history": "Added in API level 3", "FullName": "public boolean isInputViewShown ()"}, "switchInputMethod(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Unique identifier of the new input method to start."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force switch to a new input method, as identified by", "history": "Added in API level 3", "FullName": "public void switchInputMethod (String id)"}, "onBindInput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a new client has bound to the input method. This may be followed by a series of @B_android#inputmethodservice#InputMethodService#onStartInput_E@ and @B_android#inputmethodservice#InputMethodService#onFinishInput_E@ calls as the user navigates through its UI. Upon this call you know that @B_android#inputmethodservice#InputMethodService#getCurrentInputBinding_E@ and @B_android#inputmethodservice#InputMethodService#getCurrentInputConnection_E@ return valid objects.", "history": "Added in API level 3", "FullName": "public void onBindInput ()"}, "switchToNextInputMethod(boolean)": {"Returns": [["boolean", "true if the current input method and subtype was successfully switched to the next input method and subtype."]], "Parameters": [["boolean", "boolean: if true, the framework will find the next subtype which belongs to the current IME"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force switch to the next input method and subtype. If there is no IME enabled except current IME and subtype, do nothing.", "history": "Added in API level 28", "FullName": "public final boolean switchToNextInputMethod (boolean onlyCurrentIme)"}, "onExtractedSelectionChanged(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has moved the cursor in the extracted text view, when running in fullsreen mode. The default implementation performs the corresponding selection change on the underlying text editor.", "history": "Added in API level 3", "FullName": "public void onExtractedSelectionChanged (int start, int end)"}, "onDisplayCompletions(android.view.inputmethod.CompletionInfo[])": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application has reported auto-completion candidates that it would like to have the input method displayed. Typically these are only used when an input method is running in full-screen mode, since otherwise the user can see and interact with the pop-up window of completions shown by the application. The default implementation here does nothing.", "history": "Added in API level 3", "FullName": "public void onDisplayCompletions (CompletionInfo[] completions)"}, "onUnbindInput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the previous bound client is no longer associated with the input method. After returning @B_android#inputmethodservice#InputMethodService#getCurrentInputBinding_E@ and @B_android#inputmethodservice#InputMethodService#getCurrentInputConnection_E@ will no longer return valid objects.", "history": "Added in API level 3", "FullName": "public void onUnbindInput ()"}, "getWindow()": {"Returns": [["@B_android#app#Dialog_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public Dialog getWindow ()"}, "onCreateInputMethodInterface()": {"Returns": [["@B_android#inputmethodservice#AbstractInputMethodService#AbstractInputMethodImpl_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement to return our standard @B_android#inputmethodservice#InputMethodService#InputMethodImpl_E@. Subclasses can override to provide their own customized version.", "history": "Added in API level 3", "FullName": "public AbstractInputMethodService.AbstractInputMethodImpl onCreateInputMethodInterface ()"}, "setBackDisposition(int)": {"Returns": [], "Parameters": [["int", "int: disposition mode to be set Value is @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_DEFAULT_E@, @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_WILL_NOT_DISMISS_E@, @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_WILL_DISMISS_E@, or @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_ADJUST_NOTHING_E@"]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#InputMethodService#getBackDisposition_E@"], "Permissions": [], "Description": "Sets the disposition mode that indicates the expected affordance for the back button. Keep in mind that specifying this flag does not change the the default behavior of @B_android#inputmethodservice#InputMethodService#onKeyDown_E@. It is IME developers' responsibility for making sure that their custom implementation of @B_android#inputmethodservice#InputMethodService#onKeyDown_E@ is consistent with the mode specified to this API.", "history": "Added in API level 11", "FullName": "public void setBackDisposition (int disposition)"}, "setExtractViewShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls the visibility of the extracted text area. This only applies when the input method is in fullscreen mode, and thus showing extracted text. When false, the extracted text will not be shown, allowing some of the application to be seen behind. This is normally set for you by @B_android#inputmethodservice#InputMethodService#onUpdateExtractingVisibility_E@. This controls the visibility of both the extracted text and candidate view; the latter since it is not useful if there is no text to see.", "history": "Added in API level 3", "FullName": "public void setExtractViewShown (boolean shown)"}, "getCurrentInputConnection()": {"Returns": [["@B_android#view#inputmethod#InputConnection_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the currently active InputConnection that is bound to the input method, or null if there is none.", "history": "Added in API level 3", "FullName": "public InputConnection getCurrentInputConnection ()"}, "switchToPreviousInputMethod()": {"Returns": [["boolean", "true if the current input method and subtype was successfully switched to the last used input method and subtype."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force switch to the last used input method and subtype. If the last input method didn't have any subtypes, the framework will simply switch to the last input method with no subtype specified.", "history": "Added in API level 28", "FullName": "public final boolean switchToPreviousInputMethod ()"}, "updateFullscreenMode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Re-evaluate whether the input method should be running in fullscreen mode, and update its UI if this has changed since the last time it was evaluated. This will call @B_android#inputmethodservice#InputMethodService#onEvaluateFullscreenMode_E@ to determine whether it should currently run in fullscreen mode. You can use @B_android#inputmethodservice#InputMethodService#isFullscreenMode_E@ to determine if the input method is currently running in fullscreen mode.", "history": "Added in API level 3", "FullName": "public void updateFullscreenMode ()"}, "getCandidatesHiddenVisibility()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the visibility mode (either @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@) of the candidates view when it is not shown. The default implementation returns GONE when @B_android#inputmethodservice#InputMethodService#isExtractViewShown_E@ returns true, otherwise VISIBLE. Be careful if you change this to return GONE in other situations -- if showing or hiding the candidates view causes your window to resize, this can cause temporary drawing artifacts as the resize takes place.", "history": "Added in API level 3", "FullName": "public int getCandidatesHiddenVisibility ()"}, "onWindowShown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called immediately before the input method window is shown to the user. You could override this to prepare for the window to be shown (update view structure etc).", "history": "Added in API level 3", "FullName": "public void onWindowShown ()"}, "getBackDisposition()": {"Returns": [["int", "currently selected disposition mode Value is @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_DEFAULT_E@, @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_WILL_NOT_DISMISS_E@, @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_WILL_DISMISS_E@, or @B_android#inputmethodservice#InputMethodService#BACK_DISPOSITION_ADJUST_NOTHING_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#InputMethodService#setBackDisposition_E@"], "Permissions": [], "Description": "Retrieves the current disposition mode that indicates the expected back button affordance.", "history": "Added in API level 11", "FullName": "public int getBackDisposition ()"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the service is first created. Do not call this method directly.", "history": "Added in API level 3", "FullName": "public void onCreate ()"}, "onCreateInputMethodSessionInterface()": {"Returns": [["@B_android#inputmethodservice#AbstractInputMethodService#AbstractInputMethodSessionImpl_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement to return our standard @B_android#inputmethodservice#InputMethodService#InputMethodSessionImpl_E@. Subclasses can override to provide their own customized version.", "history": "Added in API level 3", "FullName": "public AbstractInputMethodService.AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface ()"}, "isExtractViewShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the fullscreen extract view is shown. This will only return true if @B_android#inputmethodservice#InputMethodService#isFullscreenMode_E@ returns true, and in that case its value depends on the last call to @B_android#inputmethodservice#InputMethodService#setExtractViewShown_E@. This effectively lets you determine if the application window is entirely covered (when this returns true) or if some part of it may be shown (if this returns false, though if @B_android#inputmethodservice#InputMethodService#isFullscreenMode_E@ returns true in that case then it is probably only a sliver of the application).", "history": "Added in API level 3", "FullName": "public boolean isExtractViewShown ()"}, "onInitializeInterface()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is a hook that subclasses can use to perform initialization of their interface. It is called for you prior to any of your UI objects being created, both after the service is first created and after a configuration change happens.", "history": "Added in API level 3", "FullName": "public void onInitializeInterface ()"}, "onCreateExtractTextView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework to create the layout for showing extacted text. Only called when in fullscreen mode. The returned view hierarchy must have an @B_android#inputmethodservice#ExtractEditText_E@ whose ID is @B_android#R#id#inputExtractEditText_E@.", "history": "Added in API level 3", "FullName": "public View onCreateExtractTextView ()"}, "sendDefaultEditorAction(boolean)": {"Returns": [["boolean", "Returns a boolean indicating whether an action has been sent. If false, either the editor did not specify a default action or it does not want an action from the enter key. If true, the action was sent (or there was no input connection at all)."]], "Parameters": [["boolean", "boolean: If true, this will be executed as if the user had pressed an enter key on the keyboard, that is it will not be done if the editor has set @B_android#view#inputmethod#EditorInfo#IME_FLAG_NO_ENTER_ACTION_E@. If false, the action will be sent regardless of how the editor has set that flag."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask the input target to execute its default action via @B_android#view#inputmethod#InputConnection#performEditorAction_E@.", "history": "Added in API level 3", "FullName": "public boolean sendDefaultEditorAction (boolean fromEnterKey)"}, "getCurrentInputBinding()": {"Returns": [["@B_android#view#inputmethod#InputBinding_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the currently active InputBinding for the input method, or null if there is none.", "history": "Added in API level 3", "FullName": "public InputBinding getCurrentInputBinding ()"}, "onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#inputmethod#ExtractedText_E@", "ExtractedText no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application has reported new extracted text to be shown due to changes in its current text state. The default implementation here places the new text in the extract edit text, when the input method is running in fullscreen mode.", "history": "Added in API level 3", "FullName": "public void onUpdateExtractedText (int token, ExtractedText text)"}, "updateInputViewShown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Re-evaluate whether the soft input area should currently be shown, and update its UI if this has changed since the last time it was evaluated. This will call @B_android#inputmethodservice#InputMethodService#onEvaluateInputViewShown_E@ to determine whether the input view should currently be shown. You can use @B_android#inputmethodservice#InputMethodService#isInputViewShown_E@ to determine if the input view is currently shown.", "history": "Added in API level 3", "FullName": "public void updateInputViewShown ()"}, "onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: the subtype which is being changed to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the subtype was changed.", "history": "Added in API level 11", "FullName": "protected void onCurrentInputMethodSubtypeChanged (InputMethodSubtype newSubtype)"}, "getCurrentInputStarted()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public boolean getCurrentInputStarted ()"}, "switchInputMethod(java.lang.String,android.view.inputmethod.InputMethodSubtype)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Unique identifier of the new input method to start."], ["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: The new subtype of the new input method to be switched to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force switch to a new input method, as identified by id. This input method will be destroyed, and the requested one started on the current input field.", "history": "Added in API level 28", "FullName": "public final void switchInputMethod (String id, InputMethodSubtype subtype)"}, "onShowInputRequested(int, boolean)": {"Returns": [["boolean", "Returns true to indicate that the window should be shown."]], "Parameters": [["int", "int: Provides additional information about the show request, as per @B_android#view#inputmethod#InputMethod#showSoftInput_E@."], ["boolean", "boolean: This is true if we are re-showing due to a configuration change."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The system has decided that it may be time to show your input method. This is called due to a corresponding call to your @B_android#view#inputmethod#InputMethod#showSoftInput_E@ method. The default implementation uses @B_android#inputmethodservice#InputMethodService#onEvaluateInputViewShown_E@, @B_android#inputmethodservice#InputMethodService#onEvaluateFullscreenMode_E@, and the current configuration to decide whether the input view should be shown at this point.", "history": "added in API level 3", "FullName": "public boolean onShowInputRequested (int flags, boolean configChange)"}, "shouldOfferSwitchingToNextInputMethod()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current IME needs to offer the users ways to switch to a next input method (e.g. a globe key.). When an IME sets supportsSwitchingToNextInputMethod and this method returns true, the IME has to offer ways to to invoke @B_android#inputmethodservice#InputMethodService#switchToNextInputMethod_E@ accordingly. Note that the system determines the most appropriate next input method and subtype in order to provide the consistent user experience in switching between IMEs and subtypes.", "history": "Added in API level 28", "FullName": "public final boolean shouldOfferSwitchingToNextInputMethod ()"}, "showStatusIcon(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void showStatusIcon (int iconResId)"}, "onConfigureWindow(android.view.Window,boolean,boolean)": {"Returns": [], "Parameters": [["@B_android#view#Window_E@", "Window: The input method's window."], ["boolean", "boolean: If true, the window is running in fullscreen mode and intended to cover the entire application display."], ["boolean", "boolean: If true, the window is only showing the candidates view and none of the rest of its UI. This is mutually exclusive with fullscreen mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the given window's parameters for the given mode. This is called when the window is first displayed and each time the fullscreen or candidates only mode changes. The default implementation makes the layout for the window MATCH_PARENT x MATCH_PARENT when in fullscreen mode, and MATCH_PARENT x WRAP_CONTENT when in non-fullscreen mode.", "history": "Added in API level 3", "FullName": "public void onConfigureWindow (Window win, boolean isFullscreen, boolean isCandidatesOnly)"}, "hideWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void hideWindow ()"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled in this function, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept trackball motion events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all.", "history": "Added in API level 3", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "sendDownUpKeyEvents(int)": {"Returns": [], "Parameters": [["int", "int: The raw key code to send, as defined by @B_android#view#KeyEvent_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send the given key event code (as defined by @B_android#view#KeyEvent_E@) to the current input connection is a key down + key up event pair. The sent events have @B_android#view#KeyEvent#FLAG_SOFT_KEYBOARD_E@ set, so that the recipient can identify them as coming from a software input method, and @B_android#view#KeyEvent#FLAG_KEEP_TOUCH_MODE_E@, so that they don't impact the current touch mode of the UI. Note that it's discouraged to send such key events in normal operation; this is mainly for use with @B_android#text#InputType#TYPE_NULL_E@ type text fields, or for non-rich input methods. A reasonably capable software input method should use the @B_android#view#inputmethod#InputConnection#commitText_E@ family of methods to send text to an application, rather than sending key events.", "history": "Added in API level 3", "FullName": "public void sendDownUpKeyEvents (int keyEventCode)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all. The default implementation intercepts @B_android#view#KeyEvent#KEYCODE_BACK_E@ to hide the current IME UI if it is shown. In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.", "history": "added in API level 3", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onKeyLongPress(int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event).", "history": "Added in API level 5", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "true if the event is consumed by the IME and the application no longer needs to consume it. Return false when the event should be handled as if the IME had not seen the event at all."]], "Parameters": [["int", "int: The value in event.getKeyCode()"], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called back when a @B_android#view#KeyEvent_E@ is forwarded from the target application. The default implementation intercepts @B_android#view#KeyEvent#KEYCODE_BACK_E@ if the IME is currently shown , to possibly hide it when the key goes up (if not canceled or long pressed). In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application. The default implementation does not take flags specified to @B_android#inputmethodservice#InputMethodService#setBackDisposition_E@ into account, even on API version @B_android#os#Build#VERSION_CODES#P_E@ and later devices. IME developers are responsible for making sure that their special handling for @B_android#view#KeyEvent#KEYCODE_BACK_E@ are consistent with the flag they specified to @B_android#inputmethodservice#InputMethodService#setBackDisposition_E@.", "history": "Added in API level 3", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onUpdateSelection(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application has reported a new selection region of the text. This is called whether or not the input method has requested extracted text updates, although if so it will not receive this call if the extracted text has changed as well. Be careful about changing the text in reaction to this call with methods such as setComposingText, commitText or deleteSurroundingText. If the cursor moves as a result, this method will be called again, which may result in an infinite loop. The default implementation takes care of updating the cursor in the extract text, if it is being shown.", "history": "Added in API level 3", "FullName": "public void onUpdateSelection (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the IME had not seen the event at all. The default implementation intercepts @B_android#view#KeyEvent#KEYCODE_BACK_E@ to hide the current IME UI if it is shown. In addition, in fullscreen mode only, it will consume DPAD movement events to move the cursor in the extracted text view, not allowing them to perform navigation in the underlying application.", "history": "Added in API level 3", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "enableHardwareAcceleration()": {"Returns": [["boolean", "true if accelerated drawing is successfully enabled otherwise false. On API 21 and later devices the return value is basically just a hint and your IME does not need to change the behavior based on the it"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starting in API 21, hardware acceleration is always enabled on capable devices You can call this to try to enable accelerated drawing for your IME. This must be set before @B_android#inputmethodservice#InputMethodService#onCreate_E@, so you will typically call it in your constructor. It is not always possible to use hardware accelerated drawing in an IME (for example on low-end devices that do not have the resources to support this), so the call true if it succeeds otherwise false if you will need to draw in software. You must be able to handle either case. In API 21 and later, system may automatically enable hardware accelerated drawing for your IME on capable devices even if this method is not explicitly called. Make sure that your IME is able to handle either case.", "history": "Added in API level 17 Deprecated in API level 21", "FullName": "public boolean enableHardwareAcceleration ()"}, "onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CursorAnchorInfo_E@", "CursorAnchorInfo: The positional information of the text insertion point and the composition string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application has reported a new location of its text insertion point and characters in the composition string. This is only called if explicitly requested by the input method. The default implementation does nothing.", "history": "Added in API level 21", "FullName": "public void onUpdateCursorAnchorInfo (CursorAnchorInfo cursorAnchorInfo)"}, "InputMethodService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public InputMethodService ()"}, "onExtractedTextClicked()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the user has clicked on the extracted text view, when running in fullscreen mode. The default implementation hides the candidates view when this happens, but only if the extracted text editor has a vertical scroll bar because its text doesn't fit. Re-implement this to provide whatever behavior you want.", "history": "Added in API level 3", "FullName": "public void onExtractedTextClicked ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@", "@B_android#inputmethodservice#AbstractInputMethodService_E@"], "ClassName": "android.inputmethodservice.InputMethodService", "ClassDesc": "InputMethodService provides a standard implementation of an InputMethod, which final implementations can derive from and customize. See the base class @B_android#inputmethodservice#AbstractInputMethodService_E@ and the @B_android#view#inputmethod#InputMethod_E@ interface for more information on the basics of writing input methods. In addition to the normal Service lifecycle methods, this class introduces some new specific callbacks that most subclasses will want to make use of: @B_android#inputmethodservice#InputMethodService#onInitializeInterface_E@ for user-interface initialization, in particular to deal with configuration changes while the service is running. @B_android#inputmethodservice#InputMethodService#onBindInput_E@ to find out about switching to a new client. @B_android#inputmethodservice#InputMethodService#onStartInput_E@ to deal with an input session starting with the client. @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@, @B_android#inputmethodservice#InputMethodService#onCreateCandidatesView_E@, and @B_android#inputmethodservice#InputMethodService#onCreateExtractTextView_E@ for non-demand generation of the UI. @B_android#inputmethodservice#InputMethodService#onStartInputView_E@ to deal with input starting within the input area of the IME. An input method has significant discretion in how it goes about its work: the @B_android#inputmethodservice#InputMethodService_E@ provides a basic framework for standard UI elements (input view, candidates view, and running in fullscreen mode), but it is up to a particular implementor to decide how to use them. For example, one input method could implement an input area with a keyboard, another could allow the user to draw text, while a third could have no input area (and thus not be visible to the user) but instead listen to audio and perform text to speech conversion. In the implementation provided here, all of these elements are placed together in a single window managed by the InputMethodService. It will execute callbacks as it needs information about them, and provides APIs for programmatic control over them. They layout of these elements is explicitly defined: The soft input view, if available, is placed at the bottom of the screen. The candidates view, if currently shown, is placed above the soft input view. If not running fullscreen, the application is moved or resized to be above these views; if running fullscreen, the window will completely cover the application and its top part will contain the extract text of what is currently being edited by the application. Central to most input methods is the soft input view. This is where most user interaction occurs: pressing on soft keys, drawing characters, or however else your input method wants to generate text. Most implementations will simply have their own view doing all of this work, and return a new instance of it when @B_android#inputmethodservice#InputMethodService#onCreateInputView_E@ is called. At that point, as long as the input view is visible, you will see user interaction in that view and can call back on the InputMethodService to interact with the application as appropriate. There are some situations where you want to decide whether or not your soft input view should be shown to the user. This is done by implementing the @B_android#inputmethodservice#InputMethodService#onEvaluateInputViewShown_E@ to return true or false based on whether it should be shown in the current environment. If any of your state has changed that may impact this, call @B_android#inputmethodservice#InputMethodService#updateInputViewShown_E@ to have it re-evaluated. The default implementation always shows the input view unless there is a hard keyboard available, which is the appropriate behavior for most input methods. Often while the user is generating raw text, an input method wants to provide them with a list of possible interpretations of that text that can be selected for use. This is accomplished with the candidates view, and like the soft input view you implement @B_android#inputmethodservice#InputMethodService#onCreateCandidatesView_E@ to instantiate your own view implementing your candidates UI. Management of the candidates view is a little different than the input view, because the candidates view tends to be more transient, being shown only when there are possible candidates for the current text being entered by the user. To control whether the candidates view is shown, you use @B_android#inputmethodservice#InputMethodService#setCandidatesViewShown_E@. Note that because the candidate view tends to be shown and hidden a lot, it does not impact the application UI in the same way as the soft input view: it will never cause application windows to resize, only cause them to be panned if needed for the user to see the current focus. Sometimes your input method UI is too large to integrate with the application UI, so you just want to take over the screen. This is accomplished by switching to full-screen mode, causing the input method window to fill the entire screen and add its own \"extracted text\" editor showing the user the text that is being typed. Unlike the other UI elements, there is a standard implementation for the extract editor that you should not need to change. The editor is placed at the top of the IME, above the input and candidates views. Similar to the input view, you control whether the IME is running in fullscreen mode by implementing @B_android#inputmethodservice#InputMethodService#onEvaluateFullscreenMode_E@ to return true or false based on whether it should be fullscreen in the current environment. If any of your state has changed that may impact this, call @B_android#inputmethodservice#InputMethodService#updateFullscreenMode_E@ to have it re-evaluated. The default implementation selects fullscreen mode when the screen is in a landscape orientation, which is appropriate behavior for most input methods that have a significant input area. When in fullscreen mode, you have some special requirements because the user can not see the application UI. In particular, you should implement @B_android#inputmethodservice#InputMethodService#onDisplayCompletions_E@ to show completions generated by your application, typically in your candidates view like you would normally show candidates. The key part of an IME is of course generating text for the application. This is done through calls to the @B_android#view#inputmethod#InputConnection_E@ interface to the application, which can be retrieved from @B_android#inputmethodservice#InputMethodService#getCurrentInputConnection_E@. This interface allows you to generate raw key events or, if the target supports it, directly edit in strings of candidates and committed text. Information about what the target is expected and supports can be found through the @B_android#view#inputmethod#EditorInfo_E@ class, which is retrieved with @B_android#inputmethodservice#InputMethodService#getCurrentInputEditorInfo_E@ method. The most important part of this is @B_android#view#inputmethod#EditorInfo#inputType_E@; in particular, if this is @B_android#text#InputType#TYPE_NULL_E@, then the target does not support complex edits and you need to only deliver raw key events to it. An input method will also want to look at other values here, to for example detect password mode, auto complete text views, phone number entry, etc. When the user switches between input targets, you will receive calls to @B_android#inputmethodservice#InputMethodService#onFinishInput_E@ and @B_android#inputmethodservice#InputMethodService#onStartInput_E@. You can use these to reset and initialize your input state for the current target. For example, you will often want to clear any input state, and update a soft keyboard to be appropriate for the new inputType."}