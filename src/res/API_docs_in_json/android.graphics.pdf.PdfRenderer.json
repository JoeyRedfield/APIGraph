{"Functions": {"close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this renderer. You should not use this instance after this method is called.", "history": "Added in API level 21", "FullName": "public void close ()"}, "shouldScaleForPrinting()": {"Returns": [["boolean", "If to scale the document."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the document prefers to be scaled for printing. You should take this info account if the document is rendered for printing and the target media size differs from the page size.", "history": "Added in API level 21", "FullName": "public boolean shouldScaleForPrinting ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 21", "FullName": "protected void finalize ()"}, "getPageCount()": {"Returns": [["int", "The page count."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of pages in the document.", "history": "Added in API level 21", "FullName": "public int getPageCount ()"}, "openPage(int)": {"Returns": [["@B_android#graphics#pdf#PdfRenderer#Page_E@", "A page that can be rendered."]], "Parameters": [["int", "int: The page index."]], "Throws": [], "SeeAlso": ["@B_android#graphics#pdf#PdfRenderer#Page#close_E@"], "Permissions": [], "Description": "Opens a page for rendering.", "history": "Added in API level 21", "FullName": "public PdfRenderer.Page openPage (int index)"}, "PdfRenderer(android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: Seekable file descriptor to read from. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs while reading the file."], ["@B_java#lang#SecurityException_E@", "If the file requires a password or the security scheme is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance. If the file is from an untrusted source it is recommended to run the renderer in a separate, isolated process with minimal permissions to limit the impact of security exploits.", "history": "Added in API level 21", "FullName": "public PdfRenderer (ParcelFileDescriptor input)"}}, "Inheritance": [], "ClassName": "android.graphics.pdf.PdfRenderer", "ClassDesc": "This class enables rendering a PDF document. This class is not thread safe. If you want to render a PDF, you create a renderer and for every page you want to render, you open the page, render it, and close the page. After you are done with rendering, you close the renderer. After the renderer is closed it should not be used anymore. Note that the pages are rendered one by one, i.e. you can have only a single page opened at any given time. A typical use of the APIs to render a PDF looks like this: If you are using this class to rasterize a PDF for printing or show a print preview, it is recommended that you respect the following contract in order to provide a consistent user experience when seeing a preview and printing, i.e. the user sees a preview that is the same as the printout. Respect the property whether the document would like to be scaled for printing as per @B_android#graphics#pdf#PdfRenderer#shouldScaleForPrinting_E@. When scaling a document for printing the aspect ratio should be preserved. Do not inset the content with any margins from the @B_android#print#PrintAttributes_E@ as the application is responsible to render it such that the margins are respected. If document page size is greater than the printed media size the content should be anchored to the upper left corner of the page for left-to-right locales and top right corner for right-to-left locales."}