{"Functions": {"AuthSchemeBase()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AuthSchemeBase ()"}, "isProxy()": {"Returns": [["", "true if authenticating against a proxy, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if authenticating against a proxy, false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isProxy ()"}, "parseChallenge(org.apache.http.util.CharArrayBuffer, int, int)": {"Returns": [], "Parameters": [], "Throws": [["@B_org#apache#http#auth#MalformedChallengeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected abstract void parseChallenge (CharArrayBuffer buffer, int pos, int len)"}, "processChallenge(org.apache.http.Header)": {"Returns": [], "Parameters": [["@B_org#apache#http#Header_E@", "the challenge header"]], "Throws": [["@B_org#apache#http#auth#MalformedChallengeException_E@", "is thrown if the authentication challenge is malformed"]], "SeeAlso": [], "Permissions": [], "Description": "Processes the given challenge token. Some authentication schemes may involve multiple challenge-response exchanges. Such schemes must be able to maintain the state information when dealing with sequential challenges", "history": "Added in API level 1", "FullName": "public void processChallenge (Header header)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.auth.AuthSchemeBase", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Abstract authentication scheme class that serves as a basis for all authentication schemes supported by HttpClient. This class defines the generic way of parsing an authentication challenge. It does not make any assumptions regarding the format of the challenge nor does it impose any specific way of responding to that challenge."}