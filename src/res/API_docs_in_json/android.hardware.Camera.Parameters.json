{"Functions": {"getSupportedColorEffects()": {"Returns": [["@B_java#util#List_E@", "a list of supported color effects. null if color effect setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getColorEffect_E@"], "Permissions": [], "Description": "Gets the supported color effects.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedColorEffects ()"}, "set(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"], ["int", "int: the int value of the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets an integer parameter.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void set (String key, int value)"}, "setAutoExposureLock(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: new state of the auto-exposure lock. True means that auto-exposure is locked, false means that the auto-exposure routine is free to run normally."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getAutoExposureLock_E@"], "Permissions": [], "Description": "Sets the auto-exposure lock state. Applications should check @B_android#hardware#Camera#Parameters#isAutoExposureLockSupported_E@ before using this method. If set to true, the camera auto-exposure routine will immediately pause until the lock is set to false. Exposure compensation settings changes will still take effect while auto-exposure is locked. If auto-exposure is already locked, setting this to true again has no effect (the driver will not recalculate exposure values). Stopping preview with @B_android#hardware#Camera#stopPreview_E@, or triggering still image capture with @B_android#hardware#Camera#takePicture_E@, will not change the lock. Exposure compensation, auto-exposure lock, and auto-white balance lock can be used to capture an exposure-bracketed burst of images, for example. Auto-exposure state, including the lock state, will not be maintained after camera @B_android#hardware#Camera#release_E@ is called. Locking auto-exposure after @B_android#hardware#Camera#open_E@ but before the first call to @B_android#hardware#Camera#startPreview_E@ will not allow the auto-exposure routine to run at all, and may result in severely over- or under-exposed images.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setAutoExposureLock (boolean toggle)"}, "setMeteringAreas(java.util.List<android.hardware.Camera.Area>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the metering areas"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getMeteringAreas_E@"], "Permissions": [], "Description": "Sets metering areas. See @B_android#hardware#Camera#Parameters#getMeteringAreas_E@ for documentation.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setMeteringAreas (List<Camera.Area> meteringAreas)"}, "getVerticalViewAngle()": {"Returns": [["float", "vertical angle of view. Returns -1.0 when the device doesn't report view angle information."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vertical angle of view in degrees.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public float getVerticalViewAngle ()"}, "getZoomRatios()": {"Returns": [["@B_java#util#List_E@", "the zoom ratios in 1/100 increments. Ex: a zoom of 3.2x is returned as 320. The number of elements is @B_android#hardware#Camera#Parameters#getMaxZoom_E@ + 1. The list is sorted from small to large. The first element is always 100. The last element is the zoom ratio of the maximum zoom value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zoom ratios of all zoom values. Applications should check @B_android#hardware#Camera#Parameters#isZoomSupported_E@ before using this method.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public List<Integer> getZoomRatios ()"}, "setRecordingHint(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the apps intend to record videos using @B_android#media#MediaRecorder_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets recording mode hint. This tells the camera that the intent of the application is to record videos @B_android#media#MediaRecorder#start_E@, not to take still pictures @B_android#hardware#Camera#takePicture_E@. Using this hint can allow MediaRecorder.start() to start faster or with fewer glitches on output. This should be called before starting preview for the best result, but can be changed while the preview is active. The default value is false. The app can still call takePicture() when the hint is true or call MediaRecorder.start() when the hint is false. But the performance may be worse.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setRecordingHint (boolean hint)"}, "setZoom(int)": {"Returns": [], "Parameters": [["int", "int: zoom value. The valid range is 0 to @B_android#hardware#Camera#Parameters#getMaxZoom_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets current zoom value. If the camera is zoomed (value > 0), the actual picture size may be smaller than picture size setting. Applications can check the actual picture size after picture is returned from @B_android#hardware#Camera#PictureCallback_E@. The preview size remains the same in zoom. Applications should check @B_android#hardware#Camera#Parameters#isZoomSupported_E@ before using this method.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public void setZoom (int value)"}, "setAutoWhiteBalanceLock(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: new state of the auto-white balance lock. True means that auto-white balance is locked, false means that the auto-white balance routine is free to run normally."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getAutoWhiteBalanceLock_E@", "@B_android#hardware#Camera#Parameters#setWhiteBalance_E@"], "Permissions": [], "Description": "Sets the auto-white balance lock state. Applications should check @B_android#hardware#Camera#Parameters#isAutoWhiteBalanceLockSupported_E@ before using this method. If set to true, the camera auto-white balance routine will immediately pause until the lock is set to false. If auto-white balance is already locked, setting this to true again has no effect (the driver will not recalculate white balance values). Stopping preview with @B_android#hardware#Camera#stopPreview_E@, or triggering still image capture with @B_android#hardware#Camera#takePicture_E@, will not change the the lock. Changing the white balance mode with @B_android#hardware#Camera#Parameters#setWhiteBalance_E@ will release the auto-white balance lock if it is set. Exposure compensation, AE lock, and AWB lock can be used to capture an exposure-bracketed burst of images, for example. Auto-white balance state, including the lock state, will not be maintained after camera @B_android#hardware#Camera#release_E@ is called. Locking auto-white balance after @B_android#hardware#Camera#open_E@ but before the first call to @B_android#hardware#Camera#startPreview_E@ will not allow the auto-white balance routine to run at all, and may result in severely incorrect color in captured images.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setAutoWhiteBalanceLock (boolean toggle)"}, "setGpsTimestamp(long)": {"Returns": [], "Parameters": [["long", "long: GPS timestamp (UTC in seconds since January 1, 1970)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets GPS timestamp. This will be stored in JPEG EXIF header.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setGpsTimestamp (long timestamp)"}, "set(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"], ["int", "int: the int value of the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets an integer parameter.", "history": "added in API level 1", "FullName": "public void set (String key, int value)"}, "getMeteringAreas()": {"Returns": [["@B_java#util#List_E@", "a list of current metering areas"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or @B_android#hardware#Camera#Parameters#setMeteringAreas_E@, apps should call @B_android#hardware#Camera#Parameters#getMaxNumMeteringAreas_E@ to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of @B_android#hardware#Camera#setDisplayOrientation_E@. Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (@B_android#hardware#Camera#Parameters#getZoom_E@). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by @B_android#hardware#Camera#Parameters#setExposureCompensation_E@.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public List<Camera.Area> getMeteringAreas ()"}, "get(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the String value of the parameter"]], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of a String parameter.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public String get (String key)"}, "isAutoWhiteBalanceLockSupported()": {"Returns": [["boolean", "true if auto-white balance lock is supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@"], "Permissions": [], "Description": "Returns true if auto-white balance locking is supported. Applications should call this before trying to lock auto-white balance. See @B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@ for details about the lock.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public boolean isAutoWhiteBalanceLockSupported ()"}, "setExposureCompensation(int)": {"Returns": [], "Parameters": [["int", "int: exposure compensation index. The valid value range is from @B_android#hardware#Camera#Parameters#getMinExposureCompensation_E@ (inclusive) to @B_android#hardware#Camera#Parameters#getMaxExposureCompensation_E@ (inclusive). 0 means exposure is not adjusted. Application should call getMinExposureCompensation and getMaxExposureCompensation to know if exposure compensation is supported."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the exposure compensation index.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public void setExposureCompensation (int value)"}, "isZoomSupported()": {"Returns": [["boolean", "true if zoom is supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if zoom is supported. Applications should call this before using other zoom methods.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public boolean isZoomSupported ()"}, "getPreferredPreviewSizeForVideo()": {"Returns": [["@B_android#hardware#Camera#Size_E@", "the preferred preview size (width and height) in pixels for video recording if getSupportedVideoSizes() does not return null; otherwise, null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getSupportedVideoSizes_E@"], "Permissions": [], "Description": "Returns the preferred or recommended preview size (width and height) in pixels for video recording. Camcorder applications should set the preview size to a value that is not larger than the preferred preview size. In other words, the product of the width and height of the preview size should not be larger than that of the preferred preview size. In addition, we recommend to choose a preview size that has the same aspect ratio as the resolution of video to be recorded.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public Camera.Size getPreferredPreviewSizeForVideo ()"}, "getSupportedPictureFormats()": {"Returns": [["@B_java#util#List_E@", "supported picture formats. This method will always return a list with at least one element."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@"], "Permissions": [], "Description": "Gets the supported picture formats.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<Integer> getSupportedPictureFormats ()"}, "getMaxZoom()": {"Returns": [["int", "the maximum zoom value supported by the camera."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the maximum zoom value allowed for snapshot. This is the maximum value that applications can set to @B_android#hardware#Camera#Parameters#setZoom_E@. Applications should call @B_android#hardware#Camera#Parameters#isZoomSupported_E@ before using this method. This value may change in different preview size. Applications should call this again after setting preview size.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public int getMaxZoom ()"}, "setJpegThumbnailQuality(int)": {"Returns": [], "Parameters": [["int", "int: the JPEG quality of the EXIF thumbnail. The range is 1 to 100, with 100 being the best."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the quality of the EXIF thumbnail in Jpeg picture.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setJpegThumbnailQuality (int quality)"}, "getSupportedVideoSizes()": {"Returns": [["@B_java#util#List_E@", "a list of Size object if camera has separate preview and video output; otherwise, null is returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getPreferredPreviewSizeForVideo_E@"], "Permissions": [], "Description": "Gets the supported video frame sizes that can be used by MediaRecorder. If the returned list is not null, the returned list will contain at least one Size and one of the sizes in the returned list must be passed to MediaRecorder.setVideoSize() for camcorder application if camera is used as the video source. In this case, the size of the preview can be different from the resolution of the recorded video during video recording. Exception on 176x144 (QCIF) resolution: Camera devices usually have a fixed capability for downscaling from larger resolution to smaller, and the QCIF resolution sometimes is not fully supported due to this limitation on devices with high-resolution image sensors. Therefore, trying to configure a QCIF video resolution with any preview or picture size larger than 1920x1080 (either width or height) might not be supported, and @B_android#hardware#Camera#setParameters_E@ will throw a RuntimeException if it is not.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public List<Camera.Size> getSupportedVideoSizes ()"}, "getPreviewSize()": {"Returns": [["@B_android#hardware#Camera#Size_E@", "a Size object with the width and height setting for the preview picture"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the dimensions setting for preview pictures.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public Camera.Size getPreviewSize ()"}, "getSupportedJpegThumbnailSizes()": {"Returns": [["@B_java#util#List_E@", "a list of Size object. This method will always return a list with at least two elements. Size 0,0 (no thumbnail) is always supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the supported jpeg thumbnail sizes.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public List<Camera.Size> getSupportedJpegThumbnailSizes ()"}, "setFocusMode(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: focus mode."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFocusMode_E@"], "Permissions": [], "Description": "Sets the focus mode.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setFocusMode (String value)"}, "getExposureCompensationStep()": {"Returns": [["float", "exposure compensation step. Applications can get EV by multiplying the exposure compensation index and step. Ex: if exposure compensation index is -6 and step is 0.333333333, EV is -2."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the exposure compensation step.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public float getExposureCompensationStep ()"}, "setAntibanding(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: new antibanding value."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getAntibanding_E@"], "Permissions": [], "Description": "Sets the antibanding.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setAntibanding (String antibanding)"}, "getSupportedPreviewFpsRange()": {"Returns": [["@B_java#util#List_E@", "a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps)."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public List<int[]> getSupportedPreviewFpsRange ()"}, "setGpsAltitude(double)": {"Returns": [], "Parameters": [["double", "double: GPS altitude in meters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets GPS altitude. This will be stored in JPEG EXIF header.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setGpsAltitude (double altitude)"}, "getSupportedPictureSizes()": {"Returns": [["@B_java#util#List_E@", "a list of supported picture sizes. This method will always return a list with at least one element."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the supported picture sizes.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<Camera.Size> getSupportedPictureSizes ()"}, "getFocusDistances(float[])": {"Returns": [], "Parameters": [["float[]", "float: focus distances in meters. output must be a float array with three elements. Near focus distance, optimal focus distance, and far focus distance will be filled in the array."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the distances from the camera to where an object appears to be in focus. The object is sharpest at the optimal focus distance. The depth of field is the far focus distance minus near focus distance. Focus distances may change after calling @B_android#hardware#Camera#autoFocus_E@, @B_android#hardware#Camera#cancelAutoFocus_E@, or @B_android#hardware#Camera#startPreview_E@. Applications can call @B_android#hardware#Camera#getParameters_E@ and this method anytime to get the latest focus distances. If the focus mode is FOCUS_MODE_CONTINUOUS_VIDEO, focus distances may change from time to time. This method is intended to estimate the distance between the camera and the subject. After autofocus, the subject distance may be within near and far focus distance. However, the precision depends on the camera hardware, autofocus algorithm, the focus area, and the scene. The error can be large and it should be only used as a reference. Far focus distance >= optimal focus distance >= near focus distance. If the focus distance is infinity, the value will be Float.POSITIVE_INFINITY.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public void getFocusDistances (float[] output)"}, "setPreviewSize(int,int)": {"Returns": [], "Parameters": [["int", "int: the width of the pictures, in pixels"], ["int", "int: the height of the pictures, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#setDisplayOrientation_E@", "@B_android#hardware#Camera#getCameraInfo_E@", "@B_android#hardware#Camera#Parameters#setPictureSize_E@", "@B_android#hardware#Camera#Parameters#setJpegThumbnailSize_E@"], "Permissions": [], "Description": "Sets the dimensions for preview pictures. If the preview has already started, applications should stop the preview first before changing preview size. The sides of width and height are based on camera orientation. That is, the preview size is the size before it is rotated by display orientation. So applications need to consider the display orientation while setting preview size. For example, suppose the camera supports both 480x320 and 320x480 preview sizes. The application wants a 3:2 preview ratio. If the display orientation is set to 0 or 180, preview size should be set to 480x320. If the display orientation is set to 90 or 270, preview size should be set to 320x480. The display orientation should also be considered while setting picture size and thumbnail size. Exception on 176x144 (QCIF) resolution: Camera devices usually have a fixed capability for downscaling from larger resolution to smaller, and the QCIF resolution sometimes is not fully supported due to this limitation on devices with high-resolution image sensors. Therefore, trying to configure a QCIF preview size with any picture or video size larger than 1920x1080 (either width or height) might not be supported, and @B_android#hardware#Camera#setParameters_E@ might throw a RuntimeException if it is not.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setPreviewSize (int width, int height)"}, "setPreviewFpsRange(int, int)": {"Returns": [], "Parameters": [["int", "int: the minimum preview fps (scaled by 1000)."], ["int", "int: the maximum preview fps (scaled by 1000)."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if fps range is invalid."]], "SeeAlso": ["@B_android#hardware#Camera#setPreviewCallbackWithBuffer_E@", "@B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@"], "Permissions": [], "Description": "Sets the minimum and maximum preview fps. This controls the rate of preview frames received in @B_android#hardware#Camera#PreviewCallback_E@. The minimum and maximum preview fps must be one of the elements from @B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@.", "history": "added in API level 9", "FullName": "public void setPreviewFpsRange (int min, int max)"}, "getZoom()": {"Returns": [["int", "the current zoom value. The range is 0 to @B_android#hardware#Camera#Parameters#getMaxZoom_E@. 0 means the camera is not zoomed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets current zoom value. This also works when smooth zoom is in progress. Applications should check @B_android#hardware#Camera#Parameters#isZoomSupported_E@ before using this method.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public int getZoom ()"}, "getVideoStabilization()": {"Returns": [["boolean", "true if video stabilization is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#isVideoStabilizationSupported_E@", "@B_android#hardware#Camera#Parameters#setVideoStabilization_E@"], "Permissions": [], "Description": "Get the current state of video stabilization. See @B_android#hardware#Camera#Parameters#setVideoStabilization_E@ for details of video stabilization.", "history": "Added in API level 15 Deprecated in API level 21", "FullName": "public boolean getVideoStabilization ()"}, "getPictureFormat()": {"Returns": [["int", "the picture format"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@"], "Permissions": [], "Description": "Returns the image format for pictures.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public int getPictureFormat ()"}, "remove(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void remove (String key)"}, "getColorEffect()": {"Returns": [["@B_java#lang#String_E@", "current color effect. null if color effect setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current color effect setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getColorEffect ()"}, "getPictureSize()": {"Returns": [["@B_android#hardware#Camera#Size_E@", "a Size object with the height and width setting for pictures"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the dimension setting for pictures.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public Camera.Size getPictureSize ()"}, "getSupportedFocusModes()": {"Returns": [["@B_java#util#List_E@", "a list of supported focus modes. This method will always return a list with at least one element."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFocusMode_E@"], "Permissions": [], "Description": "Gets the supported focus modes.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedFocusModes ()"}, "isAutoExposureLockSupported()": {"Returns": [["boolean", "true if auto-exposure lock is supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setAutoExposureLock_E@"], "Permissions": [], "Description": "Returns true if auto-exposure locking is supported. Applications should call this before trying to lock auto-exposure. See @B_android#hardware#Camera#Parameters#setAutoExposureLock_E@ for details about the lock.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public boolean isAutoExposureLockSupported ()"}, "getWhiteBalance()": {"Returns": [["@B_java#lang#String_E@", "current white balance. null if white balance setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current white balance setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getWhiteBalance ()"}, "setPreviewFormat(int)": {"Returns": [], "Parameters": [["int", "int: the desired preview picture format, defined by one of the @B_android#graphics#ImageFormat_E@ constants. (E.g., ImageFormat.NV21 (default), or ImageFormat.YV12)"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#hardware#Camera#Parameters#getSupportedPreviewFormats_E@"], "Permissions": [], "Description": "Sets the image format for preview pictures. If this is never called, the default format will be @B_android#graphics#ImageFormat#NV21_E@, which uses the NV21 encoding format. Use @B_android#hardware#Camera#Parameters#getSupportedPreviewFormats_E@ to get a list of the available preview formats. It is strongly recommended that either @B_android#graphics#ImageFormat#NV21_E@ or @B_android#graphics#ImageFormat#YV12_E@ is used, since they are supported by all camera devices. For YV12, the image buffer that is received is not necessarily tightly packed, as there may be padding at the end of each row of pixel data, as described in @B_android#graphics#ImageFormat#YV12_E@. For camera callback data, it can be assumed that the stride of the Y and UV data is the smallest possible that meets the alignment requirements. That is, if the preview size is", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setPreviewFormat (int pixel_format)"}, "setColorEffect(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: new color effect."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getColorEffect_E@"], "Permissions": [], "Description": "Sets the current color effect setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setColorEffect (String value)"}, "setFlashMode(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: flash mode."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFlashMode_E@"], "Permissions": [], "Description": "Sets the flash mode.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setFlashMode (String value)"}, "getAutoWhiteBalanceLock()": {"Returns": [["boolean", "State of the auto-white balance lock. Returns true if auto-white balance is currently locked, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@"], "Permissions": [], "Description": "Gets the state of the auto-white balance lock. Applications should check @B_android#hardware#Camera#Parameters#isAutoWhiteBalanceLockSupported_E@ before using this method. See @B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@ for details about the lock.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public boolean getAutoWhiteBalanceLock ()"}, "getSupportedFlashModes()": {"Returns": [["@B_java#util#List_E@", "a list of supported flash modes. null if flash mode setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFlashMode_E@"], "Permissions": [], "Description": "Gets the supported flash modes.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedFlashModes ()"}, "getSupportedPreviewFrameRates()": {"Returns": [["@B_java#util#List_E@", "a list of supported preview frame rates. null if preview frame rate setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "replaced by @B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@ Gets the supported preview frame rates.", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public List<Integer> getSupportedPreviewFrameRates ()"}, "getMaxExposureCompensation()": {"Returns": [["int", "maximum exposure compensation index (>=0). If both this method and @B_android#hardware#Camera#Parameters#getMinExposureCompensation_E@ return 0, exposure compensation is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the maximum exposure compensation index.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public int getMaxExposureCompensation ()"}, "setJpegThumbnailSize(int,int)": {"Returns": [], "Parameters": [["int", "int: the width of the thumbnail, in pixels"], ["int", "int: the height of the thumbnail, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setPreviewSize_E@"], "Permissions": [], "Description": "Sets the dimensions for EXIF thumbnail in Jpeg picture. If applications set both width and height to 0, EXIF will not contain thumbnail. Applications need to consider the display orientation. See @B_android#hardware#Camera#Parameters#setPreviewSize_E@ for reference.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setJpegThumbnailSize (int width, int height)"}, "getFocusMode()": {"Returns": [["@B_java#lang#String_E@", "current focus mode. This method will always return a non-null value. Applications should call @B_android#hardware#Camera#autoFocus_E@ to start the focus if focus mode is FOCUS_MODE_AUTO or FOCUS_MODE_MACRO."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current focus mode setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getFocusMode ()"}, "flatten()": {"Returns": [["@B_java#lang#String_E@", "a String with all values from this Parameters object, in semi-colon delimited key-value pairs"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a single string with all the parameters set in this Parameters object. The @B_android#hardware#Camera#Parameters#unflatten_E@ method does the reverse.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public String flatten ()"}, "setPictureSize(int,int)": {"Returns": [], "Parameters": [["int", "int: the width for pictures, in pixels"], ["int", "int: the height for pictures, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setPreviewSize_E@"], "Permissions": [], "Description": "Sets the dimensions for pictures. Applications need to consider the display orientation. See @B_android#hardware#Camera#Parameters#setPreviewSize_E@ for reference. Exception on 176x144 (QCIF) resolution: Camera devices usually have a fixed capability for downscaling from larger resolution to smaller, and the QCIF resolution sometimes is not fully supported due to this limitation on devices with high-resolution image sensors. Therefore, trying to configure a QCIF picture size with any preview or video size larger than 1920x1080 (either width or height) might not be supported, and @B_android#hardware#Camera#setParameters_E@ might throw a RuntimeException if it is not.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setPictureSize (int width, int height)"}, "getPreviewFpsRange(int[])": {"Returns": [["void", "range the minimum and maximum preview fps (scaled by 1000)."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@", "@B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@"], "Permissions": [], "Description": "Returns the current minimum and maximum preview fps. The values are one of the elements returned by @B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public void getPreviewFpsRange (int[] range)"}, "set(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"], ["@B_java#lang#String_E@", "String: the String value of the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a String parameter.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void set (String key, String value)"}, "getMaxNumFocusAreas()": {"Returns": [["int", "the maximum number of focus areas supported by the camera."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFocusAreas_E@"], "Permissions": [], "Description": "Gets the maximum number of focus areas supported. This is the maximum length of the list in @B_android#hardware#Camera#Parameters#setFocusAreas_E@ and @B_android#hardware#Camera#Parameters#getFocusAreas_E@.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public int getMaxNumFocusAreas ()"}, "setPictureSize(int, int)": {"Returns": [], "Parameters": [["int", "int: the width for pictures, in pixels"], ["int", "int: the height for pictures, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setPreviewSize_E@"], "Permissions": [], "Description": "Sets the dimensions for pictures. Applications need to consider the display orientation. See @B_android#hardware#Camera#Parameters#setPreviewSize_E@ for reference.", "history": "added in API level 1", "FullName": "public void setPictureSize (int width, int height)"}, "getFocusAreas()": {"Returns": [["@B_java#util#List_E@", "a list of current focus areas"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or @B_android#hardware#Camera#Parameters#setFocusAreas_E@, apps should call @B_android#hardware#Camera#Parameters#getMaxNumFocusAreas_E@ to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of @B_android#hardware#Camera#setDisplayOrientation_E@. Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (@B_android#hardware#Camera#Parameters#getZoom_E@). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is @B_android#hardware#Camera#Parameters#FOCUS_MODE_AUTO_E@, @B_android#hardware#Camera#Parameters#FOCUS_MODE_MACRO_E@, @B_android#hardware#Camera#Parameters#FOCUS_MODE_CONTINUOUS_VIDEO_E@, or @B_android#hardware#Camera#Parameters#FOCUS_MODE_CONTINUOUS_PICTURE_E@.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public List<Camera.Area> getFocusAreas ()"}, "set(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"], ["@B_java#lang#String_E@", "String: the String value of the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a String parameter.", "history": "added in API level 1", "FullName": "public void set (String key, String value)"}, "unflatten(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String of parameters (key-value paired) that are semi-colon delimited"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Takes a flattened string of parameters and adds each one to this Parameters object. The @B_android#hardware#Camera#Parameters#flatten_E@ method does the reverse.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void unflatten (String flattened)"}, "getSupportedPreviewSizes()": {"Returns": [["@B_java#util#List_E@", "a list of Size object. This method will always return a list with at least one element."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the supported preview sizes.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<Camera.Size> getSupportedPreviewSizes ()"}, "setGpsLongitude(double)": {"Returns": [], "Parameters": [["double", "double: GPS longitude coordinate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets GPS longitude coordinate. This will be stored in JPEG EXIF header.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setGpsLongitude (double longitude)"}, "getAutoExposureLock()": {"Returns": [["boolean", "State of the auto-exposure lock. Returns true if auto-exposure is currently locked, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setAutoExposureLock_E@"], "Permissions": [], "Description": "Gets the state of the auto-exposure lock. Applications should check @B_android#hardware#Camera#Parameters#isAutoExposureLockSupported_E@ before using this method. See @B_android#hardware#Camera#Parameters#setAutoExposureLock_E@ for details about the lock.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public boolean getAutoExposureLock ()"}, "getMinExposureCompensation()": {"Returns": [["int", "minimum exposure compensation index (<=0). If both this method and @B_android#hardware#Camera#Parameters#getMaxExposureCompensation_E@ return 0, exposure compensation is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minimum exposure compensation index.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public int getMinExposureCompensation ()"}, "getInt(java.lang.String)": {"Returns": [["int", "the int value of the parameter"]], "Parameters": [["@B_java#lang#String_E@", "String: the key name for the parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of an integer parameter.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public int getInt (String key)"}, "setJpegQuality(int)": {"Returns": [], "Parameters": [["int", "int: the JPEG quality of captured picture. The range is 1 to 100, with 100 being the best."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets Jpeg quality of captured picture.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setJpegQuality (int quality)"}, "getFocalLength()": {"Returns": [["float", "the focal length. Returns -1.0 when the device doesn't report focal length information."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the focal length (in millimeter) of the camera.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public float getFocalLength ()"}, "setRotation(int)": {"Returns": [], "Parameters": [["int", "int: The rotation angle in degrees relative to the orientation of the camera. Rotation can only be 0, 90, 180 or 270."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if rotation value is invalid."]], "SeeAlso": ["@B_android#view#OrientationEventListener_E@", "@B_android#hardware#Camera#getCameraInfo_E@"], "Permissions": [], "Description": "Sets the clockwise rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG @B_android#hardware#Camera#PictureCallback_E@. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). If applications want to rotate the picture to match the orientation of what users see, apps should use @B_android#view#OrientationEventListener_E@ and @B_android#hardware#Camera#CameraInfo_E@. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.orientation is the angle between camera orientation and natural device orientation. The sum of the two is the rotation angle for back-facing camera. The difference of the two is the rotation angle for front-facing camera. Note that the JPEG pictures of front-facing cameras are not mirrored as in preview display. For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose a back-facing camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). The reference code is as follows.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setRotation (int rotation)"}, "setSceneMode(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: scene mode."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getSceneMode_E@"], "Permissions": [], "Description": "Sets the scene mode. Changing scene mode may override other parameters (such as flash mode, focus mode, white balance). For example, suppose originally flash mode is on and supported flash modes are on/off. In night scene mode, both flash mode and supported flash mode may be changed to off. After setting scene mode, applications should call getParameters to know if some parameters are changed.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setSceneMode (String value)"}, "getSupportedAntibanding()": {"Returns": [["@B_java#util#List_E@", "a list of supported antibanding values. null if antibanding setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getAntibanding_E@"], "Permissions": [], "Description": "Gets the supported antibanding values.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedAntibanding ()"}, "getPreviewFrameRate()": {"Returns": [["int", "the frame rate setting (frames per second)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "replaced by @B_android#hardware#Camera#Parameters#getPreviewFpsRange_E@ Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getPreviewFrameRate ()"}, "getPreviewFormat()": {"Returns": [["int", "the preview format."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#hardware#Camera#Parameters#setPreviewFormat_E@"], "Permissions": [], "Description": "Returns the image format for preview frames got from @B_android#hardware#Camera#PreviewCallback_E@.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public int getPreviewFormat ()"}, "setPreviewFrameRate(int)": {"Returns": [], "Parameters": [["int", "int: the frame rate (frames per second)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "replaced by @B_android#hardware#Camera#Parameters#setPreviewFpsRange_E@ Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setPreviewFrameRate (int fps)"}, "isSmoothZoomSupported()": {"Returns": [["boolean", "true if smooth zoom is supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if smooth zoom is supported. Applications should call this before using other smooth zoom methods.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public boolean isSmoothZoomSupported ()"}, "getJpegQuality()": {"Returns": [["int", "the JPEG picture quality setting."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the quality setting for the JPEG picture.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public int getJpegQuality ()"}, "setFocusAreas(java.util.List<android.hardware.Camera.Area>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the focus areas"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getFocusAreas_E@"], "Permissions": [], "Description": "Sets focus areas. See @B_android#hardware#Camera#Parameters#getFocusAreas_E@ for documentation.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void setFocusAreas (List<Camera.Area> focusAreas)"}, "getMaxNumDetectedFaces()": {"Returns": [["int", "the maximum number of detected face supported by the camera."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#startFaceDetection_E@"], "Permissions": [], "Description": "Gets the maximum number of detected faces supported. This is the maximum length of the list returned from @B_android#hardware#Camera#FaceDetectionListener_E@. If the return value is 0, face detection of the specified type is not supported.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public int getMaxNumDetectedFaces ()"}, "getSupportedSceneModes()": {"Returns": [["@B_java#util#List_E@", "a list of supported scene modes. null if scene mode setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getSceneMode_E@"], "Permissions": [], "Description": "Gets the supported scene modes.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedSceneModes ()"}, "setGpsLatitude(double)": {"Returns": [], "Parameters": [["double", "double: GPS latitude coordinate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets GPS latitude coordinate. This will be stored in JPEG EXIF header.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setGpsLatitude (double latitude)"}, "getFlashMode()": {"Returns": [["@B_java#lang#String_E@", "current flash mode. null if flash mode setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current flash mode setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getFlashMode ()"}, "setVideoStabilization(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true to enable video stabilization, and false to disable video stabilization."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#isVideoStabilizationSupported_E@", "@B_android#hardware#Camera#Parameters#getVideoStabilization_E@"], "Permissions": [], "Description": "Enables and disables video stabilization. Use @B_android#hardware#Camera#Parameters#isVideoStabilizationSupported_E@ to determine if calling this method is valid. Video stabilization reduces the shaking due to the motion of the camera in both the preview stream and in recorded videos, including data received from the preview callback. It does not reduce motion blur in images captured with @B_android#hardware#Camera#takePicture_E@. Video stabilization can be enabled and disabled while preview or recording is active, but toggling it may cause a jump in the video stream that may be undesirable in a recorded video.", "history": "Added in API level 15 Deprecated in API level 21", "FullName": "public void setVideoStabilization (boolean toggle)"}, "getMaxNumMeteringAreas()": {"Returns": [["int", "the maximum number of metering areas supported by the camera."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getMeteringAreas_E@"], "Permissions": [], "Description": "Gets the maximum number of metering areas supported. This is the maximum length of the list in @B_android#hardware#Camera#Parameters#setMeteringAreas_E@ and @B_android#hardware#Camera#Parameters#getMeteringAreas_E@.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public int getMaxNumMeteringAreas ()"}, "setWhiteBalance(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: new white balance."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getWhiteBalance_E@", "@B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@"], "Permissions": [], "Description": "Sets the white balance. Changing the setting will release the auto-white balance lock. It is recommended not to change white balance and AWB lock at the same time.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void setWhiteBalance (String value)"}, "getHorizontalViewAngle()": {"Returns": [["float", "horizontal angle of view. Returns -1.0 when the device doesn't report view angle information."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the horizontal angle of view in degrees.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public float getHorizontalViewAngle ()"}, "getJpegThumbnailSize()": {"Returns": [["@B_android#hardware#Camera#Size_E@", "a Size object with the height and width setting for the EXIF thumbnails"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the dimensions for EXIF thumbnail in Jpeg picture.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public Camera.Size getJpegThumbnailSize ()"}, "setPreviewSize(int, int)": {"Returns": [], "Parameters": [["int", "int: the width of the pictures, in pixels"], ["int", "int: the height of the pictures, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#setDisplayOrientation_E@", "@B_android#hardware#Camera#getCameraInfo_E@", "@B_android#hardware#Camera#Parameters#setPictureSize_E@", "@B_android#hardware#Camera#Parameters#setJpegThumbnailSize_E@"], "Permissions": [], "Description": "Sets the dimensions for preview pictures. If the preview has already started, applications should stop the preview first before changing preview size. The sides of width and height are based on camera orientation. That is, the preview size is the size before it is rotated by display orientation. So applications need to consider the display orientation while setting preview size. For example, suppose the camera supports both 480x320 and 320x480 preview sizes. The application wants a 3:2 preview ratio. If the display orientation is set to 0 or 180, preview size should be set to 480x320. If the display orientation is set to 90 or 270, preview size should be set to 320x480. The display orientation should also be considered while setting picture size and thumbnail size.", "history": "added in API level 1", "FullName": "public void setPreviewSize (int width, int height)"}, "isVideoStabilizationSupported()": {"Returns": [["boolean", "true if video stabilization is supported"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setVideoStabilization_E@", "@B_android#hardware#Camera#Parameters#getVideoStabilization_E@"], "Permissions": [], "Description": "Returns true if video stabilization is supported. See @B_android#hardware#Camera#Parameters#setVideoStabilization_E@ for details of video stabilization.", "history": "Added in API level 15 Deprecated in API level 21", "FullName": "public boolean isVideoStabilizationSupported ()"}, "getAntibanding()": {"Returns": [["@B_java#lang#String_E@", "current antibanding. null if antibanding setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current antibanding setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getAntibanding ()"}, "getSupportedPreviewFormats()": {"Returns": [["@B_java#util#List_E@", "a list of supported preview formats. This method will always return a list with at least one element."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#hardware#Camera#Parameters#setPreviewFormat_E@"], "Permissions": [], "Description": "Gets the supported preview formats. @B_android#graphics#ImageFormat#NV21_E@ is always supported. @B_android#graphics#ImageFormat#YV12_E@ is always supported since API level 12.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<Integer> getSupportedPreviewFormats ()"}, "getExposureCompensation()": {"Returns": [["int", "current exposure compensation index. The range is @B_android#hardware#Camera#Parameters#getMinExposureCompensation_E@ to @B_android#hardware#Camera#Parameters#getMaxExposureCompensation_E@. 0 means exposure is not adjusted."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current exposure compensation index.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public int getExposureCompensation ()"}, "setJpegThumbnailSize(int, int)": {"Returns": [], "Parameters": [["int", "int: the width of the thumbnail, in pixels"], ["int", "int: the height of the thumbnail, in pixels"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#setPreviewSize_E@"], "Permissions": [], "Description": "Sets the dimensions for EXIF thumbnail in Jpeg picture. If applications set both width and height to 0, EXIF will not contain thumbnail. Applications need to consider the display orientation. See @B_android#hardware#Camera#Parameters#setPreviewSize_E@ for reference.", "history": "added in API level 5", "FullName": "public void setJpegThumbnailSize (int width, int height)"}, "setPictureFormat(int)": {"Returns": [], "Parameters": [["int", "int: the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG)"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@"], "Permissions": [], "Description": "Sets the image format for pictures.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setPictureFormat (int pixel_format)"}, "setPreviewFpsRange(int,int)": {"Returns": [], "Parameters": [["int", "int: the minimum preview fps (scaled by 1000)."], ["int", "int: the maximum preview fps (scaled by 1000)."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if fps range is invalid."]], "SeeAlso": ["@B_android#hardware#Camera#setPreviewCallbackWithBuffer_E@", "@B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@"], "Permissions": [], "Description": "Sets the minimum and maximum preview fps. This controls the rate of preview frames received in @B_android#hardware#Camera#PreviewCallback_E@. The minimum and maximum preview fps must be one of the elements from @B_android#hardware#Camera#Parameters#getSupportedPreviewFpsRange_E@.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public void setPreviewFpsRange (int min, int max)"}, "getSceneMode()": {"Returns": [["@B_java#lang#String_E@", "one of SCENE_MODE_XXX string constant. null if scene mode setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters_E@"], "Permissions": [], "Description": "Gets the current scene mode setting.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public String getSceneMode ()"}, "isVideoSnapshotSupported()": {"Returns": [["boolean", "true if video snapshot is supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if video snapshot is supported. That is, applications can call @B_android#hardware#Camera#takePicture_E@ during recording. Applications do not need to call @B_android#hardware#Camera#startPreview_E@ after taking a picture. The preview will be still active. Other than that, taking a picture during recording is identical to taking a picture normally. All settings and methods related to takePicture work identically. Ex: @B_android#hardware#Camera#Parameters#getPictureSize_E@, @B_android#hardware#Camera#Parameters#getSupportedPictureSizes_E@, @B_android#hardware#Camera#Parameters#setJpegQuality_E@, @B_android#hardware#Camera#Parameters#setRotation_E@, and etc. The picture will have an EXIF header. @B_android#hardware#Camera#Parameters#FLASH_MODE_AUTO_E@ and @B_android#hardware#Camera#Parameters#FLASH_MODE_ON_E@ also still work, but the video will record the flash. Applications can set shutter callback as null to avoid the shutter sound. It is also recommended to set raw picture and post view callbacks to null to avoid the interrupt of preview display. Field-of-view of the recorded video may be different from that of the captured pictures. The maximum size of a video snapshot may be smaller than that for regular still captures. If the current picture size is set higher than can be supported by video snapshot, the picture will be captured at the maximum supported size instead.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public boolean isVideoSnapshotSupported ()"}, "setGpsProcessingMethod(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The processing method to get this location."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets GPS processing method. The method will be stored in a UTF-8 string up to 31 bytes long, in the JPEG EXIF header.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public void setGpsProcessingMethod (String processing_method)"}, "getSupportedWhiteBalance()": {"Returns": [["@B_java#util#List_E@", "a list of supported white balance. null if white balance setting is not supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#Parameters#getWhiteBalance_E@"], "Permissions": [], "Description": "Gets the supported white balance.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public List<String> getSupportedWhiteBalance ()"}, "getJpegThumbnailQuality()": {"Returns": [["int", "the JPEG quality setting of the EXIF thumbnail."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the quality setting for the EXIF thumbnail in Jpeg picture.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public int getJpegThumbnailQuality ()"}, "removeGpsData()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes GPS latitude, longitude, altitude, and timestamp from the parameters.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public void removeGpsData ()"}}, "Inheritance": [], "ClassName": "android.hardware.Camera.Parameters", "ClassDesc": "We recommend using the new @B_android#hardware#camera2#package-summary_E@ API for new applications. Camera service settings. To make camera parameters take effect, applications have to call @B_android#hardware#Camera#setParameters_E@. For example, after @B_android#hardware#Camera#Parameters#setWhiteBalance_E@ is called, white balance is not actually changed until @B_android#hardware#Camera#setParameters_E@ is called with the changed parameters object. Different devices may have different camera capabilities, such as picture size or flash modes. The application should query the camera capabilities before setting parameters. For example, the application should call @B_android#hardware#Camera#Parameters#getSupportedColorEffects_E@ before calling @B_android#hardware#Camera#Parameters#setColorEffect_E@. If the camera does not support color effects, @B_android#hardware#Camera#Parameters#getSupportedColorEffects_E@ will return null."}