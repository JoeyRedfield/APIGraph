{"Functions": {"getBucketDuration(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bucket duration for this request in the given time unit.", "history": "", "FullName": "public long getBucketDuration (TimeUnit timeUnit)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getBucketType()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the", "history": "", "FullName": "public int getBucketType ()"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "getLimit()": {"Returns": [["", "the query limit, or @B_com#google#android#gms#fitness#request#DataReadRequest#NO_LIMIT_E@ if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the max number of data points to return in the result. If specified, only the latest data points up to the given limit will be read.", "history": "", "FullName": "public int getLimit ()"}, "getAggregatedDataSources()": {"Returns": [["", "the input data sources for aggregation, empty if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all of the data sources that will be read then aggregated as part of this request. Each data source will be read then aggregated as specified in @B_com#google#android#gms#fitness#request#DataReadRequest#Builder#aggregate_E@.", "history": "", "FullName": "public List<DataSource> getAggregatedDataSources ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getActivityDataSource()": {"Returns": [["", "the data source, or null if unset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data source used to get activity segments for creating buckets for data aggregation in this request. This data source is used when bucketing by", "history": "", "FullName": "public DataSource getActivityDataSource ()"}, "getDataTypes()": {"Returns": [["", "all specified data types, empty if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data types for which default data sources should be read in this request.", "history": "", "FullName": "public List<DataType> getDataTypes ()"}, "getStartTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start time for our query, in the specified time unit", "history": "", "FullName": "public long getStartTime (TimeUnit timeUnit)"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object that)"}, "getDataSources()": {"Returns": [["", "all specified data sources, empty if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data sources that should be read in this request.", "history": "", "FullName": "public List<DataSource> getDataSources ()"}, "getEndTime(java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end time for our query, in the specified time unit", "history": "", "FullName": "public long getEndTime (TimeUnit timeUnit)"}, "getAggregatedDataTypes()": {"Returns": [["", "the input data types for aggregation, empty if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all of the data types that will be read then aggregated as part of this request. The default data source for each data type will be read, then aggregated as specified in @B_com#google#android#gms#fitness#request#DataReadRequest#Builder#aggregate_E@.", "history": "", "FullName": "public List<DataType> getAggregatedDataTypes ()"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.request.DataReadRequest", "ClassDesc": "Request for reading data from Google Fit. Use this request to specify the data types to read, as well as aggregation parameters. Read requests require a time range and allow reading data in detailed or aggregated fashion. A single request can be used to read multiple data types and data sources together. the time interval for the data at least one data source or data type Example usage for reading location samples during an interval: @B_com#google#android#gms#fitness#data#Bucket#TYPE_TIME_E@, @B_com#google#android#gms#fitness#data#Bucket#TYPE_ACTIVITY_TYPE_E@, @B_com#google#android#gms#fitness#data#Bucket#TYPE_ACTIVITY_SEGMENT_E@, or @B_com#google#android#gms#fitness#data#Bucket#TYPE_SESSION_E@. Apps should also specify at least one input data source or data type to aggregate. See @B_com#google#android#gms#fitness#data#DataType#AGGREGATE_INPUT_TYPES_E@ for a list of valid input data types supported for aggregation. The aggregation request should specify: time interval for the data at least one input data source or data type to aggregate and its corresponding output bucketing strategy for aggregation Example usage for selecting location bounding boxes for each hour:"}