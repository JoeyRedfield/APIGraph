{"Functions": {"genKeyPair()": {"Returns": [["@B_java#security#KeyPair_E@", "the generated key pair"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to @B_java#security#KeyPairGenerator#generateKeyPair_E@.", "history": "Added in API level 1", "FullName": "public final KeyPair genKeyPair ()"}, "initialize(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the parameter set used to generate the keys."]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameters are inappropriate for this key pair generator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.). This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi @B_java#security#KeyPairGeneratorSpi#initialize_E@ method, passing it params and a source of randomness (obtained from the highest-priority installed provider or system-provided if none of the installed providers supply one). That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider.", "history": "Added in API level 1", "FullName": "public void initialize (AlgorithmParameterSpec params)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the standard string name of the algorithm."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the standard name of the algorithm for this key pair generator. See the KeyPairGenerator section in the", "history": "Added in API level 1", "FullName": "public String getAlgorithm ()"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#KeyPairGenerator_E@", "the new KeyPairGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the KeyPairGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyPairGeneratorSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static KeyPairGenerator getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this key pair generator object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this key pair generator object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#KeyPairGenerator_E@", "the new KeyPairGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the KeyPairGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the string name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyPairGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static KeyPairGenerator getInstance (String algorithm, String provider)"}, "generateKeyPair()": {"Returns": [["@B_java#security#KeyPair_E@", "the generated key pair"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to @B_java#security#KeyPairGenerator#genKeyPair_E@.", "history": "Added in API level 1", "FullName": "public KeyPair generateKeyPair ()"}, "KeyPairGenerator(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the KeyPairGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a KeyPairGenerator object for the specified algorithm.", "history": "Added in API level 1", "FullName": "protected KeyPairGenerator (String algorithm)"}, "initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the parameter set used to generate the keys."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameters are inappropriate for this key pair generator."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator with the given parameter set and source of randomness. This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi @B_java#security#KeyPairGeneratorSpi#initialize_E@ method, passing it params and random. That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider.", "history": "Added in API level 1", "FullName": "public void initialize (AlgorithmParameterSpec params, SecureRandom random)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#KeyPairGenerator_E@", "the new KeyPairGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the KeyPairGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a KeyPairGeneratorSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyPairGenerator getInstance (String algorithm)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#KeyPairGenerator_E@", "the new KeyPairGenerator object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the KeyPairGenerator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the string name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a KeyPairGeneratorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyPairGenerator getInstance (String algorithm, String provider)"}, "initialize(int, java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is not supported by this KeyPairGenerator object."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).", "history": "added in API level 1", "FullName": "public void initialize (int keysize, SecureRandom random)"}, "initialize(int,java.security.SecureRandom)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is not supported by this KeyPairGenerator object."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).", "history": "Added in API level 1", "FullName": "public void initialize (int keysize, SecureRandom random)"}, "initialize(int)": {"Returns": [], "Parameters": [["int", "int: the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the keysize is not supported by this KeyPairGenerator object."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.)", "history": "Added in API level 1", "FullName": "public void initialize (int keysize)"}}, "Inheritance": ["@B_java#security#KeyPairGeneratorSpi_E@"], "ClassName": "java.security.KeyPairGenerator", "ClassDesc": "The KeyPairGenerator class is used to generate pairs of public and private keys. Key pair generators are constructed using the getInstance factory methods (static methods that return instances of a given class). A Key pair generator for a particular algorithm creates a public/private key pair that can be used with this algorithm. It also associates algorithm-specific parameters with each of the generated keys. There are two ways to generate a key pair: in an algorithm-independent manner, and in an algorithm-specific manner. The only difference between the two is the initialization of the object: All key pair generators share the concepts of a keysize and a source of randomness. The keysize is interpreted differently for different algorithms (e.g., in the case of the @B_java#security#KeyPairGenerator#initialize_E@ method in this KeyPairGenerator class that takes these two universally shared types of arguments. There is also one that takes just a keysize argument, and uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.) Since no other parameters are specified when you call the above algorithm-independent initialize methods, it is up to the provider what to do about the algorithm-specific parameters (if any) to be associated with each of the keys. If the algorithm is the p, q, and g parameters. If the modulus size is not one of the above values, the For situations where a set of algorithm-specific parameters already exists (e.g., so-called @B_java#security#KeyPairGenerator#initialize_E@ methods that have an AlgorithmParameterSpec argument. One also has a SecureRandom argument, while the the other uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.) In case the client does not explicitly initialize the KeyPairGenerator (via a call to an initialize method), each provider must supply (and document) a default initialization. For example, the Note that this class is abstract and extends from KeyPairGeneratorSpi for historical reasons. Application developers should only take notice of the methods defined in this KeyPairGenerator class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of key pair generators. Android provides the following KeyPairGenerator algorithms:"}