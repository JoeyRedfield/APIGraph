{"Functions": {"startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)": {"Returns": [], "Parameters": [["@B_android#net#wifi#rtt#RangingRequest_E@", "RangingRequest: A request specifying a set of devices whose distance measurements are requested. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The Executor on which to run the callback. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#net#wifi#rtt#RangingResultCallback_E@", "RangingResultCallback: A callback for the result of the ranging request. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@", "@B_android#Manifest#permission#ACCESS_WIFI_STATE_E@"], "Description": "Initiate a request to range to a set of devices specified in the @B_android#net#wifi#rtt#RangingRequest_E@. Results will be returned in the @B_android#net#wifi#rtt#RangingResultCallback_E@ set of callbacks. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ and @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@ and @B_android#Manifest#permission#ACCESS_WIFI_STATE_E@", "history": "Added in API level 28", "FullName": "public void startRanging (RangingRequest request, Executor executor, RangingResultCallback callback)"}, "isAvailable()": {"Returns": [["boolean", "A boolean indicating whether the app can use the RTT API at this time (true) or not (false)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current status of RTT API: whether or not RTT is available. To track changes in the state of RTT API register for the @B_android#net#wifi#rtt#WifiRttManager#ACTION_WIFI_RTT_STATE_CHANGED_E@ broadcast. Note: availability of RTT does not mean that the app can use the API. The app's permissions and platform Location Mode are validated at run-time.", "history": "Added in API level 28", "FullName": "public boolean isAvailable ()"}}, "Inheritance": [], "ClassName": "android.net.wifi.rtt.WifiRttManager", "ClassDesc": "This class provides the primary API for measuring distance (range) to other devices using the IEEE 802.11mc Wi-Fi Round Trip Time (RTT) technology. The devices which can be ranged include: Access Points (APs) Wi-Fi Aware peers Ranging requests are triggered using @B_android#net#wifi#rtt#WifiRttManager#startRanging_E@. Results (in case of successful operation) are returned in the @B_android#net#wifi#rtt#RangingResultCallback#onRangingResults_E@ callback. Wi-Fi RTT may not be usable at some points, e.g. when Wi-Fi is disabled. To validate that the functionality is available use the @B_android#net#wifi#rtt#WifiRttManager#isAvailable_E@ function. To track changes in RTT usability register for the @B_android#net#wifi#rtt#WifiRttManager#ACTION_WIFI_RTT_STATE_CHANGED_E@ broadcast. Note that this broadcast is not sticky - you should register for it and then check the above API to avoid a race condition."}