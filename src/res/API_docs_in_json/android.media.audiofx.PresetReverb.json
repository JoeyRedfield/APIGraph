{"Functions": {"getProperties()": {"Returns": [["@B_android#media#audiofx#PresetReverb#Settings_E@", "a PresetReverb.Settings object containing all current parameters values"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the preset reverb properties. This method is useful when a snapshot of current preset reverb settings must be saved by the application.", "history": "Added in API level 9", "FullName": "public PresetReverb.Settings getProperties ()"}, "setProperties(android.media.audiofx.PresetReverb.Settings)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#PresetReverb#Settings_E@", "PresetReverb.Settings: a PresetReverb.Settings object containing the properties to apply"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the preset reverb properties. This method is useful when preset reverb settings have to be applied from a previous backup.", "history": "Added in API level 9", "FullName": "public void setProperties (PresetReverb.Settings settings)"}, "PresetReverb(int, int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the PresetReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. If audioSession is not 0, the PresetReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the PresetReverb will apply to the output mix. As the PresetReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "added in API level 9", "FullName": "public PresetReverb (int priority, int audioSession)"}, "getPreset()": {"Returns": [["short", "the preset that is set at the moment."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets current reverb preset.", "history": "Added in API level 9", "FullName": "public short getPreset ()"}, "setPreset(short)": {"Returns": [], "Parameters": [["short", "short: this must be one of the the preset constants defined in this class. e.g. @B_android#media#audiofx#PresetReverb#PRESET_SMALLROOM_E@"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Enables a preset on the reverb. The reverb PRESET_NONE disables any reverb from the current output but does not free the resources associated with the reverb. For an application to signal to the implementation to free the resources, it must call the release() method.", "history": "Added in API level 9", "FullName": "public void setPreset (short preset)"}, "PresetReverb(int,int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the PresetReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. If audioSession is not 0, the PresetReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the PresetReverb will apply to the output mix. As the PresetReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["", "java.lang.RuntimeException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 9", "FullName": "public PresetReverb (int priority, int audioSession)"}, "setParameterListener(android.media.audiofx.PresetReverb.OnParameterChangeListener)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#PresetReverb#OnParameterChangeListener_E@", "PresetReverb.OnParameterChangeListener: OnParameterChangeListener interface registered"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an OnParameterChangeListener interface.", "history": "Added in API level 9", "FullName": "public void setParameterListener (PresetReverb.OnParameterChangeListener listener)"}}, "Inheritance": ["@B_android#media#audiofx#AudioEffect_E@"], "ClassName": "android.media.audiofx.PresetReverb", "ClassDesc": "A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The PresetReverb class allows an application to configure the global reverb using a reverb preset. This is primarily used for adding some reverb in a music playback context. Applications requiring control over a more advanced environmental reverb are advised to use the @B_android#media#audiofx#EnvironmentalReverb_E@ class. An application creates a PresetReverb object to instantiate and control a reverb engine in the audio framework. The methods, parameter types and units exposed by the PresetReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLPresetReverbItf interface. Please refer to this specification for more details. The PresetReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. Creating a reverb on the output mix (audio session 0) requires permission @B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@ See @B_android#media#audiofx#AudioEffect_E@ class for more details on controlling audio effects."}