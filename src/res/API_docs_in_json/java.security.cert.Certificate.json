{"Functions": {"verify(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "if there's no default provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key)"}, "verify(java.security.PublicKey,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this certificate."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this certificate.", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}, "verify(java.security.PublicKey,java.security.Provider)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#security#Provider_E@", "Provider: the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CertificateException_E@", "on encoding errors."], ["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider. Note that the specified Provider object does not have to be registered in the provider list. This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public void verify (PublicKey key, Provider sigProvider)"}, "getEncoded()": {"Returns": [["byte[]", "the encoded form of this certificate"]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateEncodingException_E@", "if an encoding error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the encoded form of this certificate. It is assumed that each certificate type would have only a single form of encoding; for example, X.509 certificates would be encoded as ASN.1 DER.", "history": "Added in API level 1", "FullName": "public abstract byte[] getEncoded ()"}, "getPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the public key."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the public key from this certificate.", "history": "Added in API level 1", "FullName": "public abstract PublicKey getPublicKey ()"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the type of this certificate."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this certificate.", "history": "Added in API level 1", "FullName": "public final String getType ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true iff the encoded forms of the two certificates match, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this certificate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this certificate for equality with the specified object. If the other object is an instanceof Certificate, then its encoded form is retrieved and compared with the encoded form of this certificate.", "history": "Added in API level 1", "FullName": "public boolean equals (Object other)"}, "verify(java.security.PublicKey, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider.", "history": "added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}, "Certificate(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the certificate type. See the CertificateFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard certificate types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a certificate of the specified type.", "history": "Added in API level 1", "FullName": "protected Certificate (String type)"}, "writeReplace()": {"Returns": [["@B_java#lang#Object_E@", "the alternate Certificate object to be serialized"]], "Parameters": [], "Throws": [["@B_java#io#ObjectStreamException_E@", "if a new object representing this Certificate could not be created"]], "SeeAlso": [], "Permissions": [], "Description": "Replace the Certificate to be serialized.", "history": "Added in API level 1", "FullName": "protected Object writeReplace ()"}, "hashCode()": {"Returns": [["int", "the hashcode value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode value for this certificate from its encoded form.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.security.cert.Certificate", "ClassDesc": "Abstract class for managing a variety of identity certificates. An identity certificate is a binding of a principal to a public key which is vouched for by another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information (like a public key). X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve the information in different ways."}