{"Functions": {"getStartTime(android.content.Intent, java.util.concurrent.TimeUnit)": {"Returns": [["", "the start time, in time unit since epoch, or -1 if not found"]], "Parameters": [["Intent", "the intent to extract the start time from"], ["TimeUnit", "the desired time unit for the returned start time"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the start time extra from the given intent.", "history": "", "FullName": "public static long getStartTime (Intent intent, TimeUnit timeUnit)"}, "getEndTime(android.content.Intent, java.util.concurrent.TimeUnit)": {"Returns": [["", "the end time, in time unit since epoch, or -1 if not found"]], "Parameters": [["Intent", "the intent to extract the end time from"], ["TimeUnit", "the desired time unit for the returned end time"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the end time extra from the given intent.", "history": "", "FullName": "public static long getEndTime (Intent intent, TimeUnit timeUnit)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.Fitness", "ClassDesc": "The main entry point to Google Fit APIs. The Google Fit APIs help app developers collect and use fitness-related sensor data in their applications. There are several different APIs, each solving a different problem: @B_com#google#android#gms#fitness#SensorsApi_E@ exposes a unified view of sensor streams on the local device and connected devices, and delivers live events to listeners. @B_com#google#android#gms#fitness#RecordingApi_E@ enables low-battery, always-on background collection of sensor data into the Google Fit store. @B_com#google#android#gms#fitness#SessionsApi_E@ lets apps create and manage sessions of user activity. @B_com#google#android#gms#fitness#HistoryApi_E@ allows querying and insertion of data in Google Fit. @B_com#google#android#gms#fitness#BleApi_E@ can be used to work with Bluetooth Low Energy devices. @B_com#google#android#gms#fitness#ConfigApi_E@ can be used to access custom data types and settings. Most API methods require a @B_com#google#android#gms#fitness#data#DataType_E@. Each data type operation requires the user to have granted the app permission to access and store fitness data for the given data type. @B_com#google#android#gms#common#api#GoogleApiClient#Builder#addScope_E@ to add the necessary scopes, which should be selected from the SCOPE_XXX constants in this class. To use a specific user account, apps can use @B_com#google#android#gms#common#api#GoogleApiClient#Builder#setAccountName_E@, or use @B_com#google#android#gms#common#api#GoogleApiClient#Builder#useDefaultAccount_E@ to use the default account. The specified account and scopes will be used to acquire the necessary OAuth tokens on behalf of the app. In case the app does not have the needed OAuth permissions for the requested scopes, Google Fit will send back a result with status code set to @B_com#google#android#gms#fitness#FitnessStatusCodes#NEEDS_OAUTH_PERMISSIONS_E@. In this case, the app should use @B_com#google#android#gms#common#ConnectionResult#startResolutionForResult_E@ to get the necessary OAuth permissions. The first connection to Fit API may require a network connection to verify the account and scopes associated with it. In case no network connection is available, Google Fit will send back a result with status code set to @B_com#google#android#gms#common#api#CommonStatusCodes#NETWORK_ERROR_E@. Sample usage of Google Fit Client: @B_com#google#android#gms#fitness#Fitness#ACTION_VIEW_E@ defines an intent to view fitness data or a session @B_com#google#android#gms#fitness#Fitness#ACTION_TRACK_E@ defines an intent to track an activity @B_com#google#android#gms#fitness#Fitness#ACTION_VIEW_GOAL_E@ defines an intent to view a fitness goal Different objects in the Fitness data model can be used in intents, including @B_com#google#android#gms#fitness#data#Session_E@, @B_com#google#android#gms#fitness#data#DataSource_E@, @B_com#google#android#gms#fitness#data#DataType_E@, and @B_com#google#android#gms#fitness#FitnessActivities_E@. The documentation for each intent action specifies the different attributes of the intent, including actions, MIME types, and extras. It also specifies how the intents can be built and parsed using methods in the API."}