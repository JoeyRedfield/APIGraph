{"Functions": {"setExpanderRatio(float)": {"Returns": [], "Parameters": [["float", "float: desired expander ratio (1:N)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets Expander ratio (1:N) for signals below the Noise Gate Threshold.", "history": "Added in API level 28", "FullName": "public void setExpanderRatio (float expanderRatio)"}, "getExpanderRatio()": {"Returns": [["float", "Expander ratio (1:N)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets Expander ratio (1:N) for signals below the Noise Gate Threshold.", "history": "Added in API level 28", "FullName": "public float getExpanderRatio ()"}, "getReleaseTime()": {"Returns": [["float", "release time for compressor in milliseconds (ms)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets release time for compressor in milliseconds (ms)", "history": "Added in API level 28", "FullName": "public float getReleaseTime ()"}, "setRatio(float)": {"Returns": [], "Parameters": [["float", "float: desired for the compressor (N:1)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets compressor ratio (N:1)", "history": "Added in API level 28", "FullName": "public void setRatio (float ratio)"}, "getRatio()": {"Returns": [["float", "compressor ratio (N:1)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets the compressor ratio (N:1)", "history": "Added in API level 28", "FullName": "public float getRatio ()"}, "setKneeWidth(float)": {"Returns": [], "Parameters": [["float", "float: desired in decibels (dB)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets knee width in decibels (dB). See @B_android#media#audiofx#DynamicsProcessing#MbcBand#getKneeWidth_E@ for more information.", "history": "Added in API level 28", "FullName": "public void setKneeWidth (float kneeWidth)"}, "DynamicsProcessing.MbcBand(android.media.audiofx.DynamicsProcessing.MbcBand)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#DynamicsProcessing#MbcBand_E@", "DynamicsProcessing.MbcBand: copy constructor"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Class constructor for MbcBand", "history": "Added in API level 28", "FullName": "public DynamicsProcessing.MbcBand (DynamicsProcessing.MbcBand cfg)"}, "getPostGain()": {"Returns": [["float", "postGain value in decibels (dB)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets the gain applied to the signal AFTER compression. Measured in decibels (dB) where 0 dB means no level change", "history": "Added in API level 28", "FullName": "public float getPostGain ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 28", "FullName": "public String toString ()"}, "setReleaseTime(float)": {"Returns": [], "Parameters": [["float", "float: desired for compressor in milliseconds (ms)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets release time for compressor in milliseconds (ms)", "history": "Added in API level 28", "FullName": "public void setReleaseTime (float releaseTime)"}, "getNoiseGateThreshold()": {"Returns": [["float", "Noise Gate Threshold in decibels (dB)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets the noise gate threshold in decibels (dB) from 0 dB Full Scale (dBFS). Noise gate thresholds are negative. Signals below this level will be expanded according the expanderRatio parameter. A Noise Gate Threshold of -75 dB means very quiet signals might be effectively removed from the signal.", "history": "Added in API level 28", "FullName": "public float getNoiseGateThreshold ()"}, "getThreshold()": {"Returns": [["float", "compressor threshold in decibels (dB)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS). Thresholds are negative. A threshold of 0 dB means no compression will take place.", "history": "Added in API level 28", "FullName": "public float getThreshold ()"}, "setNoiseGateThreshold(float)": {"Returns": [], "Parameters": [["float", "float: desired in decibels (dB)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets noise gate threshod in decibels (dB). See @B_android#media#audiofx#DynamicsProcessing#MbcBand#getNoiseGateThreshold_E@ for more information.", "history": "Added in API level 28", "FullName": "public void setNoiseGateThreshold (float noiseGateThreshold)"}, "getPreGain()": {"Returns": [["float", "preGain value in decibels (dB)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets the gain applied to the signal BEFORE the compression. Measured in decibels (dB) where 0 dB means no level change.", "history": "Added in API level 28", "FullName": "public float getPreGain ()"}, "setAttackTime(float)": {"Returns": [], "Parameters": [["float", "float: desired for compressor in milliseconds (ms)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets attack time for compressor in milliseconds (ms)", "history": "Added in API level 28", "FullName": "public void setAttackTime (float attackTime)"}, "setThreshold(float)": {"Returns": [], "Parameters": [["float", "float: desired for compressor in decibels(dB)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS). Thresholds are negative. A threshold of 0 dB means no compression will take place.", "history": "Added in API level 28", "FullName": "public void setThreshold (float threshold)"}, "getKneeWidth()": {"Returns": [["float", "Knee Width in decibels (dB)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "get Knee Width in decibels (dB) around compressor threshold point. Widths are always positive, with higher values representing a wider area of transition from the linear zone to the compression zone. A knee of 0 dB means a more abrupt transition.", "history": "Added in API level 28", "FullName": "public float getKneeWidth ()"}, "DynamicsProcessing.MbcBand(boolean,float,float,float,float,float,float,float,float,float,float)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this band is currently used to process sound. When false, the band is effectively muted and sound set to zero."], ["float", "float: topmost frequency number (in Hz) this band will process. The effective bandwidth for the band is then computed using this and the previous band topmost frequency (or 0 Hz for band number 0). Frequencies are expected to increase with band number, thus band 0 cutoffFrequency <= band 1 cutoffFrequency, and so on."], ["float", "float: Attack Time for compressor in milliseconds (ms)"], ["float", "float: Release Time for compressor in milliseconds (ms)"], ["float", "float: Compressor ratio (N:1) (input:output)"], ["float", "float: Compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS)."], ["float", "float: Width in decibels (dB) around compressor threshold point."], ["float", "float: Noise gate threshold in decibels (dB) from 0 dB Full Scale (dBFS)."], ["float", "float: Expander ratio (1:N) (input:output) for signals below the Noise Gate Threshold."], ["float", "float: Gain applied to the signal BEFORE the compression."], ["float", "float: Gain applied to the signal AFTER compression."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Class constructor for MbcBand", "history": "Added in API level 28", "FullName": "public DynamicsProcessing.MbcBand (boolean enabled, float cutoffFrequency, float attackTime, float releaseTime, float ratio, float threshold, float kneeWidth, float noiseGateThreshold, float expanderRatio, float preGain, float postGain)"}, "getAttackTime()": {"Returns": [["float", "attack time for compressor in milliseconds (ms)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "gets attack time for compressor in milliseconds (ms)", "history": "Added in API level 28", "FullName": "public float getAttackTime ()"}, "setPreGain(float)": {"Returns": [], "Parameters": [["float", "float: desired in decibels (dB)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets the gain to be applied to the signal BEFORE the compression, measured in decibels (dB), where 0 dB means no level change.", "history": "Added in API level 28", "FullName": "public void setPreGain (float preGain)"}, "setPostGain(float)": {"Returns": [], "Parameters": [["float", "float: desired value in decibels (dB)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "sets the gain to be applied to the siganl AFTER the compression. Measured in decibels (dB), where 0 dB means no level change.", "history": "Added in API level 28", "FullName": "public void setPostGain (float postGain)"}}, "Inheritance": ["@B_android#media#audiofx#DynamicsProcessing#BandBase_E@"], "ClassName": "android.media.audiofx.DynamicsProcessing.MbcBand", "ClassDesc": "Class for Multi-Band compressor bands MBC bands have multiple controllable parameters: enabled/disabled, cutoffFrequency, attackTime, releaseTime, ratio, threshold, kneeWidth, noiseGateThreshold, expanderRatio, preGain and postGain."}