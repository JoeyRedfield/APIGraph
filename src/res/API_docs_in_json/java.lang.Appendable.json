{"Functions": {"append(java.lang.CharSequence)": {"Returns": [["@B_java#lang#Appendable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this Appendable."]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character sequence to this Depending on which class implements the character sequence @B_java#nio#CharBuffer_E@ then the subsequence to append is defined by the buffer's position and limit.", "history": "Added in API level 1", "FullName": "public abstract Appendable append (CharSequence csq)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#lang#Appendable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public abstract Appendable append (CharSequence csq, int start, int end)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#lang#Appendable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this An invocation of this method of the form", "history": "added in API level 1", "FullName": "public abstract Appendable append (CharSequence csq, int start, int end)"}, "append(char)": {"Returns": [["@B_java#lang#Appendable_E@", "A reference to this Appendable"]], "Parameters": [["char", "char: The character to append"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character to this", "history": "Added in API level 1", "FullName": "public abstract Appendable append (char c)"}}, "Inheritance": [], "ClassName": "java.lang.Appendable", "ClassDesc": "An object to which @B_java#util#Formatter_E@. The characters to be appended should be valid Unicode characters as described in Appendables are not necessarily safe for multithreaded access. Thread safety is the responsibility of classes that extend and implement this interface. Since this interface may be implemented by existing classes with different styles of error handling there is no guarantee that errors will be propagated to the invoker."}