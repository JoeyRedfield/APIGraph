{"Functions": {"writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 18", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setPassword(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the password"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the password.", "history": "Added in API level 18", "FullName": "public void setPassword (String password)"}, "setIdentity(java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the identity", "history": "Added in API level 18", "FullName": "public void setIdentity (String identity)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 18", "FullName": "public int describeContents ()"}, "getIdentity()": {"Returns": [["@B_java#lang#String_E@", "the identity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the identity", "history": "Added in API level 18", "FullName": "public String getIdentity ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 18", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "setAltSubjectMatch(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: substring to be matched, for example DNS:server.example.com;EMAIL:server@example.com"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set alternate subject match. This is the substring to be matched against the alternate subject of the authentication server certificate.", "history": "Added in API level 23", "FullName": "public void setAltSubjectMatch (String altSubjectMatch)"}, "setPlmn(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the plmn value derived from mcc (mobile country code) & mnc (mobile network code)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set plmn (Public Land Mobile Network) of the provider of Passpoint credential", "history": "Added in API level 23", "FullName": "public void setPlmn (String plmn)"}, "getClientCertificateChain()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "X.509 client certificates"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the complete client certificate chain in the same order as it was last supplied. If the chain was last supplied by a call to @B_android#net#wifi#WifiEnterpriseConfig#setClientKeyEntry_E@ with a non-null * certificate instance, a single-element array containing the certificate will be * returned. If @B_android#net#wifi#WifiEnterpriseConfig#setClientKeyEntryWithCertificateChain_E@ was last called with a non-empty array, this array will be returned in the same order as it was supplied. Otherwise, null will be returned.", "history": "Added in API level 26", "FullName": "public X509Certificate[] getClientCertificateChain ()"}, "setCaCertificates(java.security.cert.X509Certificate[])": {"Returns": [], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: X.509 CA certificates This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the provided certificates is not a CA certificate"]], "SeeAlso": [], "Permissions": [], "Description": "Specify a list of X.509 certificates that identifies the server. The validation passes if the CA of server certificate matches one of the given certificates. Default names are automatically assigned to the certificates and used with this configuration. The framework takes care of installing the certificates when the config is saved and removing the certificates when the config is removed.", "history": "Added in API level 24", "FullName": "public void setCaCertificates (X509Certificate[] certs)"}, "getRealm()": {"Returns": [["@B_java#lang#String_E@", "the realm"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get realm for Passpoint credential; see @B_android#net#wifi#WifiEnterpriseConfig#setRealm_E@ for more information", "history": "Added in API level 23", "FullName": "public String getRealm ()"}, "getPlmn()": {"Returns": [["@B_java#lang#String_E@", "the plmn"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get plmn (Public Land Mobile Network) for Passpoint credential; see @B_android#net#wifi#WifiEnterpriseConfig#setPlmn_E@ for more information", "history": "Added in API level 23", "FullName": "public String getPlmn ()"}, "setRealm(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the realm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set realm for Passpoint credential; realm identifies a set of networks where your Passpoint credential can be used", "history": "Added in API level 23", "FullName": "public void setRealm (String realm)"}, "setPhase2Method(int)": {"Returns": [], "Parameters": [["int", "int: is the inner authentication method and can be one of @B_android#net#wifi#WifiEnterpriseConfig#Phase2#NONE_E@, @B_android#net#wifi#WifiEnterpriseConfig#Phase2#PAP_E@, @B_android#net#wifi#WifiEnterpriseConfig#Phase2#MSCHAP_E@, @B_android#net#wifi#WifiEnterpriseConfig#Phase2#MSCHAPV2_E@, @B_android#net#wifi#WifiEnterpriseConfig#Phase2#GTC_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "on an invalid phase2 method"]], "SeeAlso": [], "Permissions": [], "Description": "Set Phase 2 authentication method. Sets the inner authentication method to be used in phase 2 after setting up a secure channel", "history": "Added in API level 18", "FullName": "public void setPhase2Method (int phase2Method)"}, "getCaCertificates()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get CA certificates.", "history": "Added in API level 24", "FullName": "public X509Certificate[] getCaCertificates ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 18", "FullName": "public String toString ()"}, "getClientCertificate()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "X.509 client certificate"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get client certificate", "history": "Added in API level 18", "FullName": "public X509Certificate getClientCertificate ()"}, "getSubjectMatch()": {"Returns": [["@B_java#lang#String_E@", "the subject match string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "in favor of altSubjectMatch Get subject match (deprecated)", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public String getSubjectMatch ()"}, "setClientKeyEntryWithCertificateChain(java.security.PrivateKey,java.security.cert.X509Certificate[])": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: a PrivateKey instance for the end certificate."], ["@B_java#security#cert#X509Certificate_E@", "X509Certificate: an array of X509Certificate instances which starts with end certificate and continues with additional CA certificates necessary to link the end certificate with some root certificate known by the authenticator."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for an invalid key or certificate."]], "SeeAlso": [], "Permissions": [], "Description": "Specify a private key and client certificate chain for client authorization. A default name is automatically assigned to the key entry and used with this configuration. The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed.", "history": "Added in API level 26", "FullName": "public void setClientKeyEntryWithCertificateChain (PrivateKey privateKey, X509Certificate[] clientCertificateChain)"}, "getAltSubjectMatch()": {"Returns": [["@B_java#lang#String_E@", "the alternate subject match string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get alternate subject match", "history": "Added in API level 23", "FullName": "public String getAltSubjectMatch ()"}, "setDomainSuffixMatch(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The domain value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the domain_suffix_match directive on wpa_supplicant. This is the parameter to use for Hotspot 2.0 defined matching of AAA server certs per WFA HS2.0 spec, section 7.3.3.2, second paragraph. From wpa_supplicant documentation: Constraint for server domain name. If set, this FQDN is used as a suffix match requirement for the AAAserver certificate in SubjectAltName dNSName element(s). If a matching dNSName is found, this constraint is met. Suffix match here means that the host/domain name is compared one label at a time starting from the top-level domain and all the labels in domain_suffix_match shall be included in the certificate. The certificate may include additional sub-level labels in addition to the required labels. More than one match string can be provided by using semicolons to separate the strings (e.g., example.org;example.com). When multiple strings are specified, a match with any one of the values is considered a sufficient match for the certificate, i.e., the conditions are ORed ogether. For example, domain_suffix_match=example.com would match test.example.com but would not match test-example.com.", "history": "Added in API level 23", "FullName": "public void setDomainSuffixMatch (String domain)"}, "setSubjectMatch(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: substring to be matched"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "in favor of altSubjectMatch Set subject match (deprecated). This is the substring to be matched against the subject of the authentication server certificate.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public void setSubjectMatch (String subjectMatch)"}, "setAnonymousIdentity(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the anonymous identity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set anonymous identity. This is used as the unencrypted identity with certain EAP types", "history": "Added in API level 18", "FullName": "public void setAnonymousIdentity (String anonymousIdentity)"}, "getCaCertificate()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "X.509 CA certificate This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get CA certificate. If multiple CA certificates are configured previously, return the first one.", "history": "Added in API level 18", "FullName": "public X509Certificate getCaCertificate ()"}, "WifiEnterpriseConfig()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 18", "FullName": "public WifiEnterpriseConfig ()"}, "getAnonymousIdentity()": {"Returns": [["@B_java#lang#String_E@", "anonymous identity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the anonymous identity", "history": "Added in API level 18", "FullName": "public String getAnonymousIdentity ()"}, "getEapMethod()": {"Returns": [["int", "eap method configured"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the eap method.", "history": "Added in API level 18", "FullName": "public int getEapMethod ()"}, "getPassword()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the password. Returns locally set password value. For networks fetched from framework, returns \"*\".", "history": "Added in API level 18", "FullName": "public String getPassword ()"}, "getDomainSuffixMatch()": {"Returns": [["@B_java#lang#String_E@", "The domain value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the domain_suffix_match value. See setDomSuffixMatch.", "history": "Added in API level 23", "FullName": "public String getDomainSuffixMatch ()"}, "setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: a PrivateKey instance for the end certificate."], ["@B_java#security#cert#X509Certificate_E@", "X509Certificate: an X509Certificate representing the end certificate."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for an invalid key or certificate."]], "SeeAlso": [], "Permissions": [], "Description": "Specify a private key and client certificate for client authorization. A default name is automatically assigned to the key entry and used with this configuration. The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed.", "history": "Added in API level 18", "FullName": "public void setClientKeyEntry (PrivateKey privateKey, X509Certificate clientCertificate)"}, "getPhase2Method()": {"Returns": [["int", "a phase 2 method defined at @B_android#net#wifi#WifiEnterpriseConfig#Phase2_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the phase 2 authentication method.", "history": "added in API level 18", "FullName": "public int getPhase2Method ()"}, "WifiEnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)": {"Returns": [], "Parameters": [["@B_android#net#wifi#WifiEnterpriseConfig_E@", "WifiEnterpriseConfig: Source WifiEnterpriseConfig object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy constructor. This copies over all the fields verbatim (does not ignore masked password fields).", "history": "Added in API level 18", "FullName": "public WifiEnterpriseConfig (WifiEnterpriseConfig source)"}, "setCaCertificate(java.security.cert.X509Certificate)": {"Returns": [], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: X.509 CA certificate This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if not a CA certificate"]], "SeeAlso": [], "Permissions": [], "Description": "Specify a X.509 certificate that identifies the server. A default name is automatically assigned to the certificate and used with this configuration. The framework takes care of installing the certificate when the config is saved and removing the certificate when the config is removed.", "history": "Added in API level 18", "FullName": "public void setCaCertificate (X509Certificate cert)"}, "setEapMethod(int)": {"Returns": [], "Parameters": [["int", "int: is one @B_android#net#wifi#WifiEnterpriseConfig#Eap#PEAP_E@, @B_android#net#wifi#WifiEnterpriseConfig#Eap#TLS_E@, @B_android#net#wifi#WifiEnterpriseConfig#Eap#TTLS_E@ or @B_android#net#wifi#WifiEnterpriseConfig#Eap#PWD_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "on an invalid eap method"]], "SeeAlso": [], "Permissions": [], "Description": "Set the EAP authentication method.", "history": "Added in API level 18", "FullName": "public void setEapMethod (int eapMethod)"}}, "Inheritance": [], "ClassName": "android.net.wifi.WifiEnterpriseConfig", "ClassDesc": "Enterprise configuration details for Wi-Fi. Stores details about the EAP method and any associated credentials."}