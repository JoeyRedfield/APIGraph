{"Functions": {"isSecure(java.net.Socket)": {"Returns": [["", "false"]], "Parameters": [["@B_java#net#Socket_E@", "the connected socket"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a socket connection is secure. This factory creates plain socket connections which are not considered secure.", "history": "Added in API level 1", "FullName": "public final boolean isSecure (Socket sock)"}, "equals(java.lang.Object)": {"Returns": [["", "iff the argument is this object"]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this factory with an object. There is only one instance of this class.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "createSocket()": {"Returns": [["", "a new socket"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, unconnected socket. The socket should subsequently be passed to @B_org#apache#http#conn#scheme#SocketFactory#connectSocket_E@.", "history": "Added in API level 1", "FullName": "public Socket createSocket ()"}, "getSocketFactory()": {"Returns": [["", "the one and only plain socket factory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the singleton instance of this class.", "history": "Added in API level 1", "FullName": "public static MultihomePlainSocketFactory getSocketFactory ()"}, "connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams)": {"Returns": [["", "the connected socket. The returned object may be different from the sock argument if this factory supports a layered protocol."]], "Parameters": [["@B_java#net#Socket_E@", "socket to connect to any of the given addresses"], ["@B_java#lang#String_E@", "Host name to connect to"], ["int", "the port to connect to"], ["@B_java#net#InetAddress_E@", "local address"], ["int", "local port"], ["@B_org#apache#http#params#HttpParams_E@", "HTTP parameters"]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during the connection"], ["@B_java#net#SocketTimeoutException_E@", "if timeout expires before connecting"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to connects the socket to any of the @B_java#net#InetAddress_E@es the given host name resolves to. If connection to all addresses fail, the last I/O exception is propagated to the caller.", "history": "Added in API level 1", "FullName": "public Socket connectSocket (Socket sock, String host, int port, InetAddress localAddress, int localPort, HttpParams params)"}, "hashCode()": {"Returns": [["", "this object's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a hash code for this object. All instances of this class have the same hash code. There is only one instance of this class.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.MultihomePlainSocketFactory", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Socket factory that implements a simple multi-home fail-over on connect failure, provided the same hostname resolves to multiple @B_java#net#InetAddress_E@es. Please note the @B_org#apache#http#conn#MultihomePlainSocketFactory#connectSocket_E@ method cannot be reliably interrupted by closing the socket returned by the @B_org#apache#http#conn#MultihomePlainSocketFactory#createSocket_E@ method."}