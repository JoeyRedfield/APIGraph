{"Functions": {"getLoggerNames()": {"Returns": [["@B_java#util#List_E@", "A list of String each of which is a currently registered Logger name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of currently registered logger names. This method calls @B_java#util#logging#LogManager#getLoggerNames_E@ and returns a list of the logger names.", "history": "Added in API level 1", "FullName": "public abstract List<String> getLoggerNames ()"}, "getLoggerLevel(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The name of the log level of the specified logger; or an empty string if the log level of the specified logger is null. If the specified logger does not exist, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the Logger to be retrieved."]], "Throws": [], "SeeAlso": ["@B_java#util#logging#Logger#getLevel_E@"], "Permissions": [], "Description": "Gets the name of the log level associated with the specified logger. If the specified logger does not exist, If the", "history": "Added in API level 1", "FullName": "public abstract String getLoggerLevel (String loggerName)"}, "getParentLoggerName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the name of the nearest existing parent logger; an empty string if the specified logger is the root logger. If the specified logger does not exist, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a Logger."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the parent for the specified logger. If the specified logger does not exist,", "history": "Added in API level 1", "FullName": "public abstract String getParentLoggerName (String loggerName)"}, "setLoggerLevel(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the Logger to be set. Must be non-null."], ["@B_java#lang#String_E@", "String: The name of the level to set on the specified logger, or null if setting the level to inherit from its nearest ancestor."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified logger does not exist, or levelName is not a valid level name."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": ["@B_java#util#logging#Logger#setLevel_E@"], "Permissions": [], "Description": "Sets the specified logger to the specified new level. If the", "history": "Added in API level 1", "FullName": "public abstract void setLoggerLevel (String loggerName, String levelName)"}, "setLoggerLevel(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the Logger to be set. Must be non-null."], ["@B_java#lang#String_E@", "String: The name of the level to set on the specified logger, or null if setting the level to inherit from its nearest ancestor."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified logger does not exist, or levelName is not a valid level name."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": ["@B_java#util#logging#Logger#setLevel_E@"], "Permissions": [], "Description": "Sets the specified logger to the specified new level. If the", "history": "added in API level 1", "FullName": "public abstract void setLoggerLevel (String loggerName, String levelName)"}}, "Inheritance": [], "ClassName": "java.util.logging.LoggingMXBean", "ClassDesc": "The management interface for the logging facility. There is a single global instance of the javax.management.ObjectName ObjectName that uniquely identifies the management interface for logging within the MBeanServer is:"}