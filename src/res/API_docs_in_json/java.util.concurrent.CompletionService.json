{"Functions": {"take()": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if none are yet present.", "history": "Added in API level 1", "FullName": "public abstract Future<V> take ()"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task or null if the specified waiting time elapses before one is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.", "history": "Added in API level 1", "FullName": "public abstract Future<V> poll (long timeout, TimeUnit unit)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task or null if the specified waiting time elapses before one is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.", "history": "added in API level 1", "FullName": "public abstract Future<V> poll (long timeout, TimeUnit unit)"}, "submit(java.lang.Runnable, V)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task, and whose get() method will return the given result value upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["V", "V: the result to return upon successful completion"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.", "history": "added in API level 1", "FullName": "public abstract Future<V> submit (Runnable task, V result)"}, "poll()": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task, or null if none are present"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, or null if none are present.", "history": "Added in API level 1", "FullName": "public abstract Future<V> poll ()"}, "submit(java.lang.Runnable,V)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task, and whose get() method will return the given result value upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["V", "V: the result to return upon successful completion"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.", "history": "Added in API level 1", "FullName": "public abstract Future<V> submit (Runnable task, V result)"}, "submit(java.util.concurrent.Callable<V>)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", "if the task cannot be scheduled for execution"], ["@B_java#lang#NullPointerException_E@", "if the task is null"]], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. Upon completion, this task may be taken or polled.", "history": "Added in API level 1", "FullName": "public abstract Future<V> submit (Callable<V> task)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.CompletionService<V>", "ClassDesc": "A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks. Producers submit tasks for execution. Consumers take completed tasks and process their results in the order they complete. A CompletionService can for example be used to manage asynchronous I/O, in which tasks that perform reads are submitted in one part of a program or system, and then acted upon in a different part of the program when the reads complete, possibly in a different order than they were requested. Typically, a CompletionService relies on a separate @B_java#util#concurrent#Executor_E@ to actually execute the tasks, in which case the CompletionService only manages an internal completion queue. The @B_java#util#concurrent#ExecutorCompletionService_E@ class provides an implementation of this approach. Memory consistency effects: Actions in a thread prior to submitting a task to a CompletionService take()."}