{"Functions": {"areContentsTheSame(int, int)": {"Returns": [["boolean", "True if the contents of the items are the same or false if they are different."]], "Parameters": [["int", "int: The position of the item in the old list"], ["int", "int: The position of the item in the new list which replaces the oldItem"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the DiffUtil when it wants to check whether two items have the same data. DiffUtil uses this information to detect if the contents of an item has changed. DiffUtil uses this method to check equality instead of @B_java#lang#Object#equals_E@ so that you can change its behavior depending on your UI. For example, if you are using DiffUtil with a @B_android#support#v7#widget#RecyclerView#Adapter_E@, you should return whether the items' visual representations are the same. This method is called only if @B_android#support#v7#util#DiffUtil#Callback#areItemsTheSame_E@ returns true for these items.", "history": "added in version 24.2.0", "FullName": "boolean areContentsTheSame (int oldItemPosition, int newItemPosition)"}, "getOldListSize()": {"Returns": [["int", "The size of the old list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the old list.", "history": "added in version 24.2.0", "FullName": "int getOldListSize ()"}, "areItemsTheSame(int, int)": {"Returns": [["boolean", "True if the two items represent the same object or false if they are different."]], "Parameters": [["int", "int: The position of the item in the old list"], ["int", "int: The position of the item in the new list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the DiffUtil to decide whether two object represent the same Item. For example, if your items have unique ids, this method should check their id equality.", "history": "added in version 24.2.0", "FullName": "boolean areItemsTheSame (int oldItemPosition, int newItemPosition)"}, "DiffUtil.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "DiffUtil.Callback ()"}, "getNewListSize()": {"Returns": [["int", "The size of the new list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the size of the new list.", "history": "added in version 24.2.0", "FullName": "int getNewListSize ()"}, "getChangePayload(int, int)": {"Returns": [["@B_java#lang#Object_E@", "A payload object that represents the change between the two items."]], "Parameters": [["int", "int: The position of the item in the old list"], ["int", "int: The position of the item in the new list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When @B_android#support#v7#util#DiffUtil#Callback#areItemsTheSame_E@ returns true for two items and @B_android#support#v7#util#DiffUtil#Callback#areContentsTheSame_E@ returns false for them, DiffUtil calls this method to get a payload about the change. For example, if you are using DiffUtil with @B_android#support#v7#widget#RecyclerView_E@, you can return the particular field that changed in the item and your @B_android#support#v7#widget#RecyclerView#ItemAnimator_E@ can use that information to run the correct animation. Default implementation returns null.", "history": "added in version 24.2.0", "FullName": "Object getChangePayload (int oldItemPosition, int newItemPosition)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.util.DiffUtil.Callback", "ClassDesc": "A Callback class used by DiffUtil while calculating the diff between two lists."}