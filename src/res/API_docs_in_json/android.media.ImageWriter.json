{"Functions": {"queueInputImage(android.media.Image)": {"Returns": [], "Parameters": [["@B_android#media#Image_E@", "Image: The Image to be queued back to ImageWriter for future consumption."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the image was already queued previously, or the image was aborted previously, or the input @B_android#view#Surface_E@ has been abandoned by the consumer component that provided the @B_android#view#Surface_E@."]], "SeeAlso": ["@B_android#media#ImageWriter#dequeueInputImage_E@"], "Permissions": [], "Description": "Queue an input @B_android#media#Image_E@ back to ImageWriter for the downstream consumer to access. The input @B_android#media#Image_E@ could be from ImageReader (acquired via @B_android#media#ImageReader#acquireNextImage_E@ or @B_android#media#ImageReader#acquireLatestImage_E@), or from this ImageWriter (acquired via @B_android#media#ImageWriter#dequeueInputImage_E@). In the former case, the Image data will be moved to this ImageWriter. Note that the Image properties (size, format, strides, etc.) must be the same as the properties of the images dequeued from this ImageWriter, or this method will throw an @B_java#lang#IllegalArgumentException_E@. In the latter case, the application has filled the input image with data. This method then passes the filled buffer to the downstream consumer. In both cases, it's up to the caller to ensure that the Image timestamp (in nanoseconds) is correctly set, as the downstream component may want to use it to indicate the Image data capture time. After this method is called and the downstream consumer consumes and releases the Image, an @B_android#media#ImageWriter#OnImageReleasedListener#onImageReleased_E@ callback will fire. The application can use this callback to avoid sending Images faster than the downstream consumer processing rate in steady state. Passing in an Image from some other component (e.g. an @B_android#media#ImageReader_E@) requires a free input Image from this ImageWriter as the destination. In this case, this call will block, as @B_android#media#ImageWriter#dequeueInputImage_E@ does, if there are no free Images available. To avoid blocking, the application should ensure that there is at least one free Image available in this ImageWriter before calling this method. After this call, the input Image is no longer valid for further access, as if the Image is @B_android#media#Image#close_E@. Attempting to access the @B_java#nio#ByteBuffer_E@ returned by an earlier @B_android#media#Image#Plane#getBuffer_E@ call will result in an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 23", "FullName": "public void queueInputImage (Image image)"}, "newInstance(android.view.Surface,int)": {"Returns": [["@B_android#media#ImageWriter_E@", "a new ImageWriter instance. This value will never be null."]], "Parameters": [["@B_android#view#Surface_E@", "Surface: The destination Surface this writer produces Image data into. This value must never be null."], ["int", "int: The maximum number of Images the user will want to access simultaneously for producing Image data. This should be as small as possible to limit memory use. Once maxImages Images are dequeued by the user, one of them has to be queued back before a new Image can be dequeued for access via @B_android#media#ImageWriter#dequeueInputImage_E@. Value is 1 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ImageWriter. The maxImages parameter determines the maximum number of @B_android#media#Image_E@ objects that can be be dequeued from the ImageWriter simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary. The input Image size and format depend on the Surface that is provided by the downstream consumer end-point.", "history": "Added in API level 23", "FullName": "public static ImageWriter newInstance (Surface surface, int maxImages)"}, "newInstance(android.view.Surface, int)": {"Returns": [["@B_android#media#ImageWriter_E@", "a new ImageWriter instance."]], "Parameters": [["@B_android#view#Surface_E@", "Surface: The destination Surface this writer produces Image data into."], ["int", "int: The maximum number of Images the user will want to access simultaneously for producing Image data. This should be as small as possible to limit memory use. Once maxImages Images are dequeued by the user, one of them has to be queued back before a new Image can be dequeued for access via @B_android#media#ImageWriter#dequeueInputImage_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ImageWriter. The maxImages parameter determines the maximum number of @B_android#media#Image_E@ objects that can be be dequeued from the ImageWriter simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary. The input Image size and format depend on the Surface that is provided by the downstream consumer end-point.", "history": "added in API level 23", "FullName": "public static ImageWriter newInstance (Surface surface, int maxImages)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 23", "FullName": "protected void finalize ()"}, "dequeueInputImage()": {"Returns": [["@B_android#media#Image_E@", "The next available input Image from this ImageWriter."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if maxImages Images are currently dequeued, or the input @B_android#view#Surface_E@ has been abandoned by the consumer component that provided the @B_android#view#Surface_E@. Prior to Android P, throws if the ImageWriter format is @B_android#graphics#ImageFormat#PRIVATE_E@."]], "SeeAlso": ["@B_android#media#ImageWriter#queueInputImage_E@", "@B_android#media#Image#close_E@"], "Permissions": [], "Description": "Dequeue the next available input Image for the application to produce data into. This method requests a new input Image from ImageWriter. The application owns this Image after this call. Once the application fills the Image data, it is expected to return this Image back to ImageWriter for downstream consumer components (e.g. @B_android#hardware#camera2#CameraDevice_E@) to consume. The Image can be returned to ImageWriter via @B_android#media#ImageWriter#queueInputImage_E@ or @B_android#media#Image#close_E@. This call will block if all available input images have been queued by the application and the downstream consumer has not yet consumed any. When an Image is consumed by the downstream consumer and released, an @B_android#media#ImageWriter#OnImageReleasedListener#onImageReleased_E@ callback will be fired, which indicates that there is one input Image available. For non- @B_android#graphics#ImageFormat#PRIVATE_E@ formats ( @B_android#media#ImageWriter#getFormat_E@ != @B_android#graphics#ImageFormat#PRIVATE_E@), it is recommended to dequeue the next Image only after this callback is fired, in the steady state. If the format of ImageWriter is @B_android#graphics#ImageFormat#PRIVATE_E@ ( @B_android#media#ImageWriter#getFormat_E@ == @B_android#graphics#ImageFormat#PRIVATE_E@), the image buffer is accessible to the application only through the hardware buffer obtained through @B_android#media#Image#getHardwareBuffer_E@. (On Android versions prior to P, dequeueing private buffers will cause an @B_java#lang#IllegalStateException_E@ to be thrown). Alternatively, the application can acquire images from some other component (e.g. an @B_android#media#ImageReader_E@), and queue them directly to this ImageWriter via the @B_android#media#ImageWriter#queueInputImage_E@ method.", "history": "Added in API level 23", "FullName": "public Image dequeueInputImage ()"}, "newInstance(android.view.Surface,int,int)": {"Returns": [["@B_android#media#ImageWriter_E@", "a new ImageWriter instance. This value will never be null."]], "Parameters": [["@B_android#view#Surface_E@", "Surface: The destination Surface this writer produces Image data into. This value must never be null."], ["int", "int: The maximum number of Images the user will want to access simultaneously for producing Image data. This should be as small as possible to limit memory use. Once maxImages Images are dequeued by the user, one of them has to be queued back before a new Image can be dequeued for access via @B_android#media#ImageWriter#dequeueInputImage_E@. Value is 1 or greater"], ["int", "int: The format of this ImageWriter. It can be any valid format specified by @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@. Value is @B_android#graphics#ImageFormat#UNKNOWN_E@, @B_android#graphics#ImageFormat#RGB_565_E@, @B_android#graphics#ImageFormat#YV12_E@, @B_android#graphics#ImageFormat#Y8_E@, android.graphics.ImageFormat.Y16, @B_android#graphics#ImageFormat#NV16_E@, @B_android#graphics#ImageFormat#NV21_E@, @B_android#graphics#ImageFormat#YUY2_E@, @B_android#graphics#ImageFormat#JPEG_E@, @B_android#graphics#ImageFormat#DEPTH_JPEG_E@, @B_android#graphics#ImageFormat#YUV_420_888_E@, @B_android#graphics#ImageFormat#YUV_422_888_E@, @B_android#graphics#ImageFormat#YUV_444_888_E@, @B_android#graphics#ImageFormat#FLEX_RGB_888_E@, @B_android#graphics#ImageFormat#FLEX_RGBA_8888_E@, @B_android#graphics#ImageFormat#RAW_SENSOR_E@, @B_android#graphics#ImageFormat#RAW_PRIVATE_E@, @B_android#graphics#ImageFormat#RAW10_E@, @B_android#graphics#ImageFormat#RAW12_E@, @B_android#graphics#ImageFormat#DEPTH16_E@, @B_android#graphics#ImageFormat#DEPTH_POINT_CLOUD_E@, android.graphics.ImageFormat.RAW_DEPTH, @B_android#graphics#ImageFormat#PRIVATE_E@, or @B_android#graphics#ImageFormat#HEIC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ImageWriter with given number of max Images and format. The maxImages parameter determines the maximum number of @B_android#media#Image_E@ objects that can be be dequeued from the ImageWriter simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary. The format specifies the image format of this ImageWriter. The format from the surface will be overridden with this format. For example, if the surface is obtained from a @B_android#graphics#SurfaceTexture_E@, the default format may be @B_android#graphics#PixelFormat#RGBA_8888_E@. If the application creates an ImageWriter with this surface and @B_android#graphics#ImageFormat#PRIVATE_E@, this ImageWriter will be able to operate with @B_android#graphics#ImageFormat#PRIVATE_E@ Images. Note that the consumer end-point may or may not be able to support Images with different format, for such case, the application should only use this method if the consumer is able to consume such images. The input Image size depends on the Surface that is provided by the downstream consumer end-point.", "history": "Added in API level 29", "FullName": "public static ImageWriter newInstance (Surface surface, int maxImages, int format)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Free up all the resources associated with this ImageWriter. After calling this method, this ImageWriter cannot be used. Calling any methods on this ImageWriter and Images previously provided by @B_android#media#ImageWriter#dequeueInputImage_E@ will result in an @B_java#lang#IllegalStateException_E@, and attempting to write into @B_java#nio#ByteBuffer_E@ returned by an earlier @B_android#media#Image#Plane#getBuffer_E@ call will have undefined behavior.", "history": "Added in API level 23", "FullName": "public void close ()"}, "setOnImageReleasedListener(android.media.ImageWriter.OnImageReleasedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#ImageWriter#OnImageReleasedListener_E@", "ImageWriter.OnImageReleasedListener: The listener that will be run."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If no handler specified and the calling thread has no looper."]], "SeeAlso": [], "Permissions": [], "Description": "Register a listener to be invoked when an input Image is returned to the ImageWriter.", "history": "Added in API level 23", "FullName": "public void setOnImageReleasedListener (ImageWriter.OnImageReleasedListener listener, Handler handler)"}, "getFormat()": {"Returns": [["int", "The ImageWriter format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ImageWriter format. This format may be different than the Image format returned by @B_android#media#Image#getFormat_E@. However, if the ImageWriter format is @B_android#graphics#ImageFormat#PRIVATE_E@, calling @B_android#media#ImageWriter#dequeueInputImage_E@ will result in an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 23", "FullName": "public int getFormat ()"}, "getMaxImages()": {"Returns": [["int", "Maximum number of Images that can be dequeued from this ImageWriter."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#ImageWriter#dequeueInputImage_E@", "@B_android#media#ImageWriter#queueInputImage_E@", "@B_android#media#Image#close_E@"], "Permissions": [], "Description": "Maximum number of Images that can be dequeued from the ImageWriter simultaneously (for example, with @B_android#media#ImageWriter#dequeueInputImage_E@). An Image is considered dequeued after it's returned by @B_android#media#ImageWriter#dequeueInputImage_E@ from ImageWriter, and until the Image is sent back to ImageWriter via @B_android#media#ImageWriter#queueInputImage_E@, or @B_android#media#Image#close_E@. Attempting to dequeue more than maxImages concurrently will result in the @B_android#media#ImageWriter#dequeueInputImage_E@ function throwing an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 23", "FullName": "public int getMaxImages ()"}}, "Inheritance": [], "ClassName": "android.media.ImageWriter", "ClassDesc": "The ImageWriter class allows an application to produce Image data into a @B_android#view#Surface_E@, and have it be consumed by another component like @B_android#hardware#camera2#CameraDevice_E@. Several Android API classes can provide input @B_android#view#Surface_E@ objects for ImageWriter to produce data into, including @B_android#media#MediaCodec_E@ (encoder), @B_android#hardware#camera2#CameraCaptureSession_E@ (reprocessing input), @B_android#media#ImageReader_E@, etc. The input Image data is encapsulated in @B_android#media#Image_E@ objects. To produce Image data into a destination @B_android#view#Surface_E@, the application can get an input Image via @B_android#media#ImageWriter#dequeueInputImage_E@ then write Image data into it. Multiple such @B_android#media#Image_E@ objects can be dequeued at the same time and queued back in any order, up to the number specified by the maxImages constructor parameter. If the application already has an Image from @B_android#media#ImageReader_E@, the application can directly queue this Image into the ImageWriter (via @B_android#media#ImageWriter#queueInputImage_E@), potentially with zero buffer copies. This even works if the image format of the ImageWriter is @B_android#graphics#ImageFormat#PRIVATE_E@, and prior to Android P is the only way to enqueue images into such an ImageWriter. Starting in Android P private images may also be accessed through their hardware buffers (when available) through the @B_android#media#Image#getHardwareBuffer_E@ method. Attempting to access the planes of a private image, will return an empty array. Once new input Images are queued into an ImageWriter, it's up to the downstream components (e.g. @B_android#media#ImageReader_E@ or @B_android#hardware#camera2#CameraDevice_E@) to consume the Images. If the downstream components cannot consume the Images at least as fast as the ImageWriter production rate, the @B_android#media#ImageWriter#dequeueInputImage_E@ call will eventually block and the application will have to drop input frames. If the consumer component that provided the input @B_android#view#Surface_E@ abandons the @B_android#view#Surface_E@, @B_android#media#ImageWriter#queueInputImage_E@ or @B_android#media#ImageWriter#dequeueInputImage_E@ an @B_android#media#Image_E@ will throw an @B_java#lang#IllegalStateException_E@."}