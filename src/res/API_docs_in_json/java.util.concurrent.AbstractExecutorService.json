{"Functions": {"submit(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "Added in API level 1", "FullName": "public Future<T> submit (Runnable task, T result)"}, "invokeAny(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>)": {"Returns": [["T", "the result returned by one of the tasks"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#util#concurrent#ExecutionException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public T invokeAny (Collection<? extends Callable<T>> tasks)"}, "newTaskFor(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task being wrapped"], ["T", "T: the default value for the returned future"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given runnable and default value.", "history": "added in API level 9", "FullName": "protected RunnableFuture<T> newTaskFor (Runnable runnable, T value)"}, "newTaskFor(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will run the underlying runnable and which, as a Future, will yield the given value as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task being wrapped"], ["T", "T: the default value for the returned future"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given runnable and default value.", "history": "Added in API level 9", "FullName": "protected RunnableFuture<T> newTaskFor (Runnable runnable, T value)"}, "submit(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return null upon successful completion.", "history": "Added in API level 1", "FullName": "public Future<?> submit (Runnable task)"}, "invokeAll(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#List_E@", "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. @B_java#util#concurrent#Future#isDone_E@ is true for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"}, "AbstractExecutorService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public AbstractExecutorService ()"}, "submit(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["T", "T: the result to return"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. The Future's get method will return the given result upon successful completion.", "history": "added in API level 1", "FullName": "public Future<T> submit (Runnable task, T result)"}, "invokeAll(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>)": {"Returns": [["@B_java#util#List_E@", "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning a list of Futures holding their status and results when all complete. @B_java#util#concurrent#Future#isDone_E@ is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks)"}, "invokeAny(java.util.Collection<?extendsjava.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)": {"Returns": [["T", "the result returned by one of the tasks"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of tasks"], ["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#ExecutionException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""], ["@B_java#util#concurrent#TimeoutException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.", "history": "Added in API level 1", "FullName": "public T invokeAny (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)"}, "newTaskFor(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#RunnableFuture_E@", "a RunnableFuture which, when run, will call the underlying callable and which, as a Future, will yield the callable's result as its result and provide for cancellation of the underlying task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the callable task being wrapped"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a RunnableFuture for the given callable task.", "history": "Added in API level 9", "FullName": "protected RunnableFuture<T> newTaskFor (Callable<T> callable)"}, "submit(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [["@B_java#util#concurrent#RejectedExecutionException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's get method will return the task's result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result = exec.submit(aCallable).get(); Note: The @B_java#util#concurrent#Executors_E@ class includes a set of methods that can convert some other common closure-like objects, for example, @B_java#security#PrivilegedAction_E@ to @B_java#util#concurrent#Callable_E@ form so they can be submitted.", "history": "Added in API level 1", "FullName": "public Future<T> submit (Callable<T> task)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.AbstractExecutorService", "ClassDesc": "Provides default implementations of @B_java#util#concurrent#ExecutorService_E@ execution methods. This class implements the submit, invokeAny and invokeAll methods using a @B_java#util#concurrent#RunnableFuture_E@ returned by newTaskFor, which defaults to the @B_java#util#concurrent#FutureTask_E@ class provided in this package. For example, the implementation of submit(Runnable) creates an associated RunnableFuture that is executed and returned. Subclasses may override the newTaskFor methods to return RunnableFuture implementations other than FutureTask. @B_java#util#concurrent#ThreadPoolExecutor_E@ to use a CustomTask class instead of the default FutureTask:"}