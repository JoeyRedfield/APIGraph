{"Functions": {"ClipData.Item(java.lang.CharSequence,android.content.Intent,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#content#Intent_E@", "Intent no parameter comment"], ["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a complex Item, containing multiple representations of text, Intent, and/or URI.", "history": "Added in API level 11", "FullName": "public ClipData.Item (CharSequence text, Intent intent, Uri uri)"}, "getHtmlText()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw HTML text contained in this Item.", "history": "Added in API level 16", "FullName": "public String getHtmlText ()"}, "coerceToStyledText(android.content.Context)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns the item's textual representation."]], "Parameters": [["@B_android#content#Context_E@", "Context: The caller's Context, from which its ContentResolver and other things can be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#content#ClipData#Item#coerceToHtmlText_E@, but any text that would be returned as HTML formatting will be returned as text with style spans.", "history": "Added in API level 16", "FullName": "public CharSequence coerceToStyledText (Context context)"}, "ClipData.Item(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an Item consisting of an arbitrary Intent.", "history": "Added in API level 11", "FullName": "public ClipData.Item (Intent intent)"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw text contained in this Item.", "history": "Added in API level 11", "FullName": "public CharSequence getText ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "ClipData.Item(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#content#Intent_E@", "Intent no parameter comment"], ["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a complex Item, containing multiple representations of text, HTML text, Intent, and/or URI. If providing HTML text, you must supply a plain text representation as well; coercion will not be done from HTML formatted text into plain text.", "history": "Added in API level 16", "FullName": "public ClipData.Item (CharSequence text, String htmlText, Intent intent, Uri uri)"}, "ClipData.Item(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an Item consisting of an arbitrary URI.", "history": "Added in API level 11", "FullName": "public ClipData.Item (Uri uri)"}, "ClipData.Item(java.lang.CharSequence,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an Item consisting of a single block of (possibly styled) text, with an alternative HTML formatted representation. You must supply a plain text representation in addition to HTML text; coercion will not be done from HTML formatted text into plain text.", "history": "Added in API level 16", "FullName": "public ClipData.Item (CharSequence text, String htmlText)"}, "coerceToHtmlText(android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "Returns the item's representation as HTML text."]], "Parameters": [["@B_android#content#Context_E@", "Context: The caller's Context, from which its ContentResolver and other things can be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turn this item into HTML text, regardless of the type of data it actually contains. The algorithm for deciding what text to return is: If @B_android#content#ClipData#Item#getHtmlText_E@ is non-null, return that. If @B_android#content#ClipData#Item#getText_E@ is non-null, return that, converting to valid HTML text. If this text contains style spans, @B_android#text#Html#toHtml_E@ is used to convert them to HTML formatting. If @B_android#content#ClipData#Item#getUri_E@ is non-null, try to retrieve its data as a text stream from its content provider. If the provider can supply text/html data, that will be preferred and returned as-is. Otherwise, any text/* data will be returned and escaped to HTML. If it is not a content: URI or the content provider does not supply a text representation, HTML text containing a link to the URI will be returned. If @B_android#content#ClipData#Item#getIntent_E@ is non-null, convert that to an intent: URI and return as an HTML link. Otherwise, return an empty string.", "history": "Added in API level 16", "FullName": "public String coerceToHtmlText (Context context)"}, "getUri()": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw URI contained in this Item.", "history": "Added in API level 11", "FullName": "public Uri getUri ()"}, "coerceToText(android.content.Context)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns the item's textual representation."]], "Parameters": [["@B_android#content#Context_E@", "Context: The caller's Context, from which its ContentResolver and other things can be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turn this item into text, regardless of the type of data it actually contains. The algorithm for deciding what text to return is: If @B_android#content#ClipData#Item#getText_E@ is non-null, return that. If @B_android#content#ClipData#Item#getUri_E@ is non-null, try to retrieve its data as a text stream from its content provider. If this succeeds, copy the text into a String and return it. If it is not a content: URI or the content provider does not supply a text representation, return the raw URI as a string. If @B_android#content#ClipData#Item#getIntent_E@ is non-null, convert that to an intent: URI and return it. Otherwise, return an empty string.", "history": "Added in API level 11", "FullName": "public CharSequence coerceToText (Context context)"}, "getIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw Intent contained in this Item.", "history": "Added in API level 11", "FullName": "public Intent getIntent ()"}, "ClipData.Item(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an Item consisting of a single block of (possibly styled) text.", "history": "Added in API level 11", "FullName": "public ClipData.Item (CharSequence text)"}}, "Inheritance": [], "ClassName": "android.content.ClipData.Item", "ClassDesc": "Description of a single item in a ClipData. The types than an individual item can currently contain are: Text: a basic string of text. This is actually a CharSequence, so it can be formatted text supported by corresponding Android built-in style spans. (Custom application spans are not supported and will be stripped when transporting through the clipboard.) Intent: an arbitrary Intent object. A typical use is the shortcut to create when pasting a clipped item on to the home screen. Uri: a URI reference. This may be any URI (such as an http: URI representing a bookmark), however it is often a content: URI. Using content provider references as clips like this allows an application to share complex or large clips through the standard content provider facilities."}