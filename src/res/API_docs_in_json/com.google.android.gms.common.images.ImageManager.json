{"Functions": {"loadImage(android.widget.ImageView, int)": {"Returns": [], "Parameters": [["ImageView", "The image view to populate with the image."], ["int", "Resource ID to use for the image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads an image to display from the given resource ID. If you also use @B_com#google#android#gms#common#images#ImageManager_E@s for Views hosted in a ListAdapter (or any other class that recycles Views instances), then this call should be used rather than setting the resource directly. This avoids clobbering images when views are recycled.", "history": "", "FullName": "public void loadImage (ImageView imageView, int resId)"}, "loadImage(android.widget.ImageView, android.net.Uri)": {"Returns": [], "Parameters": [["ImageView", "The image view to populate with the image."], ["Uri", "URI to load the image data from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads an image to display from a URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services. The image view will be cleared out (the drawable set to null) if the image needs to be loaded asynchronously. The result (if non-null) is set on the given image view on the main thread. Note that if the @B_android#widget#ImageView_E@ used for this call is hosted in a ListAdapter (or any other class that recycles @B_android#widget#ImageView_E@ instances), then ALL calls to set the contents of that @B_android#widget#ImageView_E@ must be done via one of the calls on this @B_com#google#android#gms#common#images#ImageManager_E@.", "history": "", "FullName": "public void loadImage (ImageView imageView, Uri uri)"}, "loadImage(com.google.android.gms.common.images.ImageManager.OnImageLoadedListener, android.net.Uri, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#images#ImageManager#OnImageLoadedListener_E@", "The listener that is called when the load is complete."], ["Uri", "URI to load the image data from."], ["int", "Resource ID to use by default for the image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load an image to display from a URI, using the given resource ID as the default if no image is found for the given URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services. Note that you should hold a reference to the listener provided until the callback is complete. For this reason, the use of anonymous implementations is discouraged. The result is delivered to the given listener on the main thread. If a result is not found, the image view will be set to the given default resource if the image needs to be loaded asynchronously.", "history": "", "FullName": "public void loadImage (ImageManager.OnImageLoadedListener listener, Uri uri, int defaultResId)"}, "loadImage(com.google.android.gms.common.images.ImageManager.OnImageLoadedListener, android.net.Uri)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#images#ImageManager#OnImageLoadedListener_E@", "The listener that is called when the load is complete."], ["Uri", "URI to load the image data from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load an image to display from a URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services. Note that you should hold a reference to the listener provided until the callback is complete. For this reason, the use of anonymous implementations is discouraged. The result is delivered to the given listener on the main thread.", "history": "", "FullName": "public void loadImage (ImageManager.OnImageLoadedListener listener, Uri uri)"}, "create(android.content.Context)": {"Returns": [["", "A new ImageManager."]], "Parameters": [["Context", "The context used by the ImageManager."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new ImageManager for loading images from the network.", "history": "", "FullName": "public static ImageManager create (Context context)"}, "loadImage(android.widget.ImageView, android.net.Uri, int)": {"Returns": [], "Parameters": [["ImageView", "The image view to populate with the image."], ["Uri", "URI to load the image data from."], ["int", "Resource ID to use by default for the image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads an image to display from a URI, using the given resource ID as the default if no image is found for the given URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services. The image view will be set to the given default resource if the image needs to be loaded asynchronously. The result (if non-null) is set on the given image view on the main thread. Note that if the @B_android#widget#ImageView_E@ used for this call is hosted in a ListAdapter (or any other class that recycles @B_android#widget#ImageView_E@ instances), then ALL calls to set the contents of that @B_android#widget#ImageView_E@ must be done via one of the calls on this @B_com#google#android#gms#common#images#ImageManager_E@.", "history": "", "FullName": "public void loadImage (ImageView imageView, Uri uri, int defaultResId)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.common.images.ImageManager", "ClassDesc": "This class is used to load images from the network and handles local caching for you."}