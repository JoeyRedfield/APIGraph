{"Functions": {"getDeclaredAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given annotation class is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present. This method ignores inherited annotations. If there are no specified annotations directly or indirectly present on this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getDeclaredAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation if one is present. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 24", "FullName": "public T[] getDeclaredAnnotationsByType (Class<T> annotationClass)"}, "getDeclaredAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if directly present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given annotation class is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.)", "history": "Added in API level 24", "FullName": "public T getDeclaredAnnotation (Class<T> annotationClass)"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given annotation class is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 24", "FullName": "public T[] getAnnotationsByType (Class<T> annotationClass)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public abstract Annotation[] getDeclaredAnnotations ()"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public abstract Annotation[] getAnnotations ()"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given annotation class is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 1", "FullName": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given annotation class is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 1", "FullName": "public abstract T getAnnotation (Class<T> annotationClass)"}}, "Inheritance": [], "ClassName": "java.lang.reflect.AnnotatedElement", "ClassDesc": "Represents an annotated element of the program currently running in this VM. This interface allows annotations to be read reflectively. All annotations returned by methods in this interface are immutable and serializable. The arrays returned by methods of this interface may be modified by callers without affecting the arrays returned to other callers. Android note: methods that return multiple annotations of different types such as @B_java#lang#reflect#AnnotatedElement#getAnnotations_E@ and @B_java#lang#reflect#AnnotatedElement#getDeclaredAnnotations_E@ can be affected by the explicit character-code ordering of annotations types specified by the DEX format. Annotations of different types on a single element are not guaranteed to be returned in the order they are declared in source. The @B_java#lang#reflect#AnnotatedElement#getAnnotationsByType_E@ and @B_java#lang#reflect#AnnotatedElement#getDeclaredAnnotationsByType_E@ methods support multiple annotations of the same type on an element. If the argument to either method is a repeatable annotation type (JLS 9.6), then the method will \"look through\" a container annotation (JLS 9.7), if present, and return any annotations inside the container. Container annotations may be generated at compile-time to wrap multiple annotations of the argument type. The terms directly present, indirectly present, present, and associated are used throughout this interface to describe precisely which annotations are returned by methods: An annotation directly present on an element An annotation indirectly present on an element An annotation No annotation of An annotation associated with an element No annotation of The table below summarizes which kind of annotation presence different methods in this interface examine. For an invocation of get[Declared]AnnotationsByType( Class < T >), the order of annotations which are directly or indirectly present on an element There are several compatibility concerns to keep in mind if an annotation type not repeatable and later modified to be repeatable. The containing annotation type for Modifying If an annotation type The change to get[Declared]Annotation(Class<T>) (called with an argument of get[Declared]Annotations() methods because the results of the methods will not change due to The change to get[Declared]AnnotationsByType(Class<T>) methods called with an argument of If an annotation of type The addition of the annotations of type The addition of the annotations of type get[Declared]Annotation(Class<T>) methods and get[Declared]Annotations() methods, because those methods will now only see a container annotation on the element and not see an annotation of type The addition of the annotations of type get[Declared]AnnotationsByType(Class<T>) methods, because their results will expose the additional annotations of type If an annotation returned by a method in this interface contains (directly or indirectly) a @B_java#lang#Class_E@-valued member referring to a class that is not accessible in this VM, attempting to read the class by calling the relevant Class-returning method on the returned annotation will result in a @B_java#lang#TypeNotPresentException_E@. Similarly, attempting to read an enum-valued member will result in a @B_java#lang#EnumConstantNotPresentException_E@ if the enum constant in the annotation is no longer present in the enum type. If an annotation type @Repeatable annotation whose value element indicates a type value() method with a return type of [], then an exception of type @B_java#lang#annotation#AnnotationFormatError_E@ is thrown. Finally, attempting to read a member whose definition has evolved incompatibly will result in a @B_java#lang#annotation#AnnotationTypeMismatchException_E@ or an @B_java#lang#annotation#IncompleteAnnotationException_E@."}