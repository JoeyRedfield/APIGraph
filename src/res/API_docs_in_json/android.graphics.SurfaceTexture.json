{"Functions": {"attachToGLContext(int)": {"Returns": [], "Parameters": [["int", "int: The name of the OpenGL ES texture that will be created. This texture name must be unusued in the OpenGL ES context that is current on the calling thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread. A new OpenGL ES texture object is created and populated with the SurfaceTexture image frame that was current at the time of the last call to @B_android#graphics#SurfaceTexture#detachFromGLContext_E@. This new texture is bound to the GL_TEXTURE_EXTERNAL_OES texture target. This can be used to access the SurfaceTexture image contents from multiple OpenGL ES contexts. Note, however, that the image contents are only accessible from one OpenGL ES context at a time.", "history": "Added in API level 16", "FullName": "public void attachToGLContext (int texName)"}, "setDefaultBufferSize(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default size of the image buffers. The image producer may override the buffer size, in which case the producer-set buffer size will be used, not the default size set by this method. Both video and camera based image producers do override the size. This method may be used to set the image size when producing images with @B_android#graphics#Canvas_E@ (via @B_android#view#Surface#lockCanvas_E@), or OpenGL ES (via an EGLSurface). The new default buffer size will take effect the next time the image producer requests a buffer to fill. For @B_android#graphics#Canvas_E@ this will be the next time @B_android#view#Surface#lockCanvas_E@ is called. For OpenGL ES, the EGLSurface should be destroyed (via eglDestroySurface), made not-current (via eglMakeCurrent), and then recreated (via eglCreateWindowSurface) to ensure that the new default size has taken effect. The width and height parameters must be no greater than the minimum of GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see @B_javax#microedition#khronos#opengles#GL10#glGetIntegerv_E@). An error due to invalid dimensions might not be reported until updateTexImage() is called.", "history": "Added in API level 15", "FullName": "public void setDefaultBufferSize (int width, int height)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 11", "FullName": "protected void finalize ()"}, "SurfaceTexture(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the OpenGL texture object name (e.g. generated via glGenTextures)"], ["boolean", "boolean: whether the SurfaceTexture will be in single buffered mode."]], "Throws": [["@B_android#view#Surface#OutOfResourcesException_E@", "If the SurfaceTexture cannot be created."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new SurfaceTexture to stream images to a given OpenGL texture. In single buffered mode the application is responsible for serializing access to the image content buffer. Each time the image content is to be updated, the @B_android#graphics#SurfaceTexture#releaseTexImage_E@ method must be called before the image content producer takes ownership of the buffer. For example, when producing image content with the NDK ANativeWindow_lock and ANativeWindow_unlockAndPost functions, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before each ANativeWindow_lock, or that call will fail. When producing image content with OpenGL ES, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before the first OpenGL ES function call each frame.", "history": "added in API level 19", "FullName": "public SurfaceTexture (int texName, boolean singleBufferMode)"}, "setDefaultBufferSize(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default size of the image buffers. The image producer may override the buffer size, in which case the producer-set buffer size will be used, not the default size set by this method. Both video and camera based image producers do override the size. This method may be used to set the image size when producing images with @B_android#graphics#Canvas_E@ (via @B_android#view#Surface#lockCanvas_E@), or OpenGL ES (via an EGLSurface). The new default buffer size will take effect the next time the image producer requests a buffer to fill. For @B_android#graphics#Canvas_E@ this will be the next time @B_android#view#Surface#lockCanvas_E@ is called. For OpenGL ES, the EGLSurface should be destroyed (via eglDestroySurface), made not-current (via eglMakeCurrent), and then recreated (via eglCreateWindowSurface) to ensure that the new default size has taken effect. The width and height parameters must be no greater than the minimum of GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see @B_javax#microedition#khronos#opengles#GL10#glGetIntegerv_E@). An error due to invalid dimensions might not be reported until updateTexImage() is called.", "history": "added in API level 15", "FullName": "public void setDefaultBufferSize (int width, int height)"}, "setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener)": {"Returns": [], "Parameters": [["@B_android#graphics#SurfaceTexture#OnFrameAvailableListener_E@", "SurfaceTexture.OnFrameAvailableListener: The listener to use, or null to remove the listener. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when a new image frame becomes available to the SurfaceTexture. The callback may be called on an arbitrary thread, so it is not safe to call @B_android#graphics#SurfaceTexture#updateTexImage_E@ without first binding the OpenGL ES context to the thread invoking the callback.", "history": "Added in API level 11", "FullName": "public void setOnFrameAvailableListener (SurfaceTexture.OnFrameAvailableListener listener)"}, "getTimestamp()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the timestamp associated with the texture image set by the most recent call to updateTexImage. This timestamp is in nanoseconds, and is normally monotonically increasing. The timestamp should be unaffected by time-of-day adjustments. The specific meaning and zero point of the timestamp depends on the source providing images to the SurfaceTexture. Unless otherwise specified by the image source, timestamps cannot generally be compared across SurfaceTexture instances, or across multiple program invocations. It is mostly useful for determining time offsets between subsequent frames. For camera sources, timestamps should be strictly monotonic. Timestamps from MediaPlayer sources may be reset when the playback position is set. For EGL and Vulkan producers, the timestamp is the desired present time set with the EGL_ANDROID_presentation_time or VK_GOOGLE_display_timing extensions.", "history": "Added in API level 14", "FullName": "public long getTimestamp ()"}, "SurfaceTexture(int)": {"Returns": [], "Parameters": [["int", "int: the OpenGL texture object name (e.g. generated via glGenTextures)"]], "Throws": [["@B_android#view#Surface#OutOfResourcesException_E@", "If the SurfaceTexture cannot be created."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new SurfaceTexture to stream images to a given OpenGL texture.", "history": "Added in API level 11", "FullName": "public SurfaceTexture (int texName)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#SurfaceTexture#isReleased_E@"], "Permissions": [], "Description": "release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state. Once put in this state the SurfaceTexture can never leave it. When in the 'abandoned' state, all methods of the IGraphicBufferProducer interface will fail with the NO_INIT error. Note that while calling this method causes all the buffers to be freed from the perspective of the the SurfaceTexture, if there are additional references on the buffers (e.g. if a buffer is referenced by a client or by OpenGL ES as a texture) then those buffer will remain allocated. Always call this method when you are done with SurfaceTexture. Failing to do so may delay resource deallocation for a significant amount of time.", "history": "Added in API level 14", "FullName": "public void release ()"}, "setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#graphics#SurfaceTexture#OnFrameAvailableListener_E@", "SurfaceTexture.OnFrameAvailableListener: The listener to use, or null to remove the listener. This value may be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be invoked, or null to use an arbitrary thread. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when a new image frame becomes available to the SurfaceTexture. If a handler is specified, the callback will be invoked on that handler's thread. If no handler is specified, then the callback may be called on an arbitrary thread, so it is not safe to call @B_android#graphics#SurfaceTexture#updateTexImage_E@ without first binding the OpenGL ES context to the thread invoking the callback.", "history": "Added in API level 21", "FullName": "public void setOnFrameAvailableListener (SurfaceTexture.OnFrameAvailableListener listener, Handler handler)"}, "detachFromGLContext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object. This call must be made with the OpenGL ES context current on the calling thread. The OpenGL ES texture object will be deleted as a result of this call. After calling this method all calls to @B_android#graphics#SurfaceTexture#updateTexImage_E@ will throw an @B_java#lang#IllegalStateException_E@ until a successful call to @B_android#graphics#SurfaceTexture#attachToGLContext_E@ is made. This can be used to access the SurfaceTexture image contents from multiple OpenGL ES contexts. Note, however, that the image contents are only accessible from one OpenGL ES context at a time.", "history": "Added in API level 16", "FullName": "public void detachFromGLContext ()"}, "SurfaceTexture(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the SurfaceTexture will be in single buffered mode."]], "Throws": [["@B_android#view#Surface#OutOfResourcesException_E@", "If the SurfaceTexture cannot be created."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new SurfaceTexture to stream images to a given OpenGL texture. In single buffered mode the application is responsible for serializing access to the image content buffer. Each time the image content is to be updated, the @B_android#graphics#SurfaceTexture#releaseTexImage_E@ method must be called before the image content producer takes ownership of the buffer. For example, when producing image content with the NDK ANativeWindow_lock and ANativeWindow_unlockAndPost functions, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before each ANativeWindow_lock, or that call will fail. When producing image content with OpenGL ES, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before the first OpenGL ES function call each frame. Unlike @B_android#graphics#SurfaceTexture#SurfaceTexture_E@, which takes an OpenGL texture object name, this constructor creates the SurfaceTexture in detached mode. A texture name must be passed in using @B_android#graphics#SurfaceTexture#attachToGLContext_E@ before calling @B_android#graphics#SurfaceTexture#releaseTexImage_E@ and producing image content using OpenGL ES.", "history": "Added in API level 26", "FullName": "public SurfaceTexture (boolean singleBufferMode)"}, "updateTexImage()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the texture image to the most recent frame from the image stream. This may only be called while the OpenGL ES context that owns the texture is current on the calling thread. It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.", "history": "Added in API level 11", "FullName": "public void updateTexImage ()"}, "releaseTexImage()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the the texture content. This is needed in single buffered mode to allow the image content producer to take ownership of the image buffer. For more information see @B_android#graphics#SurfaceTexture#SurfaceTexture_E@.", "history": "Added in API level 19", "FullName": "public void releaseTexImage ()"}, "getTransformMatrix(float[])": {"Returns": [], "Parameters": [["float[]", "float: the array into which the 4x4 matrix will be stored. The array must have exactly 16 elements."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample that location from the texture. Sampling the texture outside of the range of this transform is undefined. The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv functions.", "history": "Added in API level 11", "FullName": "public void getTransformMatrix (float[] mtx)"}, "isReleased()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#SurfaceTexture#release_E@"], "Permissions": [], "Description": "Returns true if the SurfaceTexture was released.", "history": "Added in API level 26", "FullName": "public boolean isReleased ()"}, "SurfaceTexture(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the OpenGL texture object name (e.g. generated via glGenTextures)"], ["boolean", "boolean: whether the SurfaceTexture will be in single buffered mode."]], "Throws": [["@B_android#view#Surface#OutOfResourcesException_E@", "If the SurfaceTexture cannot be created."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new SurfaceTexture to stream images to a given OpenGL texture. In single buffered mode the application is responsible for serializing access to the image content buffer. Each time the image content is to be updated, the @B_android#graphics#SurfaceTexture#releaseTexImage_E@ method must be called before the image content producer takes ownership of the buffer. For example, when producing image content with the NDK ANativeWindow_lock and ANativeWindow_unlockAndPost functions, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before each ANativeWindow_lock, or that call will fail. When producing image content with OpenGL ES, @B_android#graphics#SurfaceTexture#releaseTexImage_E@ must be called before the first OpenGL ES function call each frame.", "history": "Added in API level 19", "FullName": "public SurfaceTexture (int texName, boolean singleBufferMode)"}}, "Inheritance": [], "ClassName": "android.graphics.SurfaceTexture", "ClassDesc": "Captures frames from an image stream as an OpenGL ES texture. The image stream may come from either camera preview or video decode. A @B_android#view#Surface_E@ created from a SurfaceTexture can be used as an output destination for the @B_android#hardware#camera2#package-summary_E@, @B_android#media#MediaCodec_E@, @B_android#media#MediaPlayer_E@, and @B_android#renderscript#Allocation_E@ APIs. When @B_android#graphics#SurfaceTexture#updateTexImage_E@ is called, the contents of the texture object specified when the SurfaceTexture was created are updated to contain the most recent image from the image stream. This may cause some frames of the stream to be skipped. A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output destination of the older @B_android#hardware#Camera_E@ API. Doing so will cause all the frames from the image stream to be sent to the SurfaceTexture object rather than to the device's display. When sampling from the texture one should first transform the texture coordinates using the matrix queried via @B_android#graphics#SurfaceTexture#getTransformMatrix_E@. The transform matrix may change each time @B_android#graphics#SurfaceTexture#updateTexImage_E@ is called, so it should be re-queried each time the texture image is updated. This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s, t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in the streamed texture. This transform compensates for any properties of the image stream source that cause it to appear different from a traditional OpenGL ES texture. For example, sampling from the bottom left corner of the image can be accomplished by transforming the column vector (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can be done by transforming (1, 1, 0, 1). The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the SurfaceTexture objects may be created on any thread. @B_android#graphics#SurfaceTexture#updateTexImage_E@ may only be called on the thread with the OpenGL ES context that contains the texture object. The frame-available callback is called on an arbitrary thread, so unless special care is taken @B_android#graphics#SurfaceTexture#updateTexImage_E@ should not be called directly from the callback."}