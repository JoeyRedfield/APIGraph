{"Functions": {"accept(T)": {"Returns": [], "Parameters": [["T", "T: the input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given argument.", "history": "Added in API level 24", "FullName": "public abstract void accept (T t)"}, "andThen(java.util.function.Consumer<? super T>)": {"Returns": [["@B_java#util#function#Consumer_E@", "a composed Consumer that performs in sequence this operation followed by the after operation"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the operation to perform after this operation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed Consumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.", "history": "added in API level 24", "FullName": "public Consumer<T> andThen (Consumer<? super T> after)"}, "andThen(java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#function#Consumer_E@", "a composed Consumer that performs in sequence this operation followed by the after operation"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the operation to perform after this operation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed Consumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.", "history": "Added in API level 24", "FullName": "public Consumer<T> andThen (Consumer<? super T> after)"}}, "Inheritance": [], "ClassName": "java.util.function.Consumer<T>", "ClassDesc": "Represents an operation that accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects. This is a @B_java#util#function#Consumer#accept_E@."}