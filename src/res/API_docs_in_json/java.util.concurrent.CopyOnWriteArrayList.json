{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "CopyOnWriteArrayList(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of initially held elements"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "Added in API level 1", "FullName": "public CopyOnWriteArrayList (Collection<? extends E> c)"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "listIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence). The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods.", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator ()"}, "sort(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' natural ordering should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "", "FullName": "public void sort (Comparator<? super E> c)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this list"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this list for equality. Returns true if the specified object is the same object as this object, or if it is also a @B_java#util#List_E@ and the sequence of elements returned by an equal. Two elements e1 and e2 are considered equal if Objects.equals(e1, e2).", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "lastIndexOf(E, int)": {"Returns": [["int", "the index of the last occurrence of the element at position less than or equal to index in this list; -1 if the element is not found."]], "Parameters": [["E", "E: element to search for"], ["int", "int: index to start searching backwards from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is greater than or equal to the current size of this list"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that i <= index && Objects.equals(get(i), e), or -1 if there is no such index.", "history": "added in API level 1", "FullName": "public int lastIndexOf (E e, int index)"}, "remove(int)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.", "history": "Added in API level 1", "FullName": "public E remove (int index)"}, "indexOf(E, int)": {"Returns": [["int", "the index of the first occurrence of the element in this list at position index or later in the list; -1 if the element is not found."]], "Parameters": [["E", "E: element to search for"], ["int", "int: index to start searching from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that i >= index && Objects.equals(get(i), e), or -1 if there is no such index.", "history": "added in API level 1", "FullName": "public int indexOf (E e, int index)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this list.", "history": "Added in API level 1", "FullName": "public int size ()"}, "addIfAbsent(E)": {"Returns": [["boolean", "true if the element was added"]], "Parameters": [["E", "E: element to be added to this list, if absent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the element, if not present.", "history": "Added in API level 1", "FullName": "public boolean addIfAbsent (E e)"}, "addAllAbsent(java.util.Collection<? extends E>)": {"Returns": [["int", "the number of elements added"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#addIfAbsent_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.", "history": "added in API level 1", "FullName": "public int addAllAbsent (Collection<? extends E> c)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that Objects.equals(o, get(i)) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this list. (The elements themselves are not copied.)", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this list. The string representation consists of the string representations of the list's elements in the order they are returned by its iterator, enclosed in square brackets (\"[]\"). Adjacent elements are separated by the characters \", \" (comma and space). Elements are converted to strings as by @B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "indexOf(E,int)": {"Returns": [["int", "the index of the first occurrence of the element in this list at position index or later in the list; -1 if the element is not found."]], "Parameters": [["E", "E: element to search for"], ["int", "int: index to start searching from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found. More formally, returns the lowest index i such that i >= index && Objects.equals(get(i), e), or -1 if there is no such index.", "history": "Added in API level 1", "FullName": "public int indexOf (E e, int index)"}, "subList(int, int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive. The returned list is backed by this list, so changes in the returned list are reflected in this list. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is modified in any way other than via the returned list.", "history": "added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#add_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o)"}, "hashCode()": {"Returns": [["int", "the hash code value for this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this list. This implementation uses the definition in @B_java#util#List#hashCode_E@.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "forEach(java.util.function.Consumer<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "removeIf(java.util.function.Predicate<? super E>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "CopyOnWriteArrayList(E[])": {"Returns": [], "Parameters": [["E[]", "E: the array (a copy of this array is used as the internal array)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a list holding a copy of the given array.", "history": "Added in API level 1", "FullName": "public CopyOnWriteArrayList (E[] toCopyIn)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#add_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "sort(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' Comparable should be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "Added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this list"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#remove_E@"], "Permissions": [], "Description": "Removes from this list all of its elements that are contained in the specified collection. This is a particularly expensive operation in this class because of the need for an internal temporary array.", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this list. The list will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this list. The Spliterator reports @B_java#util#Spliterator#IMMUTABLE_E@, @B_java#util#Spliterator#ORDERED_E@, @B_java#util#Spliterator#SIZED_E@, and @B_java#util#Spliterator#SUBSIZED_E@. The spliterator provides a snapshot of the state of the list when the spliterator was constructed. No synchronization is needed while operating on the spliterator.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#add_E@"], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator.", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list in proper sequence. The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#add_E@"], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator.", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list contains all of the elements of the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#contains_E@"], "Permissions": [], "Description": "Returns true if this list contains all of the elements of the specified collection.", "history": "Added in API level 1", "FullName": "public boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this list"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#remove_E@"], "Permissions": [], "Description": "Retains only the elements in this list that are contained in the specified collection. In other words, removes from this list all of its elements that are not contained in the specified collection.", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "addAllAbsent(java.util.Collection<?extendsE>)": {"Returns": [["int", "the number of elements added"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArrayList#addIfAbsent_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.", "history": "Added in API level 1", "FullName": "public int addAllAbsent (Collection<? extends E> c)"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index", "history": "Added in API level 1", "FullName": "public int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "CopyOnWriteArrayList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty list.", "history": "Added in API level 1", "FullName": "public CopyOnWriteArrayList ()"}, "forEach(java.util.function.Consumer<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "isEmpty()": {"Returns": [["boolean", "true if this list contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this list contains no elements.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all the elements in this list"]], "Parameters": [["T[]", "T: the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this list"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If this list fits in the specified array with room to spare (i.e., the array has more elements than this list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of this list Like the @B_java#util#concurrent#CopyOnWriteArrayList#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list iterator (by a call to @B_java#util#ListIterator#next_E@)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to @B_java#util#ListIterator#next_E@. An initial call to @B_java#util#ListIterator#previous_E@ would return the element with the specified index minus one. The returned iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove, set or add methods.", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator (int index)"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list.", "history": "Added in API level 1", "FullName": "public E get (int index)"}, "replaceAll(java.util.function.UnaryOperator<E>)": {"Returns": [], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: the operator to apply to each element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (UnaryOperator<E> operator)"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "lastIndexOf(E,int)": {"Returns": [["int", "the index of the last occurrence of the element at position less than or equal to index in this list; -1 if the element is not found."]], "Parameters": [["E", "E: element to search for"], ["int", "int: index to start searching backwards from"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the specified index is greater than or equal to the current size of this list"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found. More formally, returns the highest index i such that i <= index && Objects.equals(get(i), e), or -1 if there is no such index.", "history": "Added in API level 1", "FullName": "public int lastIndexOf (E e, int index)"}, "subList(int,int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive. The returned list is backed by this list, so changes in the returned list are reflected in this list. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is modified in any way other than via the returned list.", "history": "Added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this list contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this list is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that Objects.equals(o, e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.CopyOnWriteArrayList<E>", "ClassDesc": "A thread-safe variant of @B_java#util#ArrayList_E@ in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array. This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber mutations, and is useful when you cannot or don't want to synchronize traversals, yet need to preclude interference among concurrent threads. The \"snapshot\" style iterator method uses a reference to the state of the array at the point that the iterator was created. This array never changes during the lifetime of the iterator, so interference is impossible and the iterator is guaranteed not to throw ConcurrentModificationException. The iterator will not reflect additions, removals, or changes to the list since the iterator was created. Element-changing operations on iterators themselves (remove, set, and add) are not supported. These methods throw UnsupportedOperationException. All elements are permitted, including null. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a CopyOnWriteArrayList CopyOnWriteArrayList in another thread."}