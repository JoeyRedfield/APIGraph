{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation of this instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "isPresent()": {"Returns": [["boolean", "true if there is a value present, otherwise false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if there is a value present, otherwise false.", "history": "Added in API level 24", "FullName": "public boolean isPresent ()"}, "empty()": {"Returns": [["@B_java#util#OptionalInt_E@", "an empty OptionalInt"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty OptionalInt instance. No value is present for this OptionalInt.", "history": "Added in API level 24", "FullName": "public static OptionalInt empty ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "{code true} if the other object is \"equal to\" this object otherwise false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an object to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this OptionalInt. The other object is considered equal if: it is also an OptionalInt and; both instances have no value present or; the present values are \"equal to\" each other via ==.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "orElse(int)": {"Returns": [["int", "the value, if present, otherwise other"]], "Parameters": [["int", "int: the value to be returned if there is no value present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value if present, otherwise return other.", "history": "Added in API level 24", "FullName": "public int orElse (int other)"}, "ifPresent(java.util.function.IntConsumer)": {"Returns": [], "Parameters": [["@B_java#util#function#IntConsumer_E@", "IntConsumer: block to be executed if a value is present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is present and consumer is null"]], "SeeAlso": [], "Permissions": [], "Description": "Have the specified consumer accept the value if a value is present, otherwise do nothing.", "history": "Added in API level 24", "FullName": "public void ifPresent (IntConsumer consumer)"}, "orElseGet(java.util.function.IntSupplier)": {"Returns": [["int", "the value if present otherwise the result of other.getAsInt()"]], "Parameters": [["@B_java#util#function#IntSupplier_E@", "IntSupplier: a IntSupplier whose result is returned if no value is present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if value is not present and other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Return the value if present, otherwise invoke other and return the result of that invocation.", "history": "Added in API level 24", "FullName": "public int orElseGet (IntSupplier other)"}, "of(int)": {"Returns": [["@B_java#util#OptionalInt_E@", "an OptionalInt with the value present"]], "Parameters": [["int", "int: the value to be present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an OptionalInt with the specified value present.", "history": "Added in API level 24", "FullName": "public static OptionalInt of (int value)"}, "getAsInt()": {"Returns": [["int", "the value held by this OptionalInt"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there is no value present"]], "SeeAlso": ["@B_java#util#OptionalInt#isPresent_E@"], "Permissions": [], "Description": "If a value is present in this OptionalInt, returns the value, otherwise throws NoSuchElementException.", "history": "Added in API level 24", "FullName": "public int getAsInt ()"}, "orElseThrow(java.util.function.Supplier<X>)": {"Returns": [["int", "the present value"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: The supplier which will return the exception to be thrown"]], "Throws": [["", "if there is no value present"], ["@B_java#lang#NullPointerException_E@", "if no value is present and exceptionSupplier is null"], ["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.", "history": "Added in API level 24", "FullName": "public int orElseThrow (Supplier<X> exceptionSupplier)"}, "hashCode()": {"Returns": [["int", "hash code value of the present value or 0 if no value is present"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value of the present value, if any, or 0 (zero) if no value is present.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.OptionalInt", "ClassDesc": "A container object which may or may not contain a int value. If a value is present, isPresent() will return true and getAsInt() will return the value. Additional methods that depend on the presence or absence of a contained value are provided, such as @B_java#util#OptionalInt#orElse_E@ (return a default value if value not present) and @B_java#util#OptionalInt#ifPresent_E@ (execute a block of code if the value is present)."}