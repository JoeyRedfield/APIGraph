{"Functions": {"draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void draw (Canvas canvas)"}, "timeShiftResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes playback. No-op if it is already resumed. Call @B_android#media#tv#TvView#timeShiftPause_E@ to pause.", "history": "Added in API level 23", "FullName": "public void timeShiftResume ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "sendAppPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the private command to send. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: An optional bundle to send with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a private command to the underlying TV input. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.", "history": "Added in API level 24", "FullName": "public void sendAppPrivateCommand (String action, Bundle data)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 21", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "selectTrack(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The type of the track to select. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the track to select. null means to unselect the current track for a given type."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvView#getTracks_E@", "@B_android#media#tv#TvView#getSelectedTrack_E@"], "Permissions": [], "Description": "Selects a track.", "history": "Added in API level 21", "FullName": "public void selectTrack (int type, String trackId)"}, "tune(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input for the given channel. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel.", "history": "Added in API level 21", "FullName": "public void tune (String inputId, Uri channelUri)"}, "setCaptionEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable, false to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the caption in this TvView. Note that this method does not take any effect unless the current TvView is tuned.", "history": "Added in API level 21", "FullName": "public void setCaptionEnabled (boolean enabled)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 21", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "timeShiftSetPlaybackParams(android.media.PlaybackParams)": {"Returns": [], "Parameters": [["@B_android#media#PlaybackParams_E@", "PlaybackParams: The playback params. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets playback rate using @B_android#media#PlaybackParams_E@.", "history": "Added in API level 23", "FullName": "public void timeShiftSetPlaybackParams (PlaybackParams params)"}, "timeShiftPlay(java.lang.String, android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input that created the given recorded program."], ["@B_android#net#Uri_E@", "Uri: The URI of a recorded program."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays a given recorded TV program.", "history": "added in API level 24", "FullName": "public void timeShiftPlay (String inputId, Uri recordedProgramUri)"}, "gatherTransparentRegion(android.graphics.Region)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Region_E@", "Region no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean gatherTransparentRegion (Region region)"}, "TvView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TvView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 21", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setZOrderMediaOverlay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to be on top of another regular surface, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether the TvView's surface is placed on top of another regular surface view in the window (but still behind the window itself). This is typically used to place overlays on top of an underlying TvView. Note that this must be set before the TvView's containing window is attached to the window manager. Calling this overrides any previous call to @B_android#media#tv#TvView#setZOrderOnTop_E@.", "history": "Added in API level 24", "FullName": "public void setZOrderMediaOverlay (boolean isMediaOverlay)"}, "setZOrderOnTop(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to be on top of its window, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether the TvView's surface is placed on top of its window. Normally it is placed behind the window, to allow it to (for the most part) appear to composite with the views in the hierarchy. By setting this, you cause it to be placed above the window. This means that none of the contents of the window this TvView is in will be visible on top of its surface. Note that this must be set before the TvView's containing window is attached to the window manager. Calling this overrides any previous call to @B_android#media#tv#TvView#setZOrderMediaOverlay_E@.", "history": "Added in API level 24", "FullName": "public void setZOrderOnTop (boolean onTop)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "timeShiftPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pauses playback. No-op if it is already paused. Call @B_android#media#tv#TvView#timeShiftResume_E@ to resume.", "history": "Added in API level 23", "FullName": "public void timeShiftPause ()"}, "selectTrack(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The type of the track to select. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the track to select. null means to unselect the current track for a given type."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvView#getTracks_E@", "@B_android#media#tv#TvView#getSelectedTrack_E@"], "Permissions": [], "Description": "Selects a track.", "history": "added in API level 21", "FullName": "public void selectTrack (int type, String trackId)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 21", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "setCallback(android.media.tv.TvView.TvInputCallback)": {"Returns": [], "Parameters": [["@B_android#media#tv#TvView#TvInputCallback_E@", "TvView.TvInputCallback: The callback to receive events. A value of null removes the existing callback. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the callback to be invoked when an event is dispatched to this TvView.", "history": "Added in API level 21", "FullName": "public void setCallback (TvView.TvInputCallback callback)"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass the touch screen motion event down to the target view, or this view if it is the target.", "history": "Added in API level 21", "FullName": "public boolean dispatchTouchEvent (MotionEvent event)"}, "tune(java.lang.String,android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of TV input for the given channel."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."], ["@B_android#os#Bundle_E@", "Bundle: Domain-specific data for this tune request. Keys must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.", "history": "Added in API level 24", "FullName": "public void tune (String inputId, Uri channelUri, Bundle params)"}, "dispatchUnhandledInputEvent(android.view.InputEvent)": {"Returns": [["boolean", "true if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#InputEvent_E@", "InputEvent: The input event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatches an unhandled input event to the next receiver. Except system keys, TvView always consumes input events in the normal flow. This is called asynchronously from where the event is dispatched. It gives the host application a chance to dispatch the unhandled input events.", "history": "Added in API level 21", "FullName": "public boolean dispatchUnhandledInputEvent (InputEvent event)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected void onDetachedFromWindow ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this TvView. This method is primarily used to un-tune the current TvView.", "history": "Added in API level 21", "FullName": "public void reset ()"}, "onVisibilityChanged(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view. This value must never be null."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 21", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "timeShiftSeekTo(long)": {"Returns": [], "Parameters": [["long", "long: The time position to seek to, in milliseconds since the epoch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Seeks to a specified time position. timeMs must be equal to or greater than the start position returned by @B_android#media#tv#TvView#TimeShiftPositionCallback#onTimeShiftStartPositionChanged_E@ and equal to or less than the current time.", "history": "Added in API level 23", "FullName": "public void timeShiftSeekTo (long timeMs)"}, "setOnUnhandledInputEventListener(android.media.tv.TvView.OnUnhandledInputEventListener)": {"Returns": [], "Parameters": [["@B_android#media#tv#TvView#OnUnhandledInputEventListener_E@", "TvView.OnUnhandledInputEventListener: The callback to be invoked when the unhandled input event is received."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to be invoked when an input event is not handled by the bound TV input.", "history": "Added in API level 21", "FullName": "public void setOnUnhandledInputEventListener (TvView.OnUnhandledInputEventListener listener)"}, "dispatchWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses window focus. ViewGroups should override to route to their children.", "history": "Added in API level 21", "FullName": "public void dispatchWindowFocusChanged (boolean hasFocus)"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "added in API level 21", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "getSelectedTrack(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: The type of the selected tracks. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvView#selectTrack_E@", "@B_android#media#tv#TvView#getTracks_E@"], "Permissions": [], "Description": "Returns the ID of the selected track for a given type. Returns null if the information is not available or the track is not selected.", "history": "Added in API level 21", "FullName": "public String getSelectedTrack (int type)"}, "TvView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TvView (Context context)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "protected void onAttachedToWindow ()"}, "dispatchGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a generic motion event. Generic motion events with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. Hover events are handled specially and are delivered to @B_android#view#View#onHoverEvent_E@.", "history": "Added in API level 21", "FullName": "public boolean dispatchGenericMotionEvent (MotionEvent event)"}, "TvView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TvView (Context context, AttributeSet attrs)"}, "timeShiftPlay(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input that created the given recorded program."], ["@B_android#net#Uri_E@", "Uri: The URI of a recorded program."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays a given recorded TV program.", "history": "Added in API level 24", "FullName": "public void timeShiftPlay (String inputId, Uri recordedProgramUri)"}, "dispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass a trackball motion event down to the focused view.", "history": "Added in API level 21", "FullName": "public boolean dispatchTrackballEvent (MotionEvent event)"}, "tune(java.lang.String, android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input for the given channel.This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel.", "history": "added in API level 21", "FullName": "public void tune (String inputId, Uri channelUri)"}, "getTracks(int)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["int", "int: The type of the tracks. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvView#selectTrack_E@", "@B_android#media#tv#TvView#getSelectedTrack_E@"], "Permissions": [], "Description": "Returns the list of tracks. Returns null if the information is not available.", "history": "Added in API level 21", "FullName": "public List<TvTrackInfo> getTracks (int type)"}, "onUnhandledInputEvent(android.view.InputEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["@B_android#view#InputEvent_E@", "InputEvent: The input event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an unhandled input event also has not been handled by the user provided callback. This is the last chance to handle the unhandled input event in the TvView.", "history": "Added in API level 21", "FullName": "public boolean onUnhandledInputEvent (InputEvent event)"}, "setStreamVolume(float)": {"Returns": [], "Parameters": [["float", "float: A volume value between 0.0f to 1.0f. Value is between 0.0 and 1.0 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the relative stream volume of this TvView. This method is primarily used to handle audio focus changes or mute a specific TvView when multiple views are displayed. If the method has not yet been called, the TvView assumes the default value of 1.0f.", "history": "Added in API level 21", "FullName": "public void setStreamVolume (float volume)"}, "setTimeShiftPositionCallback(android.media.tv.TvView.TimeShiftPositionCallback)": {"Returns": [], "Parameters": [["@B_android#media#tv#TvView#TimeShiftPositionCallback_E@", "TvView.TimeShiftPositionCallback: The callback to receive time shift position changes. A value of null removes the existing callback. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the callback to be invoked when the time shift position is changed.", "history": "Added in API level 23", "FullName": "public void setTimeShiftPositionCallback (TvView.TimeShiftPositionCallback callback)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.media.tv.TvView", "ClassDesc": "Displays TV contents. The TvView class provides a high level interface for applications to show TV programs from various TV sources that implement @B_android#media#tv#TvInputService_E@. (Note that the list of TV inputs available on the system can be obtained by calling @B_android#media#tv#TvInputManager#getTvInputList_E@.) Once the application supplies the URI for a specific TV channel to @B_android#media#tv#TvView#tune_E@ method, it takes care of underlying service binding (and unbinding if the current TvView is already bound to a service) and automatically allocates/deallocates resources needed. In addition to a few essential methods to control how the contents are presented, it also provides a way to dispatch input events to the connected TvInputService in order to enable custom key actions for the TV input."}