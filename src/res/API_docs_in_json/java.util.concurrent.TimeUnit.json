{"Functions": {"toMicros(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 1", "FullName": "public long toMicros (long duration)"}, "toSeconds(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 1", "FullName": "public long toSeconds (long duration)"}, "timedWait(java.lang.Object, long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to wait on"], ["long", "long: the maximum time to wait. If less than or equal to zero, do not wait at all."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Performs a timed @B_java#lang#Object#wait_E@ using this time unit. This is a convenience method that converts timeout arguments into the form required by the Object.wait method. For example, you could implement a blocking poll method (see @B_java#util#Queue#poll_E@) using:", "history": "added in API level 1", "FullName": "public void timedWait (Object obj, long timeout)"}, "toMinutes(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 9", "FullName": "public long toMinutes (long duration)"}, "convert(long, java.util.concurrent.TimeUnit)": {"Returns": [["long", "the converted duration in this unit, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the time duration in the given sourceUnit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the unit of the sourceDuration argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the given time duration in the given unit to this unit. Conversions from finer to coarser granularities truncate, so lose precision. For example, converting 999 milliseconds to seconds results in 0. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive. For example, to convert 10 minutes to milliseconds, use: TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)", "history": "added in API level 1", "FullName": "public long convert (long sourceDuration, TimeUnit sourceUnit)"}, "toMillis(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 1", "FullName": "public long toMillis (long duration)"}, "values()": {"Returns": [["@B_java#util#concurrent#TimeUnit_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public static final TimeUnit[] values ()"}, "convert(long,java.util.concurrent.TimeUnit)": {"Returns": [["long", "the converted duration in this unit, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the time duration in the given sourceUnit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the unit of the sourceDuration argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the given time duration in the given unit to this unit. Conversions from finer to coarser granularities truncate, so lose precision. For example, converting 999 milliseconds to seconds results in 0. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive. For example, to convert 10 minutes to milliseconds, use: TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)", "history": "Added in API level 1", "FullName": "public long convert (long sourceDuration, TimeUnit sourceUnit)"}, "timedJoin(java.lang.Thread, long)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread to wait for"], ["long", "long: the maximum time to wait. If less than or equal to zero, do not wait at all."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Performs a timed @B_java#lang#Thread#join_E@ using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.join method.", "history": "added in API level 1", "FullName": "public void timedJoin (Thread thread, long timeout)"}, "sleep(long)": {"Returns": [], "Parameters": [["long", "long: the minimum time to sleep. If less than or equal to zero, do not sleep at all."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while sleeping"]], "SeeAlso": [], "Permissions": [], "Description": "Performs a @B_java#lang#Thread#sleep_E@ using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.sleep method.", "history": "Added in API level 1", "FullName": "public void sleep (long timeout)"}, "timedJoin(java.lang.Thread,long)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread to wait for"], ["long", "long: the maximum time to wait. If less than or equal to zero, do not wait at all."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Performs a timed @B_java#lang#Thread#join_E@ using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.join method.", "history": "Added in API level 1", "FullName": "public void timedJoin (Thread thread, long timeout)"}, "timedWait(java.lang.Object,long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to wait on"], ["long", "long: the maximum time to wait. If less than or equal to zero, do not wait at all."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Performs a timed @B_java#lang#Object#wait_E@ using this time unit. This is a convenience method that converts timeout arguments into the form required by the Object.wait method. For example, you could implement a blocking poll method (see @B_java#util#Queue#poll_E@) using:", "history": "Added in API level 1", "FullName": "public void timedWait (Object obj, long timeout)"}, "toHours(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 9", "FullName": "public long toHours (long duration)"}, "toNanos(long)": {"Returns": [["long", "the converted duration, or Long.MIN_VALUE if conversion would negatively overflow, or Long.MAX_VALUE if it would positively overflow."]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 1", "FullName": "public long toNanos (long duration)"}, "toDays(long)": {"Returns": [["long", "the converted duration"]], "Parameters": [["long", "long: the duration"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#TimeUnit#convert_E@.", "history": "Added in API level 9", "FullName": "public long toDays (long duration)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#util#concurrent#TimeUnit_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public static TimeUnit valueOf (String name)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.util.concurrent.TimeUnit", "ClassDesc": "A TimeUnit represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A TimeUnit does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours. A TimeUnit is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the @B_java#util#concurrent#locks#Lock_E@ is not available: TimeUnit."}