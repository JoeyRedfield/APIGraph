{"Functions": {"Time(int,int,int)": {"Returns": [], "Parameters": [["int", "int: 0 to 23"], ["int", "int: 0 to 59"], ["int", "int: 0 to 59"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the constructor that takes a milliseconds value in place of this constructor Constructs a Time object initialized with the given values for the hour, minute, and second. The driver sets the date components to January 1, 1970. Any method that attempts to access the date components of a Time object will throw a java.lang.IllegalArgumentException. The result is undefined if a given argument is out of bounds.", "history": "Added in API level 1", "FullName": "public Time (int hour, int minute, int second)"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is milliseconds before January 1, 1970, 00:00:00 GMT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a Time object using a milliseconds time value.", "history": "Added in API level 1", "FullName": "public void setTime (long time)"}, "setMonth(int)": {"Returns": [], "Parameters": [["int", "int: the month value between 0-11."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#getMonth_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a month component. Sets the month of this date to the specified value. This", "history": "Added in API level 1", "FullName": "public void setMonth (int i)"}, "getMonth()": {"Returns": [["int", "the month represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#setMonth_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a month component. Returns a number representing the month that contains or begins with the instant in time represented by this 0 and 11, with the value 0 representing January.", "history": "Added in API level 1", "FullName": "public int getMonth ()"}, "getDate()": {"Returns": [["int", "the day of the month represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#setDate_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a date component. Returns the day of the month represented by this 1 and 31 representing the day of the month that contains or begins with the instant in time represented by this", "history": "Added in API level 1", "FullName": "public int getDate ()"}, "Time(int, int, int)": {"Returns": [], "Parameters": [["int", "int: 0 to 23"], ["int", "int: 0 to 59"], ["int", "int: 0 to 59"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the constructor that takes a milliseconds value in place of this constructor Constructs a Time object initialized with the given values for the hour, minute, and second. The driver sets the date components to January 1, 1970. Any method that attempts to access the date components of a Time object will throw a java.lang.IllegalArgumentException. The result is undefined if a given argument is out of bounds.", "history": "added in API level 1", "FullName": "public Time (int hour, int minute, int second)"}, "Time(long)": {"Returns": [], "Parameters": [["long", "long: milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is milliseconds before January 1, 1970, 00:00:00 GMT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Time object using a milliseconds time value.", "history": "Added in API level 1", "FullName": "public Time (long time)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a String in hh:mm:ss format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a time in JDBC time escape format.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getDay()": {"Returns": [["int", "the day of the week represented by this date."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": [], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a day component. Returns the day of the week represented by this date. The returned value (", "history": "Added in API level 1", "FullName": "public int getDay ()"}, "setYear(int)": {"Returns": [], "Parameters": [["int", "int: the year value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#getYear_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a year component. Sets the year of this Date object is modified so that it represents a point in time within the specified year, with the month, date, hour, minute, and second the same as before, as interpreted in the local time zone. (Of course, if the date was February 29, for example, and the year is set to a non-leap year, then the new date will be treated as if it were on March 1.)", "history": "Added in API level 1", "FullName": "public void setYear (int i)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#sql#Time_E@", "a corresponding Time object"]], "Parameters": [["@B_java#lang#String_E@", "String: time in format \"hh:mm:ss\""]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a string in JDBC time escape format to a Time value.", "history": "Added in API level 1", "FullName": "public static Time valueOf (String s)"}, "getYear()": {"Returns": [["int", "the year represented by this date, minus 1900."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#setYear_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a year component. Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.", "history": "Added in API level 1", "FullName": "public int getYear ()"}, "setDate(int)": {"Returns": [], "Parameters": [["int", "int: the day of the month value between 1-31."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this method is invoked"]], "SeeAlso": ["@B_java#sql#Time#getDate_E@"], "Permissions": [], "Description": "This method is deprecated and should not be used because SQL TIME values do not have a date component. Sets the day of the month of this", "history": "Added in API level 1", "FullName": "public void setDate (int i)"}}, "Inheritance": ["@B_java#util#Date_E@"], "ClassName": "java.sql.Time", "ClassDesc": "A thin wrapper around the java.util.Date class that allows the JDBC API to identify this as an SQL TIME value. The Time class adds formatting and parsing operations to support the JDBC escape syntax for time values. The date components should be set to the \"zero epoch\" value of January 1, 1970 and should not be accessed."}