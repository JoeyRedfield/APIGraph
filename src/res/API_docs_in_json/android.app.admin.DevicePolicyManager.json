{"Functions": {"stopUser(android.content.ComponentName,android.os.UserHandle)": {"Returns": [["int", "one of the following result codes: @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_CURRENT_USER_E@ Value is @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_RUNNING_USERS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_CURRENT_USER_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_LOW_STORAGE_E@, or @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_USERS_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the user to be stopped. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by a device owner to stop the specified secondary user.", "history": "Added in API level 28", "FullName": "public int stopUser (ComponentName admin, UserHandle userHandle)"}, "getApplicationRestrictions(android.content.ComponentName,java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "@B_android#os#Bundle_E@ of settings corresponding to what was set last time @B_android#app#admin#DevicePolicyManager#setApplicationRestrictions_E@ was called, or an empty @B_android#os#Bundle_E@ if no restrictions have been set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if called by the application restrictions managing package. This value may be null."], ["@B_java#lang#String_E@", "String: The name of the package to fetch restricted settings of."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Retrieves the application restrictions for a given target application running in the calling user. The caller must be a profile or device owner on that user, or the package allowed to manage application restrictions via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_APP_RESTRICTIONS_E@ scope; otherwise a security exception will be thrown. NOTE: The method performs disk I/O and shouldn't be called on the main thread This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 21", "FullName": "public Bundle getApplicationRestrictions (ComponentName admin, String packageName)"}, "getPasswordComplexity()": {"Returns": [["int", "Value is @B_android#app#admin#DevicePolicyManager#PASSWORD_COMPLEXITY_NONE_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_COMPLEXITY_LOW_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_COMPLEXITY_MEDIUM_E@, or @B_android#app#admin#DevicePolicyManager#PASSWORD_COMPLEXITY_HIGH_E@"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the user is not unlocked."], ["@B_java#lang#SecurityException_E@", "if the calling application does not have the permission @B_android#Manifest#permission#REQUEST_PASSWORD_COMPLEXITY_E@"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#REQUEST_PASSWORD_COMPLEXITY_E@"], "Description": "Returns how complex the current user's screen lock is. Note that when called from a profile which uses an unified challenge with its parent, the screen lock complexity of the parent will be returned. However, this API does not support explicitly querying the parent profile screen lock complexity via @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@. Requires @B_android#Manifest#permission#REQUEST_PASSWORD_COMPLEXITY_E@", "history": "Added in API level 29", "FullName": "public int getPasswordComplexity ()"}, "getPermittedCrossProfileNotificationListeners(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of packages installed on the primary user that allowed to use a @B_android#service#notification#NotificationListenerService_E@ to receive notifications from this managed profile, as set by the profile owner. An empty list means no notification listener services except system ones are allowed. A null return value indicates that all notification listeners are allowed.", "history": "Added in API level 26", "FullName": "public List<String> getPermittedCrossProfileNotificationListeners (ComponentName admin)"}, "setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)": {"Returns": [["@B_java#lang#String_E@", "an array of package names for which the suspended status is not set as requested in this method."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null if the caller is a package access delegate. This value must never be null."], ["@B_java#lang#String_E@", "String: The package names to suspend or unsuspend. This value must never be null."], ["boolean", "boolean: If set to true than the packages will be suspended, if set to false the packages will be unsuspended."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Called by device or profile owners to suspend packages for this user. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PACKAGE_ACCESS_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. A suspended package will not be able to start activities. Its notifications will be hidden, it will not show up in recents, will not be able to show toasts or dialogs or ring the device. The package must already be installed. If the package is uninstalled while suspended the package will no longer be suspended. The admin can block this by using @B_android#app#admin#DevicePolicyManager#setUninstallBlocked_E@.", "history": "Added in API level 24", "FullName": "public String[] setPackagesSuspended (ComponentName admin, String[] packageNames, boolean suspended)"}, "uninstallAllUserCaCerts(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Uninstalls all custom trusted CA certificates from the profile. Certificates installed by means other than device policy will also be removed, except for system CA certificates.", "history": "Added in API level 21", "FullName": "public void uninstallAllUserCaCerts (ComponentName admin)"}, "getOverrideApns(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "A list of override APNs inserted by device owner."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setOverrideApnsEnabled_E@"], "Permissions": [], "Description": "Called by device owner to get all override APNs inserted by device owner.", "history": "Added in API level 28", "FullName": "public List<ApnSetting> getOverrideApns (ComponentName admin)"}, "hasCaCertInstalled(android.content.ComponentName,byte[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["byte[]", "byte: encoded form of the certificate to look up."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this certificate is installed as a trusted CA.", "history": "Added in API level 21", "FullName": "public boolean hasCaCertInstalled (ComponentName admin, byte[] certBuffer)"}, "wipeData(int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: Bit mask of additional options: currently supported flags are @B_android#app#admin#DevicePolicyManager#WIPE_EXTERNAL_STORAGE_E@ and @B_android#app#admin#DevicePolicyManager#WIPE_RESET_PROTECTION_DATA_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: a string that contains the reason for wiping data, which can be presented to the user.This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@"], ["@B_java#lang#IllegalArgumentException_E@", "if the input reason string is null or empty."]], "SeeAlso": [], "Permissions": [], "Description": "Ask that all user data be wiped. If called as a secondary user, the user will be removed and other users will remain unaffected, the provided reason for wiping data can be shown to user. Calling from the primary user will cause the device to reboot, erasing all device data - including all the secondary users and their data - while booting up. In this case, we don't show the reason to the user since the device would be factory reset. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@ to be able to call this method; if it has not, a security exception will be thrown.", "history": "added in API level 28", "FullName": "public void wipeData (int flags, CharSequence reason)"}, "generateKeyPair(android.content.ComponentName,java.lang.String,android.security.keystore.KeyGenParameterSpec,int)": {"Returns": [["@B_android#security#AttestedKeyPair_E@", "A non-null AttestedKeyPair if the key generation succeeded, null otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#lang#String_E@", "String: The key generation algorithm, see @B_java#security#KeyPairGenerator_E@. This value must never be null."], ["@B_android#security#keystore#KeyGenParameterSpec_E@", "KeyGenParameterSpec: Specification of the key to generate, see @B_java#security#KeyPairGenerator_E@. This value must never be null."], ["int", "int: A bitmask of all the identifiers that should be included in the attestation record (ID_TYPE_BASE_INFO, ID_TYPE_SERIAL, ID_TYPE_IMEI and ID_TYPE_MEID), or 0 if no device identification is required in the attestation record. Device owner, profile owner and their delegated certificate installer can use @B_android#app#admin#DevicePolicyManager#ID_TYPE_BASE_INFO_E@ to request inclusion of the general device information including manufacturer, model, brand, device and product in the attestation record. Only device owner and their delegated certificate installer can use @B_android#app#admin#DevicePolicyManager#ID_TYPE_SERIAL_E@, @B_android#app#admin#DevicePolicyManager#ID_TYPE_IMEI_E@ and @B_android#app#admin#DevicePolicyManager#ID_TYPE_MEID_E@ to request unique device identifiers to be attested. If any of ID_TYPE_SERIAL, ID_TYPE_IMEI and ID_TYPE_MEID is set, it is implicitly assumed that ID_TYPE_BASE_INFO is also set. If any flag is specified, then an attestation challenge must be included in the keySpec. Value is either 0 or a combination of ID_TYPE_BASE_INFO, ID_TYPE_SERIAL, ID_TYPE_IMEI, and ID_TYPE_MEID"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner. If Device ID attestation is requested (using @B_android#app#admin#DevicePolicyManager#ID_TYPE_SERIAL_E@, @B_android#app#admin#DevicePolicyManager#ID_TYPE_IMEI_E@ or @B_android#app#admin#DevicePolicyManager#ID_TYPE_MEID_E@), the caller must be the Device Owner or the Certificate Installer delegate."], ["@B_java#lang#IllegalArgumentException_E@", "if the alias in keySpec is empty, if the algorithm specification in keySpec is not RSAKeyGenParameterSpec or ECGenParameterSpec, or if Device ID attestation was requested but the keySpec does not contain an attestation challenge."], ["@B_java#lang#UnsupportedOperationException_E@", "if Device ID attestation was requested but the underlying hardware does not support it."], ["@B_android#security#keystore#StrongBoxUnavailableException_E@", "if the use of StrongBox for key generation was specified in keySpec but the device does not have one."]], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setAttestationChallenge_E@"], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to generate a new private/public key pair. If the device supports key generation via secure hardware, this method is useful for creating a key in KeyChain that never left the secure hardware. Access to the key is controlled the same way as in @B_android#app#admin#DevicePolicyManager#installKeyPair_E@. Because this method might take several seconds to complete, it should only be called from a worker thread. This method returns null when called from the main thread. Note: If the provided alias is of an existing alias, all former grants that apps have been given to access the key and certificates associated with this alias will be revoked.", "history": "Added in API level 28", "FullName": "public AttestedKeyPair generateKeyPair (ComponentName admin, String algorithm, KeyGenParameterSpec keySpec, int idAttestationFlags)"}, "updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)": {"Returns": [["boolean", "true if the required override APN is successfully updated, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["int", "int: the id of the override APN to update"], ["@B_android#telephony#data#ApnSetting_E@", "ApnSetting: the override APN to update This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setOverrideApnsEnabled_E@"], "Permissions": [], "Description": "Called by device owner to update an override APN. This method may returns false if there is no override APN with the given apnId. This method may also returns false if apnSetting conflicts with an existing override APN. Update the existing conflicted APN instead. See @B_android#app#admin#DevicePolicyManager#addOverrideApn_E@ for the definition of conflict.", "history": "Added in API level 28", "FullName": "public boolean updateOverrideApn (ComponentName admin, int apnId, ApnSetting apnSetting)"}, "clearCrossProfileIntentFilters(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to remove the cross-profile intent filters that go from the managed profile to the parent, or from the parent to the managed profile. Only removes those that have been set by the profile owner. Note: A list of default cross profile intent filters are set up by the system when the profile is created, some of them ensure the proper functioning of the profile, while others enable sharing of data from the parent to the managed profile for user convenience. These default intent filters are not cleared when this API is called. If the default cross profile data sharing is not desired, they can be disabled with @B_android#os#UserManager#DISALLOW_SHARE_INTO_MANAGED_PROFILE_E@.", "history": "Added in API level 21", "FullName": "public void clearCrossProfileIntentFilters (ComponentName admin)"}, "setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: If true contacts search in the managed profile is not displayed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to set whether contacts search from the managed profile will be shown in the parent profile, for incoming calls. The calling device admin must be a profile owner. If it is not, a security exception will be thrown.", "history": "Added in API level 24", "FullName": "public void setCrossProfileContactsSearchDisabled (ComponentName admin, boolean disabled)"}, "setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package name of the app which will be given access. This value must never be null."], ["@B_java#util#List_E@", "List: The groups of privileged APIs whose access should be granted to delegatedPackage. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner or device owner to grant access to privileged APIs to another app. Granted APIs are determined by scopes, which is a list of the DELEGATION_* constants. A broadcast with the @B_android#app#admin#DevicePolicyManager#ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED_E@ action will be sent to the delegatePackage with its new scopes in an ArrayList<String> extra under the @B_android#app#admin#DevicePolicyManager#EXTRA_DELEGATION_SCOPES_E@ key. The broadcast is sent with the @B_android#content#Intent#FLAG_RECEIVER_REGISTERED_ONLY_E@ flag. Delegated scopes are a per-user state. The delegated access is persistent until it is later cleared by calling this method with an empty scopes list or uninstalling the delegatePackage.", "history": "Added in API level 26", "FullName": "public void setDelegatedScopes (ComponentName admin, String delegatePackage, List<String> scopes)"}, "createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)": {"Returns": [["@B_android#os#UserHandle_E@", "the @B_android#os#UserHandle_E@ object for the created user, or null if the user could not be created."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The user's name. This value must never be null."], ["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ will be profile owner. Has to be in the same package as admin, otherwise no user is created and an IllegalArgumentException is thrown. This value must never be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: Extras that will be passed to onEnable of the admin receiver on the new user. This value may be null."], ["int", "int: @B_android#app#admin#DevicePolicyManager#SKIP_SETUP_WIZARD_E@, @B_android#app#admin#DevicePolicyManager#MAKE_USER_EPHEMERAL_E@ and @B_android#app#admin#DevicePolicyManager#LEAVE_ALL_SYSTEM_APPS_ENABLED_E@ are supported. Value is either 0 or a combination of @B_android#app#admin#DevicePolicyManager#SKIP_SETUP_WIZARD_E@, @B_android#app#admin#DevicePolicyManager#MAKE_USER_EPHEMERAL_E@, android.app.admin.DevicePolicyManager.MAKE_USER_DEMO, and @B_android#app#admin#DevicePolicyManager#LEAVE_ALL_SYSTEM_APPS_ENABLED_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."], ["@B_android#os#UserManager#UserOperationException_E@", "if the user could not be created and the calling app is targeting @B_android#os#Build#VERSION_CODES#P_E@ and running on @B_android#os#Build#VERSION_CODES#P_E@."]], "SeeAlso": ["@B_android#os#UserHandle_E@"], "Permissions": [], "Description": "Called by a device owner to create a user with the specified name and a given component of the calling package as profile owner. The UserHandle returned by this method should not be persisted as user handles are recycled as users are removed and created. If you need to persist an identifier for this user, use @B_android#os#UserManager#getSerialNumberForUser_E@. The new user will not be started in the background. admin is the @B_android#app#admin#DeviceAdminReceiver_E@ which is the device owner. profileOwner is also a DeviceAdminReceiver in the same package as admin, and will become the profile owner and will be registered as an active admin on the new user. The profile owner package will be installed on the new user. If the adminExtras are not null, they will be stored on the device until the user is started for the first time. Then the extras will be passed to the admin when onEnable is called. From @B_android#os#Build#VERSION_CODES#P_E@ onwards, if targeting @B_android#os#Build#VERSION_CODES#P_E@, throws @B_android#os#UserManager#UserOperationException_E@ instead of returning null on failure.", "history": "Added in API level 24", "FullName": "public UserHandle createAndManageUser (ComponentName admin, String name, ComponentName profileOwner, PersistableBundle adminExtras, int flags)"}, "getPasswordMinimumSymbols(android.content.ComponentName)": {"Returns": [["int", "The minimum number of symbols required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of symbols required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumSymbols_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumSymbols (ComponentName admin)"}, "getPendingSystemUpdate(android.content.ComponentName)": {"Returns": [["@B_android#app#admin#SystemUpdateInfo_E@", "Information about a pending system update or null if no update pending."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DeviceAdminReceiver#onSystemUpdatePending_E@"], "Permissions": [], "Description": "Called by device or profile owners to get information about a pending system update.", "history": "Added in API level 26", "FullName": "public SystemUpdateInfo getPendingSystemUpdate (ComponentName admin)"}, "getShortSupportMessage(android.content.ComponentName)": {"Returns": [["@B_java#lang#CharSequence_E@", "The message set by @B_android#app#admin#DevicePolicyManager#setShortSupportMessage_E@ or null if no message has been set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device admin to get the short support message.", "history": "Added in API level 24", "FullName": "public CharSequence getShortSupportMessage (ComponentName admin)"}, "enableSystemApp(android.content.ComponentName,android.content.Intent)": {"Returns": [["int", "int The number of activities that matched the intent and were installed."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is an enable system app delegate. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: An intent matching the app(s) to be installed. All apps that resolve for this intent will be re-enabled in the calling profile."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Re-enable system apps by intent that were disabled by default when the user was initialized. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_ENABLE_SYSTEM_APP_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 21", "FullName": "public int enableSystemApp (ComponentName admin, Intent intent)"}, "setPasswordHistoryLength(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired length of password history. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the length of the password history. After setting this, the user will not be able to enter a new password that is the same as any password in the history. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested either @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_E@ , @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_COMPLEX_E@ @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHABETIC_E@, or @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHANUMERIC_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password history length is always 0. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 11", "FullName": "public void setPasswordHistoryLength (ComponentName admin, int length)"}, "hasGrantedPolicy(android.content.ComponentName,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. Must be an active administrator, or an exception will be thrown. This value must never be null."], ["int", "int: Which uses-policy to check, as defined in @B_android#app#admin#DeviceAdminInfo_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an administrator has been granted a particular device policy. This can be used to check whether the administrator was activated under an earlier set of policies, but requires additional policies after an upgrade.", "history": "Added in API level 11", "FullName": "public boolean hasGrantedPolicy (ComponentName admin, int usesPolicy)"}, "getTransferOwnershipBundle()": {"Returns": [["@B_android#os#PersistableBundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#transferOwnership_E@", "@B_android#app#admin#DeviceAdminReceiver#onTransferOwnershipComplete_E@"], "Permissions": [], "Description": "Returns the data passed from the current administrator to the new administrator during an ownership transfer. This is the same bundle passed in @B_android#app#admin#DevicePolicyManager#transferOwnership_E@. The bundle is persisted until the profile owner or device owner is removed. This is the same bundle received in the @B_android#app#admin#DeviceAdminReceiver#onTransferOwnershipComplete_E@. Use this method to retrieve it after the transfer as long as the new administrator is the active device or profile owner. Returns null if no ownership transfer was started for the calling user.", "history": "Added in API level 28", "FullName": "public PersistableBundle getTransferOwnershipBundle ()"}, "removeKeyPair(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "true if the private key alias no longer exists, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#lang#String_E@", "String: The private key alias under which the certificate is installed. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to remove a certificate and private key pair installed under a given alias.", "history": "Added in API level 24", "FullName": "public boolean removeKeyPair (ComponentName admin, String alias)"}, "setOrganizationName(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: The organization name or null to clear a previously set name. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the device owner (since API 26) or profile owner (since API 24) to set the name of the organization under management. If the organization name needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this string accordingly.", "history": "Added in API level 24", "FullName": "public void setOrganizationName (ComponentName admin, CharSequence title)"}, "clearResetPasswordToken(android.content.ComponentName)": {"Returns": [["boolean", "true if the operation is successful, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to revoke the current password reset token. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, this method has no effect - the reset token should not have been set in the first place - and false is returned. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public boolean clearResetPasswordToken (ComponentName admin)"}, "setCertInstallerPackage(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package name of the certificate installer which will be given access. If null is given the current package will be cleared. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@. Use @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_CERT_INSTALL_E@ scope instead. Called by a profile owner or device owner to grant access to privileged certificate manipulation APIs to a third-party certificate installer app. Granted APIs include @B_android#app#admin#DevicePolicyManager#getInstalledCaCerts_E@, @B_android#app#admin#DevicePolicyManager#hasCaCertInstalled_E@, @B_android#app#admin#DevicePolicyManager#installCaCert_E@, @B_android#app#admin#DevicePolicyManager#uninstallCaCert_E@, @B_android#app#admin#DevicePolicyManager#uninstallAllUserCaCerts_E@ and @B_android#app#admin#DevicePolicyManager#installKeyPair_E@. Delegated certificate installer is a per-user state. The delegated access is persistent until it is later cleared by calling this method with a null value or uninstallling the certificate installer. @B_android#os#Build#VERSION_CODES#N_E@, if the caller application's target SDK version is @B_android#os#Build#VERSION_CODES#N_E@ or newer, the supplied certificate installer package must be installed when calling this API, otherwise an @B_java#lang#IllegalArgumentException_E@ will be thrown.", "history": "Added in API level 23 Deprecated in API level 26", "FullName": "public void setCertInstallerPackage (ComponentName admin, String installerPackage)"}, "setRequiredStrongAuthTimeout(android.content.ComponentName,long)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["long", "long: The new timeout in milliseconds, after which the user will have to unlock with strong authentication method. A value of 0 means the admin is not participating in controlling the timeout. The minimum and maximum timeouts are platform-defined and are typically 1 hour and 72 hours, respectively. Though discouraged, the admin may choose to require strong auth at all times using @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FINGERPRINT_E@ and/or @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device/profile owner to set the timeout after which unlocking with secondary, non strong auth (e.g. fingerprint, face, trust agents) times out, i.e. the user has to use a strong authentication method like password, pin or pattern. This timeout is used internally to reset the timer to require strong auth again after specified timeout each time it has been successfully used. Fingerprint can also be disabled altogether using @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FINGERPRINT_E@. Trust agents can also be disabled altogether using @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@. The calling device admin must be a device or profile owner. If it is not, a @B_java#lang#SecurityException_E@ will be thrown. The calling device admin can verify the value it has set by calling @B_android#app#admin#DevicePolicyManager#getRequiredStrongAuthTimeout_E@ and passing in its instance. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, calling this methods has no effect - i.e. the timeout is not set. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public void setRequiredStrongAuthTimeout (ComponentName admin, long timeoutMs)"}, "isManagedProfile(android.content.ComponentName)": {"Returns": [["boolean", "if this user is a managed profile of another user."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile owner this request is associated with. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return if this user is a managed profile of another user. An admin can become the profile owner of a managed profile with @B_android#app#admin#DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE_E@ and of a managed user with @B_android#app#admin#DevicePolicyManager#createAndManageUser_E@", "history": "Added in API level 24", "FullName": "public boolean isManagedProfile (ComponentName admin)"}, "setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package name which will be given access to application restrictions APIs. If null is given the current package will be cleared. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."], ["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if packageName is not found"]], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@. Use @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_APP_RESTRICTIONS_E@ scope instead. Called by a profile owner or device owner to grant permission to a package to manage application restrictions for the calling user via @B_android#app#admin#DevicePolicyManager#setApplicationRestrictions_E@ and @B_android#app#admin#DevicePolicyManager#getApplicationRestrictions_E@. This permission is persistent until it is later cleared by calling this method with a null value or uninstalling the managing package. The supplied application restriction managing package must be installed when calling this API, otherwise an @B_android#content#pm#PackageManager#NameNotFoundException_E@ will be thrown.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public void setApplicationRestrictionsManagingPackage (ComponentName admin, String packageName)"}, "setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: message for starting user session, or null to use system default message. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner to specify the user session start message. This may be displayed during a user switch. The message should be limited to a short statement or it may be truncated. If the message needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this message accordingly.", "history": "Added in API level 28", "FullName": "public void setStartUserSessionMessage (ComponentName admin, CharSequence startUserSessionMessage)"}, "setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)": {"Returns": [["boolean", "boolean Whether the hidden setting of the package was successfully updated."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a package access delegate. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package to hide or unhide."], ["boolean", "boolean: true if the package should be hidden, false if it should be unhidden."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Hide or unhide packages. When a package is hidden it is unavailable for use, but the data and actual package file remain. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PACKAGE_ACCESS_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 21", "FullName": "public boolean setApplicationHidden (ComponentName admin, String packageName, boolean hidden)"}, "isCallerApplicationRestrictionsManagingPackage()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@. Use @B_android#app#admin#DevicePolicyManager#getDelegatedScopes_E@ instead. Called by any application to find out whether it has been granted permission via @B_android#app#admin#DevicePolicyManager#setApplicationRestrictionsManagingPackage_E@ to manage application restrictions for the calling user. This is done by comparing the calling Linux uid with the uid of the package specified by that method.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public boolean isCallerApplicationRestrictionsManagingPackage ()"}, "isProfileOwnerApp(java.lang.String)": {"Returns": [["boolean", "Whether or not the package is registered as the profile owner."]], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the app to compare with the registered profile owner."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to determine if a particular package is registered as the profile owner for the user. A profile owner is a special device admin that has additional privileges within the profile.", "history": "Added in API level 21", "FullName": "public boolean isProfileOwnerApp (String packageName)"}, "setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the setting to update."], ["@B_java#lang#String_E@", "String: The value to update the setting to."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by profile or device owners to update @B_android#provider#Settings#Secure_E@ settings. Validation that the value of the setting is in the correct form for the setting type should be performed by the caller. The settings that can be updated by a profile or device owner with this method are: @B_android#provider#Settings#Secure#DEFAULT_INPUT_METHOD_E@ @B_android#provider#Settings#Secure#SKIP_FIRST_USE_HINTS_E@ A device owner can additionally update the following settings: @B_android#provider#Settings#Secure#LOCATION_MODE_E@", "history": "Added in API level 21", "FullName": "public void setSecureSetting (ComponentName admin, String setting, String value)"}, "setPasswordMinimumLetters(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of letters required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 1. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumLetters (ComponentName admin, int length)"}, "logoutUser(android.content.ComponentName)": {"Returns": [["int", "one of the following result codes: @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_CURRENT_USER_E@ Value is @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_RUNNING_USERS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_CURRENT_USER_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_LOW_STORAGE_E@, or @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_USERS_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by a profile owner of secondary user that is affiliated with the device to stop the calling user and switch back to primary.", "history": "Added in API level 28", "FullName": "public int logoutUser (ComponentName admin)"}, "retrieveSecurityLogs(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "the new batch of security logs which is a list of @B_android#app#admin#SecurityLog#SecurityEvent_E@, or null if rate limitation is exceeded or if logging is currently disabled."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner, or there is at least one profile or secondary user that is not affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DeviceAdminReceiver#onSecurityLogsAvailable_E@"], "Permissions": [], "Description": "Called by device owner to retrieve all new security logging entries since the last call to this API after device boots. Access to the logs is rate limited and it will only return new logs after the device owner has been notified via @B_android#app#admin#DeviceAdminReceiver#onSecurityLogsAvailable_E@. If there is any other user or profile on the device, it must be affiliated with the device. Otherwise a @B_java#lang#SecurityException_E@ will be thrown. See @B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@.", "history": "Added in API level 24", "FullName": "public List<SecurityLog.SecurityEvent> retrieveSecurityLogs (ComponentName admin)"}, "resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)": {"Returns": [["boolean", "Returns true if the password was applied, or false if it is not acceptable for the current constraints."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The new password for the user. null or empty clears the password."], ["byte[]", "byte: the password reset token previously provisioned by @B_android#app#admin#DevicePolicyManager#setResetPasswordToken_E@."], ["int", "int: May be 0 or combination of @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_REQUIRE_ENTRY_E@ and @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."], ["@B_java#lang#IllegalStateException_E@", "if the provided token is not valid."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device or profile owner to force set a new device unlock password or a managed profile challenge on current user. This takes effect immediately. Unlike @B_android#app#admin#DevicePolicyManager#resetPassword_E@, this API can change the password even before the user or device is unlocked or decrypted. The supplied token must have been previously provisioned via @B_android#app#admin#DevicePolicyManager#setResetPasswordToken_E@, and in active state @B_android#app#admin#DevicePolicyManager#isResetPasswordTokenActive_E@. The given password must be sufficient for the current password quality and length constraints as returned by @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ and @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLength_E@; if it does not meet these constraints, then it will be rejected and false returned. Note that the password may be a stronger quality, for example, a password containing alphanumeric characters when the requested quality is only numeric. Calling with a null or empty password will clear any existing PIN, pattern or password if the current password constraints allow it. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, calling this methods has no effect - the password is always empty - and false is returned. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public boolean resetPasswordWithToken (ComponentName admin, String password, byte[] token, int flags)"}, "getPasswordMinimumLowerCase(android.content.ComponentName)": {"Returns": [["int", "The minimum number of lower case letters required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of lower case letters required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumLowerCase_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumLowerCase (ComponentName admin)"}, "isAdminActive(android.content.ComponentName)": {"Returns": [["boolean", "true if admin is currently enabled in the system, false otherwise"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The administrator component to check for. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the given administrator component is currently active (enabled) in the system.", "history": "Added in API level 8", "FullName": "public boolean isAdminActive (ComponentName admin)"}, "getCrossProfileContactsSearchDisabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to determine whether or not contacts search has been disabled. The calling device admin must be a profile owner. If it is not, a security exception will be thrown.", "history": "Added in API level 24", "FullName": "public boolean getCrossProfileContactsSearchDisabled (ComponentName admin)"}, "setPasswordExpirationTimeout(android.content.ComponentName,long)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["long", "long: The limit (in ms) that a password can remain in effect. A value of 0 means there is no restriction (unlimited)."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device admin to set the password expiration timeout. Calling this method will restart the countdown for password expiration for the given admin, as will changing the device password (for all admins). The provided timeout is the time delta in ms and will be added to the current time. For example, to have the password expire 5 days from now, timeout would be 5 * 86400 * 1000 = 432000000 ms for timeout. To disable password expiration, a value of 0 may be used for timeout. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password expiration is always disabled. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. Note that setting the password will automatically reset the expiration time for all active admins. Active admins do not need to explicitly call this method in that case. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 11", "FullName": "public void setPasswordExpirationTimeout (ComponentName admin, long timeout)"}, "getCrossProfileWidgetProviders(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "The white-listed package list. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#addCrossProfileWidgetProvider_E@", "@B_android#app#admin#DevicePolicyManager#removeCrossProfileWidgetProvider_E@"], "Permissions": [], "Description": "Called by the profile owner of a managed profile to query providers from which packages are available in the parent profile.", "history": "Added in API level 21", "FullName": "public List<String> getCrossProfileWidgetProviders (ComponentName admin)"}, "getApplicationRestrictionsManagingPackage(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "The package name allowed to manage application restrictions on the current user, or null if none is set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@. Use @B_android#app#admin#DevicePolicyManager#getDelegatePackages_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_APP_RESTRICTIONS_E@ scope instead. Called by a profile owner or device owner to retrieve the application restrictions managing package for the current user, or null if none is set. If there are multiple delegates this function will return one of them.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public String getApplicationRestrictionsManagingPackage (ComponentName admin)"}, "retrieveNetworkLogs(android.content.ComponentName,long)": {"Returns": [["@B_java#util#List_E@", "A new batch of network logs which is a list of @B_android#app#admin#NetworkEvent_E@. Returns null if the batch represented by batchToken is no longer available or if logging is disabled."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if called by a delegated app. This value may be null."], ["long", "long: A token of the batch to retrieve"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner, or there is at least one profile or secondary user that is not affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@", "@B_android#app#admin#DeviceAdminReceiver#onNetworkLogsAvailable_E@"], "Permissions": [], "Description": "Called by device owner or delegated app with @B_android#app#admin#DevicePolicyManager#DELEGATION_NETWORK_LOGGING_E@ to retrieve the most recent batch of network logging events. A device owner has to provide a batchToken provided as part of @B_android#app#admin#DeviceAdminReceiver#onNetworkLogsAvailable_E@ callback. If the token doesn't match the token of the most recent available batch of logs, null will be returned. @B_android#app#admin#NetworkEvent_E@ can be one of @B_android#app#admin#DnsEvent_E@ or @B_android#app#admin#ConnectEvent_E@. The list of network events is sorted chronologically, and contains at most 1200 events. Access to the logs is rate limited and this method will only return a new batch of logs after the device device owner has been notified via @B_android#app#admin#DeviceAdminReceiver#onNetworkLogsAvailable_E@. If a secondary user or profile is created, calling this method will throw a @B_java#lang#SecurityException_E@ until all users become affiliated again. It will also no longer be possible to retrieve the network logs batch with the most recent batchToken provided by @B_android#app#admin#DeviceAdminReceiver#onNetworkLogsAvailable_E@. See @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@.", "history": "Added in API level 26", "FullName": "public List<NetworkEvent> retrieveNetworkLogs (ComponentName admin, long batchToken)"}, "setMasterVolumeMuted(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: true to mute master volume, false to turn mute off."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by profile or device owners to set the master volume mute on or off. This has no effect when set on a managed profile.", "history": "Added in API level 21", "FullName": "public void setMasterVolumeMuted (ComponentName admin, boolean on)"}, "clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package which will have its user data wiped. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor through which the listener should be invoked. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#app#admin#DevicePolicyManager#OnClearApplicationUserDataListener_E@", "DevicePolicyManager.OnClearApplicationUserDataListener: A callback object that will inform the caller when the clearing is done. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not the device owner/profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the device owner or profile owner to clear application user data of a given package. The behaviour of this is equivalent to the target application calling @B_android#app#ActivityManager#clearApplicationUserData_E@.", "history": "Added in API level 28", "FullName": "public void clearApplicationUserData (ComponentName admin, String packageName, Executor executor, DevicePolicyManager.OnClearApplicationUserDataListener listener)"}, "isPackageSuspended(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "true if the package is suspended or false if the package is not suspended, could not be found or an error occurred."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a package access delegate. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package to retrieve the suspended status of."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."], ["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if the package could not be found."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Determine if a package is suspended. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PACKAGE_ACCESS_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 24", "FullName": "public boolean isPackageSuspended (ComponentName admin, String packageName)"}, "setNetworkLoggingEnabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if called by a delegated app. This value may be null."], ["boolean", "boolean: whether network logging should be enabled or not."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@", "@B_android#app#admin#DevicePolicyManager#retrieveNetworkLogs_E@"], "Permissions": [], "Description": "Called by a device owner or delegated app with @B_android#app#admin#DevicePolicyManager#DELEGATION_NETWORK_LOGGING_E@ to control the network logging feature. Network logs contain DNS lookup and connect() library call events. The following library functions are recorded while network logging is active: getaddrinfo() gethostbyname() connect() Network logging is a low-overhead tool for forensics but it is not guaranteed to use full system call logging; event reporting is enabled by default for all processes but not strongly enforced. Events from applications using alternative implementations of libc, making direct kernel calls, or deliberately obfuscating traffic may not be recorded. Some common network events may not be reported. For example: Applications may hardcode IP addresses to reduce the number of DNS lookups, or use an alternative system for name resolution, and so avoid calling getaddrinfo() or gethostbyname. Applications may use datagram sockets for performance reasons, for example for a game client. Calling connect() is unnecessary for this kind of socket, so it will not trigger a network event. It is possible to directly intercept layer 3 traffic leaving the device using an always-on VPN service. See @B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@ and @B_android#net#VpnService_E@ for details. @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@.", "history": "Added in API level 26", "FullName": "public void setNetworkLoggingEnabled (ComponentName admin, boolean enabled)"}, "getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "configuration for the given trust agent."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. If null, this function returns a list of configurations for all admins that declare @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@. If any admin declares @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@ but doesn't call @B_android#app#admin#DevicePolicyManager#setTrustAgentConfiguration_E@ for this or calls it with a null configuration, null is returned. This value may be null."], ["@B_android#content#ComponentName_E@", "ComponentName: Which component to get enabled features for. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets configuration for the given trust agent based on aggregating all calls to @B_android#app#admin#DevicePolicyManager#setTrustAgentConfiguration_E@ for all device admins. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve the configuration set on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, null is always returned. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 23", "FullName": "public List<PersistableBundle> getTrustAgentConfiguration (ComponentName admin, ComponentName agent)"}, "isResetPasswordTokenActive(android.content.ComponentName)": {"Returns": [["boolean", "true if the token is active, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."], ["@B_java#lang#IllegalStateException_E@", "if no token has been set."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to check if the current reset password token is active. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, false is always returned. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public boolean isResetPasswordTokenActive (ComponentName admin)"}, "clearProfileOwner(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component to remove as the profile owner. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active profile owner, or the method is being called from a managed profile."]], "SeeAlso": [], "Permissions": [], "Description": "This method is expected to be used for testing purposes only. The profile owner will lose control of the user and its data after calling it. In order to protect any sensitive data that remains on this user, it is advised that the profile owner deletes it instead of calling this method. See @B_android#app#admin#DevicePolicyManager#wipeData_E@. Clears the active profile owner. The caller must be the profile owner of this user, otherwise a SecurityException will be thrown. This method is not available to managed profile owners. While some policies previously set by the profile owner will be cleared by this method, it is a best-effort process and some other policies will still remain in place after the profile owner is cleared.", "history": "Added in API level 24 Deprecated in API level 26", "FullName": "public void clearProfileOwner (ComponentName admin)"}, "setPasswordMinimumLength(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum password length. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum allowed password length. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested either @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_E@ , @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_COMPLEX_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHABETIC_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHANUMERIC_E@, or @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 8", "FullName": "public void setPasswordMinimumLength (ComponentName admin, int length)"}, "getKeyguardDisabledFeatures(android.content.ComponentName)": {"Returns": [["int", "bitfield of flags. See @B_android#app#admin#DevicePolicyManager#setKeyguardDisabledFeatures_E@ for a list."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to check whether any admins have disabled features in keyguard. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine whether or not features have been disabled in keyguard either by the calling admin, if specified, or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 17", "FullName": "public int getKeyguardDisabledFeatures (ComponentName admin)"}, "isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@"], "Permissions": [], "Description": "Called by device or profile owner to query whether current always-on VPN is configured in lockdown mode. Returns false when no always-on configuration is set.", "history": "Added in API level 29", "FullName": "public boolean isAlwaysOnVpnLockdownEnabled (ComponentName admin)"}, "isBackupServiceEnabled(android.content.ComponentName)": {"Returns": [["boolean", "true if backup service is enabled, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setBackupServiceEnabled_E@"], "Permissions": [], "Description": "Return whether the backup service is enabled by the device owner or profile owner for the current user, as previously set by @B_android#app#admin#DevicePolicyManager#setBackupServiceEnabled_E@. Whether the backup functionality is actually enabled or not depends on settings from both the current user and the device owner, please see @B_android#app#admin#DevicePolicyManager#setBackupServiceEnabled_E@ for details. Backup service manages all backup and restore mechanisms on the device.", "history": "Added in API level 26", "FullName": "public boolean isBackupServiceEnabled (ComponentName admin)"}, "lockNow(int)": {"Returns": [], "Parameters": [["int", "int: May be 0 or @B_android#app#admin#DevicePolicyManager#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_E@. Value is either 0 or @B_android#app#admin#DevicePolicyManager#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@ or the @B_android#app#admin#DevicePolicyManager#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_E@ flag is passed by an application that is not a profile owner of a managed profile."], ["@B_java#lang#IllegalArgumentException_E@", "if the @B_android#app#admin#DevicePolicyManager#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_E@ flag is passed when locking the parent profile."], ["@B_java#lang#UnsupportedOperationException_E@", "if the @B_android#app#admin#DevicePolicyManager#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY_E@ flag is passed when @B_android#app#admin#DevicePolicyManager#getStorageEncryptionStatus_E@ does not return @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_PER_USER_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Make the device lock immediately, as if the lock screen timeout has expired at the point of this call. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to lock the parent profile.", "history": "Added in API level 26", "FullName": "public void lockNow (int flags)"}, "setPasswordQuality(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired quality. One of @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_UNSPECIFIED_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_BIOMETRIC_WEAK_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_SOMETHING_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_NUMERIC_COMPLEX_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHABETIC_E@, @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_ALPHANUMERIC_E@ or @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or if admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the password restrictions it is imposing. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after calling this method. Quality constants are ordered so that higher values are more restrictive; thus the highest requested quality constant (between the policy set here, the user's preference, and any other considerations) is the one that is in effect. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 8", "FullName": "public void setPasswordQuality (ComponentName admin, int quality)"}, "getPasswordMinimumNumeric(android.content.ComponentName)": {"Returns": [["int", "The minimum number of numerical digits required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of numerical digits required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumNumeric_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumNumeric (ComponentName admin)"}, "resetPassword(java.lang.String,int)": {"Returns": [["boolean", "Returns true if the password was applied, or false if it is not acceptable for the current constraints or if the user has not been decrypted yet."]], "Parameters": [["@B_java#lang#String_E@", "String: The new password for the user. Null or empty clears the password."], ["int", "int: May be 0 or combination of @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_REQUIRE_ENTRY_E@ and @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_RESET_PASSWORD_E@"], ["@B_java#lang#IllegalStateException_E@", "if the calling user is locked or has a managed profile."]], "SeeAlso": [], "Permissions": [], "Description": "Force a new password for device unlock (the password needed to access the entire device) or the work profile challenge on the current user. This takes effect immediately. For device owner and profile owners targeting SDK level @B_android#os#Build#VERSION_CODES#O_E@ or above, this API is no longer available and will throw @B_java#lang#SecurityException_E@. Please use the new API @B_android#app#admin#DevicePolicyManager#resetPasswordWithToken_E@ instead. Note: This API has been limited as of @B_android#os#Build#VERSION_CODES#N_E@ for device admins that are not device owner and not profile owner. The password can now only be changed if there is currently no password set. Device owner and profile owner can still do this when user is unlocked and does not have a managed profile. The given password must be sufficient for the current password quality and length constraints as returned by @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ and @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLength_E@; if it does not meet these constraints, then it will be rejected and false returned. Note that the password may be a stronger quality (containing alphanumeric characters when the requested quality is only numeric), in which case the currently active quality will be increased to match. Calling with a null or empty password will clear any existing PIN, pattern or password if the current password constraints allow it. Note: This will not work in @B_android#os#Build#VERSION_CODES#N_E@ and later for managed profiles, or for device admins that are not device owner or profile owner. Once set, the password cannot be changed to null or empty except by these admins. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, this methods does nothing. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_RESET_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 8", "FullName": "public boolean resetPassword (String password, int flags)"}, "getGlobalPrivateDnsMode(android.content.ComponentName)": {"Returns": [["int", "one of PRIVATE_DNS_MODE_OFF, PRIVATE_DNS_MODE_OPPORTUNISTIC, PRIVATE_DNS_MODE_PROVIDER_HOSTNAME or PRIVATE_DNS_MODE_UNKNOWN."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not the device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the system-wide Private DNS mode.", "history": "Added in API level 29", "FullName": "public int getGlobalPrivateDnsMode (ComponentName admin)"}, "addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#content#IntentFilter_E@", "IntentFilter: The IntentFilter for which a default handler is added."], ["@B_android#content#ComponentName_E@", "ComponentName: The Activity that is added as default intent handler. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner or device owner to set a default activity that the system selects to handle intents that match the given @B_android#content#IntentFilter_E@. This activity will remain the default intent handler even if the set of potential event handlers for the intent filter changes and if the intent preferences are reset. Note that the caller should still declare the activity in the manifest, the API just sets the activity to be the default one to handle the given intent filter. The default disambiguation mechanism takes over if the activity is not installed (anymore). When the activity is (re)installed, it is automatically reset as default intent handler for the filter. The calling device admin must be a profile owner or device owner. If it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void addPersistentPreferredActivity (ComponentName admin, IntentFilter filter, ComponentName activity)"}, "removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "Whether the package was removed."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package from which widget providers are no longer white-listed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#addCrossProfileWidgetProvider_E@", "@B_android#app#admin#DevicePolicyManager#getCrossProfileWidgetProviders_E@"], "Permissions": [], "Description": "Called by the profile owner of a managed profile to disable widget providers from a given package to be available in the parent profile. For this method to take effect the package should have been added via @B_android#app#admin#DevicePolicyManager#addCrossProfileWidgetProvider_E@.", "history": "Added in API level 21", "FullName": "public boolean removeCrossProfileWidgetProvider (ComponentName admin, String packageName)"}, "getSystemUpdatePolicy()": {"Returns": [["@B_android#app#admin#SystemUpdatePolicy_E@", "The current policy object, or null if no policy is set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a local system update policy set previously by @B_android#app#admin#DevicePolicyManager#setSystemUpdatePolicy_E@.", "history": "Added in API level 23", "FullName": "public SystemUpdatePolicy getSystemUpdatePolicy ()"}, "isAffiliatedUser()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@"], "Permissions": [], "Description": "Returns whether this user/profile is affiliated with the device. By definition, the user that the device owner runs on is always affiliated with the device. Any other user/profile is considered affiliated with the device if the set specified by its profile owner via @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@ intersects with the device owner's.", "history": "Added in API level 28", "FullName": "public boolean isAffiliatedUser ()"}, "getMaximumFailedPasswordsForWipe(android.content.ComponentName)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current maximum number of login attempts that are allowed before the device or profile is wiped, for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve the value for the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always empty and this method returns a default value (0) indicating that the policy is not set. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 8", "FullName": "public int getMaximumFailedPasswordsForWipe (ComponentName admin)"}, "setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: If true caller-Id information in the managed profile is not displayed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to set whether caller-Id information from the managed profile will be shown in the parent profile, for incoming calls. The calling device admin must be a profile owner. If it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void setCrossProfileCallerIdDisabled (ComponentName admin, boolean disabled)"}, "setCrossProfileCalendarPackages(android.content.ComponentName,java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["@B_java#util#Set_E@", "Set: set of packages to be whitelisted This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner"]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getCrossProfileCalendarPackages_E@"], "Permissions": [], "Description": "Allows a set of packages to access cross-profile calendar APIs. Called by a profile owner of a managed profile. Calling with a null value for the set disables the restriction so that all packages are allowed to access cross-profile calendar APIs. Calling with an empty set disallows all packages from accessing cross-profile calendar APIs. If this method isn't called, no package is allowed to access cross-profile calendar APIs by default.", "history": "Added in API level 29", "FullName": "public void setCrossProfileCalendarPackages (ComponentName admin, Set<String> packageNames)"}, "setKeyguardDisabledFeatures(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The disabled features flag which can be either @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FEATURES_NONE_E@ (default), @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FEATURES_ALL_E@, or a combination of @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_WIDGETS_ALL_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_SECURE_CAMERA_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_SECURE_NOTIFICATIONS_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FINGERPRINT_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FACE_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_IRIS_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or does not user @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to disable keyguard customizations, such as widgets. After setting this, keyguard features will be disabled according to the provided feature list. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES_E@ to be able to call this method; if it has not, a security exception will be thrown. Calling this from a managed profile before version @B_android#os#Build#VERSION_CODES#M_E@ will throw a security exception. From version @B_android#os#Build#VERSION_CODES#M_E@ the profile owner of a managed profile can set: @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@, which affects the parent user, but only if there is no separate challenge set on the managed profile. @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FINGERPRINT_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FACE_E@ or @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_IRIS_E@ which affects the managed profile challenge if there is one, or the parent user otherwise. @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS_E@ which affects notifications generated by applications in the managed profile. @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FINGERPRINT_E@, @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_FACE_E@ and @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_IRIS_E@ can also be set on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile. Requests to disable other features on a managed profile will be ignored. The admin can check which features have been disabled by calling @B_android#app#admin#DevicePolicyManager#getKeyguardDisabledFeatures_E@", "history": "Added in API level 17", "FullName": "public void setKeyguardDisabledFeatures (ComponentName admin, int which)"}, "getCurrentFailedPasswordAttempts()": {"Returns": [["int", "The number of times user has entered an incorrect password since the last correct password entry."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WATCH_LOGIN_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the number of times the user has failed at entering a password since that last successful password entry. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve the number of failed password attemts for the parent user. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WATCH_LOGIN_E@ to be able to call this method; if it has not, a security exception will be thrown. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always empty and this method always returns 0. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 8", "FullName": "public int getCurrentFailedPasswordAttempts ()"}, "getLockTaskFeatures(android.content.ComponentName)": {"Returns": [["int", "bitfield of flags. See @B_android#app#admin#DevicePolicyManager#setLockTaskFeatures_E@ for a list. Value is either 0 or a combination of @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_NONE_E@, @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_SYSTEM_INFO_E@, @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_NOTIFICATIONS_E@, @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_HOME_E@, @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_OVERVIEW_E@, @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_GLOBAL_ACTIONS_E@, and @B_android#app#admin#DevicePolicyManager#LOCK_TASK_FEATURE_KEYGUARD_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, the profile owner of an affiliated user or profile, or the profile owner when no device owner is set."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager#setLockTaskFeatures_E@"], "Permissions": [], "Description": "Gets which system features are enabled for LockTask mode.", "history": "Added in API level 28", "FullName": "public int getLockTaskFeatures (ComponentName admin)"}, "getDelegatedScopes(android.content.ComponentName,java.lang.String)": {"Returns": [["@B_java#util#List_E@", "A list containing the scopes given to delegatedPackage."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is delegatedPackage. This value may be null."], ["@B_java#lang#String_E@", "String: The package name of the app whose scopes should be retrieved. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner or device owner to retrieve a list of the scopes given to a delegate package. Other apps can use this method to retrieve their own delegated scopes by passing null for admin and their own package name as delegatedPackage.", "history": "Added in API level 26", "FullName": "public List<String> getDelegatedScopes (ComponentName admin, String delegatedPackage)"}, "addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "Whether the package was added."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package from which widget providers are white-listed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#removeCrossProfileWidgetProvider_E@", "@B_android#app#admin#DevicePolicyManager#getCrossProfileWidgetProviders_E@"], "Permissions": [], "Description": "Called by the profile owner of a managed profile to enable widget providers from a given package to be available in the parent profile. As a result the user will be able to add widgets from the white-listed package running under the profile to a widget host which runs under the parent profile, for example the home screen. Note that a package may have zero or more provider components, where each component provides a different widget type.", "history": "Added in API level 21", "FullName": "public boolean addCrossProfileWidgetProvider (ComponentName admin, String packageName)"}, "isNetworkLoggingEnabled(android.content.ComponentName)": {"Returns": [["boolean", "true if network logging is enabled by device owner, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. Can only be null if the caller is a delegated app with @B_android#app#admin#DevicePolicyManager#DELEGATION_NETWORK_LOGGING_E@ or has MANAGE_USERS permission. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner and caller has no MANAGE_USERS permission"]], "SeeAlso": [], "Permissions": [], "Description": "Return whether network logging is enabled by a device owner.", "history": "Added in API level 26", "FullName": "public boolean isNetworkLoggingEnabled (ComponentName admin)"}, "setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: For which account management is disabled or enabled."], ["boolean", "boolean: The boolean indicating that account management will be disabled (true) or enabled (false)."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner or profile owner to disable account management for a specific type of account. The calling device admin must be a device owner or profile owner. If it is not, a security exception will be thrown. When account management is disabled for an account type, adding or removing an account of that type will not be possible. From @B_android#os#Build#VERSION_CODES#N_E@ the profile or device owner can still use @B_android#accounts#AccountManager_E@ APIs to add or remove accounts when account management for a specific type is disabled.", "history": "Added in API level 21", "FullName": "public void setAccountManagementDisabled (ComponentName admin, String accountType, boolean disabled)"}, "startUserInBackground(android.content.ComponentName,android.os.UserHandle)": {"Returns": [["int", "one of the following result codes: @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_RUNNING_USERS_E@, Value is @B_android#os#UserManager#USER_OPERATION_SUCCESS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_UNKNOWN_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_RUNNING_USERS_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_CURRENT_USER_E@, @B_android#os#UserManager#USER_OPERATION_ERROR_LOW_STORAGE_E@, or @B_android#os#UserManager#USER_OPERATION_ERROR_MAX_USERS_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the user to be started in background. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by a device owner to start the specified secondary user in background.", "history": "Added in API level 28", "FullName": "public int startUserInBackground (ComponentName admin, UserHandle userHandle)"}, "addUserRestriction(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The key of the restriction. See the constants in @B_android#os#UserManager_E@ for the list of keys."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to set a user restriction specified by the key. The calling device admin must be a profile or device owner; if it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void addUserRestriction (ComponentName admin, String key)"}, "setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the setting to update."], ["@B_java#lang#String_E@", "String: The value to update the setting to."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to update @B_android#provider#Settings#Global_E@ settings. Validation that the value of the setting is in the correct form for the setting type should be performed by the caller. The settings that can be updated with this method are: @B_android#provider#Settings#Global#ADB_ENABLED_E@ @B_android#provider#Settings#Global#AUTO_TIME_E@ @B_android#provider#Settings#Global#AUTO_TIME_ZONE_E@ @B_android#provider#Settings#Global#DATA_ROAMING_E@ @B_android#provider#Settings#Global#USB_MASS_STORAGE_ENABLED_E@ @B_android#provider#Settings#Global#WIFI_SLEEP_POLICY_E@ @B_android#provider#Settings#Global#STAY_ON_WHILE_PLUGGED_IN_E@ This setting is only available from @B_android#os#Build#VERSION_CODES#M_E@ onwards and can only be set if @B_android#app#admin#DevicePolicyManager#setMaximumTimeToLock_E@ is not used to set a timeout. @B_android#provider#Settings#Global#WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN_E@ This setting is only available from @B_android#os#Build#VERSION_CODES#M_E@ onwards. Changing the following settings has no effect as of @B_android#os#Build#VERSION_CODES#M_E@: @B_android#provider#Settings#Global#BLUETOOTH_ON_E@. Use @B_android#bluetooth#BluetoothAdapter#enable_E@ and @B_android#bluetooth#BluetoothAdapter#disable_E@ instead. @B_android#provider#Settings#Global#DEVELOPMENT_SETTINGS_ENABLED_E@ @B_android#provider#Settings#Global#MODE_RINGER_E@. Use @B_android#media#AudioManager#setRingerMode_E@ instead. @B_android#provider#Settings#Global#NETWORK_PREFERENCE_E@ @B_android#provider#Settings#Global#WIFI_ON_E@. Use @B_android#net#wifi#WifiManager#setWifiEnabled_E@ instead.", "history": "Added in API level 21", "FullName": "public void setGlobalSetting (ComponentName admin, String setting, String value)"}, "setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. All components in the device owner package can set system update policies and the most recent policy takes effect. This value must never be null."], ["@B_android#app#admin#SystemUpdatePolicy_E@", "SystemUpdatePolicy: the new policy, or null to clear the current policy."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."], ["@B_java#lang#IllegalArgumentException_E@", "if the policy type or maintenance window is not valid."], ["@B_android#app#admin#SystemUpdatePolicy#ValidationFailedException_E@", "if the policy's freeze period does not meet the requirement."]], "SeeAlso": ["@B_android#app#admin#SystemUpdatePolicy_E@", "@B_android#app#admin#SystemUpdatePolicy#setFreezePeriods_E@"], "Permissions": [], "Description": "Called by device owners to set a local system update policy. When a new policy is set, @B_android#app#admin#DevicePolicyManager#ACTION_SYSTEM_UPDATE_POLICY_CHANGED_E@ is broadcasted. If the supplied system update policy has freeze periods set but the freeze periods do not meet 90-day maximum length or 60-day minimum separation requirement set out in @B_android#app#admin#SystemUpdatePolicy#setFreezePeriods_E@, @B_android#app#admin#SystemUpdatePolicy#ValidationFailedException_E@ will the thrown. Note that the system keeps a record of freeze periods the device experienced previously, and combines them with the new freeze periods to be set when checking the maximum freeze length and minimum freeze separation constraints. As a result, freeze periods that passed validation during @B_android#app#admin#SystemUpdatePolicy#setFreezePeriods_E@ might fail the additional checks here due to the freeze period history. If this is causing issues during development, adb shell dpm clear-freeze-period-record can be used to clear the record.", "history": "Added in API level 23", "FullName": "public void setSystemUpdatePolicy (ComponentName admin, SystemUpdatePolicy policy)"}, "setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.util.List<java.security.cert.Certificate>,boolean)": {"Returns": [["boolean", "true if the provided alias exists and the certificates has been successfully associated with it, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#lang#String_E@", "String: The private key alias under which to install the certificate. The alias should denote an existing private key. If a certificate with that alias already exists, it will be overwritten. This value must never be null."], ["@B_java#util#List_E@", "List: The certificate chain to install. The chain should start with the leaf certificate and include the chain of trust in order. This will be returned by @B_android#security#KeyChain#getCertificateChain_E@. This value must never be null."], ["boolean", "boolean: true to indicate that a user can select this key via the certificate selection prompt, false to indicate that this key can only be granted access by implementing @B_android#app#admin#DeviceAdminReceiver#onChoosePrivateKeyAlias_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner, or admin is null but the calling application is not a delegated certificate installer."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to associate certificates with a key pair that was generated using @B_android#app#admin#DevicePolicyManager#generateKeyPair_E@, and set whether the key is available for the user to choose in the certificate selection prompt.", "history": "Added in API level 28", "FullName": "public boolean setKeyPairCertificate (ComponentName admin, String alias, List<Certificate> certs, boolean isUserSelectable)"}, "setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: Device owner information which will be displayed instead of the user owner info."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the device owner information to be shown on the lock screen. If the device owner information is null or empty then the device owner info is cleared and the user owner info is shown on the lock screen if it is set. If the device owner information contains only whitespaces then the message on the lock screen will be blank and the user will not be allowed to change it. If the device owner information needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this string accordingly.", "history": "Added in API level 24", "FullName": "public void setDeviceOwnerLockScreenInfo (ComponentName admin, CharSequence info)"}, "bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)": {"Returns": [["boolean", "If you have successfully bound to the service, true is returned; false is returned if the connection is not made and you will not receive the service object."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: Identifies the service to connect to. The Intent must specify either an explicit component name or a package name to match an @B_android#content#IntentFilter_E@ published by a service."], ["@B_android#content#ServiceConnection_E@", "ServiceConnection: Receives information as the service is started and stopped in main thread. This must be a valid @B_android#content#ServiceConnection_E@ object; it must not be null. This value must never be null."], ["int", "int: Operation options for the binding operation. See @B_android#content#Context#bindService_E@. Value is either 0 or a combination of @B_android#content#Context#BIND_AUTO_CREATE_E@, @B_android#content#Context#BIND_DEBUG_UNBIND_E@, @B_android#content#Context#BIND_NOT_FOREGROUND_E@, @B_android#content#Context#BIND_ABOVE_CLIENT_E@, @B_android#content#Context#BIND_ALLOW_OOM_MANAGEMENT_E@, @B_android#content#Context#BIND_WAIVE_PRIORITY_E@, @B_android#content#Context#BIND_IMPORTANT_E@, @B_android#content#Context#BIND_ADJUST_WITH_ACTIVITY_E@, @B_android#content#Context#BIND_NOT_PERCEPTIBLE_E@, and @B_android#content#Context#BIND_INCLUDE_CAPABILITIES_E@"], ["@B_android#os#UserHandle_E@", "UserHandle: Which user to bind to. Must be one of the users returned by @B_android#app#admin#DevicePolicyManager#getBindDeviceAdminTargetUsers_E@, otherwise a @B_java#lang#SecurityException_E@ will be thrown. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Context#bindService_E@", "@B_android#app#admin#DevicePolicyManager#getBindDeviceAdminTargetUsers_E@"], "Permissions": ["@B_android#Manifest#permission#BIND_DEVICE_ADMIN_E@"], "Description": "Called by a device owner to bind to a service from a profile owner or vice versa. See @B_android#app#admin#DevicePolicyManager#getBindDeviceAdminTargetUsers_E@ for a definition of which device/profile owners are allowed to bind to services of another profile/device owner. The service must be protected by @B_android#Manifest#permission#BIND_DEVICE_ADMIN_E@. Note that the @B_android#content#Context_E@ used to obtain this @B_android#app#admin#DevicePolicyManager_E@ instance via @B_android#content#Context#getSystemService_E@ will be used to bind to the @B_android#app#Service_E@.", "history": "Added in API level 26", "FullName": "public boolean bindDeviceAdminServiceAsUser (ComponentName admin, Intent serviceIntent, ServiceConnection conn, int flags, UserHandle targetUser)"}, "setProfileName(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associate with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the profile."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isProfileOwnerApp_E@", "@B_android#app#admin#DevicePolicyManager#isDeviceOwnerApp_E@"], "Permissions": [], "Description": "Sets the name of the profile. In the device owner case it sets the name of the user which it is called from. Only a profile owner or device owner can call this. If this is never called by the profile or device owner, the name will be set to default values.", "history": "Added in API level 21", "FullName": "public void setProfileName (ComponentName admin, String profileName)"}, "setCameraDisabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: Whether or not the camera should be disabled."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to disable all cameras on the device, for this user. After setting this, no applications running as this user will be able to access any cameras on the device. If the caller is device owner, then the restriction will be applied to all users. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA_E@ to be able to call this method; if it has not, a security exception will be thrown.", "history": "Added in API level 14", "FullName": "public void setCameraDisabled (ComponentName admin, boolean disabled)"}, "getOrganizationColor(android.content.ComponentName)": {"Returns": [["int", "The 24bit (0xRRGGBB) representation of the color to be used."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to retrieve the color used for customization. This color is used as background color of the confirm credentials screen for that user.", "history": "Added in API level 24", "FullName": "public int getOrganizationColor (ComponentName admin)"}, "getEndUserSessionMessage(android.content.ComponentName)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the user session end message.", "history": "Added in API level 28", "FullName": "public CharSequence getEndUserSessionMessage (ComponentName admin)"}, "getBluetoothContactSharingDisabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to determine whether or not Bluetooth devices cannot access enterprise contacts. The calling device admin must be a profile owner. If it is not, a security exception will be thrown. This API works on managed profile only.", "history": "Added in API level 23", "FullName": "public boolean getBluetoothContactSharingDisabled (ComponentName admin)"}, "isMasterVolumeMuted(android.content.ComponentName)": {"Returns": [["boolean", "true if master volume is muted, false if it's not."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by profile or device owners to check whether the master volume mute is on or off.", "history": "Added in API level 21", "FullName": "public boolean isMasterVolumeMuted (ComponentName admin)"}, "getStorageEncryption(android.content.ComponentName)": {"Returns": [["boolean", "true if the admin(s) are requesting encryption, false if not."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. If null, this will return the requested encryption setting as an aggregate of all active administrators. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to determine the requested setting for secure storage.", "history": "Added in API level 11", "FullName": "public boolean getStorageEncryption (ComponentName admin)"}, "getSecondaryUsers(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "list of other @B_android#os#UserHandle_E@s on the device."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#removeUser_E@", "@B_android#app#admin#DevicePolicyManager#switchUser_E@", "@B_android#app#admin#DevicePolicyManager#startUserInBackground_E@", "@B_android#app#admin#DevicePolicyManager#stopUser_E@"], "Permissions": [], "Description": "Called by a device owner to list all secondary users on the device. Managed profiles are not considered as secondary users. Used for various user management APIs, including @B_android#app#admin#DevicePolicyManager#switchUser_E@, @B_android#app#admin#DevicePolicyManager#removeUser_E@ and @B_android#app#admin#DevicePolicyManager#stopUser_E@.", "history": "Added in API level 28", "FullName": "public List<UserHandle> getSecondaryUsers (ComponentName admin)"}, "wipeData(int)": {"Returns": [], "Parameters": [["int", "int: Bit mask of additional options: currently supported flags are @B_android#app#admin#DevicePolicyManager#WIPE_EXTERNAL_STORAGE_E@, @B_android#app#admin#DevicePolicyManager#WIPE_RESET_PROTECTION_DATA_E@, @B_android#app#admin#DevicePolicyManager#WIPE_EUICC_E@ and @B_android#app#admin#DevicePolicyManager#WIPE_SILENTLY_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Ask that all user data be wiped. If called as a secondary user, the user will be removed and other users will remain unaffected. Calling from the primary user will cause the device to reboot, erasing all device data - including all the secondary users and their data - while booting up. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@ to be able to call this method; if it has not, a security exception will be thrown.", "history": "Added in API level 8", "FullName": "public void wipeData (int flags)"}, "getLockTaskPackages(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, the profile owner of an affiliated user or profile, or the profile owner when no device owner is set."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager#setLockTaskPackages_E@"], "Permissions": [], "Description": "Returns the list of packages allowed to start the lock task mode.", "history": "Added in API level 26", "FullName": "public String[] getLockTaskPackages (ComponentName admin)"}, "setDefaultSmsApplication(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package to set as the default SMS application. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner to set the default SMS application. The calling device admin must be a device owner. If it is not, a security exception will be thrown.", "history": "Added in API level 29", "FullName": "public void setDefaultSmsApplication (ComponentName admin, String packageName)"}, "getCertInstallerPackage(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "The package name of the current delegated certificate installer, or null if none is set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#O_E@. Use @B_android#app#admin#DevicePolicyManager#getDelegatePackages_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_CERT_INSTALL_E@ scope instead. Called by a profile owner or device owner to retrieve the certificate installer for the user, or null if none is set. If there are multiple delegates this function will return one of them.", "history": "Added in API level 23 Deprecated in API level 26", "FullName": "public String getCertInstallerPackage (ComponentName admin)"}, "getParentProfileInstance(android.content.ComponentName)": {"Returns": [["@B_android#app#admin#DevicePolicyManager_E@", "a new instance of @B_android#app#admin#DevicePolicyManager_E@ that acts on the parent profile. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the profile owner of a managed profile to obtain a @B_android#app#admin#DevicePolicyManager_E@ whose calls act on the parent profile. The following methods are supported for the parent instance, all other methods will throw a SecurityException when called on the parent instance: @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLength_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumLength_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumUpperCase_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumUpperCase_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLowerCase_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumLowerCase_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLetters_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumLetters_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumNumeric_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumNumeric_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumSymbols_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumSymbols_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMinimumNonLetter_E@ @B_android#app#admin#DevicePolicyManager#setPasswordMinimumNonLetter_E@ @B_android#app#admin#DevicePolicyManager#getPasswordHistoryLength_E@ @B_android#app#admin#DevicePolicyManager#setPasswordHistoryLength_E@ @B_android#app#admin#DevicePolicyManager#getPasswordExpirationTimeout_E@ @B_android#app#admin#DevicePolicyManager#setPasswordExpirationTimeout_E@ @B_android#app#admin#DevicePolicyManager#getPasswordExpiration_E@ @B_android#app#admin#DevicePolicyManager#getPasswordMaximumLength_E@ @B_android#app#admin#DevicePolicyManager#isActivePasswordSufficient_E@ @B_android#app#admin#DevicePolicyManager#getCurrentFailedPasswordAttempts_E@ @B_android#app#admin#DevicePolicyManager#getMaximumFailedPasswordsForWipe_E@ @B_android#app#admin#DevicePolicyManager#setMaximumFailedPasswordsForWipe_E@ @B_android#app#admin#DevicePolicyManager#getMaximumTimeToLock_E@ @B_android#app#admin#DevicePolicyManager#setMaximumTimeToLock_E@ @B_android#app#admin#DevicePolicyManager#lockNow_E@ @B_android#app#admin#DevicePolicyManager#getKeyguardDisabledFeatures_E@ @B_android#app#admin#DevicePolicyManager#setKeyguardDisabledFeatures_E@ @B_android#app#admin#DevicePolicyManager#getTrustAgentConfiguration_E@ @B_android#app#admin#DevicePolicyManager#setTrustAgentConfiguration_E@ @B_android#app#admin#DevicePolicyManager#getRequiredStrongAuthTimeout_E@ @B_android#app#admin#DevicePolicyManager#setRequiredStrongAuthTimeout_E@", "history": "Added in API level 24", "FullName": "public DevicePolicyManager getParentProfileInstance (ComponentName admin)"}, "getPasswordMaximumLength(int)": {"Returns": [["int", "Returns the maximum length that the user can enter."]], "Parameters": [["int", "int: The quality being interrogated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum password length that the device supports for a particular password quality. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always empty and this method always returns 0.", "history": "Added in API level 8", "FullName": "public int getPasswordMaximumLength (int quality)"}, "requestBugreport(android.content.ComponentName)": {"Returns": [["boolean", "true if the bugreport collection started successfully, or false if it wasn't triggered because a previous bugreport operation is still active (either the bugreport is still running or waiting for the user to share or decline)"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner, or there is at least one profile or secondary user that is not affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@"], "Permissions": [], "Description": "Called by a device owner to request a bugreport. If the device contains secondary users or profiles, they must be affiliated with the device. Otherwise a @B_java#lang#SecurityException_E@ will be thrown. See @B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@.", "history": "Added in API level 24", "FullName": "public boolean requestBugreport (ComponentName admin)"}, "isUninstallBlocked(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "true if uninstallation is blocked."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component whose blocking policy will be checked, or null to check whether any admin has blocked the uninstallation. This value may be null."], ["@B_java#lang#String_E@", "String: package to check."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Check whether the user has been blocked by device policy from uninstalling a package. Requires the caller to be the profile owner if checking a specific admin's policy. @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@, the behavior of this API is changed such that passing null as the admin parameter will return if any admin has blocked the uninstallation. Before L MR1, passing null will cause a NullPointerException to be raised.", "history": "Added in API level 21", "FullName": "public boolean isUninstallBlocked (ComponentName admin, String packageName)"}, "getRequiredStrongAuthTimeout(android.content.ComponentName)": {"Returns": [["long", "The timeout in milliseconds or 0 if not configured for the provided admin."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate across all participating admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine for how long the user will be able to use secondary, non strong auth for authentication, since last strong method authentication (password, pin or pattern) was used. After the returned timeout the user is required to use strong authentication method. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, 0 is returned to indicate that no timeout is configured. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public long getRequiredStrongAuthTimeout (ComponentName admin)"}, "createAdminSupportIntent(java.lang.String)": {"Returns": [["@B_android#content#Intent_E@", "Intent An intent to be used to start the dialog-activity if the restriction is set by an admin, or null if the restriction does not exist or no admin set it."]], "Parameters": [["@B_java#lang#String_E@", "String: Indicates for which feature the dialog should be displayed. Can be a user restriction from @B_android#os#UserManager_E@, e.g. @B_android#os#UserManager#DISALLOW_ADJUST_VOLUME_E@, or one of the constants @B_android#app#admin#DevicePolicyManager#POLICY_DISABLE_CAMERA_E@ or @B_android#app#admin#DevicePolicyManager#POLICY_DISABLE_SCREEN_CAPTURE_E@. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by any app to display a support dialog when a feature was disabled by an admin. This returns an intent that can be used with @B_android#content#Context#startActivity_E@ to display the dialog. It will tell the user that the feature indicated by restriction was disabled by an admin, and include a link for more information. The default content of the dialog can be changed by the restricting admin via @B_android#app#admin#DevicePolicyManager#setShortSupportMessage_E@. If the restriction is not set (i.e. the feature is available), then the return value will be null.", "history": "Added in API level 26", "FullName": "public Intent createAdminSupportIntent (String restriction)"}, "getMaximumTimeToLock(android.content.ComponentName)": {"Returns": [["long", "time in milliseconds for the given admin or the minimum value (strictest) of all admins if admin is null. Returns 0 if there are no restrictions."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current maximum time to unlock for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 8", "FullName": "public long getMaximumTimeToLock (ComponentName admin)"}, "removeOverrideApn(android.content.ComponentName,int)": {"Returns": [["boolean", "true if the required override APN is successfully removed, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["int", "int: the id of the override APN to remove"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setOverrideApnsEnabled_E@"], "Permissions": [], "Description": "Called by device owner to remove an override APN. This method may returns false if there is no override APN with the given apnId.", "history": "Added in API level 28", "FullName": "public boolean removeOverrideApn (ComponentName admin, int apnId)"}, "getPasswordMinimumLetters(android.content.ComponentName)": {"Returns": [["int", "The minimum number of letters required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of letters required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumLetters_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumLetters (ComponentName admin)"}, "installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)": {"Returns": [["boolean", "true if the keys were installed, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#security#PrivateKey_E@", "PrivateKey: The private key to install. This value must never be null."], ["@B_java#security#cert#Certificate_E@", "Certificate: The certificate chain to install. The chain should start with the leaf certificate and include the chain of trust in order. This will be returned by @B_android#security#KeyChain#getCertificateChain_E@. This value must never be null."], ["@B_java#lang#String_E@", "String: The private key alias under which to install the certificate. If a certificate with that alias already exists, it will be overwritten. This value must never be null."], ["boolean", "boolean: true to request that the calling app be granted access to the credentials immediately. Otherwise, access to the credentials will be gated by user approval."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#security#KeyChain#getCertificateChain_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to install a certificate chain and corresponding private key for the leaf certificate. All apps within the profile will be able to access the certificate chain and use the private key, given direct user approval. The caller of this API may grant itself access to the certificate and private key immediately, without user approval. It is a best practice not to request this unless strictly necessary since it opens up additional security vulnerabilities. Note: If the provided alias is of an existing alias, all former grants that apps have been given to access the key and certificates associated with this alias will be revoked.", "history": "Added in API level 24", "FullName": "public boolean installKeyPair (ComponentName admin, PrivateKey privKey, Certificate[] certs, String alias, boolean requestAccess)"}, "enableSystemApp(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is an enable system app delegate. This value must never be null."], ["@B_java#lang#String_E@", "String: The package to be re-enabled in the calling profile."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Re-enable a system app that was disabled by default when the user was initialized. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_ENABLE_SYSTEM_APP_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 21", "FullName": "public void enableSystemApp (ComponentName admin, String packageName)"}, "setTime(android.content.ComponentName,long)": {"Returns": [["boolean", "true if set time succeeded, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["long", "long: time in milliseconds since the Epoch"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to set the system wall clock time. This only takes effect if called when @B_android#provider#Settings#Global#AUTO_TIME_E@ is 0, otherwise false will be returned.", "history": "Added in API level 28", "FullName": "public boolean setTime (ComponentName admin, long millis)"}, "getPasswordExpirationTimeout(android.content.ComponentName)": {"Returns": [["long", "The timeout for the given admin or the minimum of all timeouts"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the password expiration timeout for the given admin. The expiration timeout is the recurring expiration timeout provided in the call to @B_android#app#admin#DevicePolicyManager#setPasswordExpirationTimeout_E@ for the given admin or the aggregate of all participating policy administrators if admin is null. Admins that have set restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password expiration is always disabled and this method always returns 0. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 11", "FullName": "public long getPasswordExpirationTimeout (ComponentName admin)"}, "isActivePasswordSufficient()": {"Returns": [["boolean", "true if the password meets the policy requirements, false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application isn't an active admin that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"], ["@B_java#lang#IllegalStateException_E@", "if the user isn't unlocked"]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the calling user's current password meets policy requirements (e.g. quality, minimum length). The user must be unlocked to perform this check. Policy requirements which affect this check can be set by admins of the user, but also by the admin of a managed profile associated with the calling user (when the managed profile doesn't have a separate work challenge). When a managed profile has a separate work challenge, its policy requirements only affect the managed profile. Depending on the user, this method checks the policy requirement against one of the following passwords: For the primary user or secondary users: the personal keyguard password. For managed profiles: a work challenge if set, otherwise the parent user's personal keyguard password. In other words, it's always checking the requirement against the password that is protecting the calling user. Note that this method considers all policy requirements targeting the password in question. For example a profile owner might set a requirement on the parent profile i.e. personal keyguard but not on the profile itself. When the device has a weak personal keyguard password and no separate work challenge, calling this method will return false despite the profile owner not setting a policy on the profile itself. This is because the profile's current password is the personal keyguard password, and it does not meet all policy requirements. Device admins must request @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ before calling this method. Note, this policy type is deprecated for device admins in Android 9.0 (API level 28) or higher. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to determine if the password set on the parent profile is sufficient. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty - i.e. this method will always return false on such devices, provided any password requirements were set.", "history": "Added in API level 8", "FullName": "public boolean isActivePasswordSufficient ()"}, "installExistingPackage(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "true if the app is installed; false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The package to be installed in the calling profile."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, or the profile owner of an affiliated user or profile."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setKeepUninstalledPackages_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Install an existing package that has been installed in another user, or has been kept after removal via @B_android#app#admin#DevicePolicyManager#setKeepUninstalledPackages_E@. This function can be called by a device owner, profile owner or a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_INSTALL_EXISTING_PACKAGE_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. When called in a secondary user or managed profile, the user/profile must be affiliated with the device. See @B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@.", "history": "Added in API level 28", "FullName": "public boolean installExistingPackage (ComponentName admin, String packageName)"}, "getPermittedInputMethods(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "List of input method package names. This value may be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of permitted input methods set by this device or profile owner. An empty list means no input methods except system input methods are allowed. Null means all input methods are allowed.", "history": "Added in API level 21", "FullName": "public List<String> getPermittedInputMethods (ComponentName admin)"}, "getAutoTimeRequired()": {"Returns": [["boolean", "true if auto time is required."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean getAutoTimeRequired ()"}, "installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)": {"Returns": [["boolean", "true if the keys were installed, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#security#PrivateKey_E@", "PrivateKey: The private key to install. This value must never be null."], ["@B_java#security#cert#Certificate_E@", "Certificate: The certificate chain to install. The chain should start with the leaf certificate and include the chain of trust in order. This will be returned by @B_android#security#KeyChain#getCertificateChain_E@. This value must never be null."], ["@B_java#lang#String_E@", "String: The private key alias under which to install the certificate. If a certificate with that alias already exists, it will be overwritten. This value must never be null."], ["int", "int: Flags to request that the calling app be granted access to the credentials and set the key to be user-selectable. See @B_android#app#admin#DevicePolicyManager#INSTALLKEY_SET_USER_SELECTABLE_E@ and @B_android#app#admin#DevicePolicyManager#INSTALLKEY_REQUEST_CREDENTIALS_ACCESS_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#security#KeyChain#getCertificateChain_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to install a certificate chain and corresponding private key for the leaf certificate. All apps within the profile will be able to access the certificate chain and use the private key, given direct user approval (if the user is allowed to select the private key). The caller of this API may grant itself access to the certificate and private key immediately, without user approval. It is a best practice not to request this unless strictly necessary since it opens up additional security vulnerabilities. Include @B_android#app#admin#DevicePolicyManager#INSTALLKEY_SET_USER_SELECTABLE_E@ in the flags argument to allow the user to select the key from a dialog. Note: If the provided alias is of an existing alias, all former grants that apps have been given to access the key and certificates associated with this alias will be revoked.", "history": "Added in API level 28", "FullName": "public boolean installKeyPair (ComponentName admin, PrivateKey privKey, Certificate[] certs, String alias, int flags)"}, "removeActiveAdmin(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The administration compononent to remove. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not in the owner application of admin."]], "SeeAlso": [], "Permissions": [], "Description": "Remove a current administration component. This can only be called by the application that owns the administration component; if you try to remove someone else's component, a security exception will be thrown. Note that the operation is not synchronous and the admin might still be active (as indicated by @B_android#app#admin#DevicePolicyManager#getActiveAdmins_E@) by the time this method returns.", "history": "Added in API level 8", "FullName": "public void removeActiveAdmin (ComponentName admin)"}, "isDeviceOwnerApp(java.lang.String)": {"Returns": [["boolean", "whether or not the package is registered as the device owner app."]], "Parameters": [["@B_java#lang#String_E@", "String: the package name of the app, to compare with the registered device owner app, if any."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to determine if a particular package has been registered as a Device Owner app. A device owner app is a special device admin that cannot be deactivated by the user, once activated as a device admin. It also cannot be uninstalled. To check whether a particular package is currently registered as the device owner app, pass in the package name from @B_android#content#Context#getPackageName_E@ to this method.This is useful for device admin apps that want to check whether they are also registered as the device owner app. The exact mechanism by which a device admin app is registered as a device owner app is defined by the setup process.", "history": "Added in API level 18", "FullName": "public boolean isDeviceOwnerApp (String packageName)"}, "getGlobalPrivateDnsHost(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "The hostname used for Private DNS queries, null if none is set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not the device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the system-wide Private DNS host.", "history": "Added in API level 29", "FullName": "public String getGlobalPrivateDnsHost (ComponentName admin)"}, "clearUserRestriction(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The key of the restriction. See the constants in @B_android#os#UserManager_E@ for the list of keys."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to clear a user restriction specified by the key. The calling device admin must be a profile or device owner; if it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void clearUserRestriction (ComponentName admin, String key)"}, "setAffiliationIds(android.content.ComponentName,java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with. This value must never be null."], ["@B_java#util#Set_E@", "Set: A set of opaque non-empty affiliation ids. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if ids is null or contains an empty string."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@"], "Permissions": [], "Description": "Indicates the entity that controls the device or profile owner. Two users/profiles are affiliated if the set of ids set by their device or profile owners intersect. A user/profile that is affiliated with the device owner user is considered to be affiliated with the device. @B_android#app#admin#DevicePolicyManager#bindDeviceAdminServiceAsUser_E@) won't be available when a secondary user or profile is created, until it becomes affiliated. Therefore it is recommended that the appropriate affiliation ids are set by its profile owner as soon as possible after the user/profile is created.", "history": "Added in API level 26", "FullName": "public void setAffiliationIds (ComponentName admin, Set<String> ids)"}, "resetPassword(java.lang.String, int)": {"Returns": [["boolean", "Returns true if the password was applied, or false if it is not acceptable for the current constraints or if the user has not been decrypted yet."]], "Parameters": [["@B_java#lang#String_E@", "String: The new password for the user. Null or empty clears the password."], ["int", "int: May be 0 or combination of @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_REQUIRE_ENTRY_E@ and @B_android#app#admin#DevicePolicyManager#RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_RESET_PASSWORD_E@"], ["@B_java#lang#IllegalStateException_E@", "if the calling user is locked or has a managed profile."]], "SeeAlso": [], "Permissions": [], "Description": "Force a new password for device unlock (the password needed to access the entire device) or the work profile challenge on the current user. This takes effect immediately. For device owner and profile owners targeting SDK level @B_android#os#Build#VERSION_CODES#O_E@ or above, this API is no longer available and will throw @B_java#lang#SecurityException_E@. Please use the new API @B_android#app#admin#DevicePolicyManager#resetPasswordWithToken_E@ instead. Note: This API has been limited as of @B_android#os#Build#VERSION_CODES#N_E@ for device admins that are not device owner and not profile owner. The password can now only be changed if there is currently no password set. Device owner and profile owner can still do this when user is unlocked and does not have a managed profile. The given password must be sufficient for the current password quality and length constraints as returned by @B_android#app#admin#DevicePolicyManager#getPasswordQuality_E@ and @B_android#app#admin#DevicePolicyManager#getPasswordMinimumLength_E@; if it does not meet these constraints, then it will be rejected and false returned. Note that the password may be a stronger quality (containing alphanumeric characters when the requested quality is only numeric), in which case the currently active quality will be increased to match. Calling with a null or empty password will clear any existing PIN, pattern or password if the current password constraints allow it. Note: This will not work in @B_android#os#Build#VERSION_CODES#N_E@ and later for managed profiles, or for device admins that are not device owner or profile owner. Once set, the password cannot be changed to null or empty except by these admins. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_RESET_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown.", "history": "added in API level 8", "FullName": "public boolean resetPassword (String password, int flags)"}, "removeUser(android.content.ComponentName,android.os.UserHandle)": {"Returns": [["boolean", "true if the user was removed, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the user to remove. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner to remove a user/profile and all associated data. The primary user can not be removed.", "history": "Added in API level 21", "FullName": "public boolean removeUser (ComponentName admin, UserHandle userHandle)"}, "setLogoutEnabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: whether logout should be enabled or not."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner to specify whether logout is enabled for all secondary users. The system may show a logout button that stops the user and switches back to the primary user.", "history": "Added in API level 28", "FullName": "public void setLogoutEnabled (ComponentName admin, boolean enabled)"}, "getStartUserSessionMessage(android.content.ComponentName)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the user session start message.", "history": "Added in API level 28", "FullName": "public CharSequence getStartUserSessionMessage (ComponentName admin)"}, "getKeepUninstalledPackages(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "List of package names to keep cached."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a keep uninstalled packages delegate. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Get the list of apps to keep around as APKs even if no user has currently installed it. This function can be called by a device owner or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_KEEP_UNINSTALLED_PACKAGES_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. Please note that packages returned in this method are not automatically pre-cached.", "history": "Added in API level 28", "FullName": "public List<String> getKeepUninstalledPackages (ComponentName admin)"}, "getCrossProfileCallerIdDisabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to determine whether or not caller-Id information has been disabled. The calling device admin must be a profile owner. If it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public boolean getCrossProfileCallerIdDisabled (ComponentName admin)"}, "getActiveAdmins()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a list of all currently active device administrators' component names. If there are no administrators null may be returned.", "history": "Added in API level 8", "FullName": "public List<ComponentName> getActiveAdmins ()"}, "setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,java.lang.String)": {"Returns": [["int", "PRIVATE_DNS_SET_NO_ERROR if the mode was set successfully, PRIVATE_DNS_SET_ERROR_FAILURE_SETTING if it could not be set or PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING if the specified host does not implement RFC7858. Value is @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_NO_ERROR_E@, @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING_E@, or @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_ERROR_FAILURE_SETTING_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The hostname of a server that implements DNS over TLS (RFC7858). This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the privateDnsHost is not a valid hostname."], ["@B_java#lang#SecurityException_E@", "if the caller is not the device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the global Private DNS host to be used. May only be called by the device owner. Note that the method is blocking as it will perform a connectivity check to the resolver, to ensure it is valid. Because of that, the method should not be called on any thread that relates to user interaction, such as the UI thread. In case a VPN is used in conjunction with Private DNS resolver, the Private DNS resolver must be reachable both from within and outside the VPN. Otherwise, the device may lose the ability to resolve hostnames as system traffic to the resolver may not go through the VPN. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 29", "FullName": "public int setGlobalPrivateDnsModeSpecifiedHost (ComponentName admin, String privateDnsHost)"}, "setPermittedAccessibilityServices(android.content.ComponentName,java.util.List<java.lang.String>)": {"Returns": [["boolean", "true if the operation succeeded, or false if the list didn't contain every enabled non-system accessibility service."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#util#List_E@", "List: List of accessibility service package names."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to set the permitted @B_android#accessibilityservice#AccessibilityService_E@. When set by a device owner or profile owner the restriction applies to all profiles of the user the device owner or profile owner is an admin for. By default, the user can use any accessibility service. When zero or more packages have been added, accessibility services that are not in the list and not part of the system can not be enabled by the user. Calling with a null value for the list disables the restriction so that all services can be used, calling with an empty list only allows the built-in system services. Any non-system accessibility service that's currently enabled must be included in the list. System accessibility services are always available to the user the list can't modify this.", "history": "Added in API level 21", "FullName": "public boolean setPermittedAccessibilityServices (ComponentName admin, List<String> packageNames)"}, "setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The number of failed password attempts at which point the device or profile will be wiped."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or does not use both @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WATCH_LOGIN_E@ and @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Setting this to a value greater than zero enables a built-in policy that will perform a device or profile wipe after too many incorrect device-unlock passwords have been entered. This built-in policy combines watching for failed passwords and wiping the device, and requires that you request both @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WATCH_LOGIN_E@ and @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@}. To implement any other policy (e.g. wiping data for a particular application only, erasing or revoking credentials, or reporting the failure to a server), you should implement @B_android#app#admin#DeviceAdminReceiver#onPasswordFailed_E@ instead. Do not use this API, because if the maximum count is reached, the device or profile will be wiped immediately, and your callback will not be invoked. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set a value on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always empty and this method has no effect - i.e. the policy is not set. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 8", "FullName": "public void setMaximumFailedPasswordsForWipe (ComponentName admin, int num)"}, "isUsingUnifiedPassword(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner of a managed profile."]], "SeeAlso": ["@B_android#os#UserManager_E@"], "Permissions": [], "Description": "When called by a profile owner of a managed profile returns true if the profile uses unified challenge with its parent user.", "history": "Added in API level 28", "FullName": "public boolean isUsingUnifiedPassword (ComponentName admin)"}, "isLogoutEnabled()": {"Returns": [["boolean", "true if logout is enabled by device owner, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether logout is enabled by a device owner.", "history": "Added in API level 28", "FullName": "public boolean isLogoutEnabled ()"}, "installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The @B_android#app#admin#DeviceAdminReceiver_E@ that this request is associated with. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: An Uri of the file that contains the update. The file should be readable by the calling app. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor through which the callback should be invoked. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#app#admin#DevicePolicyManager#InstallSystemUpdateCallback_E@", "DevicePolicyManager.InstallSystemUpdateCallback: A callback object that will inform the caller when installing an update fails. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to install a system update from the given file. The device will be rebooted in order to finish installing the update. Note that if the device is rebooted, this doesn't necessarily mean that the update has been applied successfully. The caller should additionally check the system version with @B_android#os#Build#FINGERPRINT_E@ or @B_android#os#Build#VERSION_E@. If an error occurs during processing the OTA before the reboot, the caller will be notified by @B_android#app#admin#DevicePolicyManager#InstallSystemUpdateCallback_E@. If device does not have sufficient battery level, the installation will fail with error @B_android#app#admin#DevicePolicyManager#InstallSystemUpdateCallback#UPDATE_ERROR_BATTERY_LOW_E@.", "history": "Added in API level 29", "FullName": "public void installSystemUpdate (ComponentName admin, Uri updateFilePath, Executor executor, DevicePolicyManager.InstallSystemUpdateCallback callback)"}, "isApplicationHidden(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "boolean true if the package is hidden, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a package access delegate. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package to retrieve the hidden status of."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Determine if a package is hidden. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PACKAGE_ACCESS_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 21", "FullName": "public boolean isApplicationHidden (ComponentName admin, String packageName)"}, "getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)": {"Returns": [["int", "the current grant state specified by device policy. If the profile or device owner has not set a grant state, the return value is @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@. This does not indicate whether or not the permission is currently granted for the package. If a grant state was set by the profile or device owner, then the return value will be one of @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DENIED_E@ or @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_GRANTED_E@, which indicates if the permission is currently denied or granted. Value is @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@, @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_GRANTED_E@, or @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DENIED_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with, or null if the caller is a permission grant delegate. This value may be null."], ["@B_java#lang#String_E@", "String: The application to check the grant state for. This value must never be null."], ["@B_java#lang#String_E@", "String: The permission to check for. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setPermissionGrantState_E@", "@B_android#content#pm#PackageManager#checkPermission_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Returns the current grant state of a runtime permission for a specific application. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PERMISSION_GRANT_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 23", "FullName": "public int getPermissionGrantState (ComponentName admin, String packageName, String permission)"}, "getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)": {"Returns": [["@B_java#util#Set_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@"], "Permissions": [], "Description": "Called by device or profile owner to query the set of packages that are allowed to access the network directly when always-on VPN is in lockdown mode but not connected. Returns null when always-on VPN is not active or not in lockdown mode.", "history": "Added in API level 29", "FullName": "public Set<String> getAlwaysOnVpnLockdownWhitelist (ComponentName admin)"}, "setPermittedInputMethods(android.content.ComponentName,java.util.List<java.lang.String>)": {"Returns": [["boolean", "true if the operation succeeded, or false if the list didn't contain every enabled non-system input method service."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#util#List_E@", "List: List of input method package names."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to set the permitted input methods services for this user. By default, the user can use any input method. When zero or more packages have been added, input method that are not in the list and not part of the system can not be enabled by the user. This method will fail if it is called for a admin that is not for the foreground user or a profile of the foreground user. Any non-system input method service that's currently enabled must be included in the list. Calling with a null value for the list disables the restriction so that all input methods can be used, calling with an empty list disables all but the system's own input methods. System input methods are always available to the user - this method can't modify this.", "history": "Added in API level 21", "FullName": "public boolean setPermittedInputMethods (ComponentName admin, List<String> packageNames)"}, "getAffiliationIds(android.content.ComponentName)": {"Returns": [["@B_java#util#Set_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of affiliation ids previously set via @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@, or an empty set if none have been set.", "history": "Added in API level 26", "FullName": "public Set<String> getAffiliationIds (ComponentName admin)"}, "getPasswordExpiration(android.content.ComponentName)": {"Returns": [["long", "The password expiration time, in milliseconds since epoch."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current password expiration time for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. If admin is null, then a composite of all expiration times is returned - which will be the minimum of all of them. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve the password expiration for the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password expiration is always disabled and this method always returns 0. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 11", "FullName": "public long getPasswordExpiration (ComponentName admin)"}, "setPasswordMinimumNumeric(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of numerical digits required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of numerical digits required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 1. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumNumeric (ComponentName admin, int length)"}, "addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#content#IntentFilter_E@", "IntentFilter: The @B_android#content#IntentFilter_E@ the intent has to match to be also resolved in the other profile"], ["int", "int: @B_android#app#admin#DevicePolicyManager#FLAG_MANAGED_CAN_ACCESS_PARENT_E@ and @B_android#app#admin#DevicePolicyManager#FLAG_PARENT_CAN_ACCESS_MANAGED_E@ are supported."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the profile owner of a managed profile so that some intents sent in the managed profile can also be resolved in the parent, or vice versa. Only activity intents are supported.", "history": "Added in API level 21", "FullName": "public void addCrossProfileIntentFilter (ComponentName admin, IntentFilter filter, int flags)"}, "setTimeZone(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "true if set timezone succeeded, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["@B_java#lang#String_E@", "String: one of the Olson ids from the list returned by @B_java#util#TimeZone#getAvailableIDs_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#AlarmManager#setTimeZone_E@"], "Permissions": [], "Description": "Called by device owner to set the system's persistent default time zone. This only takes effect if called when @B_android#provider#Settings#Global#AUTO_TIME_ZONE_E@ is 0, otherwise false will be returned.", "history": "Added in API level 28", "FullName": "public boolean setTimeZone (ComponentName admin, String timeZone)"}, "isProvisioningAllowed(java.lang.String)": {"Returns": [["boolean", "whether provisioning a managed profile or device is possible."]], "Parameters": [["@B_java#lang#String_E@", "String: One of @B_android#app#admin#DevicePolicyManager#ACTION_PROVISION_MANAGED_DEVICE_E@, @B_android#app#admin#DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE_E@. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the supplied action is not valid."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether it is possible for the caller to initiate provisioning of a managed profile or device, setting itself as the device or profile owner.", "history": "Added in API level 24", "FullName": "public boolean isProvisioningAllowed (String action)"}, "setProfileEnabled(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isProfileOwnerApp_E@"], "Permissions": [], "Description": "Sets the enabled state of the profile. A profile should be enabled only once it is ready to be used. Only the profile owner can call this.", "history": "Added in API level 21", "FullName": "public void setProfileEnabled (ComponentName admin)"}, "switchUser(android.content.ComponentName,android.os.UserHandle)": {"Returns": [["boolean", "true if the switch was successful, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the user to switch to; null will switch to primary. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#content#Intent_E@", "@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by a device owner to switch the specified secondary user to the foreground.", "history": "Added in API level 21", "FullName": "public boolean switchUser (ComponentName admin, UserHandle userHandle)"}, "setStatusBarDisabled(android.content.ComponentName,boolean)": {"Returns": [["boolean", "false if attempting to disable the status bar failed. true otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: true disables the status bar, false reenables it."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, or a profile owner of secondary user that is affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by device owner or profile owner of secondary users that is affiliated with the device to disable the status bar. Disabling the status bar blocks notifications, quick settings and other screen overlays that allow escaping from a single use device. @B_android#app#admin#DevicePolicyManager#setLockTaskFeatures_E@. Calls to this method when the device is in LockTask mode will be registered, but will only take effect when the device leaves LockTask mode. This policy does not have any effect while on the lock screen, where the status bar will not be disabled. Using LockTask instead of this method is recommended.", "history": "Added in API level 23", "FullName": "public boolean setStatusBarDisabled (ComponentName admin, boolean disabled)"}, "setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#content#ComponentName_E@", "ComponentName: Component name of the agent to be configured. This value must never be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: Trust-agent-specific feature configuration bundle. Please consult documentation of the specific trust agent to determine the interpretation of this bundle."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Sets a list of configuration features to enable for a trust agent component. This is meant to be used in conjunction with @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@, which disables all trust agents but those enabled by this function call. If flag @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@ is not set, then this call has no effect. For any specific trust agent, whether it is disabled or not depends on the aggregated state of each admin's @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@ setting and its trust agent configuration as set by this function call. In particular: if any admin sets @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@ and does not additionally set any trust agent configuration, the trust agent is disabled completely. Otherwise, the trust agent will receive the list of configurations from all admins who set @B_android#app#admin#DevicePolicyManager#KEYGUARD_DISABLE_TRUST_AGENTS_E@ and aggregate the configurations to determine its behavior. The exact meaning of aggregation is trust-agent-specific. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES_E@ to be able to call this method; if not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set the configuration for the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, calling this method has no effect - no trust agent configuration will be set. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 23", "FullName": "public void setTrustAgentConfiguration (ComponentName admin, ComponentName target, PersistableBundle configuration)"}, "getBindDeviceAdminTargetUsers(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of target users that the calling device or profile owner can use when calling @B_android#app#admin#DevicePolicyManager#bindDeviceAdminServiceAsUser_E@. A device owner can bind to a service from a profile owner and vice versa, provided that: Both belong to the same package name. Both users are affiliated. See @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@.", "history": "Added in API level 26", "FullName": "public List<UserHandle> getBindDeviceAdminTargetUsers (ComponentName admin)"}, "getAccountTypesWithManagementDisabled()": {"Returns": [["@B_java#lang#String_E@", "a list of account types for which account management has been disabled. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAccountManagementDisabled_E@"], "Permissions": [], "Description": "Gets the array of accounts for which account management is disabled by the profile owner. Account management can be disabled/enabled by calling @B_android#app#admin#DevicePolicyManager#setAccountManagementDisabled_E@.", "history": "Added in API level 21", "FullName": "public String[] getAccountTypesWithManagementDisabled ()"}, "setPasswordMinimumUpperCase(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of upper case letters required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of upper case letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 0. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumUpperCase (ComponentName admin, int length)"}, "getCameraDisabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to check whether any admins have disabled the camera This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine whether or not the device's cameras have been disabled for this user, either by the calling admin, if specified, or all admins.", "history": "Added in API level 14", "FullName": "public boolean getCameraDisabled (ComponentName admin)"}, "getPermittedAccessibilityServices(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "List of accessiblity service package names. This value may be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of permitted accessibility services set by this device or profile owner. An empty list means no accessibility services except system services are allowed. Null means all accessibility services are allowed.", "history": "Added in API level 21", "FullName": "public List<String> getPermittedAccessibilityServices (ComponentName admin)"}, "setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service that implements @B_android#service#restrictions#RestrictionsReceiver_E@. If this param is null, it removes the restrictions provider previously assigned. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Designates a specific service component as the provider for making permission requests of a local or remote administrator of the user. Only a profile owner can designate the restrictions provider.", "history": "Added in API level 21", "FullName": "public void setRestrictionsProvider (ComponentName admin, ComponentName provider)"}, "setSecurityLoggingEnabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner this request is associated with. This value must never be null."], ["boolean", "boolean: whether security logging should be enabled or not."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@", "@B_android#app#admin#DevicePolicyManager#retrieveSecurityLogs_E@"], "Permissions": [], "Description": "Called by device owner to control the security logging feature. Security logs contain various information intended for security auditing purposes. See @B_android#app#admin#SecurityLog#SecurityEvent_E@ for details. @B_android#app#admin#DevicePolicyManager#setAffiliationIds_E@.", "history": "Added in API level 24", "FullName": "public void setSecurityLoggingEnabled (ComponentName admin, boolean enabled)"}, "setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."], ["@B_java#lang#String_E@", "String: package name for an installed VPN app on the device, or null to remove an existing always-on VPN configuration This value may be null."], ["boolean", "boolean: true to disallow networking when the VPN is not connected or false otherwise. This has no effect when clearing."], ["@B_java#util#Set_E@", "Set: Packages that will be able to access the network directly when VPN is in lockdown mode but not connected. Has no effect when clearing. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."], ["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if vpnPackage or one of lockdownWhitelist is not installed."], ["@B_java#lang#UnsupportedOperationException_E@", "if vpnPackage exists but does not support being set as always-on, or if always-on VPN is not available."]], "SeeAlso": [], "Permissions": [], "Description": "A version of @B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@ that allows the admin to specify a set of apps that should be able to access the network directly when VPN is not connected. When VPN connects these apps switch over to VPN if allowed to use that VPN. System apps can always bypass VPN. Note that the system doesn't update the whitelist when packages are installed or uninstalled, the admin app must call this method to keep the list up to date. When lockdownEnabled is false lockdownWhitelist is ignored . When lockdownEnabled is true and lockdownWhitelist is null or empty, only system apps can bypass VPN. Setting always-on VPN package to null or using @B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@ clears lockdown whitelist.", "history": "Added in API level 29", "FullName": "public void setAlwaysOnVpnPackage (ComponentName admin, String vpnPackage, boolean lockdownEnabled, Set<String> lockdownWhitelist)"}, "getMeteredDataDisabledPackages(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "the list of restricted package names. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device or profile owner to retrieve the list of packages which are restricted by the admin from using metered data.", "history": "Added in API level 28", "FullName": "public List<String> getMeteredDataDisabledPackages (ComponentName admin)"}, "clearDeviceOwnerApp(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the device owner."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not in packageName or packageName does not own the current device owner component."]], "SeeAlso": [], "Permissions": [], "Description": "This method is expected to be used for testing purposes only. The device owner will lose control of the device and its data after calling it. In order to protect any sensitive data that remains on the device, it is advised that the device owner factory resets the device instead of calling this method. See @B_android#app#admin#DevicePolicyManager#wipeData_E@. Clears the current device owner. The caller must be the device owner. This function should be used cautiously as once it is called it cannot be undone. The device owner can only be set as a part of device setup, before it completes. While some policies previously set by the device owner will be cleared by this method, it is a best-effort process and some other policies will still remain in place after the device owner is cleared.", "history": "Added in API level 21 Deprecated in API level 26", "FullName": "public void clearDeviceOwnerApp (String packageName)"}, "setPasswordMinimumNonLetter(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of letters required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of non-letter characters (numerical digits or symbols) required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 0. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumNonLetter (ComponentName admin, int length)"}, "getDeviceOwnerLockScreenInfo()": {"Returns": [["@B_java#lang#CharSequence_E@", "The device owner information. If it is not set returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public CharSequence getDeviceOwnerLockScreenInfo ()"}, "lockNow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Make the device lock immediately, as if the lock screen timeout has expired at the point of this call. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to lock the parent profile. Equivalent to calling @B_android#app#admin#DevicePolicyManager#lockNow_E@ with no flags.", "history": "Added in API level 8", "FullName": "public void lockNow ()"}, "getLongSupportMessage(android.content.ComponentName)": {"Returns": [["@B_java#lang#CharSequence_E@", "The message set by @B_android#app#admin#DevicePolicyManager#setLongSupportMessage_E@ or null if no message has been set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device admin to get the long support message.", "history": "Added in API level 24", "FullName": "public CharSequence getLongSupportMessage (ComponentName admin)"}, "reboot(android.content.ComponentName)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner the request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if device has an ongoing call."], ["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Called by device owner to reboot the device. If there is an ongoing call on the device, throws an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 24", "FullName": "public void reboot (ComponentName admin)"}, "setTime(android.content.ComponentName, long)": {"Returns": [["boolean", "true if set time succeeded, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated withThis value must never be null."], ["long", "long: time in milliseconds since the Epoch"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to set the system wall clock time. This only takes effect if called when @B_android#provider#Settings#Global#AUTO_TIME_E@ is 0, otherwise false will be returned.", "history": "added in API level 28", "FullName": "public boolean setTime (ComponentName admin, long millis)"}, "setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List<java.lang.String>)": {"Returns": [["@B_java#util#List_E@", "a list of package names which could not be restricted. This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#util#List_E@", "List: the list of package names to be restricted. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device or profile owner to restrict packages from using metered data.", "history": "Added in API level 28", "FullName": "public List<String> setMeteredDataDisabledPackages (ComponentName admin, List<String> packageNames)"}, "getInstalledCaCerts(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "a List of byte[] arrays, each encoding one user CA certificate."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Returns all CA certificates that are currently trusted, excluding system CA certificates. If a user has installed any certificates by other means than device policy these will be included too.", "history": "Added in API level 21", "FullName": "public List<byte[]> getInstalledCaCerts (ComponentName admin)"}, "setKeyguardDisabled(android.content.ComponentName,boolean)": {"Returns": [["boolean", "false if attempting to disable the keyguard while a lock password was in place. true otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: true disables the keyguard, false reenables it."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, or a profile owner of secondary user that is affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager#getSecondaryUsers_E@"], "Permissions": [], "Description": "Called by a device owner or profile owner of secondary users that is affiliated with the device to disable the keyguard altogether. Setting the keyguard to disabled has the same effect as choosing \"None\" as the screen lock type. However, this call has no effect if a password, pin or pattern is currently set. If a password, pin or pattern is set after the keyguard was disabled, the keyguard stops being disabled. As of @B_android#os#Build#VERSION_CODES#P_E@, this call also dismisses the keyguard if it is currently shown.", "history": "Added in API level 23", "FullName": "public boolean setKeyguardDisabled (ComponentName admin, boolean disabled)"}, "clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the package for which preferences are removed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner or device owner to remove all persistent intent handler preferences associated with the given package that were set by @B_android#app#admin#DevicePolicyManager#addPersistentPreferredActivity_E@. The calling device admin must be a profile owner. If it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void clearPackagePersistentPreferredActivities (ComponentName admin, String packageName)"}, "getPermissionPolicy(android.content.ComponentName)": {"Returns": [["int", "the current policy for future permission requests."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current runtime permission policy set by the device or profile owner. The default is @B_android#app#admin#DevicePolicyManager#PERMISSION_POLICY_PROMPT_E@.", "history": "Added in API level 23", "FullName": "public int getPermissionPolicy (ComponentName admin)"}, "getAlwaysOnVpnPackage(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "Package name of VPN controller responsible for always-on VPN, or null if none is set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device or profile owner to read the name of the package administering an always-on VPN connection for the current user. If there is no such package, or the always-on VPN is provided by the system instead of by an application, null will be returned.", "history": "Added in API level 24", "FullName": "public String getAlwaysOnVpnPackage (ComponentName admin)"}, "setPasswordMinimumLowerCase(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of lower case letters required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of lower case letters required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 0. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumLowerCase (ComponentName admin, int length)"}, "getWifiMacAddress(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "the MAC address of the Wi-Fi device, or null when the information is not available. (For example, Wi-Fi hasn't been enabled, or the device doesn't support Wi-Fi.) The address will be in the XX:XX:XX:XX:XX:XX format."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to get the MAC address of the Wi-Fi device.", "history": "Added in API level 24", "FullName": "public String getWifiMacAddress (ComponentName admin)"}, "isOverrideApnEnabled(android.content.ComponentName)": {"Returns": [["boolean", "true if override APNs are currently enabled, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setOverrideApnsEnabled_E@"], "Permissions": [], "Description": "Called by device owner to check if override APNs are currently enabled.", "history": "Added in API level 28", "FullName": "public boolean isOverrideApnEnabled (ComponentName admin)"}, "getPasswordHistoryLength(android.content.ComponentName)": {"Returns": [["int", "The length of the password history"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current password history length for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password history length is always 0. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 11", "FullName": "public int getPasswordHistoryLength (ComponentName admin)"}, "setUserIcon(android.content.ComponentName,android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#graphics#Bitmap_E@", "Bitmap: the bitmap to set as the photo."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by profile or device owners to set the user's photo.", "history": "Added in API level 23", "FullName": "public void setUserIcon (ComponentName admin, Bitmap icon)"}, "setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_android#net#ProxyInfo_E@", "ProxyInfo: The a @B_android#net#ProxyInfo_E@ object defining the new global HTTP proxy. A null value will clear the global HTTP proxy. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner."]], "SeeAlso": ["@B_android#net#ProxyInfo_E@"], "Permissions": [], "Description": "Set a network-independent global HTTP proxy. This is not normally what you want for typical HTTP proxies - they are generally network dependent. However if you're doing something unusual like general internal filtering this may be useful. On a private network where the proxy is not accessible, you may break HTTP using this. This method requires the caller to be the device owner. This proxy is only a recommendation and it is possible that some apps will ignore it.", "history": "Added in API level 21", "FullName": "public void setRecommendedGlobalProxy (ComponentName admin, ProxyInfo proxyInfo)"}, "setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: Short message to be displayed to the user in settings or null to clear the existing message. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setLongSupportMessage_E@"], "Permissions": [], "Description": "Called by a device admin to set the short support message. This will be displayed to the user in settings screens where funtionality has been disabled by the admin. The message should be limited to a short statement such as \"This setting is disabled by your administrator. Contact someone@example.com for support.\" If the message is longer than 200 characters it may be truncated. If the short support message needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this string accordingly.", "history": "Added in API level 24", "FullName": "public void setShortSupportMessage (ComponentName admin, CharSequence message)"}, "setResetPasswordToken(android.content.ComponentName,byte[])": {"Returns": [["boolean", "true if the operation is successful, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with."], ["byte[]", "byte: a secure token a least 32-byte long, which must be generated by a cryptographically strong random number generator."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."], ["@B_java#lang#IllegalArgumentException_E@", "if the supplied token is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to provision a token which can later be used to reset the device lockscreen password (if called by device owner), or managed profile challenge (if called by profile owner), via @B_android#app#admin#DevicePolicyManager#resetPasswordWithToken_E@. If the user currently has a lockscreen password, the provisioned token will not be immediately usable; it only becomes active after the user performs a confirm credential operation, which can be triggered by @B_android#app#KeyguardManager#createConfirmDeviceCredentialIntent_E@. If the user has no lockscreen password, the token is activated immediately. In all cases, the active state of the current token can be checked by @B_android#app#admin#DevicePolicyManager#isResetPasswordTokenActive_E@. For security reasons, un-activated tokens are only stored in memory and will be lost once the device reboots. In this case a new token needs to be provisioned again. Once provisioned and activated, the token will remain effective even if the user changes or clears the lockscreen password. This token is highly sensitive and should be treated at the same level as user credentials. In particular, NEVER store this token on device in plaintext. Do not store the plaintext token in device-encrypted storage if it will be needed to reset password on file-based encryption devices before user unlocks. Consider carefully how any password token will be stored on your server and who will need access to them. Tokens may be the subject of legal access requests. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the reset token is not set and this method returns false. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 26", "FullName": "public boolean setResetPasswordToken (ComponentName admin, byte[] token)"}, "installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate,java.lang.String)": {"Returns": [["boolean", "true if the keys were installed, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["@B_java#security#PrivateKey_E@", "PrivateKey: The private key to install. This value must never be null."], ["@B_java#security#cert#Certificate_E@", "Certificate: The certificate to install. This value must never be null."], ["@B_java#lang#String_E@", "String: The private key alias under which to install the certificate. If a certificate with that alias already exists, it will be overwritten. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Called by a device or profile owner, or delegated certificate installer, to install a certificate and corresponding private key. All apps within the profile will be able to access the certificate and use the private key, given direct user approval. Access to the installed credentials will not be granted to the caller of this API without direct user approval. This is for security - should a certificate installer become compromised, certificates it had already installed will be protected. If the installer must have access to the credentials, call @B_android#app#admin#DevicePolicyManager#installKeyPair_E@ instead. Note: If the provided alias is of an existing alias, all former grants that apps have been given to access the key and certificates associated with this alias will be revoked.", "history": "Added in API level 21", "FullName": "public boolean installKeyPair (ComponentName admin, PrivateKey privKey, Certificate cert, String alias)"}, "setLockTaskPackages(android.content.ComponentName,java.lang.String[])": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of packages allowed to enter lock task mode This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not the device owner, the profile owner of an affiliated user or profile, or the profile owner when no device owner is set."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#Activity#startLockTask_E@", "@B_android#app#admin#DeviceAdminReceiver#onLockTaskModeEntering_E@", "@B_android#app#admin#DeviceAdminReceiver#onLockTaskModeExiting_E@", "@B_android#os#UserManager_E@"], "Permissions": [], "Description": "Sets which packages may enter lock task mode. Any packages that share uid with an allowed package will also be allowed to activate lock task. From @B_android#os#Build#VERSION_CODES#M_E@ removing packages from the lock task package list results in locked tasks belonging to those packages to be finished. This function can only be called by the device owner, a profile owner of an affiliated user or profile, or the profile owner when no device owner is set. See @B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@. Any package set via this method will be cleared if the user becomes unaffiliated.", "history": "Added in API level 21", "FullName": "public void setLockTaskPackages (ComponentName admin, String[] packages)"}, "setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The name of the setting to update. This value must never be null. Value is @B_android#provider#Settings#System#SCREEN_BRIGHTNESS_MODE_E@, @B_android#provider#Settings#System#SCREEN_BRIGHTNESS_E@, or @B_android#provider#Settings#System#SCREEN_OFF_TIMEOUT_E@"], ["@B_java#lang#String_E@", "String: The value to update the setting to."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#provider#Settings#System_E@"], "Permissions": [], "Description": "Called by a device or profile owner to update @B_android#provider#Settings#System_E@ settings. Validation that the value of the setting is in the correct form for the setting type should be performed by the caller. The settings that can be updated by a device owner or profile owner of secondary user with this method are: @B_android#provider#Settings#System#SCREEN_BRIGHTNESS_E@ @B_android#provider#Settings#System#SCREEN_BRIGHTNESS_MODE_E@ @B_android#provider#Settings#System#SCREEN_OFF_TIMEOUT_E@", "history": "Added in API level 28", "FullName": "public void setSystemSetting (ComponentName admin, String setting, String value)"}, "setScreenCaptureDisabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: Whether screen capture is disabled or not."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device/profile owner to set whether the screen capture is disabled. Disabling screen capture also prevents the content from being shown on display devices that do not have a secure video output. See @B_android#view#Display#FLAG_SECURE_E@ for more details about secure surfaces and secure displays. The calling device admin must be a device or profile owner. If it is not, a security exception will be thrown. From version @B_android#os#Build#VERSION_CODES#M_E@ disabling screen capture also blocks assist requests for all activities of the relevant user.", "history": "Added in API level 21", "FullName": "public void setScreenCaptureDisabled (ComponentName admin, boolean disabled)"}, "getUserRestrictions(android.content.ComponentName)": {"Returns": [["@B_android#os#Bundle_E@", "This value will never be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile or device owner to get user restrictions set with @B_android#app#admin#DevicePolicyManager#addUserRestriction_E@. The target user may have more restrictions set by the system or other device owner / profile owner. To get all the user restrictions currently set, use @B_android#os#UserManager#getUserRestrictions_E@.", "history": "Added in API level 24", "FullName": "public Bundle getUserRestrictions (ComponentName admin)"}, "isDeviceIdAttestationSupported()": {"Returns": [["boolean", "true if Device ID attestation is supported."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the device supports attestation of device identifiers in addition to key attestation.", "history": "Added in API level 28", "FullName": "public boolean isDeviceIdAttestationSupported ()"}, "setOrganizationColor(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The 24bit (0xRRGGBB) representation of the color to be used."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to set the color used for customization. This color is used as background color of the confirm credentials screen for that user. The default color is teal (#00796B). The confirm credentials screen can be created using @B_android#app#KeyguardManager#createConfirmDeviceCredentialIntent_E@.", "history": "Added in API level 24", "FullName": "public void setOrganizationColor (ComponentName admin, int color)"}, "isEphemeralUser(android.content.ComponentName)": {"Returns": [["boolean", "whether the profile owner is running in an ephemeral user."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the profile owner is running in an ephemeral user.", "history": "Added in API level 28", "FullName": "public boolean isEphemeralUser (ComponentName admin)"}, "isSecurityLoggingEnabled(android.content.ComponentName)": {"Returns": [["boolean", "true if security logging is enabled by device owner, false otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner this request is associated with. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Return whether security logging is enabled or not by the device owner. Can only be called by the device owner, otherwise a @B_java#lang#SecurityException_E@ will be thrown.", "history": "Added in API level 24", "FullName": "public boolean isSecurityLoggingEnabled (ComponentName admin)"}, "setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: Long message to be displayed to the user in settings or null to clear the existing message. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setShortSupportMessage_E@"], "Permissions": [], "Description": "Called by a device admin to set the long support message. This will be displayed to the user in the device administators settings screen. If the long support message needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this string accordingly.", "history": "Added in API level 24", "FullName": "public void setLongSupportMessage (ComponentName admin, CharSequence message)"}, "getPasswordMinimumUpperCase(android.content.ComponentName)": {"Returns": [["int", "The minimum number of upper case letters required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of upper case letters required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumUpperCase_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumUpperCase (ComponentName admin)"}, "transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ we want the new administrator to be This value must never be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: data to be sent to the new administrator This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner nor a profile owner"], ["@B_java#lang#IllegalArgumentException_E@", "if admin or target is null, they are components in the same package or target is not an active admin"]], "SeeAlso": [], "Permissions": [], "Description": "Changes the current administrator to another one. All policies from the current administrator are migrated to the new administrator. The whole operation is atomic - the transfer is either complete or not done at all. Depending on the current administrator (device owner, profile owner), you have the following expected behaviour: A device owner can only be transferred to a new device owner A profile owner can only be transferred to a new profile owner Use the bundle parameter to pass data to the new administrator. The data will be received in the @B_android#app#admin#DeviceAdminReceiver#onTransferOwnershipComplete_E@ callback of the new administrator. The transfer has failed if the original administrator is still the corresponding owner after calling this method. The incoming target administrator must have the <support-transfer-ownership /> tag inside the <device-admin></device-admin> tags in the xml file referenced by @B_android#app#admin#DeviceAdminReceiver#DEVICE_ADMIN_META_DATA_E@. Otherwise an @B_java#lang#IllegalArgumentException_E@ will be thrown.", "history": "Added in API level 28", "FullName": "public void transferOwnership (ComponentName admin, ComponentName target, PersistableBundle bundle)"}, "isLockTaskPermitted(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The package to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function lets the caller know whether the given component is allowed to start the lock task mode.", "history": "Added in API level 21", "FullName": "public boolean isLockTaskPermitted (String pkg)"}, "setOverrideApnsEnabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["boolean", "boolean: true if override APNs should be enabled, false otherwise"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by device owner to set if override APNs should be enabled. Override APNs are separated from other APNs on the device, and can only be inserted or modified by the device owner. When enabled, only override APNs are in use, any other APNs are ignored.", "history": "Added in API level 28", "FullName": "public void setOverrideApnsEnabled (ComponentName admin, boolean enabled)"}, "addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)": {"Returns": [["int", "The id of inserted override APN. Or -1 when failed to insert into the database."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."], ["@B_android#telephony#data#ApnSetting_E@", "ApnSetting: the override APN to insert This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setOverrideApnsEnabled_E@"], "Permissions": [], "Description": "Called by device owner to add an override APN. This method may returns -1 if apnSetting conflicts with an existing override APN. Update the existing conflicted APN with @B_android#app#admin#DevicePolicyManager#updateOverrideApn_E@ instead of adding a new entry. Two override APNs are considered to conflict when all the following APIs return the same values on both override APNs: @B_android#telephony#data#ApnSetting#getOperatorNumeric_E@ @B_android#telephony#data#ApnSetting#getApnName_E@ @B_android#telephony#data#ApnSetting#getProxyAddressAsString_E@ @B_android#telephony#data#ApnSetting#getProxyPort_E@ @B_android#telephony#data#ApnSetting#getMmsProxyAddressAsString_E@ @B_android#telephony#data#ApnSetting#getMmsProxyPort_E@ @B_android#telephony#data#ApnSetting#getMmsc_E@ @B_android#telephony#data#ApnSetting#isEnabled_E@ @B_android#telephony#data#ApnSetting#getMvnoType_E@ @B_android#telephony#data#ApnSetting#getProtocol_E@ @B_android#telephony#data#ApnSetting#getRoamingProtocol_E@", "history": "Added in API level 28", "FullName": "public int addOverrideApn (ComponentName admin, ApnSetting apnSetting)"}, "getCrossProfileCalendarPackages(android.content.ComponentName)": {"Returns": [["@B_java#util#Set_E@", "the set of names of packages that were previously allowed via @B_android#app#admin#DevicePolicyManager#setCrossProfileCalendarPackages_E@, or an empty set if none have been allowed This value may be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner"]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setCrossProfileCalendarPackages_E@"], "Permissions": [], "Description": "Gets a set of package names that are allowed to access cross-profile calendar APIs. Called by a profile owner of a managed profile.", "history": "Added in API level 29", "FullName": "public Set<String> getCrossProfileCalendarPackages (ComponentName admin)"}, "setStorageEncryption(android.content.ComponentName,boolean)": {"Returns": [["int", "the new total request status (for all active admins), or @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_UNSUPPORTED_E@ if called for a non-system user. Will be one of @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_UNSUPPORTED_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_INACTIVE_E@, or @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_E@. This is the value of the requests; use @B_android#app#admin#DevicePolicyManager#getStorageEncryptionStatus_E@ to query the actual device state."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: true to request encryption, false to release any previous request"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or does not use @B_android#app#admin#DeviceAdminInfo#USES_ENCRYPTED_STORAGE_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to request that the storage system be encrypted. Does nothing if the caller is on a secondary user or a managed profile. When multiple device administrators attempt to control device encryption, the most secure, supported setting will always be used. If any device administrator requests device encryption, it will be enabled; Conversely, if a device administrator attempts to disable device encryption while another device administrator has enabled it, the call to disable will fail (most commonly returning @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_E@). This policy controls encryption of the secure (application data) storage area. Data written to other storage areas may or may not be encrypted, and this policy does not require or control the encryption of any other storage areas. There is one exception: If @B_android#os#Environment#isExternalStorageEmulated_E@ is true, then the directory returned by @B_android#os#Environment#getExternalStorageDirectory_E@ must be written to disk within the encrypted storage area. Important Note: On some devices, it is possible to encrypt storage without requiring the user to create a device PIN or Password. In this case, the storage is encrypted, but the encryption key may not be fully secured. For maximum security, the administrator should also require (and check for) a pattern, PIN, or password.", "history": "Added in API level 11", "FullName": "public int setStorageEncryption (ComponentName admin, boolean encrypt)"}, "setPermissionPolicy(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with. This value must never be null."], ["int", "int: One of the policy constants @B_android#app#admin#DevicePolicyManager#PERMISSION_POLICY_PROMPT_E@, @B_android#app#admin#DevicePolicyManager#PERMISSION_POLICY_AUTO_GRANT_E@ and @B_android#app#admin#DevicePolicyManager#PERMISSION_POLICY_AUTO_DENY_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setPermissionGrantState_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Set the default response for future runtime permission requests by applications. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PERMISSION_GRANT_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. The policy can allow for normal operation which prompts the user to grant a permission, or can allow automatic granting or denying of runtime permission requests by an application. This also applies to new permissions declared by app updates. When a permission is denied or granted this way, the effect is equivalent to setting the permission * grant state via @B_android#app#admin#DevicePolicyManager#setPermissionGrantState_E@. As this policy only acts on runtime permission requests, it only applies to applications built with a targetSdkVersion of @B_android#os#Build#VERSION_CODES#M_E@ or later.", "history": "Added in API level 23", "FullName": "public void setPermissionPolicy (ComponentName admin, int policy)"}, "setMaximumTimeToLock(android.content.ComponentName,long)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["long", "long: The new desired maximum time to lock in milliseconds. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or it does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the maximum time for user activity until the device will lock. This limits the length that the user can set. It takes effect immediately. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_FORCE_LOCK_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 8", "FullName": "public void setMaximumTimeToLock (ComponentName admin, long timeMs)"}, "installCaCert(android.content.ComponentName,byte[])": {"Returns": [["boolean", "false if the certBuffer cannot be parsed or installation is interrupted, true otherwise."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["byte[]", "byte: encoded form of the certificate to install."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Installs the given certificate as a user CA. Inserted user CAs aren't automatically trusted by apps in Android 7.0 (API level 24) and higher. App developers can change the default behavior for an app by adding a @B_android#app#admin#DevicePolicyManager#DELEGATION_CERT_INSTALL_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@; otherwise a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public boolean installCaCert (ComponentName admin, byte[] certBuffer)"}, "setAutoTimeRequired(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: Whether auto time is set required or not."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner, or alternatively a profile owner from Android 8.0 (API level 26) or higher, to set whether auto time is required. If auto time is required, no user will be able set the date and time and network date and time will be used. Note: if auto time is required the user can still manually set the time zone. The calling device admin must be a device owner, or alternatively a profile owner from Android 8.0 (API level 26) or higher. If it is not, a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void setAutoTimeRequired (ComponentName admin, boolean required)"}, "setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if called by the application restrictions managing package. This value may be null."], ["@B_java#lang#String_E@", "String: The name of the package to update restricted settings for."], ["@B_android#os#Bundle_E@", "Bundle: A @B_android#os#Bundle_E@ to be parsed by the receiving application, conveying a new set of active restrictions."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@", "@B_android#os#UserManager_E@"], "Permissions": [], "Description": "Sets the application restrictions for a given target application running in the calling user. The caller must be a profile or device owner on that user, or the package allowed to manage application restrictions via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@ with the @B_android#app#admin#DevicePolicyManager#DELEGATION_APP_RESTRICTIONS_E@ scope; otherwise a security exception will be thrown. The provided @B_android#os#Bundle_E@ consists of key-value pairs, where the types of values may be: boolean int String or String[] From @B_android#os#Build#VERSION_CODES#M_E@, Bundle or Bundle[] If the restrictions are not available yet, but may be applied in the near future, the caller can notify the target application of that by adding @B_android#os#UserManager#KEY_RESTRICTIONS_PENDING_E@ to the settings parameter. The application restrictions are only made visible to the target application via @B_android#os#UserManager#getApplicationRestrictions_E@, in addition to the profile or device owner, and the application restrictions managing package via @B_android#app#admin#DevicePolicyManager#getApplicationRestrictions_E@. NOTE: The method performs disk I/O and shouldn't be called on the main thread This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 21", "FullName": "public void setApplicationRestrictions (ComponentName admin, String packageName, Bundle settings)"}, "getOrganizationName(android.content.ComponentName)": {"Returns": [["@B_java#lang#CharSequence_E@", "The organization name or null if none is set."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to retrieve the name of the organization under management.", "history": "Added in API level 24", "FullName": "public CharSequence getOrganizationName (ComponentName admin)"}, "setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)": {"Returns": [["int", "PRIVATE_DNS_SET_NO_ERROR if the mode was set successfully, or PRIVATE_DNS_SET_ERROR_FAILURE_SETTING if it could not be set. Value is @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_NO_ERROR_E@, @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING_E@, or @B_android#app#admin#DevicePolicyManager#PRIVATE_DNS_SET_ERROR_FAILURE_SETTING_E@"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not the device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the global Private DNS mode to opportunistic. May only be called by the device owner. In this mode, the DNS subsystem will attempt a TLS handshake to the network-supplied resolver prior to attempting name resolution in cleartext.", "history": "Added in API level 29", "FullName": "public int setGlobalPrivateDnsModeOpportunistic (ComponentName admin)"}, "setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: If true, bluetooth devices cannot access enterprise contacts."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner of a managed profile to set whether bluetooth devices can access enterprise contacts. The calling device admin must be a profile owner. If it is not, a security exception will be thrown. This API works on managed profile only.", "history": "Added in API level 23", "FullName": "public void setBluetoothContactSharingDisabled (ComponentName admin, boolean disabled)"}, "setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List<java.lang.String>)": {"Returns": [["boolean", "true if setting the restriction succeeded. It will fail if called outside a managed profile"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#util#List_E@", "List: List of package names to whitelist This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a profile owner."]], "SeeAlso": ["@B_android#service#notification#NotificationListenerService_E@"], "Permissions": [], "Description": "Called by a profile owner of a managed profile to set the packages that are allowed to use a @B_android#service#notification#NotificationListenerService_E@ in the primary user to see notifications from the managed profile. By default all packages are permitted by this policy. When zero or more packages have been added, notification listeners installed on the primary user that are not in the list and are not part of the system won't receive events for managed profile notifications. Calling with a null value for the list disables the restriction so that all notification listener services be used. Calling with an empty list disables all but the system's own notification listeners. System notification listener services are always available to the user. If a device or profile owner want to stop notification listeners in their user from seeing that user's notifications they should prevent that service from running instead (e.g. via @B_android#app#admin#DevicePolicyManager#setApplicationHidden_E@)", "history": "Added in API level 26", "FullName": "public boolean setPermittedCrossProfileNotificationListeners (ComponentName admin, List<String> packageList)"}, "wipeData(int,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: Bit mask of additional options: currently supported flags are @B_android#app#admin#DevicePolicyManager#WIPE_EXTERNAL_STORAGE_E@, @B_android#app#admin#DevicePolicyManager#WIPE_RESET_PROTECTION_DATA_E@ and @B_android#app#admin#DevicePolicyManager#WIPE_EUICC_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: a string that contains the reason for wiping data, which can be presented to the user. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the calling application does not own an active administrator that uses @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@"], ["@B_java#lang#IllegalArgumentException_E@", "if the input reason string is null or empty, or if @B_android#app#admin#DevicePolicyManager#WIPE_SILENTLY_E@ is set."]], "SeeAlso": [], "Permissions": [], "Description": "Ask that all user data be wiped. If called as a secondary user, the user will be removed and other users will remain unaffected, the provided reason for wiping data can be shown to user. Calling from the primary user will cause the device to reboot, erasing all device data - including all the secondary users and their data - while booting up. In this case, we don't show the reason to the user since the device would be factory reset. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_WIPE_DATA_E@ to be able to call this method; if it has not, a security exception will be thrown.", "history": "Added in API level 28", "FullName": "public void wipeData (int flags, CharSequence reason)"}, "setKeepUninstalledPackages(android.content.ComponentName,java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a keep uninstalled packages delegate. This value may be null."], ["@B_java#util#List_E@", "List: List of package names to keep cached. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Set a list of apps to keep around as APKs even if no user has currently installed it. This function can be called by a device owner or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_KEEP_UNINSTALLED_PACKAGES_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. Please note that setting this policy does not imply that specified apps will be automatically pre-cached.", "history": "Added in API level 28", "FullName": "public void setKeepUninstalledPackages (ComponentName admin, List<String> packageNames)"}, "setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: This value must never be null."], ["@B_java#lang#String_E@", "String: The package name for an installed VPN app on the device, or null to remove an existing always-on VPN configuration. This value may be null."], ["boolean", "boolean: true to disallow networking when the VPN is not connected or false otherwise. This has no effect when clearing."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."], ["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if vpnPackage is not installed."], ["@B_java#lang#UnsupportedOperationException_E@", "if vpnPackage exists but does not support being set as always-on, or if always-on VPN is not available."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@"], "Permissions": ["@B_android#Manifest#permission#BIND_VPN_SERVICE_E@"], "Description": "Called by a device or profile owner to configure an always-on VPN connection through a specific application for the current user. This connection is automatically granted and persisted after a reboot. To support the always-on feature, an app must declare a @B_android#net#VpnService_E@ in its manifest, guarded by @B_android#Manifest#permission#BIND_VPN_SERVICE_E@; target @B_android#os#Build#VERSION_CODES#N_E@ or above; and @B_android#net#VpnService#SERVICE_META_DATA_SUPPORTS_ALWAYS_ON_E@. The call will fail if called with the package name of an unsupported VPN app. Enabling lockdown via lockdownEnabled argument carries the risk that any failure of the VPN provider could break networking for all apps. This method clears any lockdown whitelist set by @B_android#app#admin#DevicePolicyManager#setAlwaysOnVpnPackage_E@.", "history": "Added in API level 24", "FullName": "public void setAlwaysOnVpnPackage (ComponentName admin, String vpnPackage, boolean lockdownEnabled)"}, "getPasswordMinimumNonLetter(android.content.ComponentName)": {"Returns": [["int", "The minimum number of letters required in the password."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current number of non-letter characters required in the password for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This is the same value as set by @B_android#app#admin#DevicePolicyManager#setPasswordMinimumNonLetter_E@ and only applies when the password quality is @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public int getPasswordMinimumNonLetter (ComponentName admin)"}, "getStorageEncryptionStatus()": {"Returns": [["int", "current status of encryption. The value will be one of @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_UNSUPPORTED_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_INACTIVE_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVATING_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_E@, or @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_PER_USER_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to determine the current encryption status of the device. Depending on the returned status code, the caller may proceed in different ways. If the result is @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_UNSUPPORTED_E@, the storage system does not support encryption. If the result is @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_INACTIVE_E@, use @B_android#app#admin#DevicePolicyManager#ACTION_START_ENCRYPTION_E@ to begin the process of encrypting or decrypting the storage. If the result is @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY_E@, the storage system has enabled encryption but no password is set so further action may be required. If the result is @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVATING_E@, @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_E@ or @B_android#app#admin#DevicePolicyManager#ENCRYPTION_STATUS_ACTIVE_PER_USER_E@, no further action is required.", "history": "Added in API level 11", "FullName": "public int getStorageEncryptionStatus ()"}, "setPasswordMinimumSymbols(android.content.ComponentName,int)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["int", "int: The new desired minimum number of symbols required in the password. A value of 0 means there is no restriction."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not an active administrator or admin does not use @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application that is administering the device to set the minimum number of symbols required in the password. After setting this, the user will not be able to enter a new password that is not at least as restrictive as what has been set. Note that the current password will remain until the user has set a new one, so the change does not take place immediately. To prompt the user for a new password, use @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PASSWORD_E@ or @B_android#app#admin#DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD_E@ after setting this value. This constraint is only imposed if the administrator has also requested @B_android#app#admin#DevicePolicyManager#PASSWORD_QUALITY_COMPLEX_E@ with @B_android#app#admin#DevicePolicyManager#setPasswordQuality_E@. The default value is 1. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. The calling device admin must have requested @B_android#app#admin#DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD_E@ to be able to call this method; if it has not, a security exception will be thrown. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to set restrictions on the parent profile.", "history": "Added in API level 11", "FullName": "public void setPasswordMinimumSymbols (ComponentName admin, int length)"}, "getDelegatePackages(android.content.ComponentName,java.lang.String)": {"Returns": [["@B_java#util#List_E@", "A list of package names of the current delegated packages for delegationScope. This value may be null."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The scope whose delegates should be retrieved. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a profile owner or device owner to retrieve a list of delegate packages that were granted a delegation scope.", "history": "Added in API level 26", "FullName": "public List<String> getDelegatePackages (ComponentName admin, String delegationScope)"}, "retrievePreRebootSecurityLogs(android.content.ComponentName)": {"Returns": [["@B_java#util#List_E@", "Device logs from before the latest reboot of the system, or null if this API is not supported on the device."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which device owner this request is associated with. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner, or there is at least one profile or secondary user that is not affiliated with the device."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@", "@B_android#app#admin#DevicePolicyManager#retrieveSecurityLogs_E@"], "Permissions": [], "Description": "Called by device owners to retrieve device logs from before the device's last reboot. If there is any other user or profile on the device, it must be affiliated with the device. Otherwise a @B_java#lang#SecurityException_E@ will be thrown. See @B_android#app#admin#DevicePolicyManager#isAffiliatedUser_E@.", "history": "Added in API level 24", "FullName": "public List<SecurityLog.SecurityEvent> retrievePreRebootSecurityLogs (ComponentName admin)"}, "getScreenCaptureDisabled(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to check whether any admins have disabled screen capture. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine whether or not screen capture has been disabled by the calling admin, if specified, or all admins.", "history": "Added in API level 21", "FullName": "public boolean getScreenCaptureDisabled (ComponentName admin)"}, "setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence: message for ending user session, or null to use system default message. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner."]], "SeeAlso": [], "Permissions": [], "Description": "Called by a device owner to specify the user session end message. This may be displayed during a user switch. The message should be limited to a short statement or it may be truncated. If the message needs to be localized, it is the responsibility of the @B_android#app#admin#DeviceAdminReceiver_E@ to listen to the @B_android#content#Intent#ACTION_LOCALE_CHANGED_E@ broadcast and set a new version of this message accordingly.", "history": "Added in API level 28", "FullName": "public void setEndUserSessionMessage (ComponentName admin, CharSequence endUserSessionMessage)"}, "setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if the caller is a block uninstall delegate. This value may be null."], ["@B_java#lang#String_E@", "String: package to change."], ["boolean", "boolean: true if the user shouldn't be able to uninstall the package."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Change whether a user can uninstall a package. This function can be called by a device owner, profile owner, or by a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_BLOCK_UNINSTALL_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@.", "history": "Added in API level 21", "FullName": "public void setUninstallBlocked (ComponentName admin, String packageName, boolean uninstallBlocked)"}, "uninstallCaCert(android.content.ComponentName,byte[])": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with, or null if calling from a delegated certificate installer. This value may be null."], ["byte[]", "byte: encoded form of the certificate to remove."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not null and not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@", "@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Uninstalls the given certificate from trusted user CAs, if present. The caller must be a profile or device owner on that user, or a delegate package given the @B_android#app#admin#DevicePolicyManager#DELEGATION_CERT_INSTALL_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@; otherwise a security exception will be thrown.", "history": "Added in API level 21", "FullName": "public void uninstallCaCert (ComponentName admin, byte[] certBuffer)"}, "getPasswordQuality(android.content.ComponentName)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current minimum password quality for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile. Note: on devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty.", "history": "Added in API level 8", "FullName": "public int getPasswordQuality (ComponentName admin)"}, "setBackupServiceEnabled(android.content.ComponentName,boolean)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which @B_android#app#admin#DeviceAdminReceiver_E@ this request is associated with. This value must never be null."], ["boolean", "boolean: true to enable the backup service, false to disable it."]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device owner or a profile owner."]], "SeeAlso": [], "Permissions": [], "Description": "Allows the device owner or profile owner to enable or disable the backup service. Each user has its own backup service which manages the backup and restore mechanisms in that user. Disabling the backup service will prevent data from being backed up or restored. Device owner calls this API to control backup services across all users on the device. Profile owner can use this API to enable or disable the profile's backup service. However, for a managed profile its backup functionality is only enabled if both the device owner and the profile owner have enabled the backup service. By default, backup service is disabled on a device with device owner, and within a managed profile.", "history": "Added in API level 26", "FullName": "public void setBackupServiceEnabled (ComponentName admin, boolean enabled)"}, "getPasswordMinimumLength(android.content.ComponentName)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The name of the admin component to check, or null to aggregate all admins. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current minimum password length for a particular admin or all admins that set restrictions on this user and its participating profiles. Restrictions on profiles that have a separate challenge are not taken into account. On devices not supporting @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature, the password is always treated as empty. This method can be called on the @B_android#app#admin#DevicePolicyManager_E@ instance returned by @B_android#app#admin#DevicePolicyManager#getParentProfileInstance_E@ in order to retrieve restrictions on the parent profile.", "history": "Added in API level 8", "FullName": "public int getPasswordMinimumLength (ComponentName admin)"}, "setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)": {"Returns": [["boolean", "whether the permission was successfully granted or revoked."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Which profile or device owner this request is associated with. This value must never be null."], ["@B_java#lang#String_E@", "String: The application to grant or revoke a permission to. This value must never be null."], ["@B_java#lang#String_E@", "String: The permission to grant or revoke. This value must never be null."], ["int", "int: The permission grant state which is one of @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DENIED_E@, @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@, @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_GRANTED_E@, Value is @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@, @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_GRANTED_E@, or @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DENIED_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if admin is not a device or profile owner."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager_E@", "@B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@"], "Permissions": [], "Description": "Sets the grant state of a runtime permission for a specific application. The state can be @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@ in which a user can manage it through the UI, @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DENIED_E@, in which the permission is denied and the user cannot manage it through the UI, and @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_GRANTED_E@ in which the permission is granted and the user cannot manage it through the UI. This method can only be called by a profile owner, device owner, or a delegate given the @B_android#app#admin#DevicePolicyManager#DELEGATION_PERMISSION_GRANT_E@ scope via @B_android#app#admin#DevicePolicyManager#setDelegatedScopes_E@. Note that user cannot manage other permissions in the affected group through the UI either and their granted state will be kept as the current value. Thus, it's recommended that you set the grant state of all the permissions in the affected group. Setting the grant state to @B_android#app#admin#DevicePolicyManager#PERMISSION_GRANT_STATE_DEFAULT_E@ does not revoke the permission. It retains the previous grant, if any. Device admins with a targetSdkVersion < @B_android#os#Build#VERSION_CODES#Q_E@ cannot grant and revoke permissions for applications built with a targetSdkVersion < @B_android#os#Build#VERSION_CODES#M_E@. Admins with a targetSdkVersion \u2265 @B_android#os#Build#VERSION_CODES#Q_E@ can grant and revoke permissions of all apps. Similar to the user revoking a permission from a application built with a targetSdkVersion < @B_android#os#Build#VERSION_CODES#M_E@ the app-op matching the permission is set to @B_android#app#AppOpsManager#MODE_IGNORED_E@, but the permission stays granted.", "history": "Added in API level 23", "FullName": "public boolean setPermissionGrantState (ComponentName admin, String packageName, String permission, int grantState)"}}, "Inheritance": [], "ClassName": "android.app.admin.DevicePolicyManager", "ClassDesc": "Public interface for managing policies enforced on a device. Most clients of this class must be registered with the system as a @B_java#lang#SecurityException_E@ will be thrown. Requires the @B_android#content#pm#PackageManager#FEATURE_DEVICE_ADMIN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}