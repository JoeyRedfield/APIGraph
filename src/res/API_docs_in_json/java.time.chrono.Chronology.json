{"Functions": {"range(java.time.temporal.ChronoField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#ChronoField_E@", "ChronoField: the field to get the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field. This method will return a result whether or not the chronology supports the field.", "history": "Added in API level 26", "FullName": "public abstract ValueRange range (ChronoField field)"}, "zonedDateTime(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a ChronoZonedDateTime in this chronology from an Instant. This obtains a zoned date-time with the same instant as that specified.", "history": "added in API level 26", "FullName": "public ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime (Instant instant, ZoneId zone)"}, "of(java.lang.String)": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology with the identifier requested, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the chronology ID or calendar system type, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the chronology cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Chronology from a chronology ID or calendar system type. This returns a chronology based on either the ID or the type. The @B_java#time#chrono#Chronology#getId_E@ uniquely identifies the chronology. The @B_java#time#chrono#Chronology#getCalendarType_E@ is defined by the CLDR specification. The chronology may be a system chronology or a chronology provided by the application via ServiceLoader configuration. Since some calendars can be customized, the ID or type typically refers to the default customization. For example, the Gregorian calendar can have multiple cutover dates from the Julian, but the lookup only provides the default cutover date.", "history": "Added in API level 26", "FullName": "public static Chronology of (String id)"}, "zonedDateTime(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "the zoned date-time in this chronology, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date-time"]], "SeeAlso": ["@B_java#time#chrono#ChronoZonedDateTime#from_E@"], "Permissions": [], "Description": "Obtains a ChronoZonedDateTime in this chronology from another temporal object. This obtains a zoned date-time in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoZonedDateTime. The conversion will first obtain a ZoneId from the temporal object, falling back to a ZoneOffset if necessary. It will then try to obtain an Instant, falling back to a ChronoLocalDateTime if necessary. The result will be either the combination of ZoneId or ZoneOffset with Instant or ChronoLocalDateTime. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. The result uses this chronology. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, aChronology::zonedDateTime.", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime (TemporalAccessor temporal)"}, "dateNow(java.time.Clock)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the current local date, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current local date in this chronology from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate dateNow (Clock clock)"}, "date(int, int, int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["int", "int: the chronology proleptic-year"], ["int", "int: the chronology month-of-year"], ["int", "int: the chronology day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.", "history": "added in API level 26", "FullName": "public abstract ChronoLocalDate date (int prolepticYear, int month, int dayOfMonth)"}, "zonedDateTime(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoZonedDateTime_E@", "the zoned date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a ChronoZonedDateTime in this chronology from an Instant. This obtains a zoned date-time with the same instant as that specified.", "history": "Added in API level 26", "FullName": "public ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime (Instant instant, ZoneId zone)"}, "getCalendarType()": {"Returns": [["@B_java#lang#String_E@", "the calendar system type, null if the calendar is not defined by CLDR/LDML"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#Chronology#getId_E@"], "Permissions": [], "Description": "Gets the calendar type of the calendar system. The calendar type is an identifier defined by the CLDR and Unicode Locale Data Markup Language (LDML) specifications to uniquely identification a calendar. The getCalendarType is the concatenation of the CLDR calendar type and the variant, if applicable, is appended separated by \"-\". The calendar type is used to lookup the Chronology using @B_java#time#chrono#Chronology#of_E@.", "history": "Added in API level 26", "FullName": "public abstract String getCalendarType ()"}, "dateYearDay(int, int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["int", "int: the chronology proleptic-year"], ["int", "int: the chronology day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the proleptic-year and day-of-year fields.", "history": "added in API level 26", "FullName": "public abstract ChronoLocalDate dateYearDay (int prolepticYear, int dayOfYear)"}, "period(int,int,int)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "the period in terms of this chronology, not null"]], "Parameters": [["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a period for this chronology based on years, months and days. This returns a period tied to this chronology using the specified years, months and days. All supplied chronologies use periods based on years, months and days, however the ChronoPeriod API allows the period to be represented using other units.", "history": "Added in API level 26", "FullName": "public ChronoPeriod period (int years, int months, int days)"}, "dateEpochDay(long)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["long", "long: the epoch day"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the epoch-day. The definition of @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ is the same for all calendar systems, thus it can be used for conversion.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDate dateEpochDay (long epochDay)"}, "prolepticYear(java.time.chrono.Era, int)": {"Returns": [["int", "the proleptic-year"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a proleptic-year, such as if the year is invalid for the era"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the proleptic-year given the era and year-of-era. This combines the era and year-of-era into the single proleptic-year field. If the chronology makes active use of eras, such as JapaneseChronology then the year-of-era will be validated against the era. For other chronologies, validation is optional.", "history": "added in API level 26", "FullName": "public abstract int prolepticYear (Era era, int yearOfEra)"}, "dateNow()": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the current local date using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current local date in this chronology from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate dateNow ()"}, "resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long>,java.time.format.ResolverStyle)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the resolved date, null if insufficient information to create a date"]], "Parameters": [["@B_java#util#Map_E@", "Map: the map of fields to values, which can be updated, not null"], ["@B_java#time#format#ResolverStyle_E@", "ResolverStyle: the requested type of resolve, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the date cannot be resolved, typically because of a conflict in the input data"]], "SeeAlso": [], "Permissions": [], "Description": "Resolves parsed ChronoField values into a date during parsing. Most TemporalField implementations are resolved using the resolve method on the field. By contrast, the ChronoField class defines fields that only have meaning relative to the chronology. As such, ChronoField date fields are resolved here in the context of a specific chronology. The default implementation, which explains typical resolve behaviour, is provided in @B_java#time#chrono#AbstractChronology_E@.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDate resolveDate (Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other chronology"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this chronology is equal to another chronology. The comparison is based on the entire state of the object.", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object obj)"}, "eraOf(int)": {"Returns": [["@B_java#time#chrono#Era_E@", "the calendar system era, not null"]], "Parameters": [["int", "int: the era value"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the era"]], "SeeAlso": [], "Permissions": [], "Description": "Creates the chronology era object from the numeric value. The era is, conceptually, the largest division of the time-line. Most calendar systems have a single epoch dividing the time-line into two eras. However, some have multiple eras, such as one for the reign of each leader. The exact meaning is determined by the chronology according to the following constraints. The era in use at 1970-01-01 must have the value 1. Later eras must have sequentially higher values. Earlier eras must have sequentially lower values. Each chronology must refer to an enum or similar singleton to provide the era values. This method returns the singleton era of the correct type for the specified era value.", "history": "Added in API level 26", "FullName": "public abstract Era eraOf (int eraValue)"}, "dateNow(java.time.ZoneId)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the current local date using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current local date in this chronology from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate dateNow (ZoneId zone)"}, "ofLocale(java.util.Locale)": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the calendar system associated with the locale, not null"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale to use to obtain the calendar system, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the locale-specified calendar cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Chronology from a locale. This returns a Chronology based on the specified locale, typically returning IsoChronology. Other calendar systems are only returned if they are explicitly selected within the locale. The @B_java#util#Locale_E@ class provide access to a range of information useful for localizing an application. This includes the language and region, such as \"en-GB\" for English as used in Great Britain. The Locale class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key \"ca\". For example, the locale \"en-JP-u-ca-japanese\" represents the English language as used in Japan with the Japanese calendar system. This method finds the desired calendar system by in a manner equivalent to passing \"ca\" to @B_java#util#Locale#getUnicodeLocaleType_E@. If the \"ca\" key is not present, then IsoChronology is returned. Note that the behavior of this method differs from the older @B_java#util#Calendar#getInstance_E@ method. If that method receives a locale of \"th_TH\" it will return BuddhistCalendar. By contrast, this method will return IsoChronology. Passing the locale \"th-TH-u-ca-buddhist\" into either method will result in the Thai Buddhist calendar system and is therefore the recommended approach going forward for Thai calendar system localization. A similar, but simpler, situation occurs for the Japanese calendar system. The locale \"jp_JP_JP\" has previously been used to access the calendar. However, unlike the Thai locale, \"ja_JP_JP\" is automatically converted by Locale to the modern and recommended form of \"ja-JP-u-ca-japanese\". Thus, there is no difference in behavior between this method and Calendar#getInstance(Locale).", "history": "Added in API level 26", "FullName": "public static Chronology ofLocale (Locale locale)"}, "prolepticYear(java.time.chrono.Era,int)": {"Returns": [["int", "the proleptic-year"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a proleptic-year, such as if the year is invalid for the era"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the proleptic-year given the era and year-of-era. This combines the era and year-of-era into the single proleptic-year field. If the chronology makes active use of eras, such as JapaneseChronology then the year-of-era will be validated against the era. For other chronologies, validation is optional.", "history": "Added in API level 26", "FullName": "public abstract int prolepticYear (Era era, int yearOfEra)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this chronology. The hash code should be based on the entire state of the object.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "the chronology ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#Chronology#getCalendarType_E@"], "Permissions": [], "Description": "Gets the ID of the chronology. The ID uniquely identifies the Chronology. It can be used to lookup the Chronology using @B_java#time#chrono#Chronology#of_E@.", "history": "Added in API level 26", "FullName": "public abstract String getId ()"}, "isLeapYear(long)": {"Returns": [["boolean", "true if the year is a leap year"]], "Parameters": [["long", "long: the proleptic-year to check, not validated for range"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified year is a leap year. A leap-year is a year of a longer length than normal. The exact meaning is determined by the chronology according to the following constraints. a leap-year must imply a year-length longer than a non leap-year. a chronology that does not support the concept of a year must return false.", "history": "Added in API level 26", "FullName": "public abstract boolean isLeapYear (long prolepticYear)"}, "date(java.time.chrono.Era, int, int, int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"], ["int", "int: the chronology month-of-year"], ["int", "int: the chronology day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.", "history": "added in API level 26", "FullName": "public ChronoLocalDate date (Era era, int yearOfEra, int month, int dayOfMonth)"}, "getDisplayName(java.time.format.TextStyle,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the text value of the chronology, not null"]], "Parameters": [["@B_java#time#format#TextStyle_E@", "TextStyle: the style of the text required, not null"], ["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the textual representation of this chronology. This returns the textual name used to identify the chronology, suitable for presentation to the user. The parameters control the style of the returned text and the locale.", "history": "Added in API level 26", "FullName": "public String getDisplayName (TextStyle style, Locale locale)"}, "eras()": {"Returns": [["@B_java#util#List_E@", "the list of eras for the chronology, may be immutable, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the list of eras for the chronology. Most calendar systems have an era, within which the year has meaning. If the calendar system does not support the concept of eras, an empty list must be returned.", "history": "Added in API level 26", "FullName": "public abstract List<Era> eras ()"}, "dateYearDay(java.time.chrono.Era, int, int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"], ["int", "int: the chronology day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.", "history": "added in API level 26", "FullName": "public ChronoLocalDate dateYearDay (Era era, int yearOfEra, int dayOfYear)"}, "dateYearDay(java.time.chrono.Era,int,int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"], ["int", "int: the chronology day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate dateYearDay (Era era, int yearOfEra, int dayOfYear)"}, "dateYearDay(int,int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["int", "int: the chronology proleptic-year"], ["int", "int: the chronology day-of-year"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the proleptic-year and day-of-year fields.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDate dateYearDay (int prolepticYear, int dayOfYear)"}, "date(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDate#from_E@"], "Permissions": [], "Description": "Obtains a local date in this chronology from another temporal object. This obtains a date in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDate. The conversion typically uses the @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ field, which is standardized across calendar systems. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, aChronology::date.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDate date (TemporalAccessor temporal)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this chronology as a String. The format should include the entire state of the object.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "getAvailableChronologies()": {"Returns": [["@B_java#util#Set_E@", "the independent, modifiable set of the available chronology IDs, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the available chronologies. Each returned Chronology is available for use in the system. The set of chronologies includes the system chronologies and any chronologies provided by the application via ServiceLoader configuration.", "history": "Added in API level 26", "FullName": "public static Set<Chronology> getAvailableChronologies ()"}, "date(int,int,int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["int", "int: the chronology proleptic-year"], ["int", "int: the chronology month-of-year"], ["int", "int: the chronology day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.", "history": "Added in API level 26", "FullName": "public abstract ChronoLocalDate date (int prolepticYear, int month, int dayOfMonth)"}, "period(int, int, int)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "the period in terms of this chronology, not null"]], "Parameters": [["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"], ["int", "int: the number of years, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a period for this chronology based on years, months and days. This returns a period tied to this chronology using the specified years, months and days. All supplied chronologies use periods based on years, months and days, however the ChronoPeriod API allows the period to be represented using other units.", "history": "added in API level 26", "FullName": "public ChronoPeriod period (int years, int months, int days)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to an Chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Chronology from a temporal object. This obtains a chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of Chronology. The conversion will obtain the chronology using @B_java#time#temporal#TemporalQueries#chronology_E@. If the specified temporal object does not have a chronology, @B_java#time#chrono#IsoChronology_E@ is returned. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, Chronology::from.", "history": "Added in API level 26", "FullName": "public static Chronology from (TemporalAccessor temporal)"}, "compareTo(java.time.chrono.Chronology)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#Chronology_E@", "Chronology: the other chronology to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this chronology to another chronology. The comparison order first by the chronology ID string, then by any additional information specific to the subclass. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@.", "history": "Added in API level 26", "FullName": "public abstract int compareTo (Chronology other)"}, "date(java.time.chrono.Era,int,int,int)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the local date in this chronology, not null"]], "Parameters": [["@B_java#time#chrono#Era_E@", "Era: the era of the correct type for the chronology, not null"], ["int", "int: the chronology year-of-era"], ["int", "int: the chronology month-of-year"], ["int", "int: the chronology day-of-month"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date"], ["@B_java#lang#ClassCastException_E@", "if the era is not of the correct type for the chronology"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate date (Era era, int yearOfEra, int month, int dayOfMonth)"}, "localDateTime(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "the local date-time in this chronology, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to create the date-time"]], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDateTime#from_E@"], "Permissions": [], "Description": "Obtains a local date-time in this chronology from another temporal object. This obtains a date-time in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDateTime. The conversion extracts and combines the ChronoLocalDate and the LocalTime from the temporal object. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. The result uses this chronology. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, aChronology::localDateTime.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<? extends ChronoLocalDate> localDateTime (TemporalAccessor temporal)"}}, "Inheritance": [], "ClassName": "java.time.chrono.Chronology", "ClassDesc": "A calendar system, used to organize and identify dates. The main date and time API is built on the ISO calendar system. The chronology operates behind the scenes to represent the general concept of a calendar system. For example, the Japanese, Minguo, Thai Buddhist and others. Most other calendar systems also operate on the shared concepts of year, month and day, linked to the cycles of the Earth around the Sun, and the Moon around the Earth. These shared concepts are defined by @B_java#time#temporal#ChronoField_E@ and are available for use by any Chronology implementation: Chronology instances, both can be queried using the same constant on ChronoField. For a full discussion of the implications of this, see @B_java#time#chrono#ChronoLocalDate_E@. In general, the advice is to use the known ISO-based LocalDate, rather than ChronoLocalDate. While a Chronology object typically uses ChronoField and is based on an era, year-of-era, month-of-year, day-of-month model of a date, this is not required. A Chronology instance may represent a totally different kind of calendar system, such as the Mayan. In practical terms, the Chronology instance also acts as a factory. The @B_java#time#chrono#Chronology#of_E@ method allows an instance to be looked up by identifier, while the @B_java#time#chrono#Chronology#ofLocale_E@ method allows lookup by locale. The Chronology instance provides a set of methods to create ChronoLocalDate instances. The date classes are used to manipulate specific dates. @B_java#time#chrono#Chronology#dateNow_E@ @B_java#time#chrono#Chronology#dateNow_E@ @B_java#time#chrono#Chronology#dateNow_E@ @B_java#time#chrono#Chronology#date_E@ @B_java#time#chrono#Chronology#date_E@ @B_java#time#chrono#Chronology#dateYearDay_E@ @B_java#time#chrono#Chronology#dateYearDay_E@ @B_java#time#chrono#Chronology#date_E@ Chronology, ChronoLocalDate and Era. The majority of the logic specific to the calendar system will be in the ChronoLocalDate implementation. The Chronology implementation acts as a factory. To permit the discovery of additional chronologies, the @B_java#util#ServiceLoader_E@ is used. A file must be added to the META-INF/services directory with the name 'java.time.chrono.Chronology' listing the implementation classes. See the ServiceLoader for more details on service loading. For lookup by id or calendarType, the system provided calendars are found first followed by application provided calendars. Each chronology must define a chronology ID that is unique within the system. If the chronology represents a calendar system defined by the CLDR specification then the calendar type is the concatenation of the CLDR type and, if applicable, the CLDR variant,"}