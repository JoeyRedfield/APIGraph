{"Functions": {"availableCharsets()": {"Returns": [["@B_java#util#SortedMap_E@", "An immutable, case-insensitive map from canonical charset names to charset objects"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a sorted map from canonical charset names to charset objects. The map returned by this method will have one entry for each charset for which support is available in the current Java virtual machine. If two or more supported charsets have the same canonical name then the resulting map will contain just one of them; which one it will contain is not specified. The invocation of this method, and the subsequent use of the resulting map, may cause time-consuming disk or network I/O operations to occur. This method is provided for applications that need to enumerate all of the available charsets, for example to allow user charset selection. This method is not used by the @B_java#nio#charset#Charset#forName_E@ method, which instead employs an efficient incremental lookup algorithm. This method may return different results at different times if new charset providers are dynamically made available to the current Java virtual machine. In the absence of such changes, the charsets returned by this method are exactly those that can be retrieved via the @B_java#nio#charset#Charset#forName_E@ method.", "history": "Added in API level 1", "FullName": "public static SortedMap<String, Charset> availableCharsets ()"}, "encode(java.nio.CharBuffer)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A byte buffer containing the encoded characters"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The char buffer to be encoded"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that encodes Unicode characters into bytes in this charset. An invocation of this method upon a charset This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. In order to detect such sequences, use the @B_java#nio#charset#CharsetEncoder#encode_E@ method directly.", "history": "Added in API level 1", "FullName": "public final ByteBuffer encode (CharBuffer cb)"}, "newEncoder()": {"Returns": [["@B_java#nio#charset#CharsetEncoder_E@", "A new encoder for this charset"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this charset does not support encoding"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new encoder for this charset.", "history": "Added in API level 1", "FullName": "public abstract CharsetEncoder newEncoder ()"}, "canEncode()": {"Returns": [["boolean", "true if, and only if, this charset supports encoding"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this charset supports encoding. Nearly all charsets support encoding. The primary exceptions are special-purpose", "history": "Added in API level 1", "FullName": "public boolean canEncode ()"}, "isSupported(java.lang.String)": {"Returns": [["boolean", "true if, and only if, support for the named charset is available in the current Java virtual machine"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the requested charset; may be either a canonical name or an alias"]], "Throws": [["@B_java#nio#charset#IllegalCharsetNameException_E@", "If the given charset name is illegal"], ["@B_java#lang#IllegalArgumentException_E@", "If the given charsetName is null"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether the named charset is supported.", "history": "Added in API level 1", "FullName": "public static boolean isSupported (String charsetName)"}, "Charset(java.lang.String,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The canonical name of this charset"], ["@B_java#lang#String_E@", "String: An array of this charset's aliases, or null if it has no aliases"]], "Throws": [["@B_java#nio#charset#IllegalCharsetNameException_E@", "If the canonical name or any of the aliases are illegal"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new charset with the given canonical name and alias set.", "history": "Added in API level 1", "FullName": "protected Charset (String canonicalName, String[] aliases)"}, "newDecoder()": {"Returns": [["@B_java#nio#charset#CharsetDecoder_E@", "A new decoder for this charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new decoder for this charset.", "history": "Added in API level 1", "FullName": "public abstract CharsetDecoder newDecoder ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, this charset is equal to the given object"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this object is equal to another. Two charsets are equal if, and only if, they have the same canonical names. A charset is never equal to any other type of object.", "history": "Added in API level 1", "FullName": "public final boolean equals (Object ob)"}, "Charset(java.lang.String, java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The canonical name of this charset"], ["@B_java#lang#String_E@", "String: An array of this charset's aliases, or null if it has no aliases"]], "Throws": [["@B_java#nio#charset#IllegalCharsetNameException_E@", "If the canonical name or any of the aliases are illegal"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new charset with the given canonical name and alias set.", "history": "added in API level 1", "FullName": "protected Charset (String canonicalName, String[] aliases)"}, "encode(java.lang.String)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "A byte buffer containing the encoded characters"]], "Parameters": [["@B_java#lang#String_E@", "String: The string to be encoded"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that encodes a string into bytes in this charset. An invocation of this method upon a charset", "history": "Added in API level 1", "FullName": "public final ByteBuffer encode (String str)"}, "hashCode()": {"Returns": [["int", "An integer hashcode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Computes a hashcode for this charset.", "history": "Added in API level 1", "FullName": "public final int hashCode ()"}, "name()": {"Returns": [["@B_java#lang#String_E@", "The canonical name of this charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this charset's canonical name.", "history": "Added in API level 1", "FullName": "public final String name ()"}, "aliases()": {"Returns": [["@B_java#util#Set_E@", "An immutable set of this charset's aliases"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set containing this charset's aliases.", "history": "Added in API level 1", "FullName": "public final Set<String> aliases ()"}, "defaultCharset()": {"Returns": [["@B_java#nio#charset#Charset_E@", "A charset object for the default charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default charset of this Java virtual machine. Android note: The Android platform default is always UTF-8.", "history": "Added in API level 1", "FullName": "public static Charset defaultCharset ()"}, "contains(java.nio.charset.Charset)": {"Returns": [["boolean", "true if the given charset is contained in this charset"]], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The given charset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this charset contains the given charset. A charset That Every charset contains itself. This method computes an approximation of the containment relation: If it returns", "history": "Added in API level 1", "FullName": "public abstract boolean contains (Charset cs)"}, "isRegistered()": {"Returns": [["boolean", "true if, and only if, this charset is known by its implementor to be registered with the IANA"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this charset is registered in the", "history": "Added in API level 1", "FullName": "public final boolean isRegistered ()"}, "compareTo(java.nio.charset.Charset)": {"Returns": [["int", "A negative integer, zero, or a positive integer as this charset is less than, equal to, or greater than the specified charset"]], "Parameters": [["@B_java#nio#charset#Charset_E@", "Charset: The charset to which this charset is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this charset to another. Charsets are ordered by their canonical names, without regard to case.", "history": "Added in API level 1", "FullName": "public final int compareTo (Charset that)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string describing this charset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this charset.", "history": "Added in API level 1", "FullName": "public final String toString ()"}, "displayName()": {"Returns": [["@B_java#lang#String_E@", "The display name of this charset in the default locale"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this charset's human-readable name for the default locale. The default implementation of this method simply returns this charset's canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.", "history": "Added in API level 1", "FullName": "public String displayName ()"}, "decode(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#CharBuffer_E@", "A char buffer containing the decoded characters"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The byte buffer to be decoded"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method that decodes bytes in this charset into Unicode characters. An invocation of this method upon a charset This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. In order to detect such sequences, use the @B_java#nio#charset#CharsetDecoder#decode_E@ method directly.", "history": "Added in API level 1", "FullName": "public final CharBuffer decode (ByteBuffer bb)"}, "displayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "The display name of this charset in the given locale"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale for which the display name is to be retrieved"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this charset's human-readable name for the given locale. The default implementation of this method simply returns this charset's canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.", "history": "Added in API level 1", "FullName": "public String displayName (Locale locale)"}, "forName(java.lang.String)": {"Returns": [["@B_java#nio#charset#Charset_E@", "A charset object for the named charset"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the requested charset; may be either a canonical name or an alias"]], "Throws": [["@B_java#nio#charset#IllegalCharsetNameException_E@", "If the given charset name is illegal"], ["@B_java#lang#IllegalArgumentException_E@", "If the given charsetName is null"], ["@B_java#nio#charset#UnsupportedCharsetException_E@", "If no support for the named charset is available in this instance of the Java virtual machine"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a charset object for the named charset.", "history": "Added in API level 1", "FullName": "public static Charset forName (String charsetName)"}}, "Inheritance": [], "ClassName": "java.nio.charset.Charset", "ClassDesc": "A named mapping between sequences of sixteen-bit Unicode This class also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine. Support for new charsets can be added via the service-provider interface defined in the @B_java#nio#charset#spi#CharsetProvider_E@ class. All of the methods defined in this class are safe for use by multiple concurrent threads. Charsets are named by strings composed of the following characters: The uppercase letters The lowercase letters The digits The dash character The plus character The period character The colon character The underscore character A charset name must begin with either a letter or a digit. The empty string is not a legal charset name. Charset names are not case-sensitive; that is, case is always ignored when comparing charset names. Charset names generally follow the conventions documented in Every charset has a @B_java#nio#charset#Charset#name_E@ method of this class. Canonical names are, by convention, usually in upper case. The aliases of a charset are returned by the @B_java#nio#charset#Charset#aliases_E@ method. @B_java#io#InputStreamReader#getEncoding_E@ and @B_java#io#OutputStreamWriter#getEncoding_E@ classes. The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias. The The The When decoding, the When decoding, the In any case, byte order marks occurring after the first element of an input sequence are not omitted since the same code is used to represent Android note: The Android platform default is always UTF-8. The @B_java#nio#charset#StandardCharsets_E@ class defines constants for each of the standard charsets. The name of this class is taken from the terms used in A Some standards have defined a A When a coded character set is used exclusively with a single character-encoding scheme then the corresponding charset is usually named for the coded character set; otherwise a charset is usually named for the encoding scheme and, possibly, the locale of the coded character sets that it supports. Hence The native character encoding of the Java programming language is UTF-16. A charset in the Java platform therefore defines a mapping between sequences of sixteen-bit UTF-16 code units (that is, sequences of chars) and sequences of bytes."}