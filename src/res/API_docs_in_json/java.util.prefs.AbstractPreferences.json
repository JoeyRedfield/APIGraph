{"Functions": {"removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#PreferenceChangeListener_E@", "PreferenceChangeListener: The preference change listener to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified preference change listener, so it no longer receives preference change events.", "history": "Added in API level 1", "FullName": "public void removePreferenceChangeListener (PreferenceChangeListener pcl)"}, "addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#PreferenceChangeListener_E@", "PreferenceChangeListener: The preference change listener to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the specified listener to receive @B_java#util#prefs#Preferences#removeNode_E@ method, which generates a Events are only guaranteed for changes made within the same JVM as the registered listener, though some implementations may generate events for changes made outside this JVM. Events may be generated before the changes have been made persistent. Events are not generated when preferences are modified in descendants of this node; a caller desiring such events must register with each descendant.", "history": "Added in API level 1", "FullName": "public void addPreferenceChangeListener (PreferenceChangeListener pcl)"}, "getDouble(java.lang.String,double)": {"Returns": [["double", "the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a double."], ["double", "double: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getDouble_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Double#parseDouble_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "Added in API level 1", "FullName": "public double getDouble (String key, double def)"}, "isUserNode()": {"Returns": [["boolean", "true if this preference node is in the user preference tree, false if it's in the system preference tree."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#isUserNode_E@. This implementation compares this node's root node (which is stored in a private field) with the value returned by @B_java#util#prefs#Preferences#userRoot_E@. If the two object references are identical, this method returns true.", "history": "Added in API level 1", "FullName": "public boolean isUserNode ()"}, "syncSpi()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "This method is invoked with this node locked. The contract of this method is to synchronize any cached preferences stored at this node with any stored in the backing store. (It is perfectly possible that this node does not exist on the backing store, either because it has been deleted by another VM, or because it has not yet been created.) Note that this method should If this node throws a @B_java#util#prefs#AbstractPreferences#sync_E@ invocation.", "history": "Added in API level 1", "FullName": "protected abstract void syncSpi ()"}, "remove(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key whose mapping is to be removed from the preference node."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#remove_E@. This implementation obtains this preference node's lock, checks that the node has not been removed, invokes @B_java#util#prefs#AbstractPreferences#removeSpi_E@ and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread.", "history": "Added in API level 1", "FullName": "public void remove (String key)"}, "childrenNamesSpi()": {"Returns": [["@B_java#lang#String_E@", "an array containing the names of the children of this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the names of the children of this preference node. (The returned array will be of size zero if this node has no children.) This method need not return the names of any nodes already cached, but may do so without harm. This method is invoked with the lock on this node held. If this node throws a @B_java#util#prefs#AbstractPreferences#childrenNames_E@ invocation.", "history": "Added in API level 1", "FullName": "protected abstract String[] childrenNamesSpi ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": ["@B_java#util#prefs#AbstractPreferences#flush_E@"], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#flush_E@. This implementation calls a recursive helper method that locks this node, invokes flushSpi() on it, unlocks this node, and recursively invokes this method on each \"cached child.\" A cached child is a child of this node that has been created in this VM and not subsequently removed. In effect, this method does a depth first traversal of the \"cached subtree\" rooted at this node, calling flushSpi() on each node in the subTree while only that node is locked. Note that flushSpi() is invoked top-down. If this method is invoked on a node that has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method, flushSpi() is invoked on this node, but not on others.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute path name of this preferences node.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "childrenNames()": {"Returns": [["@B_java#lang#String_E@", "the names of the children of this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#AbstractPreferences#cachedChildren_E@"], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#childrenNames_E@. This implementation obtains this preference node's lock, checks that the node has not been removed, constructs a @B_java#util#prefs#AbstractPreferences#childrenNamesSpi_E@, and adds all of the returned child-names into the set. The elements of the tree set are dumped into a", "history": "Added in API level 1", "FullName": "public String[] childrenNames ()"}, "cachedChildren()": {"Returns": [["@B_java#util#prefs#AbstractPreferences_E@", "all known unremoved children of this node."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all known unremoved children of this node.", "history": "Added in API level 1", "FullName": "protected final AbstractPreferences[] cachedChildren ()"}, "nodeExists(java.lang.String)": {"Returns": [["boolean", "true if the specified node exists."]], "Parameters": [["@B_java#lang#String_E@", "String: the path name of the node whose existence is to be checked."]], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalArgumentException_E@", "if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long)."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method and pathname is not the empty string (\"\")."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#nodeExists_E@. This implementation is very similar to @B_java#util#prefs#AbstractPreferences#node_E@, except that @B_java#util#prefs#AbstractPreferences#getChild_E@ is used instead of @B_java#util#prefs#AbstractPreferences#childSpi_E@.", "history": "Added in API level 1", "FullName": "public boolean nodeExists (String path)"}, "removeNodeChangeListener(java.util.prefs.NodeChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#NodeChangeListener_E@", "NodeChangeListener: The NodeChangeListener to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified", "history": "Added in API level 1", "FullName": "public void removeNodeChangeListener (NodeChangeListener ncl)"}, "putByteArray(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["byte[]", "byte: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH*3/4."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putByteArray_E@.", "history": "added in API level 1", "FullName": "public void putByteArray (String key, byte[] value)"}, "putLong(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["long", "long: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putLong_E@. This implementation translates @B_java#lang#Long#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "Added in API level 1", "FullName": "public void putLong (String key, long value)"}, "removeNode()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has already been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#UnsupportedOperationException_E@", "if this method is invoked on the root node."], ["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#removeNode_E@. This implementation checks to see that this node is the root; if so, it throws an appropriate exception. Then, it locks this node's parent, and calls a recursive helper method that traverses the subtree rooted at this node. The recursive method locks the node on which it was called, checks that it has not already been removed, and then ensures that all of its children are cached: The @B_java#util#prefs#AbstractPreferences#childrenNamesSpi_E@ method is invoked and each returned child name is checked for containment in the child-cache. If a child is not already cached, the @B_java#util#prefs#AbstractPreferences#childSpi_E@ method is invoked to create a @B_java#util#prefs#AbstractPreferences#removeNodeSpi_E@, marks itself as removed, and removes itself from its parent's child-cache. Finally, if there are any node change listeners, it enqueues a notification event for processing by the event dispatch thread. Note that the helper method is always invoked with all ancestors up to the \"closest non-removed ancestor\" locked.", "history": "Added in API level 1", "FullName": "public void removeNode ()"}, "flushSpi()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "This method is invoked with this node locked. The contract of this method is to force any cached changes in the contents of this preference node to the backing store, guaranteeing their persistence. (It is perfectly possible that this node does not exist on the backing store, either because it has been deleted by another VM, or because it has not yet been created.) Note that this method should If this node throws a @B_java#util#prefs#AbstractPreferences#flush_E@ invocation.", "history": "Added in API level 1", "FullName": "protected abstract void flushSpi ()"}, "putBoolean(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["boolean", "boolean: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putBoolean_E@. This implementation translates @B_java#lang#String#valueOf_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "Added in API level 1", "FullName": "public void putBoolean (String key, boolean value)"}, "putByteArray(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["byte[]", "byte: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH*3/4."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putByteArray_E@.", "history": "Added in API level 1", "FullName": "public void putByteArray (String key, byte[] value)"}, "putInt(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["int", "int: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putInt_E@. This implementation translates @B_java#lang#Integer#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "Added in API level 1", "FullName": "public void putInt (String key, int value)"}, "exportSubtree(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#util#prefs#BackingStoreException_E@", "if preference data cannot be read from backing store."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#exportSubtree_E@.", "history": "Added in API level 1", "FullName": "public void exportSubtree (OutputStream os)"}, "keysSpi()": {"Returns": [["@B_java#lang#String_E@", "an array of the keys that have an associated value in this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "Returns all of the keys that have an associated value in this preference node. (The returned array will be of size zero if this node has no preferences.) It is guaranteed that this node has not been removed. This method is invoked with the lock on this node held. If this node throws a @B_java#util#prefs#AbstractPreferences#keys_E@ invocation.", "history": "Added in API level 1", "FullName": "protected abstract String[] keysSpi ()"}, "getBoolean(java.lang.String, boolean)": {"Returns": [["boolean", "the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a boolean."], ["boolean", "boolean: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getBoolean_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, it is compared with @B_java#lang#String#equalsIgnoreCase_E@. If the comparison returns @B_java#lang#String#equalsIgnoreCase_E@. If the comparison returns", "history": "added in API level 1", "FullName": "public boolean getBoolean (String key, boolean def)"}, "get(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value associated with key, or def if no value is associated with key."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned."], ["@B_java#lang#String_E@", "String: the value to be returned in the event that this preference node has no value associated with key."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null default is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#get_E@. This implementation first checks to see if @B_java#util#prefs#AbstractPreferences#getSpi_E@, and returns the result, unless the", "history": "added in API level 1", "FullName": "public String get (String key, String def)"}, "sync()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": ["@B_java#util#prefs#AbstractPreferences#flush_E@"], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#sync_E@. This implementation calls a recursive helper method that locks this node, invokes syncSpi() on it, unlocks this node, and recursively invokes this method on each \"cached child.\" A cached child is a child of this node that has been created in this VM and not subsequently removed. In effect, this method does a depth first traversal of the \"cached subtree\" rooted at this node, calling syncSpi() on each node in the subTree while only that node is locked. Note that syncSpi() is invoked top-down.", "history": "Added in API level 1", "FullName": "public void sync ()"}, "removeNodeSpi()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "Removes this preference node, invalidating it and any preferences that it contains. The named child will have no descendants at the time this invocation is made (i.e., the @B_java#util#prefs#Preferences#removeNode_E@ method invokes this method repeatedly in a bottom-up fashion, removing each of a node's descendants before removing the node itself). This method is invoked with the lock held on this node and its parent (and all ancestors that are being removed as a result of a single invocation to @B_java#util#prefs#Preferences#removeNode_E@). The removal of a node needn't become persistent until the If this node throws a @B_java#util#prefs#AbstractPreferences#removeNode_E@ invocation.", "history": "Added in API level 1", "FullName": "protected abstract void removeNodeSpi ()"}, "getFloat(java.lang.String,float)": {"Returns": [["float", "the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a float."], ["float", "float: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getFloat_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Float#parseFloat_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "Added in API level 1", "FullName": "public float getFloat (String key, float def)"}, "getDouble(java.lang.String, double)": {"Returns": [["double", "the double value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a double."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a double."], ["double", "double: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getDouble_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Double#parseDouble_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "added in API level 1", "FullName": "public double getDouble (String key, double def)"}, "node(java.lang.String)": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the specified preference node."]], "Parameters": [["@B_java#lang#String_E@", "String: the path name of the preference node to return."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the path name is invalid (i.e., it contains multiple consecutive slash characters, or ends with a slash character and is more than one character long)."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#node_E@. This implementation obtains this preference node's lock and checks that the node has not been removed. If @B_java#util#prefs#AbstractPreferences#childSpi_E@ method is invoked, and the result stored in this node's child-cache. If the newly created @B_java#util#prefs#AbstractPreferences#newNode_E@ field is When there are no more tokens, the last value found in the child-cache or returned by If the first character of @B_java#util#prefs#AbstractPreferences#lock_E@.", "history": "Added in API level 1", "FullName": "public Preferences node (String path)"}, "put(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the specified value is to be associated."], ["@B_java#lang#String_E@", "String: value to be associated with the specified key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#put_E@. This implementation checks that the key and value are legal, obtains this preference node's lock, checks that the node has not been removed, invokes @B_java#util#prefs#AbstractPreferences#putSpi_E@, and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread.", "history": "added in API level 1", "FullName": "public void put (String key, String value)"}, "parent()": {"Returns": [["@B_java#util#prefs#Preferences_E@", "the parent of this preference node."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#parent_E@. This implementation obtains this preference node's lock, checks that the node has not been removed and returns the parent value that was passed to this node's constructor.", "history": "Added in API level 1", "FullName": "public Preferences parent ()"}, "removeSpi(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the association (if any) for the specified key at this preference node. It is guaranteed that This method is invoked with the lock on this node held.", "history": "Added in API level 1", "FullName": "protected abstract void removeSpi (String key)"}, "absolutePath()": {"Returns": [["@B_java#lang#String_E@", "this preference node's absolute path name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#absolutePath_E@. This implementation merely returns the absolute path name that was computed at the time that this node was constructed (based on the name that was passed to this node's constructor, and the names that were passed to this node's ancestors' constructors).", "history": "Added in API level 1", "FullName": "public String absolutePath ()"}, "childSpi(java.lang.String)": {"Returns": [["@B_java#util#prefs#AbstractPreferences_E@", "The named child node."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the child node to return, relative to this preference node."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the named child of this preference node, creating it if it does not already exist. It is guaranteed that @B_java#util#prefs#Preferences#MAX_NAME_LENGTH_E@ characters. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for any of these things.) Finally, it is guaranteed that the named node has not been returned by a previous invocation of this method or @B_java#util#prefs#AbstractPreferences#getChild_E@ after the last time that it was removed. In other words, a cached value will always be used in preference to invoking this method. Subclasses need not maintain their own cache of previously returned children. The implementer must ensure that the returned node has not been removed. If a like-named child of this node was previously removed, the implementer must return a newly constructed If this method causes a node to be created, this node is not guaranteed to be persistent until the This method is invoked with the lock on this node held.", "history": "Added in API level 1", "FullName": "protected abstract AbstractPreferences childSpi (String name)"}, "getBoolean(java.lang.String,boolean)": {"Returns": [["boolean", "the boolean value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a boolean."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a boolean."], ["boolean", "boolean: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getBoolean_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, it is compared with @B_java#lang#String#equalsIgnoreCase_E@. If the comparison returns @B_java#lang#String#equalsIgnoreCase_E@. If the comparison returns", "history": "Added in API level 1", "FullName": "public boolean getBoolean (String key, boolean def)"}, "putInt(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["int", "int: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putInt_E@. This implementation translates @B_java#lang#Integer#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "added in API level 1", "FullName": "public void putInt (String key, int value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#clear_E@. This implementation obtains this preference node's lock, invokes @B_java#util#prefs#AbstractPreferences#keys_E@ to obtain an array of keys, and iterates over the array invoking @B_java#util#prefs#AbstractPreferences#remove_E@ on each key.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "isRemoved()": {"Returns": [["boolean", "true iff this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns @B_java#util#prefs#AbstractPreferences#removeNode_E@ method. This method locks this node prior to returning the contents of the private field used to track this state.", "history": "Added in API level 1", "FullName": "protected boolean isRemoved ()"}, "getLong(java.lang.String,long)": {"Returns": [["long", "the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a long."], ["long", "long: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getLong_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to a @B_java#lang#Long#parseLong_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "Added in API level 1", "FullName": "public long getLong (String key, long def)"}, "keys()": {"Returns": [["@B_java#lang#String_E@", "an array of the keys that have an associated value in this preference node."]], "Parameters": [], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#keys_E@. This implementation obtains this preference node's lock, checks that the node has not been removed and invokes @B_java#util#prefs#AbstractPreferences#keysSpi_E@.", "history": "Added in API level 1", "FullName": "public String[] keys ()"}, "addNodeChangeListener(java.util.prefs.NodeChangeListener)": {"Returns": [], "Parameters": [["@B_java#util#prefs#NodeChangeListener_E@", "NodeChangeListener: The NodeChangeListener to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the specified listener to receive @B_java#util#prefs#Preferences#removeNode_E@ invocation results in multiple Events are only guaranteed for changes made within the same JVM as the registered listener, though some implementations may generate events for changes made outside this JVM. Events may be generated before the changes have become permanent. Events are not generated when indirect descendants of this node are added or removed; a caller desiring such events must register with each descendant. Few guarantees can be made regarding node creation. Because nodes are created implicitly upon access, it may not be feasible for an implementation to determine whether a child node existed in the backing store prior to access (for example, because the backing store is unreachable or cached information is out of date). Under these circumstances, implementations are neither required to generate node change events nor prohibited from doing so.", "history": "Added in API level 1", "FullName": "public void addNodeChangeListener (NodeChangeListener ncl)"}, "putLong(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["long", "long: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putLong_E@. This implementation translates @B_java#lang#Long#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "added in API level 1", "FullName": "public void putLong (String key, long value)"}, "putFloat(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["float", "float: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putFloat_E@. This implementation translates @B_java#lang#Float#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "Added in API level 1", "FullName": "public void putFloat (String key, float value)"}, "getInt(java.lang.String,int)": {"Returns": [["int", "the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as an int."], ["int", "int: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getInt_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Integer#parseInt_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "Added in API level 1", "FullName": "public int getInt (String key, int def)"}, "putDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["double", "double: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putDouble_E@. This implementation translates @B_java#lang#Double#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "added in API level 1", "FullName": "public void putDouble (String key, double value)"}, "putBoolean(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["boolean", "boolean: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putBoolean_E@. This implementation translates @B_java#lang#String#valueOf_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "added in API level 1", "FullName": "public void putBoolean (String key, boolean value)"}, "putSpi(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key"], ["@B_java#lang#String_E@", "String: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Put the given key-value association into this preference node. It is guaranteed that This method is invoked with the lock on this node held.", "history": "added in API level 1", "FullName": "protected abstract void putSpi (String key, String value)"}, "put(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the specified value is to be associated."], ["@B_java#lang#String_E@", "String: value to be associated with the specified key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH or if value.length exceeds MAX_VALUE_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#put_E@. This implementation checks that the key and value are legal, obtains this preference node's lock, checks that the node has not been removed, invokes @B_java#util#prefs#AbstractPreferences#putSpi_E@, and if there are any preference change listeners, enqueues a notification event for processing by the event dispatch thread.", "history": "Added in API level 1", "FullName": "public void put (String key, String value)"}, "putDouble(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["double", "double: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putDouble_E@. This implementation translates @B_java#lang#Double#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "Added in API level 1", "FullName": "public void putDouble (String key, double value)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "this preference node's name, relative to its parent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#name_E@. This implementation merely returns the name that was passed to this node's constructor.", "history": "Added in API level 1", "FullName": "public String name ()"}, "putSpi(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the key"], ["@B_java#lang#String_E@", "String: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Put the given key-value association into this preference node. It is guaranteed that This method is invoked with the lock on this node held.", "history": "Added in API level 1", "FullName": "protected abstract void putSpi (String key, String value)"}, "getFloat(java.lang.String, float)": {"Returns": [["float", "the float value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a float."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a float."], ["float", "float: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getFloat_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Float#parseFloat_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "added in API level 1", "FullName": "public float getFloat (String key, float def)"}, "getChild(java.lang.String)": {"Returns": [["@B_java#util#prefs#AbstractPreferences_E@", "the named child if it exists, or null if it does not."]], "Parameters": [["@B_java#lang#String_E@", "String: name of the child to be searched for."]], "Throws": [["@B_java#util#prefs#BackingStoreException_E@", "if this operation cannot be completed due to a failure in the backing store, or inability to communicate with it."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the named child if it exists, or @B_java#util#prefs#Preferences#MAX_NAME_LENGTH_E@ characters. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for any of these things if he chooses to override this method.) Finally, it is guaranteed that the named node has not been returned by a previous invocation of this method or @B_java#util#prefs#AbstractPreferences#childSpi_E@ after the last time that it was removed. In other words, a cached value will always be used in preference to invoking this method. (The implementor needn't maintain his own cache of previously returned children if he chooses to override this method.) This implementation obtains this preference node's lock, invokes @B_java#util#prefs#AbstractPreferences#childrenNames_E@ to get an array of the names of this node's children, and iterates over the array comparing the name of each child with the specified node name. If a child node has the correct name, the @B_java#util#prefs#AbstractPreferences#childSpi_E@ method is invoked and the resulting node is returned. If the iteration completes without finding the specified name,", "history": "Added in API level 1", "FullName": "protected AbstractPreferences getChild (String nodeName)"}, "getByteArray(java.lang.String,byte[])": {"Returns": [["byte[]", "the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a byte array."], ["byte[]", "byte: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getByteArray_E@.", "history": "Added in API level 1", "FullName": "public byte[] getByteArray (String key, byte[] def)"}, "AbstractPreferences(java.util.prefs.AbstractPreferences,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#util#prefs#AbstractPreferences_E@", "AbstractPreferences: the parent of this preference node, or null if this is the root."], ["@B_java#lang#String_E@", "String: the name of this preference node, relative to its parent, or \"\" if this is the root."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if name contains a slash ('/'), or parent is null and name isn't \"\"."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a preference node with the specified parent and the specified name relative to its parent.", "history": "Added in API level 1", "FullName": "protected AbstractPreferences (AbstractPreferences parent, String name)"}, "getInt(java.lang.String, int)": {"Returns": [["int", "the int value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as an int."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as an int."], ["int", "int: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getInt_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to an @B_java#lang#Integer#parseInt_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "added in API level 1", "FullName": "public int getInt (String key, int def)"}, "exportNode(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream on which to emit the XML document."]], "Throws": [["@B_java#io#IOException_E@", "if writing to the specified output stream results in an IOException."], ["@B_java#util#prefs#BackingStoreException_E@", "if preference data cannot be read from backing store."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#exportNode_E@.", "history": "Added in API level 1", "FullName": "public void exportNode (OutputStream os)"}, "getLong(java.lang.String, long)": {"Returns": [["long", "the long value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a long."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a long."], ["long", "long: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getLong_E@. This implementation invokes @B_java#util#prefs#AbstractPreferences#get_E@. If the return value is non-null, the implementation attempts to translate it to a @B_java#lang#Long#parseLong_E@. If the attempt succeeds, the return value is returned by this method. Otherwise,", "history": "added in API level 1", "FullName": "public long getLong (String key, long def)"}, "getByteArray(java.lang.String, byte[])": {"Returns": [["byte[]", "the byte array value represented by the string associated with key in this preference node, or def if the associated value does not exist or cannot be interpreted as a byte array."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned as a byte array."], ["byte[]", "byte: the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null value for def is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#getByteArray_E@.", "history": "added in API level 1", "FullName": "public byte[] getByteArray (String key, byte[] def)"}, "get(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value associated with key, or def if no value is associated with key."]], "Parameters": [["@B_java#lang#String_E@", "String: key whose associated value is to be returned."], ["@B_java#lang#String_E@", "String: the value to be returned in the event that this preference node has no value associated with key."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."], ["@B_java#lang#NullPointerException_E@", "if key is null. (A null default is permitted.)"]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#get_E@. This implementation first checks to see if @B_java#util#prefs#AbstractPreferences#getSpi_E@, and returns the result, unless the", "history": "Added in API level 1", "FullName": "public String get (String key, String def)"}, "getSpi(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value associated with the specified key at this preference node, or null if there is no association for this key, or the association cannot be determined at this time."]], "Parameters": [["@B_java#lang#String_E@", "String: the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value associated with the specified key at this preference node, or Generally speaking, this method should not throw an exception under any circumstances. If, however, if it does throw an exception, the exception will be intercepted and treated as a This method is invoked with the lock on this node held.", "history": "Added in API level 1", "FullName": "protected abstract String getSpi (String key)"}, "putFloat(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: key with which the string form of value is to be associated."], ["float", "float: value whose string form is to be associated with key."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key.length() exceeds MAX_KEY_LENGTH."], ["@B_java#lang#IllegalStateException_E@", "if this node (or an ancestor) has been removed with the @B_java#util#prefs#AbstractPreferences#removeNode_E@ method."]], "SeeAlso": [], "Permissions": [], "Description": "Implements the @B_java#util#prefs#Preferences#putFloat_E@. This implementation translates @B_java#lang#Float#toString_E@ and invokes @B_java#util#prefs#AbstractPreferences#put_E@ on the result.", "history": "added in API level 1", "FullName": "public void putFloat (String key, float value)"}}, "Inheritance": ["@B_java#util#prefs#Preferences_E@"], "ClassName": "java.util.prefs.AbstractPreferences", "ClassDesc": "This class provides a skeletal implementation of the @B_java#util#prefs#Preferences_E@ class, greatly easing the task of implementing it. Implementors must override the nine abstract service-provider interface (SPI) methods: @B_java#util#prefs#AbstractPreferences#getSpi_E@, @B_java#util#prefs#AbstractPreferences#putSpi_E@, @B_java#util#prefs#AbstractPreferences#removeSpi_E@, @B_java#util#prefs#AbstractPreferences#childSpi_E@, @B_java#util#prefs#AbstractPreferences#removeNodeSpi_E@, @B_java#util#prefs#AbstractPreferences#keysSpi_E@, @B_java#util#prefs#AbstractPreferences#childrenNamesSpi_E@, @B_java#util#prefs#AbstractPreferences#syncSpi_E@ and @B_java#util#prefs#AbstractPreferences#flushSpi_E@. All of the concrete methods specify precisely how they are implemented atop these SPI methods. The implementor may, at his discretion, override one or more of the concrete methods if the default implementation is unsatisfactory for any reason, such as performance. The SPI methods fall into three groups concerning exception behavior. The @B_java#util#prefs#AbstractPreferences#get_E@, which will return the specified default value to the caller. The @B_java#util#prefs#BackingStoreException_E@, and the implementation is required to throw this checked exception if it is unable to perform the operation. The exception propagates outward, causing the corresponding API method to fail. The remaining SPI methods @B_java#util#prefs#AbstractPreferences#putSpi_E@, @B_java#util#prefs#AbstractPreferences#removeSpi_E@ and @B_java#util#prefs#AbstractPreferences#childSpi_E@ have more complicated exception behavior. They are not specified to throw @B_java#util#prefs#Preferences#flush_E@ or @B_java#util#prefs#Preferences#sync_E@. Generally speaking, these SPI methods should not throw exceptions. In some implementations, there may be circumstances under which these calls cannot even enqueue the requested operation for later processing. Even under these circumstances it is generally better to simply ignore the invocation and return, rather than throwing an exception. Under these circumstances, however, all subsequent invocations of There is one circumstance under which @B_java#lang#SecurityException_E@ would be appropriate. Most of the SPI methods require the implementation to read or write information at a preferences node. The implementor should beware of the fact that another VM may have concurrently deleted this node from the backing store. It is the implementation's responsibility to recreate the node if it has been deleted. Implementation note: In Sun's default @B_java#lang#ThreadLocal_E@ instance. Authors of such implementations are @B_java#util#prefs#AbstractPreferences#get_E@ or @B_java#util#prefs#AbstractPreferences#put_E@ method) rather than permanently associating a user with each"}