{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a string representation of this digest input stream and its associated message digest object.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getMessageDigest()": {"Returns": [["@B_java#security#MessageDigest_E@", "the message digest associated with this stream."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#DigestInputStream#setMessageDigest_E@"], "Permissions": [], "Description": "Returns the message digest associated with this stream.", "history": "Added in API level 1", "FullName": "public MessageDigest getMessageDigest ()"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read. This is less than len if the end of the stream is reached prior to reading len bytes. -1 is returned if no bytes were read because the end of the stream had already been reached when the call was made."]], "Parameters": [["byte[]", "byte: the array into which the data is read."], ["int", "int: the starting offset into b of where the data should be placed."], ["int", "int: the maximum number of bytes to be read from the input stream into b, starting at offset off."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#security#MessageDigest#update_E@"], "Permissions": [], "Description": "Reads into a byte array, and updates the message digest (if the digest function is on). That is, this method reads up to len bytes from the input stream into the array b, starting at offset off. This method blocks until the data is actually read. If the digest function is on (see @B_java#security#DigestInputStream#on_E@), this method will then call update on the message digest associated with this stream, passing it the data.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "DigestInputStream(java.io.InputStream,java.security.MessageDigest)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream."], ["@B_java#security#MessageDigest_E@", "MessageDigest: the message digest to associate with this stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a digest input stream, using the specified input stream and message digest.", "history": "Added in API level 1", "FullName": "public DigestInputStream (InputStream stream, MessageDigest digest)"}, "on(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to turn the digest function on, false to turn it off."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turns the digest function on or off. The default is on. When it is on, a call to one of the read methods results in an update on the message digest. But when it is off, the message digest is not updated.", "history": "Added in API level 1", "FullName": "public void on (boolean on)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read. This is less than len if the end of the stream is reached prior to reading len bytes. -1 is returned if no bytes were read because the end of the stream had already been reached when the call was made."]], "Parameters": [["byte[]", "byte: the array into which the data is read."], ["int", "int: the starting offset into b of where the data should be placed."], ["int", "int: the maximum number of bytes to be read from the input stream into b, starting at offset off."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#security#MessageDigest#update_E@"], "Permissions": [], "Description": "Reads into a byte array, and updates the message digest (if the digest function is on). That is, this method reads up to len bytes from the input stream into the array b, starting at offset off. This method blocks until the data is actually read. If the digest function is on (see @B_java#security#DigestInputStream#on_E@), this method will then call update on the message digest associated with this stream, passing it the data.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read()": {"Returns": [["int", "the byte read."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#security#MessageDigest#update_E@"], "Permissions": [], "Description": "Reads a byte, and updates the message digest (if the digest function is on). That is, this method reads a byte from the input stream, blocking until the byte is actually read. If the digest function is on (see @B_java#security#DigestInputStream#on_E@), this method will then call update on the message digest associated with this stream, passing it the byte read.", "history": "Added in API level 1", "FullName": "public int read ()"}, "setMessageDigest(java.security.MessageDigest)": {"Returns": [], "Parameters": [["@B_java#security#MessageDigest_E@", "MessageDigest: the message digest to be associated with this stream."]], "Throws": [], "SeeAlso": ["@B_java#security#DigestInputStream#getMessageDigest_E@"], "Permissions": [], "Description": "Associates the specified message digest with this stream.", "history": "Added in API level 1", "FullName": "public void setMessageDigest (MessageDigest digest)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.security.DigestInputStream", "ClassDesc": "A transparent stream that updates the associated message digest using the bits going through the stream. To complete the message digest computation, call one of the digest methods on the associated message digest after your calls to one of this digest input stream's @B_java#security#DigestInputStream#read_E@ methods. It is possible to turn this stream on or off (see @B_java#security#DigestInputStream#on_E@). When it is on, a call to one of the read methods results in an update on the message digest. But when it is off, the message digest is not updated. The default is for the stream to be on. Note that digest objects can compute only one digest (see @B_java#security#MessageDigest_E@), so that in order to compute intermediate digests, a caller should retain a handle onto the digest object, and clone it for each digest to be computed, leaving the orginal digest untouched."}