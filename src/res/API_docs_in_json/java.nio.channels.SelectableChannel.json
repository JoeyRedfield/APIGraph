{"Functions": {"SelectableChannel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected SelectableChannel ()"}, "validOps()": {"Returns": [["int", "The valid-operation set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an", "history": "Added in API level 1", "FullName": "public abstract int validOps ()"}, "isBlocking()": {"Returns": [["boolean", "true if, and only if, this channel is in blocking mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not every I/O operation on this channel will block until it completes. A newly-created channel is always in blocking mode. If this channel is closed then the value returned by this method is not specified.", "history": "Added in API level 1", "FullName": "public abstract boolean isBlocking ()"}, "blockingLock()": {"Returns": [["@B_java#lang#Object_E@", "The blocking-mode lock object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the object upon which the @B_java#nio#channels#SelectableChannel#configureBlocking_E@ and @B_java#nio#channels#SelectableChannel#register_E@ methods synchronize. This is often useful in the implementation of adaptors that require a specific blocking mode to be maintained for a short period of time.", "history": "Added in API level 1", "FullName": "public abstract Object blockingLock ()"}, "keyFor(java.nio.channels.Selector)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "The key returned when this channel was last registered with the given selector, or null if this channel is not currently registered with that selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the key representing the channel's registration with the given selector.", "history": "Added in API level 1", "FullName": "public abstract SelectionKey keyFor (Selector sel)"}, "register(java.nio.channels.Selector, int)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "A key representing the registration of this channel with the given selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector with which this channel is to be registered"], ["int", "int: The interest set for the resulting key"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If the selector is closed"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "If this channel is in blocking mode"], ["@B_java#nio#channels#IllegalSelectorException_E@", "If this channel was not created by the same provider as the given selector"], ["@B_java#nio#channels#CancelledKeyException_E@", "If this channel is currently registered with the given selector but the corresponding key has already been cancelled"], ["@B_java#lang#IllegalArgumentException_E@", "If a bit in ops does not correspond to an operation that is supported by this channel, that is, if set & ~validOps() != 0"]], "SeeAlso": [], "Permissions": [], "Description": "Registers this channel with the given selector, returning a selection key. An invocation of this convenience method of the form", "history": "added in API level 1", "FullName": "public final SelectionKey register (Selector sel, int ops)"}, "configureBlocking(boolean)": {"Returns": [["@B_java#nio#channels#SelectableChannel_E@", "This selectable channel"]], "Parameters": [["boolean", "boolean: If true then this channel will be placed in blocking mode; if false then it will be placed non-blocking mode"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "If block is true and this channel is registered with one or more selectors"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts this channel's blocking mode. If this channel is registered with one or more selectors then an attempt to place it into blocking mode will cause an @B_java#nio#channels#IllegalBlockingModeException_E@ to be thrown. This method may be invoked at any time. The new blocking mode will only affect I/O operations that are initiated after this method returns. For some implementations this may require blocking until all pending I/O operations are complete. If this method is invoked while another invocation of this method or of the @B_java#nio#channels#SelectableChannel#register_E@ method is in progress then it will first block until the other operation is complete.", "history": "Added in API level 1", "FullName": "public abstract SelectableChannel configureBlocking (boolean block)"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#SelectorProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 1", "FullName": "public abstract SelectorProvider provider ()"}, "isRegistered()": {"Returns": [["boolean", "true if, and only if, this channel is registered"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel is currently registered with any selectors. A newly-created channel is not registered. Due to the inherent delay between key cancellation and channel deregistration, a channel may remain registered for some time after all of its keys have been cancelled. A channel may also remain registered for some time after it is closed.", "history": "Added in API level 1", "FullName": "public abstract boolean isRegistered ()"}, "register(java.nio.channels.Selector,int,java.lang.Object)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "A key representing the registration of this channel with the given selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector with which this channel is to be registered"], ["int", "int: The interest set for the resulting key"], ["@B_java#lang#Object_E@", "Object: The attachment for the resulting key; may be null"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If the selector is closed"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "If this channel is in blocking mode"], ["@B_java#nio#channels#IllegalSelectorException_E@", "If this channel was not created by the same provider as the given selector"], ["@B_java#nio#channels#CancelledKeyException_E@", "If this channel is currently registered with the given selector but the corresponding key has already been cancelled"], ["@B_java#lang#IllegalArgumentException_E@", "If a bit in the ops set does not correspond to an operation that is supported by this channel, that is, if set & ~validOps() != 0"]], "SeeAlso": [], "Permissions": [], "Description": "Registers this channel with the given selector, returning a selection key. If this channel is currently registered with the given selector then the selection key representing that registration is returned. The key's interest set will have been changed to @B_java#nio#channels#SelectionKey#interestOps_E@ method. If the @B_java#nio#channels#CancelledKeyException_E@ will be thrown if the key has already been cancelled. Otherwise this channel has not yet been registered with the given selector, so it is registered and the resulting new key is returned. The key's initial interest set will be This method may be invoked at any time. If this method is invoked while another invocation of this method or of the @B_java#nio#channels#SelectableChannel#configureBlocking_E@ method is in progress then it will first block until the other operation is complete. This method will then synchronize on the selector's key set and therefore may block if invoked concurrently with another registration or selection operation involving the same selector. If this channel is closed while this operation is in progress then the key returned by this method will have been cancelled and will therefore be invalid.", "history": "Added in API level 1", "FullName": "public abstract SelectionKey register (Selector sel, int ops, Object att)"}, "register(java.nio.channels.Selector,int)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "A key representing the registration of this channel with the given selector"]], "Parameters": [["@B_java#nio#channels#Selector_E@", "Selector: The selector with which this channel is to be registered"], ["int", "int: The interest set for the resulting key"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If the selector is closed"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "If this channel is in blocking mode"], ["@B_java#nio#channels#IllegalSelectorException_E@", "If this channel was not created by the same provider as the given selector"], ["@B_java#nio#channels#CancelledKeyException_E@", "If this channel is currently registered with the given selector but the corresponding key has already been cancelled"], ["@B_java#lang#IllegalArgumentException_E@", "If a bit in ops does not correspond to an operation that is supported by this channel, that is, if set & ~validOps() != 0"]], "SeeAlso": [], "Permissions": [], "Description": "Registers this channel with the given selector, returning a selection key. An invocation of this convenience method of the form", "history": "Added in API level 1", "FullName": "public final SelectionKey register (Selector sel, int ops)"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@"], "ClassName": "java.nio.channels.SelectableChannel", "ClassDesc": "A channel that can be multiplexed via a @B_java#nio#channels#Selector_E@. In order to be used with a selector, an instance of this class must first be @B_java#nio#channels#SelectableChannel#register_E@ method. This method returns a new @B_java#nio#channels#SelectionKey_E@ object that represents the channel's registration with the selector. Once registered with a selector, a channel remains registered until it is A channel cannot be deregistered directly; instead, the key representing its registration must be @B_java#nio#channels#SelectionKey#cancel_E@ method. All of a channel's keys are cancelled implicitly when the channel is closed, whether by invoking its @B_java#nio#channels#Channel#close_E@ method or by interrupting a thread blocked in an I/O operation upon the channel. If the selector itself is closed then the channel will be deregistered, and the key representing its registration will be invalidated, without further delay. A channel may be registered at most once with any particular selector. Whether or not a channel is registered with one or more selectors may be determined by invoking the @B_java#nio#channels#SelectableChannel#isRegistered_E@ method. Selectable channels are safe for use by multiple concurrent threads. @B_java#nio#channels#SelectableChannel#isBlocking_E@ method. Newly-created selectable channels are always in blocking mode. Non-blocking mode is most useful in conjunction with selector-based multiplexing. A channel must be placed into non-blocking mode before being registered with a selector, and may not be returned to blocking mode until it has been deregistered."}