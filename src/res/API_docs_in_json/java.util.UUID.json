{"Functions": {"getLeastSignificantBits()": {"Returns": [["long", "The least significant 64 bits of this UUID's 128 bit value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the least significant 64 bits of this UUID's 128 bit value.", "history": "Added in API level 1", "FullName": "public long getLeastSignificantBits ()"}, "version()": {"Returns": [["int", "The version number of this UUID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The version number associated with this UUID. The version number describes how this UUID was generated. The version number has the following meaning: 1 Time-based UUID 2 DCE security UUID 3 Name-based UUID 4 Randomly generated UUID", "history": "Added in API level 1", "FullName": "public int version ()"}, "variant()": {"Returns": [["int", "The variant number of this UUID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The variant number associated with this UUID. The variant number describes the layout of the UUID. The variant number has the following meaning: 0 Reserved for NCS backward compatibility 2 6 Reserved, Microsoft Corporation backward compatibility 7 Reserved for future definition", "history": "Added in API level 1", "FullName": "public int variant ()"}, "compareTo(java.util.UUID)": {"Returns": [["int", "-1, 0 or 1 as this UUID is less than, equal to, or greater than val"]], "Parameters": [["@B_java#util#UUID_E@", "UUID: UUID to which this UUID is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this UUID with the specified UUID. The first of two UUIDs is greater than the second if the most significant field in which the UUIDs differ is greater for the first UUID.", "history": "Added in API level 1", "FullName": "public int compareTo (UUID val)"}, "fromString(java.lang.String)": {"Returns": [["@B_java#util#UUID_E@", "A UUID with the specified value"]], "Parameters": [["@B_java#lang#String_E@", "String: A string that specifies a UUID"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If name does not conform to the string representation as described in @B_java#util#UUID#toString_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a UUID from the string standard representation as described in the @B_java#util#UUID#toString_E@ method.", "history": "Added in API level 1", "FullName": "public static UUID fromString (String name)"}, "timestamp()": {"Returns": [["long", "The timestamp of this UUID."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this UUID is not a version 1 UUID"]], "SeeAlso": [], "Permissions": [], "Description": "The timestamp value associated with this UUID. The 60 bit timestamp value is constructed from the time_low, time_mid, and time_hi fields of this UUID. The resulting timestamp is measured in 100-nanosecond units since midnight, October 15, 1582 UTC. The timestamp value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public long timestamp ()"}, "nameUUIDFromBytes(byte[])": {"Returns": [["@B_java#util#UUID_E@", "A UUID generated from the specified array"]], "Parameters": [["byte[]", "byte: A byte array to be used to construct a UUID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.", "history": "Added in API level 1", "FullName": "public static UUID nameUUIDFromBytes (byte[] name)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string representation of this UUID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing this UUID. The UUID string representation is as described by this BNF:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "node()": {"Returns": [["long", "The node value of this UUID"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this UUID is not a version 1 UUID"]], "SeeAlso": [], "Permissions": [], "Description": "The node value associated with this UUID. The 48 bit node value is constructed from the node field of this UUID. This field is intended to hold the IEEE 802 address of the machine that generated this UUID to guarantee spatial uniqueness. The node value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public long node ()"}, "getMostSignificantBits()": {"Returns": [["long", "The most significant 64 bits of this UUID's 128 bit value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the most significant 64 bits of this UUID's 128 bit value.", "history": "Added in API level 1", "FullName": "public long getMostSignificantBits ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object to the specified object. The result is true if and only if the argument is not null, is a UUID object, has the same variant, and contains the same value, bit for bit, as this UUID.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "randomUUID()": {"Returns": [["@B_java#util#UUID_E@", "A randomly generated UUID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Static factory to retrieve a type 4 (pseudo randomly generated) UUID. The UUID is generated using a cryptographically strong pseudo random number generator.", "history": "Added in API level 1", "FullName": "public static UUID randomUUID ()"}, "UUID(long,long)": {"Returns": [], "Parameters": [["long", "long: The most significant bits of the UUID"], ["long", "long: The least significant bits of the UUID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new UUID using the specified data. mostSigBits is used for the most significant 64 bits of the UUID and leastSigBits becomes the least significant 64 bits of the UUID.", "history": "Added in API level 1", "FullName": "public UUID (long mostSigBits, long leastSigBits)"}, "hashCode()": {"Returns": [["int", "A hash code value for this UUID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this UUID.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "UUID(long, long)": {"Returns": [], "Parameters": [["long", "long: The most significant bits of the UUID"], ["long", "long: The least significant bits of the UUID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new UUID using the specified data. mostSigBits is used for the most significant 64 bits of the UUID and leastSigBits becomes the least significant 64 bits of the UUID.", "history": "added in API level 1", "FullName": "public UUID (long mostSigBits, long leastSigBits)"}, "clockSequence()": {"Returns": [["int", "The clock sequence of this UUID"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this UUID is not a version 1 UUID"]], "SeeAlso": [], "Permissions": [], "Description": "The clock sequence value associated with this UUID. The 14 bit clock sequence value is constructed from the clock sequence field of this UUID. The clock sequence field is used to guarantee temporal uniqueness in a time-based UUID. The clockSequence value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public int clockSequence ()"}}, "Inheritance": [], "ClassName": "java.util.UUID", "ClassDesc": "A class that represents an immutable universally unique identifier (UUID). A UUID represents a 128-bit value. There exist different variants of these global identifiers. The methods of this class are for manipulating the Leach-Salz variant, although the constructors allow the creation of any variant of UUID (described below). The layout of a variant 2 (Leach-Salz) UUID is as follows: The most significant long consists of the following unsigned fields: The variant field contains a value which identifies the layout of the UUID. The bit layout described above is valid only for a UUID with a variant value of 2, which indicates the Leach-Salz variant. The version field holds a value that describes the type of this UUID. There are four different basic types of UUIDs: time-based, DCE security, name-based, and randomly generated UUIDs. These types have a version value of 1, 2, 3 and 4, respectively. For more information including algorithms used to create UUIDs, see"}