{"Functions": {"getRules()": {"Returns": [["@B_java#lang#String_E@", "returns the collation rules that the table collation object was created from."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the table-based rules for the collation object. On Android, the returned string will be empty unless this instance was constructed using @B_java#text#RuleBasedCollator#RuleBasedCollator_E@.", "history": "Added in API level 1", "FullName": "public String getRules ()"}, "compare(java.lang.String, java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string."], ["@B_java#lang#String_E@", "String: the target string."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if source or target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the character data stored in two different strings based on the collation rules. Returns information about whether a string is less than, greater than or equal to another string in a language. This can be overriden in a subclass.", "history": "added in API level 1", "FullName": "public int compare (String source, String target)"}, "RuleBasedCollator(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the collation rules to build the collation table from."]], "Throws": [["@B_java#text#ParseException_E@", "A format exception will be thrown if the build process of the rules fails. For example, build rule \"a < ? < d\" will cause the constructor to throw the ParseException because the '?' is not quoted."]], "SeeAlso": ["@B_java#util#Locale_E@"], "Permissions": [], "Description": "RuleBasedCollator constructor. This takes the table rules and builds a collation table out of them. Please see RuleBasedCollator class description for more details on the collation rule syntax.", "history": "Added in API level 1", "FullName": "public RuleBasedCollator (String rules)"}, "getCollationElementIterator(java.lang.String)": {"Returns": [["@B_java#text#CollationElementIterator_E@", "a CollationElementIterator object"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be collated"]], "Throws": [], "SeeAlso": ["@B_java#text#CollationElementIterator_E@"], "Permissions": [], "Description": "Returns a CollationElementIterator for the given String.", "history": "Added in API level 1", "FullName": "public CollationElementIterator getCollationElementIterator (String source)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the current table-based collation object is the same as the table-based collation object obj; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the table-based collation object to be compared with this."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the equality of two collation objects.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getCollationElementIterator(java.text.CharacterIterator)": {"Returns": [["@B_java#text#CollationElementIterator_E@", "a CollationElementIterator object"]], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: the character iterator to be collated"]], "Throws": [], "SeeAlso": ["@B_java#text#CollationElementIterator_E@"], "Permissions": [], "Description": "Returns a CollationElementIterator for the given CharacterIterator.", "history": "Added in API level 1", "FullName": "public CollationElementIterator getCollationElementIterator (CharacterIterator source)"}, "compare(java.lang.String,java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string."], ["@B_java#lang#String_E@", "String: the target string."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if source or target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the character data stored in two different strings based on the collation rules. Returns information about whether a string is less than, greater than or equal to another string in a language. This can be overriden in a subclass.", "history": "Added in API level 1", "FullName": "public int compare (String source, String target)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this collator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard override; no change in semantics.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getCollationKey(java.lang.String)": {"Returns": [["@B_java#text#CollationKey_E@", "the CollationKey for the given String based on this Collator's collation rules. If the source String is null, a null CollationKey is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be transformed into a collation key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transforms the string into a series of characters that can be compared with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey. It can be overriden in a subclass.", "history": "Added in API level 1", "FullName": "public CollationKey getCollationKey (String source)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the hash code for the table-based collation object", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#text#Collator_E@"], "ClassName": "java.text.RuleBasedCollator", "ClassDesc": "The RuleBasedCollator class is a concrete subclass of Collator that provides a simple, data-driven, table collator. With this class you can create a customized table-based Collator. RuleBasedCollator maps characters to sort keys. RuleBasedCollator has the following restrictions for efficiency (other subclasses may be used for more complex languages) : The collation table is composed of a list of collation rules, where each rule is of one of three forms: b c is treated as bc. '@' : Turns on backwards sorting of accents (secondary differences), as in French. '!' : Turns on Thai/Lao vowel-consonant swapping. If this rule is in force when a Thai vowel of the range \\U0E40-\\U0E44 precedes a Thai consonant of the range \\U0E01-\\U0E2E OR a Lao vowel of the range \\U0EC0-\\U0EC4 precedes a Lao consonant of the range \\U0E81-\\U0EAE then the vowel is placed after the consonant for collation purposes. '@' : Indicates that accents are sorted backwards, as in French. '<' : Greater, as a letter difference (primary) ';' : Greater, as an accent difference (secondary) ',' : Greater, as a case difference (tertiary) '=' : Equal '&' : Indicates that the next rule follows the position to where the reset text-argument would be sorted. This sounds more complicated than it is in practice. For example, the following are equivalent ways of expressing the same thing: For ignorable characters, the first rule must start with a relation (the examples we have used above are really fragments; \"a < b\" really should be \"< a < b\"). If, however, the first relation is not \"<\", then all the all text-arguments up to the first \"<\" are ignorable. For example, \", - < a < b\" makes \"-\" an ignorable character, as we saw earlier in the word \"black-birds\". In the samples for different languages, you see that most accents are ignorable. RuleBasedCollator automatically processes its rule table to include both pre-composed and combining-character versions of accented characters. Even if the provided rule string contains only base characters and separate combining accent characters, the pre-composed accented characters matching all canonical combinations of characters from the rule string will be entered in the table. This allows you to use a RuleBasedCollator to compare accented strings even when the collator is set to NO_DECOMPOSITION. There are two caveats, however. First, if the strings to be collated contain combining sequences that may not be in canonical order, you should set the collator to CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of combining sequences. Second, if the strings contain characters with compatibility decompositions (such as full-width and half-width forms), you must use FULL_DECOMPOSITION, since the rule tables only include canonical mappings. The following are errors: A text-argument contains unquoted punctuation symbols (e.g. \"a < b-c < d\"). A relation or reset character not followed by a text-argument (e.g. \"a < ,b\"). A reset where the text-argument (or an initial substring of the text-argument) is not already in the sequence. (e.g. \"a < b & e < f\") If you produce one of these errors, a RuleBasedCollator throws a ParseException. Simple: \"< a < b < c < d\" Norwegian: \"< a, A < b, B < c, C < d, D < e, E < f, F < g, G < h, H < i, I < j, J < k, K < l, L < m, M < n, N < o, O < p, P < q, Q < r, R < s, S < t, T < u, U < v, V < w, W < x, X < y, Y < z, Z < \\u00E6, \\u00C6 < \\u00F8, \\u00D8 < \\u00E5 = a\\u030A, \\u00C5 = A\\u030A; aa, AA\" To create a RuleBasedCollator object with specialized rules tailored to your needs, you construct the RuleBasedCollator with the rules contained in a String object. For example: A new collation rules string can be created by concatenating rules strings. For example, the rules returned by @B_java#text#RuleBasedCollator#getRules_E@ could be concatenated to combine multiple RuleBasedCollators. The following example demonstrates how to change the order of non-spacing accents,"}