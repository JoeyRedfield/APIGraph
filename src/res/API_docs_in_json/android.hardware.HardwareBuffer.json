{"Functions": {"isSupported(int,int,int,int,long)": {"Returns": [["boolean", "True if the combination is supported, false otherwise."]], "Parameters": [["int", "int: The width in pixels of the buffer Value is 1 or greater"], ["int", "int: The height in pixels of the buffer Value is 1 or greater"], ["int", "int: The @Format of each pixel Value is @B_android#hardware#HardwareBuffer#RGBA_8888_E@, @B_android#hardware#HardwareBuffer#RGBA_FP16_E@, @B_android#hardware#HardwareBuffer#RGBA_1010102_E@, @B_android#hardware#HardwareBuffer#RGBX_8888_E@, @B_android#hardware#HardwareBuffer#RGB_888_E@, @B_android#hardware#HardwareBuffer#RGB_565_E@, @B_android#hardware#HardwareBuffer#BLOB_E@, @B_android#hardware#HardwareBuffer#D_16_E@, @B_android#hardware#HardwareBuffer#D_24_E@, @B_android#hardware#HardwareBuffer#DS_24UI8_E@, @B_android#hardware#HardwareBuffer#D_FP32_E@, @B_android#hardware#HardwareBuffer#DS_FP32UI8_E@, or @B_android#hardware#HardwareBuffer#S_UI8_E@"], ["int", "int: The number of layers in the buffer Value is 1 or greater"], ["long", "long: The @Usage flags describing how the buffer will be used Value is either 0 or a combination of @B_android#hardware#HardwareBuffer#USAGE_CPU_READ_RARELY_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_READ_OFTEN_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_WRITE_RARELY_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_WRITE_OFTEN_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_COLOR_OUTPUT_E@, @B_android#hardware#HardwareBuffer#USAGE_PROTECTED_CONTENT_E@, @B_android#hardware#HardwareBuffer#USAGE_VIDEO_ENCODE_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_DATA_BUFFER_E@, @B_android#hardware#HardwareBuffer#USAGE_SENSOR_DIRECT_DATA_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_CUBE_MAP_E@, and @B_android#hardware#HardwareBuffer#USAGE_GPU_MIPMAP_COMPLETE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether the given buffer description is supported by the system. If this returns true, then the allocation may succeed until resource exhaustion occurs. If this returns false then this combination will never succeed.", "history": "Added in API level 29", "FullName": "public static boolean isSupported (int width, int height, int format, int layers, long usage)"}, "isClosed()": {"Returns": [["boolean", "True if this HardwareBuffer is in a closed state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#HardwareBuffer#close_E@"], "Permissions": [], "Description": "Indicates whether this buffer has been closed. A closed buffer cannot be used in any way: the buffer cannot be written to a parcel, etc.", "history": "Added in API level 26", "FullName": "public boolean isClosed ()"}, "create(int, int, int, int, long)": {"Returns": [["@B_android#hardware#HardwareBuffer_E@", "A HardwareBuffer instance if successful, or throws an IllegalArgumentException if the dimensions passed are invalid (either zero, negative, or too large to allocate), if the format is not supported, if the requested number of layers is less than one or not supported, or if the passed usage flags are not a supported set. This value will never be null."]], "Parameters": [["int", "int: The width in pixels of the buffer"], ["int", "int: The height in pixels of the buffer"], ["int", "int: The @Format of each pixelValue is RGBA_8888, RGBA_FP16, RGBA_1010102, RGBX_8888, RGB_888, RGB_565, BLOB, D_16, D_24, DS_24UI8, D_FP32, DS_FP32UI8 or S_UI8."], ["int", "int: The number of layers in the buffer"], ["long", "long: The @Usage flags describing how the buffer will be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new HardwareBuffer instance. Calling this method will throw an IllegalStateException if format is not a supported Format type.", "history": "added in API level 26", "FullName": "public static HardwareBuffer create (int width, int height, int format, int layers, long usage)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#HardwareBuffer#isClosed_E@"], "Permissions": [], "Description": "Destroys this buffer immediately. Calling this method frees up any underlying native resources. After calling this method, this buffer must not be used in any way.", "history": "Added in API level 26", "FullName": "public void close ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 26", "FullName": "public int describeContents ()"}, "getUsage()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the usage flags of the usage hints set on this buffer.", "history": "Added in API level 26", "FullName": "public long getUsage ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel. Calling this method will throw an IllegalStateException if @B_android#hardware#HardwareBuffer#close_E@ has been previously called.", "history": "added in API level 26", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the height of this buffer in pixels.", "history": "Added in API level 26", "FullName": "public int getHeight ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 26", "FullName": "protected void finalize ()"}, "getLayers()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of layers in this buffer.", "history": "Added in API level 26", "FullName": "public int getLayers ()"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the width of this buffer in pixels.", "history": "Added in API level 26", "FullName": "public int getWidth ()"}, "create(int,int,int,int,long)": {"Returns": [["@B_android#hardware#HardwareBuffer_E@", "A HardwareBuffer instance if successful, or throws an IllegalArgumentException if the dimensions passed are invalid (either zero, negative, or too large to allocate), if the format is not supported, if the requested number of layers is less than one or not supported, or if the passed usage flags are not a supported set. This value will never be null."]], "Parameters": [["int", "int: The width in pixels of the buffer Value is 1 or greater"], ["int", "int: The height in pixels of the buffer Value is 1 or greater"], ["int", "int: The @Format of each pixel Value is @B_android#hardware#HardwareBuffer#RGBA_8888_E@, @B_android#hardware#HardwareBuffer#RGBA_FP16_E@, @B_android#hardware#HardwareBuffer#RGBA_1010102_E@, @B_android#hardware#HardwareBuffer#RGBX_8888_E@, @B_android#hardware#HardwareBuffer#RGB_888_E@, @B_android#hardware#HardwareBuffer#RGB_565_E@, @B_android#hardware#HardwareBuffer#BLOB_E@, @B_android#hardware#HardwareBuffer#D_16_E@, @B_android#hardware#HardwareBuffer#D_24_E@, @B_android#hardware#HardwareBuffer#DS_24UI8_E@, @B_android#hardware#HardwareBuffer#D_FP32_E@, @B_android#hardware#HardwareBuffer#DS_FP32UI8_E@, or @B_android#hardware#HardwareBuffer#S_UI8_E@"], ["int", "int: The number of layers in the buffer Value is 1 or greater"], ["long", "long: The @Usage flags describing how the buffer will be used Value is either 0 or a combination of @B_android#hardware#HardwareBuffer#USAGE_CPU_READ_RARELY_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_READ_OFTEN_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_WRITE_RARELY_E@, @B_android#hardware#HardwareBuffer#USAGE_CPU_WRITE_OFTEN_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_COLOR_OUTPUT_E@, @B_android#hardware#HardwareBuffer#USAGE_PROTECTED_CONTENT_E@, @B_android#hardware#HardwareBuffer#USAGE_VIDEO_ENCODE_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_DATA_BUFFER_E@, @B_android#hardware#HardwareBuffer#USAGE_SENSOR_DIRECT_DATA_E@, @B_android#hardware#HardwareBuffer#USAGE_GPU_CUBE_MAP_E@, and @B_android#hardware#HardwareBuffer#USAGE_GPU_MIPMAP_COMPLETE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new HardwareBuffer instance. Calling this method will throw an IllegalStateException if format is not a supported Format type.", "history": "Added in API level 26", "FullName": "public static HardwareBuffer create (int width, int height, int format, int layers, long usage)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel. Calling this method will throw an IllegalStateException if @B_android#hardware#HardwareBuffer#close_E@ has been previously called.", "history": "Added in API level 26", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getFormat()": {"Returns": [["int", "Value is @B_android#hardware#HardwareBuffer#RGBA_8888_E@, @B_android#hardware#HardwareBuffer#RGBA_FP16_E@, @B_android#hardware#HardwareBuffer#RGBA_1010102_E@, @B_android#hardware#HardwareBuffer#RGBX_8888_E@, @B_android#hardware#HardwareBuffer#RGB_888_E@, @B_android#hardware#HardwareBuffer#RGB_565_E@, @B_android#hardware#HardwareBuffer#BLOB_E@, @B_android#hardware#HardwareBuffer#D_16_E@, @B_android#hardware#HardwareBuffer#D_24_E@, @B_android#hardware#HardwareBuffer#DS_24UI8_E@, @B_android#hardware#HardwareBuffer#D_FP32_E@, @B_android#hardware#HardwareBuffer#DS_FP32UI8_E@, or @B_android#hardware#HardwareBuffer#S_UI8_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @Format of this buffer.", "history": "Added in API level 26", "FullName": "public int getFormat ()"}}, "Inheritance": [], "ClassName": "android.hardware.HardwareBuffer", "ClassDesc": "HardwareBuffer wraps a native AHardwareBuffer object, which is a low-level object representing a memory buffer accessible by various hardware units. HardwareBuffer allows sharing buffers across different application processes. In particular, HardwareBuffers may be mappable to memory accessibly to various hardware systems, such as the GPU, a sensor or context hub, or other auxiliary processing units. For more information, see the NDK documentation for AHardwareBuffer."}