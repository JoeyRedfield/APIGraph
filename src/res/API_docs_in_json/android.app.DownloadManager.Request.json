{"Functions": {"setDescription(java.lang.CharSequence)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a description of this download, to be displayed in notifications (if enabled)", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setDescription (CharSequence description)"}, "setRequiresDeviceIdle(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Whether or not the device need be within an idle maintenance window."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#Builder#setRequiresDeviceIdle_E@"], "Permissions": [], "Description": "Specify that to run, the download needs the device to be in idle mode. This defaults to false. Idle mode is a loose definition provided by the system, which means that the device is not in use, and has not been in use for some time.", "history": "Added in API level 24", "FullName": "public DownloadManager.Request setRequiresDeviceIdle (boolean requiresDeviceIdle)"}, "setAllowedNetworkTypes(int)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["int", "int: any combination of the NETWORK_* bit flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Restrict the types of networks over which this download may proceed. By default, all network types are allowed. Consider using @B_android#app#DownloadManager#Request#setAllowedOverMetered_E@ instead, since it's more flexible. As of @B_android#os#Build#VERSION_CODES#N_E@, setting only the @B_android#app#DownloadManager#Request#NETWORK_WIFI_E@ flag here is equivalent to calling @B_android#app#DownloadManager#Request#setAllowedOverMetered_E@ with false.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setAllowedNetworkTypes (int flags)"}, "setAllowedOverMetered(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#net#ConnectivityManager#isActiveNetworkMetered_E@"], "Permissions": [], "Description": "Set whether this download may proceed over a metered network connection. By default, metered networks are allowed.", "history": "Added in API level 16", "FullName": "public DownloadManager.Request setAllowedOverMetered (boolean allow)"}, "setDestinationUri(android.net.Uri)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_android#net#Uri_E@", "Uri: a file @B_android#net#Uri_E@ indicating the destination for the downloaded file."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@"], "Description": "Set the local destination for the downloaded file. Must be a file URI to a path on external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE permission. The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling @B_android#app#DownloadManager#Request#allowScanningByMediaScanner_E@. By default, downloads are saved to a generated filename in the shared download cache and may be deleted by the system at any time to reclaim space. For applications targeting @B_android#os#Build#VERSION_CODES#Q_E@ or above, @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ permission is not needed and the uri must refer to a path within the directories owned by the application (e.g. @B_android#content#Context#getExternalFilesDir_E@) or a path within the top-level Downloads directory (as returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@ with @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@).", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setDestinationUri (Uri uri)"}, "setAllowedOverRoaming(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["boolean", "boolean: whether to allow a roaming connection to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this download may proceed over a roaming connection. By default, roaming is allowed.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setAllowedOverRoaming (boolean allowed)"}, "setDestinationInExternalPublicDir(java.lang.String,java.lang.String)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_java#lang#String_E@", "String: the directory type to pass to @B_android#os#Environment#getExternalStoragePublicDirectory_E@"], ["@B_java#lang#String_E@", "String: the path within the external directory, including the destination filename"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the external storage directory cannot be found or created."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@"], "Description": "Set the local destination for the downloaded file to a path within the public external storage directory (as returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@). The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling @B_android#app#DownloadManager#Request#allowScanningByMediaScanner_E@. For applications targeting @B_android#os#Build#VERSION_CODES#Q_E@ or above, @B_android#Manifest#permission#WRITE_EXTERNAL_STORAGE_E@ permission is not needed and the dirType must be one of the known public directories like @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@, @B_android#os#Environment#DIRECTORY_PICTURES_E@, @B_android#os#Environment#DIRECTORY_MOVIES_E@, etc.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setDestinationInExternalPublicDir (String dirType, String subPath)"}, "addRequestHeader(java.lang.String,java.lang.String)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_java#lang#String_E@", "String: HTTP header name"], ["@B_java#lang#String_E@", "String: header value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add an HTTP header to be included with the download request. The header will be added to the end of the list.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request addRequestHeader (String header, String value)"}, "setNotificationVisibility(int)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["int", "int: the visibility setting value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether a system notification is posted by the download manager while this download is running or when it is completed. If enabled, the download manager posts notifications about downloads through the system @B_android#app#NotificationManager_E@. By default, a notification is shown only when the download is in progress. It can take the following values: @B_android#app#DownloadManager#Request#VISIBILITY_HIDDEN_E@, @B_android#app#DownloadManager#Request#VISIBILITY_VISIBLE_E@, @B_android#app#DownloadManager#Request#VISIBILITY_VISIBLE_NOTIFY_COMPLETED_E@. If set to @B_android#app#DownloadManager#Request#VISIBILITY_HIDDEN_E@, this requires the permission android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.", "history": "Added in API level 11", "FullName": "public DownloadManager.Request setNotificationVisibility (int visibility)"}, "DownloadManager.Request(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the HTTP or HTTPS URI to download."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public DownloadManager.Request (Uri uri)"}, "setRequiresCharging(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Whether or not the device is plugged in."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#Builder#setRequiresCharging_E@"], "Permissions": [], "Description": "Specify that to run this download, the device needs to be plugged in. This defaults to false.", "history": "Added in API level 24", "FullName": "public DownloadManager.Request setRequiresCharging (boolean requiresCharging)"}, "allowScanningByMediaScanner()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starting in Q, this value is ignored. Files downloaded to directories owned by applications (e.g. @B_android#content#Context#getExternalFilesDir_E@) will not be scanned by MediaScanner and the rest will be scanned. If the file to be downloaded is to be scanned by MediaScanner, this method should be called before @B_android#app#DownloadManager#enqueue_E@ is called.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public void allowScanningByMediaScanner ()"}, "setVisibleInDownloadsUi(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["boolean", "boolean: whether to display this download in the Downloads UI"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starting in Q, this value is ignored. Only files downloaded to public Downloads directory (as returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@ with @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@) will be visible in system's Downloads UI and the rest will not be visible. (e.g. @B_android#content#Context#getExternalFilesDir_E@) will not be visible. Set whether this download should be displayed in the system's Downloads UI. True by default.", "history": "Added in API level 9 Deprecated in API level 29", "FullName": "public DownloadManager.Request setVisibleInDownloadsUi (boolean isVisible)"}, "setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@ to use in determining the external files directory"], ["@B_java#lang#String_E@", "String: the directory type to pass to @B_android#content#Context#getExternalFilesDir_E@"], ["@B_java#lang#String_E@", "String: the path within the external directory, including the destination filename"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the external storage directory cannot be found or created."]], "SeeAlso": [], "Permissions": [], "Description": "Set the local destination for the downloaded file to a path within the application's external files directory (as returned by @B_android#content#Context#getExternalFilesDir_E@. The downloaded file is not scanned by MediaScanner. But it can be made scannable by calling @B_android#app#DownloadManager#Request#allowScanningByMediaScanner_E@.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setDestinationInExternalFilesDir (Context context, String dirType, String subPath)"}, "setTitle(java.lang.CharSequence)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of this download, to be displayed in notifications (if enabled). If no title is given, a default one will be assigned based on the download filename, once the download starts.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setTitle (CharSequence title)"}, "setShowRunningNotification(boolean)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["boolean", "boolean: whether the download manager should show a notification for this download."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#app#DownloadManager#Request#setNotificationVisibility_E@ Control whether a system notification is posted by the download manager while this download is running. If enabled, the download manager posts notifications about downloads through the system @B_android#app#NotificationManager_E@. By default, a notification is shown. If set to false, this requires the permission android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.", "history": "Added in API level 9 Deprecated in API level 15", "FullName": "public DownloadManager.Request setShowRunningNotification (boolean show)"}, "setMimeType(java.lang.String)": {"Returns": [["@B_android#app#DownloadManager#Request_E@", "this object"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the MIME content type of this download. This will override the content type declared in the server's response.", "history": "Added in API level 9", "FullName": "public DownloadManager.Request setMimeType (String mimeType)"}}, "Inheritance": [], "ClassName": "android.app.DownloadManager.Request", "ClassDesc": "This class contains all the information necessary to request a new download. The URI is the only required parameter. Note that the default download destination is a shared volume where the system might delete your file if it needs to reclaim space for system use. If this is a problem, use a location on external storage (see @B_android#app#DownloadManager#Request#setDestinationUri_E@."}