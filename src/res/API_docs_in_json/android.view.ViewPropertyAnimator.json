{"Functions": {"scaleXBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setScaleX_E@"], "Permissions": [], "Description": "This method will cause the View's scaleX property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator scaleXBy (float value)"}, "x(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setX_E@"], "Permissions": [], "Description": "This method will cause the View's x property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator x (float value)"}, "zBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setZ_E@"], "Permissions": [], "Description": "This method will cause the View's z property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 21", "FullName": "public ViewPropertyAnimator zBy (float value)"}, "setDuration(long)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["long", "long: The length of ensuing property animations, in milliseconds. The value cannot be negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration for the underlying animator that animates the requested properties. By default, the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator setDuration (long duration)"}, "getDuration()": {"Returns": [["long", "The duration of animations, in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewPropertyAnimator#setDuration_E@"], "Permissions": [], "Description": "Returns the current duration of property animations. If the duration was set on this object, that value is returned. Otherwise, the default value of the underlying Animator is returned.", "history": "Added in API level 14", "FullName": "public long getDuration ()"}, "rotationY(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotationY_E@"], "Permissions": [], "Description": "This method will cause the View's rotationY property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotationY (float value)"}, "translationXBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationX_E@"], "Permissions": [], "Description": "This method will cause the View's translationX property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator translationXBy (float value)"}, "rotationBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotation_E@"], "Permissions": [], "Description": "This method will cause the View's rotation property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotationBy (float value)"}, "rotationYBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotationY_E@"], "Permissions": [], "Description": "This method will cause the View's rotationY property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotationYBy (float value)"}, "getStartDelay()": {"Returns": [["long", "The startDelay of animations, in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#ViewPropertyAnimator#setStartDelay_E@"], "Permissions": [], "Description": "Returns the current startDelay of property animations. If the startDelay was set on this object, that value is returned. Otherwise, the default value of the underlying Animator is returned.", "history": "Added in API level 14", "FullName": "public long getStartDelay ()"}, "setStartDelay(long)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["long", "long: The delay of ensuing property animations, in milliseconds. The value cannot be negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the startDelay for the underlying animator that animates the requested properties. By default, the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead.", "history": "Added in API level 14", "FullName": "public ViewPropertyAnimator setStartDelay (long startDelay)"}, "setListener(android.animation.Animator.AnimatorListener)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["@B_android#animation#Animator#AnimatorListener_E@", "Animator.AnimatorListener: The listener to be called with AnimatorListener events. A value of null removes any existing listener."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#AnimatorListener_E@"], "Permissions": [], "Description": "Sets a listener for events in the underlying Animators that run the property animations.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator setListener (Animator.AnimatorListener listener)"}, "rotationX(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotationX_E@"], "Permissions": [], "Description": "This method will cause the View's rotationX property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotationX (float value)"}, "withEndAction(java.lang.Runnable)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The action to run when the next animation ends."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies an action to take place when the next animation ends. The action is only run if the animation ends normally; if the ViewPropertyAnimator is canceled during that animation, the runnable will not run. This method, along with @B_android#view#ViewPropertyAnimator#withStartAction_E@, is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application. For example, the following code animates a view to x=200 and then back to 0:", "history": "Added in API level 16", "FullName": "public ViewPropertyAnimator withEndAction (Runnable runnable)"}, "z(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setZ_E@"], "Permissions": [], "Description": "This method will cause the View's z property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 21", "FullName": "public ViewPropertyAnimator z (float value)"}, "translationZBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationZ_E@"], "Permissions": [], "Description": "This method will cause the View's translationZ property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 21", "FullName": "public ViewPropertyAnimator translationZBy (float value)"}, "alphaBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setAlpha_E@"], "Permissions": [], "Description": "This method will cause the View's alpha property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator alphaBy (float value)"}, "withStartAction(java.lang.Runnable)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The action to run when the next animation starts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies an action to take place when the next animation runs. If there is a @B_android#view#ViewPropertyAnimator#setStartDelay_E@ set on this ViewPropertyAnimator, then the action will run after that startDelay expires, when the actual animation begins. This method, along with @B_android#view#ViewPropertyAnimator#withEndAction_E@, is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application.", "history": "Added in API level 16", "FullName": "public ViewPropertyAnimator withStartAction (Runnable runnable)"}, "translationYBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationY_E@"], "Permissions": [], "Description": "This method will cause the View's translationY property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator translationYBy (float value)"}, "alpha(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setAlpha_E@"], "Permissions": [], "Description": "This method will cause the View's alpha property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator alpha (float value)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the currently pending property animations immediately. Calling start() is optional because all animations start automatically at the next opportunity. However, if the animations are needed to start immediately and synchronously (not at the time when the next event is processed by the hierarchy, which is when the animations would begin otherwise), then this method can be used.", "history": "Added in API level 14", "FullName": "public void start ()"}, "translationX(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationX_E@"], "Permissions": [], "Description": "This method will cause the View's translationX property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator translationX (float value)"}, "translationZ(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationZ_E@"], "Permissions": [], "Description": "This method will cause the View's translationZ property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 21", "FullName": "public ViewPropertyAnimator translationZ (float value)"}, "y(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setY_E@"], "Permissions": [], "Description": "This method will cause the View's y property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator y (float value)"}, "scaleX(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setScaleX_E@"], "Permissions": [], "Description": "This method will cause the View's scaleX property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator scaleX (float value)"}, "scaleYBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setScaleY_E@"], "Permissions": [], "Description": "This method will cause the View's scaleY property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator scaleYBy (float value)"}, "setUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["@B_android#animation#ValueAnimator#AnimatorUpdateListener_E@", "ValueAnimator.AnimatorUpdateListener: The listener to be called with update events. A value of null removes any existing listener."]], "Throws": [], "SeeAlso": ["@B_android#animation#ValueAnimator#AnimatorUpdateListener_E@"], "Permissions": [], "Description": "Sets a listener for update events in the underlying ValueAnimator that runs the property animations. Note that the underlying animator is animating between 0 and 1 (these values are then turned into the actual property values internally by ViewPropertyAnimator). So the animator cannot give information on the current values of the properties being animated by this ViewPropertyAnimator, although the view object itself can be queried to get the current values.", "history": "Added in API level 19", "FullName": "public ViewPropertyAnimator setUpdateListener (ValueAnimator.AnimatorUpdateListener listener)"}, "withLayer()": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#setLayerType_E@"], "Permissions": [], "Description": "The View associated with this ViewPropertyAnimator will have its @B_android#view#View#setLayerType_E@ set to @B_android#view#View#LAYER_TYPE_HARDWARE_E@ for the duration of the next animation. As stated in the documentation for @B_android#view#View#LAYER_TYPE_HARDWARE_E@, the actual type of layer used internally depends on the runtime situation of the view. If the activity and this view are hardware-accelerated, then the layer will be accelerated as well. If the activity or the view is not accelerated, then the layer will effectively be the same as @B_android#view#View#LAYER_TYPE_SOFTWARE_E@. This state is not persistent, either on the View or on this ViewPropertyAnimator: the layer type of the View will be restored when the animation ends to what it was when this method was called, and this setting on ViewPropertyAnimator is only valid for the next animation. Note that calling this method and then independently setting the layer type of the View (by a direct call to @B_android#view#View#setLayerType_E@) will result in some inconsistency, including having the layer type restored to its pre-withLayer() value when the animation ends.", "history": "Added in API level 16", "FullName": "public ViewPropertyAnimator withLayer ()"}, "yBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setY_E@"], "Permissions": [], "Description": "This method will cause the View's y property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator yBy (float value)"}, "scaleY(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setScaleY_E@"], "Permissions": [], "Description": "This method will cause the View's scaleY property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator scaleY (float value)"}, "translationY(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setTranslationY_E@"], "Permissions": [], "Description": "This method will cause the View's translationY property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator translationY (float value)"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels all property animations that are currently running or pending.", "history": "Added in API level 14", "FullName": "public void cancel ()"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: The TimeInterpolator to be used for ensuing property animations. A value of null will result in linear interpolation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the interpolator for the underlying animator that animates the requested properties. By default, the animator uses the default interpolator for ValueAnimator. Calling this method will cause the declared object to be used instead.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator setInterpolator (TimeInterpolator interpolator)"}, "xBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setX_E@"], "Permissions": [], "Description": "This method will cause the View's x property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator xBy (float value)"}, "rotation(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The value to be animated to."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotation_E@"], "Permissions": [], "Description": "This method will cause the View's rotation property to be animated to the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotation (float value)"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The timing interpolator for this animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timing interpolator that this animation uses.", "history": "Added in API level 18", "FullName": "public TimeInterpolator getInterpolator ()"}, "rotationXBy(float)": {"Returns": [["@B_android#view#ViewPropertyAnimator_E@", "This object, allowing calls to methods in this class to be chained."]], "Parameters": [["float", "float: The amount to be animated by, as an offset from the current value."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setRotationX_E@"], "Permissions": [], "Description": "This method will cause the View's rotationX property to be animated by the specified value. Animations already running on the property will be canceled.", "history": "Added in API level 12", "FullName": "public ViewPropertyAnimator rotationXBy (float value)"}}, "Inheritance": [], "ClassName": "android.view.ViewPropertyAnimator", "ClassDesc": "This class enables automatic and optimized animation of select properties on View objects. If only one or two properties on a View object are being animated, then using an @B_android#animation#ObjectAnimator_E@ is fine; the property setters called by ObjectAnimator are well equipped to do the right thing to set the property and invalidate the view appropriately. But if several properties are animated simultaneously, or if you just want a more convenient syntax to animate a specific property, then ViewPropertyAnimator might be more well-suited to the task. This class may provide better performance for several simultaneous animations, because it will optimize invalidate calls to take place only once for several properties instead of each animated property independently causing its own invalidation. Also, the syntax of using this class could be easier to use because the caller need only tell the View object which property to animate, and the value to animate either to or by, and this class handles the details of configuring the underlying Animator class and starting it. This class is not constructed by the caller, but rather by the View whose properties it will animate. Calls to @B_android#view#View#animate_E@ will return a reference to the appropriate ViewPropertyAnimator object for that View."}