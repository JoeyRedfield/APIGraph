{"Functions": {"sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["short", "short: the port to deliver the message to"], ["byte[]", "byte: the body of the message to send"], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is sucessfully sent, or failed. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applicaitons, which cause smaller number of SMS to be sent in checking period."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or data are empty"]], "SeeAlso": [], "Permissions": [], "Description": "Use android.telephony.SmsManager. Send a data based SMS to a specific application port.", "history": "Added in API level 1 Deprecated in API level 4", "FullName": "public void sendDataMessage (String destinationAddress, String scAddress, short destinationPort, byte[] data, PendingIntent sentIntent, PendingIntent deliveryIntent)"}, "sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["@B_java#lang#String_E@", "String: the body of the message to send"], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is successfully sent, or failed. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applications, which cause smaller number of SMS to be sent in checking period."], ["@B_android#app#PendingIntent_E@", "PendingIntent: if not NULL this PendingIntent is broadcast when the message is delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or text are empty"]], "SeeAlso": [], "Permissions": [], "Description": "Use android.telephony.SmsManager. Send a text based SMS.", "history": "Added in API level 1 Deprecated in API level 4", "FullName": "public void sendTextMessage (String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)"}, "sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList<java.lang.String>,java.util.ArrayList<android.app.PendingIntent>,java.util.ArrayList<android.app.PendingIntent>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the address to send the message to"], ["@B_java#lang#String_E@", "String: is the service center address or null to use the current default SMSC"], ["@B_java#util#ArrayList_E@", "ArrayList: an ArrayList of strings that, in order, comprise the original message"], ["@B_java#util#ArrayList_E@", "ArrayList: if not null, an ArrayList of PendingIntents (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be Activity.RESULT_OK for success, or one of these errors: RESULT_ERROR_GENERIC_FAILURE RESULT_ERROR_RADIO_OFF RESULT_ERROR_NULL_PDU. The per-application based SMS control checks sentIntent. If sentIntent is NULL the caller will be checked against all unknown applicaitons, which cause smaller number of SMS to be sent in checking period."], ["@B_java#util#ArrayList_E@", "ArrayList: if not null, an ArrayList of PendingIntents (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient. The raw pdu of the status report is in the extended data (\"pdu\")."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if destinationAddress or data are empty"]], "SeeAlso": [], "Permissions": [], "Description": "Use android.telephony.SmsManager. Send a multi-part text based SMS. The callee should have already divided the message into correctly sized parts by calling divideMessage.", "history": "Added in API level 1 Deprecated in API level 4", "FullName": "public void sendMultipartTextMessage (String destinationAddress, String scAddress, ArrayList<String> parts, ArrayList<PendingIntent> sentIntents, ArrayList<PendingIntent> deliveryIntents)"}, "getDefault()": {"Returns": [["@B_android#telephony#gsm#SmsManager_E@", "the default instance of the SmsManager"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use android.telephony.SmsManager. Get the default instance of the SmsManager", "history": "Added in API level 1 Deprecated in API level 4", "FullName": "public static SmsManager getDefault ()"}, "divideMessage(java.lang.String)": {"Returns": [["@B_java#util#ArrayList_E@", "an ArrayList of strings that, in order, comprise the original message"]], "Parameters": [["@B_java#lang#String_E@", "String: the original message. Must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use android.telephony.SmsManager. Divide a text message into several messages, none bigger than the maximum SMS message size.", "history": "Added in API level 1 Deprecated in API level 4", "FullName": "public ArrayList<String> divideMessage (String text)"}}, "Inheritance": [], "ClassName": "android.telephony.gsm.SmsManager", "ClassDesc": "Replaced by android.telephony.SmsManager that supports both GSM and CDMA. Manages SMS operations such as sending data, text, and pdu SMS messages. Get this object by calling the static method SmsManager.getDefault()."}