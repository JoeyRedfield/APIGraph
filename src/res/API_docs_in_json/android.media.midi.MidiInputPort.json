{"Functions": {"getPortNumber()": {"Returns": [["int", "the port's port number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the port number of this port", "history": "Added in API level 23", "FullName": "public int getPortNumber ()"}, "onSend(byte[], int, int, long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be processed"], ["int", "int: the number of bytes of MIDI data in the array to be processed"], ["long", "long: the timestamp of the message (based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called whenever the receiver is passed new MIDI data. Subclasses override this method to receive MIDI data. May fail if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. NOTE: the msg array parameter is only valid within the context of this call. The msg bytes should be copied by the receiver rather than retaining a reference to this parameter. Also, modifying the contents of the msg array parameter may result in other receivers in the same application receiving incorrect values in their {link #onSend} method.", "history": "added in API level 23", "FullName": "public void onSend (byte[] msg, int offset, int count, long timestamp)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 23", "FullName": "protected void finalize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect. As noted in @B_java#lang#AutoCloseable#close_E@, cases where the close may fail require careful attention. It is strongly advised to relinquish the underlying resources and to internally mark the Closeable as closed, prior to throwing the IOException.", "history": "Added in API level 23", "FullName": "public void close ()"}, "onSend(byte[],int,int,long)": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the MIDI data"], ["int", "int: the offset of the first byte of the data in the array to be processed"], ["int", "int: the number of bytes of MIDI data in the array to be processed"], ["long", "long: the timestamp of the message (based on @B_java#lang#System#nanoTime_E@"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called whenever the receiver is passed new MIDI data. Subclasses override this method to receive MIDI data. May fail if count exceeds @B_android#media#midi#MidiReceiver#getMaxMessageSize_E@. NOTE: the msg array parameter is only valid within the context of this call. The msg bytes should be copied by the receiver rather than retaining a reference to this parameter. Also, modifying the contents of the msg array parameter may result in other receivers in the same application receiving incorrect values in their {link #onSend} method.", "history": "Added in API level 23", "FullName": "public void onSend (byte[] msg, int offset, int count, long timestamp)"}, "onFlush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called when the receiver is instructed to discard all pending MIDI data. Subclasses should override this method if they maintain a list or queue of MIDI data to be processed in the future.", "history": "Added in API level 23", "FullName": "public void onFlush ()"}}, "Inheritance": ["@B_android#media#midi#MidiReceiver_E@"], "ClassName": "android.media.midi.MidiInputPort", "ClassDesc": "This class is used for sending data to a port on a MIDI device"}