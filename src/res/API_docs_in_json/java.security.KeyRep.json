{"Functions": {"readResolve()": {"Returns": [["@B_java#lang#Object_E@", "the resolved Key object"]], "Parameters": [], "Throws": [["@B_java#io#ObjectStreamException_E@", "if the Type/format combination is unrecognized, if the algorithm, key format, or encoded key bytes are unrecognized/invalid, of if the resolution of the key fails for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Resolve the Key object. This method supports three Type/format combinations: Type.SECRET/\"RAW\" - returns a SecretKeySpec object constructed using encoded key bytes and algorithm Type.PUBLIC/\"X.509\" - gets a KeyFactory instance for the key algorithm, constructs an X509EncodedKeySpec with the encoded key bytes, and generates a public key from the spec Type.PRIVATE/\"PKCS#8\" - gets a KeyFactory instance for the key algorithm, constructs a PKCS8EncodedKeySpec with the encoded key bytes, and generates a private key from the spec", "history": "Added in API level 1", "FullName": "protected Object readResolve ()"}, "KeyRep(java.security.KeyRep.Type,java.lang.String,java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#security#KeyRep#Type_E@", "KeyRep.Type: either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE"], ["@B_java#lang#String_E@", "String: the algorithm returned from Key.getAlgorithm()"], ["@B_java#lang#String_E@", "String: the encoding format returned from Key.getFormat()"], ["byte[]", "byte: the encoded bytes returned from Key.getEncoded()"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type is null, if algorithm is null, if format is null, or if encoded is null"]], "SeeAlso": [], "Permissions": [], "Description": "Construct the alternate Key class.", "history": "Added in API level 1", "FullName": "public KeyRep (KeyRep.Type type, String algorithm, String format, byte[] encoded)"}}, "Inheritance": [], "ClassName": "java.security.KeyRep", "ClassDesc": "Standardized representation for serialized Key objects. Note that a serialized Key may contain sensitive information which should not be exposed in untrusted environments. See the"}