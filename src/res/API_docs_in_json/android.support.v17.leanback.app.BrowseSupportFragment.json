{"Functions": {"setHeadersTransitionOnBackEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables/disables headers transition on back key support. This is enabled by default. The BrowseSupportFragment will add a back stack entry when headers are showing. Running a headers transition when the back key is pressed only works when the headers state is @B_android#support#v17#leanback#app#BrowseSupportFragment#HEADERS_ENABLED_E@ or @B_android#support#v17#leanback#app#BrowseSupportFragment#HEADERS_HIDDEN_E@. NOTE: If an Activity has its own onBackPressed() handling, you must disable this feature. You may use @B_android#support#v17#leanback#app#BrowseSupportFragment#startHeadersTransition_E@ and @B_android#support#v17#leanback#app#BrowseSupportFragment#BrowseTransitionListener_E@ in your own back stack handling.", "history": "added in version 22.0.0", "FullName": "void setHeadersTransitionOnBackEnabled (boolean headersBackStackEnabled)"}, "getMainFragmentRegistry()": {"Returns": [["@B_android#support#v17#leanback#app#BrowseSupportFragment#MainFragmentAdapterRegistry_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "BrowseSupportFragment.MainFragmentAdapterRegistry getMainFragmentRegistry ()"}, "getSearchAffordanceColors()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#support#v17#leanback#widget#SearchOrbView#Colors_E@ used to draw the search affordance.", "history": "", "FullName": "public SearchOrbView.Colors getSearchAffordanceColors ()"}, "getBadgeDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the badge drawable used in the fragment title.", "history": "", "FullName": "public Drawable getBadgeDrawable ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer resumed. This is generally tied to @B_android#app#Activity#onPause_E@ of the containing Activity's lifecycle.", "history": "", "FullName": "public void onPause ()"}, "setSearchAffordanceColor(int)": {"Returns": [], "Parameters": [["int", "The color to use for the search affordance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the color used to draw the search affordance. A default brighter color will be set by the framework.", "history": "", "FullName": "public void setSearchAffordanceColor (int color)"}, "getSelectedRowViewHolder()": {"Returns": [["@B_android#support#v17#leanback#widget#RowPresenter#ViewHolder_E@", "selected row ViewHolder inside fragment created by @B_android#support#v17#leanback#app#BrowseSupportFragment#MainFragmentRowsAdapter_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.1.0", "FullName": "RowPresenter.ViewHolder getSelectedRowViewHolder ()"}, "prepareEntranceTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables entrance transition. Entrance transition is the standard slide-in transition that shows rows of data in browse screen and details screen. The method is ignored before LOLLIPOP (API21). This method must be called in or before onCreate(). Typically entrance transition should be enabled when savedInstance is null so that fragment restored from instanceState does not run an extra entrance transition. When the entrance transition is enabled, the fragment will make headers and content hidden initially. When data of rows are ready, app must call @B_android#support#v17#leanback#app#BrowseSupportFragment#startEntranceTransition_E@ to kick off the transition, otherwise the rows will be invisible forever. It is similar to android:windowsEnterTransition and can be considered a late-executed android:windowsEnterTransition controlled by app. There are two reasons that app needs it: Workaround the problem that activity transition is not available between launcher and app. Browse activity must programmatically start the slide-in transition. Separates DetailsOverviewRow transition from other rows transition. So that the DetailsOverviewRow transition can be executed earlier without waiting for all rows to be loaded. Transition object is returned by createEntranceTransition(). Typically the app does not need override the default transition that browse and details provides.", "history": "", "FullName": "void prepareEntranceTransition ()"}, "getAdapter()": {"Returns": [["@B_android#support#v17#leanback#widget#ObjectAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter containing the rows for the fragment.", "history": "added in version 22.0.0", "FullName": "ObjectAdapter getAdapter ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#support#v4#app#Fragment#onAttach_E@ and before @B_android#support#v4#app#Fragment#onCreateView_E@. Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#support#v4#app#Fragment#onActivityCreated_E@. Any restored child fragments will be created before the base Fragment.onCreate method returns.", "history": "added in version 22.0.0", "FullName": "void onCreate (Bundle savedInstanceState)"}, "getOnItemViewSelectedListener()": {"Returns": [["@B_android#support#v17#leanback#widget#OnItemViewSelectedListener_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an item selection listener.", "history": "added in version 22.0.0", "FullName": "OnItemViewSelectedListener getOnItemViewSelectedListener ()"}, "setTitle(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "The title of the browse fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a title for the browse fragment.", "history": "", "FullName": "public void setTitle (String title)"}, "setHeadersState(int)": {"Returns": [], "Parameters": [["int", "int: The state of the headers for the browse fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the state for the headers column in the browse fragment. Must be one of @B_android#support#v17#leanback#app#BrowseSupportFragment#HEADERS_ENABLED_E@, @B_android#support#v17#leanback#app#BrowseSupportFragment#HEADERS_HIDDEN_E@, or @B_android#support#v17#leanback#app#BrowseSupportFragment#HEADERS_DISABLED_E@.", "history": "added in version 22.0.0", "FullName": "void setHeadersState (int headersState)"}, "getProgressBarManager()": {"Returns": [["@B_android#support#v17#leanback#app#ProgressBarManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#support#v17#leanback#app#ProgressBarManager_E@.", "history": "", "FullName": "ProgressBarManager getProgressBarManager ()"}, "onEntranceTransitionStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback when entrance transition is started. This is when fragment should stop processing layout.", "history": "added in version 23.1.0", "FullName": "void onEntranceTransitionStart ()"}, "getOnItemViewClickedListener()": {"Returns": [["@B_android#support#v17#leanback#widget#OnItemViewClickedListener_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the item Clicked listener.", "history": "added in version 22.0.0", "FullName": "OnItemViewClickedListener getOnItemViewClickedListener ()"}, "getSelectedPosition()": {"Returns": [["int", "Position of currently selected row."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets position of currently selected row.", "history": "added in version 23.2.0", "FullName": "int getSelectedPosition ()"}, "getTitle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the title for the browse fragment.", "history": "", "FullName": "public String getTitle ()"}, "createEntranceTransition()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create entrance transition. Subclass can override to load transition from resource or construct manually. Typically app does not need to override the default transition that browse and details provides.", "history": "added in version 23.1.0", "FullName": "Object createEntranceTransition ()"}, "getBrandColor()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the brand color for the browse fragment. The default is transparent.", "history": "added in version 22.0.0", "FullName": "int getBrandColor ()"}, "setSelectedPosition(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selected row position with smooth animation.", "history": "added in version 22.0.0", "FullName": "void setSelectedPosition (int position)"}, "setSelectedPosition(int, boolean)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selected row position.", "history": "added in version 22.0.0", "FullName": "void setSelectedPosition (int position, boolean smooth)"}, "BrowseSupportFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "BrowseSupportFragment ()"}, "getMainFragment()": {"Returns": [["@B_android#support#v4#app#Fragment_E@", "Current main fragment or null if not created."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.1.0", "FullName": "Fragment getMainFragment ()"}, "isInHeadersTransition()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the headers transition is currently running.", "history": "added in version 22.0.0", "FullName": "boolean isInHeadersTransition ()"}, "isHeadersTransitionOnBackEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if headers transition on back key support is enabled.", "history": "added in version 22.0.0", "FullName": "boolean isHeadersTransitionOnBackEnabled ()"}, "getHeadersState()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the state of the headers column in the browse fragment.", "history": "added in version 22.0.0", "FullName": "int getHeadersState ()"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view previously created by @B_android#support#v4#app#Fragment#onCreateView_E@ has been detached from the fragment. The next time the fragment needs to be displayed, a new view will be created. This is called after @B_android#support#v4#app#Fragment#onStop_E@ and before @B_android#support#v4#app#Fragment#onDestroy_E@. It is called regardless of whether @B_android#support#v4#app#Fragment#onCreateView_E@ returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent.", "history": "added in version 22.0.0", "FullName": "void onDestroyView ()"}, "runEntranceTransition(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Run entrance transition. Subclass may use TransitionManager to perform go(Scene) or beginDelayedTransition(). App should not override the default implementation of browse and details fragment.", "history": "added in version 23.1.0", "FullName": "void runEntranceTransition (Object entranceTransition)"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle.", "history": "added in version 22.0.0", "FullName": "void onStart ()"}, "getOnItemClickedListener()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the item clicked listener.", "history": "", "FullName": "public OnItemClickedListener getOnItemClickedListener ()"}, "onCreateHeadersSupportFragment()": {"Returns": [["@B_android#support#v17#leanback#app#HeadersSupportFragment_E@", "A new instance of @B_android#support#v17#leanback#app#HeadersSupportFragment_E@ or its subclass."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_android#support#v17#leanback#app#HeadersSupportFragment_E@ instance. Subclass of BrowseSupportFragment may override and return an instance of subclass of HeadersSupportFragment, e.g. when app wants to replace presenter to render HeaderItem.", "history": "added in version 25.3.0", "FullName": "HeadersSupportFragment onCreateHeadersSupportFragment ()"}, "getSearchAffordanceColor()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the color used to draw the search affordance.", "history": "", "FullName": "public int getSearchAffordanceColor ()"}, "isShowingHeaders()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if headers are shown.", "history": "added in version 22.0.0", "FullName": "boolean isShowingHeaders ()"}, "getHeadersSupportFragment()": {"Returns": [["@B_android#support#v17#leanback#app#HeadersSupportFragment_E@", "Currently bound HeadersSupportFragment or null if HeadersSupportFragment has not been created yet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get currently bound HeadersSupportFragment or null if HeadersSupportFragment has not been created yet.", "history": "added in version 23.2.0", "FullName": "HeadersSupportFragment getHeadersSupportFragment ()"}, "startHeadersTransition(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the headers should transition to being shown, false if the transition should result in headers being hidden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts a headers transition. This method will begin a transition to either show or hide the headers, depending on the value of withHeaders. If headers are disabled for this browse fragment, this method will throw an exception.", "history": "added in version 22.0.0", "FullName": "void startHeadersTransition (boolean withHeaders)"}, "getRowsSupportFragment()": {"Returns": [["@B_android#support#v17#leanback#app#RowsSupportFragment_E@", "RowsSupportFragment if it's bound to BrowseSupportFragment or null otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get RowsSupportFragment if it's bound to BrowseSupportFragment or null if either BrowseSupportFragment has not been created yet or a different fragment is bound to it.", "history": "added in version 23.2.0", "FullName": "RowsSupportFragment getRowsSupportFragment ()"}, "onEntranceTransitionEnd()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback when entrance transition is ended.", "history": "added in version 23.1.0", "FullName": "void onEntranceTransitionEnd ()"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is visible to the user and actively running. This is generally tied to @B_android#app#Activity#onResume_E@ of the containing Activity's lifecycle.", "history": "", "FullName": "public void onResume ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer in use. This is called after @B_android#support#v4#app#Fragment#onStop_E@ and before @B_android#support#v4#app#Fragment#onDetach_E@.", "history": "added in version 22.0.0", "FullName": "void onDestroy ()"}, "enableMainFragmentScaling(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable row scaling"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables scaling of main fragment when headers are present. For the page/row fragment, scaling is enabled only when both this method and @B_android#support#v17#leanback#app#BrowseSupportFragment#MainFragmentAdapter#isScalingEnabled_E@ are enabled.", "history": "added in version 24.0.0", "FullName": "void enableMainFragmentScaling (boolean enable)"}, "startEntranceTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When fragment finishes loading data, it should call startEntranceTransition() to execute the entrance transition. startEntranceTransition() will start transition only if both two conditions are satisfied: prepareEntranceTransition() was called. has not executed entrance transition yet. If startEntranceTransition() is called before onViewCreated(), it will be pending and executed when view is created.", "history": "", "FullName": "void startEntranceTransition ()"}, "onEntranceTransitionPrepare()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback when entrance transition is prepared. This is when fragment should stop user input and animations.", "history": "added in version 23.1.0", "FullName": "void onEntranceTransitionPrepare ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#support#v4#app#Fragment#onCreate_E@, @B_android#support#v4#app#Fragment#onCreateView_E@, and @B_android#support#v4#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#support#v4#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "added in version 22.0.0", "FullName": "void onSaveInstanceState (Bundle outState)"}, "setBrandColor(int)": {"Returns": [], "Parameters": [["int", "int: The color to use as the brand color of the fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the brand color for the browse fragment. The brand color is used as the primary color for UI elements in the browse fragment. For example, the background color of the headers fragment uses the brand color.", "history": "added in version 22.0.0", "FullName": "void setBrandColor (int color)"}, "enableRowScaling(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable row scaling"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#support#v17#leanback#app#BrowseSupportFragment#enableMainFragmentScaling_E@ instead.", "history": "added in version 22.0.0", "FullName": "void enableRowScaling (boolean enable)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#app#Fragment_E@", "@B_android#support#v17#leanback#app#BrandedSupportFragment_E@", "@B_android#support#v17#leanback#app#BaseSupportFragment_E@"], "ClassName": "android.support.v17.leanback.app.BrowseSupportFragment", "ClassDesc": "A fragment for creating Leanback browse screens. It is composed of a RowsSupportFragment and a HeadersSupportFragment. A BrowseSupportFragment renders the elements of its @B_android#support#v17#leanback#widget#ObjectAdapter_E@ as a set of rows in a vertical list. The elements in this adapter must be subclasses of @B_android#support#v17#leanback#widget#Row_E@. The HeadersSupportFragment can be set to be either shown or hidden by default, or may be disabled entirely. See @B_android#support#v17#leanback#app#BrowseSupportFragment#setHeadersState_E@ for details. By default the BrowseSupportFragment includes support for returning to the headers when the user presses Back. For Activities that customize @B_android#support#v4#app#FragmentActivity#onBackPressed_E@, you must disable this default Back key support by calling @B_android#support#v17#leanback#app#BrowseSupportFragment#setHeadersTransitionOnBackEnabled_E@ with false and use @B_android#support#v17#leanback#app#BrowseSupportFragment#BrowseTransitionListener_E@ and @B_android#support#v17#leanback#app#BrowseSupportFragment#startHeadersTransition_E@. The recommended theme to use with a BrowseSupportFragment is @B_android#support#v17#leanback#R#style#Theme_Leanback_Browse_E@."}