{"Functions": {"toURI()": {"Returns": [["@B_java#net#URI_E@", "a URI instance equivalent to this URL."]], "Parameters": [], "Throws": [["@B_java#net#URISyntaxException_E@", "if this URL is not formatted strictly according to to RFC2396 and cannot be converted to a URI."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#net#URI_E@ equivalent to this URL. This method functions in the same way as new URI (this.toString()). Note, any URL instance that complies with RFC 2396 can be converted to a URI. However, some URLs that are not strictly in compliance can not be converted to a URI.", "history": "Added in API level 1", "FullName": "public URI toURI ()"}, "URL(java.lang.String,java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the protocol to use."], ["@B_java#lang#String_E@", "String: the name of the host."], ["int", "int: the port number on the host."], ["@B_java#lang#String_E@", "String: the file on the host"]], "Throws": [["@B_java#net#MalformedURLException_E@", "if an unknown protocol is specified."]], "SeeAlso": ["@B_java#lang#System#getProperty_E@", "@B_java#net#URL#setURLStreamHandlerFactory_E@", "@B_java#net#URLStreamHandler_E@", "@B_java#net#URLStreamHandlerFactory#createURLStreamHandler_E@"], "Permissions": [], "Description": "Creates a URL object from the specified protocol, host, port number, and file. host can be expressed as a host name or a literal IP address. If IPv6 literal address is used, it should be enclosed in square brackets ('[' and ']'), as specified by Specifying a port number of -1 indicates that the URL should use the default port for the protocol. If this is the first URL object being created with the specified protocol, a URLStreamHandler, is created for that protocol: Protocol handlers for the following protocols are guaranteed to exist on the search path :- No validation of the inputs is performed by this constructor.", "history": "Added in API level 1", "FullName": "public URL (String protocol, String host, int port, String file)"}, "getPort()": {"Returns": [["int", "the port number, or -1 if the port is not set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the port number of this URL.", "history": "Added in API level 1", "FullName": "public int getPort ()"}, "URL(java.net.URL, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the context in which to parse the specification."], ["@B_java#lang#String_E@", "String: the String to parse as a URL."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if no protocol is specified, or an unknown protocol is found, or spec is null."]], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandler_E@", "@B_java#net#URLStreamHandler#parseURL_E@"], "Permissions": [], "Description": "Creates a URL by parsing the given spec within a specified context. The new URL is created from the given context URL and the spec argument as described in RFC2396 \"Uniform Resource Identifiers : Generic * Syntax\" : If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL. If the authority component is present in the spec then the spec is treated as absolute and the spec authority and path will replace the context authority and path. If the authority component is absent in the spec then the authority of the new URL will be inherited from the context. If the spec's path component begins with a slash character \"/\" then the path is treated as absolute and the spec path replaces the context path. Otherwise, the path is treated as a relative path and is appended to the context path, as described in RFC2396. Also, in this case, the path is canonicalized through the removal of directory changes made by occurrences of \"..\" and \".\". For a more detailed description of URL parsing, refer to RFC2396.", "history": "added in API level 1", "FullName": "public URL (URL context, String spec)"}, "URL(java.net.URL,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the context in which to parse the specification."], ["@B_java#lang#String_E@", "String: the String to parse as a URL."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if no protocol is specified, or an unknown protocol is found, or spec is null."]], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandler_E@", "@B_java#net#URLStreamHandler#parseURL_E@"], "Permissions": [], "Description": "Creates a URL by parsing the given spec within a specified context. The new URL is created from the given context URL and the spec argument as described in RFC2396 \"Uniform Resource Identifiers : Generic * Syntax\" : If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL. If the authority component is present in the spec then the spec is treated as absolute and the spec authority and path will replace the context authority and path. If the authority component is absent in the spec then the authority of the new URL will be inherited from the context. If the spec's path component begins with a slash character \"/\" then the path is treated as absolute and the spec path replaces the context path. Otherwise, the path is treated as a relative path and is appended to the context path, as described in RFC2396. Also, in this case, the path is canonicalized through the removal of directory changes made by occurrences of \"..\" and \".\". For a more detailed description of URL parsing, refer to RFC2396.", "history": "Added in API level 1", "FullName": "public URL (URL context, String spec)"}, "URL(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the protocol to use."], ["@B_java#lang#String_E@", "String: the name of the host."], ["int", "int: the port number on the host."], ["@B_java#lang#String_E@", "String: the file on the host"], ["@B_java#net#URLStreamHandler_E@", "URLStreamHandler: the stream handler for the URL."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if an unknown protocol is specified."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow specifying a stream handler explicitly."]], "SeeAlso": ["@B_java#lang#System#getProperty_E@", "@B_java#net#URL#setURLStreamHandlerFactory_E@", "@B_java#net#URLStreamHandler_E@", "@B_java#net#URLStreamHandlerFactory#createURLStreamHandler_E@", "@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#net#NetPermission_E@"], "Permissions": [], "Description": "Creates a URL object from the specified protocol, host, port number, file, and handler. Specifying a port number of -1 indicates that the URL should use the default port for the protocol. Specifying a handler of null indicates that the URL should use a default stream handler for the protocol, as outlined for: java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String) If the handler is not null and there is a security manager, the security manager's checkPermission method is called with a NetPermission(\"specifyStreamHandler\") permission. This may result in a SecurityException. No validation of the inputs is performed by this constructor.", "history": "Added in API level 1", "FullName": "public URL (String protocol, String host, int port, String file, URLStreamHandler handler)"}, "getContent(java.lang.Class[])": {"Returns": [["@B_java#lang#Object_E@", "the content object of this URL that is the first match of the types specified in the classes array. null if none of the requested types are supported."]], "Parameters": [["@B_java#lang#Class_E@", "Class: an array of Java types"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs."]], "SeeAlso": ["@B_java#net#URLConnection#getContent_E@"], "Permissions": [], "Description": "Gets the contents of this URL. This method is a shorthand for:", "history": "Added in API level 1", "FullName": "public Object getContent (Class[] classes)"}, "openStream()": {"Returns": [["@B_java#io#InputStream_E@", "an input stream for reading from the URL connection."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs."]], "SeeAlso": ["@B_java#net#URL#openConnection_E@", "@B_java#net#URLConnection#getInputStream_E@"], "Permissions": [], "Description": "Opens a connection to this URL and returns an InputStream for reading from that connection. This method is a shorthand for:", "history": "Added in API level 1", "FullName": "public InputStream openStream ()"}, "getAuthority()": {"Returns": [["@B_java#lang#String_E@", "the authority part of this URL"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the authority part of this URL.", "history": "Added in API level 1", "FullName": "public String getAuthority ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the URL to compare against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this URL for equality with another object. If the given object is not a URL then this method immediately returns false. Two URL objects are equal if they have the same protocol, reference equivalent hosts, have the same port number on the host, and the same file and fragment of the file. Returns true if this URL equals o. URLs are equal if they have the same protocol, host, port, file, and reference. Some implementations of URL.equals() resolve host names over the network. This is problematic: @B_java#util#Map_E@ and @B_java#util#Set_E@ expect that equals and hashCode will return quickly. By violating this assumption, this method posed potential performance problems. This problem is fixed in Android 4.0 (Ice Cream Sandwich). In that release, URLs are only equal if their host names are equal (ignoring case).", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "URL(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the String to parse as a URL."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if no protocol is specified, or an unknown protocol is found, or spec is null."]], "SeeAlso": ["@B_java#net#URL_E@"], "Permissions": [], "Description": "Creates a URL object from the String representation. This constructor is equivalent to a call to the two-argument constructor with a null first argument.", "history": "Added in API level 1", "FullName": "public URL (String spec)"}, "sameFile(java.net.URL)": {"Returns": [["boolean", "true if they reference the same remote object; false otherwise."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to compare against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two URLs, excluding the fragment component. Returns true if this URL and the other argument are equal without taking the fragment component into consideration.", "history": "Added in API level 1", "FullName": "public boolean sameFile (URL other)"}, "hashCode()": {"Returns": [["int", "a hash code for this URL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an integer suitable for hash table indexing. The hash code is based upon all the URL components relevant for URL comparison. As such, this operation is a blocking operation.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandler#toExternalForm_E@"], "Permissions": [], "Description": "Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getProtocol()": {"Returns": [["@B_java#lang#String_E@", "the protocol of this URL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the protocol name of this URL.", "history": "Added in API level 1", "FullName": "public String getProtocol ()"}, "getRef()": {"Returns": [["@B_java#lang#String_E@", "the anchor (also known as the \"reference\") of this URL, or null if one does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the anchor (also known as the \"reference\") of this URL.", "history": "Added in API level 1", "FullName": "public String getRef ()"}, "getQuery()": {"Returns": [["@B_java#lang#String_E@", "the query part of this URL, or null if one does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the query part of this URL.", "history": "Added in API level 1", "FullName": "public String getQuery ()"}, "toExternalForm()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandler#toExternalForm_E@"], "Permissions": [], "Description": "Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object.", "history": "Added in API level 1", "FullName": "public String toExternalForm ()"}, "URL(java.net.URL,java.lang.String,java.net.URLStreamHandler)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the context in which to parse the specification."], ["@B_java#lang#String_E@", "String: the String to parse as a URL."], ["@B_java#net#URLStreamHandler_E@", "URLStreamHandler: the stream handler for the URL."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if no protocol is specified, or an unknown protocol is found, or spec is null."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow specifying a stream handler."]], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandler_E@", "@B_java#net#URLStreamHandler#parseURL_E@"], "Permissions": [], "Description": "Creates a URL by parsing the given spec with the specified handler within a specified context. If the handler is null, the parsing occurs as with the two argument constructor.", "history": "Added in API level 1", "FullName": "public URL (URL context, String spec, URLStreamHandler handler)"}, "openConnection(java.net.Proxy)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection to the URL."]], "Parameters": [["@B_java#net#Proxy_E@", "Proxy: the Proxy through which this connection will be made. If direct connection is desired, Proxy.NO_PROXY should be specified."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs."], ["@B_java#lang#SecurityException_E@", "if a security manager is present and the caller doesn't have permission to connect to the proxy."], ["@B_java#lang#IllegalArgumentException_E@", "will be thrown if proxy is null, or proxy has the wrong type"], ["@B_java#lang#UnsupportedOperationException_E@", "if the subclass that implements the protocol handler doesn't support this method."]], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLConnection_E@", "@B_java#net#URLStreamHandler#openConnection_E@"], "Permissions": [], "Description": "Same as @B_java#net#URL#openConnection_E@, except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection. Invoking this method preempts the system's default ProxySelector settings.", "history": "Added in API level 1", "FullName": "public URLConnection openConnection (Proxy proxy)"}, "getFile()": {"Returns": [["@B_java#lang#String_E@", "the file name of this URL, or an empty string if one does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the file name of this URL. The returned file portion will be the same as getPath(), plus the concatenation of the value of getQuery(), if any. If there is no query portion, this method and getPath() will return identical results.", "history": "Added in API level 1", "FullName": "public String getFile ()"}, "getUserInfo()": {"Returns": [["@B_java#lang#String_E@", "the userInfo part of this URL, or null if one does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the userInfo part of this URL.", "history": "Added in API level 1", "FullName": "public String getUserInfo ()"}, "getDefaultPort()": {"Returns": [["int", "the port number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the default port number of the protocol associated with this URL. If the URL scheme or the URLStreamHandler for the URL do not define a default port number, then -1 is returned.", "history": "Added in API level 1", "FullName": "public int getDefaultPort ()"}, "getContent()": {"Returns": [["@B_java#lang#Object_E@", "the contents of this URL."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs."]], "SeeAlso": ["@B_java#net#URLConnection#getContent_E@"], "Permissions": [], "Description": "Gets the contents of this URL. This method is a shorthand for:", "history": "Added in API level 1", "FullName": "public Object getContent ()"}, "openConnection()": {"Returns": [["@B_java#net#URLConnection_E@", "a @B_java#net#URLConnection_E@ linking to the URL."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs."]], "SeeAlso": ["@B_java#net#URL_E@"], "Permissions": [], "Description": "Returns a @B_java#net#URLConnection_E@ instance that represents a connection to the remote object referred to by the URL. A new instance of It should be noted that a URLConnection instance does not establish the actual network connection on creation. This will happen only when calling If for the URL's protocol (such as HTTP or JAR), there exists a public, specialized URLConnection subclass belonging to one of the following packages or one of their subpackages: java.lang, java.io, java.util, java.net, the connection returned will be of that subclass. For example, for HTTP an HttpURLConnection will be returned, and for JAR a JarURLConnection will be returned.", "history": "Added in API level 1", "FullName": "public URLConnection openConnection ()"}, "URL(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the protocol to use."], ["@B_java#lang#String_E@", "String: the name of the host."], ["@B_java#lang#String_E@", "String: the file on the host."]], "Throws": [["@B_java#net#MalformedURLException_E@", "if an unknown protocol is specified."]], "SeeAlso": ["@B_java#net#URL_E@"], "Permissions": [], "Description": "Creates a URL from the specified protocol name, host name, and file name. The default port for the specified protocol is used. This method is equivalent to calling the four-argument constructor with the arguments being protocol, host, -1, and file. No validation of the inputs is performed by this constructor.", "history": "Added in API level 1", "FullName": "public URL (String protocol, String host, String file)"}, "setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)": {"Returns": [], "Parameters": [["@B_java#net#URLStreamHandlerFactory_E@", "URLStreamHandlerFactory: the desired factory."]], "Throws": [["@B_java#lang#Error_E@", "if the application has already set a factory."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#net#URL_E@", "@B_java#net#URLStreamHandlerFactory_E@", "@B_java#lang#SecurityManager#checkSetFactory_E@"], "Permissions": [], "Description": "Sets an application's URLStreamHandlerFactory. This method can be called at most once in a given Java Virtual Machine. The URLStreamHandlerFactory instance is used toconstruct a stream protocol handler from a protocol name. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setURLStreamHandlerFactory (URLStreamHandlerFactory fac)"}, "getHost()": {"Returns": [["@B_java#lang#String_E@", "the host name of this URL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the host name of this URL, if applicable. The format of the host conforms to RFC 2732, i.e. for a literal IPv6 address, this method will return the IPv6 address enclosed in square brackets ('[' and ']').", "history": "Added in API level 1", "FullName": "public String getHost ()"}, "getPath()": {"Returns": [["@B_java#lang#String_E@", "the path part of this URL, or an empty string if one does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the path part of this URL.", "history": "Added in API level 1", "FullName": "public String getPath ()"}}, "Inheritance": [], "ClassName": "java.net.URL", "ClassDesc": "Class URL represents a Uniform Resource Locator, a pointer to a \"resource\" on the World Wide Web. A resource can be something as simple as a file or a directory, or it can be a reference to a more complicated object, such as a query to a database or to a search engine. More information on the types of URLs and their formats can be found at: In general, a URL can be broken into several parts. Consider the following example: The URL above indicates that the protocol to use is http (HyperText Transfer Protocol) and that the information resides on a host machine named www.example.com. The information on that host machine is named /docs/resource1.html. The exact meaning of this name on the host machine is both protocol dependent and host dependent. The information normally resides in a file, but it could be generated on the fly. This component of the URL is called the A URL can optionally specify a \"port\", which is the port number to which the TCP connection is made on the remote host machine. If the port is not specified, the default port for the protocol is used instead. For example, the default port for http is 80. An alternative port could be specified as: The syntax of URL is defined by A URL may have appended to it a \"fragment\", also known as a \"ref\" or a \"reference\". The fragment is indicated by the sharp sign character \"#\" followed by more characters. For example, This fragment is not technically part of the URL. Rather, it indicates that after the specified resource is retrieved, the application is specifically interested in that part of the document that has the tag chapter1 attached to it. The meaning of a tag is resource specific. An application can also specify a \"relative URL\", which contains only enough information to reach the resource relative to another URL. Relative URLs are frequently used within HTML pages. For example, if the contents of the URL: The relative URL need not specify all the components of a URL. If the protocol, host name, or port number is missing, the value is inherited from the fully specified URL. The file component must be specified. The optional fragment is not inherited. The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396. It is the responsibility of the caller to encode any fields, which need to be escaped prior to calling URL, and also to decode any escaped fields, that are returned from URL. Furthermore, because URL has no knowledge of URL escaping, it does not recognise equivalence between the encoded or decoded form of the same URL. For example, the two URLs: Note, the @B_java#net#URI_E@ class does perform escaping of its component fields in certain circumstances. The recommended way to manage the encoding and decoding of URLs is to use @B_java#net#URI_E@, and to convert between these two classes using @B_java#net#URL#toURI_E@ and @B_java#net#URI#toURL_E@. The @B_java#net#URLEncoder_E@ and @B_java#net#URLDecoder_E@ classes can also be used, but only for HTML form encoding, which is not the same as the encoding scheme defined in RFC2396."}