{"Functions": {"OutputConfiguration(int, android.view.Surface)": {"Returns": [], "Parameters": [["int", "int: A group ID for this output, used for sharing memory between multiple outputs."], ["@B_android#view#Surface_E@", "Surface: A Surface for camera to output to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#OutputConfiguration_E@ instance with a @B_android#view#Surface_E@, with a surface group ID. A surface group ID is used to identify which surface group this output surface belongs to. A surface group is a group of output surfaces that are not intended to receive camera output buffer streams simultaneously. The @B_android#hardware#camera2#CameraDevice_E@ may be able to share the buffers used by all the surfaces from the same surface group, therefore may reduce the overall memory footprint. The application should only set the same set ID for the streams that are not simultaneously streaming. A negative ID indicates that this surface doesn't belong to any surface group. The default value is @B_android#hardware#camera2#params#OutputConfiguration#SURFACE_GROUP_ID_NONE_E@. For example, a video chat application that has an adaptive output resolution feature would need two (or more) output resolutions, to switch resolutions without any output glitches. However, at any given time, only one output is active to minimize outgoing network bandwidth and encoding overhead. To save memory, the application should set the video outputs to have the same non-negative group ID, so that the camera device can share the same memory region for the alternating outputs. It is not an error to include output streams with the same group ID in the same capture request, but the resulting memory consumption may be higher than if the two streams were not in the same surface group to begin with, especially if the outputs have substantially different dimensions.", "history": "added in API level 24", "FullName": "public OutputConfiguration (int surfaceGroupId, Surface surface)"}, "getSurfaceGroupId()": {"Returns": [["int", "the surface group ID associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@. The default value is @B_android#hardware#camera2#params#OutputConfiguration#SURFACE_GROUP_ID_NONE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the surface group ID associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@.", "history": "Added in API level 24", "FullName": "public int getSurfaceGroupId ()"}, "getMaxSharedSurfaceCount()": {"Returns": [["int", "the maximum number of surfaces that can be added per each OutputConfiguration."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@"], "Permissions": [], "Description": "Get the maximum supported shared @B_android#view#Surface_E@ count.", "history": "Added in API level 28", "FullName": "public int getMaxSharedSurfaceCount ()"}, "getSurfaces()": {"Returns": [["@B_java#util#List_E@", "the list of surfaces associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@ as specified in the constructor and @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@. The list should not be modified. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the immutable list of surfaces associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@.", "history": "Added in API level 26", "FullName": "public List<Surface> getSurfaces ()"}, "removeSurface(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: The surface to be removed. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the surface is associated with this OutputConfiguration (see @B_android#hardware#camera2#params#OutputConfiguration#getSurface_E@) or the surface didn't get added with @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Remove a surface from this OutputConfiguration. Surfaces added via calls to @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@ can also be removed from the OutputConfiguration. The only notable exception is the surface associated with the OutputConfigration see @B_android#hardware#camera2#params#OutputConfiguration#getSurface_E@ which was passed as part of the constructor or was added first in the deferred case @B_android#hardware#camera2#params#OutputConfiguration#OutputConfiguration_E@.", "history": "Added in API level 28", "FullName": "public void removeSurface (Surface surface)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 24", "FullName": "public int describeContents ()"}, "enableSurfaceSharing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable multiple surfaces sharing the same OutputConfiguration For advanced use cases, a camera application may require more streams than the combination guaranteed by @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. In this case, more than one compatible surface can be attached to an OutputConfiguration so that they map to one camera stream, and the outputs share memory buffers when possible. Due to buffer sharing clients should be careful when adding surface outputs that modify their input data. If such case exists, camera clients should have an additional mechanism to synchronize read and write access between individual consumers. Two surfaces are compatible in the below cases: Surfaces with the same size, format, dataSpace, and Surface source class. In this case, @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ is guaranteed to succeed. Surfaces with the same size, format, and dataSpace, but different Surface source classes that are generally not compatible. However, on some devices, the underlying camera device is able to use the same buffer layout for both surfaces. The only way to discover if this is the case is to create a capture session with that output configuration. For example, if the camera device uses the same private buffer format between a SurfaceView/SurfaceTexture and a MediaRecorder/MediaCodec, @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ will succeed. Otherwise, it fails with @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigureFailed_E@. To enable surface sharing, this function must be called before @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ or @B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSessionByConfigurations_E@. Calling this function after @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ has no effect. Up to @B_android#hardware#camera2#params#OutputConfiguration#getMaxSharedSurfaceCount_E@ surfaces can be shared for an OutputConfiguration. The supported surfaces for sharing must be of type SurfaceTexture, SurfaceView, MediaRecorder, MediaCodec, or implementation defined ImageReader.", "history": "Added in API level 26", "FullName": "public void enableSurfaceSharing ()"}, "OutputConfiguration(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: A Surface for camera to output to. This constructor creates a default configuration, with a surface group ID of .SURFACE_GROUP_ID_NONE. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#OutputConfiguration_E@ instance with a @B_android#view#Surface_E@.", "history": "Added in API level 24", "FullName": "public OutputConfiguration (Surface surface)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 24", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "OutputConfiguration(int,android.view.Surface)": {"Returns": [], "Parameters": [["int", "int: A group ID for this output, used for sharing memory between multiple outputs."], ["@B_android#view#Surface_E@", "Surface: A Surface for camera to output to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#OutputConfiguration_E@ instance with a @B_android#view#Surface_E@, with a surface group ID. A surface group ID is used to identify which surface group this output surface belongs to. A surface group is a group of output surfaces that are not intended to receive camera output buffer streams simultaneously. The @B_android#hardware#camera2#CameraDevice_E@ may be able to share the buffers used by all the surfaces from the same surface group, therefore may reduce the overall memory footprint. The application should only set the same set ID for the streams that are not simultaneously streaming. A negative ID indicates that this surface doesn't belong to any surface group. The default value is @B_android#hardware#camera2#params#OutputConfiguration#SURFACE_GROUP_ID_NONE_E@. For example, a video chat application that has an adaptive output resolution feature would need two (or more) output resolutions, to switch resolutions without any output glitches. However, at any given time, only one output is active to minimize outgoing network bandwidth and encoding overhead. To save memory, the application should set the video outputs to have the same non-negative group ID, so that the camera device can share the same memory region for the alternating outputs. It is not an error to include output streams with the same group ID in the same capture request, but the resulting memory consumption may be higher than if the two streams were not in the same surface group to begin with, especially if the outputs have substantially different dimensions.", "history": "Added in API level 24", "FullName": "public OutputConfiguration (int surfaceGroupId, Surface surface)"}, "setPhysicalCameraId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the id of the physical camera for this OutputConfiguration In the case one logical camera is made up of multiple physical cameras, it could be desirable for the camera application to request streams from individual physical cameras. This call achieves it by mapping the OutputConfiguration to the physical camera id. The valid physical camera ids can be queried by @B_android#hardware#camera2#CameraCharacteristics#getPhysicalCameraIds_E@. Passing in a null physicalCameraId means that the OutputConfiguration is for a logical stream. This function must be called before @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ or @B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSessionByConfigurations_E@. Calling this function after @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ or @B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSessionByConfigurations_E@ has no effect. The surface belonging to a physical camera OutputConfiguration must not be used as input or output of a reprocessing request.", "history": "Added in API level 28", "FullName": "public void setPhysicalCameraId (String physicalCameraId)"}, "addSurface(android.view.Surface)": {"Returns": [], "Parameters": [["@B_android#view#Surface_E@", "Surface: The surface to be added. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the Surface is invalid, the Surface's dataspace/format doesn't match, or adding the Surface would exceed number of shared surfaces supported."], ["@B_java#lang#IllegalStateException_E@", "if the Surface was already added to this OutputConfiguration, or if the OutputConfiguration is not shared and it already has a surface associated with it."]], "SeeAlso": [], "Permissions": [], "Description": "Add a surface to this OutputConfiguration. This function can be called before or after @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@. If it's called after, the application must finalize the capture session with @B_android#hardware#camera2#CameraCaptureSession#finalizeOutputConfigurations_E@. It is possible to call this method after the output configurations have been finalized only in cases of enabled surface sharing see @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@. The modified output configuration must be updated with @B_android#hardware#camera2#CameraCaptureSession#updateOutputConfiguration_E@. If the OutputConfiguration was constructed with a deferred surface by @B_android#hardware#camera2#params#OutputConfiguration#OutputConfiguration_E@, the added surface must be obtained from @B_android#view#SurfaceView_E@ by calling @B_android#view#SurfaceHolder#getSurface_E@, or from @B_android#graphics#SurfaceTexture_E@ via @B_android#view#Surface#Surface_E@). If the OutputConfiguration was constructed by other constructors, the added surface must be compatible with the existing surface. See @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@ for details of compatible surfaces. If the OutputConfiguration already contains a Surface, @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@ must be called before calling this function to add a new Surface.", "history": "Added in API level 26", "FullName": "public void addSurface (Surface surface)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#OutputConfiguration_E@ is equal to another @B_android#hardware#camera2#params#OutputConfiguration_E@. Two output configurations are only equal if and only if the underlying surfaces, surface properties (width, height, format, dataspace) when the output configurations are created, and all other configuration parameters are equal.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "OutputConfiguration(android.util.Size,java.lang.Class<T>)": {"Returns": [], "Parameters": [["@B_android#util#Size_E@", "Size: Size for the deferred surface. This value must never be null."], ["@B_java#lang#Class_E@", "Class: a non-null @B_java#lang#Class_E@ object reference that indicates the source of this surface. Only @B_android#view#SurfaceHolder_E@ and @B_android#graphics#SurfaceTexture_E@ are supported. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the Surface source class is not supported, or Surface size is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#OutputConfiguration_E@ instance, with desired Surface size and Surface source class. This constructor takes an argument for desired Surface size and the Surface source class without providing the actual output Surface. This is used to setup an output configuration with a deferred Surface. The application can use this output configuration to create a session. However, the actual output Surface must be set via @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@ and the deferred Surface configuration must be finalized via @B_android#hardware#camera2#CameraCaptureSession#finalizeOutputConfigurations_E@ before submitting a request with this Surface target. The deferred Surface can only be obtained either from @B_android#view#SurfaceView_E@ by calling @B_android#view#SurfaceHolder#getSurface_E@, or from @B_android#graphics#SurfaceTexture_E@ via @B_android#view#Surface#Surface_E@).", "history": "Added in API level 26", "FullName": "public OutputConfiguration (Size surfaceSize, Class<T> klass)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 24", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getSurface()": {"Returns": [["@B_android#view#Surface_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#view#Surface_E@ associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@. If more than one surface is associated with this @B_android#hardware#camera2#params#OutputConfiguration_E@, return the first one as specified in the constructor or @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@.", "history": "Added in API level 24", "FullName": "public Surface getSurface ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.OutputConfiguration", "ClassDesc": "A class for describing camera output, which contains a @B_android#view#Surface_E@ and its specific configuration for creating capture session. There are several ways to instantiate, modify and use OutputConfigurations. The most common and recommended usage patterns are summarized in the following list: Passing a @B_android#view#Surface_E@ to the constructor and using the OutputConfiguration instance as argument to @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@. This is the most frequent usage and clients should consider it first before other more complicated alternatives. Passing only a surface source class as an argument to the constructor. This is usually followed by a call to create a capture session (see @B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@ and a @B_android#view#Surface_E@ add call @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@ with a valid @B_android#view#Surface_E@. The sequence completes with @B_android#hardware#camera2#CameraCaptureSession#finalizeOutputConfigurations_E@. This is the deferred usage case which aims to enhance performance by allowing the resource-intensive capture session create call to execute in parallel with any @B_android#view#Surface_E@ initialization, such as waiting for a @B_android#view#SurfaceView_E@ to be ready as part of the UI initialization. The third and most complex usage pattern involves surface sharing. Once instantiated an OutputConfiguration can be enabled for surface sharing via @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@. This must be done before creating a new capture session and enables calls to @B_android#hardware#camera2#CameraCaptureSession#updateOutputConfiguration_E@. An OutputConfiguration with enabled surface sharing can be modified via @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@ or @B_android#hardware#camera2#params#OutputConfiguration#removeSurface_E@. The updates to this OutputConfiguration will only come into effect after @B_android#hardware#camera2#CameraCaptureSession#updateOutputConfiguration_E@ returns without throwing exceptions. Such updates can be done as long as the session is active. Clients should always consider the additional requirements and limitations placed on the output surfaces (for more details see @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@, @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@, @B_android#hardware#camera2#params#OutputConfiguration#removeSurface_E@, @B_android#hardware#camera2#CameraCaptureSession#updateOutputConfiguration_E@). A trade-off exists between additional complexity and flexibility. If exercised correctly surface sharing can switch between different output surfaces without interrupting any ongoing repeating capture requests. This saves time and can significantly improve the user experience. Surface sharing can be used in combination with deferred surfaces. The rules from both cases are combined and clients must call @B_android#hardware#camera2#params#OutputConfiguration#enableSurfaceSharing_E@ before creating a capture session. Attach and/or remove output surfaces via @B_android#hardware#camera2#params#OutputConfiguration#addSurface_E@/@B_android#hardware#camera2#params#OutputConfiguration#removeSurface_E@ and finalize the configuration using @B_android#hardware#camera2#CameraCaptureSession#finalizeOutputConfigurations_E@. @B_android#hardware#camera2#CameraCaptureSession#updateOutputConfiguration_E@ can be called after the configuration finalize method returns without exceptions. As of @B_android#os#Build#VERSION_CODES#P_E@, all formats except @B_android#graphics#ImageFormat#JPEG_E@ and @B_android#graphics#ImageFormat#RAW_PRIVATE_E@ can be used for sharing, subject to device support. On prior API levels, only @B_android#graphics#ImageFormat#PRIVATE_E@ format may be used."}