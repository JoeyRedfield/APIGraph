{"Functions": {"sequential()": {"Returns": [["S", "a sequential stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream that is sequential. May return itself, either because the stream was already sequential, or because the underlying stream state was modified to be sequential. This is an", "history": "Added in API level 24", "FullName": "public abstract S sequential ()"}, "unordered()": {"Returns": [["S", "an unordered stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream that is This is an", "history": "Added in API level 24", "FullName": "public abstract S unordered ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "the element iterator for this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator for the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract Iterator<T> iterator ()"}, "onClose(java.lang.Runnable)": {"Returns": [["S", "a stream with a handler that is run if the stream is closed"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: A task to execute when the stream is closed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream with an additional close handler. Close handlers are run when the @B_java#util#stream#BaseStream#close_E@ method is called on the stream, and are executed in the order they were added. All close handlers are run, even if earlier close handlers throw exceptions. If any close handler throws an exception, the first exception thrown will be relayed to the caller of close(), with any remaining exceptions added to that exception as suppressed exceptions (unless one of the remaining exceptions is the same exception as the first exception, since an exception cannot suppress itself.) May return itself. This is an", "history": "Added in API level 24", "FullName": "public abstract S onClose (Runnable closeHandler)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#AutoCloseable#close_E@"], "Permissions": [], "Description": "Closes this stream, causing all close handlers for this stream pipeline to be called.", "history": "Added in API level 24", "FullName": "public abstract void close ()"}, "isParallel()": {"Returns": [["boolean", "true if this stream would execute in parallel if executed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this stream, if a terminal operation were to be executed, would execute in parallel. Calling this method after invoking an terminal stream operation method may yield unpredictable results.", "history": "Added in API level 24", "FullName": "public abstract boolean isParallel ()"}, "parallel()": {"Returns": [["S", "a parallel stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an equivalent stream that is parallel. May return itself, either because the stream was already parallel, or because the underlying stream state was modified to be parallel. This is an", "history": "Added in API level 24", "FullName": "public abstract S parallel ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "the element spliterator for this stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a spliterator for the elements of this stream. This is a", "history": "Added in API level 24", "FullName": "public abstract Spliterator<T> spliterator ()"}}, "Inheritance": [], "ClassName": "@B_java#util#stream#BaseStream_E@", "ClassDesc": "Base interface for streams, which are sequences of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using the stream types @B_java#util#stream#Stream_E@ and @B_java#util#stream#IntStream_E@, computing the sum of the weights of the red widgets: @B_java#util#stream#Stream_E@ and the package documentation for"}