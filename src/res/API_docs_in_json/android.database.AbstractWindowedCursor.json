{"Functions": {"copyStringToBuffer(int,android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["int", "int: the zero-based index of the target column. if the target column is null, return buffer"], ["@B_android#database#CharArrayBuffer_E@", "CharArrayBuffer: the buffer to copy the text into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the requested column text and stores it in the buffer provided. If the buffer size is not sufficient, a new char buffer will be allocated and assigned to CharArrayBuffer.data", "history": "Added in API level 1", "FullName": "public void copyStringToBuffer (int columnIndex, CharArrayBuffer buffer)"}, "getFloat(int)": {"Returns": [["float", "the value of that column as a float."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a float. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a float value is implementation-defined.", "history": "Added in API level 1", "FullName": "public float getFloat (int columnIndex)"}, "hasWindow()": {"Returns": [["boolean", "True if the cursor has an associated cursor window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the cursor has an associated cursor window.", "history": "Added in API level 1", "FullName": "public boolean hasWindow ()"}, "getBlob(int)": {"Returns": [["byte[]", "the value of that column as a byte array."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a byte array. The result and whether this method throws an exception when the column value is null or the column type is not a blob type is implementation-defined.", "history": "Added in API level 1", "FullName": "public byte[] getBlob (int columnIndex)"}, "getInt(int)": {"Returns": [["int", "the value of that column as an int."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as an int. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Integer.MIN_VALUE, Integer.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public int getInt (int columnIndex)"}, "setWindow(android.database.CursorWindow)": {"Returns": [], "Parameters": [["@B_android#database#CursorWindow_E@", "CursorWindow: The new cursor window, typically a remote cursor window."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a new cursor window for the cursor to use. The cursor takes ownership of the provided cursor window; the cursor window will be closed when the cursor is closed or when the cursor adopts a new cursor window. If the cursor previously had a cursor window, then it is closed when the new cursor window is assigned.", "history": "Added in API level 1", "FullName": "public void setWindow (CursorWindow window)"}, "getWindow()": {"Returns": [["@B_android#database#CursorWindow_E@", "The pre-filled window that backs this cursor, or null if none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the cursor is backed by a @B_android#database#CursorWindow_E@, returns a pre-filled window with the contents of the cursor, otherwise null.", "history": "Added in API level 1", "FullName": "public CursorWindow getWindow ()"}, "checkPosition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function throws CursorIndexOutOfBoundsException if the cursor position is out of bounds. Subclass implementations of the get functions should call this before attempting to retrieve data.", "history": "Added in API level 1", "FullName": "protected void checkPosition ()"}, "isFloat(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#AbstractWindowedCursor#getType_E@", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isFloat (int columnIndex)"}, "isBlob(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#AbstractWindowedCursor#getType_E@", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean isBlob (int columnIndex)"}, "isLong(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#AbstractWindowedCursor#getType_E@", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isLong (int columnIndex)"}, "isNull(int)": {"Returns": [["boolean", "whether the column value is null."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the value in the indicated column is null.", "history": "Added in API level 1", "FullName": "public boolean isNull (int columnIndex)"}, "getLong(int)": {"Returns": [["long", "the value of that column as a long."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a long. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Long.MIN_VALUE, Long.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public long getLong (int columnIndex)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "the value of that column as a String."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a String. The result and whether this method throws an exception when the column value is null or the column type is not a string type is implementation-defined.", "history": "Added in API level 1", "FullName": "public String getString (int columnIndex)"}, "getShort(int)": {"Returns": [["short", "the value of that column as a short."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a short. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Short.MIN_VALUE, Short.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public short getShort (int columnIndex)"}, "getType(int)": {"Returns": [["int", "column value type"]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns data type of the given column's value. The preferred type of the column is returned but the data may be converted to other types as documented in the get-type methods such as @B_android#database#Cursor#getInt_E@, @B_android#database#Cursor#getFloat_E@ etc. Returned column types are @B_android#database#Cursor#FIELD_TYPE_NULL_E@ @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@ @B_android#database#Cursor#FIELD_TYPE_STRING_E@ @B_android#database#Cursor#FIELD_TYPE_BLOB_E@", "history": "Added in API level 11", "FullName": "public int getType (int columnIndex)"}, "getDouble(int)": {"Returns": [["double", "the value of that column as a double."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a double. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a double value is implementation-defined.", "history": "Added in API level 1", "FullName": "public double getDouble (int columnIndex)"}, "AbstractWindowedCursor()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public AbstractWindowedCursor ()"}, "isString(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#database#AbstractWindowedCursor#getType_E@", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public boolean isString (int columnIndex)"}}, "Inheritance": ["@B_android#database#AbstractCursor_E@"], "ClassName": "android.database.AbstractWindowedCursor", "ClassDesc": "A base class for Cursors that store their data in @B_android#database#CursorWindow_E@s. The cursor owns the cursor window it uses. When the cursor is closed, its window is also closed. Likewise, when the window used by the cursor is changed, its old window is closed. This policy of strict ownership ensures that cursor windows are not leaked. Subclasses are responsible for filling the cursor window with data during @B_android#database#AbstractCursor#onMove_E@, allocating a new cursor window if necessary. During @B_android#database#AbstractCursor#requery_E@, the existing cursor window should be cleared and filled with new data. If the contents of the cursor change or become invalid, the old window must be closed (because it is owned by the cursor) and set to null."}