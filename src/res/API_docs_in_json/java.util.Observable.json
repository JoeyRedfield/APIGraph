{"Functions": {"deleteObserver(java.util.Observer)": {"Returns": [], "Parameters": [["@B_java#util#Observer_E@", "Observer: the observer to be deleted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes an observer from the set of observers of this object. Passing null to this method will have no effect.", "history": "Added in API level 1", "FullName": "public void deleteObserver (Observer o)"}, "notifyObservers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Observable#clearChanged_E@", "@B_java#util#Observable#hasChanged_E@", "@B_java#util#Observer#update_E@"], "Permissions": [], "Description": "If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and null. In other words, this method is equivalent to:", "history": "Added in API level 1", "FullName": "public void notifyObservers ()"}, "hasChanged()": {"Returns": [["boolean", "true if and only if the setChanged method has been called more recently than the clearChanged method on this object; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Observable#clearChanged_E@", "@B_java#util#Observable#setChanged_E@"], "Permissions": [], "Description": "Tests if this object has changed.", "history": "Added in API level 1", "FullName": "public boolean hasChanged ()"}, "deleteObservers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the observer list so that this object no longer has any observers.", "history": "Added in API level 1", "FullName": "public void deleteObservers ()"}, "Observable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct an Observable with zero Observers.", "history": "Added in API level 1", "FullName": "public Observable ()"}, "addObserver(java.util.Observer)": {"Returns": [], "Parameters": [["@B_java#util#Observer_E@", "Observer: an observer to be added."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the parameter o is null."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set. The order in which notifications will be delivered to multiple observers is not specified. See the class comment.", "history": "Added in API level 1", "FullName": "public void addObserver (Observer o)"}, "setChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this", "history": "Added in API level 1", "FullName": "protected void setChanged ()"}, "notifyObservers(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: any object."]], "Throws": [], "SeeAlso": ["@B_java#util#Observable#clearChanged_E@", "@B_java#util#Observable#hasChanged_E@", "@B_java#util#Observer#update_E@"], "Permissions": [], "Description": "If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and the arg argument.", "history": "Added in API level 1", "FullName": "public void notifyObservers (Object arg)"}, "countObservers()": {"Returns": [["int", "the number of observers of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of observers of this", "history": "Added in API level 1", "FullName": "public int countObservers ()"}, "clearChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Observable#notifyObservers_E@"], "Permissions": [], "Description": "Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the notifyObservers methods.", "history": "Added in API level 1", "FullName": "protected void clearChanged ()"}}, "Inheritance": [], "ClassName": "java.util.Observable", "ClassDesc": "This class represents an observable object, or \"data\" in the model-view paradigm. It can be subclassed to represent an object that the application wants to have observed. An observable object can have one or more observers. An observer may be any object that implements interface Observable's notifyObservers method causes all of its observers to be notified of the change by a call to their update method. The order in which notifications will be delivered is unspecified. The default implementation provided in the Observable class will notify Observers in the order in which they registered interest, but subclasses may change this order, use no guaranteed order, deliver notifications on separate threads, or may guarantee that their subclass follows this order, as they choose. Note that this notification mechanism has nothing to do with threads and is completely separate from the When an observable object is newly created, its set of observers is empty. Two observers are considered the same if and only if the"}