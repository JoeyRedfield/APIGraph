{"Functions": {"updateBytes(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["byte[]", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBytes (String columnLabel, byte[] x)"}, "getTimestamp(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid or if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String columnLabel, Calendar cal)"}, "updateDouble(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["double", "double: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateDouble (String columnLabel, double x)"}, "getURL(int)": {"Returns": [["@B_java#net#URL_E@", "the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the index of the column 1 is the first, 2 is the second,..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; this method is called on a closed result set or if a URL is malformed"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract URL getURL (int columnIndex)"}, "updateBlob(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateBlob (String columnLabel, InputStream inputStream)"}, "updateBlob(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateBlob (int columnIndex, InputStream inputStream)"}, "last()": {"Returns": [["boolean", "true if the cursor is on a valid row; false if there are no rows in the result set"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the last row in this ResultSet object.", "history": "Added in API level 1", "FullName": "public abstract boolean last ()"}, "updateBinaryStream(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x, long length)"}, "getSQLXML(java.lang.String)": {"Returns": [["@B_java#sql#SQLXML_E@", "a SQLXML object that maps an SQL XML value"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet as a java.sql.SQLXML object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract SQLXML getSQLXML (String columnLabel)"}, "insertRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY, this method is called on a closed result set, if this method is called when the cursor is not on the insert row, or if not all of non-nullable columns in the insert row have been given a non-null value"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the contents of the insert row into this ResultSet object and into the database. The cursor must be on the insert row when this method is called.", "history": "Added in API level 1", "FullName": "public abstract void insertRow ()"}, "updateRef(int, java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateRef (int columnIndex, Ref x)"}, "updateBigDecimal(int,java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.math.BigDecimal value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBigDecimal (int columnIndex, BigDecimal x)"}, "updateNClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateNClob (String columnLabel, Reader reader)"}, "getBigDecimal(int,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Use getBigDecimal(int columnIndex) or getBigDecimal(String columnLabel) Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.BigDecimal in the Java programming language.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract BigDecimal getBigDecimal (int columnIndex, int scale)"}, "updateAsciiStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateAsciiStream (String columnLabel, InputStream x)"}, "updateCharacterStream(int,java.io.Reader,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x, int length)"}, "getBigDecimal(java.lang.String, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Use getBigDecimal(int columnIndex) or getBigDecimal(String columnLabel) Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal in the Java programming language.", "history": "added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (String columnLabel, int scale)"}, "getCharacterStream(int)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.", "history": "Added in API level 1", "FullName": "public abstract Reader getCharacterStream (int columnIndex)"}, "updateBlob(int, java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBlob (int columnIndex, Blob x)"}, "updateCharacterStream(int, java.io.Reader, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x, int length)"}, "updateBlob(int,java.sql.Blob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Blob_E@", "Blob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBlob (int columnIndex, Blob x)"}, "updateFloat(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["float", "float: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateFloat (String columnLabel, float x)"}, "updateArray(int,java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateArray (int columnIndex, Array x)"}, "getRef(int)": {"Returns": [["@B_java#sql#Ref_E@", "a Ref object representing an SQL REF value"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Ref getRef (int columnIndex)"}, "updateBinaryStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBinaryStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x)"}, "getHoldability()": {"Returns": [["int", "either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the holdability of this ResultSet object", "history": "Added in API level 9", "FullName": "public abstract int getHoldability ()"}, "updateTime(int, java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateTime (int columnIndex, Time x)"}, "getBigDecimal(int, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Use getBigDecimal(int columnIndex) or getBigDecimal(String columnLabel) Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.BigDecimal in the Java programming language.", "history": "added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (int columnIndex, int scale)"}, "updateNClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (String columnLabel, Reader reader, long length)"}, "setFetchSize(int)": {"Returns": [], "Parameters": [["int", "int: the number of rows to fetch"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the condition rows >= 0 is not satisfied"]], "SeeAlso": ["@B_java#sql#ResultSet#getFetchSize_E@"], "Permissions": [], "Description": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object. If the fetch size specified is zero, the JDBC driver ignores the value and is free to make its own best guess as to what the fetch size should be. The default value is set by the Statement object that created the result set. The fetch size may be changed at any time.", "history": "Added in API level 1", "FullName": "public abstract void setFetchSize (int rows)"}, "getNClob(int)": {"Returns": [["@B_java#sql#NClob_E@", "a NClob object representing the SQL NCLOB value in the specified column"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract NClob getNClob (int columnIndex)"}, "updateBoolean(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["boolean", "boolean: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBoolean (String columnLabel, boolean x)"}, "updateBlob(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateBlob (int columnIndex, InputStream inputStream, long length)"}, "updateCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x)"}, "updateByte(int,byte)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["byte", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateByte (int columnIndex, byte x)"}, "updateDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["double", "double: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateDouble (String columnLabel, double x)"}, "updateClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateClob (String columnLabel, Reader reader)"}, "updateLong(int, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["long", "long: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateLong (int columnIndex, long x)"}, "updateNClob(java.lang.String, java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#NClob_E@", "NClob: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.NClob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNClob (String columnLabel, NClob nClob)"}, "getTime(int)": {"Returns": [["@B_java#sql#Time_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (int columnIndex)"}, "updateNCharacterStream(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNCharacterStream (int columnIndex, Reader x, long length)"}, "beforeFirst()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the front of this ResultSet object, just before the first row. This method has no effect if the result set contains no rows.", "history": "Added in API level 1", "FullName": "public abstract void beforeFirst ()"}, "updateAsciiStream(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateAsciiStream (String columnLabel, InputStream x, long length)"}, "updateRowId(java.lang.String,java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#RowId_E@", "RowId: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a RowId value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateRowId (String columnLabel, RowId x)"}, "relative(int)": {"Returns": [["boolean", "true if the cursor is on a row; false otherwise"]], "Parameters": [["int", "int: an int specifying the number of rows to move from the current row; a positive number moves the cursor forward; a negative number moves the cursor backward"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor a relative number of rows, either positive or negative. Attempting to move beyond the first/last row in the result set positions the cursor before/after the the first/last row. Calling relative(0) is valid, but does not change the cursor position. Note: Calling the method relative(1) is identical to calling the method next() and calling the method relative(-1) is identical to calling the method previous().", "history": "Added in API level 1", "FullName": "public abstract boolean relative (int rows)"}, "updateBlob(java.lang.String,java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Blob_E@", "Blob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBlob (String columnLabel, Blob x)"}, "getRef(java.lang.String)": {"Returns": [["@B_java#sql#Ref_E@", "a Ref object representing the SQL REF value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Ref getRef (String columnLabel)"}, "updateInt(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateInt (int columnIndex, int x)"}, "getNString(int)": {"Returns": [["@B_java#lang#String_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.", "history": "Added in API level 9", "FullName": "public abstract String getNString (int columnIndex)"}, "updateNCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateNCharacterStream (int columnIndex, Reader x)"}, "rowUpdated()": {"Returns": [["boolean", "true if the current row is detected to have been visibly updated by the owner or another; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#updatesAreDetected_E@"], "Permissions": [], "Description": "Retrieves whether the current row has been updated. The value returned depends on whether or not the result set can detect updates. rowUpdated method is optional with a result set concurrency of CONCUR_READ_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean rowUpdated ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed. The closing of a ResultSet object does Blob, Clob or NClob objects created by the ResultSet. Blob, Clob or NClob objects remain valid for at least the duration of the transaction in which they are creataed, unless their free method is invoked. When a ResultSet is closed, any ResultSetMetaData instances that were created by calling the getMetaData method remain accessible. ResultSet object is automatically closed by the Statement object that generated it when that Statement object is closed, re-executed, or is used to retrieve the next result from a sequence of multiple results. Calling the method close on a ResultSet object that is already closed is a no-op.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "getNClob(java.lang.String)": {"Returns": [["@B_java#sql#NClob_E@", "a NClob object representing the SQL NCLOB value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract NClob getNClob (String columnLabel)"}, "getArray(int)": {"Returns": [["@B_java#sql#Array_E@", "an Array object representing the SQL ARRAY value in the specified column"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Array getArray (int columnIndex)"}, "updateNClob(int, java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.NClob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, NClob nClob)"}, "updateNCharacterStream(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNCharacterStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateNCharacterStream (int columnIndex, Reader x)"}, "getTimestamp(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int columnIndex, Calendar cal)"}, "updateBigDecimal(int, java.math.BigDecimal)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#math#BigDecimal_E@", "BigDecimal: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.math.BigDecimal value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBigDecimal (int columnIndex, BigDecimal x)"}, "updateCharacterStream(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object containing the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateCharacterStream (String columnLabel, Reader reader, long length)"}, "updateBinaryStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBinaryStream (String columnLabel, InputStream x, int length)"}, "updateShort(java.lang.String,short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["short", "short: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateShort (String columnLabel, short x)"}, "updateByte(java.lang.String,byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["byte", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateByte (String columnLabel, byte x)"}, "setFetchDirection(int)": {"Returns": [], "Parameters": [["int", "int: an int specifying the suggested fetch direction; one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY and the fetch direction is not FETCH_FORWARD"]], "SeeAlso": ["@B_java#sql#Statement#setFetchDirection_E@", "@B_java#sql#ResultSet#getFetchDirection_E@"], "Permissions": [], "Description": "Gives a hint as to the direction in which the rows in this ResultSet object will be processed. The initial value is determined by the Statement object that produced this ResultSet object. The fetch direction may be changed at any time.", "history": "Added in API level 1", "FullName": "public abstract void setFetchDirection (int direction)"}, "getDouble(java.lang.String)": {"Returns": [["double", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (String columnLabel)"}, "moveToInsertRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the insert row. The current cursor position is remembered while the cursor is positioned on the insert row. The insert row is a special row associated with an updatable result set. It is essentially a buffer where a new row may be constructed by calling the updater methods prior to inserting the row into the result set. Only the updater, getter, and insertRow methods may be called when the cursor is on the insert row. All of the columns in a result set must be given a value each time this method is called before calling insertRow. An updater method must be called before a getter method can be called on a column value.", "history": "Added in API level 1", "FullName": "public abstract void moveToInsertRow ()"}, "updateLong(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["long", "long: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateLong (String columnLabel, long x)"}, "updateClob(java.lang.String,java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Clob_E@", "Clob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateClob (String columnLabel, Clob x)"}, "findColumn(java.lang.String)": {"Returns": [["int", "the column index of the given column name"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the ResultSet object does not contain a column labeled columnLabel, a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Maps the given ResultSet column label to its ResultSet column index.", "history": "Added in API level 1", "FullName": "public abstract int findColumn (String columnLabel)"}, "getDate(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (String columnLabel, Calendar cal)"}, "updateRef(int,java.sql.Ref)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Ref_E@", "Ref: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateRef (int columnIndex, Ref x)"}, "moveToCurrentRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the remembered cursor position, usually the current row. This method has no effect if the cursor is not on the insert row.", "history": "Added in API level 1", "FullName": "public abstract void moveToCurrentRow ()"}, "clearWarnings()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Clears all warnings reported on this ResultSet object. After this method is called, the method getWarnings returns null until a new warning is reported for this ResultSet object.", "history": "Added in API level 1", "FullName": "public abstract void clearWarnings ()"}, "getURL(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; this method is called on a closed result set or if a URL is malformed"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract URL getURL (String columnLabel)"}, "updateRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY; this method is called on a closed result set or if this method is called when the cursor is on the insert row"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the underlying database with the new contents of the current row of this ResultSet object. This method cannot be called when the cursor is on the insert row.", "history": "Added in API level 1", "FullName": "public abstract void updateRow ()"}, "getCursorName()": {"Returns": [["@B_java#lang#String_E@", "the SQL name for this ResultSet object's cursor"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of the SQL cursor used by this ResultSet object. In SQL, a result table is retrieved through a cursor that is named. The current row of a result set can be updated or deleted using a positioned update/delete statement that references the cursor name. To insure that the cursor has the proper isolation level to support update, the cursor's SELECT statement should be of the form SELECT FOR UPDATE. If FOR UPDATE is omitted, the positioned updates may fail. The JDBC API supports this SQL feature by providing the name of the SQL cursor used by a ResultSet object. The current row of a ResultSet object is also the current row of this SQL cursor.", "history": "Added in API level 1", "FullName": "public abstract String getCursorName ()"}, "getNString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.", "history": "Added in API level 9", "FullName": "public abstract String getNString (String columnLabel)"}, "updateFloat(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["float", "float: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateFloat (String columnLabel, float x)"}, "updateNCharacterStream(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNCharacterStream (int columnIndex, Reader x, long length)"}, "updateArray(java.lang.String, java.sql.Array)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Array_E@", "Array: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateArray (String columnLabel, Array x)"}, "getMetaData()": {"Returns": [["@B_java#sql#ResultSetMetaData_E@", "the description of this ResultSet object's columns"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number, types and properties of this ResultSet object's columns.", "history": "Added in API level 1", "FullName": "public abstract ResultSetMetaData getMetaData ()"}, "updateNClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, Reader reader, long length)"}, "updateLong(int,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["long", "long: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateLong (int columnIndex, long x)"}, "updateNClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, Reader reader, long length)"}, "updateDouble(int, double)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["double", "double: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateDouble (int columnIndex, double x)"}, "updateDate(java.lang.String, java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Date_E@", "Date: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateDate (String columnLabel, Date x)"}, "afterLast()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the end of this ResultSet object, just after the last row. This method has no effect if the result set contains no rows.", "history": "Added in API level 1", "FullName": "public abstract void afterLast ()"}, "updateNClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (String columnLabel, Reader reader)"}, "updateBinaryStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x, int length)"}, "updateClob(int, java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateClob (int columnIndex, Clob x)"}, "updateBlob(java.lang.String, java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateBlob (String columnLabel, InputStream inputStream)"}, "getTimestamp(java.lang.String)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String columnLabel)"}, "updateAsciiStream(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateAsciiStream which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x)"}, "updateLong(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["long", "long: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateLong (String columnLabel, long x)"}, "getSQLXML(int)": {"Returns": [["@B_java#sql#SQLXML_E@", "a SQLXML object that maps an SQL XML value"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet as a java.sql.SQLXML object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract SQLXML getSQLXML (int columnIndex)"}, "updateObject(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#Object_E@", "Object: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateObject (String columnLabel, Object x)"}, "getStatement()": {"Returns": [["@B_java#sql#Statement_E@", "the Statment object that produced this ResultSet object or null if the result set was produced some other way"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the Statement object that produced this ResultSet object. If the result set was generated some other way, such as by a DatabaseMetaData method, this method may return null.", "history": "Added in API level 1", "FullName": "public abstract Statement getStatement ()"}, "cancelRowUpdates()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set; the result set concurrency is CONCUR_READ_ONLY or if this method is called when the cursor is on the insert row"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Cancels the updates made to the current row in this ResultSet object. This method may be called after calling an updater method(s) and before calling the method updateRow to roll back the updates made to a row. If no updates have been made or updateRow has already been called, this method has no effect.", "history": "Added in API level 1", "FullName": "public abstract void cancelRowUpdates ()"}, "updateTimestamp(int, java.sql.Timestamp)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Timestamp value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateTimestamp (int columnIndex, Timestamp x)"}, "getBoolean(int)": {"Returns": [["boolean", "the column value; if the value is SQL NULL, the value returned is false"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. If the designated column has a datatype of CHAR or VARCHAR and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 0, a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 1, a value of true is returned.", "history": "Added in API level 1", "FullName": "public abstract boolean getBoolean (int columnIndex)"}, "getArray(java.lang.String)": {"Returns": [["@B_java#sql#Array_E@", "an Array object representing the SQL ARRAY value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Array getArray (String columnLabel)"}, "updateCharacterStream(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x, long length)"}, "updateBlob(int, java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateBlob (int columnIndex, InputStream inputStream)"}, "updateBytes(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["byte[]", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBytes (String columnLabel, byte[] x)"}, "getBinaryStream(int)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of uninterpreted bytes; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY values. 0 when the method InputStream.available is called whether there is data available or not.", "history": "Added in API level 1", "FullName": "public abstract InputStream getBinaryStream (int columnIndex)"}, "updateNString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#lang#String_E@", "String: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; the result set concurrency is CONCUR_READ_ONLY or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNString (int columnIndex, String nString)"}, "updateBytes(int, byte[])": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["byte[]", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBytes (int columnIndex, byte[] x)"}, "updateBlob(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateBlob (String columnLabel, InputStream inputStream, long length)"}, "updateBoolean(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBoolean (int columnIndex, boolean x)"}, "updateNClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, Reader reader)"}, "rowDeleted()": {"Returns": [["boolean", "true if the current row is detected to have been deleted by the owner or another; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#deletesAreDetected_E@"], "Permissions": [], "Description": "Retrieves whether a row has been deleted. A deleted row may leave a visible \"hole\" in a result set. This method can be used to detect holes in a result set. The value returned depends on whether or not this ResultSet object can detect deletions. rowDeleted method is optional with a result set concurrency of CONCUR_READ_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean rowDeleted ()"}, "updateObject(int, java.lang.Object, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the new column value"], ["int", "int: for an object of java.math.BigDecimal , this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the statement is executed.", "history": "added in API level 1", "FullName": "public abstract void updateObject (int columnIndex, Object x, int scaleOrLength)"}, "updateBinaryStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x)"}, "getBytes(java.lang.String)": {"Returns": [["byte[]", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values returned by the driver.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBytes (String columnLabel)"}, "updateBoolean(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["boolean", "boolean: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBoolean (String columnLabel, boolean x)"}, "getClob(java.lang.String)": {"Returns": [["@B_java#sql#Clob_E@", "a Clob object representing the SQL CLOB value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Clob getClob (String columnLabel)"}, "updateRef(java.lang.String,java.sql.Ref)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Ref_E@", "Ref: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateRef (String columnLabel, Ref x)"}, "updateAsciiStream(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x, long length)"}, "updateFloat(int,float)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["float", "float: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateFloat (int columnIndex, float x)"}, "getBoolean(java.lang.String)": {"Returns": [["boolean", "the column value; if the value is SQL NULL, the value returned is false"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. If the designated column has a datatype of CHAR or VARCHAR and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 0, a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains a 1, a value of true is returned.", "history": "Added in API level 1", "FullName": "public abstract boolean getBoolean (String columnLabel)"}, "updateAsciiStream(int, java.io.InputStream, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x, int length)"}, "getClob(int)": {"Returns": [["@B_java#sql#Clob_E@", "a Clob object representing the SQL CLOB value in the specified column"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Clob getClob (int columnIndex)"}, "getAsciiStream(int)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of one-byte ASCII characters; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII. 0 when the method InputStream.available is called whether there is data available or not.", "history": "Added in API level 1", "FullName": "public abstract InputStream getAsciiStream (int columnIndex)"}, "updateNCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object containing the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateNCharacterStream (String columnLabel, Reader reader)"}, "updateCharacterStream(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x)"}, "updateTime(int,java.sql.Time)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Time_E@", "Time: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateTime (int columnIndex, Time x)"}, "getTimestamp(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid or if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String columnLabel, Calendar cal)"}, "updateByte(java.lang.String, byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["byte", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateByte (String columnLabel, byte x)"}, "getFetchSize()": {"Returns": [["int", "the current fetch size for this ResultSet object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": ["@B_java#sql#ResultSet#setFetchSize_E@"], "Permissions": [], "Description": "Retrieves the fetch size for this ResultSet object.", "history": "Added in API level 1", "FullName": "public abstract int getFetchSize ()"}, "updateTime(java.lang.String, java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Time_E@", "Time: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateTime (String columnLabel, Time x)"}, "getBigDecimal(java.lang.String)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.", "history": "Added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (String columnLabel)"}, "updateObject(int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateObject (int columnIndex, Object x)"}, "getRowId(java.lang.String)": {"Returns": [["@B_java#sql#RowId_E@", "the column value ; if the value is a SQL NULL the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract RowId getRowId (String columnLabel)"}, "getTime(java.lang.String)": {"Returns": [["@B_java#sql#Time_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (String columnLabel)"}, "next()": {"Returns": [["boolean", "true if the new current row is valid; false if there are no more rows"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor froward one row from its current position. A ResultSet cursor is initially positioned before the first row; the first call to the method next makes the first row the current row; the second call makes the second row the current row, and so on. When a call to the next method returns false, the cursor is positioned after the last row. Any invocation of a ResultSet method which requires a current row will result in a SQLException being thrown. If the result set type is TYPE_FORWARD_ONLY, it is vendor specified whether their JDBC driver implementation will return false or throw an SQLException on a subsequent call to next. If an input stream is open for the current row, a call to the method next will implicitly close it. A ResultSet object's warning chain is cleared when a new row is read.", "history": "Added in API level 1", "FullName": "public abstract boolean next ()"}, "updateRowId(java.lang.String, java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#RowId_E@", "RowId: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a RowId value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateRowId (String columnLabel, RowId x)"}, "updateClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateClob (String columnLabel, Reader reader)"}, "getRow()": {"Returns": [["int", "the current row number; 0 if there is no current row"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current row number. The first row is number 1, the second number 2, and so on. getRow method is optional for ResultSets with a result set type of TYPE_FORWARD_ONLY", "history": "Added in API level 1", "FullName": "public abstract int getRow ()"}, "getDate(int)": {"Returns": [["@B_java#sql#Date_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (int columnIndex)"}, "updateNull(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a null value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateNull (String columnLabel)"}, "updateShort(int, short)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["short", "short: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateShort (int columnIndex, short x)"}, "updateNClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, Reader reader)"}, "getShort(int)": {"Returns": [["short", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract short getShort (int columnIndex)"}, "getTime(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Time getTime (String columnLabel, Calendar cal)"}, "getRowId(int)": {"Returns": [["@B_java#sql#RowId_E@", "the column value; if the value is a SQL NULL the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract RowId getRowId (int columnIndex)"}, "updateShort(java.lang.String, short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["short", "short: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateShort (String columnLabel, short x)"}, "getObject(java.lang.String,java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [["@B_java#lang#Object_E@", "an Object representing the SQL value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Map_E@", "Map: a java.util.Map object that contains the mapping from SQL type names to classes in the Java programming language"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method uses the specified Map object for custom mapping if appropriate.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (String columnLabel, Map<String, Class<?>> map)"}, "updateCharacterStream(java.lang.String,java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object containing the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateCharacterStream (String columnLabel, Reader reader, int length)"}, "rowInserted()": {"Returns": [["boolean", "true if the current row is detected to have been inserted; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#DatabaseMetaData#insertsAreDetected_E@"], "Permissions": [], "Description": "Retrieves whether the current row has had an insertion. The value returned depends on whether or not this ResultSet object can detect visible inserts. rowInserted method is optional with a result set concurrency of CONCUR_READ_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean rowInserted ()"}, "getInt(int)": {"Returns": [["int", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract int getInt (int columnIndex)"}, "updateTime(java.lang.String,java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Time_E@", "Time: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateTime (String columnLabel, Time x)"}, "getByte(java.lang.String)": {"Returns": [["byte", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte getByte (String columnLabel)"}, "updateNString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#lang#String_E@", "String: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; the result set concurrency is CONCUR_READ_ONLY or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNString (int columnIndex, String nString)"}, "updateNString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#String_E@", "String: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; the result set concurrency is CONCUR_READ_ONLY or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateNString (String columnLabel, String nString)"}, "updateShort(int,short)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["short", "short: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateShort (int columnIndex, short x)"}, "getObject(int)": {"Returns": [["@B_java#lang#Object_E@", "a java.lang.Object holding the column value"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. This method may also be used to read database-specific abstract data types. In the JDBC 2.0 API, the behavior of method getObject is extended to materialize data of SQL user-defined types. If Connection.getTypeMap does not throw a SQLFeatureNotSupportedException, then when a column contains a structured or distinct value, the behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()). If Connection.getTypeMap does throw a SQLFeatureNotSupportedException, then structured values are not supported, and distinct values are mapped to the default Java class as determined by the underlying SQL type of the DISTINCT type.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (int columnIndex)"}, "updateObject(java.lang.String,java.lang.Object,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#Object_E@", "Object: the new column value"], ["int", "int: for an object of java.math.BigDecimal , this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the statement is executed.", "history": "Added in API level 1", "FullName": "public abstract void updateObject (String columnLabel, Object x, int scaleOrLength)"}, "updateBlob(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given input stream, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateBlob (int columnIndex, InputStream inputStream, long length)"}, "getBlob(int)": {"Returns": [["@B_java#sql#Blob_E@", "a Blob object representing the SQL BLOB value in the specified column"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Blob getBlob (int columnIndex)"}, "updateBinaryStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x, int length)"}, "updateBytes(int,byte[])": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["byte[]", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBytes (int columnIndex, byte[] x)"}, "getByte(int)": {"Returns": [["byte", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte getByte (int columnIndex)"}, "updateString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#String_E@", "String: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateString (String columnLabel, String x)"}, "getFloat(java.lang.String)": {"Returns": [["float", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (String columnLabel)"}, "getTimestamp(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int columnIndex, Calendar cal)"}, "updateDouble(int,double)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["double", "double: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateDouble (int columnIndex, double x)"}, "getString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract String getString (String columnLabel)"}, "updateBinaryStream(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateBinaryStream (String columnLabel, InputStream x, long length)"}, "updateAsciiStream(int,java.io.InputStream,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x, int length)"}, "updateClob(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateClob (int columnIndex, Reader reader, long length)"}, "updateString(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateString (int columnIndex, String x)"}, "getDouble(int)": {"Returns": [["double", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (int columnIndex)"}, "updateAsciiStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["int", "int: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateAsciiStream (String columnLabel, InputStream x, int length)"}, "getBigDecimal(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.", "history": "Added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (int columnIndex)"}, "updateTimestamp(int,java.sql.Timestamp)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Timestamp_E@", "Timestamp: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Timestamp value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateTimestamp (int columnIndex, Timestamp x)"}, "updateDate(java.lang.String,java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Date_E@", "Date: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateDate (String columnLabel, Date x)"}, "updateNClob(int,java.sql.NClob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#NClob_E@", "NClob: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.NClob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (int columnIndex, NClob nClob)"}, "updateInt(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["int", "int: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateInt (String columnLabel, int x)"}, "updateArray(int, java.sql.Array)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Array_E@", "Array: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateArray (int columnIndex, Array x)"}, "updateSQLXML(int,java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; this method is called on a closed result set; the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object; if there is an error processing the XML value or the result set concurrency is CONCUR_READ_ONLY. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.SQLXML value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateSQLXML (int columnIndex, SQLXML xmlObject)"}, "updateNClob(java.lang.String,java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#NClob_E@", "NClob: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is CONCUR_READ_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.NClob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNClob (String columnLabel, NClob nClob)"}, "updateSQLXML(int, java.sql.SQLXML)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#SQLXML_E@", "SQLXML: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; this method is called on a closed result set; the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object; if there is an error processing the XML value or the result set concurrency is CONCUR_READ_ONLY. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.SQLXML value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateSQLXML (int columnIndex, SQLXML xmlObject)"}, "isClosed()": {"Returns": [["boolean", "true if this ResultSet object is closed; false if it is still open"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether this ResultSet object has been closed. A ResultSet is closed if the method close has been called on it, or if it is automatically closed.", "history": "Added in API level 9", "FullName": "public abstract boolean isClosed ()"}, "getCharacterStream(java.lang.String)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.", "history": "Added in API level 1", "FullName": "public abstract Reader getCharacterStream (String columnLabel)"}, "updateClob(int,java.sql.Clob)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Clob_E@", "Clob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateClob (int columnIndex, Clob x)"}, "getType()": {"Returns": [["int", "ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the type of this ResultSet object. The type is determined by the Statement object that created the result set.", "history": "Added in API level 1", "FullName": "public abstract int getType ()"}, "first()": {"Returns": [["boolean", "true if the cursor is on a valid row; false if there are no rows in the result set"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the first row in this ResultSet object.", "history": "Added in API level 1", "FullName": "public abstract boolean first ()"}, "updateBinaryStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateBinaryStream (String columnLabel, InputStream x)"}, "updateCharacterStream(int, java.io.Reader, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateCharacterStream (int columnIndex, Reader x, long length)"}, "updateRowId(int,java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a RowId value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateRowId (int columnIndex, RowId x)"}, "getNCharacterStream(java.lang.String)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.", "history": "Added in API level 9", "FullName": "public abstract Reader getNCharacterStream (String columnLabel)"}, "updateRowId(int, java.sql.RowId)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second 2, ..."], ["@B_java#sql#RowId_E@", "RowId: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a RowId value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateRowId (int columnIndex, RowId x)"}, "getShort(java.lang.String)": {"Returns": [["short", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract short getShort (String columnLabel)"}, "isLast()": {"Returns": [["boolean", "true if the cursor is on the last row; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the cursor is on the last row of this ResultSet object. isLast may be expensive because the JDBC driver might need to fetch ahead one row in order to determine whether the current row is the last row in the result set. isLast method is optional for ResultSets with a result set type of TYPE_FORWARD_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean isLast ()"}, "updateClob(int,java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateClob (int columnIndex, Reader reader)"}, "getTime(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (int columnIndex, Calendar cal)"}, "getFetchDirection()": {"Returns": [["int", "the current fetch direction for this ResultSet object"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": ["@B_java#sql#ResultSet#setFetchDirection_E@"], "Permissions": [], "Description": "Retrieves the fetch direction for this ResultSet object.", "history": "Added in API level 1", "FullName": "public abstract int getFetchDirection ()"}, "getLong(int)": {"Returns": [["long", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract long getLong (int columnIndex)"}, "updateCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object containing the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateCharacterStream (String columnLabel, Reader reader)"}, "updateString(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateString (int columnIndex, String x)"}, "updateNCharacterStream(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object containing the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a character stream value, which will have the specified number of bytes. The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNCharacterStream (String columnLabel, Reader reader, long length)"}, "getTime(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Time getTime (int columnIndex, Calendar cal)"}, "updateObject(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#Object_E@", "Object: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateObject (String columnLabel, Object x)"}, "getTimestamp(int)": {"Returns": [["@B_java#sql#Timestamp_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int columnIndex)"}, "getConcurrency()": {"Returns": [["int", "the concurrency type, either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the concurrency mode of this ResultSet object. The concurrency used is determined by the Statement object that created the result set.", "history": "Added in API level 1", "FullName": "public abstract int getConcurrency ()"}, "updateNString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#String_E@", "String: the value for the column to be updated"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; this method is called on a closed result set; the result set concurrency is CONCUR_READ_ONLY or if a database access error occurs"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateNString (String columnLabel, String nString)"}, "getObject(int,java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [["@B_java#lang#Object_E@", "an Object in the Java programming language representing the SQL value"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Map_E@", "Map: a java.util.Map object that contains the mapping from SQL type names to classes in the Java programming language"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method uses the given Map object for the custom mapping of the SQL structured or distinct type that is being retrieved.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (int columnIndex, Map<String, Class<?>> map)"}, "getDate(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Date getDate (int columnIndex, Calendar cal)"}, "getObject(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "a java.lang.Object holding the column value"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. This method may also be used to read database-specific abstract data types. In the JDBC 2.0 API, the behavior of the method getObject is extended to materialize data of SQL user-defined types. When a column contains a structured or distinct value, the behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()).", "history": "Added in API level 1", "FullName": "public abstract Object getObject (String columnLabel)"}, "absolute(int)": {"Returns": [["boolean", "true if the cursor is moved to a position in this ResultSet object; false if the cursor is before the first row or after the last row"]], "Parameters": [["int", "int: the number of the row to which the cursor should move. A value of zero indicates that the cursor will be positioned before the first row; a positive number indicates the row number counting from the beginning of the result set; a negative number indicates the row number counting from the end of the result set"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the given row number in this ResultSet object. If the row number is positive, the cursor moves to the given row number with respect to the beginning of the result set. The first row is row 1, the second is row 2, and so on. If the given row number is negative, the cursor moves to an absolute row position with respect to the end of the result set. For example, calling the method absolute(-1) positions the cursor on the last row; calling the method absolute(-2) moves the cursor to the next-to-last row, and so on. If the row number specified is zero, the cursor is moved to before the first row. An attempt to position the cursor beyond the first/last row in the result set leaves the cursor before the first row or after the last row. absolute(1) is the same as calling first(). Calling absolute(-1) is the same as calling last().", "history": "Added in API level 1", "FullName": "public abstract boolean absolute (int row)"}, "updateClob(java.lang.String, java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Clob_E@", "Clob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateClob (String columnLabel, Clob x)"}, "updateDate(int,java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateDate (int columnIndex, Date x)"}, "getTime(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (String columnLabel, Calendar cal)"}, "updateClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateClob (String columnLabel, Reader reader, long length)"}, "getWarnings()": {"Returns": [["@B_java#sql#SQLWarning_E@", "the first SQLWarning object reported or null if there are none"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the first warning reported by calls on this ResultSet object. Subsequent warnings on this ResultSet object will be chained to the SQLWarning object that this method returns. The warning chain is automatically cleared each time a new row is read. This method may not be called on a ResultSet object that has been closed; doing so will cause an SQLException to be thrown. ResultSet methods. Any warning caused by Statement methods (such as reading OUT parameters) will be chained on the Statement object.", "history": "Added in API level 1", "FullName": "public abstract SQLWarning getWarnings ()"}, "getDate(java.lang.String)": {"Returns": [["@B_java#sql#Date_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (String columnLabel)"}, "isFirst()": {"Returns": [["boolean", "true if the cursor is on the first row; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the cursor is on the first row of this ResultSet object. isFirst method is optional for ResultSets with a result set type of TYPE_FORWARD_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean isFirst ()"}, "updateByte(int, byte)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["byte", "byte: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateByte (int columnIndex, byte x)"}, "getNCharacterStream(int)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.", "history": "Added in API level 9", "FullName": "public abstract Reader getNCharacterStream (int columnIndex)"}, "getUnicodeStream(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of two-byte Unicode characters. If the value is SQL NULL, the value returned is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "use getCharacterStream instead Retrieves the value of the designated column in the current row of this ResultSet object as a stream of two-byte Unicode characters. The first byte is the high byte; the second byte is the low byte. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC technology-enabled driver will do any necessary conversion from the database format into Unicode. 0 when the method InputStream.available is called, whether there is data available or not.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract InputStream getUnicodeStream (String columnLabel)"}, "updateClob(int, java.io.Reader)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object. The data will be read from the stream as needed until end-of-stream is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void updateClob (int columnIndex, Reader reader)"}, "updateSQLXML(java.lang.String,java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#SQLXML_E@", "SQLXML: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; this method is called on a closed result set; the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object; if there is an error processing the XML value or the result set concurrency is CONCUR_READ_ONLY. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.SQLXML value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateSQLXML (String columnLabel, SQLXML xmlObject)"}, "updateClob(java.lang.String, java.io.Reader, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateClob (String columnLabel, Reader reader, long length)"}, "updateObject(int,java.lang.Object,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the new column value"], ["int", "int: for an object of java.math.BigDecimal , this is the number of digits after the decimal point. For Java Object types InputStream and Reader, this is the length of the data in the stream or reader. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the statement is executed.", "history": "Added in API level 1", "FullName": "public abstract void updateObject (int columnIndex, Object x, int scaleOrLength)"}, "updateDate(int, java.sql.Date)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#sql#Date_E@", "Date: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateDate (int columnIndex, Date x)"}, "previous()": {"Returns": [["boolean", "true if the cursor is now positioned on a valid row; false if the cursor is positioned before the first row"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set or the result set type is TYPE_FORWARD_ONLY"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Moves the cursor to the previous row in this ResultSet object. When a call to the previous method returns false, the cursor is positioned before the first row. Any invocation of a ResultSet method which requires a current row will result in a SQLException being thrown. If an input stream is open for the current row, a call to the method previous will implicitly close it. A ResultSet object's warning change is cleared when a new row is read.", "history": "Added in API level 1", "FullName": "public abstract boolean previous ()"}, "updateTimestamp(java.lang.String,java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Timestamp_E@", "Timestamp: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Timestamp value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateTimestamp (String columnLabel, Timestamp x)"}, "updateObject(int,java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#Object_E@", "Object: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateObject (int columnIndex, Object x)"}, "updateRef(java.lang.String, java.sql.Ref)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Ref_E@", "Ref: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateRef (String columnLabel, Ref x)"}, "isAfterLast()": {"Returns": [["boolean", "true if the cursor is after the last row; false if the cursor is at any other position or the result set contains no rows"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the cursor is after the last row in this ResultSet object. isAfterLast method is optional for ResultSets with a result set type of TYPE_FORWARD_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean isAfterLast ()"}, "getBytes(int)": {"Returns": [["byte[]", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values returned by the driver.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBytes (int columnIndex)"}, "updateBinaryStream(int, java.io.InputStream, long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateBinaryStream (int columnIndex, InputStream x, long length)"}, "updateBlob(java.lang.String, java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Blob_E@", "Blob: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateBlob (String columnLabel, Blob x)"}, "updateInt(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateInt (int columnIndex, int x)"}, "getBigDecimal(java.lang.String,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Use getBigDecimal(int columnIndex) or getBigDecimal(String columnLabel) Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal in the Java programming language.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract BigDecimal getBigDecimal (String columnLabel, int scale)"}, "updateClob(int,java.io.Reader,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column using the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The JDBC driver will do any necessary conversion from UNICODE to the database char format. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateClob (int columnIndex, Reader reader, long length)"}, "deleteRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY; this method is called on a closed result set or if this method is called when the cursor is on the insert row"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes the current row from this ResultSet object and from the underlying database. This method cannot be called when the cursor is on the insert row.", "history": "Added in API level 1", "FullName": "public abstract void deleteRow ()"}, "isBeforeFirst()": {"Returns": [["boolean", "true if the cursor is before the first row; false if the cursor is at any other position or the result set contains no rows"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the cursor is before the first row in this ResultSet object. isBeforeFirst method is optional for ResultSets with a result set type of TYPE_FORWARD_ONLY", "history": "Added in API level 1", "FullName": "public abstract boolean isBeforeFirst ()"}, "updateBigDecimal(java.lang.String,java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#math#BigDecimal_E@", "BigDecimal: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.BigDecimal value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBigDecimal (String columnLabel, BigDecimal x)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "the column value; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract String getString (int columnIndex)"}, "updateNull(int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a null value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateNull (int columnIndex)"}, "updateAsciiStream(int,java.io.InputStream)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value. The data will be read from the stream as needed until end-of-stream is reached. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database. updateAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x)"}, "updateFloat(int, float)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["float", "float: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 1", "FullName": "public abstract void updateFloat (int columnIndex, float x)"}, "updateArray(java.lang.String,java.sql.Array)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#Array_E@", "Array: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateArray (String columnLabel, Array x)"}, "getBinaryStream(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of uninterpreted bytes; if the value is SQL NULL, the result is null"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY values. 0 when the method available is called whether there is data available or not.", "history": "Added in API level 1", "FullName": "public abstract InputStream getBinaryStream (String columnLabel)"}, "getLong(java.lang.String)": {"Returns": [["long", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract long getLong (String columnLabel)"}, "getFloat(int)": {"Returns": [["float", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (int columnIndex)"}, "updateString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#lang#String_E@", "String: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateString (String columnLabel, String x)"}, "getAsciiStream(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of one-byte ASCII characters. If the value is SQL NULL, the value returned is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII. 0 when the method available is called whether there is data available or not.", "history": "Added in API level 1", "FullName": "public abstract InputStream getAsciiStream (String columnLabel)"}, "getUnicodeStream(int)": {"Returns": [["@B_java#io#InputStream_E@", "a Java input stream that delivers the database column value as a stream of two-byte Unicode characters; if the value is SQL NULL, the value returned is null"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "use getCharacterStream in place of getUnicodeStream Retrieves the value of the designated column in the current row of this ResultSet object as as a stream of two-byte 3 characters. The first byte is the high byte; the second byte is the low byte. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHARvalues. The JDBC driver will do any necessary conversion from the database format into Unicode. 0 when the method InputStream.available is called, whether there is data available or not.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract InputStream getUnicodeStream (int columnIndex)"}, "getDate(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (int columnIndex, Calendar cal)"}, "getBlob(java.lang.String)": {"Returns": [["@B_java#sql#Blob_E@", "a Blob object representing the SQL BLOB value in the specified column"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Blob getBlob (String columnLabel)"}, "updateInt(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["int", "int: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateInt (String columnLabel, int x)"}, "getInt(java.lang.String)": {"Returns": [["int", "the column value; if the value is SQL NULL, the value returned is 0"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract int getInt (String columnLabel)"}, "updateSQLXML(java.lang.String, java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#sql#SQLXML_E@", "SQLXML: the column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs; this method is called on a closed result set; the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object; if there is an error processing the XML value or the result set concurrency is CONCUR_READ_ONLY. The getCause method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a java.sql.SQLXML value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "added in API level 9", "FullName": "public abstract void updateSQLXML (String columnLabel, SQLXML xmlObject)"}, "updateAsciiStream(int,java.io.InputStream,long)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: the new column value"], ["long", "long: the length of the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 9", "FullName": "public abstract void updateAsciiStream (int columnIndex, InputStream x, long length)"}, "refreshRow()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs; this method is called on a closed result set; the result set type is TYPE_FORWARD_ONLY or if this method is called when the cursor is on the insert row"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."]], "SeeAlso": [], "Permissions": [], "Description": "Refreshes the current row with its most recent value in the database. This method cannot be called when the cursor is on the insert row. The refreshRow method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database. An application may want to call refreshRow when caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database. The JDBC driver may actually refresh multiple rows at once if the fetch size is greater than one. All values are refetched subject to the transaction isolation level and cursor sensitivity. If refreshRow is called after calling an updater method, but before calling the method updateRow, then the updates made to the row are lost. Calling the method refreshRow frequently will likely slow performance.", "history": "Added in API level 1", "FullName": "public abstract void refreshRow ()"}, "updateBoolean(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: the new column value"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnIndex is not valid; if a database access error occurs; the result set concurrency is CONCUR_READ_ONLY or this method is called on a closed result set"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.", "history": "Added in API level 1", "FullName": "public abstract void updateBoolean (int columnIndex, boolean x)"}, "wasNull()": {"Returns": [["boolean", "true if the last column value read was SQL NULL and false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Reports whether the last column read had a value of SQL NULL. Note that you must first call one of the getter methods on a column to try to read its value and then call the method wasNull to see if the value read was SQL NULL.", "history": "Added in API level 1", "FullName": "public abstract boolean wasNull ()"}, "getDate(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column"], ["@B_java#util#Calendar_E@", "Calendar: the java.util.Calendar object to use in constructing the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the columnLabel is not valid; if a database access error occurs or this method is called on a closed result set"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information.", "history": "added in API level 1", "FullName": "public abstract Date getDate (String columnLabel, Calendar cal)"}}, "Inheritance": [], "ClassName": "java.sql.ResultSet", "ClassDesc": "A table of data representing a database result set, which is usually generated by executing a statement that queries the database. A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set. A default ResultSet object is not updatable and has a cursor that moves forward only. Thus, you can iterate through it only once and only from the first row to the last row. It is possible to produce ResultSet objects that are scrollable and/or updatable. The following code fragment, in which con is a valid Connection object, illustrates how to make a result set that is scrollable and insensitive to updates by others, and that is updatable. See ResultSet fields for other options. ResultSet interface provides getBoolean, getLong, and so on) for retrieving column values from the current row. Values can be retrieved using either the index number of the column or the name of the column. In general, using the column index will be more efficient. Columns are numbered from 1. For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once. For the getter methods, a JDBC driver attempts to convert the underlying data to the Java type specified in the getter method and returns a suitable Java value. The JDBC specification has a table showing the allowable mappings from SQL types to Java types that can be used by the ResultSet getter methods. Column names used as input to getter methods are case insensitive. When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned. The column name option is designed to be used when column names are used in the SQL query that generated the result set. For columns that are NOT explicitly named in the query, it is best to use column numbers. If column names are used, the programmer should take care to guarantee that they uniquely refer to the intended columns, which can be assured with the SQL A set of updater methods were added to this interface in the JDBC 2.0 API (Java The updater methods may be used in two ways: A ResultSet object is automatically closed when the Statement object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results. The number, types and properties of a ResultSet object's columns are provided by the ResultSetMetaData object returned by the ResultSet.getMetaData method."}