{"Functions": {"setReadOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the attribute"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the value of the read-only attribute. It is implementation specific if the attribute can be updated as an atomic operation with respect to other file system operations. An implementation may, for example, require to read the existing value of the DOS attribute in order to update this attribute.", "history": "Added in API level 26", "FullName": "public abstract void setReadOnly (boolean value)"}, "readAttributes()": {"Returns": [["@B_java#nio#file#attribute#DosFileAttributes_E@", "the file attributes"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads the basic file attributes as a bulk operation. It is implementation specific if all file attributes are read as an atomic operation with respect to other file system operations.", "history": "Added in API level 26", "FullName": "public abstract DosFileAttributes readAttributes ()"}, "setSystem(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the attribute"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the value of the system attribute. It is implementation specific if the attribute can be updated as an atomic operation with respect to other file system operations. An implementation may, for example, require to read the existing value of the DOS attribute in order to update this attribute.", "history": "Added in API level 26", "FullName": "public abstract void setSystem (boolean value)"}, "setArchive(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the attribute"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the value of the archive attribute. It is implementation specific if the attribute can be updated as an atomic operation with respect to other file system operations. An implementation may, for example, require to read the existing value of the DOS attribute in order to update this attribute.", "history": "Added in API level 26", "FullName": "public abstract void setArchive (boolean value)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "the name of the attribute view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the attribute view. Attribute views of this type have the name \"dos\".", "history": "Added in API level 26", "FullName": "public abstract String name ()"}, "setHidden(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the attribute"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the value of the hidden attribute. It is implementation specific if the attribute can be updated as an atomic operation with respect to other file system operations. An implementation may, for example, require to read the existing value of the DOS attribute in order to update this attribute.", "history": "Added in API level 26", "FullName": "public abstract void setHidden (boolean value)"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.DosFileAttributeView", "ClassDesc": "A file attribute view that provides a view of the legacy \"DOS\" file attributes. These attributes are supported by file systems such as the File Allocation Table (FAT) format commonly used in consumer devices. A DosFileAttributeView is a @B_java#nio#file#attribute#BasicFileAttributeView_E@ that additionally supports access to the set of DOS attribute flags that are used to indicate if the file is read-only, hidden, a system file, or archived. Where dynamic access to file attributes is required, the attributes supported by this attribute view are as defined by BasicFileAttributeView, and in addition, the following attributes are supported: The @B_java#nio#file#Files#getAttribute_E@ method may be used to read any of these attributes, or any of the attributes defined by @B_java#nio#file#attribute#BasicFileAttributeView_E@ as if by invoking the @B_java#nio#file#attribute#DosFileAttributeView#readAttributes_E@ method. The @B_java#nio#file#Files#setAttribute_E@ method may be used to update the file's last modified time, last access time or create time attributes as defined by @B_java#nio#file#attribute#BasicFileAttributeView_E@. It may also be used to update the DOS attributes as if by invoking the @B_java#nio#file#attribute#DosFileAttributeView#setReadOnly_E@, @B_java#nio#file#attribute#DosFileAttributeView#setHidden_E@, @B_java#nio#file#attribute#DosFileAttributeView#setSystem_E@, and @B_java#nio#file#attribute#DosFileAttributeView#setArchive_E@ methods respectively."}