{"Functions": {"getSpeedAccuracyMetersPerSecond()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the estimated speed accuracy of this location, in meters per second. We define speed accuracy at 68% confidence. Specifically, as 1-side of the 2-sided range above and below the estimated speed reported by @B_android#location#Location#getSpeed_E@, within which there is a 68% probability of finding the true speed. In the case where the underlying distribution is assumed Gaussian normal, this would be considered 1 standard deviation. For example, if @B_android#location#Location#getSpeed_E@ returns 5, and @B_android#location#Location#getSpeedAccuracyMetersPerSecond_E@ returns 1, then there is a 68% probability of the true speed being between 4 and 6 meters per second. Note that the speed and speed accuracy is often better than would be obtained simply from differencing sequential positions, such as when the Doppler measurements from GNSS satellites are used. If this location does not have a speed accuracy, then 0.0 is returned.", "history": "Added in API level 26", "FullName": "public float getSpeedAccuracyMetersPerSecond ()"}, "setLatitude(double)": {"Returns": [], "Parameters": [["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the latitude, in degrees.", "history": "Added in API level 1", "FullName": "public void setLatitude (double latitude)"}, "hasBearingAccuracy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a bearing accuracy.", "history": "Added in API level 26", "FullName": "public boolean hasBearingAccuracy ()"}, "setLongitude(double)": {"Returns": [], "Parameters": [["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the longitude, in degrees.", "history": "Added in API level 1", "FullName": "public void setLongitude (double longitude)"}, "dump(android.util.Printer,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void dump (Printer pw, String prefix)"}, "setElapsedRealtimeNanos(long)": {"Returns": [], "Parameters": [["long", "long: elapsed real-time of fix, in nanoseconds since system boot."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the time of this fix, in elapsed real-time since system boot.", "history": "Added in API level 17", "FullName": "public void setElapsedRealtimeNanos (long time)"}, "setSpeed(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the speed, in meters/second over ground. Following this call @B_android#location#Location#hasSpeed_E@ will return true.", "history": "Added in API level 1", "FullName": "public void setSpeed (float speed)"}, "getBearingAccuracyDegrees()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the estimated bearing accuracy of this location, in degrees. We define bearing accuracy at 68% confidence. Specifically, as 1-side of the 2-sided range on each side of the estimated bearing reported by @B_android#location#Location#getBearing_E@, within which there is a 68% probability of finding the true bearing. In the case where the underlying distribution is assumed Gaussian normal, this would be considered 1 standard deviation. For example, if @B_android#location#Location#getBearing_E@ returns 60, and @B_android#location#Location#getBearingAccuracyDegrees_E@ returns 10, then there is a 68% probability of the true bearing being between 50 and 70 degrees. If this location does not have a bearing accuracy, then 0.0 is returned.", "history": "Added in API level 26", "FullName": "public float getBearingAccuracyDegrees ()"}, "convert(double,int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["double", "double no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if coordinate is less than -180.0, greater than 180.0, or is not a number."], ["@B_java#lang#IllegalArgumentException_E@", "if outputType is not one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS."]], "SeeAlso": [], "Permissions": [], "Description": "Converts a coordinate to a String representation. The outputType may be one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS. The coordinate must be a valid double between -180.0 and 180.0. This conversion is performed in a method that is dependent on the default locale, and so is not guaranteed to round-trip with @B_android#location#Location#convert_E@.", "history": "Added in API level 1", "FullName": "public static String convert (double coordinate, int outputType)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns additional provider-specific information about the location fix as a Bundle. The keys and values are determined by the provider. If no additional information is available, null is returned. A number of common key/value pairs are listed below. Providers that use any of the keys on this list must provide the corresponding value as described below. satellites - the number of satellites used to derive the fix", "history": "Added in API level 1", "FullName": "public Bundle getExtras ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "setAltitude(double)": {"Returns": [], "Parameters": [["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the altitude, in meters above the WGS 84 reference ellipsoid. Following this call @B_android#location#Location#hasAltitude_E@ will return true.", "history": "Added in API level 1", "FullName": "public void setAltitude (double altitude)"}, "removeBearing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use a new Location object for location updates. Remove the bearing from this location. Following this call @B_android#location#Location#hasBearing_E@ will return false, and @B_android#location#Location#getBearing_E@ will return 0.0.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void removeBearing ()"}, "convert(double, int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["double", "double no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if coordinate is less than -180.0, greater than 180.0, or is not a number."], ["@B_java#lang#IllegalArgumentException_E@", "if outputType is not one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS."]], "SeeAlso": [], "Permissions": [], "Description": "Converts a coordinate to a String representation. The outputType may be one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS. The coordinate must be a valid double between -180.0 and 180.0. This conversion is performed in a method that is dependent on the default locale, and so is not guaranteed to round-trip with @B_android#location#Location#convert_E@.", "history": "added in API level 1", "FullName": "public static String convert (double coordinate, int outputType)"}, "getBearing()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the bearing, in degrees. Bearing is the horizontal direction of travel of this device, and is not related to the device orientation. It is guaranteed to be in the range (0.0, 360.0] if the device has a bearing. If this location does not have a bearing then 0.0 is returned.", "history": "Added in API level 1", "FullName": "public float getBearing ()"}, "set(android.location.Location)": {"Returns": [], "Parameters": [["@B_android#location#Location_E@", "Location no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the contents of the location to the values from the given location.", "history": "Added in API level 1", "FullName": "public void set (Location l)"}, "getElapsedRealtimeUncertaintyNanos()": {"Returns": [["double", "uncertainty of elapsed real-time of fix, in nanoseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get estimate of the relative precision of the alignment of the ElapsedRealtimeNanos timestamp, with the reported measurements in nanoseconds (68% confidence). This means that we have 68% confidence that the true timestamp of the event is within ElapsedReatimeNanos +/- uncertainty. Example : - getElapsedRealtimeNanos() returns 10000000 - getElapsedRealtimeUncertaintyNanos() returns 1000000 (equivalent to 1millisecond) This means that the event most likely happened between 9000000 and 11000000.", "history": "Added in API level 29", "FullName": "public double getElapsedRealtimeUncertaintyNanos ()"}, "getAccuracy()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the estimated horizontal accuracy of this location, radial, in meters. We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle. This accuracy estimation is only concerned with horizontal accuracy, and does not indicate the accuracy of bearing, velocity or altitude if those are included in this Location. If this location does not have a horizontal accuracy, then 0.0 is returned. All locations generated by the @B_android#location#LocationManager_E@ include horizontal accuracy.", "history": "Added in API level 1", "FullName": "public float getAccuracy ()"}, "dump(android.util.Printer, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public void dump (Printer pw, String prefix)"}, "getLongitude()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the longitude, in degrees. All locations generated by the @B_android#location#LocationManager_E@ will have a valid longitude.", "history": "Added in API level 1", "FullName": "public double getLongitude ()"}, "removeAltitude()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use a new Location object for location updates. Remove the altitude from this location. Following this call @B_android#location#Location#hasAltitude_E@ will return false, and @B_android#location#Location#getAltitude_E@ will return 0.0.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void removeAltitude ()"}, "setVerticalAccuracyMeters(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the estimated vertical accuracy of this location, meters. See @B_android#location#Location#getVerticalAccuracyMeters_E@ for the definition of vertical accuracy. Following this call @B_android#location#Location#hasVerticalAccuracy_E@ will return true.", "history": "Added in API level 26", "FullName": "public void setVerticalAccuracyMeters (float verticalAccuracyMeters)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getVerticalAccuracyMeters()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the estimated vertical accuracy of this location, in meters. We define vertical accuracy at 68% confidence. Specifically, as 1-side of the 2-sided range above and below the estimated altitude reported by @B_android#location#Location#getAltitude_E@, within which there is a 68% probability of finding the true altitude. In the case where the underlying distribution is assumed Gaussian normal, this would be considered 1 standard deviation. For example, if @B_android#location#Location#getAltitude_E@ returns 150, and @B_android#location#Location#getVerticalAccuracyMeters_E@ returns 20 then there is a 68% probability of the true altitude being between 130 and 170 meters. If this location does not have a vertical accuracy, then 0.0 is returned.", "history": "Added in API level 26", "FullName": "public float getVerticalAccuracyMeters ()"}, "setBearing(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the bearing, in degrees. Bearing is the horizontal direction of travel of this device, and is not related to the device orientation. The input will be wrapped into the range (0.0, 360.0].", "history": "Added in API level 1", "FullName": "public void setBearing (float bearing)"}, "hasElapsedRealtimeUncertaintyNanos()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a elapsed realtime accuracy.", "history": "Added in API level 29", "FullName": "public boolean hasElapsedRealtimeUncertaintyNanos ()"}, "isFromMockProvider()": {"Returns": [["boolean", "true if this Location came from a mock provider, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the Location came from a mock provider.", "history": "Added in API level 18", "FullName": "public boolean isFromMockProvider ()"}, "hasAltitude()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has an altitude.", "history": "Added in API level 1", "FullName": "public boolean hasAltitude ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "Location(android.location.Location)": {"Returns": [], "Parameters": [["@B_android#location#Location_E@", "Location no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Location object that is copied from an existing one.", "history": "Added in API level 1", "FullName": "public Location (Location l)"}, "setSpeedAccuracyMetersPerSecond(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the estimated speed accuracy of this location, meters per second. See @B_android#location#Location#getSpeedAccuracyMetersPerSecond_E@ for the definition of speed accuracy. Following this call @B_android#location#Location#hasSpeedAccuracy_E@ will return true.", "history": "Added in API level 26", "FullName": "public void setSpeedAccuracyMetersPerSecond (float speedAccuracyMeterPerSecond)"}, "getProvider()": {"Returns": [["@B_java#lang#String_E@", "the provider, or null if it has not been set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the provider that generated this fix.", "history": "Added in API level 1", "FullName": "public String getProvider ()"}, "hasVerticalAccuracy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a vertical accuracy.", "history": "Added in API level 26", "FullName": "public boolean hasVerticalAccuracy ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "Location(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the provider that generated this location"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new Location with a named provider. By default time, latitude and longitude are 0, and the location has no bearing, altitude, speed, accuracy or extras.", "history": "Added in API level 1", "FullName": "public Location (String provider)"}, "bearingTo(android.location.Location)": {"Returns": [["float", "the initial bearing in degrees"]], "Parameters": [["@B_android#location#Location_E@", "Location: the destination location"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the approximate initial bearing in degrees East of true North when traveling along the shortest path between this location and the given location. The shortest path is defined using the WGS84 ellipsoid. Locations that are (nearly) antipodal may produce meaningless results.", "history": "Added in API level 1", "FullName": "public float bearingTo (Location dest)"}, "distanceBetween(double,double,double,double,float[])": {"Returns": [], "Parameters": [["double", "double: the starting latitude"], ["double", "double: the starting longitude"], ["double", "double: the ending latitude"], ["double", "double: the ending longitude"], ["float[]", "float: an array of floats to hold the results"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if results is null or has length < 1"]], "SeeAlso": [], "Permissions": [], "Description": "Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them. Distance and bearing are defined using the WGS84 ellipsoid. The computed distance is stored in results[0]. If results has length 2 or greater, the initial bearing is stored in results[1]. If results has length 3 or greater, the final bearing is stored in results[2].", "history": "Added in API level 1", "FullName": "public static void distanceBetween (double startLatitude, double startLongitude, double endLatitude, double endLongitude, float[] results)"}, "getAltitude()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the altitude if available, in meters above the WGS 84 reference ellipsoid. If this location does not have an altitude then 0.0 is returned.", "history": "Added in API level 1", "FullName": "public double getAltitude ()"}, "removeAccuracy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use a new Location object for location updates. Remove the horizontal accuracy from this location. Following this call @B_android#location#Location#hasAccuracy_E@ will return false, and @B_android#location#Location#getAccuracy_E@ will return 0.0.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void removeAccuracy ()"}, "getElapsedRealtimeNanos()": {"Returns": [["long", "elapsed real-time of fix, in nanoseconds since system boot."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the time of this fix, in elapsed real-time since system boot. This value can be reliably compared to @B_android#os#SystemClock#elapsedRealtimeNanos_E@, to calculate the age of a fix and to compare Location fixes. This is reliable because elapsed real-time is guaranteed monotonic for each system boot and continues to increment even when the system is in deep sleep (unlike @B_android#location#Location#getTime_E@. All locations generated by the @B_android#location#LocationManager_E@ are guaranteed to have a valid elapsed real-time.", "history": "Added in API level 17", "FullName": "public long getElapsedRealtimeNanos ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the contents of the location.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setElapsedRealtimeUncertaintyNanos(double)": {"Returns": [], "Parameters": [["double", "double: uncertainty of the elapsed real-time of fix, in nanoseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set estimate of the relative precision of the alignment of the ElapsedRealtimeNanos timestamp, with the reported measurements in nanoseconds (68% confidence).", "history": "Added in API level 29", "FullName": "public void setElapsedRealtimeUncertaintyNanos (double time)"}, "setProvider(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the provider that generated this fix.", "history": "Added in API level 1", "FullName": "public void setProvider (String provider)"}, "hasSpeed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a speed.", "history": "Added in API level 1", "FullName": "public boolean hasSpeed ()"}, "removeSpeed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use a new Location object for location updates. Remove the speed from this location. Following this call @B_android#location#Location#hasSpeed_E@ will return false, and @B_android#location#Location#getSpeed_E@ will return 0.0.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void removeSpeed ()"}, "setTime(long)": {"Returns": [], "Parameters": [["long", "long: UTC time of this fix, in milliseconds since January 1, 1970"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the UTC time of this fix, in milliseconds since January 1, 1970.", "history": "Added in API level 1", "FullName": "public void setTime (long time)"}, "hasAccuracy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a horizontal accuracy. All locations generated by the @B_android#location#LocationManager_E@ have an horizontal accuracy.", "history": "Added in API level 1", "FullName": "public boolean hasAccuracy ()"}, "getSpeed()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the speed if it is available, in meters/second over ground. If this location does not have a speed then 0.0 is returned.", "history": "Added in API level 1", "FullName": "public float getSpeed ()"}, "getLatitude()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the latitude, in degrees. All locations generated by the @B_android#location#LocationManager_E@ will have a valid latitude.", "history": "Added in API level 1", "FullName": "public double getLatitude ()"}, "convert(java.lang.String)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if coordinate is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the coordinate is not in one of the valid formats."]], "SeeAlso": [], "Permissions": [], "Description": "Converts a String in one of the formats described by FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a double. This conversion is performed in a locale agnostic method, and so is not guaranteed to round-trip with @B_android#location#Location#convert_E@.", "history": "Added in API level 1", "FullName": "public static double convert (String coordinate)"}, "hasBearing()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a bearing.", "history": "Added in API level 1", "FullName": "public boolean hasBearing ()"}, "getTime()": {"Returns": [["long", "time of fix, in milliseconds since January 1, 1970."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the UTC time of this fix, in milliseconds since January 1, 1970. Note that the UTC time on a device is not monotonic: it can jump forwards or backwards unpredictably. So always use @B_android#location#Location#getElapsedRealtimeNanos_E@ when calculating time deltas. On the other hand, @B_android#location#Location#getTime_E@ is useful for presenting a human readable time to the user, or for carefully comparing location fixes across reboot or across devices. All locations generated by the @B_android#location#LocationManager_E@ are guaranteed to have a valid UTC time, however remember that the system time may have changed since the location was generated.", "history": "Added in API level 1", "FullName": "public long getTime ()"}, "distanceTo(android.location.Location)": {"Returns": [["float", "the approximate distance in meters"]], "Parameters": [["@B_android#location#Location_E@", "Location: the destination location"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the approximate distance in meters between this location and the given location. Distance is defined using the WGS84 ellipsoid.", "history": "Added in API level 1", "FullName": "public float distanceTo (Location dest)"}, "setBearingAccuracyDegrees(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the estimated bearing accuracy of this location, degrees. See @B_android#location#Location#getBearingAccuracyDegrees_E@ for the definition of bearing accuracy. Following this call @B_android#location#Location#hasBearingAccuracy_E@ will return true.", "history": "Added in API level 26", "FullName": "public void setBearingAccuracyDegrees (float bearingAccuracyDegrees)"}, "setExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the extra information associated with this fix to the given Bundle. Note this stores a copy of the given extras, so any changes to extras after calling this method won't be reflected in the location bundle.", "history": "Added in API level 1", "FullName": "public void setExtras (Bundle extras)"}, "setAccuracy(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the estimated horizontal accuracy of this location, meters. See @B_android#location#Location#getAccuracy_E@ for the definition of horizontal accuracy. Following this call @B_android#location#Location#hasAccuracy_E@ will return true.", "history": "Added in API level 1", "FullName": "public void setAccuracy (float horizontalAccuracy)"}, "hasSpeedAccuracy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "True if this location has a speed accuracy.", "history": "Added in API level 26", "FullName": "public boolean hasSpeedAccuracy ()"}}, "Inheritance": [], "ClassName": "android.location.Location", "ClassDesc": "A data class representing a geographic location. A location can consist of a latitude, longitude, timestamp, and other information such as bearing, altitude and velocity. All locations generated by the @B_android#location#LocationManager_E@ are guaranteed to have a valid latitude, longitude, and timestamp (both UTC time and elapsed real-time since boot), all other parameters are optional."}