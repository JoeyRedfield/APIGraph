{"Functions": {"error(javax.xml.transform.TransformerException)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#TransformerException_E@", "TransformerException: The error information encapsulated in a transformer exception."]], "Throws": [["@B_javax#xml#transform#TransformerException_E@", "if the application chooses to discontinue the transformation."]], "SeeAlso": ["@B_javax#xml#transform#TransformerException_E@"], "Permissions": [], "Description": "Receive notification of a recoverable error. The transformer must continue to try and provide normal transformation after invoking this method. It should still be possible for the application to process the document through to the end if no other errors are encountered.", "history": "Added in API level 8", "FullName": "public abstract void error (TransformerException exception)"}, "fatalError(javax.xml.transform.TransformerException)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#TransformerException_E@", "TransformerException: The error information encapsulated in a TransformerException."]], "Throws": [["@B_javax#xml#transform#TransformerException_E@", "if the application chooses to discontinue the transformation."]], "SeeAlso": ["@B_javax#xml#transform#TransformerException_E@"], "Permissions": [], "Description": "Receive notification of a non-recoverable error. The Transformer must continue to try and provide normal transformation after invoking this method. It should still be possible for the application to process the document through to the end if no other errors are encountered, but there is no guarantee that the output will be useable.", "history": "Added in API level 8", "FullName": "public abstract void fatalError (TransformerException exception)"}, "warning(javax.xml.transform.TransformerException)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#TransformerException_E@", "TransformerException: The warning information encapsulated in a transformer exception."]], "Throws": [["@B_javax#xml#transform#TransformerException_E@", "if the application chooses to discontinue the transformation."]], "SeeAlso": ["@B_javax#xml#transform#TransformerException_E@"], "Permissions": [], "Description": "Receive notification of a warning. @B_javax#xml#transform#Transformer_E@ can use this method to report conditions that are not errors or fatal errors. The default behavior is to take no action. After invoking this method, the Transformer must continue with the transformation. It should still be possible for the application to process the document through to the end.", "history": "Added in API level 8", "FullName": "public abstract void warning (TransformerException exception)"}}, "Inheritance": [], "ClassName": "javax.xml.transform.ErrorListener", "ClassDesc": "To provide customized error handling, implement this interface and use the setErrorListener method to register an instance of the implementation with the @B_javax#xml#transform#Transformer_E@. The Transformer then reports all errors and warnings through this interface. If an application does not register its own custom ErrorListener, the default ErrorListener is used which reports all warnings and errors to System.err and does not throw any Exceptions. Applications are strongly encouraged to register and use ErrorListeners that insure proper behavior for warnings and errors. For transformation errors, a Transformer must use this interface instead of throwing an Exception: it is up to the application to decide whether to throw an Exception for different types of errors and warnings. Note however that the Transformer is not required to continue with the transformation after a call to @B_javax#xml#transform#ErrorListener#fatalError_E@. Transformers may use this mechanism to report XML parsing errors as well as transformation errors."}