{"Functions": {"getPrefix(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "one of the prefixes currently mapped to the URI supplied, or null if none is mapped or if the URI is assigned to the default namespace"]], "Parameters": [["@B_java#lang#String_E@", "String: the namespace URI"]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#getPrefixes_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@"], "Permissions": [], "Description": "Return one of the prefixes mapped to a Namespace URI. If more than one prefix is currently mapped to the same URI, this method will make an arbitrary selection; if you want all of the prefixes, use the @B_org#xml#sax#helpers#NamespaceSupport#getPrefixes_E@ method instead. @B_org#xml#sax#helpers#NamespaceSupport#getURI_E@ method with an argument of \"\".", "history": "Added in API level 1", "FullName": "public String getPrefix (String uri)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#setNamespaceDeclUris_E@"], "Permissions": [], "Description": "Reset this Namespace support object for reuse. It is necessary to invoke this method before reusing the Namespace support object for a new session. If namespace declaration URIs are to be supported, that flag must also be set to a non-default value.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "declarePrefix(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the prefix was legal, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix to declare, or the empty string to indicate the default element namespace. This may never have the value \"xml\" or \"xmlns\"."], ["@B_java#lang#String_E@", "String: The Namespace URI to associate with the prefix."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#processName_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@"], "Permissions": [], "Description": "Declare a Namespace prefix. All prefixes must be declared before they are referenced. For example, a SAX driver (parser) would scan an element's attributes in two passes: first for namespace declarations, then a second pass using @B_org#xml#sax#helpers#NamespaceSupport#processName_E@ to interpret prefixes against (potentially redefined) prefixes. This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context. To declare the default element Namespace, use the empty string as the prefix. Note that you must not declare a prefix after you've pushed and popped another Namespace context, or treated the declarations phase as complete by processing a prefixed name. Note that there is an asymmetry in this library: @B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@ will not return the \"\" prefix, even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using @B_org#xml#sax#helpers#NamespaceSupport#getURI_E@. This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.", "history": "Added in API level 1", "FullName": "public boolean declarePrefix (String prefix, String uri)"}, "getPrefixes()": {"Returns": [["@B_java#util#Enumeration_E@", "An enumeration of prefixes (never empty)."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#getDeclaredPrefixes_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@"], "Permissions": [], "Description": "Return an enumeration of all prefixes whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. @B_org#xml#sax#helpers#NamespaceSupport#getURI_E@ with an argument of \"\".", "history": "Added in API level 1", "FullName": "public Enumeration getPrefixes ()"}, "getURI(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The associated Namespace URI, or null if the prefix is undeclared in this context."]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix to look up."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getPrefixes_E@"], "Permissions": [], "Description": "Look up a prefix and get the currently-mapped Namespace URI. This method looks up the prefix in the current context. Use the empty string (\"\") for the default Namespace.", "history": "Added in API level 1", "FullName": "public String getURI (String prefix)"}, "getPrefixes(java.lang.String)": {"Returns": [["@B_java#util#Enumeration_E@", "An enumeration of prefixes (never empty)."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getDeclaredPrefixes_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@"], "Permissions": [], "Description": "Return an enumeration of all prefixes for a given URI whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. This method returns prefixes mapped to a specific Namespace URI. The xml: prefix will be included. If you want only one prefix that's mapped to the Namespace URI, and you don't care which one you get, use the @B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@ method instead. never included in this enumeration; to check for the presence of a default Namespace, use the @B_org#xml#sax#helpers#NamespaceSupport#getURI_E@ method with an argument of \"\".", "history": "Added in API level 1", "FullName": "public Enumeration getPrefixes (String uri)"}, "declarePrefix(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the prefix was legal, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: The prefix to declare, or the empty string to indicate the default element namespace. This may never have the value \"xml\" or \"xmlns\"."], ["@B_java#lang#String_E@", "String: The Namespace URI to associate with the prefix."]], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#processName_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@"], "Permissions": [], "Description": "Declare a Namespace prefix. All prefixes must be declared before they are referenced. For example, a SAX driver (parser) would scan an element's attributes in two passes: first for namespace declarations, then a second pass using @B_org#xml#sax#helpers#NamespaceSupport#processName_E@ to interpret prefixes against (potentially redefined) prefixes. This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context. To declare the default element Namespace, use the empty string as the prefix. Note that you must not declare a prefix after you've pushed and popped another Namespace context, or treated the declarations phase as complete by processing a prefixed name. Note that there is an asymmetry in this library: @B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@ will not return the \"\" prefix, even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using @B_org#xml#sax#helpers#NamespaceSupport#getURI_E@. This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.", "history": "added in API level 1", "FullName": "public boolean declarePrefix (String prefix, String uri)"}, "popContext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#pushContext_E@"], "Permissions": [], "Description": "Revert to the previous Namespace context. Normally, you should pop the context at the end of each XML element. After popping the context, all Namespace prefix mappings that were previously in force are restored. You must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first.", "history": "Added in API level 1", "FullName": "public void popContext ()"}, "getDeclaredPrefixes()": {"Returns": [["@B_java#util#Enumeration_E@", "An enumeration of all prefixes declared in this context."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#helpers#NamespaceSupport#getPrefixes_E@", "@B_org#xml#sax#helpers#NamespaceSupport#getURI_E@"], "Permissions": [], "Description": "Return an enumeration of all prefixes declared in this context. The empty (default) prefix will be included in this enumeration; note that this behaviour differs from that of @B_org#xml#sax#helpers#NamespaceSupport#getPrefix_E@ and @B_org#xml#sax#helpers#NamespaceSupport#getPrefixes_E@.", "history": "Added in API level 1", "FullName": "public Enumeration getDeclaredPrefixes ()"}, "NamespaceSupport()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new Namespace support object.", "history": "Added in API level 1", "FullName": "public NamespaceSupport ()"}, "isNamespaceDeclUris()": {"Returns": [["boolean", "true if namespace declaration attributes are enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if namespace declaration attributes are placed into a namespace. This behavior is not the default.", "history": "Added in API level 1", "FullName": "public boolean isNamespaceDeclUris ()"}, "pushContext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#ContentHandler_E@", "@B_org#xml#sax#helpers#NamespaceSupport#popContext_E@"], "Permissions": [], "Description": "Start a new Namespace context. The new context will automatically inherit the declarations of its parent context, but it will also keep track of which declarations were made within this context. Event callback code should start a new context once per element. This means being ready to call this in either of two places. For elements that don't include namespace declarations, the ContentHandler.startElement() callback is the right place. For elements with such a declaration, it'd done in the first ContentHandler.startPrefixMapping() callback. A boolean flag can be used to track whether a context has been started yet. When either of those methods is called, it checks the flag to see if a new context needs to be started. If so, it starts the context and sets the flag. After ContentHandler.startElement() does that, it always clears the flag. Normally, SAX drivers would push a new context at the beginning of each XML element. Then they perform a first pass over the attributes to process all namespace declarations, making ContentHandler.startPrefixMapping() callbacks. Then a second pass is made, to determine the namespace-qualified names for all attributes and for the element name. Finally all the information for the ContentHandler.startElement() callback is available, so it can then be made. The Namespace support object always starts with a base context already in force: in this context, only the \"xml\" prefix is declared.", "history": "Added in API level 1", "FullName": "public void pushContext ()"}, "setNamespaceDeclUris(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the namespace declaration attribute state. A value of true enables this feature, a value of false disables it."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when attempting to set this after any context has been pushed."]], "SeeAlso": [], "Permissions": [], "Description": "Controls whether namespace declaration attributes are placed into the @B_org#xml#sax#helpers#NamespaceSupport#NSDECL_E@ namespace by @B_org#xml#sax#helpers#NamespaceSupport#processName_E@. This may only be changed before any contexts have been pushed.", "history": "Added in API level 1", "FullName": "public void setNamespaceDeclUris (boolean value)"}}, "Inheritance": [], "ClassName": "org.xml.sax.helpers.NamespaceSupport", "ClassDesc": "Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. This class encapsulates the logic of Namespace processing: it tracks the declarations currently in force for each context and automatically processes qualified XML names into their Namespace parts; it can also be used in reverse for generating XML qnames from Namespaces. Namespace support objects are reusable, but the reset method must be invoked between each session. Here is a simple session: Note that this class is optimized for the use case where most elements do not contain Namespace declarations: if the same prefix/URI mapping is repeated for each context (for example), this class will be somewhat less efficient. Although SAX drivers (parsers) may choose to use this class to implement namespace handling, they are not required to do so. Applications must track namespace information themselves if they want to use namespace information."}