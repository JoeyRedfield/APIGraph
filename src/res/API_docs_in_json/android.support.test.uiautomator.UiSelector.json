{"Functions": {"resourceId(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the given resource ID.", "history": "", "FullName": "UiSelector resourceId (String id)"}, "checked(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are currently checked (usually for checkboxes). Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector checked (boolean val)"}, "packageNameMatches(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: a regular expression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the package name of the application that contains the widget.", "history": "", "FullName": "UiSelector packageNameMatches (String regex)"}, "textStartsWith(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match visible text in a widget that is prefixed by the text parameter. The matching is case-insensitive.", "history": "", "FullName": "UiSelector textStartsWith (String text)"}, "enabled(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are enabled. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector enabled (boolean val)"}, "longClickable(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are long-clickable. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector longClickable (boolean val)"}, "UiSelector()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "UiSelector ()"}, "cloneSelector()": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "UiSelector cloneSelector ()"}, "textMatches(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: a regular expression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the visible text displayed in a layout element, using a regular expression. The text in the widget must match exactly with the string in your input argument.", "history": "", "FullName": "UiSelector textMatches (String regex)"}, "descriptionContains(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the content-description property for a widget. The content-description is typically used by the Android Accessibility framework to provide an audio prompt for the widget when the widget is selected. The content-description for the widget must contain the string in your input argument. Matching is case-insensitive.", "history": "", "FullName": "UiSelector descriptionContains (String desc)"}, "clickable(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are clickable. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector clickable (boolean val)"}, "focusable(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are focusable. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector focusable (boolean val)"}, "className(java.lang.Class<T>)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["Class", "Class: type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the class property for a widget (for example, \"android.widget.Button\").", "history": "", "FullName": "UiSelector className (Class<T> type)"}, "packageName(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the package name of the application that contains the widget.", "history": "", "FullName": "UiSelector packageName (String name)"}, "descriptionMatches(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: a regular expression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the content-description property for a widget. The content-description is typically used by the Android Accessibility framework to provide an audio prompt for the widget when the widget is selected. The content-description for the widget must match exactly with the string in your input argument.", "history": "", "FullName": "UiSelector descriptionMatches (String regex)"}, "scrollable(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are scrollable. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector scrollable (boolean val)"}, "selected(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are currently selected. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector selected (boolean val)"}, "classNameMatches(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: a regular expression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the class property for a widget, using a regular expression.", "history": "", "FullName": "UiSelector classNameMatches (String regex)"}, "checkable(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that are checkable. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector checkable (boolean val)"}, "descriptionStartsWith(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the content-description property for a widget. The content-description is typically used by the Android Accessibility framework to provide an audio prompt for the widget when the widget is selected. The content-description for the widget must start with the string in your input argument. Matching is case-insensitive.", "history": "", "FullName": "UiSelector descriptionStartsWith (String desc)"}, "focused(boolean)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["boolean", "boolean: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match widgets that have focus. Typically, using this search criteria alone is not useful. You should also include additional criteria, such as text, content-description, or the class name for a widget. If no other search criteria is specified, and there is more than one matching widget, the first widget in the tree is selected.", "history": "", "FullName": "UiSelector focused (boolean val)"}, "index(int)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["int", "int: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the widget by its node index in the layout hierarchy. The index value must be 0 or greater. Using the index can be unreliable and should only be used as a last resort for matching. Instead, consider using the @B_android#support#test#uiautomator#UiSelector#instance_E@ method.", "history": "", "FullName": "UiSelector index (int index)"}, "toString()": {"Returns": [["String", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "String toString ()"}, "className(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the class property for a widget (for example, \"android.widget.Button\").", "history": "", "FullName": "UiSelector className (String className)"}, "instance(int)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["int", "int: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the widget by its instance number. The instance value must be 0 or greater, where the first instance is 0. For example, to simulate a user click on the third image that is enabled in a UI screen, you could specify a a search criteria where the instance is 2, the @B_android#support#test#uiautomator#UiSelector#className_E@ matches the image widget class, and @B_android#support#test#uiautomator#UiSelector#enabled_E@ is true. The code would look like this: new UiSelector().className(\"android.widget.ImageView\") .enabled(true).instance(2);", "history": "", "FullName": "UiSelector instance (int instance)"}, "textContains(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the visible text in a widget where the visible text must contain the string in your input argument. The matching is case-sensitive.", "history": "", "FullName": "UiSelector textContains (String text)"}, "text(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the visible text displayed in a widget (for example, the text label to launch an app). The text for the element must match exactly with the string in your input argument. Matching is case-sensitive.", "history": "", "FullName": "UiSelector text (String text)"}, "resourceIdMatches(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: a regular expression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the resource ID of the widget, using a regular expression.", "history": "", "FullName": "UiSelector resourceIdMatches (String regex)"}, "description(java.lang.String)": {"Returns": [["@B_android#support#test#uiautomator#UiSelector_E@", "UiSelector with the specified search criteria"]], "Parameters": [["String", "String: Value to match"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the search criteria to match the content-description property for a widget. The content-description is typically used by the Android Accessibility framework to provide an audio prompt for the widget when the widget is selected. The content-description for the widget must match exactly with the string in your input argument. Matching is case-sensitive.", "history": "", "FullName": "UiSelector description (String desc)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.uiautomator.UiSelector", "ClassDesc": "Specifies the elements in the layout hierarchy for tests to target, filtered by properties such as text value, content-description, class name, and state information. You can also target an element by its location in a layout hierarchy."}