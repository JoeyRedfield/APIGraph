{"Functions": {"getOcspResponderCert()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "the responder's certificate, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the OCSP responder's certificate. This overrides the ocsp.responderCertSubjectName, ocsp.responderCertIssuerName, and ocsp.responderCertSerialNumber security properties. If this parameter or the aforementioned properties are not set, then the responder's certificate is determined as specified in RFC 2560.", "history": "Added in API level 24", "FullName": "public X509Certificate getOcspResponderCert ()"}, "getSoftFailExceptions()": {"Returns": [["@B_java#util#List_E@", "an unmodifiable list containing the ignored exceptions. The list is empty if no exceptions have been ignored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list containing the exceptions that are ignored by the revocation checker when the @B_java#security#cert#PKIXRevocationChecker#Option#SOFT_FAIL_E@ option is set. The list is cleared each time @B_java#security#cert#PKIXCertPathChecker#init_E@ is called. The list is ordered in ascending order according to the certificate index returned by @B_java#security#cert#CertPathValidatorException#getIndex_E@ method of each entry. An implementation of PKIXRevocationChecker is responsible for adding the ignored exceptions to the list.", "history": "Added in API level 24", "FullName": "public abstract List<CertPathValidatorException> getSoftFailExceptions ()"}, "getOcspExtensions()": {"Returns": [["@B_java#util#List_E@", "an unmodifiable list of extensions. The list is empty if no extensions have been specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the optional OCSP request extensions.", "history": "Added in API level 24", "FullName": "public List<Extension> getOcspExtensions ()"}, "setOcspResponder(java.net.URI)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: the responder URI"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the URI that identifies the location of the OCSP responder. This overrides the ocsp.responderURL security property and any responder specified in a certificate's Authority Information Access Extension, as defined in RFC 5280.", "history": "Added in API level 24", "FullName": "public void setOcspResponder (URI uri)"}, "setOptions(java.util.Set<java.security.cert.PKIXRevocationChecker.Option>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a set of revocation options. The set is copied to protect against subsequent modification."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the revocation options.", "history": "Added in API level 24", "FullName": "public void setOptions (Set<PKIXRevocationChecker.Option> options)"}, "PKIXRevocationChecker()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor.", "history": "Added in API level 24", "FullName": "protected PKIXRevocationChecker ()"}, "clone()": {"Returns": [["@B_java#security#cert#PKIXRevocationChecker_E@", "a copy of this PKIXCertPathChecker"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone of this object. Calls the Object.clone() method. All subclasses which maintain state must support and override this method, if necessary.", "history": "Added in API level 24", "FullName": "public PKIXRevocationChecker clone ()"}, "getOptions()": {"Returns": [["@B_java#util#Set_E@", "an unmodifiable set of revocation options. The set is empty if no options have been specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the revocation options.", "history": "Added in API level 24", "FullName": "public Set<PKIXRevocationChecker.Option> getOptions ()"}, "setOcspExtensions(java.util.List<java.security.cert.Extension>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: a list of extensions. The list is copied to protect against subsequent modification."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the optional OCSP request extensions.", "history": "Added in API level 24", "FullName": "public void setOcspExtensions (List<Extension> extensions)"}, "setOcspResponderCert(java.security.cert.X509Certificate)": {"Returns": [], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: the responder's certificate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the OCSP responder's certificate. This overrides the ocsp.responderCertSubjectName, ocsp.responderCertIssuerName, and ocsp.responderCertSerialNumber security properties.", "history": "Added in API level 24", "FullName": "public void setOcspResponderCert (X509Certificate cert)"}, "setOcspResponses(java.util.Map<java.security.cert.X509Certificate,byte[]>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: a map of OCSP responses. Each key is an X509Certificate that maps to the corresponding DER-encoded OCSP response for that certificate. A deep copy of the map is performed to protect against subsequent modification."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the OCSP responses. These responses are used to determine the revocation status of the specified certificates when OCSP is used.", "history": "Added in API level 24", "FullName": "public void setOcspResponses (Map<X509Certificate, byte[]> responses)"}, "getOcspResponder()": {"Returns": [["@B_java#net#URI_E@", "the responder URI, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the URI that identifies the location of the OCSP responder. This overrides the ocsp.responderURL security property. If this parameter or the ocsp.responderURL property is not set, the location is determined from the certificate's Authority Information Access Extension, as defined in RFC 5280.", "history": "Added in API level 24", "FullName": "public URI getOcspResponder ()"}, "getOcspResponses()": {"Returns": [["@B_java#util#Map_E@", "a map of OCSP responses. Each key is an X509Certificate that maps to the corresponding DER-encoded OCSP response for that certificate. A deep copy of the map is returned to protect against subsequent modification. Returns an empty map if no responses have been specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the OCSP responses. These responses are used to determine the revocation status of the specified certificates when OCSP is used.", "history": "Added in API level 24", "FullName": "public Map<X509Certificate, byte[]> getOcspResponses ()"}}, "Inheritance": ["@B_java#security#cert#PKIXCertPathChecker_E@"], "ClassName": "java.security.cert.PKIXRevocationChecker", "ClassDesc": "A PKIXCertPathChecker for checking the revocation status of certificates with the PKIX algorithm. A PKIXRevocationChecker checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs. Each PKIXRevocationChecker must be able to check the revocation status of certificates with OCSP and CRLs. By default, OCSP is the preferred mechanism for checking revocation status, with CRLs as the fallback mechanism. However, this preference can be switched to CRLs with the @B_java#security#cert#PKIXRevocationChecker#Option#PREFER_CRLS_E@ option. In addition, the fallback mechanism can be disabled with the @B_java#security#cert#PKIXRevocationChecker#Option#NO_FALLBACK_E@ option. A PKIXRevocationChecker is obtained by calling the @B_java#security#cert#CertPathValidator#getRevocationChecker_E@ method of a PKIX CertPathValidator. Additional parameters and options specific to revocation can be set (by calling the @B_java#security#cert#PKIXRevocationChecker#setOcspResponder_E@ method for instance). The PKIXRevocationChecker is added to a PKIXParameters object using the @B_java#security#cert#PKIXParameters#addCertPathChecker_E@ or @B_java#security#cert#PKIXParameters#setCertPathCheckers_E@ method, and then the PKIXParameters is passed along with the CertPath to be validated to the @B_java#security#cert#CertPathValidator#validate_E@ method of a PKIX CertPathValidator. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the @B_java#security#cert#PKIXParameters#isRevocationEnabled_E@ flag. Similarly, a PKIXRevocationChecker may be added to a PKIXBuilderParameters object for use with a PKIX CertPathBuilder. Note that when a PKIXRevocationChecker is added to PKIXParameters, it clones the PKIXRevocationChecker; thus any subsequent modifications to the PKIXRevocationChecker have no effect. Any parameter that is not set (or is set to null) will be set to the default value for that parameter. Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. See RFC 2560: X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP, RFC 5280: Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile (Android note: this paragraph was originally in a malformed \"see\" tag below, moved here for correct construction of the docs)."}