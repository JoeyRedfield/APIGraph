{"Functions": {"compareSignalLevel(int,int)": {"Returns": [["int", "Returns <0 if the first signal is weaker than the second signal, 0 if the two signals have the same strength, and >0 if the first signal is stronger than the second signal."]], "Parameters": [["int", "int: The power of the first signal measured in RSSI."], ["int", "int: The power of the second signal measured in RSSI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two signal strengths.", "history": "Added in API level 1", "FullName": "public static int compareSignalLevel (int rssiA, int rssiB)"}, "enableNetwork(int,boolean)": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [["int", "int: the ID of the network as returned by @B_android#net#wifi#WifiManager#addNetwork_E@ or @B_android#net#wifi#WifiManager#getConfiguredNetworks_E@."], ["boolean", "boolean: The way to select a particular network to connect to is specify true for this parameter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Allow a previously configured network to be associated with. If attemptConnect is true, an attempt to connect to the selected network is initiated. This may result in the asynchronous delivery of state change events. @B_android#net#Network#bindSocket_E@, @B_android#net#Network#openConnection_E@, or @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ to do so. Applications are not allowed to enable networks created by other applications.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean enableNetwork (int netId, boolean attemptConnect)"}, "createWifiLock(int,java.lang.String)": {"Returns": [["@B_android#net#wifi#WifiManager#WifiLock_E@", "a new, unacquired WifiLock with the given tag."]], "Parameters": [["int", "int: the type of lock to create. See @B_android#net#wifi#WifiManager#WIFI_MODE_FULL_HIGH_PERF_E@ and @B_android#net#wifi#WifiManager#WIFI_MODE_FULL_LOW_LATENCY_E@ for descriptions of the types of Wi-Fi locks."], ["@B_java#lang#String_E@", "String: a tag for the WifiLock to identify it in debugging messages. This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks."]], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#WifiLock_E@"], "Permissions": [], "Description": "Creates a new WifiLock.", "history": "Added in API level 3", "FullName": "public WifiManager.WifiLock createWifiLock (int lockType, String tag)"}, "startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager.WpsCallback)": {"Returns": [], "Parameters": [["@B_android#net#wifi#WpsInfo_E@", "WpsInfo: WPS configuration (does not support @B_android#net#wifi#WpsInfo#LABEL_E@)"], ["@B_android#net#wifi#WifiManager#WpsCallback_E@", "WifiManager.WpsCallback: for callbacks on success or failure. Can be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the WifiManager instance needs to be initialized again"]], "SeeAlso": [], "Permissions": [], "Description": "This API is deprecated WPS suport has been deprecated from Client mode and this method will immediately trigger @B_android#net#wifi#WifiManager#WpsCallback#onFailed_E@ with a generic error.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void startWps (WpsInfo config, WifiManager.WpsCallback listener)"}, "calculateSignalLevel(int,int)": {"Returns": [["int", "A level of the signal, given in the range of 0 to numLevels-1 (both inclusive)."]], "Parameters": [["int", "int: The power of the signal measured in RSSI."], ["int", "int: The number of levels to consider in the calculated level."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the level of the signal. This should be used any time a signal is being shown.", "history": "Added in API level 1", "FullName": "public static int calculateSignalLevel (int rssi, int numLevels)"}, "disconnect()": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Disassociate from the currently active access point. This may result in the asynchronous delivery of state change events.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean disconnect ()"}, "startLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback_E@", "WifiManager.LocalOnlyHotspotCallback: LocalOnlyHotspotCallback for the application to receive updates about operating status."], ["@B_android#os#Handler_E@", "Handler: Handler to be used for callbacks. If the caller passes a null Handler, the main thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Request a local only hotspot that an application can use to communicate between co-located devices connected to the created WiFi hotspot. The network created by this method will not have Internet access. Each application can make a single request for the hotspot, but multiple applications could be requesting the hotspot at the same time. When multiple applications have successfully registered concurrently, they will be sharing the underlying hotspot. @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#onStarted_E@ is called when the hotspot is ready for use by the application. Each application can make a single active call to this method. The @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#onStarted_E@ callback supplies the requestor with a @B_android#net#wifi#WifiManager#LocalOnlyHotspotReservation_E@ that contains a @B_android#net#wifi#WifiConfiguration_E@ with the SSID, security type and credentials needed to connect to the hotspot. Communicating this information is up to the application. If the LocalOnlyHotspot cannot be created, the @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#onFailed_E@ method will be called. Example failures include errors bringing up the network or if there is an incompatible operating mode. For example, if the user is currently using Wifi Tethering to provide an upstream to another device, LocalOnlyHotspot will not start due to an incompatible mode. The possible error codes include: @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#ERROR_NO_CHANNEL_E@, @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#ERROR_GENERIC_E@, @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#ERROR_INCOMPATIBLE_MODE_E@ and @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#ERROR_TETHERING_DISALLOWED_E@. Internally, requests will be tracked to prevent the hotspot from being torn down while apps are still using it. The @B_android#net#wifi#WifiManager#LocalOnlyHotspotReservation_E@ object passed in the @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#onStarted_E@ call should be closed when the LocalOnlyHotspot is no longer needed using @B_android#net#wifi#WifiManager#LocalOnlyHotspotReservation#close_E@. Since the hotspot may be shared among multiple applications, removing the final registered application request will trigger the hotspot teardown. This means that applications should not listen to broadcasts containing wifi state to determine if the hotspot was stopped after they are done using it. Additionally, once @B_android#net#wifi#WifiManager#LocalOnlyHotspotReservation#close_E@ is called, applications will not receive callbacks of any kind. Applications should be aware that the user may also stop the LocalOnlyHotspot through the Settings UI; it is not guaranteed to stay up as long as there is a requesting application. The requestors will be notified of this case via @B_android#net#wifi#WifiManager#LocalOnlyHotspotCallback#onStopped_E@. Other cases may arise where the hotspot is torn down (Emergency mode, etc). Application developers should be aware that it can stop unexpectedly, but they will receive a notification if they have properly registered. Applications should also be aware that this network will be shared with other applications. Applications are responsible for protecting their data on this network (e.g., TLS). Applications need to have the following permissions to start LocalOnlyHotspot: @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@ and @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@. Callers without the permissions will trigger a @B_java#lang#SecurityException_E@.", "history": "Added in API level 26", "FullName": "public void startLocalOnlyHotspot (WifiManager.LocalOnlyHotspotCallback callback, Handler handler)"}, "createMulticastLock(java.lang.String)": {"Returns": [["@B_android#net#wifi#WifiManager#MulticastLock_E@", "a new, unacquired MulticastLock with the given tag."]], "Parameters": [["@B_java#lang#String_E@", "String: a tag for the MulticastLock to identify it in debugging messages. This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific MulticastLock within it, if it holds multiple MulticastLocks."]], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#MulticastLock_E@"], "Permissions": [], "Description": "Create a new MulticastLock", "history": "Added in API level 4", "FullName": "public WifiManager.MulticastLock createMulticastLock (String tag)"}, "removeNetwork(int)": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [["int", "int: the ID of the network as returned by @B_android#net#wifi#WifiManager#addNetwork_E@ or @B_android#net#wifi#WifiManager#getConfiguredNetworks_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Remove the specified network from the list of configured networks. This may result in the asynchronous delivery of state change events. Applications are not allowed to remove networks created by other applications.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean removeNetwork (int netId)"}, "getDhcpInfo()": {"Returns": [["@B_android#net#DhcpInfo_E@", "the DHCP information"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the DHCP-assigned addresses from the last successful DHCP request, if any.", "history": "Added in API level 1", "FullName": "public DhcpInfo getDhcpInfo ()"}, "addNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)": {"Returns": [["int", "Status code for the operation. One of the STATUS_NETWORK_SUGGESTIONS_ values. @B_android#net#wifi#WifiNetworkSuggestion#equals_E@ any previously provided suggestions by the app. Value is @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_SUCCESS_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP_E@, or @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID_E@"]], "Parameters": [["@B_java#util#List_E@", "List: List of network suggestions provided by the app. This value must never be null."]], "Throws": [["", "java.lang.SecurityException SecurityException} if the caller is missing required permissions."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@"], "Description": "Provide a list of network suggestions to the device. See @B_android#net#wifi#WifiNetworkSuggestion_E@ for a detailed explanation of the parameters. When the device decides to connect to one of the provided network suggestions, platform sends a directed broadcast @B_android#net#wifi#WifiManager#ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION_E@ to the app if the network was created with @B_android#net#wifi#WifiNetworkSuggestion#Builder_E@ flag set and the app holds @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission. NOTE: These networks are just a suggestion to the platform. The platform will ultimately decide on which network the device connects to. When an app is uninstalled, all its suggested networks are discarded. If the device is currently connected to a suggested network which is being removed then the device will disconnect from that network. No in-place modification of existing suggestions are allowed. Apps are expected to remove suggestions using @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ and then add the modified suggestion back using this API. Requires @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@", "history": "Added in API level 29", "FullName": "public int addNetworkSuggestions (List<WifiNetworkSuggestion> networkSuggestions)"}, "removeNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)": {"Returns": [["int", "Status code for the operation. One of the STATUS_NETWORK_SUGGESTIONS_ values. Any matching suggestions are removed from the device and will not be considered for any further connection attempts. Value is @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_SUCCESS_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE_E@, @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP_E@, or @B_android#net#wifi#WifiManager#STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID_E@"]], "Parameters": [["@B_java#util#List_E@", "List: List of network suggestions to be removed. Pass an empty list to remove all the previous suggestions provided by the app. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@"], "Description": "Remove some or all of the network suggestions that were previously provided by the app. See @B_android#net#wifi#WifiNetworkSuggestion_E@ for a detailed explanation of the parameters. See @B_android#net#wifi#WifiNetworkSuggestion#equals_E@ for the equivalence evaluation used. Requires @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@", "history": "Added in API level 29", "FullName": "public int removeNetworkSuggestions (List<WifiNetworkSuggestion> networkSuggestions)"}, "setTdlsEnabled(java.net.InetAddress, boolean)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: IP address of the endpoint to setup TDLS with"], ["boolean", "boolean: true = setup and false = tear down TDLS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable/Disable TDLS on a specific local route. TDLS enables two wireless endpoints to talk to each other directly without going through the access point that is managing the local network. It saves bandwidth and improves quality of the link. This API enables/disables the option of using TDLS. If enabled, the underlying hardware is free to use TDLS or a hop through the access point. If disabled, existing TDLS session is torn down and hardware is restricted to use access point for transferring wireless packets. Default value for all routes is 'disabled', meaning restricted to use access point for transferring packets.", "history": "added in API level 19", "FullName": "public void setTdlsEnabled (InetAddress remoteIPAddress, boolean enable)"}, "isScanAlwaysAvailable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The ability for apps to trigger scan requests will be removed in a future release. Check if scanning is always available. If this return true, apps can issue @B_android#net#wifi#WifiManager#startScan_E@ and fetch scan results even when Wi-Fi is turned off. To change this setting, see @B_android#net#wifi#WifiManager#ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE_E@.", "history": "Added in API level 18 Deprecated in API level 29", "FullName": "public boolean isScanAlwaysAvailable ()"}, "isWpa3SuiteBSupported()": {"Returns": [["boolean", "true if this device supports WPA3-Enterprise Suite-B-192"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isWpa3SuiteBSupported ()"}, "isWifiEnabled()": {"Returns": [["boolean", "true if Wi-Fi is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#getWifiState_E@"], "Permissions": [], "Description": "Return whether Wi-Fi is enabled or disabled.", "history": "Added in API level 1", "FullName": "public boolean isWifiEnabled ()"}, "reassociate()": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Reconnect to the currently active access point, even if we are already connected. This may result in the asynchronous delivery of state change events.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean reassociate ()"}, "cancelWps(android.net.wifi.WifiManager.WpsCallback)": {"Returns": [], "Parameters": [["@B_android#net#wifi#WifiManager#WpsCallback_E@", "WifiManager.WpsCallback: for callbacks on success or failure. Can be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the WifiManager instance needs to be initialized again"]], "SeeAlso": [], "Permissions": [], "Description": "This API is deprecated WPS support has been deprecated from Client mode and this method will immediately trigger @B_android#net#wifi#WifiManager#WpsCallback#onFailed_E@ with a generic error.", "history": "Added in API level 21 Deprecated in API level 28", "FullName": "public void cancelWps (WifiManager.WpsCallback listener)"}, "calculateSignalLevel(int, int)": {"Returns": [["int", "A level of the signal, given in the range of 0 to numLevels-1 (both inclusive)."]], "Parameters": [["int", "int: The power of the signal measured in RSSI."], ["int", "int: The number of levels to consider in the calculated level."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the level of the signal. This should be used any time a signal is being shown.", "history": "added in API level 1", "FullName": "public static int calculateSignalLevel (int rssi, int numLevels)"}, "isWpa3SaeSupported()": {"Returns": [["boolean", "true if this device supports WPA3-Personal SAE"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isWpa3SaeSupported ()"}, "isEnhancedPowerReportingSupported()": {"Returns": [["boolean", "true if this adapter supports advanced power/performance counters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isEnhancedPowerReportingSupported ()"}, "enableNetwork(int, boolean)": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [["int", "int: the ID of the network as returned by @B_android#net#wifi#WifiManager#addNetwork_E@ or @B_android#net#wifi#WifiManager#getConfiguredNetworks_E@."], ["boolean", "boolean: The way to select a particular network to connect to is specify true for this parameter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allow a previously configured network to be associated with. If attemptConnect is true, an attempt to connect to the selected network is initiated. This may result in the asynchronous delivery of state change events. @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ or newer, network communication may not use Wi-Fi even if Wi-Fi is connected; traffic may instead be sent through another network, such as cellular data, Bluetooth tethering, or Ethernet. For example, traffic will never use a Wi-Fi network that does not provide Internet access (e.g. a wireless printer), if another network that does offer Internet access (e.g. cellular data) is available. Applications that need to ensure that their network traffic uses Wi-Fi should use APIs such as @B_android#net#Network#bindSocket_E@, @B_android#net#Network#openConnection_E@, or @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ to do so. Applications are not allowed to enable networks created by other applications.", "history": "added in API level 1", "FullName": "public boolean enableNetwork (int netId, boolean attemptConnect)"}, "pingSupplicant()": {"Returns": [["boolean", "true if we were able to communicate with the supplicant and it returned the expected response to the PING message."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Will return the output of @B_android#net#wifi#WifiManager#isWifiEnabled_E@ instead. Check that the supplicant daemon is responding to requests.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean pingSupplicant ()"}, "createWifiLock(int, java.lang.String)": {"Returns": [["@B_android#net#wifi#WifiManager#WifiLock_E@", "a new, unacquired WifiLock with the given tag."]], "Parameters": [["int", "int: the type of lock to create. See @B_android#net#wifi#WifiManager#WIFI_MODE_FULL_E@, @B_android#net#wifi#WifiManager#WIFI_MODE_FULL_HIGH_PERF_E@ and @B_android#net#wifi#WifiManager#WIFI_MODE_SCAN_ONLY_E@ for descriptions of the types of Wi-Fi locks."], ["@B_java#lang#String_E@", "String: a tag for the WifiLock to identify it in debugging messages. This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks."]], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#WifiLock_E@"], "Permissions": [], "Description": "Creates a new WifiLock.", "history": "added in API level 3", "FullName": "public WifiManager.WifiLock createWifiLock (int lockType, String tag)"}, "reconnect()": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Reconnect to the currently active access point, if we are currently disconnected. This may result in the asynchronous delivery of state change events.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean reconnect ()"}, "setWifiEnabled(boolean)": {"Returns": [["boolean", "false if the request cannot be satisfied; true indicates that wifi is either already in the requested state, or in progress toward the requested state."]], "Parameters": [["boolean", "boolean: true to enable, false to disable."]], "Throws": [["", "java.lang.SecurityException} if the caller is missing required permissions."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@"], "Description": "Starting with Build.VERSION_CODES#Q, applications are not allowed to enable/disable Wi-Fi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false and will have no effect. If apps are targeting an older SDK ( @B_android#os#Build#VERSION_CODES#P_E@ or below), they can continue to use this API. Enable or disable Wi-Fi. Applications must have the @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@ permission to toggle wifi.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean setWifiEnabled (boolean enabled)"}, "disableNetwork(int)": {"Returns": [["boolean", "true if the operation succeeded"]], "Parameters": [["int", "int: the ID of the network as returned by @B_android#net#wifi#WifiManager#addNetwork_E@ or @B_android#net#wifi#WifiManager#getConfiguredNetworks_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return false. Disable a configured network. The specified network will not be a candidate for associating. This may result in the asynchronous delivery of state change events. Applications are not allowed to disable networks created by other applications.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public boolean disableNetwork (int netId)"}, "removePasspointConfiguration(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The FQDN of the Passpoint configuration to be removed"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if no configuration is associated with the given FQDN or Passpoint is not enabled on the device."]], "SeeAlso": [], "Permissions": [], "Description": "This is no longer supported. Remove the Passpoint configuration identified by its FQDN (Fully Qualified Domain Name). Requires android.Manifest.permission.NETWORK_SETTINGS", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public void removePasspointConfiguration (String fqdn)"}, "getScanResults()": {"Returns": [["@B_java#util#List_E@", "the list of access points found in the most recent scan. An app must hold @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission in order to get valid results."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Return the results of the latest access point scan.", "history": "Added in API level 1", "FullName": "public List<ScanResult> getScanResults ()"}, "isP2pSupported()": {"Returns": [["boolean", "true if this adapter supports WifiP2pManager (Wi-Fi Direct)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isP2pSupported ()"}, "isEnhancedOpenSupported()": {"Returns": [["boolean", "true if this device supports Wi-Fi Enhanced Open (OWE)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isEnhancedOpenSupported ()"}, "startScan()": {"Returns": [["boolean", "true if the operation succeeded, i.e., the scan was initiated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CHANGE_WIFI_STATE_E@"], "Description": "The ability for apps to trigger scan requests will be removed in a future release. Request a scan for access points. Returns immediately. The availability of the results is made known later by means of an asynchronous event sent on completion of the scan. To initiate a Wi-Fi scan, declare the @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@ permission in the manifest, and perform these steps:", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public boolean startScan ()"}, "is5GHzBandSupported()": {"Returns": [["boolean", "true if this adapter supports 5 GHz band"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean is5GHzBandSupported ()"}, "saveConfiguration()": {"Returns": [["boolean", "false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "There is no need to call this method - @B_android#net#wifi#WifiManager#addNetwork_E@, @B_android#net#wifi#WifiManager#updateNetwork_E@ and @B_android#net#wifi#WifiManager#removeNetwork_E@ already persist the configurations automatically. Tell the device to persist the current list of configured networks. Note: It is possible for this method to change the network IDs of existing networks. You should assume the network IDs can be different after calling this method.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public boolean saveConfiguration ()"}, "getPasspointConfigurations()": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#net#wifi#hotspot2#PasspointConfiguration_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is no longer supported. Return the list of installed Passpoint configurations. An empty list will be returned when no configurations are installed. Requires android.Manifest.permission.NETWORK_SETTINGS or android.Manifest.permission.NETWORK_SETUP_WIZARD", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public List<PasspointConfiguration> getPasspointConfigurations ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "isTdlsSupported()": {"Returns": [["boolean", "true if this adapter supports Tunnel Directed Link Setup"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isTdlsSupported ()"}, "isEasyConnectSupported()": {"Returns": [["boolean", "true if this device supports Wi-Fi Easy-connect (Device Provisioning Protocol)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wi-Fi Easy Connect (DPP) introduces standardized mechanisms to simplify the provisioning and configuration of Wi-Fi devices. For more details, visit", "history": "Added in API level 29", "FullName": "public boolean isEasyConnectSupported ()"}, "getWifiState()": {"Returns": [["int", "One of @B_android#net#wifi#WifiManager#WIFI_STATE_DISABLED_E@, @B_android#net#wifi#WifiManager#WIFI_STATE_DISABLING_E@, @B_android#net#wifi#WifiManager#WIFI_STATE_ENABLED_E@, @B_android#net#wifi#WifiManager#WIFI_STATE_ENABLING_E@, @B_android#net#wifi#WifiManager#WIFI_STATE_UNKNOWN_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#isWifiEnabled_E@"], "Permissions": [], "Description": "Gets the Wi-Fi enabled state.", "history": "Added in API level 1", "FullName": "public int getWifiState ()"}, "updateNetwork(android.net.wifi.WifiConfiguration)": {"Returns": [["int", "Returns the networkId of the supplied WifiConfiguration on success. Returns -1 on failure, including when the networkId field of the WifiConfiguration does not refer to an existing network."]], "Parameters": [["@B_android#net#wifi#WifiConfiguration_E@", "WifiConfiguration: the set of variables that describe the configuration, contained in a @B_android#net#wifi#WifiConfiguration_E@ object. It may be sparse, so that only the items that are being changed are non-null. The networkId field must be set to the ID of the existing network being updated. If the @B_android#net#wifi#WifiConfiguration_E@ has an Http Proxy set the calling app must be System, or be provisioned as the Profile or Device Owner."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return -1. Update the network description of an existing configured network.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public int updateNetwork (WifiConfiguration config)"}, "isPreferredNetworkOffloadSupported()": {"Returns": [["boolean", "true if this adapter supports offloaded connectivity scan"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isPreferredNetworkOffloadSupported ()"}, "addNetwork(android.net.wifi.WifiConfiguration)": {"Returns": [["int", "the ID of the newly created network description. This is used in other operations to specified the network to be acted upon. Returns -1 on failure."]], "Parameters": [["@B_android#net#wifi#WifiConfiguration_E@", "WifiConfiguration: the set of variables that describe the configuration, contained in a @B_android#net#wifi#WifiConfiguration_E@ object. If the @B_android#net#wifi#WifiConfiguration_E@ has an Http Proxy set the calling app must be System, or be provisioned as the Profile or Device Owner."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will always return -1. Add a new network description to the set of configured networks. The networkId field of the supplied configuration object is ignored. The new network will be marked DISABLED by default. To enable it, called @B_android#net#wifi#WifiManager#enableNetwork_E@.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public int addNetwork (WifiConfiguration config)"}, "getConnectionInfo()": {"Returns": [["@B_android#net#wifi#WifiInfo_E@", "the Wi-Fi information, contained in @B_android#net#wifi#WifiInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return dynamic information about the current Wi-Fi connection, if any is active. In the connected state, access to the SSID and BSSID requires the same permissions as @B_android#net#wifi#WifiManager#getScanResults_E@. If such access is not allowed, @B_android#net#wifi#WifiInfo#getSSID_E@ will return \"<unknown ssid>\" and @B_android#net#wifi#WifiInfo#getBSSID_E@ will return \"02:00:00:00:00:00\".", "history": "Added in API level 1", "FullName": "public WifiInfo getConnectionInfo ()"}, "getMaxNumberOfNetworkSuggestionsPerApp()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#addNetworkSuggestions_E@", "@B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@"], "Permissions": [], "Description": "Returns the max number of network suggestions that are allowed per app on the device.", "history": "Added in API level 29", "FullName": "public int getMaxNumberOfNetworkSuggestionsPerApp ()"}, "compareSignalLevel(int, int)": {"Returns": [["int", "Returns <0 if the first signal is weaker than the second signal, 0 if the two signals have the same strength, and >0 if the first signal is stronger than the second signal."]], "Parameters": [["int", "int: The power of the first signal measured in RSSI."], ["int", "int: The power of the second signal measured in RSSI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two signal strengths.", "history": "added in API level 1", "FullName": "public static int compareSignalLevel (int rssiA, int rssiB)"}, "addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration)": {"Returns": [], "Parameters": [["@B_android#net#wifi#hotspot2#PasspointConfiguration_E@", "PasspointConfiguration: The Passpoint configuration to be added"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if configuration is invalid or Passpoint is not enabled on the device."]], "SeeAlso": [], "Permissions": [], "Description": "Add or update a Passpoint configuration. The configuration provides a credential for connecting to Passpoint networks that are operated by the Passpoint service provider specified in the configuration. Each configuration is uniquely identified by its FQDN (Fully Qualified Domain Name). In the case when there is an existing configuration with the same FQDN, the new configuration will replace the existing configuration.", "history": "Added in API level 26", "FullName": "public void addOrUpdatePasspointConfiguration (PasspointConfiguration config)"}, "setTdlsEnabledWithMacAddress(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: MAC address of the remote endpoint such as 00:00:0c:9f:f2:ab"], ["boolean", "boolean: true = setup and false = tear down TDLS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#net#wifi#WifiManager#setTdlsEnabled_E@, except this version allows you to specify remote endpoint with a MAC address.", "history": "Added in API level 19", "FullName": "public void setTdlsEnabledWithMacAddress (String remoteMacAddress, boolean enable)"}, "isDeviceToApRttSupported()": {"Returns": [["boolean", "true if this adapter supports Device-to-AP RTT"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#content#pm#PackageManager#hasSystemFeature_E@ with @B_android#content#pm#PackageManager#FEATURE_WIFI_RTT_E@.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public boolean isDeviceToApRttSupported ()"}, "setTdlsEnabled(java.net.InetAddress,boolean)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: IP address of the endpoint to setup TDLS with"], ["boolean", "boolean: true = setup and false = tear down TDLS"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable/Disable TDLS on a specific local route. TDLS enables two wireless endpoints to talk to each other directly without going through the access point that is managing the local network. It saves bandwidth and improves quality of the link. This API enables/disables the option of using TDLS. If enabled, the underlying hardware is free to use TDLS or a hop through the access point. If disabled, existing TDLS session is torn down and hardware is restricted to use access point for transferring wireless packets. Default value for all routes is 'disabled', meaning restricted to use access point for transferring packets.", "history": "Added in API level 19", "FullName": "public void setTdlsEnabled (InetAddress remoteIPAddress, boolean enable)"}, "getConfiguredNetworks()": {"Returns": [["@B_java#util#List_E@", "a list of network configurations in the form of a list of @B_android#net#wifi#WifiConfiguration_E@ objects."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_WIFI_STATE_E@"], "Description": "a) See @B_android#net#wifi#WifiNetworkSpecifier#Builder#build_E@ for new mechanism to trigger connection to a Wi-Fi network. b) See @B_android#net#wifi#WifiManager#addNetworkSuggestions_E@, @B_android#net#wifi#WifiManager#removeNetworkSuggestions_E@ for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. @B_android#os#Build#VERSION_CODES#Q_E@ or above, this API will return an empty list, except for: Device Owner (DO) & Profile Owner (PO) apps will have access to the full list. Callers with Carrier privilege will receive a restricted list only containing configurations which they created. Return a list of all the networks configured for the current foreground user. Not all fields of WifiConfiguration are returned. Only the following fields are filled in: networkId SSID BSSID priority allowedProtocols allowedKeyManagement allowedAuthAlgorithms allowedPairwiseCiphers allowedGroupCiphers Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ and @B_android#Manifest#permission#ACCESS_WIFI_STATE_E@", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public List<WifiConfiguration> getConfiguredNetworks ()"}, "createWifiLock(java.lang.String)": {"Returns": [["@B_android#net#wifi#WifiManager#WifiLock_E@", "a new, unacquired WifiLock with the given tag."]], "Parameters": [["@B_java#lang#String_E@", "String: a tag for the WifiLock to identify it in debugging messages. This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks."]], "Throws": [], "SeeAlso": ["@B_android#net#wifi#WifiManager#WifiLock_E@"], "Permissions": [], "Description": "This API is non-functional. Creates a new WifiLock.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public WifiManager.WifiLock createWifiLock (String tag)"}}, "Inheritance": [], "ClassName": "android.net.wifi.WifiManager", "ClassDesc": "This class provides the primary API for managing all aspects of Wi-Fi connectivity. On releases before @B_android#os#Build#VERSION_CODES#N_E@, this object should only be obtained from an It deals with several categories of items: The list of configured networks. The list can be viewed and updated, and attributes of individual entries can be modified. The currently active Wi-Fi network, if any. Connectivity can be established or torn down, and dynamic information about the state of the network can be queried. Results of access point scans, containing enough information to make decisions about what access point to connect to. It defines the names of various Intent actions that are broadcast upon any sort of change in Wi-Fi state. This is the API to use when performing Wi-Fi specific operations. To perform operations that pertain to network connectivity at an abstract level, use @B_android#net#ConnectivityManager_E@."}