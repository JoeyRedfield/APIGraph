{"Functions": {"requestRender()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the renderer render a frame. This method is typically used when the render mode has been set to @B_android#opengl#GLSurfaceView#RENDERMODE_WHEN_DIRTY_E@, so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.", "history": "Added in API level 3", "FullName": "public void requestRender ()"}, "setEGLContextClientVersion(int)": {"Returns": [], "Parameters": [["int", "int: The EGLContext client version to choose. Use 2 for OpenGL ES 2.0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inform the default EGLContextFactory and default EGLConfigChooser which EGLContext client version to pick. Use this method to create an OpenGL ES 2.0-compatible context. Example: Note: Activities which require OpenGL ES 2.0 should indicate this by setting @lt;uses-feature android:glEsVersion=\"0x00020000\" /> in the activity's AndroidManifest.xml file. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. This method only affects the behavior of the default EGLContexFactory and the default EGLConfigChooser. If @B_android#opengl#GLSurfaceView#setEGLContextFactory_E@ has been called, then the supplied EGLContextFactory is responsible for creating an OpenGL ES 2.0-compatible context. If @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ has been called, then the supplied EGLConfigChooser is responsible for choosing an OpenGL ES 2.0-compatible config.", "history": "Added in API level 8", "FullName": "public void setEGLContextClientVersion (int version)"}, "GLSurfaceView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard View constructor. In order to render something, you must call @B_android#opengl#GLSurfaceView#setRenderer_E@ to register a renderer.", "history": "Added in API level 3", "FullName": "public GLSurfaceView (Context context)"}, "surfaceCreated(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: The SurfaceHolder whose surface is being created."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 3", "FullName": "public void surfaceCreated (SurfaceHolder holder)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 3", "FullName": "protected void finalize ()"}, "setEGLConfigChooser(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a config chooser which will choose a config as close to 16-bit RGB as possible, with or without an optional depth buffer as close to 16-bits as possible. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If no setEGLConfigChooser method is called, then by default the view will choose an RGB_888 surface with a depth buffer depth of at least 16 bits.", "history": "Added in API level 3", "FullName": "public void setEGLConfigChooser (boolean needDepth)"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pause the rendering thread, optionally tearing down the EGL context depending upon the value of @B_android#opengl#GLSurfaceView#setPreserveEGLContextOnPause_E@. This method should be called when it is no longer desirable for the GLSurfaceView to continue rendering, such as in response to @B_android#app#Activity#onStop_E@. Must not be called before a renderer has been set.", "history": "Added in API level 3", "FullName": "public void onPause ()"}, "surfaceChanged(android.view.SurfaceHolder,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: The SurfaceHolder whose surface has changed."], ["int", "int: The new PixelFormat of the surface."], ["int", "int: The new width of the surface."], ["int", "int: The new height of the surface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 3", "FullName": "public void surfaceChanged (SurfaceHolder holder, int format, int w, int h)"}, "setRenderer(android.opengl.GLSurfaceView.Renderer)": {"Returns": [], "Parameters": [["@B_android#opengl#GLSurfaceView#Renderer_E@", "GLSurfaceView.Renderer: the renderer to use to perform OpenGL drawing."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the renderer associated with this view. Also starts the thread that will call the renderer, which in turn causes the rendering to start. This method should be called once and only once in the life-cycle of a GLSurfaceView. The following GLSurfaceView methods can only be called before setRenderer is called: @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ The following GLSurfaceView methods can only be called after setRenderer is called: @B_android#opengl#GLSurfaceView#getRenderMode_E@ @B_android#opengl#GLSurfaceView#onPause_E@ @B_android#opengl#GLSurfaceView#onResume_E@ @B_android#opengl#GLSurfaceView#queueEvent_E@ @B_android#opengl#GLSurfaceView#requestRender_E@ @B_android#opengl#GLSurfaceView#setRenderMode_E@", "history": "Added in API level 3", "FullName": "public void setRenderer (GLSurfaceView.Renderer renderer)"}, "getPreserveEGLContextOnPause()": {"Returns": [["boolean", "true if the EGL context will be preserved when paused"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public boolean getPreserveEGLContextOnPause ()"}, "setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)": {"Returns": [], "Parameters": [["@B_android#opengl#GLSurfaceView#EGLWindowSurfaceFactory_E@", "GLSurfaceView.EGLWindowSurfaceFactory no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a custom EGLWindowSurfaceFactory. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If this method is not called, then by default a window surface will be created with a null attribute list.", "history": "Added in API level 5", "FullName": "public void setEGLWindowSurfaceFactory (GLSurfaceView.EGLWindowSurfaceFactory factory)"}, "surfaceRedrawNeeded(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: The SurfaceHolder whose surface has changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is part of the SurfaceHolder.Callback2 interface, and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 24", "FullName": "public void surfaceRedrawNeeded (SurfaceHolder holder)"}, "getDebugFlags()": {"Returns": [["int", "the current value of the debug flags."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current value of the debug flags.", "history": "Added in API level 3", "FullName": "public int getDebugFlags ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 3", "FullName": "protected void onDetachedFromWindow ()"}, "surfaceDestroyed(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: The SurfaceHolder whose surface is being destroyed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 3", "FullName": "public void surfaceDestroyed (SurfaceHolder holder)"}, "setDebugFlags(int)": {"Returns": [], "Parameters": [["int", "int: the new debug flags"]], "Throws": [], "SeeAlso": ["@B_android#opengl#GLSurfaceView_E@"], "Permissions": [], "Description": "Set the debug flags to a new value. The value is constructed by OR-together zero or more of the DEBUG_CHECK_* constants. The debug flags take effect whenever a surface is created. The default value is zero.", "history": "Added in API level 3", "FullName": "public void setDebugFlags (int debugFlags)"}, "setPreserveEGLContextOnPause(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: preserve the EGL context when paused"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed. If set to true, then the EGL context may be preserved when the GLSurfaceView is paused. Prior to API level 11, whether the EGL context is actually preserved or not depends upon whether the Android device can support an arbitrary number of EGL contexts or not. Devices that can only support a limited number of EGL contexts must release the EGL context in order to allow multiple applications to share the GPU. If set to false, the EGL context will be released when the GLSurfaceView is paused, and recreated when the GLSurfaceView is resumed. The default is false.", "history": "Added in API level 11", "FullName": "public void setPreserveEGLContextOnPause (boolean preserveOnPause)"}, "setEGLConfigChooser(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a config chooser which will choose a config with at least the specified depthSize and stencilSize, and exactly the specified redSize, greenSize, blueSize and alphaSize. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If no setEGLConfigChooser method is called, then by default the view will choose an RGB_888 surface with a depth buffer depth of at least 16 bits.", "history": "added in API level 3", "FullName": "public void setEGLConfigChooser (int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize)"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes the rendering thread, re-creating the OpenGL context if necessary. It is the counterpart to @B_android#opengl#GLSurfaceView#onPause_E@. This method should typically be called in @B_android#app#Activity#onStart_E@. Must not be called before a renderer has been set.", "history": "Added in API level 3", "FullName": "public void onResume ()"}, "setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)": {"Returns": [], "Parameters": [["@B_android#opengl#GLSurfaceView#EGLContextFactory_E@", "GLSurfaceView.EGLContextFactory no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a custom EGLContextFactory. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If this method is not called, then by default a context will be created with no shared context and with a null attribute list.", "history": "Added in API level 5", "FullName": "public void setEGLContextFactory (GLSurfaceView.EGLContextFactory factory)"}, "setRenderMode(int)": {"Returns": [], "Parameters": [["int", "int: one of the RENDERMODE_X constants"]], "Throws": [], "SeeAlso": ["@B_android#opengl#GLSurfaceView_E@"], "Permissions": [], "Description": "Set the rendering mode. When renderMode is RENDERMODE_CONTINUOUSLY, the renderer is called repeatedly to re-render the scene. When renderMode is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface is created, or when @B_android#opengl#GLSurfaceView#requestRender_E@ is called. Defaults to RENDERMODE_CONTINUOUSLY. Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance by allowing the GPU and CPU to idle when the view does not need to be updated. This method can only be called after @B_android#opengl#GLSurfaceView#setRenderer_E@", "history": "Added in API level 3", "FullName": "public void setRenderMode (int renderMode)"}, "queueEvent(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable to be run on the GL rendering thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queue a runnable to be run on the GL rendering thread. This can be used to communicate with the Renderer on the rendering thread. Must not be called before a renderer has been set.", "history": "Added in API level 3", "FullName": "public void queueEvent (Runnable r)"}, "setEGLConfigChooser(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a config chooser which will choose a config with at least the specified depthSize and stencilSize, and exactly the specified redSize, greenSize, blueSize and alphaSize. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If no setEGLConfigChooser method is called, then by default the view will choose an RGB_888 surface with a depth buffer depth of at least 16 bits.", "history": "Added in API level 3", "FullName": "public void setEGLConfigChooser (int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize)"}, "setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)": {"Returns": [], "Parameters": [["@B_android#opengl#GLSurfaceView#GLWrapper_E@", "GLSurfaceView.GLWrapper: the new GLWrapper"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the glWrapper. If the glWrapper is not null, its @B_android#opengl#GLSurfaceView#GLWrapper#wrap_E@ method is called whenever a surface is created. A GLWrapper can be used to wrap the GL object that's passed to the renderer. Wrapping a GL object enables examining and modifying the behavior of the GL calls made by the renderer. Wrapping is typically used for debugging purposes. The default value is null.", "history": "Added in API level 3", "FullName": "public void setGLWrapper (GLSurfaceView.GLWrapper glWrapper)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is used as part of the View class and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 3", "FullName": "protected void onAttachedToWindow ()"}, "getRenderMode()": {"Returns": [["int", "the current rendering mode."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#opengl#GLSurfaceView_E@"], "Permissions": [], "Description": "Get the current rendering mode. May be called from any thread. Must not be called before a renderer has been set.", "history": "Added in API level 3", "FullName": "public int getRenderMode ()"}, "GLSurfaceView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard View constructor. In order to render something, you must call @B_android#opengl#GLSurfaceView#setRenderer_E@ to register a renderer.", "history": "Added in API level 3", "FullName": "public GLSurfaceView (Context context, AttributeSet attrs)"}, "surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: The SurfaceHolder which needs redrawing."], ["@B_java#lang#Runnable_E@", "Runnable: A runnable to signal completion. This may be invoked from any thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is part of the SurfaceHolder.Callback2 interface, and is not normally called or subclassed by clients of GLSurfaceView.", "history": "Added in API level 26", "FullName": "public void surfaceRedrawNeededAsync (SurfaceHolder holder, Runnable finishDrawing)"}, "setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Install a custom EGLConfigChooser. If this method is called, it must be called before @B_android#opengl#GLSurfaceView#setRenderer_E@ is called. If no setEGLConfigChooser method is called, then by default the view will choose an EGLConfig that is compatible with the current android.view.Surface, with a depth buffer depth of at least 16 bits.", "history": "Added in API level 3", "FullName": "public void setEGLConfigChooser (GLSurfaceView.EGLConfigChooser configChooser)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#SurfaceView_E@"], "ClassName": "android.opengl.GLSurfaceView", "ClassDesc": "An implementation of SurfaceView that uses the dedicated surface for displaying OpenGL rendering. A GLSurfaceView provides the following features: Manages a surface, which is a special piece of memory that can be composited into the Android view system. Manages an EGL display, which enables OpenGL to render into a surface. Accepts a user-provided Renderer object that does the actual rendering. Renders on a dedicated thread to decouple rendering performance from the UI thread. Supports both on-demand and continuous rendering. Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls. Typically you use GLSurfaceView by subclassing it and overriding one or more of the View system input event methods. If your application does not need to override event methods then GLSurfaceView can be used as-is. For the most part GLSurfaceView behavior is customized by calling \"set\" methods rather than by subclassing. For example, unlike a regular View, drawing is delegated to a separate Renderer object which is registered with the GLSurfaceView using the @B_android#opengl#GLSurfaceView#setRenderer_E@ call. @B_android#opengl#GLSurfaceView#setRenderer_E@. However, if desired, you can modify the default behavior of GLSurfaceView by calling one or more of these methods before calling setRenderer: @B_android#opengl#GLSurfaceView#setDebugFlags_E@ @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ @B_android#opengl#GLSurfaceView#setEGLConfigChooser_E@ @B_android#opengl#GLSurfaceView#setGLWrapper_E@ By default GLSurfaceView chooses a EGLConfig that has an RGB_888 pixel format, with at least a 16-bit depth buffer and no stencil. If you would prefer a different EGLConfig you can override the default behavior by calling one of the setEGLConfigChooser methods. @B_android#opengl#GLSurfaceView#setDebugFlags_E@, and @B_android#opengl#GLSurfaceView#setGLWrapper_E@. These methods may be called before and/or after setRenderer, but typically they are called before setRenderer so that they take effect immediately. @B_android#opengl#GLSurfaceView#setRenderer_E@ to register a @B_android#opengl#GLSurfaceView#Renderer_E@. The renderer is responsible for doing the actual OpenGL rendering. @B_android#opengl#GLSurfaceView#setRenderMode_E@. The default is continuous rendering. @B_android#opengl#GLSurfaceView#onPause_E@ when the activity stops and @B_android#opengl#GLSurfaceView#onResume_E@ when the activity starts. These calls allow GLSurfaceView to pause and resume the rendering thread, and also allow GLSurfaceView to release and recreate the OpenGL display. To handle an event you will typically subclass GLSurfaceView and override the appropriate method, just as you would with any other View. However, when handling the event, you may need to communicate with the Renderer object that's running in the rendering thread. You can do this using any standard Java cross-thread communication mechanism. In addition, one relatively easy way to communicate with your renderer is to call @B_android#opengl#GLSurfaceView#queueEvent_E@. For example:"}