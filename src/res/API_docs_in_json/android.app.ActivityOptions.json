{"Functions": {"setLockTaskEnabled(boolean)": {"Returns": [["@B_android#app#ActivityOptions_E@", "this @B_android#app#ActivityOptions_E@ instance."]], "Parameters": [["boolean", "boolean: true if the activity is to be launched into LockTask mode."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startLockTask_E@", "@B_android#app#admin#DevicePolicyManager#setLockTaskPackages_E@"], "Permissions": [], "Description": "Sets whether the activity is to be launched into LockTask mode. Use this option to start an activity in LockTask mode. Note that only apps permitted by @B_android#app#admin#DevicePolicyManager_E@ can run in LockTask mode. Therefore, if @B_android#app#admin#DevicePolicyManager#isLockTaskPermitted_E@ returns false for the package of the target activity, a @B_java#lang#SecurityException_E@ will be thrown during @B_android#content#Context#startActivity_E@. This method doesn't affect activities that are already running \u2014 relaunch the activity to run in lock task mode. Defaults to false if not set.", "history": "Added in API level 28", "FullName": "public ActivityOptions setLockTaskEnabled (boolean lockTaskMode)"}, "makeSceneTransitionAnimation(android.app.Activity,android.view.View,java.lang.String)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The Activity whose window contains the shared elements."], ["@B_android#view#View_E@", "View: The View to transition to the started Activity."], ["@B_java#lang#String_E@", "String: The shared element name as used in the target Activity. This must not be null."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#setEpicenterCallback_E@"], "Permissions": [], "Description": "Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of one shared element to the started Activity. The position of sharedElement will be used as the epicenter for the exit Transition. The position of the shared element in the launched Activity will be the epicenter of its entering Transition. This requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@ to be enabled on the calling Activity to cause an exit transition. The same must be in the called Activity to get an entering transition.", "history": "Added in API level 21", "FullName": "public static ActivityOptions makeSceneTransitionAnimation (Activity activity, View sharedElement, String sharedElementName)"}, "setLaunchDisplayId(int)": {"Returns": [["@B_android#app#ActivityOptions_E@", "this @B_android#app#ActivityOptions_E@ instance."]], "Parameters": [["int", "int: The id of the display where the activity should be launched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the id of the display where activity should be launched. An app can launch activities on public displays or private displays that are owned by the app or where an app already has activities. Otherwise, trying to launch on a private display or providing an invalid display id will result in an exception. Setting launch display id will be ignored on devices that don't have @B_android#content#pm#PackageManager#FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS_E@.", "history": "Added in API level 26", "FullName": "public ActivityOptions setLaunchDisplayId (int launchDisplayId)"}, "setLaunchBounds(android.graphics.Rect)": {"Returns": [["@B_android#app#ActivityOptions_E@", "this @B_android#app#ActivityOptions_E@ instance"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: launch bounds or null for fullscreen This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds (window size and position) that the activity should be launched in. Rect position should be provided in pixels and in screen coordinates. Set to null to explicitly launch fullscreen. @B_android#content#pm#PackageManager#FEATURE_FREEFORM_WINDOW_MANAGEMENT_E@ or @B_android#content#pm#PackageManager#FEATURE_PICTURE_IN_PICTURE_E@ enabled.", "history": "Added in API level 24", "FullName": "public ActivityOptions setLaunchBounds (Rect screenSpacePixelRect)"}, "getLaunchDisplayId()": {"Returns": [["int", "The id of the display where activity should be launched, @B_android#view#Display#INVALID_DISPLAY_E@ if not set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#ActivityOptions#setLaunchDisplayId_E@"], "Permissions": [], "Description": "Gets the id of the display where activity should be launched.", "history": "Added in API level 26", "FullName": "public int getLaunchDisplayId ()"}, "requestUsageTimeReport(android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: A broadcast receiver that willl receive the report."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask the system track that time the user spends in the app being launched, and report it back once done. The report will be sent to the given receiver, with the extras @B_android#app#ActivityOptions#EXTRA_USAGE_TIME_REPORT_E@ and @B_android#app#ActivityOptions#EXTRA_USAGE_TIME_REPORT_PACKAGES_E@ filled in. The time interval tracked is from launching this activity until the user leaves that activity's flow. They are considered to stay in the flow as long as new activities are being launched or returned to from the original flow, even if this crosses package or task boundaries. For example, if the originator starts an activity to view an image, and while there the user selects to share, which launches their email app in a new task, and they complete the share, the time during that entire operation will be included until they finally hit back from the original image viewer activity. The user is considered to complete a flow once they switch to another activity that is not part of the tracked flow. This may happen, for example, by using the notification shade, launcher, or recents to launch or switch to another app. Simply going in to these navigation elements does not break the flow (although the launcher and recents stops time tracking of the session); it is the act of going somewhere else that completes the tracking.", "history": "Added in API level 23", "FullName": "public void requestUsageTimeReport (PendingIntent receiver)"}, "getLaunchBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "Bounds used to launch the activity. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#ActivityOptions#setLaunchBounds_E@"], "Permissions": [], "Description": "Returns the bounds that should be used to launch the activity.", "history": "Added in API level 24", "FullName": "public Rect getLaunchBounds ()"}, "setAppVerificationBundle(android.os.Bundle)": {"Returns": [["@B_android#app#ActivityOptions_E@", "no returns description in source"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_android#os#Bundle_E@ that is provided to the app installer for additional verification if the call to @B_android#content#Context#startActivity_E@ results in an app being installed. This Bundle is not provided to any other app besides the installer.", "history": "Added in API level 26", "FullName": "public ActivityOptions setAppVerificationBundle (Bundle bundle)"}, "makeScaleUpAnimation(android.view.View,int,int,int,int)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#view#View_E@", "View: The View that the new activity is animating from. This defines the coordinate space for startX and startY."], ["int", "int: The x starting location of the new activity, relative to source."], ["int", "int: The y starting location of the activity, relative to source."], ["int", "int: The initial width of the new activity."], ["int", "int: The initial height of the new activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. If the Intent this is being used with has not set its @B_android#content#Intent#setSourceBounds_E@, those bounds will be filled in for you based on the initial bounds passed in here.", "history": "Added in API level 16", "FullName": "public static ActivityOptions makeScaleUpAnimation (View source, int startX, int startY, int width, int height)"}, "getLockTaskMode()": {"Returns": [["boolean", "true if the activity is to be launched into LockTask mode."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startLockTask_E@", "@B_android#app#admin#DevicePolicyManager#setLockTaskPackages_E@"], "Permissions": [], "Description": "Gets whether the activity is to be launched into LockTask mode.", "history": "Added in API level 28", "FullName": "public boolean getLockTaskMode ()"}, "makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#view#View_E@", "View: The View that this thumbnail is animating from. This defines the coordinate space for startX and startY."], ["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap that will be shown as the initial thumbnail of the animation."], ["int", "int: The x starting location of the bitmap, relative to source."], ["int", "int: The y starting location of the bitmap, relative to source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. If the Intent this is being used with has not set its @B_android#content#Intent#setSourceBounds_E@, those bounds will be filled in for you based on the initial thumbnail location and size provided here.", "history": "Added in API level 16", "FullName": "public static ActivityOptions makeThumbnailScaleUpAnimation (View source, Bitmap thumbnail, int startX, int startY)"}, "makeSceneTransitionAnimation(android.app.Activity,android.util.Pair<android.view.View,java.lang.String>...)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The Activity whose window contains the shared elements."], ["@B_android#util#Pair_E@", "Pair: The names of the shared elements to transfer to the called Activity and their associated Views. The Views must each have a unique shared element name."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#setEpicenterCallback_E@"], "Permissions": [], "Description": "Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of multiple shared elements to the started Activity. The position of the first element in sharedElements will be used as the epicenter for the exit Transition. The position of the associated shared element in the launched Activity will be the epicenter of its entering Transition. This requires @B_android#view#Window#FEATURE_ACTIVITY_TRANSITIONS_E@ to be enabled on the calling Activity to cause an exit transition. The same must be in the called Activity to get an entering transition.", "history": "Added in API level 21", "FullName": "public static ActivityOptions makeSceneTransitionAnimation (Activity activity, Pair...<View, String> sharedElements)"}, "toBundle()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the created options as a Bundle, which can be passed to @B_android#content#Context#startActivity_E@ and related methods. Note that the returned Bundle is still owned by the ActivityOptions object; you must not modify it, but can supply it to the startActivity methods that take an options Bundle.", "history": "Added in API level 16", "FullName": "public Bundle toBundle ()"}, "makeClipRevealAnimation(android.view.View,int,int,int,int)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#view#View_E@", "View: The View that the new activity is animating from. This defines the coordinate space for startX and startY."], ["int", "int: The x starting location of the new activity, relative to source."], ["int", "int: The y starting location of the activity, relative to source."], ["int", "int: The initial width of the new activity."], ["int", "int: The initial height of the new activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an ActivityOptions specifying an animation where the new activity is revealed from a small originating area of the screen to its final full representation.", "history": "Added in API level 23", "FullName": "public static ActivityOptions makeClipRevealAnimation (View source, int startX, int startY, int width, int height)"}, "makeCustomAnimation(android.content.Context,int,int)": {"Returns": [["@B_android#app#ActivityOptions_E@", "Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity."]], "Parameters": [["@B_android#content#Context_E@", "Context: Who is defining this. This is the application that the animation resources will be loaded from."], ["int", "int: A resource ID of the animation resource to use for the incoming activity. Use 0 for no animation."], ["int", "int: A resource ID of the animation resource to use for the outgoing activity. Use 0 for no animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an ActivityOptions specifying a custom animation to run when the activity is displayed.", "history": "Added in API level 16", "FullName": "public static ActivityOptions makeCustomAnimation (Context context, int enterResId, int exitResId)"}, "update(android.app.ActivityOptions)": {"Returns": [], "Parameters": [["@B_android#app#ActivityOptions_E@", "ActivityOptions no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the current values in this ActivityOptions from those supplied in", "history": "Added in API level 16", "FullName": "public void update (ActivityOptions otherOptions)"}, "makeBasic()": {"Returns": [["@B_android#app#ActivityOptions_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a basic ActivityOptions that has no special animation associated with it. Other options can still be set.", "history": "Added in API level 23", "FullName": "public static ActivityOptions makeBasic ()"}, "makeTaskLaunchBehind()": {"Returns": [["@B_android#app#ActivityOptions_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If set along with Intent.FLAG_ACTIVITY_NEW_DOCUMENT then the task being launched will not be presented to the user but will instead be only available through the recents task list. In addition, the new task wil be affiliated with the launching activity's task. Affiliated tasks are grouped together in the recents task list. This behavior is not supported for activities with @B_android#R#styleable#AndroidManifestActivity_launchMode_E@ values of singleInstance or singleTask.", "history": "Added in API level 21", "FullName": "public static ActivityOptions makeTaskLaunchBehind ()"}}, "Inheritance": [], "ClassName": "android.app.ActivityOptions", "ClassDesc": "Helper class for building an options Bundle that can be used with @B_android#content#Context#startActivity_E@ and related methods."}