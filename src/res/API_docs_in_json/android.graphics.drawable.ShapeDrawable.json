{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "getPaint()": {"Returns": [["@B_android#graphics#Paint_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Paint used to draw the shape.", "history": "Added in API level 1", "FullName": "public Paint getPaint ()"}, "setIntrinsicWidth(int)": {"Returns": [], "Parameters": [["int", "int: the intrinsic width (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the intrinsic (default) width for this shape.", "history": "Added in API level 1", "FullName": "public void setIntrinsicWidth (int width)"}, "getShaderFactory()": {"Returns": [["@B_android#graphics#drawable#ShapeDrawable#ShaderFactory_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ShaderFactory used by this ShapeDrawable for requesting a @B_android#graphics#Shader_E@.", "history": "Added in API level 1", "FullName": "public ShapeDrawable.ShaderFactory getShaderFactory ()"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "setIntrinsicHeight(int)": {"Returns": [], "Parameters": [["int", "int: the intrinsic height (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the intrinsic (default) height for this shape.", "history": "Added in API level 1", "FullName": "public void setIntrinsicHeight (int height)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#shapes#Shape_E@", "Shape no parameter comment"], ["@B_android#graphics#Canvas_E@", "Canvas no parameter comment"], ["@B_android#graphics#Paint_E@", "Paint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from the drawable's draw() method after the canvas has been set to draw the shape at (0,0). Subclasses can override for special effects such as multiple layers, stroking, etc.", "history": "Added in API level 1", "FullName": "protected void onDraw (Shape shape, Canvas canvas, Paint paint)"}, "ShapeDrawable(android.graphics.drawable.shapes.Shape)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#shapes#Shape_E@", "Shape: the Shape that this ShapeDrawable should be"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ShapeDrawable with a specified Shape.", "history": "Added in API level 1", "FullName": "public ShapeDrawable (Shape s)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 1", "FullName": "public void setDither (boolean dither)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 1", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setShaderFactory(android.graphics.drawable.ShapeDrawable.ShaderFactory)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#ShapeDrawable#ShaderFactory_E@", "ShapeDrawable.ShaderFactory: an instance of your ShaderFactory implementation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a ShaderFactory to which requests for a @B_android#graphics#Shader_E@ object will be made.", "history": "Added in API level 1", "FullName": "public void setShaderFactory (ShapeDrawable.ShaderFactory fact)"}, "setPadding(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets padding for this shape, defined by a Rect object. Define the padding in the Rect object as: left, top, right, bottom.", "history": "Added in API level 1", "FullName": "public void setPadding (Rect padding)"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the alpha level for this drawable [0..255]. Note that this drawable also has a color in its paint, which has an alpha as well. These two values are automatically combined during drawing. Thus if the color's alpha is 75% (i.e. 192) and the drawable's alpha is 50% (i.e. 128), then the combined alpha that will be used during drawing will be 37.5% (i.e. 96).", "history": "Added in API level 1", "FullName": "public void setAlpha (int alpha)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 1", "FullName": "protected void onBoundsChange (Rect bounds)"}, "setPadding(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: padding for the left side (in pixels)"], ["int", "int: padding for the top (in pixels)"], ["int", "int: padding for the right side (in pixels)"], ["int", "int: padding for the bottom (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets padding for the shape.", "history": "Added in API level 1", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "getShape()": {"Returns": [["@B_android#graphics#drawable#shapes#Shape_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Shape of this ShapeDrawable.", "history": "Added in API level 1", "FullName": "public Shape getShape ()"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "setPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: padding for the left side (in pixels)"], ["int", "int: padding for the top (in pixels)"], ["int", "int: padding for the right side (in pixels)"], ["int", "int: padding for the bottom (in pixels)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets padding for the shape.", "history": "added in API level 1", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#content#res#Resources_E@", "Resources no parameter comment"], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses override this to parse custom subelements. If you handle it, return true, else return super.inflateTag(...).", "history": "Added in API level 1", "FullName": "protected boolean inflateTag (String name, Resources r, XmlPullParser parser, AttributeSet attrs)"}, "ShapeDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ShapeDrawable constructor.", "history": "Added in API level 1", "FullName": "public ShapeDrawable ()"}, "setShape(android.graphics.drawable.shapes.Shape)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#shapes#Shape_E@", "Shape no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Shape of this ShapeDrawable.", "history": "Added in API level 1", "FullName": "public void setShape (Shape s)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.ShapeDrawable", "ClassDesc": "A Drawable object that draws primitive shapes. A ShapeDrawable takes a @B_android#graphics#drawable#shapes#Shape_E@ object and manages its presence on the screen. If no Shape is given, then the ShapeDrawable will default to a @B_android#graphics#drawable#shapes#RectShape_E@. This object can be defined in an XML file with the <shape> element."}