{"Functions": {"toggle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the checked state of the view to the inverse of its current state", "history": "Added in API level 1", "FullName": "public void toggle ()"}, "getButtonTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the button drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#setButtonTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ColorStateList getButtonTintList ()"}, "CompoundButton(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CompoundButton (Context context, AttributeSet attrs)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setButtonDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to set This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable as the compound button image.", "history": "Added in API level 1", "FullName": "public void setButtonDrawable (Drawable drawable)"}, "getButtonTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the button drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#setButtonTintMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public PorterDuff.Mode getButtonTintMode ()"}, "getAutofillValue()": {"Returns": [["@B_android#view#autofill#AutofillValue_E@", "current text, null if the text is not editable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#widget#TextView_E@'s current text for AutoFill. The value is trimmed to 100K chars if longer.", "history": "Added in API level 26", "FullName": "public AutofillValue getAutofillValue ()"}, "CompoundButton(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CompoundButton (Context context)"}, "performClick()": {"Returns": [["boolean", "True there was an assigned OnClickListener that was called, false otherwise is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this view's OnClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "Added in API level 1", "FullName": "public boolean performClick ()"}, "setButtonTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#getButtonTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#CompoundButton#setButtonTintList_E@} to the button drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setButtonTintBlendMode (BlendMode tintMode)"}, "isChecked()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isChecked ()"}, "setButtonTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#setButtonTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the button drawable. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#CompoundButton#setButtonDrawable_E@ will automatically mutate the drawable and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setButtonTintList (ColorStateList tint)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 1", "FullName": "protected int[] onCreateDrawableState (int extraSpace)"}, "getButtonTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the button drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#setButtonTintBlendMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public BlendMode getButtonTintBlendMode ()"}, "getCompoundPaddingLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left padding of the view, plus space for the left Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingLeft ()"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to check the button, false to uncheck it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the checked state of this button.", "history": "Added in API level 1", "FullName": "public void setChecked (boolean checked)"}, "getButtonDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable used as the compound button image This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#setButtonDrawable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public Drawable getButtonDrawable ()"}, "CompoundButton(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public CompoundButton (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "getCompoundPaddingRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right padding of the view, plus space for the right Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingRight ()"}, "setButtonDrawable(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a drawable as the compound button image given its resource identifier.", "history": "Added in API level 1", "FullName": "public void setButtonDrawable (int resId)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#CompoundButton#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "autofill(android.view.autofill.AutofillValue)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: value to be autofilled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically fills the content of this view with the value. Views support the Autofill Framework mainly by: Providing the metadata defining what the view means and how it can be autofilled. Implementing the methods that autofill the view. @B_android#view#View#onProvideAutofillStructure_E@ is responsible for the former, this method is responsible for latter. This method does nothing by default, but when overridden it typically: For example, a text-field view could implement the method this way: If the value is updated asynchronously, the next call to @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ must happen @B_android#view#View#getAutofillValue_E@ must be equal to the value passed to it, otherwise the view will not be highlighted as autofilled.", "history": "Added in API level 26", "FullName": "public void autofill (AutofillValue value)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "getAutofillType()": {"Returns": [["int", "Value is @B_android#view#View#AUTOFILL_TYPE_NONE_E@, @B_android#view#View#AUTOFILL_TYPE_TEXT_E@, @B_android#view#View#AUTOFILL_TYPE_TOGGLE_E@, @B_android#view#View#AUTOFILL_TYPE_LIST_E@, or @B_android#view#View#AUTOFILL_TYPE_DATE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the autofill type of this view, so an @B_android#service#autofill#AutofillService_E@ can create the proper @B_android#view#autofill#AutofillValue_E@ when autofilling the view. By default returns @B_android#view#View#AUTOFILL_TYPE_NONE_E@, but views should override it to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public int getAutofillType ()"}, "setButtonTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#CompoundButton#getButtonTintMode_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#CompoundButton#setButtonTintList_E@} to the button drawable. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 21", "FullName": "public void setButtonTintMode (PorterDuff.Mode tintMode)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "CompoundButton(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public CompoundButton (Context context, AttributeSet attrs, int defStyleAttr)"}, "setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)": {"Returns": [], "Parameters": [["@B_android#widget#CompoundButton#OnCheckedChangeListener_E@", "CompoundButton.OnCheckedChangeListener: the callback to call on checked state change This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the checked state of this button changes.", "history": "Added in API level 1", "FullName": "public void setOnCheckedChangeListener (CompoundButton.OnCheckedChangeListener listener)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@", "@B_android#widget#Button_E@"], "ClassName": "android.widget.CompoundButton", "ClassDesc": "A button with two states, checked and unchecked. When the button is pressed or clicked, the state changes automatically. See @B_android#R#styleable#CompoundButton_E@, @B_android#R#styleable#Button_E@, @B_android#R#styleable#TextView_E@, @B_android#R#styleable#View_E@"}