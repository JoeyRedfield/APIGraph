{"Functions": {"getFormat12Hour()": {"Returns": [["@B_java#lang#CharSequence_E@", "A @B_java#lang#CharSequence_E@ or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#setFormat12Hour_E@", "@B_android#widget#TextClock#is24HourModeEnabled_E@"], "Permissions": [], "Description": "Returns the formatting pattern used to display the date and/or time in 12-hour mode. The formatting pattern syntax is described in @B_android#text#format#DateFormat_E@.", "history": "Added in API level 17", "FullName": "public CharSequence getFormat12Hour ()"}, "setTimeZone(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The desired time zone's ID as specified in @B_java#util#TimeZone_E@ or null to user the time zone specified by the user (system time zone)"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#getTimeZone_E@", "@B_java#util#TimeZone#getAvailableIDs_E@", "@B_java#util#TimeZone#getTimeZone_E@"], "Permissions": [], "Description": "Sets the specified time zone to use in this clock. When the time zone is set through this method, system time zone changes (when the user sets the time zone in settings for instance) will be ignored.", "history": "Added in API level 17", "FullName": "public void setTimeZone (String timeZone)"}, "onVisibilityAggregated(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this view and all of its ancestors are @B_android#view#View#VISIBLE_E@ and this view's window is also visible"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 24", "FullName": "public void onVisibilityAggregated (boolean isVisible)"}, "getTimeZone()": {"Returns": [["@B_java#lang#String_E@", "The ID of the current time zone or null if the default time zone, as set by the user, must be used"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#TimeZone_E@", "@B_java#util#TimeZone#getAvailableIDs_E@", "@B_android#widget#TextClock#setTimeZone_E@"], "Permissions": [], "Description": "Indicates which time zone is currently used by this view.", "history": "Added in API level 17", "FullName": "public String getTimeZone ()"}, "TextClock(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TextClock (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "TextClock(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view"], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new clock inflated from XML. This object's properties are intialized from the attributes specified in XML.", "history": "Added in API level 17", "FullName": "public TextClock (Context context, AttributeSet attrs, int defStyleAttr)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 17", "FullName": "protected void onAttachedToWindow ()"}, "is24HourModeEnabled()": {"Returns": [["boolean", "true if time should be displayed in 24-hour format, false if it should be displayed in 12-hour format."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#setFormat12Hour_E@", "@B_android#widget#TextClock#getFormat12Hour_E@", "@B_android#widget#TextClock#setFormat24Hour_E@", "@B_android#widget#TextClock#getFormat24Hour_E@"], "Permissions": [], "Description": "Indicates whether the system is currently using the 24-hour mode. When the system is in 24-hour mode, this view will use the pattern returned by @B_android#widget#TextClock#getFormat24Hour_E@. In 12-hour mode, the pattern returned by @B_android#widget#TextClock#getFormat12Hour_E@ is used instead. If either one of the formats is null, the other format is used. If both formats are null, the default formats for the current locale are used.", "history": "Added in API level 17", "FullName": "public boolean is24HourModeEnabled ()"}, "TextClock(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new clock inflated from XML. This object's properties are intialized from the attributes specified in XML. This constructor uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet.", "history": "Added in API level 17", "FullName": "public TextClock (Context context, AttributeSet attrs)"}, "setFormat12Hour(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: A date/time formatting pattern as described in @B_android#text#format#DateFormat_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#getFormat12Hour_E@", "@B_android#widget#TextClock#is24HourModeEnabled_E@", "@B_android#text#format#DateFormat#getBestDateTimePattern_E@", "@B_android#text#format#DateFormat_E@"], "Permissions": [], "Description": "Specifies the formatting pattern used to display the date and/or time in 12-hour mode. The formatting pattern syntax is described in @B_android#text#format#DateFormat_E@. If this pattern is set to null, @B_android#widget#TextClock#getFormat24Hour_E@ will be used even in 12-hour mode. If both 24-hour and 12-hour formatting patterns are set to null, the default pattern for the current locale will be used instead. @B_android#text#format#DateFormat#getBestDateTimePattern_E@. This method takes care of generating a format string adapted to the desired locale.", "history": "Added in API level 17", "FullName": "public void setFormat12Hour (CharSequence format)"}, "setFormat24Hour(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: A date/time formatting pattern as described in @B_android#text#format#DateFormat_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#getFormat24Hour_E@", "@B_android#widget#TextClock#is24HourModeEnabled_E@", "@B_android#text#format#DateFormat#getBestDateTimePattern_E@", "@B_android#text#format#DateFormat_E@"], "Permissions": [], "Description": "Specifies the formatting pattern used to display the date and/or time in 24-hour mode. The formatting pattern syntax is described in @B_android#text#format#DateFormat_E@. If this pattern is set to null, @B_android#widget#TextClock#getFormat24Hour_E@ will be used even in 12-hour mode. If both 24-hour and 12-hour formatting patterns are set to null, the default pattern for the current locale will be used instead. @B_android#text#format#DateFormat#getBestDateTimePattern_E@. This method takes care of generating a format string adapted to the desired locale.", "history": "Added in API level 17", "FullName": "public void setFormat24Hour (CharSequence format)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 17", "FullName": "protected void onDetachedFromWindow ()"}, "getFormat24Hour()": {"Returns": [["@B_java#lang#CharSequence_E@", "A @B_java#lang#CharSequence_E@ or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextClock#setFormat24Hour_E@", "@B_android#widget#TextClock#is24HourModeEnabled_E@"], "Permissions": [], "Description": "Returns the formatting pattern used to display the date and/or time in 24-hour mode. The formatting pattern syntax is described in @B_android#text#format#DateFormat_E@.", "history": "Added in API level 17", "FullName": "public CharSequence getFormat24Hour ()"}, "TextClock(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new clock using the default patterns for the current locale.", "history": "Added in API level 17", "FullName": "public TextClock (Context context)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@"], "ClassName": "android.widget.TextClock", "ClassDesc": "TextClock can display the current date and/or time as a formatted string. This view honors the 24-hour format system setting. As such, it is possible and recommended to provide two different formatting patterns: one to display the date/time in 24-hour mode and one to display the date/time in 12-hour mode. Most callers will want to use the defaults, though, which will be appropriate for the user's locale. It is possible to determine whether the system is currently in 24-hour mode by calling @B_android#widget#TextClock#is24HourModeEnabled_E@. The rules used by this widget to decide how to format the date and time are the following: In 24-hour mode: Use the value returned by @B_android#widget#TextClock#getFormat24Hour_E@ when non-null Otherwise, use the value returned by @B_android#widget#TextClock#getFormat12Hour_E@ when non-null Otherwise, use a default value appropriate for the user's locale, such as h:mm a In 12-hour mode: Use the value returned by @B_android#widget#TextClock#getFormat12Hour_E@ when non-null Otherwise, use the value returned by @B_android#widget#TextClock#getFormat24Hour_E@ when non-null Otherwise, use a default value appropriate for the user's locale, such as HH:mm The @B_java#lang#CharSequence_E@ instances used as formatting patterns when calling either @B_android#widget#TextClock#setFormat24Hour_E@ or @B_android#widget#TextClock#setFormat12Hour_E@ can contain styling information. To do so, use a @B_android#text#Spanned_E@ object. Note that if you customize these strings, it is your responsibility to supply strings appropriate for formatting dates and/or times in the user's locale."}