{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current value.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the int after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public int intValue ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets variables maintaining updates to the identity value. This method may be a useful alternative to creating a new updater, but is only effective if there are no concurrent updates. Because this method is intrinsically racy, it should only be used when it is known that no threads are concurrently updating.", "history": "Added in API level 24", "FullName": "public void reset ()"}, "doubleValue()": {"Returns": [["double", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#atomic#DoubleAccumulator#get_E@.", "history": "Added in API level 24", "FullName": "public double doubleValue ()"}, "accumulate(double)": {"Returns": [], "Parameters": [["double", "double: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates with the given value.", "history": "Added in API level 24", "FullName": "public void accumulate (double x)"}, "get()": {"Returns": [["double", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value. The returned value is NOT an atomic snapshot; invocation in the absence of concurrent updates returns an accurate result, but concurrent updates that occur while the value is being calculated might not be incorporated.", "history": "Added in API level 24", "FullName": "public double get ()"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the long after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public long longValue ()"}, "DoubleAccumulator(java.util.function.DoubleBinaryOperator,double)": {"Returns": [], "Parameters": [["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a side-effect-free function of two arguments"], ["double", "double: identity (initial value) for the accumulator function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance using the given accumulator function and identity element.", "history": "Added in API level 24", "FullName": "public DoubleAccumulator (DoubleBinaryOperator accumulatorFunction, double identity)"}, "getThenReset()": {"Returns": [["double", "the value before reset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent in effect to @B_java#util#concurrent#atomic#DoubleAccumulator#get_E@ followed by @B_java#util#concurrent#atomic#DoubleAccumulator#reset_E@. This method may apply for example during quiescent points between multithreaded computations. If there are updates concurrent with this method, the returned value is not guaranteed to be the final value occurring before the reset.", "history": "Added in API level 24", "FullName": "public double getThenReset ()"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the float after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public float floatValue ()"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.util.concurrent.atomic.DoubleAccumulator", "ClassDesc": "One or more variables that together maintain a running double value updated using a supplied function. When updates (method @B_java#util#concurrent#atomic#DoubleAccumulator#accumulate_E@) are contended across threads, the set of variables may grow dynamically to reduce contention. Method @B_java#util#concurrent#atomic#DoubleAccumulator#get_E@ (or, equivalently, @B_java#util#concurrent#atomic#DoubleAccumulator#doubleValue_E@) returns the current value across the variables maintaining updates. This class is usually preferable to alternatives when multiple threads update a common value that is used for purposes such as summary statistics that are frequently updated but less frequently read. The supplied accumulator function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument. For example, to maintain a running maximum value, you could supply Double::max along with Double.NEGATIVE_INFINITY as the identity. The order of accumulation within or across threads is not guaranteed. Thus, this class may not be applicable if numerical stability is required, especially when combining values of substantially different orders of magnitude. Class @B_java#util#concurrent#atomic#DoubleAdder_E@ provides analogs of the functionality of this class for the common special case of maintaining sums. The call new DoubleAdder() is equivalent to new DoubleAccumulator((x, y) -> x + y, 0.0). This class extends @B_java#lang#Number_E@, but does not define methods such as equals, hashCode and compareTo because instances are expected to be mutated, and so are not useful as collection keys."}