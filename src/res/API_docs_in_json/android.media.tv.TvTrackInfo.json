{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getVideoWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on a video track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the width of the video, in the unit of pixels. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ tracks.", "history": "Added in API level 21", "FullName": "public int getVideoWidth ()"}, "getVideoActiveFormatDescription()": {"Returns": [["byte", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on a video track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Active Format Description (AFD) code of the video. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ tracks. The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part 4 and SMPTE 2016-1-2007.", "history": "Added in API level 24", "FullName": "public byte getVideoActiveFormatDescription ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getType()": {"Returns": [["int", "Value is @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@, or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of the track. The type should be one of the followings: @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ and @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@.", "history": "Added in API level 21", "FullName": "public int getType ()"}, "getVideoPixelAspectRatio()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on a video track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ tracks.", "history": "Added in API level 23", "FullName": "public float getVideoPixelAspectRatio ()"}, "getAudioChannelCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on an audio track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio channel count. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@ tracks.", "history": "Added in API level 21", "FullName": "public int getAudioChannelCount ()"}, "getLanguage()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. If the language is unknown or could not be determined, the corresponding value will be null.", "history": "Added in API level 21", "FullName": "public String getLanguage ()"}, "getDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a user readable description for the current track.", "history": "Added in API level 23", "FullName": "public CharSequence getDescription ()"}, "getExtra()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extra information about the current track.", "history": "Added in API level 21", "FullName": "public Bundle getExtra ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getVideoFrameRate()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on a video track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the frame rate of the video, in the unit of fps (frames per second). Valid only for @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ tracks.", "history": "Added in API level 21", "FullName": "public float getVideoFrameRate ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object o)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ID of the track.", "history": "Added in API level 21", "FullName": "public String getId ()"}, "getAudioSampleRate()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on an audio track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio sample rate, in the unit of Hz. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@ tracks.", "history": "Added in API level 21", "FullName": "public int getAudioSampleRate ()"}, "getVideoHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not called on a video track"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the height of the video, in the unit of pixels. Valid only for @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ tracks.", "history": "Added in API level 21", "FullName": "public int getVideoHeight ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.media.tv.TvTrackInfo", "ClassDesc": "Encapsulates the format of tracks played in @B_android#media#tv#TvInputService_E@."}