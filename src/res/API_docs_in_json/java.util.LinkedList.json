{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "getFirst()": {"Returns": [["E", "the first element in this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first element in this list.", "history": "Added in API level 1", "FullName": "public E getFirst ()"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element in this list (when traversing the list from head to tail). If the list does not contain the element, it is unchanged.", "history": "Added in API level 9", "FullName": "public boolean removeLastOccurrence (Object o)"}, "LinkedList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty list.", "history": "Added in API level 1", "FullName": "public LinkedList ()"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in reverse sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head).", "history": "Added in API level 9", "FullName": "public Iterator<E> descendingIterator ()"}, "pollLast()": {"Returns": [["E", "the last element of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this list, or returns null if this list is empty.", "history": "Added in API level 9", "FullName": "public E pollLast ()"}, "getLast()": {"Returns": [["E", "the last element in this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last element in this list.", "history": "Added in API level 1", "FullName": "public E getLast ()"}, "LinkedList(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "added in API level 1", "FullName": "public LinkedList (Collection<? extends E> c)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list. This method is equivalent to @B_java#util#LinkedList#addLast_E@.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "offerFirst(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerFirst_E@)"]], "Parameters": [["E", "E: the element to insert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this list.", "history": "Added in API level 9", "FullName": "public boolean offerFirst (E e)"}, "remove(int)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.", "history": "Added in API level 1", "FullName": "public E remove (int index)"}, "pollFirst()": {"Returns": [["E", "the first element of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this list, or returns null if this list is empty.", "history": "Added in API level 9", "FullName": "public E pollFirst ()"}, "removeLast()": {"Returns": [["E", "the last element from this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns the last element from this list.", "history": "Added in API level 1", "FullName": "public E removeLast ()"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a ListIterator of the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list-iterator (by a call to next)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": ["@B_java#util#List#listIterator_E@"], "Permissions": [], "Description": "Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list. Obeys the general contract of List.listIterator(int). The list-iterator is remove or add methods, the list-iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator (int index)"}, "peek()": {"Returns": [["E", "the head of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head (first element) of this list.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that true if this list contained the specified element (or equivalently, if this list changed as a result of the call).", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "removeFirst()": {"Returns": [["E", "the first element from this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns the first element from this list.", "history": "Added in API level 1", "FullName": "public E removeFirst ()"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the beginning of this list.", "history": "Added in API level 1", "FullName": "public void addFirst (E e)"}, "peekFirst()": {"Returns": [["E", "the first element of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.", "history": "Added in API level 9", "FullName": "public E peekFirst ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index i such that", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o)"}, "poll()": {"Returns": [["E", "the head of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head (first element) of this list.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element as the tail (last element) of this list.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "offerLast(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerLast_E@)"]], "Parameters": [["E", "E: the element to insert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this list.", "history": "Added in API level 9", "FullName": "public boolean offerLast (E e)"}, "LinkedList(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this list"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.", "history": "Added in API level 1", "FullName": "public LinkedList (Collection<? extends E> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this list. The list will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "size()": {"Returns": [["int", "the number of elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this list.", "history": "Added in API level 1", "FullName": "public int size ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this list. The Spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#ORDERED_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this LinkedList instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this LinkedList. (The elements themselves are not cloned.)", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index i such that", "history": "Added in API level 1", "FullName": "public int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list. This method is equivalent to @B_java#util#LinkedList#add_E@.", "history": "Added in API level 1", "FullName": "public void addLast (E e)"}, "peekLast()": {"Returns": [["E", "the last element of this list, or null if this list is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.", "history": "Added in API level 9", "FullName": "public E peekLast ()"}, "pop()": {"Returns": [["E", "the element at the front of this list (which is the top of the stack represented by this list)"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Pops an element from the stack represented by this list. In other words, removes and returns the first element of this list. This method is equivalent to @B_java#util#LinkedList#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public E pop ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing the elements of the list"]], "Parameters": [["T[]", "T: the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this list"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of the list Like the @B_java#util#LinkedList#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "remove()": {"Returns": [["E", "the head of this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head (first element) of this list.", "history": "Added in API level 1", "FullName": "public E remove ()"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list.", "history": "Added in API level 1", "FullName": "public E get (int index)"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this list. In other words, inserts the element at the front of this list. This method is equivalent to @B_java#util#LinkedList#addFirst_E@.", "history": "Added in API level 9", "FullName": "public void push (E e)"}, "element()": {"Returns": [["E", "the head of this list"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this list is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head (first element) of this list.", "history": "Added in API level 1", "FullName": "public E element ()"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element.", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element in this list (when traversing the list from head to tail). If the list does not contain the element, it is unchanged.", "history": "Added in API level 9", "FullName": "public boolean removeFirstOccurrence (Object o)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this list contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this list is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractList_E@", "@B_java#util#AbstractSequentialList_E@"], "ClassName": "java.util.LinkedList<E>", "ClassDesc": "Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null). All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index. @B_java#util#Collections#synchronizedList_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the list:The iterators returned by this class's iterator and listIterator methods are remove or add methods, the iterator will throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: This class is a member of the"}