{"Functions": {"addParentStack(java.lang.Class<?>)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "This TaskStackBuilder for method chaining"]], "Parameters": [["@B_java#lang#Class_E@", "Class: All parents of this activity will be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the activity parent chain as specified by the @B_android#R#attr#parentActivityName_E@ attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder.", "history": "Added in API level 16", "FullName": "public TaskStackBuilder addParentStack (Class<?> sourceActivityClass)"}, "getPendingIntent(int,int)": {"Returns": [["@B_android#app#PendingIntent_E@", "The obtained PendingIntent"]], "Parameters": [["int", "int: Private request code for the sender"], ["int", "int: May be @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, or any of the flags supported by @B_android#content#Intent#fillIn_E@ to control which unspecified parts of the intent that can be supplied when the actual send happens. Value is either 0 or a combination of @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, @B_android#app#PendingIntent#FLAG_IMMUTABLE_E@, @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a @B_android#app#PendingIntent_E@ for launching the task constructed by this builder so far.", "history": "Added in API level 16", "FullName": "public PendingIntent getPendingIntent (int requestCode, int flags)"}, "getPendingIntent(int, int)": {"Returns": [["@B_android#app#PendingIntent_E@", "The obtained PendingIntent"]], "Parameters": [["int", "int: Private request code for the sender"], ["int", "int: May be @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, or any of the flags supported by @B_android#content#Intent#fillIn_E@ to control which unspecified parts of the intent that can be supplied when the actual send happens."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a @B_android#app#PendingIntent_E@ for launching the task constructed by this builder so far.", "history": "added in API level 16", "FullName": "public PendingIntent getPendingIntent (int requestCode, int flags)"}, "getPendingIntent(int,int,android.os.Bundle)": {"Returns": [["@B_android#app#PendingIntent_E@", "The obtained PendingIntent"]], "Parameters": [["int", "int: Private request code for the sender"], ["int", "int: May be @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, or any of the flags supported by @B_android#content#Intent#fillIn_E@ to control which unspecified parts of the intent that can be supplied when the actual send happens. Value is either 0 or a combination of @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, @B_android#app#PendingIntent#FLAG_IMMUTABLE_E@, @B_android#content#Intent#FILL_IN_ACTION_E@, @B_android#content#Intent#FILL_IN_DATA_E@, @B_android#content#Intent#FILL_IN_CATEGORIES_E@, @B_android#content#Intent#FILL_IN_COMPONENT_E@, @B_android#content#Intent#FILL_IN_PACKAGE_E@, @B_android#content#Intent#FILL_IN_SOURCE_BOUNDS_E@, @B_android#content#Intent#FILL_IN_SELECTOR_E@, and @B_android#content#Intent#FILL_IN_CLIP_DATA_E@"], ["@B_android#os#Bundle_E@", "Bundle: Additional options for how the Activity should be started. See @B_android#content#Context#startActivity_E@ Context.startActivity(Intent, Bundle)} for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a @B_android#app#PendingIntent_E@ for launching the task constructed by this builder so far.", "history": "Added in API level 16", "FullName": "public PendingIntent getPendingIntent (int requestCode, int flags, Bundle options)"}, "addParentStack(android.content.ComponentName)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "This TaskStackBuilder for method chaining"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: Must specify an Activity component. All parents of this activity will be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the activity parent chain as specified by the @B_android#R#attr#parentActivityName_E@ attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder.", "history": "Added in API level 16", "FullName": "public TaskStackBuilder addParentStack (ComponentName sourceActivityName)"}, "startActivities()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start the task stack constructed by this builder.", "history": "Added in API level 16", "FullName": "public void startActivities ()"}, "create(android.content.Context)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "A new TaskStackBuilder"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context that will launch the new task stack or generate a PendingIntent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a new TaskStackBuilder for launching a fresh task stack consisting of a series of activities.", "history": "Added in API level 16", "FullName": "public static TaskStackBuilder create (Context context)"}, "addNextIntentWithParentStack(android.content.Intent)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "This TaskStackBuilder for method chaining."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: Intent for the topmost Activity in the synthesized task stack. Its chain of parents as specified in the manifest will be added."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new Intent with the resolved chain of parents for the target activity to the task stack. This is equivalent to calling @B_android#app#TaskStackBuilder#addParentStack_E@ with the resolved ComponentName of nextIntent (if it can be resolved), followed by @B_android#app#TaskStackBuilder#addNextIntent_E@ with nextIntent.", "history": "Added in API level 16", "FullName": "public TaskStackBuilder addNextIntentWithParentStack (Intent nextIntent)"}, "getPendingIntent(int, int, android.os.Bundle)": {"Returns": [["@B_android#app#PendingIntent_E@", "The obtained PendingIntent"]], "Parameters": [["int", "int: Private request code for the sender"], ["int", "int: May be @B_android#app#PendingIntent#FLAG_ONE_SHOT_E@, @B_android#app#PendingIntent#FLAG_NO_CREATE_E@, @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@, @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@, or any of the flags supported by @B_android#content#Intent#fillIn_E@ to control which unspecified parts of the intent that can be supplied when the actual send happens."], ["@B_android#os#Bundle_E@", "Bundle: Additional options for how the Activity should be started. See @B_android#content#Context#startActivity_E@ Context.startActivity(Intent, Bundle)} for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a @B_android#app#PendingIntent_E@ for launching the task constructed by this builder so far.", "history": "added in API level 16", "FullName": "public PendingIntent getPendingIntent (int requestCode, int flags, Bundle options)"}, "getIntents()": {"Returns": [["@B_android#content#Intent_E@", "An array containing the intents added to this builder. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array containing the intents added to this builder. The intent at the root of the task stack will appear as the first item in the array and the intent at the top of the stack will appear as the last item.", "history": "Added in API level 16", "FullName": "public Intent[] getIntents ()"}, "editIntentAt(int)": {"Returns": [["@B_android#content#Intent_E@", "the intent at position index"]], "Parameters": [["int", "int: Index from 0-getIntentCount()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the intent at the specified index for modification. Useful if you need to modify the flags or extras of an intent that was previously added, for example with @B_android#app#TaskStackBuilder#addParentStack_E@.", "history": "Added in API level 16", "FullName": "public Intent editIntentAt (int index)"}, "startActivities(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Additional options for how the Activity should be started. See @B_android#content#Context#startActivity_E@ Context.startActivity(Intent, Bundle)} for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start the task stack constructed by this builder.", "history": "Added in API level 16", "FullName": "public void startActivities (Bundle options)"}, "addParentStack(android.app.Activity)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "This TaskStackBuilder for method chaining"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: All parents of this activity will be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the activity parent chain as specified by the @B_android#app#Activity#getParentActivityIntent_E@ method of the activity specified and the @B_android#R#attr#parentActivityName_E@ attributes of each successive activity (or activity-alias) element in the application's manifest to the task stack builder.", "history": "Added in API level 16", "FullName": "public TaskStackBuilder addParentStack (Activity sourceActivity)"}, "getIntentCount()": {"Returns": [["int", "the number of intents added so far."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public int getIntentCount ()"}, "addNextIntent(android.content.Intent)": {"Returns": [["@B_android#app#TaskStackBuilder_E@", "This TaskStackBuilder for method chaining"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: Intent for the next Activity in the synthesized task stack"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new Intent to the task stack. The most recently added Intent will invoke the Activity at the top of the final task stack.", "history": "Added in API level 16", "FullName": "public TaskStackBuilder addNextIntent (Intent nextIntent)"}}, "Inheritance": [], "ClassName": "android.app.TaskStackBuilder", "ClassDesc": "Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer. In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the \"recents\" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. When crossing from one task stack to another post-Android 3.0, the application should synthesize a back stack/history for the new task so that the user may navigate out of the new task and back to the Launcher by repeated presses of the back key. Back key presses should not navigate across task stacks. TaskStackBuilder provides a way to obey the correct conventions around cross-task navigation."}