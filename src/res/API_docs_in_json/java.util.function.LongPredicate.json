{"Functions": {"and(java.util.function.LongPredicate)": {"Returns": [["@B_java#util#function#LongPredicate_E@", "a composed predicate that represents the short-circuiting logical AND of this predicate and the other predicate"]], "Parameters": [["@B_java#util#function#LongPredicate_E@", "LongPredicate: a predicate that will be logically-ANDed with this predicate"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another. When evaluating the composed predicate, if this predicate is false, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.", "history": "Added in API level 24", "FullName": "public LongPredicate and (LongPredicate other)"}, "or(java.util.function.LongPredicate)": {"Returns": [["@B_java#util#function#LongPredicate_E@", "a composed predicate that represents the short-circuiting logical OR of this predicate and the other predicate"]], "Parameters": [["@B_java#util#function#LongPredicate_E@", "LongPredicate: a predicate that will be logically-ORed with this predicate"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another. When evaluating the composed predicate, if this predicate is true, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.", "history": "Added in API level 24", "FullName": "public LongPredicate or (LongPredicate other)"}, "negate()": {"Returns": [["@B_java#util#function#LongPredicate_E@", "a predicate that represents the logical negation of this predicate"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a predicate that represents the logical negation of this predicate.", "history": "Added in API level 24", "FullName": "public LongPredicate negate ()"}, "test(long)": {"Returns": [["boolean", "true if the input argument matches the predicate, otherwise false"]], "Parameters": [["long", "long: the input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Evaluates this predicate on the given argument.", "history": "Added in API level 24", "FullName": "public abstract boolean test (long value)"}}, "Inheritance": [], "ClassName": "java.util.function.LongPredicate", "ClassDesc": "Represents a predicate (boolean-valued function) of one long-valued argument. This is the long-consuming primitive type specialization of @B_java#util#function#Predicate_E@. This is a @B_java#util#function#LongPredicate#test_E@."}