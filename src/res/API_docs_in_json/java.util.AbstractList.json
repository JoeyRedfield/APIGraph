{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). This implementation always throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public void add (int index, E element)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). This implementation always throws an UnsupportedOperationException.", "history": "added in API level 1", "FullName": "public void add (int index, E element)"}, "listIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#AbstractList#listIterator_E@"], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence). This implementation returns listIterator(0).", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the clear operation is not supported by this list"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this list (optional operation). The list will be empty after this call returns. This implementation calls removeRange(0, size()). Note that this implementation throws an UnsupportedOperationException unless remove(int index) or removeRange(int fromIndex, int toIndex) is overridden.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this element prevents it from being added to this list"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added. This implementation calls add(size(), e). Note that this implementation throws an UnsupportedOperationException unless @B_java#util#AbstractList#add_E@ is overridden.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using add(int, E). Many implementations will override this method for efficiency. Note that this implementation throws an UnsupportedOperationException unless @B_java#util#AbstractList#add_E@ is overridden.", "history": "Added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list in proper sequence. This implementation returns a straightforward implementation of the iterator interface, relying on the backing list's size(), get(int), and remove(int) methods. Note that the iterator returned by this method will throw an @B_java#lang#UnsupportedOperationException_E@ in response to its remove method unless the list's remove(int) method is overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) @B_java#util#AbstractList#modCount_E@ field.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this list"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are e1 and e2 are (e1==null ? e2==null : e1.equals(e2)).) In other words, two lists are defined to be equal if they contain the same elements in the same order. This implementation first checks if the specified object is this list. If so, it returns true; if not, it checks if the specified object is a list. If not, it returns false; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns false, this method returns false. If either iterator runs out of elements before the other it returns false (as the lists are of unequal length); otherwise it returns true when the iterations complete.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.) This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using add(int, E). Many implementations will override this method for efficiency. Note that this implementation throws an UnsupportedOperationException unless @B_java#util#AbstractList#add_E@ is overridden.", "history": "added in API level 1", "FullName": "public boolean addAll (int index, Collection<? extends E> c)"}, "remove(int)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. This implementation always throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public E remove (int index)"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index This implementation first gets a list iterator (with listIterator()). Then, it iterates over the list until the specified element is found or the end of the list is reached.", "history": "Added in API level 1", "FullName": "public int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation). This implementation always throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public E set (int index, E element)"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list iterator (by a call to @B_java#util#ListIterator#next_E@)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to @B_java#util#ListIterator#next_E@. An initial call to @B_java#util#ListIterator#previous_E@ would return the element with the specified index minus one. This implementation returns a straightforward implementation of the ListIterator interface that extends the implementation of the Iterator interface returned by the iterator() method. The ListIterator implementation relies on the backing list's get(int), set(int, E), add(int, E) and remove(int) methods. Note that the list iterator returned by this implementation will throw an @B_java#lang#UnsupportedOperationException_E@ in response to its remove, set and add methods unless the list's remove(int), set(int, E), and add(int, E) methods are overridden. This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) @B_java#util#AbstractList#modCount_E@ field.", "history": "Added in API level 1", "FullName": "public ListIterator<E> listIterator (int index)"}, "hashCode()": {"Returns": [["int", "the hash code value for this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this list. This implementation uses exactly the code that is used to define the list hash function in the documentation for the @B_java#util#List#hashCode_E@ method.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "removeRange(int,int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) This method is called by the clear operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can clear operation on this list and its subLists. This implementation gets a list iterator positioned before fromIndex, and repeatedly calls ListIterator.next followed by ListIterator.remove until the entire range has been removed.", "history": "Added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list.", "history": "Added in API level 1", "FullName": "public abstract E get (int index)"}, "subList(int, int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if an endpoint index value is out of range (fromIndex < 0 || toIndex > size)"], ["@B_java#lang#IllegalArgumentException_E@", "if the endpoint indices are out of order (fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is This implementation returns a list that subclasses AbstractList. The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected modCount value of the backing list. There are two variants of the subclass, one of which implements RandomAccess. If this list implements RandomAccess the returned list will be an instance of the subclass that implements RandomAccess. The subclass's set(int, E), get(int), add(int, E), remove(int), addAll(int, Collection) and removeRange(int, int) methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The addAll(Collection c) method merely returns addAll(size, c). The listIterator(int) method returns a \"wrapper object\" over a list iterator on the backing list, which is created with the corresponding method on the backing list. The iterator method merely returns listIterator(), and the size method merely returns the subclass's size field. All methods first check to see if the actual modCount of the backing list is equal to its expected value, and throw a ConcurrentModificationException if it is not.", "history": "added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "removeRange(int, int)": {"Returns": [], "Parameters": [["int", "int: index of first element to be removed"], ["int", "int: index after last element to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) This method is called by the clear operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can clear operation on this list and its subLists. This implementation gets a list iterator positioned before fromIndex, and repeatedly calls ListIterator.next followed by ListIterator.remove until the entire range has been removed.", "history": "added in API level 1", "FullName": "protected void removeRange (int fromIndex, int toIndex)"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation). This implementation always throws an UnsupportedOperationException.", "history": "added in API level 1", "FullName": "public E set (int index, E element)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index This implementation first gets a list iterator that points to the end of the list (with listIterator(size())). Then, it iterates backwards over the list until the specified element is found, or the beginning of the list is reached.", "history": "Added in API level 1", "FullName": "public int lastIndexOf (Object o)"}, "subList(int,int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if an endpoint index value is out of range (fromIndex < 0 || toIndex > size)"], ["@B_java#lang#IllegalArgumentException_E@", "if the endpoint indices are out of order (fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is This implementation returns a list that subclasses AbstractList. The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected modCount value of the backing list. There are two variants of the subclass, one of which implements RandomAccess. If this list implements RandomAccess the returned list will be an instance of the subclass that implements RandomAccess. The subclass's set(int, E), get(int), add(int, E), remove(int), addAll(int, Collection) and removeRange(int, int) methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The addAll(Collection c) method merely returns addAll(size, c). The listIterator(int) method returns a \"wrapper object\" over a list iterator on the backing list, which is created with the corresponding method on the backing list. The iterator method merely returns listIterator(), and the size method merely returns the subclass's size field. All methods first check to see if the actual modCount of the backing list is equal to its expected value, and throw a ConcurrentModificationException if it is not.", "history": "Added in API level 1", "FullName": "public List<E> subList (int fromIndex, int toIndex)"}, "AbstractList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "protected AbstractList ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@"], "ClassName": "java.util.AbstractList<E>", "ClassDesc": "This class provides a skeletal implementation of the @B_java#util#List_E@ interface to minimize the effort required to implement this interface backed by a \"random access\" data store (such as an array). For sequential access data (such as a linked list), @B_java#util#AbstractSequentialList_E@ should be used in preference to this class. To implement an unmodifiable list, the programmer needs only to extend this class and provide implementations for the @B_java#util#AbstractList#get_E@ and @B_java#util#List#size_E@ methods. To implement a modifiable list, the programmer must additionally override the @B_java#util#AbstractList#set_E@ method (which otherwise throws an UnsupportedOperationException). If the list is variable-size the programmer must additionally override the @B_java#util#AbstractList#add_E@ and @B_java#util#AbstractList#remove_E@ methods. The programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the @B_java#util#Collection_E@ interface specification. Unlike the other abstract collection implementations, the programmer does @B_java#util#AbstractList#get_E@, @B_java#util#AbstractList#set_E@, @B_java#util#AbstractList#add_E@ and @B_java#util#AbstractList#remove_E@. The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation. This class is a member of the"}