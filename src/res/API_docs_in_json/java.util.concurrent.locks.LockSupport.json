{"Functions": {"parkUntil(java.lang.Object, long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the synchronization object responsible for this thread parking"], ["long", "long: the absolute time, in milliseconds from the Epoch, to wait until"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified deadline passes; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.", "history": "added in API level 9", "FullName": "public static void parkUntil (Object blocker, long deadline)"}, "parkNanos(java.lang.Object,long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the synchronization object responsible for this thread parking"], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified waiting time elapses; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.", "history": "Added in API level 9", "FullName": "public static void parkNanos (Object blocker, long nanos)"}, "park()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.", "history": "Added in API level 1", "FullName": "public static void park ()"}, "parkNanos(java.lang.Object, long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the synchronization object responsible for this thread parking"], ["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified waiting time elapses; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.", "history": "added in API level 9", "FullName": "public static void parkNanos (Object blocker, long nanos)"}, "parkUntil(long)": {"Returns": [], "Parameters": [["long", "long: the absolute time, in milliseconds from the Epoch, to wait until"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified deadline passes; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.", "history": "Added in API level 1", "FullName": "public static void parkUntil (long deadline)"}, "getBlocker(java.lang.Thread)": {"Returns": [["@B_java#lang#Object_E@", "the blocker"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked. The value returned is just a momentary snapshot -- the thread may have since unblocked or blocked on a different blocker object.", "history": "Added in API level 9", "FullName": "public static Object getBlocker (Thread t)"}, "parkUntil(java.lang.Object,long)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the synchronization object responsible for this thread parking"], ["long", "long: the absolute time, in milliseconds from the Epoch, to wait until"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified deadline passes; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the current time upon return.", "history": "Added in API level 9", "FullName": "public static void parkUntil (Object blocker, long deadline)"}, "unpark(java.lang.Thread)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread to unpark, or null, in which case this operation has no effect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes available the permit for the given thread, if it was not already available. If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started.", "history": "Added in API level 1", "FullName": "public static void unpark (Thread thread)"}, "park(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the synchronization object responsible for this thread parking"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread upon return.", "history": "Added in API level 9", "FullName": "public static void park (Object blocker)"}, "parkNanos(long)": {"Returns": [], "Parameters": [["long", "long: the maximum number of nanoseconds to wait"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available. If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes @B_java#util#concurrent#locks#LockSupport#unpark_E@ with the current thread as the target; or Some other thread The specified waiting time elapses; or The call spuriously (that is, for no reason) returns. This method does not report which of these caused the method to return. Callers should re-check the conditions which caused the thread to park in the first place. Callers may also determine, for example, the interrupt status of the thread, or the elapsed time upon return.", "history": "Added in API level 1", "FullName": "public static void parkNanos (long nanos)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.LockSupport", "ClassDesc": "Basic thread blocking primitives for creating locks and other synchronization classes. This class associates, with each thread that uses it, a permit (in the sense of the @B_java#util#concurrent#Semaphore_E@ class). A call to park will return immediately if the permit is available, consuming it in the process; otherwise it may block. A call to unpark makes the permit available, if it was not already available. (Unlike with Semaphores though, permits do not accumulate. There is at most one.) Reliable usage requires the use of volatile (or atomic) variables to control when to park or unpark. Orderings of calls to these methods are maintained with respect to volatile variable accesses, but not necessarily non-volatile variable accesses. Methods park and unpark provide efficient means of blocking and unblocking threads that do not encounter the problems that cause the deprecated methods Thread.suspend and Thread.resume to be unusable for such purposes: Races between one thread invoking park and another thread trying to unpark it will preserve liveness, due to the permit. Additionally, park will return if the caller's thread was interrupted, and timeout versions are supported. The park method may also return at any other time, for \"no reason\", so in general must be invoked within a loop that rechecks conditions upon return. In this sense park serves as an optimization of a \"busy wait\" that does not waste as much time spinning, but must be paired with an unpark to be effective. The three forms of park each also support a blocker object parameter. This object is recorded while the thread is blocked to permit monitoring and diagnostic tools to identify the reasons that threads are blocked. (Such tools may access blockers using method @B_java#util#concurrent#locks#LockSupport#getBlocker_E@.) The use of these forms rather than the original forms without this parameter is strongly encouraged. The normal argument to supply as a blocker within a lock implementation is this. These methods are designed to be used as tools for creating higher-level synchronization utilities, and are not in themselves useful for most concurrency control applications. The park method is designed for use only in constructions of the form: park, entail locking or blocking. Because only one permit is associated with each thread, any intermediary uses of park, including implicitly via class loading, could lead to an unresponsive thread (a \"lost unpark\")."}