{"Functions": {"removeIf(java.util.function.Predicate<? super E>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified filter is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if elements cannot be removed from this collection. Implementations may throw this exception if a matching element cannot be removed or if, in general, removal is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public abstract Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "isEmpty()": {"Returns": [["boolean", "true if this collection contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean isEmpty ()"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "true if any elements were removed"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate: a predicate which returns true for elements to be removed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified filter is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if elements cannot be removed from this collection. Implementations may throw this exception if a matching element cannot be removed or if, in general, removal is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "add(E)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["E", "E: element whose presence in this collection is to be ensured"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this collection"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this collection"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this collection does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the element prevents it from being added to this collection"], ["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to insertion restrictions"]], "SeeAlso": [], "Permissions": [], "Description": "Ensures that this collection contains the specified element (optional operation). Returns Collections that support this operation may place limitations on what elements may be added to this collection. In particular, some collections will refuse to add If a collection refuses to add a particular element for any reason other than that it already contains the element, it", "history": "Added in API level 1", "FullName": "public abstract boolean add (E e)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains a null element and this collection does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this collection"], ["@B_java#lang#IllegalStateException_E@", "if not all the elements can be added at this time due to insertion restrictions"]], "SeeAlso": ["@B_java#util#Collection#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.)", "history": "added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this collection, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this collection does not permit null elements (optional)"], ["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element", "history": "Added in API level 1", "FullName": "public abstract boolean remove (Object o)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the retainAll operation is not supported by this collection"], ["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in this collection are incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this collection contains one or more null elements and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Collection#remove_E@", "@B_java#util#Collection#contains_E@"], "Permissions": [], "Description": "Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection.", "history": "Added in API level 1", "FullName": "public abstract boolean retainAll (Collection<?> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the removeAll method is not supported by this collection"], ["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in this collection are incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this collection contains one or more null elements and the specified collection does not support null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Collection#remove_E@", "@B_java#util#Collection#contains_E@"], "Permissions": [], "Description": "Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection.", "history": "Added in API level 1", "FullName": "public abstract boolean removeAll (Collection<?> c)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this collection"]], "Parameters": [["T[]", "T: the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this collection"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#Collection#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose", "history": "Added in API level 1", "FullName": "public abstract T[] toArray (T[] a)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the clear operation is not supported by this collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this collection (optional operation). The collection will be empty after this method returns.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "stream()": {"Returns": [["@B_java#util#stream#Stream_E@", "a sequential Stream over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential Stream with this collection as its source. This method should be overridden when the @B_java#util#Collection#spliterator_E@ method cannot return a spliterator that is IMMUTABLE, CONCURRENT, or late-binding. (See @B_java#util#Collection#spliterator_E@ for details.)", "history": "Added in API level 24", "FullName": "public Stream<E> stream ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_java#util#Spliterator_E@ over the elements in this collection. Implementations should document characteristic values reported by the spliterator. Such characteristic values are not required to be reported if the spliterator reports @B_java#util#Spliterator#SIZED_E@ and this collection contains no elements. The default implementation should be overridden by subclasses that can return a more efficient spliterator. In order to preserve expected laziness behavior for the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@} methods, spliterators should either have the characteristic of IMMUTABLE or CONCURRENT, or be . If none of these is practical, the overriding class should describe the spliterator's documented policy of binding and structural interference, and should override the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@ methods to create streams using a Supplier of the spliterator, as in: These requirements ensure that streams produced by the @B_java#util#Collection#stream_E@ and @B_java#util#Collection#parallelStream_E@ methods will reflect the contents of the collection as of initiation of the terminal stream operation.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "parallelStream()": {"Returns": [["@B_java#util#stream#Stream_E@", "a possibly parallel Stream over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a possibly parallel Stream with this collection as its source. It is allowable for this method to return a sequential stream. This method should be overridden when the @B_java#util#Collection#spliterator_E@ method cannot return a spliterator that is IMMUTABLE, CONCURRENT, or late-binding. (See @B_java#util#Collection#spliterator_E@ for details.)", "history": "Added in API level 24", "FullName": "public Stream<E> parallelStream ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee).", "history": "Added in API level 1", "FullName": "public abstract Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this collection"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this collection"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#Set#equals_E@", "@B_java#util#List#equals_E@"], "Permissions": [], "Description": "Compares the specified object with this collection for equality. While the The general contract for the", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object o)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains a null element and this collection does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this collection"], ["@B_java#lang#IllegalStateException_E@", "if not all the elements can be added at this time due to insertion restrictions"]], "SeeAlso": ["@B_java#util#Collection#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.)", "history": "Added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection contains all of the elements in the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this collection"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in the specified collection are incompatible with this collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this collection does not permit null elements (optional), or if the specified collection is null."]], "SeeAlso": ["@B_java#util#Collection#contains_E@"], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean containsAll (Collection<?> c)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this collection contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this collection is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this collection does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean contains (Object o)"}, "hashCode()": {"Returns": [["int", "the hash code value for this collection"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@", "@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this collection. While the", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.Collection<E>", "ClassDesc": "The root interface in the All general-purpose The \"destructive\" methods contained in this interface, that is, the methods that modify the collection on which they operate, are specified to throw @B_java#util#Collection#addAll_E@ method on an unmodifiable collection may, but is not required to, throw the exception if the collection to be added is empty. It is up to each collection to determine its own synchronization policy. In the absence of a stronger guarantee by the implementation, undefined behavior may result from the invocation of any method on a collection that is being mutated by another thread; this includes direct invocations, passing the collection to a method that might perform invocations, and using an existing iterator to examine the collection. Many methods in Collections Framework interfaces are defined in terms of the @B_java#lang#Object#equals_E@ method. For example, the specification for the @B_java#util#Collection#contains_E@ method says: \"returns @B_java#lang#Object#hashCode_E@ specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying @B_java#lang#Object_E@ methods wherever the implementor deems it appropriate. Some collection operations which perform recursive traversal of the collection may fail with an exception for self-referential instances where the collection directly or indirectly contains itself. This includes the clone(), equals(), hashCode() and toString() methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so. This interface is a member of the"}