{"Functions": {"CarrierService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public CarrierService ()"}, "onLoadConfig(android.service.carrier.CarrierIdentifier)": {"Returns": [["@B_android#os#PersistableBundle_E@", "a @B_android#os#PersistableBundle_E@ object containing the configuration or null if default values should be used."]], "Parameters": [["@B_android#service#carrier#CarrierIdentifier_E@", "CarrierIdentifier: contains details about the current carrier that can be used do decide what configuration values to return. Instead of using details like MCCMNC to decide current carrier, it also contains subscription carrier id @B_android#telephony#TelephonyManager#getSimCarrierId_E@, a platform-wide unique identifier for each carrier, CarrierConfigService can directly use carrier id as the key to look up the carrier info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this method to set carrier configuration. This method will be called by telephony services to get carrier-specific configuration values. The returned config will be saved by the system until, This method should not block for a long time. If expensive operations (e.g. network access) are required, this method can schedule the work and return null. Then, use @B_android#telephony#CarrierConfigManager#notifyConfigChangedForSubId_E@ to trigger a reload when the config is ready. Implementations should use the keys defined in @B_android#telephony#CarrierConfigManager_E@. Any configuration values not set in the returned @B_android#os#PersistableBundle_E@ may be overridden by the system's default configuration service.", "history": "Added in API level 23", "FullName": "public abstract PersistableBundle onLoadConfig (CarrierIdentifier id)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If overriding this method, call through to the super method for any unknown actions. Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in If you override this method you must call through to the superclass implementation.", "history": "Added in API level 23", "FullName": "public IBinder onBind (Intent intent)"}, "notifyCarrierNetworkChange(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the carrier network change is or shortly will be active. Set this value to true to begin showing alternative UI and false to stop."]], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@"], "Permissions": [], "Description": "Informs the system of an intentional upcoming carrier network change by a carrier app. This call is optional and is only used to allow the system to provide alternative UI while telephony is performing an action that may result in intentional, temporary network lack of connectivity. Based on the active parameter passed in, this method will either show or hide the alternative UI. There is no timeout associated with showing this UX, so a carrier app must be sure to call with active set to false sometime after calling with it set to true. Requires Permission: calling app has carrier privileges.", "history": "Added in API level 23", "FullName": "public final void notifyCarrierNetworkChange (boolean active)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.carrier.CarrierService", "ClassDesc": "A service that exposes carrier-specific functionality to the system. To extend this class, you must declare the service in your manifest file to require the @B_android#Manifest#permission#BIND_CARRIER_SERVICES_E@ permission and include an intent filter with the @B_android#service#carrier#CarrierService#CARRIER_SERVICE_INTERFACE_E@. If the service should have a long-lived binding, set android.service.carrier.LONG_LIVED_BINDING to true in the service's metadata. For example:"}