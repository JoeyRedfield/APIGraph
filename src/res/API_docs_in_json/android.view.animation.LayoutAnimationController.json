{"Functions": {"getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters)": {"Returns": [["int", "a transformed index"]], "Parameters": [["@B_android#view#animation#LayoutAnimationController#AnimationParameters_E@", "LayoutAnimationController.AnimationParameters: the animation parameters containing the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Transforms the index stored in @B_android#view#animation#LayoutAnimationController#AnimationParameters_E@ by the order returned by @B_android#view#animation#LayoutAnimationController#getOrder_E@. Subclasses should override this method to provide additional support for other types of ordering. This method should be invoked by @B_android#view#animation#LayoutAnimationController#getDelayForView_E@ prior to any computation.", "history": "Added in API level 1", "FullName": "protected int getTransformedIndex (LayoutAnimationController.AnimationParameters params)"}, "setInterpolator(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context from which the interpolator must be inflated"], ["int", "int: the resource identifier of the interpolator"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getInterpolator_E@", "@B_android#view#animation#LayoutAnimationController#setInterpolator_E@"], "Permissions": [], "Description": "Sets the interpolator used to interpolate the delays between the children.", "history": "added in API level 1", "FullName": "public void setInterpolator (Context context, int resourceID)"}, "setInterpolator(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context from which the interpolator must be inflated"], ["int", "int: the resource identifier of the interpolator"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getInterpolator_E@", "@B_android#view#animation#LayoutAnimationController#setInterpolator_E@"], "Permissions": [], "Description": "Sets the interpolator used to interpolate the delays between the children.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Context context, int resourceID)"}, "getInterpolator()": {"Returns": [["@B_android#view#animation#Interpolator_E@", "an @B_android#view#animation#Interpolator_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the interpolator used to interpolate the delays between the children.", "history": "Added in API level 1", "FullName": "public Interpolator getInterpolator ()"}, "LayoutAnimationController(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the Context the view group is running in, through which it can access the resources"], ["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes of the XML tag that is inflating the layout animation controller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new layout animation controller from external resources.", "history": "Added in API level 1", "FullName": "public LayoutAnimationController (Context context, AttributeSet attrs)"}, "getOrder()": {"Returns": [["int", "one of @B_android#view#animation#LayoutAnimationController#ORDER_NORMAL_E@, @B_android#view#animation#LayoutAnimationController#ORDER_REVERSE_E@ or @B_android#view#animation#LayoutAnimationController#ORDER_RANDOM_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the order used to compute the delay of each child's animation.", "history": "Added in API level 1", "FullName": "public int getOrder ()"}, "setAnimation(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context from which the animation must be inflated"], ["int", "int: the resource identifier of the animation"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#setAnimation_E@", "@B_android#view#animation#LayoutAnimationController#getAnimation_E@"], "Permissions": [], "Description": "Sets the animation to be run on each child of the view group on which this layout animation controller is .", "history": "Added in API level 1", "FullName": "public void setAnimation (Context context, int resourceID)"}, "LayoutAnimationController(android.view.animation.Animation,float)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: the animation to use on each child of the view group"], ["float", "float: the delay by which each child's animation must be offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new layout animation controller with the specified delay and the specified animation.", "history": "Added in API level 1", "FullName": "public LayoutAnimationController (Animation animation, float delay)"}, "getAnimation()": {"Returns": [["@B_android#view#animation#Animation_E@", "an @B_android#view#animation#Animation_E@ instance"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#setAnimation_E@"], "Permissions": [], "Description": "Returns the animation applied to each child of the view group on which this controller is set.", "history": "Added in API level 1", "FullName": "public Animation getAnimation ()"}, "setAnimation(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the context from which the animation must be inflated"], ["int", "int: the resource identifier of the animation"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#setAnimation_E@", "@B_android#view#animation#LayoutAnimationController#getAnimation_E@"], "Permissions": [], "Description": "Sets the animation to be run on each child of the view group on which this layout animation controller is .", "history": "added in API level 1", "FullName": "public void setAnimation (Context context, int resourceID)"}, "willOverlap()": {"Returns": [["boolean", "true if animations will overlap, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether two children's animations will overlap. Animations overlap when the delay is lower than 100% (or 1.0).", "history": "Added in API level 1", "FullName": "public boolean willOverlap ()"}, "setAnimation(android.view.animation.Animation)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: the animation to run on each child of the view group"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#setAnimation_E@", "@B_android#view#animation#LayoutAnimationController#getAnimation_E@"], "Permissions": [], "Description": "Sets the animation to be run on each child of the view group on which this layout animation controller is .", "history": "Added in API level 1", "FullName": "public void setAnimation (Animation animation)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the animation.", "history": "Added in API level 1", "FullName": "public void start ()"}, "setOrder(int)": {"Returns": [], "Parameters": [["int", "int: one of @B_android#view#animation#LayoutAnimationController#ORDER_NORMAL_E@, @B_android#view#animation#LayoutAnimationController#ORDER_REVERSE_E@ or @B_android#view#animation#LayoutAnimationController#ORDER_RANDOM_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the order used to compute the delay of each child's animation.", "history": "Added in API level 1", "FullName": "public void setOrder (int order)"}, "setDelay(float)": {"Returns": [], "Parameters": [["float", "float: a fraction of the animation duration"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getDelay_E@"], "Permissions": [], "Description": "Sets the delay, as a fraction of the animation duration, by which the children's animations are offset. The general formula is:", "history": "Added in API level 1", "FullName": "public void setDelay (float delay)"}, "getAnimationForView(android.view.View)": {"Returns": [["@B_android#view#animation#Animation_E@", "an animation delayed by the number of milliseconds returned by @B_android#view#animation#LayoutAnimationController#getDelayForView_E@"]], "Parameters": [["@B_android#view#View_E@", "View: the view to animate"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getDelay_E@", "@B_android#view#animation#LayoutAnimationController#setDelay_E@", "@B_android#view#animation#LayoutAnimationController#getDelayForView_E@"], "Permissions": [], "Description": "Returns the animation to be applied to the specified view. The returned animation is delayed by an offset computed according to the information provided by @B_android#view#animation#LayoutAnimationController#AnimationParameters_E@. This method is called by view groups to obtain the animation to set on a specific child.", "history": "Added in API level 1", "FullName": "public final Animation getAnimationForView (View view)"}, "isDone()": {"Returns": [["boolean", "true if all of the children's animations are over, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the layout animation is over or not. A layout animation is considered done when the animation with the longest delay is done.", "history": "Added in API level 1", "FullName": "public boolean isDone ()"}, "getDelay()": {"Returns": [["float", "a fraction of the animation duration"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#setDelay_E@"], "Permissions": [], "Description": "Returns the delay by which the children's animation are offset. The delay is expressed as a fraction of the animation duration.", "history": "Added in API level 1", "FullName": "public float getDelay ()"}, "LayoutAnimationController(android.view.animation.Animation)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: the animation to use on each child of the view group"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new layout animation controller with a delay of 50% and the specified animation.", "history": "Added in API level 1", "FullName": "public LayoutAnimationController (Animation animation)"}, "setInterpolator(android.view.animation.Interpolator)": {"Returns": [], "Parameters": [["@B_android#view#animation#Interpolator_E@", "Interpolator: the interpolator"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getInterpolator_E@", "@B_android#view#animation#LayoutAnimationController#setInterpolator_E@"], "Permissions": [], "Description": "Sets the interpolator used to interpolate the delays between the children.", "history": "Added in API level 1", "FullName": "public void setInterpolator (Interpolator interpolator)"}, "getDelayForView(android.view.View)": {"Returns": [["long", "a delay in milliseconds"]], "Parameters": [["@B_android#view#View_E@", "View: the view for which to obtain the animation's delay"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#LayoutAnimationController#getAnimationForView_E@", "@B_android#view#animation#LayoutAnimationController#getDelay_E@", "@B_android#view#animation#LayoutAnimationController#getTransformedIndex_E@", "@B_android#view#ViewGroup#LayoutParams_E@"], "Permissions": [], "Description": "Returns the amount of milliseconds by which the specified view's animation must be delayed or offset. Subclasses should override this method to return a suitable value. This implementation returns child animation delay milliseconds where: @B_android#view#animation#LayoutAnimationController#AnimationParameters_E@ found in the view's @B_android#view#ViewGroup#LayoutParams_E@.", "history": "Added in API level 1", "FullName": "protected long getDelayForView (View view)"}}, "Inheritance": [], "ClassName": "android.view.animation.LayoutAnimationController", "ClassDesc": "A layout animation controller is used to animated a layout's, or a view group's, children. Each child uses the same animation but for every one of them, the animation starts at a different time. A layout animation controller is used by @B_android#view#ViewGroup_E@ to compute the delay by which each child's animation start must be offset. The delay is computed by using characteristics of each child, like its index in the view group. This standard implementation computes the delay by multiplying a fixed amount of miliseconds by the index of the child in its parent view group. Subclasses are supposed to override @B_android#view#animation#LayoutAnimationController#getDelayForView_E@ to implement a different way of computing the delay. For instance, a @B_android#view#animation#GridLayoutAnimationController_E@ will compute the delay based on the column and row indices of the child in its parent view group. Information used to compute the animation delay of each child are stored in an instance of @B_android#view#animation#LayoutAnimationController#AnimationParameters_E@, itself stored in the @B_android#view#ViewGroup#LayoutParams_E@ of the view."}