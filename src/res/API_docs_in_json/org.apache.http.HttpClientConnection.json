{"Functions": {"isResponseAvailable(int)": {"Returns": [["", "true if data is available; false if there was no data available even after waiting for timeout milliseconds."]], "Parameters": [["int", "the maximum time in milliseconds to wait for data"]], "Throws": [["@B_java#io#IOException_E@", "if an error happens on the connection"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if response data is available from the connection. May wait for the specified time until some data becomes available. Note that some implementations may completely ignore the timeout parameter.", "history": "Added in API level 1", "FullName": "public abstract boolean isResponseAvailable (int timeout)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes out all pending buffered data over the open connection.", "history": "Added in API level 1", "FullName": "public abstract void flush ()"}, "receiveResponseEntity(org.apache.http.HttpResponse)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "the response to attach the entity to"]], "Throws": [["", "HttpException"], ["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#HttpException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the next response entity available from this connection and attaches it to an existing HttpResponse object.", "history": "Added in API level 1", "FullName": "public abstract void receiveResponseEntity (HttpResponse response)"}, "sendRequestHeader(org.apache.http.HttpRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpRequest_E@", "the request whose headers to send."]], "Throws": [["", "HttpException"], ["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#HttpException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request line and all headers over the connection.", "history": "Added in API level 1", "FullName": "public abstract void sendRequestHeader (HttpRequest request)"}, "sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpEntityEnclosingRequest_E@", "the request whose entity to send."]], "Throws": [["", "HttpException"], ["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#HttpException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request entity over the connection.", "history": "Added in API level 1", "FullName": "public abstract void sendRequestEntity (HttpEntityEnclosingRequest request)"}, "receiveResponseHeader()": {"Returns": [["", "a new HttpResponse object with status line and headers initialized."]], "Parameters": [], "Throws": [["", "HttpException"], ["@B_java#io#IOException_E@", ""], ["@B_org#apache#http#HttpException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the request line and headers of the next response available from this connection. The caller should examine the HttpResponse object to find out if it should try to receive a response entity as well.", "history": "Added in API level 1", "FullName": "public abstract HttpResponse receiveResponseHeader ()"}}, "Inheritance": [], "ClassName": "org.apache.http.HttpClientConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit An HTTP connection for use on the client side. It is used for sending requests and receiving responses."}