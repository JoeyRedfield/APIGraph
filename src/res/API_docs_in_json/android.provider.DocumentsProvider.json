{"Functions": {"createWebLinkIntent(java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#content#IntentSender_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to create a web link intent for."], ["@B_android#os#Bundle_E@", "Bundle: additional information, such as list of recipients. Optional. This value may be null."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@", "@B_android#app#PendingIntent#getIntentSender_E@"], "Permissions": [], "Description": "Creates an intent sender for a web link, if the document is web linkable. @B_android#app#AuthenticationRequiredException_E@ can be thrown if user does not have sufficient permission for the linked document. Before any new permissions are granted for the linked document, a visible UI must be shown, so the user can explicitly confirm whether the permission grants are expected. The user must be able to cancel the operation. Options passed as an argument may include a list of recipients, such as email addresses. The provider should reflect these options if possible, but it's acceptable to ignore them. In either case, confirmation UI must be shown before any new permission grants are granted. It is all right to generate a web link without granting new permissions, if opening the link would result in a page for requesting permission access. If it's impossible then the operation must fail by throwing an exception.", "history": "Added in API level 26", "FullName": "public IntentSender createWebLinkIntent (String documentId, Bundle options)"}, "removeDocument(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the document to remove."], ["@B_java#lang#String_E@", "String: the parent of the document to move."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the requested document or a document tree. In contrast to @B_android#provider#DocumentsProvider#deleteDocument_E@ it requires specifying the parent. This method is especially useful if the document can be in multiple parents. It's the responsibility of the provider to revoke grants if the document is removed from the last parent, and effectively the document is deleted.", "history": "added in API level 24", "FullName": "public void removeDocument (String documentId, String parentDocumentId)"}, "getDocumentType(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return concrete MIME type of the requested document. Must match the value of @B_android#provider#DocumentsContract#Document#COLUMN_MIME_TYPE_E@ for this document. The default implementation queries @B_android#provider#DocumentsProvider#queryDocument_E@, so providers may choose to override this as an optimization.", "history": "Added in API level 19", "FullName": "public String getDocumentType (String documentId)"}, "call(java.lang.String,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implementation is provided by the parent class. Can be overridden to provide additional functionality, but subclasses must always call the superclass. If the superclass returns null, the subclass may implement custom behavior. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 19", "FullName": "public Bundle call (String method, String arg, Bundle extras)"}, "canonicalize(android.net.Uri)": {"Returns": [["@B_android#net#Uri_E@", "Return the canonical representation of url, or null if canonicalization of that Uri is not supported."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The Uri to canonicalize. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#buildDocumentUriUsingTree_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Can be overridden to provide additional functionality, but subclasses must always call the superclass. If the superclass returns null, the subclass may implement custom behavior. This is typically used to resolve a subtree URI into a concrete document reference, issuing a narrower single-document URI permission grant along the way. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 19", "FullName": "public Uri canonicalize (Uri uri)"}, "removeDocument(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the document to remove."], ["@B_java#lang#String_E@", "String: the parent of the document to move."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the requested document or a document tree. In contrast to @B_android#provider#DocumentsProvider#deleteDocument_E@ it requires specifying the parent. This method is especially useful if the document can be in multiple parents. It's the responsibility of the provider to revoke grants if the document is removed from the last parent, and effectively the document is deleted.", "history": "Added in API level 24", "FullName": "public void removeDocument (String documentId, String parentDocumentId)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown when the query is executed. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#queryChildDocuments_E@"], "Permissions": [], "Description": "WARNING: Sub-classes should not override this method. This method is non-final solely for the purposes of backwards compatibility.", "history": "Added in API level 19", "FullName": "public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal)"}, "openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to return."], ["@B_java#lang#String_E@", "String: the mode to open with, such as 'r', 'w', or 'rw'."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: used by the caller to signal if the request should be cancelled. May be null. This value may be null."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#open_E@", "@B_android#os#ParcelFileDescriptor#createReliablePipe_E@", "@B_android#os#ParcelFileDescriptor#createReliableSocketPair_E@", "@B_android#os#ParcelFileDescriptor#parseMode_E@"], "Permissions": [], "Description": "Open and return the requested document. Your provider should return a reliable @B_android#os#ParcelFileDescriptor_E@ to detect when the remote caller has finished reading or writing the document. Mode \"r\" should always be supported. Provider should throw @B_java#lang#UnsupportedOperationException_E@ if the passing mode is not supported. You may return a pipe or socket pair if the mode is exclusively \"r\" or \"w\", but complex modes like \"rw\" imply a normal file on disk that supports seeking. If you block while downloading content, you should periodically check @B_android#os#CancellationSignal#isCanceled_E@ to abort abandoned open requests.", "history": "Added in API level 19", "FullName": "public abstract ParcelFileDescriptor openDocument (String documentId, String mode, CancellationSignal signal)"}, "renameDocument(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to rename."], ["@B_java#lang#String_E@", "String: the updated display name of the document. The provider may alter this name to meet any internal constraints, such as avoiding conflicting names."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Rename an existing document. If a different @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@ must be used to represent the renamed document, generate and return it. Any outstanding URI permission grants will be updated to point at the new document. If the original @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@ is still valid after the rename, return null.", "history": "added in API level 21", "FullName": "public String renameDocument (String documentId, String displayName)"}, "openAssetFile(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor which you can use to access the file. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened. This value must never be null."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"w\" for write-only access (erasing whatever data is currently in the file), \"wa\" for write-only access to append to any existing data, \"rw\" for read and write access on any existing data, and \"rwt\" for read and write access that truncates any existing file. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openAssetFile (Uri uri, String mode)"}, "queryRecentDocuments(java.lang.String,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: the extra query arguments. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: used by the caller to signal if the request should be cancelled. May be null. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Return recently modified documents under the requested root. This will only be called for roots that advertise @B_android#provider#DocumentsContract#Root#FLAG_SUPPORTS_RECENTS_E@. The returned documents should be sorted by @B_android#provider#DocumentsContract#Document#COLUMN_LAST_MODIFIED_E@ in descending order of the most recently modified documents. If this method is overriden by the concrete DocumentsProvider and @B_android#content#ContentResolver#QUERY_ARG_LIMIT_E@ is specified with a nonnegative int under queryArgs, the result will be limited by that number and @B_android#content#ContentResolver#QUERY_ARG_LIMIT_E@ will be specified under @B_android#content#ContentResolver#EXTRA_HONORED_ARGS_E@. Otherwise, a default 64 limit will be used and no QUERY_ARG* will be specified under @B_android#content#ContentResolver#EXTRA_HONORED_ARGS_E@. Recent documents do not support change notifications.", "history": "Added in API level 29", "FullName": "public Cursor queryRecentDocuments (String rootId, String[] projection, Bundle queryArgs, CancellationSignal signal)"}, "getStreamTypes(android.net.Uri, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns null if there are no possible data streams for the given mimeTypeFilter. Otherwise returns an array of all available concrete MIME types."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */* to retrieve all possible data types."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#getDocumentStreamTypes_E@"], "Permissions": [], "Description": "Called by a client to determine the types of data streams that this content provider support for the given URI. Overriding this method is deprecated. Override @B_android#provider#DocumentsProvider#openTypedDocument_E@ instead.", "history": "added in API level 19", "FullName": "public String[] getStreamTypes (Uri uri, String mimeTypeFilter)"}, "copyDocument(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to copy."], ["@B_java#lang#String_E@", "String: the target document to be copied into as a child."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Copy the requested document or a document tree. Copies a document including all child documents to another location within the same document provider. Upon completion returns the document id of the copied document at the target destination. null must never be returned.", "history": "added in API level 24", "FullName": "public String copyDocument (String sourceDocumentId, String targetParentDocumentId)"}, "querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#database#Cursor_E@", "cursor containing search result. Include @B_android#content#ContentResolver#EXTRA_HONORED_ARGS_E@ in @B_android#database#Cursor_E@ extras @B_android#os#Bundle_E@ when any QUERY_ARG_* value was honored during the preparation of the results."]], "Parameters": [["@B_java#lang#String_E@", "String: the root to search under. This value must never be null."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: the query arguments. @B_android#provider#DocumentsContract#QUERY_ARG_EXCLUDE_MEDIA_E@, @B_android#provider#DocumentsContract#QUERY_ARG_DISPLAY_NAME_E@, @B_android#provider#DocumentsContract#QUERY_ARG_MIME_TYPES_E@, @B_android#provider#DocumentsContract#QUERY_ARG_FILE_SIZE_OVER_E@, @B_android#provider#DocumentsContract#QUERY_ARG_LAST_MODIFIED_AFTER_E@. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract#Root_E@", "@B_android#content#ContentResolver_E@", "@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Return documents that match the given query under the requested root. The returned documents should be sorted by relevance in descending order. How documents are matched against the query string is an implementation detail left to each provider, but it's suggested that at least @B_android#provider#DocumentsContract#Document#COLUMN_DISPLAY_NAME_E@ be matched in a case-insensitive fashion. If your provider is cloud-based, and you have some data cached or pinned locally, you may return the local data immediately, setting @B_android#provider#DocumentsContract#EXTRA_LOADING_E@ on the Cursor to indicate that you are still fetching additional data. Then, when the network data is available, you can send a change notification to trigger a requery and return the complete contents. To support change notifications, you must @B_android#database#Cursor#setNotificationUri_E@ with a relevant Uri, such as @B_android#provider#DocumentsContract#buildSearchDocumentsUri_E@. Then you can call @B_android#content#ContentResolver#notifyChange_E@ with that Uri to send change notifications.", "history": "Added in API level 29", "FullName": "public Cursor querySearchDocuments (String rootId, String[] projection, Bundle queryArgs)"}, "getDocumentStreamTypes(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#getStreamTypes_E@", "@B_android#provider#DocumentsProvider#openTypedDocument_E@"], "Permissions": [], "Description": "Return a list of streamable MIME types matching the filter, which can be passed to @B_android#provider#DocumentsProvider#openTypedDocument_E@. The default implementation returns a MIME type provided by @B_android#provider#DocumentsProvider#queryDocument_E@ as long as it matches the filter and the document does not have the @B_android#provider#DocumentsContract#Document#FLAG_VIRTUAL_DOCUMENT_E@ flag set. Virtual documents must have at least one streamable format.", "history": "Added in API level 24", "FullName": "public String[] getDocumentStreamTypes (String documentId, String mimeTypeFilter)"}, "insert(android.net.Uri,android.content.ContentValues)": {"Returns": [["@B_android#net#Uri_E@", "The URI for the newly inserted item."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The content:// URI of the insertion request. This must not be null. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to add to the database. This must not be null. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#createDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Throws by default, and cannot be overridden.", "history": "Added in API level 19", "FullName": "public final Uri insert (Uri uri, ContentValues values)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle query requests from clients. Apps targeting @B_android#os#Build#VERSION_CODES#O_E@ or higher should override @B_android#content#ContentProvider#query_E@ and provide a stub implementation of this method. This method can be called from multiple threads, as described in Example client call:", "history": "Added in API level 19", "FullName": "public final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)"}, "ejectRoot(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the root to be ejected."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Root_E@"], "Permissions": [], "Description": "Ejects the root. Throws @B_java#lang#IllegalStateException_E@ if ejection failed.", "history": "Added in API level 26", "FullName": "public void ejectRoot (String rootId)"}, "queryDocument(java.lang.String,java.lang.String[])": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to return."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return metadata for the single requested document. You should avoid making network requests to keep this request fast.", "history": "Added in API level 19", "FullName": "public abstract Cursor queryDocument (String documentId, String[] projection)"}, "revokeDocumentPermission(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Revoke any active permission grants for the given @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@, usually called when a document becomes invalid. Follows the same semantics as @B_android#content#Context#revokeUriPermission_E@.", "history": "Added in API level 21", "FullName": "public final void revokeDocumentPermission (String documentId)"}, "openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor which you can use to access the file."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened. This value must never be null."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"w\" for write-only access, \"rw\" for read and write access, or \"rwt\" for read and write access that truncates any existing file. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. For example, if you are downloading a file from the network to service a \"rw\" mode request, you should periodically call @B_android#os#CancellationSignal#throwIfCanceled_E@ to check whether the client has canceled the request and abort the download. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final ParcelFileDescriptor openFile (Uri uri, String mode, CancellationSignal signal)"}, "openFile(android.net.Uri, java.lang.String)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor which you can use to access the file."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"rw\" for read and write access, or \"rwt\" for read and write access that truncates any existing file."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overriden.", "history": "added in API level 19", "FullName": "public final ParcelFileDescriptor openFile (Uri uri, String mode)"}, "query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null provide a default set of columns. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: A Bundle containing all additional information necessary for the query. Values in the Bundle may include SQL style arguments. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#queryRoots_E@", "@B_android#provider#DocumentsProvider#queryRecentDocuments_E@", "@B_android#provider#DocumentsProvider#queryDocument_E@", "@B_android#provider#DocumentsProvider#queryChildDocuments_E@", "@B_android#provider#DocumentsProvider#querySearchDocuments_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 26", "FullName": "public final Cursor query (Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal)"}, "openAssetFile(android.net.Uri, java.lang.String)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor which you can use to access the file."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"w\" for write-only access (erasing whatever data is currently in the file), \"wa\" for write-only access to append to any existing data, \"rw\" for read and write access on any existing data, and \"rwt\" for read and write access that truncates any existing file."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overriden.", "history": "added in API level 19", "FullName": "public final AssetFileDescriptor openAssetFile (Uri uri, String mode)"}, "moveDocument(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to move."], ["@B_java#lang#String_E@", "String: the parent of the document to move."], ["@B_java#lang#String_E@", "String: the target document to be a new parent of the source document."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Move the requested document or a document tree. Moves a document including all child documents to another location within the same document provider. Upon completion returns the document id of the copied document at the target destination. null must never be returned. It's the responsibility of the provider to revoke grants if the document is no longer accessible using sourceDocumentId.", "history": "Added in API level 24", "FullName": "public String moveDocument (String sourceDocumentId, String sourceParentDocumentId, String targetParentDocumentId)"}, "getStreamTypes(android.net.Uri,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns null if there are no possible data streams for the given mimeTypeFilter. Otherwise returns an array of all available concrete MIME types."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried. This value must never be null."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */* to retrieve all possible data types. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#getDocumentStreamTypes_E@"], "Permissions": [], "Description": "Called by a client to determine the types of data streams that this content provider support for the given URI. Overriding this method is deprecated. Override @B_android#provider#DocumentsProvider#openTypedDocument_E@ instead.", "history": "Added in API level 19", "FullName": "public String[] getStreamTypes (Uri uri, String mimeTypeFilter)"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "a MIME type string, or null if there is no type."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI to query. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#getDocumentType_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final String getType (Uri uri)"}, "getDocumentMetadata(java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle of Bundles. This value may be null."]], "Parameters": [["@B_java#lang#String_E@", "String: get the metadata of the document This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract#getDocumentMetadata_E@"], "Permissions": [], "Description": "Returns metadata associated with the document. The type of metadata returned is specific to the document type. For example the data returned for an image file will likely consist primarily or solely of EXIF metadata. The returned @B_android#os#Bundle_E@ will contain zero or more entries depending on the type of data supported by the document provider.", "history": "Added in API level 29", "FullName": "public Bundle getDocumentMetadata (String documentId)"}, "openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor from which the client can read data of the desired type."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried. This value must never be null."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */*, if the caller does not have specific type requirements; in this case the content provider will pick its best type matching the pattern. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional options from the client. The definitions of these are specific to the content provider being called. This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. For example, if you are downloading a file from the network to service a \"rw\" mode request, you should periodically call @B_android#os#CancellationSignal#throwIfCanceled_E@ to check whether the client has canceled the request and abort the download. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocumentThumbnail_E@", "@B_android#provider#DocumentsProvider#openTypedDocument_E@", "@B_android#provider#DocumentsProvider#getDocumentStreamTypes_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openTypedAssetFile (Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal)"}, "copyDocument(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to copy."], ["@B_java#lang#String_E@", "String: the target document to be copied into as a child."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Copy the requested document or a document tree. Copies a document including all child documents to another location within the same document provider. Upon completion returns the document id of the copied document at the target destination. null must never be returned.", "history": "Added in API level 24", "FullName": "public String copyDocument (String sourceDocumentId, String targetParentDocumentId)"}, "isChildDocument(java.lang.String,java.lang.String)": {"Returns": [["boolean", "if given document is a descendant of the given parent."]], "Parameters": [["@B_java#lang#String_E@", "String: parent to verify against."], ["@B_java#lang#String_E@", "String: child to verify."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsContract#Root_E@"], "Permissions": [], "Description": "Test if a document is descendant (child, grandchild, etc) from the given parent. For example, providers must implement this to support @B_android#content#Intent#ACTION_OPEN_DOCUMENT_TREE_E@. You should avoid making network requests to keep this request fast.", "history": "Added in API level 21", "FullName": "public boolean isChildDocument (String parentDocumentId, String documentId)"}, "openFile(android.net.Uri,java.lang.String)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor which you can use to access the file. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened. This value must never be null."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"rw\" for read and write access, or \"rwt\" for read and write access that truncates any existing file. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final ParcelFileDescriptor openFile (Uri uri, String mode)"}, "deleteDocument(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the document to delete."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Delete the requested document. Upon returning, any URI permission grants for the given document will be revoked. If additional documents were deleted as a side effect of this call (such as documents inside a directory) the implementor is responsible for revoking those permissions using @B_android#provider#DocumentsProvider#revokeDocumentPermission_E@.", "history": "Added in API level 19", "FullName": "public void deleteDocument (String documentId)"}, "openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor which you can use to access the file."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI whose file is to be opened. This value must never be null."], ["@B_java#lang#String_E@", "String: Access mode for the file. May be \"r\" for read-only access, \"w\" for write-only access (erasing whatever data is currently in the file), \"wa\" for write-only access to append to any existing data, \"rw\" for read and write access on any existing data, and \"rwt\" for read and write access that truncates any existing file. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. For example, if you are downloading a file from the network to service a \"rw\" mode request, you should periodically call @B_android#os#CancellationSignal#throwIfCanceled_E@ to check whether the client has canceled the request and abort the download. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openAssetFile (Uri uri, String mode, CancellationSignal signal)"}, "openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor from which the client can read data of the desired type. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried. This value must never be null."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */*, if the caller does not have specific type requirements; in this case the content provider will pick its best type matching the pattern. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional options from the client. The definitions of these are specific to the content provider being called. This value may be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#openDocumentThumbnail_E@", "@B_android#provider#DocumentsProvider#openTypedDocument_E@", "@B_android#provider#DocumentsProvider#getDocumentStreamTypes_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Cannot be overridden.", "history": "Added in API level 19", "FullName": "public final AssetFileDescriptor openTypedAssetFile (Uri uri, String mimeTypeFilter, Bundle opts)"}, "attachInfo(android.content.Context,android.content.pm.ProviderInfo)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context this provider is running in"], ["@B_android#content#pm#ProviderInfo_E@", "ProviderInfo: Registered information about this content provider"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implementation is provided by the parent class.", "history": "Added in API level 19", "FullName": "public void attachInfo (Context context, ProviderInfo info)"}, "openTypedDocument(java.lang.String,java.lang.String,android.os.Bundle,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to return."], ["@B_java#lang#String_E@", "String: the MIME type filter for the requested format. May be *\\/*, which matches any MIME type."], ["@B_android#os#Bundle_E@", "Bundle: extra options from the client. Specific to the content provider."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: used by the caller to signal if the request should be cancelled. May be null."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsProvider#getDocumentStreamTypes_E@"], "Permissions": [], "Description": "Open and return the document in a format matching the specified MIME type filter. A provider may perform a conversion if the documents's MIME type is not matching the specified MIME type filter. Virtual documents must have at least one streamable format.", "history": "Added in API level 24", "FullName": "public AssetFileDescriptor openTypedDocument (String documentId, String mimeTypeFilter, Bundle opts, CancellationSignal signal)"}, "DocumentsProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 19", "FullName": "public DocumentsProvider ()"}, "createDocument(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the parent directory to create the new document under."], ["@B_java#lang#String_E@", "String: the concrete MIME type associated with the new document. If the MIME type is not supported, the provider must throw."], ["@B_java#lang#String_E@", "String: the display name of the new document. The provider may alter this name to meet any internal constraints, such as avoiding conflicting names."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a new document and return its newly generated @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@. You must allocate a new @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@ to represent the document, which must not change once returned.", "history": "Added in API level 19", "FullName": "public String createDocument (String parentDocumentId, String mimeType, String displayName)"}, "queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the directory to return children for."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included."], ["@B_java#lang#String_E@", "String: how to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered. This ordering is a hint that can be used to prioritize how data is fetched from the network, but UI may always enforce a specific ordering."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Return the children documents contained in the requested directory. This must only return immediate descendants, as additional queries will be issued to recursively explore the tree. Apps targeting @B_android#os#Build#VERSION_CODES#O_E@ or higher should override @B_android#provider#DocumentsProvider#queryChildDocuments_E@. If your provider is cloud-based, and you have some data cached or pinned locally, you may return the local data immediately, setting @B_android#provider#DocumentsContract#EXTRA_LOADING_E@ on the Cursor to indicate that you are still fetching additional data. Then, when the network data is available, you can send a change notification to trigger a requery and return the complete contents. To return a Cursor with extras, you need to extend and override @B_android#database#Cursor#getExtras_E@. To support change notifications, you must @B_android#database#Cursor#setNotificationUri_E@ with a relevant Uri, such as @B_android#provider#DocumentsContract#buildChildDocumentsUri_E@. Then you can call @B_android#content#ContentResolver#notifyChange_E@ with that Uri to send change notifications.", "history": "Added in API level 19", "FullName": "public abstract Cursor queryChildDocuments (String parentDocumentId, String[] projection, String sortOrder)"}, "queryChildDocuments(java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the directory to return children for."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: Bundle containing sorting information or other argument useful to the provider. If no sorting information is available, default sorting will be used, which may be unordered. See @B_android#content#ContentResolver#QUERY_ARG_SORT_COLUMNS_E@ for details. This value may be null."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Override this method to return the children documents contained in the requested directory. This must return immediate descendants only. If your provider is cloud-based, and you have data cached locally, you may return the local data immediately, setting @B_android#provider#DocumentsContract#EXTRA_LOADING_E@ on Cursor extras to indicate that you are still fetching additional data. Then, when the network data is available, you can send a change notification to trigger a requery and return the complete contents. To return a Cursor with extras, you need to extend and override @B_android#database#Cursor#getExtras_E@. To support change notifications, you must @B_android#database#Cursor#setNotificationUri_E@ with a relevant Uri, such as @B_android#provider#DocumentsContract#buildChildDocumentsUri_E@. Then you can call @B_android#content#ContentResolver#notifyChange_E@ with that Uri to send change notifications.", "history": "Added in API level 26", "FullName": "public Cursor queryChildDocuments (String parentDocumentId, String[] projection, Bundle queryArgs)"}, "delete(android.net.Uri,java.lang.String,java.lang.String[])": {"Returns": [["int", "The number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The full URI to query, including a row ID (if a specific record is requested). This value must never be null."], ["@B_java#lang#String_E@", "String: An optional restriction to apply to rows when deleting. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#provider#DocumentsProvider#deleteDocument_E@"], "Permissions": [], "Description": "Implementation is provided by the parent class. Throws by default, and cannot be overridden.", "history": "Added in API level 19", "FullName": "public final int delete (Uri uri, String selection, String[] selectionArgs)"}, "queryRecentDocuments(java.lang.String,java.lang.String[])": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Return recently modified documents under the requested root. This will only be called for roots that advertise @B_android#provider#DocumentsContract#Root#FLAG_SUPPORTS_RECENTS_E@. The returned documents should be sorted by @B_android#provider#DocumentsContract#Document#COLUMN_LAST_MODIFIED_E@ in descending order, and limited to only return the 64 most recently modified documents. Recent documents do not support change notifications.", "history": "Added in API level 19", "FullName": "public Cursor queryRecentDocuments (String rootId, String[] projection)"}, "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This can potentially have a record ID if this is an update request for a specific record. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to update in the database. This must not be null. This value may be null."], ["@B_java#lang#String_E@", "String: An optional filter to match rows to update. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implementation is provided by the parent class. Throws by default, and cannot be overridden.", "history": "Added in API level 19", "FullName": "public final int update (Uri uri, ContentValues values, String selection, String[] selectionArgs)"}, "queryRoots(java.lang.String[])": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Root_E@ columns to put into the cursor. If null all supported columns should be included."]], "Throws": [["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return all roots currently provided. To display to users, you must define at least one root. You should avoid making network requests to keep this request fast. Each root is defined by the metadata columns described in @B_android#provider#DocumentsContract#Root_E@, including @B_android#provider#DocumentsContract#Root#COLUMN_DOCUMENT_ID_E@ which points to a directory representing a tree of documents to display under that root. If this set of roots changes, you must call @B_android#content#ContentResolver#notifyChange_E@ with @B_android#provider#DocumentsContract#buildRootsUri_E@ to notify the system.", "history": "Added in API level 19", "FullName": "public abstract Cursor queryRoots (String[] projection)"}, "querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])": {"Returns": [["@B_android#database#Cursor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the root to search under."], ["@B_java#lang#String_E@", "String: string to match documents against."], ["@B_java#lang#String_E@", "String: list of @B_android#provider#DocumentsContract#Document_E@ columns to put into the cursor. If null all supported columns should be included."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract_E@"], "Permissions": [], "Description": "Return documents that match the given query under the requested root. The returned documents should be sorted by relevance in descending order. How documents are matched against the query string is an implementation detail left to each provider, but it's suggested that at least @B_android#provider#DocumentsContract#Document#COLUMN_DISPLAY_NAME_E@ be matched in a case-insensitive fashion. If your provider is cloud-based, and you have some data cached or pinned locally, you may return the local data immediately, setting @B_android#provider#DocumentsContract#EXTRA_LOADING_E@ on the Cursor to indicate that you are still fetching additional data. Then, when the network data is available, you can send a change notification to trigger a requery and return the complete contents. To support change notifications, you must @B_android#database#Cursor#setNotificationUri_E@ with a relevant Uri, such as @B_android#provider#DocumentsContract#buildSearchDocumentsUri_E@. Then you can call @B_android#content#ContentResolver#notifyChange_E@ with that Uri to send change notifications.", "history": "Added in API level 19", "FullName": "public Cursor querySearchDocuments (String rootId, String query, String[] projection)"}, "renameDocument(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to rename."], ["@B_java#lang#String_E@", "String: the updated display name of the document. The provider may alter this name to meet any internal constraints, such as avoiding conflicting names."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Rename an existing document. If a different @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@ must be used to represent the renamed document, generate and return it. Any outstanding URI permission grants will be updated to point at the new document. If the original @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@ is still valid after the rename, return null.", "history": "Added in API level 21", "FullName": "public String renameDocument (String documentId, String displayName)"}, "findDocumentPath(java.lang.String,java.lang.String)": {"Returns": [["@B_android#provider#DocumentsContract#Path_E@", "the path of the requested document. If parentDocumentId is null returned root ID must not be null. If parentDocumentId is not null returned root ID must be null."]], "Parameters": [["@B_java#lang#String_E@", "String: the document from which the path starts if not null, or null to indicate a path from the root is requested. This value may be null."], ["@B_java#lang#String_E@", "String: the document which path is requested."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Finds the canonical path for the requested document. The path must start from the parent document if parentDocumentId is not null or the root document if parentDocumentId is null. If there are more than one path to this document, return the most typical one. Include both the parent document or root document and the requested document in the returned path. This API assumes that document ID has enough info to infer the root. Different roots should use different document ID to refer to the same document.", "history": "Added in API level 26", "FullName": "public DocumentsContract.Path findDocumentPath (String parentDocumentId, String childDocumentId)"}, "openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the document to return."], ["@B_android#graphics#Point_E@", "Point: hint of the optimal thumbnail dimensions."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: used by the caller to signal if the request should be cancelled. May be null."]], "Throws": [["@B_android#app#AuthenticationRequiredException_E@", "If authentication is required from the user (such as login credentials), but it is not guaranteed that the client will handle this properly."], ["@B_java#io#FileNotFoundException_E@", ""]], "SeeAlso": ["@B_android#provider#DocumentsContract#Document_E@"], "Permissions": [], "Description": "Open and return a thumbnail of the requested document. A provider should return a thumbnail closely matching the hinted size, attempting to serve from a local cache if possible. A provider should never return images more than double the hinted size. If you perform expensive operations to download or generate a thumbnail, you should periodically check @B_android#os#CancellationSignal#isCanceled_E@ to abort abandoned thumbnail requests.", "history": "Added in API level 19", "FullName": "public AssetFileDescriptor openDocumentThumbnail (String documentId, Point sizeHint, CancellationSignal signal)"}}, "Inheritance": ["@B_android#content#ContentProvider_E@"], "ClassName": "android.provider.DocumentsProvider", "ClassDesc": "Base class for a document provider. A document provider offers read and write access to durable files, such as files stored on a local disk, or files in a cloud storage service. To create a document provider, extend this class, implement the abstract methods, and add it to your manifest like this: When defining your provider, you must protect it with @B_android#Manifest#permission#MANAGE_DOCUMENTS_E@, which is a permission only the system can obtain. Applications cannot use a documents provider directly; they must go through @B_android#content#Intent#ACTION_OPEN_DOCUMENT_E@ or @B_android#content#Intent#ACTION_CREATE_DOCUMENT_E@ which requires a user to actively navigate and select documents. When a user selects documents through that UI, the system issues narrow URI permission grants to the requesting application. A document can be either an openable stream (with a specific MIME type), or a directory containing additional documents (with the @B_android#provider#DocumentsContract#Document#MIME_TYPE_DIR_E@ MIME type). Each directory represents the top of a subtree containing zero or more documents, which can recursively contain even more documents and directories. Each document can have different capabilities, as described by @B_android#provider#DocumentsContract#Document#COLUMN_FLAGS_E@. For example, if a document can be represented as a thumbnail, your provider can set @B_android#provider#DocumentsContract#Document#FLAG_SUPPORTS_THUMBNAIL_E@ and implement @B_android#provider#DocumentsProvider#openDocumentThumbnail_E@ to return that thumbnail. Each document under a provider is uniquely referenced by its @B_android#provider#DocumentsContract#Document#COLUMN_DOCUMENT_ID_E@, which must not change once returned. A single document can be included in multiple directories when responding to @B_android#provider#DocumentsProvider#queryChildDocuments_E@. For example, a provider might surface a single photo in multiple locations: once in a directory of geographic locations, and again in a directory of dates. All documents are surfaced through one or more \"roots.\" Each root represents the top of a document tree that a user can navigate. For example, a root could represent an account or a physical storage device. Similar to documents, each root can have capabilities expressed through @B_android#provider#DocumentsContract#Root#COLUMN_FLAGS_E@."}