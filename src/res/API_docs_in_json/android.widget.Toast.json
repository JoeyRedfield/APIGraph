{"Functions": {"makeText(android.content.Context, int, int)": {"Returns": [["@B_android#widget#Toast_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use. Usually your @B_android#app#Application_E@ or @B_android#app#Activity_E@ object."], ["int", "int: The resource id of the string resource to use. Can be formatted text."], ["int", "int: How long to display the message. Either @B_android#widget#Toast#LENGTH_SHORT_E@ or @B_android#widget#Toast#LENGTH_LONG_E@Value is LENGTH_SHORT or LENGTH_LONG."]], "Throws": [["", "if the resource can't be found."], ["@B_android#content#res#Resources#NotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Make a standard toast that just contains a text view with the text from a resource.", "history": "added in API level 1", "FullName": "public static Toast makeText (Context context, int resId, int duration)"}, "makeText(android.content.Context,int,int)": {"Returns": [["@B_android#widget#Toast_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use. Usually your @B_android#app#Application_E@ or @B_android#app#Activity_E@ object."], ["int", "int: The resource id of the string resource to use. Can be formatted text."], ["int", "int: How long to display the message. Either @B_android#widget#Toast#LENGTH_SHORT_E@ or @B_android#widget#Toast#LENGTH_LONG_E@ Value is @B_android#widget#Toast#LENGTH_SHORT_E@, or @B_android#widget#Toast#LENGTH_LONG_E@"]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "if the resource can't be found."]], "SeeAlso": [], "Permissions": [], "Description": "Make a standard toast that just contains a text view with the text from a resource.", "history": "Added in API level 1", "FullName": "public static Toast makeText (Context context, int resId, int duration)"}, "getHorizontalMargin()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the horizontal margin.", "history": "Added in API level 1", "FullName": "public float getHorizontalMargin ()"}, "getXOffset()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the X offset in pixels to apply to the gravity's location.", "history": "Added in API level 1", "FullName": "public int getXOffset ()"}, "show()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the view for the specified duration.", "history": "Added in API level 1", "FullName": "public void show ()"}, "getGravity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@", "@B_android#widget#Toast#getGravity_E@"], "Permissions": [], "Description": "Get the location at which the notification should appear on the screen.", "history": "Added in API level 1", "FullName": "public int getGravity ()"}, "getYOffset()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Y offset in pixels to apply to the gravity's location.", "history": "Added in API level 1", "FullName": "public int getYOffset ()"}, "setMargin(float,float)": {"Returns": [], "Parameters": [["float", "float: The horizontal margin, in percentage of the container width, between the container's edges and the notification"], ["float", "float: The vertical margin, in percentage of the container height, between the container's edges and the notification"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the margins of the view.", "history": "Added in API level 1", "FullName": "public void setMargin (float horizontalMargin, float verticalMargin)"}, "getVerticalMargin()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical margin.", "history": "Added in API level 1", "FullName": "public float getVerticalMargin ()"}, "setGravity(int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@", "@B_android#widget#Toast#getGravity_E@"], "Permissions": [], "Description": "Set the location at which the notification should appear on the screen.", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity, int xOffset, int yOffset)"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this. Normally view will disappear on its own after the appropriate duration.", "history": "Added in API level 1", "FullName": "public void cancel ()"}, "setGravity(int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@", "@B_android#widget#Toast#getGravity_E@"], "Permissions": [], "Description": "Set the location at which the notification should appear on the screen.", "history": "added in API level 1", "FullName": "public void setGravity (int gravity, int xOffset, int yOffset)"}, "getView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toast#setView_E@"], "Permissions": [], "Description": "Return the view.", "history": "Added in API level 1", "FullName": "public View getView ()"}, "setDuration(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#widget#Toast#LENGTH_SHORT_E@, or @B_android#widget#Toast#LENGTH_LONG_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toast_E@"], "Permissions": [], "Description": "Set how long to show the view for.", "history": "Added in API level 1", "FullName": "public void setDuration (int duration)"}, "makeText(android.content.Context,java.lang.CharSequence,int)": {"Returns": [["@B_android#widget#Toast_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use. Usually your @B_android#app#Application_E@ or @B_android#app#Activity_E@ object."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to show. Can be formatted text."], ["int", "int: How long to display the message. Either @B_android#widget#Toast#LENGTH_SHORT_E@ or @B_android#widget#Toast#LENGTH_LONG_E@ Value is @B_android#widget#Toast#LENGTH_SHORT_E@, or @B_android#widget#Toast#LENGTH_LONG_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make a standard toast that just contains a text view.", "history": "Added in API level 1", "FullName": "public static Toast makeText (Context context, CharSequence text, int duration)"}, "setView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#Toast#getView_E@"], "Permissions": [], "Description": "Set the view to show.", "history": "Added in API level 1", "FullName": "public void setView (View view)"}, "Toast(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use. Usually your @B_android#app#Application_E@ or @B_android#app#Activity_E@ object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct an empty Toast object. You must call @B_android#widget#Toast#setView_E@ before you can call @B_android#widget#Toast#show_E@.", "history": "Added in API level 1", "FullName": "public Toast (Context context)"}, "setText(int)": {"Returns": [], "Parameters": [["int", "int: The new text for the Toast."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the text in a Toast that was previously created using one of the makeText() methods.", "history": "Added in API level 1", "FullName": "public void setText (int resId)"}, "setText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text for the Toast."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the text in a Toast that was previously created using one of the makeText() methods.", "history": "Added in API level 1", "FullName": "public void setText (CharSequence s)"}, "getDuration()": {"Returns": [["int", "Value is @B_android#widget#Toast#LENGTH_SHORT_E@, or @B_android#widget#Toast#LENGTH_LONG_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Toast#setDuration_E@"], "Permissions": [], "Description": "Return the duration.", "history": "Added in API level 1", "FullName": "public int getDuration ()"}, "setMargin(float, float)": {"Returns": [], "Parameters": [["float", "float: The horizontal margin, in percentage of the container width, between the container's edges and the notification"], ["float", "float: The vertical margin, in percentage of the container height, between the container's edges and the notification"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the margins of the view.", "history": "added in API level 1", "FullName": "public void setMargin (float horizontalMargin, float verticalMargin)"}}, "Inheritance": [], "ClassName": "android.widget.Toast", "ClassDesc": "A toast is a view containing a quick little message for the user. The toast class helps you create and show those. When the view is shown to the user, appears as a floating view over the application. It will never receive focus. The user will probably be in the middle of typing something else. The idea is to be as unobtrusive as possible, while still showing the user the information you want them to see. Two examples are the volume control, and the brief message saying that your settings have been saved. The easiest way to use this class is to call one of the static methods that constructs everything you need and returns a new Toast object."}