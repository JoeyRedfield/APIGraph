{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 3", "FullName": "public String toString ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the original position of this completion, typically corresponding to its position in the original adapter.", "history": "Added in API level 3", "FullName": "public int getPosition ()"}, "CompletionInfo(long,int,java.lang.CharSequence)": {"Returns": [], "Parameters": [["long", "long: An id that get passed as is (to the editor's discretion)"], ["int", "int: An index that get passed as is. Typically this is the index in the list of completions inside the editor."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text that should be inserted into the editor when this completion is chosen."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a simple completion with just text, no label.", "history": "Added in API level 3", "FullName": "public CompletionInfo (long id, int index, CharSequence text)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "getId()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the abstract identifier for this completion, typically corresponding to the id associated with it in the original adapter.", "history": "Added in API level 3", "FullName": "public long getId ()"}, "CompletionInfo(long, int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["long", "long: An id that get passed as is (to the editor's discretion)"], ["int", "int: An index that get passed as is. Typically this is the index in the list of completions inside the editor."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text that should be inserted into the editor when this completion is chosen."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a simple completion with just text, no label.", "history": "added in API level 3", "FullName": "public CompletionInfo (long id, int index, CharSequence text)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getLabel()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the user-visible label for the completion, or null if the plain text should be shown. If non-null, this will be what the user sees as the completion option instead of the actual text.", "history": "Added in API level 3", "FullName": "public CharSequence getLabel ()"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the actual text associated with this completion. This is the real text that will be inserted into the editor if the user selects it.", "history": "Added in API level 3", "FullName": "public CharSequence getText ()"}, "CompletionInfo(long,int,java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [], "Parameters": [["long", "long: An id that get passed as is (to the editor's discretion)"], ["int", "int: An index that get passed as is. Typically this is the index in the list of completions inside the editor."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text that should be inserted into the editor when this completion is chosen."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text that the IME should be showing among the completions list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a full completion with both text and label. The text is what will get inserted into the editor, while the label is what the IME should display. If they are the same, use the version of the constructor without a `label' argument.", "history": "Added in API level 3", "FullName": "public CompletionInfo (long id, int index, CharSequence text, CharSequence label)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.CompletionInfo", "ClassDesc": "Information about a single text completion that an editor has reported to an input method. This class encapsulates a completion offered by an application that wants it to be presented to the user by the IME. Usually, apps present their completions directly in a scrolling list for example (UI developers will usually use or extend to implement this). However, in some cases, the editor may not be visible, as in the case in extract mode where the IME has taken over the full screen. In this case, the editor can choose to send their completions to the IME for display. Most applications who want to send completions to an IME should use @B_android#widget#AutoCompleteTextView_E@ as this class makes this process easy. In this case, the application would not have to deal directly with this class. An application who implements its own editor and wants direct control over this would create an array of CompletionInfo objects, and send it to the IME using @B_android#view#inputmethod#InputMethodManager#displayCompletions_E@. The IME would present the completions however they see fit, and call back to the editor through @B_android#view#inputmethod#InputConnection#commitCompletion_E@. The application can then pick up the commit event by overriding @B_android#widget#TextView#onCommitCompletion_E@."}