{"Functions": {"showOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the overflow items from the associated menu.", "history": "added in version 24.2.0", "FullName": "boolean showOverflowMenu ()"}, "setLogo(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to use as a logo"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a logo drawable. This drawable should generally take the place of title text. The logo cannot be clicked. Apps using a logo should also supply a description using @B_android#support#v7#widget#Toolbar#setLogoDescription_E@.", "history": "added in version 24.2.0", "FullName": "void setLogo (Drawable drawable)"}, "getTitleMarginTop()": {"Returns": [["int", "the top title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setTitleMarginTop_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getTitleMarginTop ()"}, "hideOverflowMenu()": {"Returns": [["boolean", "true if the menu was able to be hidden, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the overflow items from the associated menu.", "history": "added in version 24.2.0", "FullName": "boolean hideOverflowMenu ()"}, "dismissPopupMenus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss all currently showing popup menus, including overflow or submenus.", "history": "added in version 24.2.0", "FullName": "void dismissPopupMenus ()"}, "setMinimumHeight(int)": {"Returns": [], "Parameters": [["int", "The minimum height the view will try to be."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum height of the view. It is not guaranteed the view will be able to achieve this minimum height (for example, if its parent layout constrains it with less available height).", "history": "", "FullName": "public void setMinimumHeight (int minHeight)"}, "getCurrentContentInsetRight()": {"Returns": [["int", "the current content inset right in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetStartWithNavigation_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the right side of the bar in the current toolbar configuration.", "history": "added in version 24.2.0", "FullName": "int getCurrentContentInsetRight ()"}, "setNavigationIcon(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the icon to use for the toolbar's navigation button. The navigation button appears at the start of the toolbar if present. Setting an icon will make the navigation button visible. If you use a navigation icon you should also set a description for its action using @B_android#support#v7#widget#Toolbar#setNavigationContentDescription_E@. This is used for accessibility and tooltips.", "history": "added in version 24.2.0", "FullName": "void setNavigationIcon (int resId)"}, "setTitleMarginTop(int)": {"Returns": [], "Parameters": [["int", "int: the top title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getTitleMarginTop_E@"], "Permissions": [], "Description": "Sets the top title margin in pixels.", "history": "added in version 24.2.0", "FullName": "void setTitleMarginTop (int margin)"}, "setContentInsetStartWithNavigation(int)": {"Returns": [], "Parameters": [["int", "int: the inset to use when a navigation icon has been set in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Sets the start content inset to use when a navigation button is present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#support#v7#widget#Toolbar#getContentInsetStart_E@ and this value will be used during layout.", "history": "added in version 24.2.0", "FullName": "void setContentInsetStartWithNavigation (int insetStartWithNavigation)"}, "setTitleMarginBottom(int)": {"Returns": [], "Parameters": [["int", "int: the bottom title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getTitleMarginBottom_E@"], "Permissions": [], "Description": "Sets the bottom title margin in pixels.", "history": "added in version 24.2.0", "FullName": "void setTitleMarginBottom (int margin)"}, "hasExpandedActionView()": {"Returns": [["boolean", "true if the Toolbar has an expanded action view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether this Toolbar is currently hosting an expanded action view. An action view may be expanded either directly from the @B_android#view#MenuItem_E@ it belongs to or by user action. If the Toolbar has an expanded action view it can be collapsed using the @B_android#support#v7#widget#Toolbar#collapseActionView_E@ method.", "history": "added in version 24.2.0", "FullName": "boolean hasExpandedActionView ()"}, "getNavigationIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The navigation icon drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the navigation icon.", "history": "added in version 24.2.0", "FullName": "Drawable getNavigationIcon ()"}, "getTitleMarginEnd()": {"Returns": [["int", "the ending title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setTitleMarginEnd_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getTitleMarginEnd ()"}, "setSubtitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Subtitle to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the subtitle of this toolbar. Subtitles should express extended information about the current content.", "history": "added in version 24.2.0", "FullName": "void setSubtitle (CharSequence subtitle)"}, "setTitleMargin(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the starting title margin in pixels"], ["int", "int: the top title margin in pixels"], ["int", "int: the ending title margin in pixels"], ["int", "int: the bottom title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getTitleMarginStart_E@", "@B_android#support#v7#widget#Toolbar#getTitleMarginTop_E@", "@B_android#support#v7#widget#Toolbar#getTitleMarginEnd_E@", "@B_android#support#v7#widget#Toolbar#getTitleMarginBottom_E@"], "Permissions": [], "Description": "Sets the title margin.", "history": "added in version 24.2.0", "FullName": "void setTitleMargin (int start, int top, int end, int bottom)"}, "setTitleMarginEnd(int)": {"Returns": [], "Parameters": [["int", "int: the ending title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getTitleMarginEnd_E@"], "Permissions": [], "Description": "Sets the ending title margin in pixels.", "history": "added in version 24.2.0", "FullName": "void setTitleMarginEnd (int margin)"}, "getContentInsetStart()": {"Returns": [["int", "The starting content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetLeft_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the starting content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "int getContentInsetStart ()"}, "getSubtitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The current subtitle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the subtitle of this toolbar.", "history": "added in version 24.2.0", "FullName": "CharSequence getSubtitle ()"}, "setPopupTheme(int)": {"Returns": [], "Parameters": [["int", "int: theme used to inflate popup menus"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getPopupTheme_E@"], "Permissions": [], "Description": "Specifies the theme to use when inflating popup menus. By default, uses the same theme as the toolbar itself.", "history": "added in version 24.2.0", "FullName": "void setPopupTheme (int resId)"}, "setContentInsetEndWithActions(int)": {"Returns": [], "Parameters": [["int", "int: the inset to use when a menu has been set in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Sets the start content inset to use when action buttons are present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@ and this value will be used during layout.", "history": "added in version 24.2.0", "FullName": "void setContentInsetEndWithActions (int insetEndWithActions)"}, "getCurrentContentInsetStart()": {"Returns": [["int", "the current content inset start in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the starting side of the bar in the current toolbar configuration.", "history": "added in version 24.2.0", "FullName": "int getCurrentContentInsetStart ()"}, "setSubtitleTextColor(int)": {"Returns": [], "Parameters": [["int", "int: The new text color in 0xAARRGGBB format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color of the subtitle, if present.", "history": "added in version 24.2.0", "FullName": "void setSubtitleTextColor (int color)"}, "getTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The current title."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the title of this toolbar.", "history": "added in version 24.2.0", "FullName": "CharSequence getTitle ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "inflateMenu(int)": {"Returns": [], "Parameters": [["int", "int: ID of a menu resource to inflate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a menu resource into this toolbar. Inflate an XML menu resource into this toolbar. Existing items in the menu will not be modified or removed.", "history": "added in version 24.2.0", "FullName": "void inflateMenu (int resId)"}, "isOverflowMenuShowing()": {"Returns": [["boolean", "true if the overflow menu is currently showing"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the overflow menu is currently showing. This may not reflect a pending show operation in progress.", "history": "added in version 24.2.0", "FullName": "boolean isOverflowMenuShowing ()"}, "getContentInsetRight()": {"Returns": [["int", "The right content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetStart_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetLeft_E@"], "Permissions": [], "Description": "Gets the right content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "int getContentInsetRight ()"}, "getContentInsetEndWithActions()": {"Returns": [["int", "the end content inset used when a menu has been set in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the end content inset to use when action buttons are present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@ and this value will be used during layout.", "history": "added in version 24.2.0", "FullName": "int getContentInsetEndWithActions ()"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Title to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of this toolbar. A title should be used as the anchor for a section of content. It should describe or name the content being viewed.", "history": "added in version 24.2.0", "FullName": "void setTitle (CharSequence title)"}, "getTitleMarginStart()": {"Returns": [["int", "the starting title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setTitleMarginStart_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getTitleMarginStart ()"}, "getLogo()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current logo drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setLogo_E@"], "Permissions": [], "Description": "Return the current logo drawable.", "history": "added in version 24.2.0", "FullName": "Drawable getLogo ()"}, "getNavigationContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The navigation button's content description"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the currently configured content description for the navigation button view. This will be used to describe the navigation action to users through mechanisms such as screen readers or tooltips.", "history": "added in version 24.2.0", "FullName": "CharSequence getNavigationContentDescription ()"}, "getContentInsetEnd()": {"Returns": [["int", "The ending content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetStart_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetLeft_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the ending content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "int getContentInsetEnd ()"}, "setNavigationContentDescription(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a content description string to set, or 0 to clear the description"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a content description for the navigation button if one is present. The content description will be read via screen readers or other accessibility systems to explain the action of the navigation button.", "history": "added in version 24.2.0", "FullName": "void setNavigationContentDescription (int resId)"}, "setTitleMarginStart(int)": {"Returns": [], "Parameters": [["int", "int: the starting title margin in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getTitleMarginStart_E@"], "Permissions": [], "Description": "Sets the starting title margin in pixels.", "history": "added in version 24.2.0", "FullName": "void setTitleMarginStart (int margin)"}, "getTitleMarginBottom()": {"Returns": [["int", "the bottom title margin in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setTitleMarginBottom_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getTitleMarginBottom ()"}, "getCurrentContentInsetLeft()": {"Returns": [["int", "the current content inset left in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetStartWithNavigation_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the left side of the bar in the current toolbar configuration.", "history": "added in version 24.2.0", "FullName": "int getCurrentContentInsetLeft ()"}, "getContentInsetStartWithNavigation()": {"Returns": [["int", "the start content inset used when a navigation icon has been set in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetStartWithNavigation_E@"], "Permissions": [], "Description": "Gets the start content inset to use when a navigation button is present. Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes. The larger value of @B_android#support#v7#widget#Toolbar#getContentInsetStart_E@ and this value will be used during layout.", "history": "added in version 24.2.0", "FullName": "int getContentInsetStartWithNavigation ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#v7#widget#Toolbar#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 24.2.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "Toolbar(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "Toolbar (Context context)"}, "setContentInsetsRelative(int, int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar starting edge"], ["int", "int: Content inset for the toolbar ending edge"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetStart_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetLeft_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar relative to layout direction. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "void setContentInsetsRelative (int contentInsetStart, int contentInsetEnd)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setTitle(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a string to set as the title"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title of this toolbar. A title should be used as the anchor for a section of content. It should describe or name the content being viewed.", "history": "added in version 24.2.0", "FullName": "void setTitle (int resId)"}, "getPopupTheme()": {"Returns": [["int", "resource identifier of the theme used to inflate popup menus, or 0 if menus are inflated against the toolbar theme"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setPopupTheme_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getPopupTheme ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "setContentInsetsAbsolute(int, int)": {"Returns": [], "Parameters": [["int", "int: Content inset for the toolbar's left edge"], ["int", "int: Content inset for the toolbar's right edge"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetStart_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetLeft_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Sets the content insets for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "void setContentInsetsAbsolute (int contentInsetLeft, int contentInsetRight)"}, "getMenu()": {"Returns": [["@B_android#view#Menu_E@", "The toolbar's Menu"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Menu shown in the toolbar. Applications that wish to populate the toolbar's menu can do so from here. To use an XML menu resource, use @B_android#support#v7#widget#Toolbar#inflateMenu_E@.", "history": "added in version 24.2.0", "FullName": "Menu getMenu ()"}, "setTitleTextColor(int)": {"Returns": [], "Parameters": [["int", "int: The new text color in 0xAARRGGBB format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color of the title, if present.", "history": "added in version 24.2.0", "FullName": "void setTitleTextColor (int color)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#v7#widget#Toolbar#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "Toolbar.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getCurrentContentInsetEnd()": {"Returns": [["int", "the current content inset end in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#getContentInsetEndWithActions_E@"], "Permissions": [], "Description": "Gets the content inset that will be used on the ending side of the bar in the current toolbar configuration.", "history": "added in version 24.2.0", "FullName": "int getCurrentContentInsetEnd ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "", "FullName": "void onRtlPropertiesChanged (int layoutDirection)"}, "setSubtitle(int)": {"Returns": [], "Parameters": [["int", "int: String resource ID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the subtitle of this toolbar. Subtitles should express extended information about the current content.", "history": "added in version 24.2.0", "FullName": "void setSubtitle (int resId)"}, "setLogoDescription(int)": {"Returns": [], "Parameters": [["int", "int: String resource id"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a description of the toolbar's logo. This description will be used for accessibility or other similar descriptions of the UI.", "history": "added in version 24.2.0", "FullName": "void setLogoDescription (int resId)"}, "getLogoDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "A description of the logo"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the description of the toolbar's logo.", "history": "added in version 24.2.0", "FullName": "CharSequence getLogoDescription ()"}, "collapseActionView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#hasExpandedActionView_E@"], "Permissions": [], "Description": "Collapse a currently expanded action view. If this Toolbar does not have an expanded action view this method has no effect. An action view may be expanded either directly from the @B_android#view#MenuItem_E@ it belongs to or by user action.", "history": "added in version 24.2.0", "FullName": "void collapseActionView ()"}, "setLogoDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: Description to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a description of the toolbar's logo. This description will be used for accessibility or other similar descriptions of the UI.", "history": "added in version 24.2.0", "FullName": "void setLogoDescription (CharSequence description)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#Toolbar#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "", "FullName": "Toolbar.LayoutParams generateDefaultLayoutParams ()"}, "getOverflowIcon()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The overflow icon drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current drawable used as the overflow icon.", "history": "added in version 24.2.0", "FullName": "Drawable getOverflowIcon ()"}, "onHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the view handled the hover event."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event that describes the hover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@, @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@, or @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_ENTER_E@ when the pointer enters the bounds of the view. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_MOVE_E@ when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action @B_android#view#MotionEvent#ACTION_HOVER_EXIT_E@ when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls @B_android#view#View#setHovered_E@ to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events.", "history": "", "FullName": "boolean onHoverEvent (MotionEvent ev)"}, "setLogo(int)": {"Returns": [], "Parameters": [["int", "int: ID of a drawable resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a logo drawable from a resource id. This drawable should generally take the place of title text. The logo cannot be clicked. Apps using a logo should also supply a description using @B_android#support#v7#widget#Toolbar#setLogoDescription_E@.", "history": "added in version 24.2.0", "FullName": "void setLogo (int resId)"}, "getContentInsetLeft()": {"Returns": [["int", "The left content inset for this toolbar"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#Toolbar#setContentInsetsRelative_E@", "@B_android#support#v7#widget#Toolbar#setContentInsetsAbsolute_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetStart_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetEnd_E@", "@B_android#support#v7#widget#Toolbar#getContentInsetRight_E@"], "Permissions": [], "Description": "Gets the left content inset for this toolbar. The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.", "history": "added in version 24.2.0", "FullName": "int getContentInsetLeft ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v7.widget.Toolbar", "ClassDesc": "A standard toolbar for use within application content. A Toolbar is a generalization of @B_android#support#v7#app#ActionBar_E@ for use within application layouts. While an action bar is traditionally part of an https:##developer#android#com@B_android#app#Activity_E@ opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the @B_android#support#v7#app#AppCompatActivity#setSupportActionBar_E@ method. Toolbar supports a more focused feature set than ActionBar. From start to end, a toolbar may contain a combination of the following optional elements: A navigation button. This may be an Up arrow, navigation menu toggle, close, collapse, done or another glyph of the app's choosing. This button should always be used to access other navigational destinations within the container of the Toolbar and its signified content or otherwise leave the current context signified by the Toolbar. The navigation button is vertically aligned within the Toolbar's minimum height, if set. A branded logo image. This may extend to the height of the bar and can be arbitrarily wide. A title and subtitle. The title should be a signpost for the Toolbar's current position in the navigation hierarchy and the content contained there. The subtitle, if present should indicate any extended information about the current content. If an app uses a logo image it should strongly consider omitting a title and subtitle. One or more custom views. The application may add arbitrary child views to the Toolbar. They will appear at this position within the layout. If a child view's @B_android#support#v7#widget#Toolbar#LayoutParams_E@ indicates a https:##developer#android#com@B_android#view#Gravity_E@ value of https:##developer#android#com@B_android#view#Gravity#CENTER_HORIZONTAL_E@ the view will attempt to center within the available space remaining in the Toolbar after all other elements have been measured. An @B_android#support#v7#widget#ActionMenuView_E@. The menu of actions will pin to the end of the Toolbar offering a few In modern Android UIs developers should lean more on a visually distinct color scheme for toolbars than on their application icon. The use of application icon plus title as a standard layout is discouraged on API 21 devices and newer."}