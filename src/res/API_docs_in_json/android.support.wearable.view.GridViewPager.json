{"Functions": {"getOffscreenPageCount()": {"Returns": [["int", "How many pages will be kept off-screen on all sides"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#wearable#view#GridViewPager#setOffscreenPageCount_E@"], "Permissions": [], "Description": "Returns the number of pages that will be retained on the sides of the current page in the view hierarchy in an idle state. Defaults to 1.", "history": "", "FullName": "int getOffscreenPageCount ()"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void computeScroll ()"}, "getCurrentItem()": {"Returns": [["Point", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "Point getCurrentItem ()"}, "debugIndent(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected static String debugIndent (int depth)"}, "GridViewPager(android.content.Context)": {"Returns": [], "Parameters": [["Context", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "GridViewPager (Context context)"}, "canScrollHorizontally(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean canScrollHorizontally (int direction)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["KeyEvent", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "setSlideAnimationDuration(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void setSlideAnimationDuration (int slideAnimationDuration)"}, "getAdapter()": {"Returns": [["@B_android#support#wearable#view#GridPagerAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "GridPagerAdapter getAdapter ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["MotionEvent", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "getPageRowMargin()": {"Returns": [["int", "the vertical distance between adjacent pages in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the margin between rows of pages.", "history": "", "FullName": "int getPageRowMargin ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onDetachedFromWindow ()"}, "getPageColumnMargin()": {"Returns": [["int", "columnMarginPx horizontal distance between adjacent pages in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the margin between columns of pages.", "history": "", "FullName": "int getPageColumnMargin ()"}, "canScrollVertically(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean canScrollVertically (int direction)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["Parcelable", "Parcelable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "onPageScrolled(int, int, float, float, int, int)": {"Returns": [], "Parameters": [["int", "int: column index of the first page currently being displayed. Page positionX+1 will be visible if offsetX is nonzero."], ["int", "int: row index of the first page currently being displayed. Page positionY+1 will be visible if offseyY is nonzero."], ["float", "float: Value from [0, 1) indicating the left offset from the page at positionX."], ["float", "float: Value from [0, 1) indicating the top offset from the page at positionY."], ["int", "int: Value in pixels indicating the offset from positionX."], ["int", "int: Value in pixels indicating the offset from positionY."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. If you override this method you must call through to the superclass implementation (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled returns.", "history": "", "FullName": "void onPageScrolled (int positionX, int positionY, float offsetX, float offsetY, int offsetLeftPx, int offsetTopPx)"}, "scrollTo(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void scrollTo (int x, int y)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onAttachedToWindow ()"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onSizeChanged (int w, int h, int oldw, int oldh)"}, "requestFitSystemWindows()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void requestFitSystemWindows ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["MotionEvent", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "setPageMargins(int, int)": {"Returns": [], "Parameters": [["int", "int: vertical distance between adjacent pages in pixels"], ["int", "int: horizontal distance between adjacent pages in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the margin between pages.", "history": "", "FullName": "void setPageMargins (int rowMarginPx, int columnMarginPx)"}, "removeView(android.view.View)": {"Returns": [], "Parameters": [["View", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void removeView (View view)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["ViewGroup.LayoutParams", "no returns description in source"]], "Parameters": [["AttributeSet", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "ViewGroup.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "generateDefaultLayoutParams()": {"Returns": [["ViewGroup.LayoutParams", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "onSaveInstanceState()": {"Returns": [["Parcelable", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "setOffscreenPageCount(int)": {"Returns": [], "Parameters": [["int", "int: How many pages will be kept offscreen in an idle state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the number of pages that should be retained to either side of the current page in the view hierarchy in an idle state. Pages beyond this limit will be recreated from the adapter when needed. This is offered as an optimization. If you know in advance the number of pages you will need to support or have lazy-loading mechanisms in place on your pages, tweaking this setting can have benefits in perceived smoothness of paging animations and interaction. If you have a small number of pages (3-4) that you can keep active all at once, less time will be spent in layout for newly created view subtrees as the user pages back and forth. You should keep this limit low, especially if your pages have complex layouts. This setting defaults to 1.", "history": "", "FullName": "void setOffscreenPageCount (int limit)"}, "onApplyWindowInsets(android.view.WindowInsets)": {"Returns": [["WindowInsets", "no returns description in source"]], "Parameters": [["WindowInsets", "WindowInsets no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WindowInsets onApplyWindowInsets (WindowInsets insets)"}, "setConsumeWindowInsets(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to consume, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the grid view pager should consume insets during @B_android#support#wearable#view#GridViewPager#dispatchApplyWindowInsets_E@. The default behavior is to consume insets.", "history": "", "FullName": "void setConsumeWindowInsets (boolean consume)"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "http:##developer#android#com@B_android#view#View_E@", "http:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.wearable.view.GridViewPager", "ClassDesc": "starting with Android Wear 2.0 we no longer encourage bi-directional spacial models for apps. If you are looking to implement vertical paging pattern, consider using the https:##developer#android#com@B_android#support#v7#widget#SnapHelper_E@ and a https:##developer#android#com@B_android#support#v7#widget#RecyclerView_E@ instead. Layout manager that allows the user to navigate both vertically and horizontally through pages of content. You supply an implementation of a https:##developer#android#com@B_android#support#wearable#view#GridPagerAdapter_E@ to generate pages for the view to show."}