{"Functions": {"readLine(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached."]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#io#IOError_E@", "If an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Provides a formatted prompt, then reads a single line of text from the console.", "history": "Added in API level 9", "FullName": "public String readLine (String fmt, Object... args)"}, "reader()": {"Returns": [["@B_java#io#Reader_E@", "The reader associated with this console"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the unique @B_java#io#Reader_E@ object associated with this console. This method is intended to be used by sophisticated applications, for example, a @B_java#util#Scanner_E@ object which utilizes the rich parsing/scanning functionality provided by the For simple applications requiring only line-oriented reading, use The bulk read operations @B_java#io#Reader#read_E@, @B_java#io#Reader#read_E@ and @B_java#io#Reader#read_E@ on the returned object will not read in characters beyond the line bound for each invocation, even if the destination buffer has space for more characters. The Reader's read methods may block if a line bound has not been entered or reached on the console's input device. A line bound is considered to be any one of a line feed (", "history": "Added in API level 9", "FullName": "public Reader reader ()"}, "readLine(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached."]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#io#IOError_E@", "If an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Provides a formatted prompt, then reads a single line of text from the console.", "history": "added in API level 9", "FullName": "public String readLine (String fmt, Object... args)"}, "readPassword(java.lang.String,java.lang.Object...)": {"Returns": [["char[]", "A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached."]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax for the prompt text."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#io#IOError_E@", "If an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.", "history": "Added in API level 9", "FullName": "public char[] readPassword (String fmt, Object... args)"}, "format(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#Console_E@", "This console"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this console's output stream using the specified format string and arguments.", "history": "Added in API level 9", "FullName": "public Console format (String fmt, Object... args)"}, "writer()": {"Returns": [["@B_java#io#PrintWriter_E@", "The printwriter associated with this console"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the unique @B_java#io#PrintWriter_E@ object associated with this console.", "history": "Added in API level 9", "FullName": "public PrintWriter writer ()"}, "printf(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#Console_E@", "This console"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this console's output stream using the specified format string and arguments. An invocation of this method of the form", "history": "Added in API level 9", "FullName": "public Console printf (String format, Object... args)"}, "readLine()": {"Returns": [["@B_java#lang#String_E@", "A string containing the line read from the console, not including any line-termination characters, or null if an end of stream has been reached."]], "Parameters": [], "Throws": [["@B_java#io#IOError_E@", "If an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single line of text from the console.", "history": "Added in API level 9", "FullName": "public String readLine ()"}, "format(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#Console_E@", "This console"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this console's output stream using the specified format string and arguments.", "history": "added in API level 9", "FullName": "public Console format (String fmt, Object... args)"}, "printf(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#Console_E@", "This console"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this console's output stream using the specified format string and arguments. An invocation of this method of the form", "history": "added in API level 9", "FullName": "public Console printf (String format, Object... args)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flushes the console and forces any buffered output to be written immediately .", "history": "Added in API level 9", "FullName": "public void flush ()"}, "readPassword()": {"Returns": [["char[]", "A character array containing the password or passphrase read from the console, not including any line-termination characters, or null if an end of stream has been reached."]], "Parameters": [], "Throws": [["@B_java#io#IOError_E@", "If an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a password or passphrase from the console with echoing disabled", "history": "Added in API level 9", "FullName": "public char[] readPassword ()"}}, "Inheritance": [], "ClassName": "java.io.Console", "ClassDesc": "Methods to access the character-based console device, if any, associated with the current Java virtual machine. Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console. If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the @B_java#lang#System#console_E@ method. If no console device is available then an invocation of that method will return Read and write operations are synchronized to guarantee the atomic completion of critical operations; therefore invoking methods @B_java#io#Console#readLine_E@, @B_java#io#Console#readPassword_E@, @B_java#io#Console#format_E@, @B_java#io#Console#printf_E@ as well as the read, format and write operations on the objects returned by @B_java#io#Console#reader_E@ and @B_java#io#Console#writer_E@ may block in multithreaded scenarios. Invoking @B_java#io#Console#reader_E@ and the @B_java#io#Console#writer_E@ will not close the underlying stream of those objects. The console-read methods return Unless otherwise specified, passing a @B_java#lang#NullPointerException_E@ to be thrown. @B_java#io#Console#readPassword_E@ or @B_java#io#Console#readPassword_E@ and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory."}