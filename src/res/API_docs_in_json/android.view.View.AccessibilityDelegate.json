{"Functions": {"sendAccessibilityEvent(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["int", "int: The type of the event to send."]], "Throws": [], "SeeAlso": ["@B_android#view#View#sendAccessibilityEvent_E@"], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect. The default implementation behaves as @B_android#view#View#sendAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "added in API level 14", "FullName": "public void sendAccessibilityEvent (View host, int eventType)"}, "sendAccessibilityEvent(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["int", "int: The type of the event to send."]], "Throws": [], "SeeAlso": ["@B_android#view#View#sendAccessibilityEvent_E@"], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect. The default implementation behaves as @B_android#view#View#sendAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public void sendAccessibilityEvent (View host, int eventType)"}, "sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event to send."]], "Throws": [], "SeeAlso": ["@B_android#view#View#sendAccessibilityEventUnchecked_E@"], "Permissions": [], "Description": "Sends an accessibility event. This method behaves exactly as @B_android#view#View#AccessibilityDelegate#sendAccessibilityEvent_E@ but takes as an argument an empty @B_android#view#accessibility#AccessibilityEvent_E@ and does not perform a check whether accessibility is enabled. The default implementation behaves as @B_android#view#View#sendAccessibilityEventUnchecked_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public void sendAccessibilityEventUnchecked (View host, AccessibilityEvent event)"}, "onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event to initialize."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onInitializeAccessibilityEvent_E@"], "Permissions": [], "Description": "Initializes an @B_android#view#accessibility#AccessibilityEvent_E@ with information about the the host View which is the event source. The default implementation behaves as @B_android#view#View#onInitializeAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public void onInitializeAccessibilityEvent (View host, AccessibilityEvent event)"}, "dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)": {"Returns": [["boolean", "True if the event population was completed."]], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event."]], "Throws": [], "SeeAlso": ["@B_android#view#View#dispatchPopulateAccessibilityEvent_E@"], "Permissions": [], "Description": "Dispatches an @B_android#view#accessibility#AccessibilityEvent_E@ to the host @B_android#view#View_E@ first and then to its children for adding their text content to the event. The default implementation behaves as @B_android#view#View#dispatchPopulateAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public boolean dispatchPopulateAccessibilityEvent (View host, AccessibilityEvent event)"}, "performAccessibilityAction(android.view.View,int,android.os.Bundle)": {"Returns": [["boolean", "Whether the action was performed."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#View#performAccessibilityAction_E@"], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. The default implementation behaves as @B_android#view#View#performAccessibilityAction_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (View host, int action, Bundle args)"}, "onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)": {"Returns": [["boolean", "True if the event should be sent"]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The View hosting the delegate."], ["@B_android#view#View_E@", "View: The child which requests sending the event."], ["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event to be sent."]], "Throws": [], "SeeAlso": ["@B_android#view#ViewGroup#onRequestSendAccessibilityEvent_E@"], "Permissions": [], "Description": "Called when a child of the host View has requested sending an @B_android#view#accessibility#AccessibilityEvent_E@ and gives an opportunity to the parent (the host) to augment the event. The default implementation behaves as @B_android#view#ViewGroup#onRequestSendAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public boolean onRequestSendAccessibilityEvent (ViewGroup host, View child, AccessibilityEvent event)"}, "onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: The instance to initialize."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onInitializeAccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Initializes an @B_android#view#accessibility#AccessibilityNodeInfo_E@ with information about the host view. The default implementation behaves as @B_android#view#View#onInitializeAccessibilityNodeInfo_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public void onInitializeAccessibilityNodeInfo (View host, AccessibilityNodeInfo info)"}, "getAccessibilityNodeProvider(android.view.View)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeProvider_E@", "The provider."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeProvider_E@"], "Permissions": [], "Description": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to @B_android#accessibilityservice#AccessibilityService_E@s that explore the window content. The default implementation behaves as @B_android#view#View#getAccessibilityNodeProvider_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeProvider getAccessibilityNodeProvider (View host)"}, "onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View hosting the delegate."], ["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The accessibility event which to populate."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onPopulateAccessibilityEvent_E@"], "Permissions": [], "Description": "Gives a chance to the host View to populate the accessibility event with its text content. The default implementation behaves as @B_android#view#View#onPopulateAccessibilityEvent_E@ for the case of no accessibility delegate been set.", "history": "Added in API level 14", "FullName": "public void onPopulateAccessibilityEvent (View host, AccessibilityEvent event)"}, "View.AccessibilityDelegate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public View.AccessibilityDelegate ()"}}, "Inheritance": [], "ClassName": "android.view.View.AccessibilityDelegate", "ClassDesc": "This class represents a delegate that can be registered in a @B_android#view#View_E@ to enhance accessibility support via composition rather via inheritance. It is specifically targeted to widget developers that extend basic View classes i.e. classes in package android.view, that would like their applications to be backwards compatible. A scenario in which a developer would like to use an accessibility delegate is overriding a method introduced in a later API version than the minimal API version supported by the application. For example, the method @B_android#view#View#onInitializeAccessibilityNodeInfo_E@ is not available in API version 4 when the accessibility APIs were first introduced. If a developer would like their application to run on API version 4 devices (assuming all other APIs used by the application are version 4 or lower) and take advantage of this method, instead of overriding the method which would break the application's backwards compatibility, they can override the corresponding method in this delegate and register the delegate in the target View if the API version of the system is high enough, i.e. the API version is the same as or higher than the API version that introduced @B_android#view#View#onInitializeAccessibilityNodeInfo_E@. Here is an example implementation: if (Build.VERSION.SDK_INT >= 14) { // If the API version is equal of higher than the version in // which onInitializeAccessibilityNodeInfo was introduced we // register a delegate with a customized implementation. View view = findViewById(R.id.view_id); view.setAccessibilityDelegate(new AccessibilityDelegate() { public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info) { // Let the default implementation populate the info. super.onInitializeAccessibilityNodeInfo(host, info); // Set some other information. info.setEnabled(host.isEnabled()); } }); } This delegate contains methods that correspond to the accessibility methods in View. If a delegate has been specified the implementation in View hands off handling to the corresponding method in this delegate. The default implementation the delegate methods behaves exactly as the corresponding method in View for the case of no accessibility delegate been set. Hence, to customize the behavior of a View method, clients can override only the corresponding delegate method without altering the behavior of the rest accessibility related methods of the host view. @B_android#os#Build#VERSION_CODES#M_E@, delegate methods on views in the android.widget.* package are called @B_android#view#View#AccessibilityDelegate#onInitializeAccessibilityNodeInfo_E@, as any changes will be overwritten by the host class. Starting in @B_android#os#Build#VERSION_CODES#M_E@, delegate methods are called"}