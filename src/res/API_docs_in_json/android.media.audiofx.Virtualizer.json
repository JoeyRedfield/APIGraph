{"Functions": {"setParameterListener(android.media.audiofx.Virtualizer.OnParameterChangeListener)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#Virtualizer#OnParameterChangeListener_E@", "Virtualizer.OnParameterChangeListener: OnParameterChangeListener interface registered"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an OnParameterChangeListener interface.", "history": "Added in API level 9", "FullName": "public void setParameterListener (Virtualizer.OnParameterChangeListener listener)"}, "getProperties()": {"Returns": [["@B_android#media#audiofx#Virtualizer#Settings_E@", "a Virtualizer.Settings object containing all current parameters values"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the virtualizer properties. This method is useful when a snapshot of current virtualizer settings must be saved by the application.", "history": "Added in API level 9", "FullName": "public Virtualizer.Settings getProperties ()"}, "getStrengthSupported()": {"Returns": [["boolean", "true is strength parameter is supported, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether setting strength is supported. If this method returns false, only one strength is supported and the setStrength() method always rounds to that value.", "history": "Added in API level 9", "FullName": "public boolean getStrengthSupported ()"}, "getVirtualizationMode()": {"Returns": [["int", "the virtualization mode being used. If virtualization is not active, the virtualization mode will be @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_OFF_E@. Otherwise the value will be @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@ or @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@. Virtualization may not be active either because the effect is not enabled or because the current output device is not compatible with this virtualization implementation."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return the virtualization mode being used, if any.", "history": "Added in API level 21", "FullName": "public int getVirtualizationMode ()"}, "Virtualizer(int, int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the Virtualizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. The Virtualizer will be attached to the MediaPlayer or AudioTrack in the same audio session."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "added in API level 9", "FullName": "public Virtualizer (int priority, int audioSession)"}, "canVirtualize(int, int)": {"Returns": [["boolean", "true if the combination of channel mask and virtualization mode is supported, false otherwise. An indication that a certain channel mask is not supported doesn't necessarily mean you cannot play content with that channel mask, it more likely implies the content will be downmixed before being virtualized. For instance a virtualizer that only supports a mask such as @B_android#media#AudioFormat#CHANNEL_OUT_STEREO_E@ will still be able to process content with a mask of @B_android#media#AudioFormat#CHANNEL_OUT_5POINT1_E@, but will downmix the content to stereo first, and then will virtualize, as opposed to virtualizing each channel individually."]], "Parameters": [["int", "int: the channel mask of the content to virtualize."], ["int", "int: the mode for which virtualization processing is to be performed, one of @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@."]], "Throws": [["", "IllegalStateException"], ["", "IllegalArgumentException"], ["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the combination of a channel mask and virtualization mode is supported by this virtualizer. Some virtualizer implementations may only support binaural processing (i.e. only support headphone output, see @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@), some may support transaural processing (i.e. for speaker output, see @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@) for the built-in speakers. Use this method to query the virtualizer implementation capabilities.", "history": "added in API level 21", "FullName": "public boolean canVirtualize (int inputChannelMask, int virtualizationMode)"}, "forceVirtualizationMode(int)": {"Returns": [["boolean", "true if the processing mode is supported, and it is successfully set, or forcing was successfully disabled, false otherwise."]], "Parameters": [["int", "int: one of @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@ to force a particular processing mode, or @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_AUTO_E@ to stop forcing a mode. Value is @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_AUTO_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, or @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Forces the virtualizer effect to use the given processing mode. The effect must be enabled for the forced mode to be applied.", "history": "Added in API level 21", "FullName": "public boolean forceVirtualizationMode (int virtualizationMode)"}, "getRoundedStrength()": {"Returns": [["short", "the strength of the effect. The valid range for strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille the strongest"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the current strength of the effect.", "history": "Added in API level 9", "FullName": "public short getRoundedStrength ()"}, "getSpeakerAngles(int, int, int[])": {"Returns": [["boolean", "true if the combination of channel mask and virtualization mode is supported, false otherwise."]], "Parameters": [["int", "int: the channel mask of the content to virtualize."], ["int", "int: the mode for which virtualization processing is to be performed, one of @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@."], ["int[]", "int: a non-null array whose length is 3 times the number of channels in the channel mask. If the method indicates the configuration is supported, the array will contain upon return triplets of values: for each channel i among the channels of the mask: the element at index 3*i in the array contains the speaker identification (e.g. AudioFormat.CHANNEL_OUT_FRONT_LEFT), the element at index 3*i+1 contains its corresponding azimuth angle expressed in degrees, where 0 is the direction the listener faces, 180 is behind the listener, and -90 is to her/his left, the element at index 3*i+2 contains its corresponding elevation angle where +90 is directly above the listener, 0 is the horizontal plane, and -90 is directly below the listener."]], "Throws": [["", "IllegalStateException"], ["", "IllegalArgumentException"], ["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel mask and virtualization mode. If the virtualization configuration (mask and mode) is supported (see @B_android#media#audiofx#Virtualizer#canVirtualize_E@, the array angles will contain upon return the definition of each virtual speaker and its azimuth and elevation angles relative to the listener. Note that in some virtualizer implementations, the angles may be strength-dependent.", "history": "added in API level 21", "FullName": "public boolean getSpeakerAngles (int inputChannelMask, int virtualizationMode, int[] angles)"}, "setStrength(short)": {"Returns": [], "Parameters": [["short", "short: strength of the effect. The valid range for strength strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille designates the strongest."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the strength of the virtualizer effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the @B_android#media#audiofx#Virtualizer#getRoundedStrength_E@ method to query the (possibly rounded) value that was actually set.", "history": "Added in API level 9", "FullName": "public void setStrength (short strength)"}, "canVirtualize(int,int)": {"Returns": [["boolean", "true if the combination of channel mask and virtualization mode is supported, false otherwise. An indication that a certain channel mask is not supported doesn't necessarily mean you cannot play content with that channel mask, it more likely implies the content will be downmixed before being virtualized. For instance a virtualizer that only supports a mask such as @B_android#media#AudioFormat#CHANNEL_OUT_STEREO_E@ will still be able to process content with a mask of @B_android#media#AudioFormat#CHANNEL_OUT_5POINT1_E@, but will downmix the content to stereo first, and then will virtualize, as opposed to virtualizing each channel individually."]], "Parameters": [["int", "int: the channel mask of the content to virtualize."], ["int", "int: the mode for which virtualization processing is to be performed, one of @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@. Value is @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, or @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the combination of a channel mask and virtualization mode is supported by this virtualizer. Some virtualizer implementations may only support binaural processing (i.e. only support headphone output, see @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@), some may support transaural processing (i.e. for speaker output, see @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@) for the built-in speakers. Use this method to query the virtualizer implementation capabilities.", "history": "Added in API level 21", "FullName": "public boolean canVirtualize (int inputChannelMask, int virtualizationMode)"}, "Virtualizer(int,int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the Virtualizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. The Virtualizer will be attached to the MediaPlayer or AudioTrack in the same audio session."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["", "java.lang.RuntimeException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 9", "FullName": "public Virtualizer (int priority, int audioSession)"}, "setProperties(android.media.audiofx.Virtualizer.Settings)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#Virtualizer#Settings_E@", "Virtualizer.Settings: a Virtualizer.Settings object containing the properties to apply"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the virtualizer properties. This method is useful when virtualizer settings have to be applied from a previous backup.", "history": "Added in API level 9", "FullName": "public void setProperties (Virtualizer.Settings settings)"}, "getSpeakerAngles(int,int,int[])": {"Returns": [["boolean", "true if the combination of channel mask and virtualization mode is supported, false otherwise."]], "Parameters": [["int", "int: the channel mask of the content to virtualize."], ["int", "int: the mode for which virtualization processing is to be performed, one of @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@. Value is @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_BINAURAL_E@, or @B_android#media#audiofx#Virtualizer#VIRTUALIZATION_MODE_TRANSAURAL_E@"], ["int[]", "int: a non-null array whose length is 3 times the number of channels in the channel mask. If the method indicates the configuration is supported, the array will contain upon return triplets of values: for each channel i among the channels of the mask: the element at index 3*i in the array contains the speaker identification (e.g. AudioFormat#CHANNEL_OUT_FRONT_LEFT), the element at index 3*i+1 contains its corresponding azimuth angle expressed in degrees, where 0 is the direction the listener faces, 180 is behind the listener, and -90 is to her/his left, the element at index 3*i+2 contains its corresponding elevation angle where +90 is directly above the listener, 0 is the horizontal plane, and -90 is directly below the listener."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel mask and virtualization mode. If the virtualization configuration (mask and mode) is supported (see @B_android#media#audiofx#Virtualizer#canVirtualize_E@, the array angles will contain upon return the definition of each virtual speaker and its azimuth and elevation angles relative to the listener. Note that in some virtualizer implementations, the angles may be strength-dependent.", "history": "Added in API level 21", "FullName": "public boolean getSpeakerAngles (int inputChannelMask, int virtualizationMode, int[] angles)"}}, "Inheritance": ["@B_android#media#audiofx#AudioEffect_E@"], "ClassName": "android.media.audiofx.Virtualizer", "ClassDesc": "An audio virtualizer is a general name for an effect to spatialize audio channels. The exact behavior of this effect is dependent on the number of audio input channels and the types and number of audio output channels of the device. For example, in the case of a stereo input and stereo headphone output, a stereo widening effect is used when this effect is turned on. An application creates a Virtualizer object to instantiate and control a virtualizer engine in the audio framework. The methods, parameter types and units exposed by the Virtualizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLVirtualizerItf interface. Please refer to this specification for more details. To attach the Virtualizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Virtualizer. NOTE: attaching a Virtualizer to the global audio output mix by use of session 0 is deprecated. See @B_android#media#MediaPlayer#getAudioSessionId_E@ for details on audio sessions. See @B_android#media#audiofx#AudioEffect_E@ class for more details on controlling audio effects."}