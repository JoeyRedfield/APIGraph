{"Functions": {"ByteArrayInputStream(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input buffer."], ["int", "int: the offset in the buffer of the first byte to read."], ["int", "int: the maximum number of bytes to read from the buffer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates ByteArrayInputStream that uses buf as its buffer array. The initial value of pos is offset and the initial value of count is the minimum of offset+length and buf.length. The buffer array is not copied. The buffer's mark is set to the specified offset.", "history": "added in API level 1", "FullName": "public ByteArrayInputStream (byte[] buf, int offset, int length)"}, "skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Skips n bytes of input from this input stream. Fewer bytes might be skipped if the end of the input stream is reached. The actual number k of bytes to be skipped is equal to the smaller of n and count-pos. The value k is added into pos and k is returned.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the buffer to the marked position. The marked position is 0 unless another position was marked or an offset was specified in the constructor.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "ByteArrayInputStream(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input buffer."], ["int", "int: the offset in the buffer of the first byte to read."], ["int", "int: the maximum number of bytes to read from the buffer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates ByteArrayInputStream that uses buf as its buffer array. The initial value of pos is offset and the initial value of count is the minimum of offset+length and buf.length. The buffer array is not copied. The buffer's mark is set to the specified offset.", "history": "Added in API level 1", "FullName": "public ByteArrayInputStream (byte[] buf, int offset, int length)"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the stream has been reached."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This read method cannot block.", "history": "Added in API level 1", "FullName": "public int read ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closing a", "history": "Added in API level 1", "FullName": "public void close ()"}, "ByteArrayInputStream(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the input buffer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ByteArrayInputStream so that it uses buf as its buffer array. The buffer array is not copied. The initial value of pos is 0 and the initial value of count is the length of buf.", "history": "Added in API level 1", "FullName": "public ByteArrayInputStream (byte[] buf)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: the maximum limit of bytes that can be read before the mark position becomes invalid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the current marked position in the stream. ByteArrayInputStream objects are marked at position zero by default when constructed. They may be marked at another position within the buffer by this method. If no mark has been set, then the value of the mark is the offset passed to the constructor (or 0 if the offset was not supplied). Note: The readAheadLimit for this class has no meaning.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "available()": {"Returns": [["int", "the number of remaining bytes that can be read (or skipped over) from this input stream without blocking."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of remaining bytes that can be read (or skipped over) from this input stream. The value returned is count - pos, which is the number of bytes remaining to be read from the input buffer.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data into an array of bytes from this input stream. If pos equals count, then -1 is returned to indicate end of file. Otherwise, the number k of bytes read is equal to the smaller of len and count-pos. If k is positive, then bytes buf[pos] through buf[pos+k-1] are copied into b[off] through b[off+k-1] in the manner performed by System.arraycopy. The value k is added into pos and k is returned. This read method cannot block.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data into an array of bytes from this input stream. If pos equals count, then -1 is returned to indicate end of file. Otherwise, the number k of bytes read is equal to the smaller of len and count-pos. If k is positive, then bytes buf[pos] through buf[pos+k-1] are copied into b[off] through b[off+k-1] in the manner performed by System.arraycopy. The value k is added into pos and k is returned. This read method cannot block.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "markSupported()": {"Returns": [["boolean", "true if this stream instance supports the mark and reset methods; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if this InputStream supports mark/reset. The markSupported method of ByteArrayInputStream always returns true.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "java.io.ByteArrayInputStream", "ClassDesc": "A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream. An internal counter keeps track of the next byte to be supplied by the read method. Closing a"}