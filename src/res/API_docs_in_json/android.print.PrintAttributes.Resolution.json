{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 19", "FullName": "public String toString ()"}, "getHorizontalDpi()": {"Returns": [["int", "The horizontal resolution. Value is 1 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the horizontal resolution in DPI (dots per inch).", "history": "Added in API level 19", "FullName": "public int getHorizontalDpi ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 19", "FullName": "public boolean equals (Object obj)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "The unique resolution id. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unique resolution id. It is unique amongst other resolutions supported by the printer. This id is defined by the client that generated the resolution instance and should not be interpreted by other parties.", "history": "Added in API level 19", "FullName": "public String getId ()"}, "getVerticalDpi()": {"Returns": [["int", "The vertical resolution. Value is 1 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vertical resolution in DPI (dots per inch).", "history": "Added in API level 19", "FullName": "public int getVerticalDpi ()"}, "PrintAttributes.Resolution(java.lang.String,java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The unique resolution id. It is unique amongst other resolutions supported by the printer. This value must never be null."], ["@B_java#lang#String_E@", "String: The localized human readable label. This value must never be null."], ["int", "int: The horizontal resolution in DPI (dots per inch). Value is 1 or greater"], ["int", "int: The vertical resolution in DPI (dots per inch). Value is 1 or greater"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the id is empty or the label is empty or the horizontalDpi is less than or equal to zero or the verticalDpi is less than or equal to zero."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance.", "history": "Added in API level 19", "FullName": "public PrintAttributes.Resolution (String id, String label, int horizontalDpi, int verticalDpi)"}, "getLabel()": {"Returns": [["@B_java#lang#String_E@", "The human readable label. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the resolution human readable label.", "history": "Added in API level 19", "FullName": "public String getLabel ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 19", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.print.PrintAttributes.Resolution", "ClassDesc": "This class specifies a supported resolution in DPI (dots per inch). Resolution defines how many points with different color can be placed on one inch in horizontal or vertical direction of the target media. For example, a printer with 600 DPI can produce higher quality images the one with 300 DPI resolution."}