{"Functions": {"setNightMode(int)": {"Returns": [], "Parameters": [["int", "int: the night mode to set Value is @B_android#app#UiModeManager#MODE_NIGHT_AUTO_E@, @B_android#app#UiModeManager#MODE_NIGHT_NO_E@, or @B_android#app#UiModeManager#MODE_NIGHT_YES_E@"]], "Throws": [], "SeeAlso": ["@B_android#app#UiModeManager#getNightMode_E@"], "Permissions": [], "Description": "Sets the system-wide night mode. The mode can be one of: @B_android#app#UiModeManager#MODE_NIGHT_NO_E@ sets the device into notnight mode @B_android#app#UiModeManager#MODE_NIGHT_YES_E@ sets the device into night mode @B_android#app#UiModeManager#MODE_NIGHT_AUTO_E@ automatically switches between night and notnight based on the device's current location and certain other sensors @B_android#content#res#Configuration#UI_MODE_TYPE_CAR_E@ or @B_android#content#res#Configuration#UI_MODE_TYPE_DESK_E@ mode is enabled on a device. On API 23 through API 28, changes to night mode are always effective. Starting in API 29, when the device is in car mode and this method is called, night mode will change, but the new setting is not persisted and the previously persisted setting will be restored when the device exits car mode. Changes to night mode take effect globally and will result in a configuration change (and potentially an Activity lifecycle event) being applied to all running apps. Developers interested in an app-local implementation of night mode should consider using https:##developer#android#com@B_android#support#v7#app#AppCompatDelegate#setDefaultNightMode_E@ to manage the -night qualifier locally.", "history": "Added in API level 8", "FullName": "public void setNightMode (int mode)"}, "getNightMode()": {"Returns": [["int", "the current night mode, or -1 on error Value is @B_android#app#UiModeManager#MODE_NIGHT_AUTO_E@, @B_android#app#UiModeManager#MODE_NIGHT_NO_E@, or @B_android#app#UiModeManager#MODE_NIGHT_YES_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#UiModeManager#setNightMode_E@"], "Permissions": [], "Description": "Returns the currently configured night mode. May be one of: @B_android#app#UiModeManager#MODE_NIGHT_NO_E@ @B_android#app#UiModeManager#MODE_NIGHT_YES_E@ @B_android#app#UiModeManager#MODE_NIGHT_AUTO_E@ -1 on error", "history": "Added in API level 8", "FullName": "public int getNightMode ()"}, "getCurrentModeType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current running mode type. May be one of @B_android#content#res#Configuration#UI_MODE_TYPE_NORMAL_E@, @B_android#content#res#Configuration#UI_MODE_TYPE_DESK_E@, @B_android#content#res#Configuration#UI_MODE_TYPE_CAR_E@, @B_android#content#res#Configuration#UI_MODE_TYPE_TELEVISION_E@, @B_android#content#res#Configuration#UI_MODE_TYPE_APPLIANCE_E@, @B_android#content#res#Configuration#UI_MODE_TYPE_WATCH_E@, or @B_android#content#res#Configuration#UI_MODE_TYPE_VR_HEADSET_E@.", "history": "Added in API level 8", "FullName": "public int getCurrentModeType ()"}, "disableCarMode(int)": {"Returns": [], "Parameters": [["int", "int: May be 0 or @B_android#app#UiModeManager#DISABLE_CAR_MODE_GO_HOME_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turn off special mode if currently in car mode.", "history": "Added in API level 8", "FullName": "public void disableCarMode (int flags)"}, "enableCarMode(int)": {"Returns": [], "Parameters": [["int", "int: Must be 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force device into car mode, like it had been placed in the car dock. This will cause the device to switch to the car home UI as part of the mode switch.", "history": "Added in API level 8", "FullName": "public void enableCarMode (int flags)"}}, "Inheritance": [], "ClassName": "android.app.UiModeManager", "ClassDesc": "This class provides access to the system uimode services. These services allow applications to control UI modes of the device. It provides functionality to disable the car mode and it gives access to the night mode settings. These facilities are built on top of the underlying @B_android#content#Intent#ACTION_DOCK_EVENT_E@ broadcasts that are sent when the user physical places the device into and out of a dock. When that happens, the UiModeManager switches the system @B_android#content#res#Configuration_E@ to the appropriate UI mode, sends broadcasts about the mode switch, and starts the corresponding mode activity if appropriate. See the broadcasts @B_android#app#UiModeManager#ACTION_ENTER_CAR_MODE_E@ and @B_android#app#UiModeManager#ACTION_ENTER_DESK_MODE_E@ for more information. In addition, the user may manually switch the system to car mode without physically being in a dock. While in car mode -- whether by manual action from the user or being physically placed in a dock -- a notification is displayed allowing the user to exit dock mode. Thus the dock mode represented here may be different than the current state of the underlying dock event broadcast."}